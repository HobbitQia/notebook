{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to HobbitQia's Notebook!","text":"<p>\u8fd9\u91cc\u662f HobbitQia \u7684\u7b14\u8bb0\u672c\ud83d\udcd3~ \u6b22\u8fce\u6765\u73a9\u634f~</p> <p> \u6211\u4ece\u5c71\u4e2d\u6765 \u5e26\u7740\u5170\u82b1\u8349 \u5bb6\u4e2d\u65e0\u5bcc\u8d35 \u53e3\u888b\u65e0\u8d22\u5b9d \u5bd2\u98ce\u7ec8\u523a\u9aa8 \u52e4\u4e3a\u597d\u4ed5\u9014 \u535a\u5f97\u660e\u6708\u51fa \u7528\u5170\u82b1\u6362\u9526\u670d </p>"},{"location":"#about-me","title":"About me","text":""},{"location":"#my-homepage","title":"My Homepage","text":""},{"location":"#my-github","title":"My GitHub","text":""},{"location":"#my-zhihu","title":"My ZhiHu","text":""},{"location":"#my-telegram","title":"My Telegram","text":""},{"location":"#my-gmail-and-my-zju-email","title":"My Gmail  and My ZJU Email","text":""},{"location":"changelog/","title":"\u66f4\u65b0\u8bb0\u5f55","text":"<p>Abstract</p> <p>\u7279\u522b\u9e23\u8c22\uff1a@TonyCrane \u672c\u9875\u9762\u6837\u5f0f\u6765\u81ea TonyCrane \u8001\u5e08\u7684\u63d2\u4ef6\uff0c\u53ef\u89c1  TonyCrane/mkdocs-changelog-plugin</p>"},{"location":"changelog/#2023","title":"2023","text":"2023-11-7\u00b6 <p> System &gt; \u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u5b9e\u8df5 &gt; \u540c\u6b65</p> 2023-11-4\u00b6 <p> System &gt; \u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u5b9e\u8df5 &gt; \u7ebf\u7a0b\u3001\u8c03\u5ea6</p> <p> System &gt; \u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784 &gt; \u5185\u5b58\u5c42\u6b21</p> 2023-10-31\u00b6 <p> \u7b14\u8bb0\u672c\u6837\u5f0f\u5927\u66f4\u65b0\uff01</p>"},{"location":"link/","title":"\u53cb\u94fe","text":"<p>Abstract</p> <p>\u4e00\u4e9b\u670b\u53cb\u4eec\u7684\u7b14\u8bb0\u672c\uff01 \u53cb\u94fe\u6837\u5f0f\u6765\u81ea @TonyCrane</p> \u9e64\u7fd4\u4e07\u91cc\u7684\u7b14\u8bb0\u672c \u4e0a\u5e1d\u8bf4\u8981\u6709\u795e\uff0c\u4e8e\u662f\u4fbf\u6709\u4e86 TonyCrane \u54b8\u9c7c\u6684\u7684\u4ee3\u7801\u7a7a\u95f4 \u4e00\u4e2a\u597d\u602a\u7684\u5b66\u957f\uff08\u5212\u6389 yhwu_is's Notes wyy \u4e3a\u4ec0\u4e48\u662f\u795e FFox's Notes kami\u2757\ufe0f Bowling's TechStack \u5f3a\u5f97\u6050\u6016\u7684\u5b66\u5f1f"},{"location":"CA/","title":"\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0  </p> <ul> <li>\u6559\u6750: Computer Architecture: A Quantitative Approach 6<sup>th</sup> edition </li> <li>\u8001\u5e08: \u5e38\u745e / TA: \u6768\u7533\u6bc5\u3001\u90b1\u660e\u5189</li> </ul>"},{"location":"CA/CA1/","title":"Fundamentals of Computer Design","text":""},{"location":"CA/CA1/#introduction","title":"Introduction","text":"<p>Von Neumann Structure</p> <p>Classes of Computers</p> <ul> <li>Desktop computers PC: Personal Computers</li> <li>Servers computers \u66f4\u5f3a\u5927\u7684\u5904\u7406\u901f\u5ea6\uff0c\u5bb9\u91cf\uff08\u7528\u4e8e\u5197\u4f59\u5907\u4efd\uff09</li> <li>Embedded computers  \u4e0d\u80fd\u968f\u610f\u5b89\u88c5\u7b2c\u4e09\u65b9\u5e94\u7528\u7684\uff0c\u4e0e\u7cfb\u7edf\u4e00\u4f53\uff0c\u79f0\u4e3a\u5d4c\u5165\u5f0f\uff08\u4e0d\u592a\u7b26\u5408\u56fd\u60c5x</li> <li>Personal Mobile Devices \u5982\u624b\u673a\uff0ciPad</li> <li>Supercomputer   </li> </ul> <p>Classed by Flynn \u6309\u7167\u6307\u4ee4\u6d41\u548c\u6570\u636e\u6d41\u8fdb\u884c\u5206\u7c7b</p> <ul> <li>SISD \u5355\u6307\u4ee4\u6d41\u5355\u6570\u636e\u6d41\uff0c\u5982\u65e9\u671f\u7684\u5355\u6838 PC</li> <li>SIMD \u4e00\u6761\u6307\u4ee4\u6709\u591a\u6761\u6570\u636e\u6d41\u52a8\uff08\u5982\u5411\u91cf\u6570\u636e\uff09\uff0c\u65b9\u4fbf\u505a\u6d41\u6c34\u7ebf</li> <li>MISD \u591a\u6307\u4ee4\u6d41\u5355\u6570\u636e\u6d41\uff0c\u5e76\u4e0d\u5b9e\u9645\u5b58\u5728</li> <li>MIMD \u591a\u6307\u4ee4\u6d41\u591a\u6570\u636e\u6d41</li> </ul> <p>Performance</p> <ul> <li>Alogrithm</li> <li>Programming language, compiler, architecture</li> <li>Processor and memory system</li> <li>I/O system (including OS)</li> </ul> <p>Summary</p> <p>According to the process of using data, computers are developing in three fields:</p> <ul> <li>speed up processing (parallel)</li> <li>speed up transmission (accuracy)</li> <li>Increase storage capacity and speed up storage (reliability)</li> </ul>"},{"location":"CA/CA1/#performance","title":"Performance","text":"<p>\u8fd9\u91cc\u6709\u5f88\u591a\u56e0\u7d20\u4f1a\u5f71\u54cd\u6027\u80fd\uff1a\u4f53\u7cfb\u7ed3\u6784\uff0c\u786c\u4ef6\u5b9e\u73b0\uff0c\u7f16\u8bd1\u5668\uff0cOS...</p> <p>We need to be able to define a measure of performance. </p> <ul> <li>Single users on a PC -&gt; a minimization of response time</li> <li>Large data -&gt; a maximization of throughput</li> </ul> <p>\u4e3a\u4e86\u8861\u91cf\u6027\u80fd\uff0c\u6211\u4eec\u6709\u54cd\u5e94\u65f6\u95f4\u548c\u541e\u5410\u91cf\u4e24\u4e2a\u6307\u6807\uff1a</p> <ul> <li>Latency (Response time \u54cd\u5e94\u65f6\u95f4) \u4e00\u4e2a\u4e8b\u4ef6\u5f00\u59cb\u5230\u7ed3\u675f\u7684\u65f6\u95f4  </li> <li>Throughput (bandwidth \u5e26\u5bbd) \u7ed9\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u5b8c\u6210\u4e86\u591a\u5c11\u7684\u5de5\u4f5c\u91cf</li> </ul> <p>\u8fd9\u90e8\u5206\u53ef\u89c1\u8ba1\u7ec4\u7b14\u8bb0</p> <p>The main goal of architecture improvement is to improve the performance of the system.</p>"},{"location":"CA/CA1/#technology-trend","title":"Technology Trend","text":"<p>The improvement of computer architecture</p> <ul> <li>Improvement of input / output </li> <li>The development of memory organization structure</li> <li>Two directions of instruction set development<ul> <li>CISC / RISC </li> </ul> </li> <li>Parallel processing technology \u4e0d\u540c\u5c42\u6b21\u3001\u7c92\u5ea6\u7684\u5e76\u884c</li> </ul>"},{"location":"CA/CA1/#quantitative-approaches","title":"Quantitative approaches","text":""},{"location":"CA/CA1/#cpu-performance","title":"CPU Performance","text":"<ul> <li>CPU \u6267\u884c\u65f6\u95f4 = CPU \u65f6\u949f\u5468\u671f\u6570 * CPU \u65f6\u949f\u5468\u671f\u65f6\u95f4 = CPU \u65f6\u949f\u5468\u671f\u6570 / CPU \u65f6\u949f\u9891\u7387</li> <li>IC\uff1aInstruction Count\uff0c\u6307\u4ee4\u6570</li> <li>CPI\uff1aCycle Per Instruction\uff0c\u6bcf\u6761\u6307\u4ee4\u7684\u65f6\u949f\u5468\u671f\u6570<ul> <li>\u7531 CPU \u786c\u4ef6\u51b3\u5b9a</li> <li>\u4e0d\u540c\u7684\u6307\u4ee4\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684 CPI\uff0c\u5e73\u5747 CPI \u53d6\u51b3\u4e8e\u6307\u4ee4\u7684\u7ec4\u5408\u65b9\u5f0f</li> <li>CPI = CPU \u65f6\u949f\u5468\u671f\u6570 / IC</li> <li>CPU \u6267\u884c\u65f6\u95f4 = IC * CPI / CPU \u65f6\u949f\u9891\u7387</li> </ul> </li> </ul>"},{"location":"CA/CA1/#amdahls-law","title":"Amdahl's Law","text":"<p>Amdahl's Law: the performance improvement to be gained from using some faster mode of execution is limited by the fraction of the time the faster mode can be used. \u5f53\u63d0\u5347\u7cfb\u7edf\u6027\u80fd\u65f6\uff0c\u6709\u591a\u5927\u7684\u6536\u76ca\u53d7\u9650\u4e8e\u88ab\u63d0\u5347\u7684\u90e8\u5206\u6240\u5360\u7684\u8fd0\u884c\u65f6\u95f4\u6bd4\u4f8b</p> <p>\\(T_{improved}=\\dfrac{T_{affected}}{\\text{improvement factor}}+T_{unaffected}\\)</p> <p>Make the common case fast!</p> <p>\u4e5f\u88ab\u7528\u6765\u5206\u6790\u53ef\u884c\u6027</p> <ul> <li> <p>\u52a0\u901f\u6bd4  </p> \\[ \\begin{align*} \\text{Speedup} &amp; =\\dfrac{\\text{Performance for entire task}_\\text{using Enhancement}}{\\text{Performance for entire task}_\\text{without Enhancement}}\\\\ &amp; = \\dfrac{\\text{Total Execution Time}_\\text{without Enhancement}}{\\text{Total Execution Time}_\\text{using Enhancement}} \\end{align*} \\] <p>\u52a0\u901f\u6bd4 Sp = \u6539\u8fdb\u540e\u7684\u6027\u80fd / \u6539\u8fdb\u524d\u7684\u6027\u80fd = \u6539\u8fdb\u524d\u7684\u65f6\u95f4 / \u6539\u8fdb\u540e\u7684\u65f6\u95f4</p> </li> <li> <p>\u6267\u884c\u65f6\u95f4 \\(T_{new} = T_{old}\\times \\left((1-f)+\\dfrac{f}{Sp}\\right)\\) \\(f\\) \u6307\u6539\u8fdb\u7684\u90e8\u5206\u6240\u5360\u7684\u6bd4\u4f8b</p> </li> <li>\\(Sp_{overall} = \\dfrac{T_{old}}{T_{new}} = \\dfrac{1}{(1-f)+\\dfrac{f}{Sp}}\\)<ul> <li>\u5176\u4e2d \\(Sp\\) \u4e3a\u88ab\u4f18\u5316\u90e8\u5206\u7684\u52a0\u901f\u6bd4\uff0c\\(Sp_\\text{overall}\\) \u4e3a\u6574\u4f53\u52a0\u901f\u6bd4\uff0c\\(f\\) \u4e3a\u88ab\u4f18\u5316\u90e8\u5206\u6240\u5360\u7684\u8fd0\u884c\u65f6\u95f4\u6bd4\u4f8b</li> </ul> </li> </ul>"},{"location":"CA/CA1/#great-architecture-ideas","title":"Great Architecture Ideas","text":"<ul> <li>\u6469\u5c14\u5b9a\u5f8b<ul> <li>\u6bcf\u8fc7 18-24 \u4e2a\u6708\uff0c\u96c6\u6210\u7535\u8def\u7684\u6676\u4f53\u7ba1\u6570\u91cf\u5c06\u589e\u52a0\u4e00\u500d</li> </ul> </li> <li>\u4f7f\u7528\u62bd\u8c61\u6765\u7b80\u5316\u8bbe\u8ba1</li> <li>\u8ba9\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u66f4\u5feb</li> <li>\u901a\u8fc7\u5e76\u884c\u6765\u63d0\u9ad8\u6027\u80fd</li> <li>\u7531\u5f88\u591a\u7ea7\u522b\u7684\u5e76\u884c\uff0c\u6bd4\u5982\u6307\u4ee4\u96c6\u5e76\u884c\u3001\u8fdb\u7a0b\u5e76\u884c\u7b49</li> <li>\u901a\u8fc7\u6d41\u6c34\u7ebf\u6765\u63d0\u9ad8\u6027\u80fd<ul> <li>\u5c06\u4efb\u52a1\u5206\u4e3a\u591a\u6bb5\uff0c\u8ba9\u591a\u4e2a\u4efb\u52a1\u7684\u4e0d\u540c\u9636\u6bb5\u540c\u65f6\u8fdb\u884c</li> <li>\u901a\u5e38\u7528\u6765\u63d0\u9ad8\u6307\u4ee4\u541e\u5410\u91cf</li> </ul> </li> <li>\u901a\u8fc7\u9884\u6d4b\u6765\u63d0\u9ad8\u6027\u80fd</li> <li>\u4f7f\u7528\u5c42\u6b21\u5316\u7684\u5185\u5b58<ul> <li>\u8ba9\u6700\u5e38\u8bbf\u95ee\u7684\u6570\u636e\u5728\u66f4\u9ad8\u5c42\u7ea7\uff0c\u8bbf\u95ee\u66f4\u5feb</li> </ul> </li> </ul>"},{"location":"CA/CA1/#isa","title":"ISA","text":"<ul> <li>Instruction Set Architecture  </li> </ul> <p>Instruction Set Design Issues</p> <ul> <li>Where are operands stored? registers, memory, stack, accumulator</li> <li>How many explicit operands are there? (Classification of ISAs)  0, 1, 2, or 3 </li> <li>How is the operand location specified? (Addressing Modes) register, immediate, indirect, ...</li> <li>What type &amp; size of operands are supported? (Data Representation) byte, int, float, double, string, vector, ...</li> <li>What operations are supported? (Types of Instructions) add, sub, mul, move, compare, ...</li> </ul> <p>Basic Principles</p> <ul> <li>Compatibility</li> <li>Versatility</li> <li>High efficiency</li> <li>Security</li> </ul>"},{"location":"CA/CA1/#isa-classification-basis","title":"ISA Classification Basis","text":"<p>\u8fd9\u91cc\u4e3b\u8981\u6307\u7684\u662f\u4ece\u54ea\u91cc\u53d6\u6570\uff0c\u5b58\u5230\u54ea\u91cc\u4ee5\u53ca\u8ba1\u7b97\u7684\u89c4\u5219\u3002</p> <ul> <li>stack     First operand removed from second op replaced by the result.  </li> <li>accumulator<ul> <li>One implicit operand: the accumulator; one explicit operand: mem location</li> <li>Accumulator is both an implicit input operand and a result  </li> </ul> </li> <li>register<ul> <li>Register-memory architecture \u4efb\u4f55\u6307\u4ee4\u90fd\u53ef\u4ee5\u8bbf\u5b58</li> <li>Load-store architecture \u53ea\u6709 load/store \u7684\u65f6\u5019\u624d\u80fd\u8bbf\u5b58\uff0c\u5176\u4ed6\u65f6\u5019\u90fd\u662f\u57fa\u4e8e\u5bc4\u5b58\u5668\u64cd\u4f5c </li> </ul> </li> </ul>"},{"location":"CA/CA1/#gpr-classification","title":"GPR Classification","text":"<p>A+B</p> <p></p> <p>More: try to do with \\(D=A*B-(A+C*B)\\)</p> <p>GPR \u901f\u5ea6\u5feb\uff0c\u4f46\u662f GPR \u592a\u591a\u4e5f\u4f1a\u6709\u8d44\u6e90\u7684\u6d6a\u8d39\u548c\u6027\u80fd\u4e0b\u964d\uff08\u5982\u5bfb\u627e\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff09</p>"},{"location":"CA/CA2/","title":"Pipelining","text":"<p>Abstract</p> <p></p> <p>What is pipelining? How is the pipelining Implemented? What makes pipelining hard to implement?  </p>"},{"location":"CA/CA2/#what-is-pipelining","title":"What is pipelining?","text":"<p>\u4ece\u4e24\u4e2a\u89d2\u5ea6\u8fdb\u884c\u52a0\u901f\uff1a\u5bf9\u6bcf\u4e00\u6761\u7684\u6307\u4ee4\u8fdb\u884c\u52a0\u901f\uff1b\u5bf9\u4e00\u6bb5\u7a0b\u5e8f\u7684\u6267\u884c\u8fdb\u884c\u52a0\u901f</p> <p>Pipelining is an implementation technique whereby multiple instructions are overlapped in execution; it takes advantage of parallelism that exists among the actions needed to execute an instruction.</p> <p>\u673a\u5236\u4e0a\uff0c\u5148\u8fdb\u884c\u5206\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7528\u4e0d\u540c\u7684\u90e8\u4ef6\uff0c\u5c31\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u3002\u6211\u4eec\u7528 Buffer \u5b58\u653e\u4e86\u4e34\u65f6\u7684\u7ed3\u679c\uff0c\u6709\u4eba\u653e\u6709\u4eba\u53d6</p> <p>\u5047\u8bbe\u4e00\u6761\u6307\u4ee4\u7684\u6267\u884c\u5206\u4e3a\u4e0b\u9762\u4e09\u6bb5\uff1a</p> <p>\u90a3\u4e48\u6211\u4eec\u6267\u884c\u7684\u6a21\u5f0f\u53ef\u4ee5\u6709\u4e0b\u9762\u4e09\u79cd\uff1a</p> <p>Three modes of execution</p> <ul> <li>Sequential execution  </li> <li>Single overlapping execution</li> <li>Twice overlapping execution</li> </ul>"},{"location":"CA/CA2/#sequential-execution","title":"Sequential execution","text":"<p>\u6ca1\u6709\u6d41\u6c34\u7ebf\u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u6761\u6307\u4ee4\u987a\u5e8f\u6267\u884c\uff0c\u6267\u884c\u65f6\u95f4\u5c31\u662f\u6bcf\u4e00\u6761\u6307\u4ee4\u7684\u6bcf\u4e2a\u9636\u6bb5\u65f6\u95f4\u6c42\u548c\u3002</p>"},{"location":"CA/CA2/#overlapping-execution","title":"Overlapping execution","text":"<p>\u91cd\u53e0\u6267\u884c\u65f6\uff0c\u5982\u679c\u4e0d\u540c\u9636\u6bb5\u65f6\u95f4\u4e0d\u4e00\u81f4\uff0c\u5982 ID \u9636\u6bb5\u65f6\u95f4\u8f83\u957f\uff0c\u90a3\u4e48\u9700\u8981\u7b49\u5f85\uff0c\u6d6a\u8d39\u8d44\u6e90\uff1b\u5982 EX \u9636\u6bb5\u65f6\u95f4\u8f83\u957f\uff0c\u90a3\u4e48\u4ea7\u751f\u51b2\u7a81\uff0c\u6267\u884c\u90e8\u4ef6\u4e0d\u591f\u3002</p> <p>\u56e0\u6b64\u7406\u60f3\u60c5\u51b5\u662f\u8ba9\u4e09\u4e2a\u9636\u6bb5\u7684\u65f6\u95f4\u76f8\u7b49\u3002</p> <ul> <li> <p>Single \u597d\u5904\uff1a\u65f6\u95f4\u7f29\u77ed \u2153\uff0c\u4f46\u63d0\u9ad8\u4e86\u786c\u4ef6\u5f00\u9500\uff0c\u800c\u4e14\u6709\u5192\u9669\u3002 </p> </li> <li> <p>Twice   \u597d\u5904\uff1a\u65f6\u95f4\u7f29\u77ed \u2154\uff0c\u4f46\u9700\u8981\u66f4\u590d\u6742\u7684\u786c\u4ef6\uff0c\u800c\u4e14\u9700\u8981\u5355\u72ec\u7684 FETCH DECODE EXE \u90e8\u4ef6\u3002     </p> </li> </ul> <p>\u5982\u4f55\u5b9e\u73b0\u91cd\u53e0\uff1f- buffer Adding instruction buffer between memory and instruction decode unit. \u6dfb\u52a0 buffer \u4e4b\u540e\uff0cIF \u9636\u6bb5\u65f6\u95f4\u53d8\u5f97\u5f88\u77ed\uff0c\u6b64\u65f6\u53ef\u4ee5\u548c ID \u9636\u6bb5\u5408\u5e76\uff08\u628a\u4e8c\u6b21\u91cd\u53e0\u53d8\u4e3a\u4e86\u4e00\u6b21\u91cd\u53e0\uff09\u3002</p> <p>\u4f46\u5982\u679c\u5408\u5e76\u540e IFID \u548c EX \u9636\u6bb5\u65f6\u95f4\u4e0d\u4e00\u81f4\uff0c\u4e5f\u4f1a\u6709\u6267\u884c\u90e8\u4ef6\u7684\u6d6a\u8d39\u3002 \u5982\u4f55\u5e73\u6ed1\u901f\u5ea6\u7684\u5dee\u5f02\uff1f- buffer  </p> <p>Common features: They work by FIFO, and are composed of a group of several storage units that can be accessed quickly and related control logic. </p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6dfb\u52a0 buffer \u4e4b\u540e\uff0cID \u9636\u6bb5\u4e0d\u7528\u7b49\u5f85 EX \u9636\u6bb5\u6280\u672f\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u6761\u7684\u8bd1\u7801\uff0c\u56e0\u4e3a ID \u9636\u6bb5\u7684\u7ed3\u679c\u5df2\u7ecf\u5b58\u653e\u5728 buffer \u4e2d\u4e86\u3002</p>"},{"location":"CA/CA2/#classes-of-pipelining","title":"Classes of pipelining","text":"<p>Characteristics of pipelining</p> <ul> <li>Single function pipelining: only one fixed function pipelining.</li> <li> <p>Multi function pipelining: each section of the pipelining can be connected differently for several different functions. \u4e0d\u540c\u8fd0\u7b97\uff0c\u7528\u5230\u6d41\u6c34\u7ebf\u4e2d\u4e0d\u540c\u7684\u6bb5\uff0c\u8fd9\u6837\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u529f\u80fd\u3002</p> Example <p></p> <p>\u9488\u5bf9\u591a\u529f\u80fd\u6d41\u6c34\u7ebf\u7684\u5212\u5206:</p> <ul> <li>Static pipelining \u9759\u6001\u6d41\u6c34\u7ebf\uff1a\u540c\u4e00\u4e2a\u65f6\u523b\u6d41\u6c34\u7ebf\u53ea\u80fd\u505a\u4e00\u4e2a\u529f\u80fd\u3002 \u4f8b\u5982\u5728\u521a\u521a\u7684\u4f8b\u5b50\u4e2d\uff0c\u6d41\u6c34\u7ebf\u8981\u4e48\u505a\u6d6e\u70b9\u52a0\u6cd5\uff0c\u8981\u4e48\u505a\u4e58\u6cd5\u3002</li> <li> <p>Dynamic pipelining \u52a8\u6001\u6d41\u6c34\u7ebf\uff1a\u540c\u4e00\u4e2a\u65f6\u523b\u6d41\u6c34\u7ebf\u53ef\u4ee5\u505a\u591a\u4e2a\u529f\u80fd\u3002  </p> Example <p></p> <p>\u53ef\u4ee5\u4e0d\u7528\u7b49\u6d6e\u70b9\u52a0\u6cd5\u7b2c n \u6761\u7ed3\u675f\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6d6e\u70b9\u4e58\u6cd5\u3002</p> </li> </ul> </li> </ul> <p>\u8fd8\u53ef\u4ee5\u4ece\u4e0d\u540c\u7c92\u5ea6\u5206\u7c7b\uff1a</p> <ul> <li>Component level pipelining (in component - operation pipelining)</li> <li>Processor level pipelining (inter component - instruction pipelining)</li> <li>Inter processor pipelining (inter processor - macro pipelining)</li> </ul> <p>\u8fd8\u53ef\u4ee5\u5206\u4e3a\u7ebf\u6027/\u975e\u7ebf\u6027\uff1a</p> <ul> <li>Linear pipelining</li> <li> <p>Nonlinear pipelining \u975e\u7ebf\u6027\uff0c\u529f\u80fd\u90e8\u4ef6\u53ef\u80fd\u591a\u6b21\u4f7f\u7528\uff0c\u9020\u6210\u56de\u8def</p> Example <p></p> </li> </ul> <p>\u8fd8\u53ef\u4ee5\u5206\u4e3a\u987a\u5e8f/\u4e71\u5e8f\uff1a</p> <ul> <li>Ordered pipelining</li> <li>Disordered pipelining \u8fdb\u6765\u548c\u6d41\u51fa\u7684\u987a\u5e8f\u4e0d\u4e00\u6837\u3002\u540e\u9762\u7684\u6307\u4ee4\u4e0e\u524d\u9762\u7684\u6307\u4ee4\u65e0\u5173\uff0c\u5219\u53ef\u4ee5\u5148\u51fa\u6765\uff0c\u4e0d\u80fd\u5219\u8981\u7b49\u5f85\u3002</li> </ul> <p>\u8fd8\u53ef\u4ee5\u5206\u4e3a\u6807\u91cf/\u5411\u91cf\u5904\u7406\u5668\uff1a</p> <ul> <li>Scalar processor</li> <li>Vector pipelining processor: The processor has vector data representation and vector instructions. It is the combination of vector data representation and pipelining technology.  </li> </ul>"},{"location":"CA/CA2/#performance-evaluation-of-pipelining","title":"Performance evaluation of pipelining","text":""},{"location":"CA/CA2/#throughput","title":"Throughput","text":"<p>\u6d41\u6c34\u7ebf\u5e0c\u671b\u6211\u4eec\u5355\u4f4d\u65f6\u95f4\u5185\u5904\u7406\u7684\u4efb\u52a1\u8d8a\u591a\u8d8a\u597d\uff0c\u5373\u63d0\u9ad8\u541e\u5410\u7387\u3002</p> <p>Throughput(TP) \\(TP=\\dfrac{n}{T_K}&lt;TP_{max}\\)\uff08\u5b9e\u9645\u4e0a TP \u4f1a\u6709\u635f\u8017\uff09 </p> <p>\\(TP=\\dfrac{n}{n+m-1}TP_{max}\\)</p> <ul> <li>if \\(n&gt;&gt;m, TP\\approx TP_{max}\\)</li> </ul> <p>Suppose the time of segments are different in pipelining, then the longest segment in the pipelining is called the bottleneck segment.</p> <p>Example</p> <ul> <li>\\(M = 4\\)</li> <li>Time of S1, S3, S4: \\(\\delta t\\)</li> <li>Time of S2: \\(3\\delta t\\) (Bottleneck)</li> </ul> <p> </p> <p>\u53ef\u4ee5\u770b\u5230 \\(TP_{max}\\) \u53ea\u548c\u74f6\u9888\u6bb5\u7684\u65f6\u95f4\u6709\u5173</p>"},{"location":"CA/CA2/#common-methods-to-solve-pipeline-bottleneck","title":"Common methods to solve pipeline bottleneck","text":"<ul> <li> <p>Subdivision </p> <p>\u628a\u74f6\u9888\u6bb5\u5206\u6210\u82e5\u5e72\u6bb5\u6267\u884c </p> </li> <li> <p>Repetition</p> <p>\u5728\u74f6\u9888\u6bb5\u591a\u4f7f\u7528\u51e0\u4e2a\u90e8\u4ef6 </p> </li> </ul>"},{"location":"CA/CA2/#speedup","title":"Speedup","text":"<p>\\(S_p = \\dfrac{n\\times m \\times \\delta t_0}{m(m+n-1)\\delta t_0} = \\dfrac{n}{m+n-1}\\)</p> <ul> <li>if \\(n&gt;&gt;m, S_p\\approx m\\)</li> </ul>"},{"location":"CA/CA2/#efficiency","title":"Efficiency","text":"<p>\u6548\u7387\uff0c\u4ece\u8ba1\u7b97\u673a\u90e8\u4ef6\u7684\u89d2\u5ea6\uff1a\u7eb5\u8f74\u4ee3\u8868\u4f7f\u7528\u7684\u4e0d\u540c\u7684\u529f\u80fd\u90e8\u4ef6\u3002\u6548\u7387\u6307\u7684\u662f\u6211\u4eec\u771f\u6b63\u4f7f\u7528\u8fd9\u4e2a\u90e8\u4ef6\u5360\u6574\u4e2a\u65f6\u7a7a\u7684\u767e\u5206\u6bd4\u3002</p> <p>\\(\\eta = \\dfrac{n\\times m \\times \\delta t_0}{m(m+n-1)\\delta t_0} = \\dfrac{n}{m+n-1}\\)</p> <ul> <li>\u6ce8\u610f\u6548\u7387\u5f97\u5230\u7684\u7ed3\u679c\u5e94\u8be5\u662f\u767e\u5206\u6bd4\uff0c\u4e4b\u524d\u7684\u541e\u5410\u91cf\u3001\u52a0\u901f\u6bd4\u90fd\u662f\u6ca1\u6709\u91cf\u7eb2\u7684\u6570\u3002</li> <li>if \\(n&gt;&gt;m, \\eta\\approx m\\)</li> </ul>"},{"location":"CA/CA2/#pipeline-performance","title":"Pipeline Performance","text":"<p>Vector Calculation in Static Pipeline</p> <p>\u73b0\u5728\u6709\u4e24\u4e2a\u5411\u91cf A \u548c B\uff0c\u6211\u4eec\u8981\u8ba1\u7b97 A \u70b9\u4e58 B\uff0c\u901a\u8fc7\u4e0b\u9762\u7684\u52a8\u6001\u53cc\u529f\u80fd\u6d41\u6c34\u7ebf\u8fd0\u7b97\u3002 </p> <p>\u6ce8\u610f\u5230\u8fd9\u91cc\u662f\u9759\u6001\u6d41\u6c34\u7ebf\uff0c\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u505a\u4e00\u7c7b\u4e8b\u60c5\uff0c\u9700\u8981\u5148\u5b8c\u6210\u4e00\u79cd\u64cd\u4f5c\u518d\u5b8c\u6210\u53e6\u4e00\u79cd\u3002\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u5148\u505a\u4e58\u6cd5\uff0c\u6392\u7a7a\uff0c\u518d\u505a\u52a0\u6cd5\u3002\u505a\u52a0\u6cd5\u65f6\uff0c\u7b2c\u4e09\u4e2a\u4e58\u6cd5\u7684\u7ed3\u679c\u9700\u8981\u7b49\u524d\u4e24\u4e2a\u4e58\u6cd5\u7684\u7ed3\u679c\u76f8\u52a0\u540e\uff0c\u518d\u8ba1\u7b97\u3002 </p> <p>\u5f97\u5230 \\(T_p=7/15\\delta t, S_p = 1.6, \\eta=32%\\)</p> <p>Vector Calculation in Dynamic Pipeline</p> <p>\u52a8\u6001\u6d41\u6c34\u7ebf\uff0c\u53ef\u4ee5\u5728\u524d\u4e00\u4e2a\u529f\u80fd\u8fd8\u6ca1\u6709\u505a\u5b8c\u7684\u65f6\u5019\u6267\u884c\u53e6\u4e00\u4e2a\u529f\u80fd\uff0c\u4e0d\u9700\u8981\u6392\u7a7a\u3002 </p> <p>\u8fd9\u91cc\u5f53\u4e24\u4e2a\u4e58\u6cd5\u7684\u7ed3\u679c\u7b97\u51fa\u6765\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6267\u884c\u5bf9\u5e94\u7684\u52a0\u6cd5\u3002 </p> <p>\u6d41\u6c34\u7ebf\u7684\u6bb5\u6570 m \u4e0d\u662f\u8d8a\u591a\u8d8a\u597d\u3002</p> <p>Too many stages:</p> <ul> <li>Lots of complications</li> <li>Should take care of possible dependencies among in-flight instructions</li> <li>Control logic is huge</li> </ul> <p>\u6d41\u6c34\u7ebf\u7684\u6027\u80fd\u6709\u5173\uff1a\u52a8\u6001\uff08\u4e0d\u9700\u8981\u6392\u7a7a\uff0c\u4f46\u9700\u8981\u786c\u4ef6\u652f\u6301\uff09\u8fd8\u662f\u9759\u6001\uff0c\u6d41\u6c34\u7ebf\u6bb5\u6570\uff0c\u4ee3\u7801\u8d28\u91cf\uff08\u5192\u9669\uff09</p>"},{"location":"CA/CA2/#hazards-of-pipelining","title":"Hazards of Pipelining","text":"<p>Hazards</p> <ul> <li>Situations that prevent starting the next instruction in the next cycle.</li> <li> <p>Structure hazards</p> <p>A required resource is busy. * Data hazard</p> <p>Need to wait for previous instruction to complete its data read/write. * Control hazard</p> <p>Deciding on control action depends on previous instruction.</p> </li> </ul>"},{"location":"CA/CA2/#structure-hazards","title":"Structure Hazards","text":"<p>\u5bf9\u7ed3\u6784\u7684\u4e89\u7528\uff0c\u5982 memory. </p> <p>\u4e00\u822c\u52a0 bubble\uff0c\u6216\u8005\u52a0\u786c\u4ef6\u3002</p>"},{"location":"CA/CA2/#data-hazards","title":"Data Hazards","text":"<p>An instruction depends on completion of data access by a previous instruction.  </p> <p>\u53ef\u4ee5\u52a0 bubble, \u6216\u8005\u901a\u8fc7 forwarding \u524d\u9012\u6570\u636e\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u60c5\u51b5\u90fd\u53ef\u4ee5\u89e3\u51b3\u3002</p> <ul> <li> <p>Read after write: RAW  </p> <pre><code>FADD.D F6\uff0cF0\uff0cF12\nFSUB.D F8\uff0cF6\uff0cF14\n</code></pre> <p>Forwarding \u89e3\u51b3\u8fd9\u79cd\u7c7b\u578b\u7684\u5192\u9669\u3002 </p> </li> <li> <p>Write after read: WAR</p> <pre><code>FDIV.D F2\uff0cF6\uff0cF4\nFADD.D F6\uff0cF0\uff0cF12\n</code></pre> <p>Name Dependences\uff08\u5728\u4e71\u5e8f\u6d41\u6c34\u7ebf\u4e2d\u53ef\u80fd\u51fa\u73b0\u5192\u9669\uff09</p> </li> <li> <p>Write after write: WAW</p> <pre><code>FDIV.D F2\uff0cF0\uff0cF4\nFSUB.D F2\uff0cF6\uff0cF14\n</code></pre> <p>Name Dependences</p> </li> </ul> <p>\u4f46\u662f\u5e76\u4e0d\u662f\u6240\u6709\u7684 RAW \u90fd\u53ef\u4ee5\u901a\u8fc7 Forwarding \u89e3\u51b3\uff0c\u5982 Load-use Hazard. </p> <p>\u6709\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6307\u4ee4\u8fdb\u884c\u8c03\u5ea6\uff0c\u6539\u53d8\u6307\u4ee4\u7684\u987a\u5e8f\uff0c\u4ece\u800c\u907f\u514d stall \u7684\u60c5\u51b5\u3002</p> <p>Code Scheduling to Avoid Stalls</p> <p></p> <ul> <li>\u9759\u6001\u8c03\u5ea6\uff1a\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u8fd0\u884c\uff0c\u7f16\u8bd1\u5668\u4e3a\u6211\u4eec\u4f18\u5316\u4e86\u4ee3\u7801\uff0c\u6539\u53d8\u6267\u884c\u987a\u5e8f\u3002</li> <li>\u52a8\u6001\u8c03\u5ea6\uff1a\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u5904\u7406\u5668\u4e3a\u6211\u4eec\u4f18\u5316\u4e86\u4ee3\u7801\uff0c\u6539\u53d8\u6267\u884c\u987a\u5e8f\u3002</li> </ul>"},{"location":"CA/CA2/#control-hazards","title":"Control Hazards","text":"<p>\u4e3a\u4e86\u51cf\u5c11\u5206\u652f\u6307\u4ee4\u5e26\u6765\u7684 stall\uff0c\u6211\u4eec\u4f7f\u7528\u5206\u652f\u9884\u6d4b\u7684\u6280\u672f\u3002</p> <ul> <li>Static branch prediction<ul> <li>Based on typical branch behavior</li> <li>e.g. \u5faa\u73af\uff0cif-else \u8bed\u53e5<ul> <li>Predict backward branches taken</li> <li>Predict forward branches not taken</li> </ul> </li> </ul> </li> <li>Dynamic branch prediction<ul> <li>Hardware measures actual branch behavior<ul> <li>e.g. \u6839\u636e\u5386\u53f2\u8bb0\u5f55\uff08\u5982\u4e0a\u4e00\u6b21\u5206\u652f\u7684\u7ed3\u679c\uff09\uff0c\u9884\u6d4b\u4e0b\u4e00\u6b21\u7684\u5206\u652f</li> </ul> </li> <li>Assume future behavior will continue the trend</li> </ul> </li> </ul>"},{"location":"CA/CA2/#data-hazards-forwarding-vs-stalling","title":"Data Hazards: Forwarding vs. Stalling","text":""},{"location":"CA/CA2/#control-hazards_1","title":"Control Hazards","text":"<p>\u5728 RISC-V \u4e2d\uff0c\u6709\u65e0\u6761\u4ef6\u8df3\u8f6c <code>jal, jalr</code> \u548c\u6709\u6761\u4ef6\u8df3\u8f6c <code>beq, bne, blt, bge, bltu, bgeu</code>\u3002</p> <p>\u53ef\u4ee5\u5728 ID \u9636\u6bb5\u5c31\u7b97\u51fa\u8981\u8df3\u8f6c\u7684\u76ee\u6807\u5730\u5740\uff0c\u540c\u65f6\u9884\u6d4b\u5206\u652f\u7684\u7ed3\u679c\u3002\u53ea\u6709\u9884\u6d4b\u9519\u8bef\u65f6\u624d\u9700\u8981 stall \u6765 flush \u6389\u4e4b\u524d\u7684\u7ed3\u679c\uff0c\u9884\u6d4b\u6210\u529f\u4e0d\u9700\u8981 stall\u3002</p>"},{"location":"CA/CA2/#static-branch-prediction","title":"Static Branch Prediction","text":"<ul> <li> <p>Prediction taken</p> <p></p> </li> <li> <p>Prediction not taken</p> </li> <li> <p>Delayed Branch</p> <p>The behavior of a delayed branched is the same whether or not the branch is taken. \u5373\u65e0\u8bba\u5206\u652f\u662f\u5426\u53d1\u751f\uff0c\u5206\u652f\u540e\u9762\u7684\u6307\u4ee4\u90fd\u8981\u6267\u884c\u3002\uff08\u5ef6\u65f6\u69fd\uff09</p> </li> </ul> <p>Is delay slot a really good design?</p> <p>RISC-V \u548c\u5fae\u67b6\u6784\u7ed1\u5b9a\u4e0d\u6df1\uff0c\u800c\u4e14\u5ef6\u8fdf\u69fd\u4e5f\u6709\u5f0a\u7aef\u3002</p>"},{"location":"CA/CA2/#dynamic-branch-prediction","title":"Dynamic Branch Prediction","text":"<p>Use dynamic prediction</p> <ul> <li>Branch prediction buffer (aka branch history table)</li> <li>Indexed by recent branch instruction addresses</li> <li>Stores outcome (taken/not taken)</li> <li> <p>To execute a branch</p> <ul> <li> <p>Check table, expect the same outcome</p> <p>\u628a\u4e4b\u524d\u5927\u5bb6\u7684\u7ed3\u679c\u5b58\u5728\u4e00\u4e2a\u8868\u91cc\uff0c\u901a\u8fc7\u5386\u53f2\u5224\u65ad\u672a\u6765\uff0c\u6839\u636e\u4e4b\u524d\u7684\u5206\u652f\u7ed3\u679c\u9884\u6d4b\u8fd9\u6b21\u3002</p> </li> <li> <p>Start fetching from fall-through or target</p> </li> <li>If wrong, flush pipeline and flip prediction</li> </ul> </li> </ul>"},{"location":"CA/CA2/#branch-history-tablebht","title":"Branch History Table(BHT)","text":"<ul> <li>1-Bit Predictor</li> <li> <p>2-Bit Predictor</p> <p></p> <p>\u5b9e\u9645\u4e0a\u4e24\u4f4d\u7684\u6548\u679c\u5df2\u7ecf\u5f88\u597d\uff0c\u800c\u4e14\u8d44\u6e90\u5f00\u9500\u4e0d\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u4e00\u822c\u4e0d\u4f1a\u518d\u63d0\u5347\u4f4d\u6570\u3002</p> </li> </ul>"},{"location":"CA/CA2/#advanced-techniques-for-instruction-delivery-and-speculation","title":"Advanced Techniques for Instruction Delivery and Speculation","text":"<ul> <li> <p>Increasing Instruction Fetch Bandwidth</p> <ul> <li> <p>Branch-Target Buffers(BTBs)     </p> <p>\u7c7b\u4f3c\u4e8e TLB\uff0c\u653e\u5206\u652f\u9884\u6d4b\u7684\u76ee\u6807\u5730\u5740\u3002\u5982\u679c\u6709\u8df3\u8f6c\u7684\u5206\u652f\u6307\u4ee4\u4e0d\u5728\u8868\u4e2d\uff0c\u5c31\u52a0\u5165\uff1b\u5982\u679c\u6709\u8868\u4e2d\u7684\u5206\u652f\u6307\u4ee4\u4e0d\u53d1\u751f\u8df3\u8f6c\uff0c\u5c31\u53bb\u6389\u3002 </p> </li> </ul> </li> <li> <p>Specialized Branch Predictors: Predicting Procedure Returns, Indirect Jumps, and Loop Branches</p> <ul> <li>Integrated Instruction Fetch Units</li> </ul> </li> <li> <p>Benefit</p> <ul> <li>Get instructions at branch target faster</li> <li>It can provide multiple instructions at the branch target once, which is necessary for the multi processor;</li> <li>branch folding<ul> <li>It is possible to achieve unconditional branching without delay, or sometimes conditional branching without delay</li> </ul> </li> </ul> </li> </ul>"},{"location":"CA/CA2/#schedule-of-nonlinear-pipelining","title":"Schedule of Nonlinear pipelining","text":"<p>\u5bf9\u4e8e\u975e\u7ebf\u6027\u6d41\u6c34\u7ebf\uff0c\u529f\u80fd\u90e8\u4ef6\u53ef\u80fd\u7ecf\u5386\u591a\u6b21\uff0c\u6709\u8c03\u5ea6\u95ee\u9898\u3002</p> <p>Question</p> <p>\u7eb5\u8f74\u4ee3\u8868\u4e0d\u540c\u7684\u529f\u80fd\u90e8\u4ef6\uff0c\u6a2a\u5750\u6807\u8868\u793a\u62cd\u6570\u3002\u5373\u6bcf\u4e00\u62cd\u9700\u8981\u7528\u5230\u7684\u529f\u80fd\u90e8\u4ef6\u3002 </p> <p>\u7b97\u6cd5\uff1a</p> <ul> <li> <p>Initial conflict vector</p> <p>\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u7b2c\u51e0\u62cd\u662f\u4e0d\u80fd\u4f7f\u7528\u7684\u3002\u5c06\u51e0\u4e2a\u4e8c\u8fdb\u5236\u6570\u53d6\u5e76\u96c6\u3002</p> </li> <li> <p>Conflict vector</p> </li> <li>State transition graph</li> <li>Circular queue</li> <li>Shortest average interval</li> </ul> <p>Example</p> <ul> <li> <p>Initial conflict vector</p> <p></p> <p>\u5bf9\u6bcf\u4e00\u4e2a\u90e8\u4ef6\u5206\u5f00\u6765\u770b</p> <ul> <li>\u7b2c\u4e00\u4e2a\u90e8\u4ef6\uff0c\u9694 8 \u62cd\u4f1a\u4ea7\u751f\u51b2\u7a81\uff1b\u7b2c\u4e8c\u4e2a\u90e8\u4ef6\uff1a1\uff0c5\uff0c6\uff1b\u7b2c\u4e09\u4e2a\u90e8\u4ef6\uff1a\u65e0\uff1b\u7b2c\u56db\u3001\u4e94\u4e2a\u90e8\u4ef6\uff1a1</li> <li>\u5c06\u5bf9\u5e94\u4e8c\u8fdb\u5236\u6570\u7684\u7b2c 1\u30015\u30016\u30018 \u4f4d\u8bbe\u4e3a 1\uff0c\u5176\u4ed6\u4f4d\u4e3a 0\uff0c\u5f97\u5230\u4e86\u521d\u59cb\u7684\u51b2\u7a81\u5411\u91cf 10110001\u3002</li> </ul> </li> <li> <p>Conflict vector</p> <p></p> <p>\u5bf9\u4e8e\u7b2c\u4e09\u5217\uff0c\u9694\u4e24\u62cd\u8fdb\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c\u6211\u4eec\u5c31\u628a\u51b2\u7a81\u5411\u91cf\u5411\u53f3\u79fb\u4e24\u4f4d\uff08\u9ad8\u4f4d\u8865 0\uff09\uff0c\u5f97\u5230\u4e86\u65b0\u7684\u51b2\u7a81\u5411\u91cf\uff0c\u5e76\u548c\u672c\u6765\u7684\u51b2\u7a81\u5411\u91cf\u6216\u8d77\u6765\u5f97\u5230 CCV\u3002\uff08\u6ce8\u610f\u8fd9\u91cc\u6700\u5de6\u4fa7\u7684\u4e00\u5217\u8868\u793a\u5411\u53f3\u79fb\u52a8\u4e86\u591a\u5c11\u6b21\uff09</p> <p>\u627e\u5230\u4e86\u4e00\u4e2a\u5faa\u73af\u8c03\u5ea6\uff1a2-2-7</p> </li> <li> <p>State transition graph</p> <p></p> </li> </ul>"},{"location":"CA/CA2/#summary","title":"Summary","text":"<p>Summary</p> <ol> <li>How the instruction is executed<ul> <li>Sequential execution</li> <li>Overlap once</li> <li>Second overlap</li> <li>Pipeline</li> </ul> </li> <li>Classification of pipelines<ul> <li>Single function, multi-function</li> <li>Static, dynamic</li> <li>Linear, non-linear</li> <li>In-order, out-of-order</li> </ul> </li> <li>Performance indicators of the pipeline<ul> <li>Throughput rate</li> <li>Speedup ratio effectiveness</li> </ul> </li> <li>Factors affecting the performance of the pipeline<ul> <li>Pipeline design</li> <li>Type of instructions</li> <li>Instructions related<ul> <li>Data dependence</li> <li>Name dependence</li> <li>Control dependence</li> </ul> </li> </ul> </li> <li>Dynamic Branch Prediction<ul> <li>Branch History Table (BHT)</li> <li>Branch-Target Buffer (BTB)</li> </ul> </li> <li>Non-linear pipeline scheduling problem</li> </ol>"},{"location":"CA/CA3/","title":"Memory Hierachy","text":""},{"location":"CA/CA3/#introduction","title":"Introduction","text":""},{"location":"CA/CA3/#memory","title":"Memory","text":"<p>\u5185\u5b58\u5c42\u6b21\uff1a</p> <ul> <li>Register</li> <li>Cache</li> <li>Memory</li> <li>Storage</li> </ul> <p>\u5b58\u50a8\u6280\u672f\uff1a</p> <ul> <li>Mechanical Memory</li> <li>Electronic Memory<ul> <li>SRAM</li> <li>DRAM<ul> <li>SDRAM </li> <li>DDR</li> </ul> </li> <li>GDRAM<ul> <li>GDDR</li> </ul> </li> <li>HBM</li> <li>EPPROM<ul> <li>NAND</li> <li>NOR</li> </ul> </li> </ul> </li> <li>Optical Memory</li> </ul>"},{"location":"CA/CA3/#cache-concept","title":"Cache Concept","text":"<p>Cache: a safe place for hiding or storing things. \uff08\u73b0\u5728\u4e5f\u4e0d\u5b89\u5168\uff09</p> <ul> <li> <p>Cache Hit/Miss: When the processor can/cannot find a requested data item in the cache</p> <p>Cache Miss \u4f1a\u5e26\u6765\u989d\u5916\u7684\u5f00\u9500\uff1a\u7531 Latency, Bandwith \u51b3\u5b9a\u3002</p> </li> <li> <p>Cache Block/Line: A fixed-size collection of data containing the requested word, retrieved from the main memory and placed into the cache.</p> </li> <li> <p>Cache Locality: </p> <ul> <li> <p>Temporal locality: need the requested word again soon</p> <p>\u8bbf\u95ee\u8fc7\u8fd9\u4e2a\u6570\u636e\uff0c\u4e4b\u540e\u5f88\u53ef\u80fd\u518d\u6b21\u8bbf\u95ee\u8fd9\u4e2a\u6570\u636e\u3002</p> </li> <li> <p>Spatial locality: likely need other data in the block soon</p> <p>\u8bbf\u95ee\u4e86\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u4e4b\u540e\u5f88\u53ef\u80fd\u8bbf\u95ee\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002</p> </li> </ul> </li> </ul> <p>36 terms of Cache</p> <p></p>"},{"location":"CA/CA3/#four-questions-for-cache-designers","title":"Four Questions for Cache Designers","text":"<p>\u8fd9\u90e8\u5206\u5185\u5bb9\u53ef\u89c1\u8ba1\u7ec4\u7b14\u8bb0</p> <p>Caching is a general concept used in processors, operating systems, file systems, and applications.</p> <ul> <li>Q1: Where can a block be placed in the upper level/main memory? (Block placement)<ul> <li>Fully Associative, Set Associative, Direct Mapped</li> </ul> </li> <li>Q2: How is a block found if it is in the upper level/main memory? (Block identification)<ul> <li>Tag/Block</li> </ul> </li> <li>Q3: Which block should be replaced on a Cache/main memory miss? (Block replacement)<ul> <li>Random, LRU,FIFO</li> </ul> </li> <li>Q4: What happens on a write? (Write strategy)<ul> <li>Write Back or Write Through (with Write Buffer)</li> </ul> </li> </ul>"},{"location":"CA/CA3/#q1-block-placement","title":"Q1: Block Placement","text":"<ul> <li> <p>Direct mapped</p> <p>\u4e00\u4e2a\u5757\u5728 cache \u4e2d\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u4f4d\u7f6e\uff08\u901a\u5e38\u901a\u8fc7\u53d6\u6a21\u5f97\u5230\uff09\u3002</p> </li> <li> <p>Fully associative</p> <p>\u5757\u53ef\u4ee5\u653e\u5728 cache \u91cc\u7684\u4efb\u610f\u4f4d\u7f6e\u3002\uff08\u4e0d\u597d\u627e\uff09</p> </li> <li> <p>Set associative</p> <ul> <li>\u5757\u53ef\u4ee5\u5728\u4e00\u4e2a\u7ec4\u91cc\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u7ec4\u91cc\u53ef\u4ee5\u653e\u82e5\u5e72\u4e2a\u5757\u3002</li> <li>\u76f4\u63a5\u6620\u5c04\u76f8\u5f53\u4e8e\u4e00\u8def\u7ec4\u76f8\u8054\uff0c\u5168\u76f8\u8054\u76f8\u5f53\u4e8e n \u8def\u7ec4\u76f8\u8054\uff08n \u662f cache \u7684\u5757\u6570\uff09</li> </ul> </li> </ul> <p>\u4e00\u822c\u60c5\u51b5\uff0c\\(n\\leq 4\\)</p>"},{"location":"CA/CA3/#q2-block-identification","title":"Q2: Block Identification","text":""},{"location":"CA/CA3/#q3-block-replacement","title":"Q3: Block Replacement","text":"<ul> <li>Random replacement - randomly pick any block</li> <li> <p>Least-Recently Used (LRU) - pick the block in the set which was least recently accessed</p> <p>\u9700\u8981\u989d\u5916\u7684\u4f4d\u6570\u6765\u8bb0\u5f55\u8bbf\u95ee\u7684\u65f6\u95f4\u3002\u4e00\u822c\u6211\u4eec\u7528\u7684\u662f\u8fd1\u4f3c\u7684 LRU\u3002</p> </li> <li> <p>First In, First Out (FIFO) - Choose a block from the set which was first came into the cache</p> </li> </ul> <p>Strategy of Block Replacement</p> <p>Suppose: </p> <ul> <li> <p>Cache block size is 3, and access sequence is shown as follows.  </p> <p>2, 3, 2, 1, 5, 2, 4, 5, 3, 4</p> </li> <li> <p>FIFO, LRU and OPT are used to simulate the use and replacement of cache block. \uff08OPT \u662f\u4e00\u79cd\u7406\u60f3\u60c5\u51b5\uff0c\u7528\u6765\u8861\u91cf\u7b97\u6cd5\u6027\u80fd\uff09</p> <ul> <li> <p>FIFO</p> <p></p> </li> <li> <p>LRU</p> <p></p> </li> <li> <p>OPT</p> <p></p> </li> </ul> </li> </ul> <p>Hit rate is related to the replacement algorithm, the access sequence, the cache block size.</p>"},{"location":"CA/CA3/#stack-replacement-algorithm","title":"Stack replacement algorithm","text":"<p>\u6709\u4e9b\u7b97\u6cd5\u968f\u7740 N \u589e\u5927\u547d\u4e2d\u7387\u975e\u4e0b\u964d\uff0c\u6709\u4e9b\u7b97\u6cd5\u968f\u7740 N \u589e\u5927\u547d\u4e2d\u7387\u53cd\u800c\u4f1a\u4e0b\u964d\u3002 \u6211\u4eec\u628a\u968f\u7740 N \u589e\u5927\u547d\u4e2d\u7387\u975e\u4e0b\u964d\u7684\u7b97\u6cd5\u79f0\u4e3a stack replacement algorithm\u3002</p> <p>\\(B_t(n)\\) represents the set of access sequences contained in a cache block of size \\(n\\) at time \\(t\\).</p> <ul> <li>\\(B_t(n)\\) is the subset of \\(B_t(n\uff0b1)\\).</li> </ul> <p>LRU replacement algorithm is a stack replacement algorithm, while FIFO is not. For LRU algorithm, the hit ratio always increases with the increase of cache block.</p> <p>Using LRU</p> <p>\u7528\u6808\u6765\u6a21\u62df LRU\uff0c\u6808\u9876\u662f\u6700\u8fd1\u8bbf\u95ee\u7684\uff0c\u6808\u5e95\u662f\u6700\u4e45\u672a\u8bbf\u95ee\u7684\uff0c\u6bcf\u6b21\u8981\u66ff\u6362\u7684\u65f6\u5019\uff0c\u66ff\u6362\u6808\u5e95\u7684\u5143\u7d20\u3002\u901a\u8fc7\u4e0b\u9762\u7684\u56fe\u53ef\u4ee5\u5feb\u901f\u770b\u5230\u6808\u5927\u5c0f\u4e3a n \u65f6\u7684\u547d\u4e2d\u7387\u3002 </p>"},{"location":"CA/CA3/#lru-implementation-comparison-pair-method","title":"LRU Implementation - Comparison Pair Method","text":"<p>\u5982\u4f55\u53ea\u901a\u8fc7\u95e8\u548c\u89e6\u53d1\u5668\u6765\u5b9e\u73b0 LRU \u7b97\u6cd5\uff1f\u2014\u2014 Comparison Pair Method</p> <ul> <li> <p>Basic idea</p> <p>Let each cache block be combined in pairs, use a comparison pair flip-flop to record the order in which the two cache blocks have been accessed in the comparison pair, and then use a gate circuit to combine the state of each comparison pair flip-flop, you can find the block to be replaced according to the LRU algorithm.</p> <p>\u8ba9\u4efb\u4f55\u4e24\u4e2a cache \u5757\u4e4b\u95f4\u4e24\u4e24\u7ed3\u5bf9\uff0c\u7528\u4e00\u4e2a\u89e6\u53d1\u5668\u7684\u72b6\u6001\u6765\u4ee3\u8868\u8fd9\u4e24\u4e2a\u5757\u7684\u5148\u540e\u8bbf\u95ee\u987a\u5e8f\uff08\u6bd4\u5982 1 \u8868\u793a A \u521a\u88ab\u8bbf\u95ee\uff0c0 \u8868\u793a B \u521a\u88ab\u8bbf\u95ee\uff09\u3002\u901a\u8fc7\u95e8\u7535\u8def\u5bf9\u89e6\u53d1\u5668\u7684\u72b6\u6001\u8fdb\u884c\u903b\u8f91\u7ec4\u5408\uff0c\u627e\u5230\u6700\u4e45\u672a\u88ab\u8bbf\u95ee\u7684\u5757\u3002</p> </li> </ul> <p>Comparison Pair Method</p> <p>\u8fd9\u91cc\u6709 3 \u4e2a cache blocks A, B, C\u3002\u90a3\u4e48\u6211\u4eec\u9700\u8981 3 \u4e2a\u89e6\u53d1\u5668\u6765\u8bb0\u5f55\u4e4b\u95f4\u7684\u72b6\u6001\u3002\u5047\u8bbe \\(T_{AB}=1\\) \u8868\u793a A \u88ab\u66f4\u8fd1\u8bbf\u95ee\uff0c\\(T_{AC}, T_{BC}\\) \u540c\u7406\u3002  </p> <ul> <li> <p>Hardware usage analysis</p> <p>\u5047\u8bbe\u6709 p \u4e2a cache blocks, \u6211\u4eec\u9700\u8981 \\(C_p^2=p\\cdot (p-1)/2\\) \u4e2a\u89e6\u53d1\u5668\u3002 \u5f53 \\(p\\) \u8d85\u8fc7 8 \u65f6\uff0c\u9700\u8981\u7684\u89e6\u53d1\u5668\u8fc7\u591a\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u4e0d\u9002\u7528\u4e86\u3002</p> </li> </ul>"},{"location":"CA/CA3/#q4-write-strategy","title":"Q4: Write Strategy","text":"<ul> <li> <p>Write Hit</p> <ul> <li> <p>Write Through\uff1a\u76f4\u63a5\u5199\u56de\u5230\u5185\u5b58\u3002</p> <p>\u5199\u5230\u5185\u5b58\u7684\u65f6\u95f4\u8f83\u957f\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u9700\u8981 Write Stall\uff0c\u6216\u8005\u4f7f\u7528 Write Buffer\u3002 </p> </li> <li> <p>Write Back\uff1a\u5728 Cache \u4e2d\u5199\uff0c\u540c\u65f6\u901a\u8fc7\u4e00\u4e2a\u989d\u5916\u7684 dirty bit \u8868\u793a\u8fd9\u4e2a\u5757\u5df2\u7ecf\u88ab\u4fee\u6539\u3002</p> </li> <li>Write Miss</li> <li>Write Allocate\uff1a\u5c06\u8981\u5199\u7684\u5757\u5148\u8bfb\u5230 Cache \u4e2d\uff0c\u518d\u5199\u3002</li> <li>Write Around\uff1a\u76f4\u63a5\u5199\u5230\u5185\u5b58\u3002</li> <li>In general, write-back caches use write-allocate , and write-through caches use write-around.</li> </ul> </li> </ul> Example <p></p>"},{"location":"CA/CA3/#memory-system-performance","title":"Memory System Performance","text":"<p>\u8fd9\u90e8\u5206\u4e5f\u53ef\u89c1\u8ba1\u7ec4\u7b14\u8bb0</p> <p>How to improve</p> <ul> <li>Reduce the miss penalty</li> <li>Reduce the miss rate</li> <li>Reduce the time to hit in the cache</li> <li>Reduce the miss penalty and miss rate via parallelism</li> </ul>"},{"location":"CA/CA3/#virtual-memory","title":"Virtual Memory","text":"<p>\u7269\u7406\u5185\u5b58\u6709\u9650\uff0c\u865a\u62df\u5185\u5b58\u8ba9\u7528\u6237\u4f53\u9a8c\u5230\u4e00\u4e2a\u62bd\u8c61\u7684\u66f4\u5927\u7684\u5185\u5b58\u3002</p> <ul> <li> <p>Why virtual memory?</p> <p>\u53ef\u4ee5\u8ba9\u8fdb\u7a0b\u4f7f\u7528\u4e0d\u8fde\u7eed\u7684\u7269\u7406\u5185\u5b58\u7a7a\u95f4\uff08\u865a\u62df\u5730\u5740\u4e0a\u662f\u8fde\u7eed\u7684\uff09\uff1b\u66f4\u597d\u5730\u9694\u79bb\u4e0d\u540c\u8fdb\u7a0b\u3002</p> </li> <li> <p>virtual-physical address translation</p> </li> <li>memory protection/sharing among multi-program</li> </ul> <p>Virtual Memory = Main Memory + Secondary Storage</p> <ul> <li> <p>Virtual Memory Allocation</p> <ul> <li> <p>Paged virtual memory</p> <p>page: fixed-size block</p> </li> <li> <p>Segmented virtual memory</p> <p>segment: variable-size block</p> </li> </ul> <p></p> </li> </ul> <p>Paging vs Segmentation</p> <p></p> <p>\u5206\u9875\u5f0f\u7684\u6613\u4e8e\u5b9e\u73b0\uff0c\u65b9\u4fbf\u66ff\u6362\u3002\u73b0\u5728\u5e38\u7528\u6bb5\u9875\u5f0f\u7ed3\u5408\uff0c\u6216\u8005\u7eaf\u9875\u5f0f\u3002</p>"},{"location":"CA/CA3/#how-virtual-memory-works","title":"How virtual memory works?","text":"<p>Cache \u7684\u56db\u4e2a\u95ee\u9898\u5728\u865a\u62df\u5185\u5b58\u4e2d\u90fd\u6709\u5bf9\u5e94\u3002</p> <ul> <li> <p>Q1. Where can a block be placed in main memory?</p> <p>\u7f3a\u5931\u4ee3\u4ef7\u5f88\u9ad8\uff0c\u56e0\u6b64\u6211\u4eec\u91c7\u7528\u5168\u76f8\u8054\u7684\u65b9\u5f0f\uff0c\u4ee5\u964d\u4f4e miss rate\u3002</p> </li> <li> <p>Q2. How is a block found if it is in main memory?</p> <p>\u865a\u62df\u5730\u5740\u5206\u4e24\u90e8\u5206\uff0c\u504f\u79fb\u91cf\u548c\u9875\u53f7\u3002\u9875\u53f7\u662f\u9875\u8868\u7684\u7d22\u5f15\u3002 </p> </li> <li> <p>Q3. Which block should be replaced on a virtual memory miss?</p> <p>Least Recently Used (LRU) block, with use/reference bit.</p> </li> <li> <p>Q4. What happens on a write?</p> <p>Write-back strategy, with diry bit.</p> </li> </ul>"},{"location":"CA/CA3/#page-table","title":"Page Table","text":"<ul> <li> <p>Page tables are often large</p> <p>e.g. 32-bit virtual address, 4KB pages, 4 bytes per page table entry. page table size: \\((2^{32}/2^{12}) \\times 2^2 = 2^{22}\\) bytes = \\(4\\) MB * Logically two memory accesses for data access: * one to obtain the physical address from page table; * one to get the data from the physical address;</p> </li> </ul> <p>\u6b63\u5e38\u6765\u8bf4\u9875\u8868\u9700\u8981\u4e24\u6b21\u5185\u5b58\u8bbf\u95ee\uff0c\u8bbf\u95ee\u6548\u7387\u4f4e\u4e0b\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981 cache page table\uff0c\u5373 TLB\u3002</p> <p>Translation lookaside buffer (TLB)</p> <ul> <li>tag: portions of the virtual address (VPN);</li> <li>data: a physical page frame number (PPN), protection field, valid bit, use bit, dirty bit;</li> </ul> <p>Example</p> <p>\u53d1\u9001 tag (VPN) \u5c1d\u8bd5\u5339\u914d\uff0c\u5e76\u770b\u8bbf\u95ee\u7c7b\u578b\u662f\u5426\u8fdd\u89c4\u3002\u5982\u679c\u5339\u914d\u6210\u529f\uff0c\u5c31\u628a\u5bf9\u5e94\u7684 PPN \u9001\u5230 Mux\uff0c\u5c06\u504f\u79fb\u91cf\u52a0\u4e0a PPN \u5f97\u5230\u7269\u7406\u5730\u5740\u3002  </p>"},{"location":"CA/CA3/#page-size-selection","title":"Page Size Selection","text":"<ul> <li> <p>Pros of larger page size</p> <ul> <li> <p>Smaller page table, less memory (or other resources used for the memory map);</p> <p>\u9875\u66f4\u5c11\uff0c\u6240\u4ee5\u9875\u8868\u66f4\u5c0f\u3002</p> </li> <li> <p>Larger cache with fast cache hit;</p> <p>\u9875\u66f4\u5927\uff0c\u6240\u4ee5 cache \u547d\u4e2d\u7684\u65f6\u95f4\u66f4\u77ed\uff08\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u904d\u5386\u7684\u9875\u66f4\u5c11\uff09\u3002</p> </li> <li> <p>Transferring larger pages to or from secondary storage is more efficient than transferring smaller pages;</p> <p>\u4e00\u6b21\u642c\u8fd0\u66f4\u591a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u66f4\u9ad8\u6548\uff0c\u5c0f\u9875\u53ef\u80fd\u9700\u8981\u642c\u8fd0\u591a\u6b21\u3002</p> </li> <li> <p>Map more memory, reduce the number of TLB misses;</p> <p>TLB miss \u6b21\u6570\u66f4\u5c11\u3002</p> </li> </ul> </li> <li> <p>Pros of smaller page size</p> <ul> <li> <p>Conserve storage</p> <p>When a contiguous region of virtual memory is not equal in size to a multiple of the page size, a small page size results in less wasted storage.</p> <p>\u51cf\u5c11\u5bf9\u5185\u5b58\u7684\u4f7f\u7528\uff0c\u5185\u90e8\u788e\u7247\u66f4\u5c11\u3002</p> </li> </ul> </li> </ul> <p>Use both: multiple page sizes</p> <p>Address Translation</p> <p></p>"},{"location":"CA/CA3/#summary","title":"Summary","text":"<p>!! Summary     * Memory hierarchy         * From single level to multi level         * Evaluate the performance parameters of the storage system (average price per bit C; hit rate H; average memory access time T)     * Cache basic knowledge         * Mapping rules         * Access method         * Replacement algorithm         * Write strategy         * Cache performance analysis     * Virtual Memory (the influence of memory organization structure on Cache failure rate)</p>"},{"location":"CO/","title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0  </p> <ul> <li>\u6559\u6750: Computer Organization and Design The Hardware Software Interface [RISC-V Edition] </li> <li>\u8001\u5e08: \u5218\u6d77\u98ce/TA: \u90ed\u5bb6\u8c6a</li> </ul> <p>\u867d\u7136\u4e0a\u7684\u662f\u5218\u8001\u5e08\u7684\u8bfe\uff0c\u4f46\u672c\u7b14\u8bb0\u5185\u5bb9\u5747\u6765\u81ea\u9a6c\u5fb7\u8001\u5e08\u7684 PPT \u548c\u667a\u4e91\u8bfe\u5802\uff08\u9003\u3002</p> <p>Cheating Sheet \u5982\u4e0b</p> \u6570\u636e\u5e93\u7cfb\u7edf Cheating Sheet by HobbitQia 2.4 MB / 2 P / 2023-06-24 <p> \u4e0b\u8f7d</p>"},{"location":"CO/co1/","title":"Computer Abstractions and Technology","text":""},{"location":"CO/co1/#8-ideas-in-computer-architecture","title":"8 Ideas in Computer Architecture","text":"<ul> <li>Moore's Law The integrate circuit resource double every 18-24 months.</li> <li> <p>User abstraction to simplify design  </p> <ul> <li>Lower-level details are hidden to higher levels </li> <li>Instruction set architecture -- the interface between HW and SW. </li> <li>Make the common cases fast</li> <li>Performance via Parallelism</li> <li>Performance via Pipelining </li> <li>Performance via Prediction</li> <li>Hierarchy of memory</li> <li>Dependability via redundancy</li> </ul> </li> </ul>"},{"location":"CO/co1/#performance","title":"Performance","text":"<ul> <li>Response time: How long it takes to do a task.  </li> <li>Throughput (\u541e\u5410\u91cf): Total work done per unit time.  </li> </ul> <p>Define \\(Performance = \\dfrac{1}{Execution\\ Time}\\) </p>"},{"location":"CO/co1/#execution-time","title":"Execution time","text":"<ul> <li>Elapsed Time Total response time, including all aspects e.g. Processing, I/O, OS overhead, idle time.  </li> <li>CPU Time   Discounts I/O time, other jobs\u2019 shares \u8fd9\u91cc\u6211\u4eec\u53ea\u8003\u8651 CPU \u65f6\u95f4</li> </ul>"},{"location":"CO/co1/#cpu-clocking","title":"CPU Clocking","text":"<ul> <li>Clock period: duration of a clock cycle. \u7528\u65f6\u949f\u5468\u671f\u4ee3\u66ff\u5177\u4f53\u7684\u79d2\u6570\u3002 </li> <li>Clock frequency(rate): cycles per second.  </li> </ul> \\[ \\begin{align*}  CPU\\ Time &amp;= CPU\\ Clock\\ Cycles \\times Clock\\ Cycle\\ Time \\\\ &amp;=\\dfrac{ CPU\\ Clock\\ Cycles}{Clock\\ Rates} \\end{align*} \\] <p>Performance improved by * Reducing number of clock cycles * Increasing clock rate * Hardware designer must often trade off clock rate against cycle count</p> \\[ \\begin{align*} Clock\\ Cycles &amp;= Instruction\\ Count \\times Cycles\\ per\\ Instruction(CPI)\\\\ CPU\\ Time &amp; = Instruction\\ Count \\times CPI\\times CPI\\ Cycle\\ Time\\\\ &amp; = \\dfrac{Instruction\\ Count \\times CPI}{Clock\\ Rate} \\end{align*} \\] <p>CPI is determined by CPU hardware. \u5982\u679c\u4e0d\u540c\u6307\u4ee4\u6709\u4e0d\u540c\u7684 CPI, \u6211\u4eec\u53ef\u4ee5\u7528 Average CPI. </p> <p>\u7efc\u4e0a, \\(CPU\\ Time = \\dfrac{Instructions}{Program}\\times \\dfrac{Clock\\ Cycles}{Instruction}\\times \\dfrac{Seconds}{Clock Cycle}\\) </p> <p>Performance depends on  </p> <ul> <li>Algorithm: affects IC, possibly CPI</li> <li>Programming language: affects IC, CPI</li> <li>Compiler: affects IC, CPI</li> <li>Instruction set architecture</li> </ul>"},{"location":"CO/co1/#incredible-performance-improvement","title":"Incredible performance improvement","text":""},{"location":"CO/co1/#uniprocessor","title":"Uniprocessor","text":"<p>Three Walls</p> <ul> <li>Power Wall \\(Power = Capactive\\ load \\times Voltage^2\\ Frequency\\) </li> </ul> <p>\u4e3b\u9891\u63d0\u9ad8\u4e86\u5f88\u591a\uff0c\u4f46\u529f\u8017\u5e76\u6ca1\u6709\u5f97\u5230\u8fd9\u4e48\u591a\u7684\u63d0\u5347\uff0c\u56e0\u4e3a\u6211\u4eec\u964d\u4f4e\u4e86\u5de5\u4f5c\u7535\u538b (5V-1V) \u73b0\u5728\u5de5\u4f5c\u7535\u538b\u4e0d\u80fd\u518d\u964d\u4f4e\u4e86\uff08\u5426\u5219\u6cc4\u6f0f\u7535\u6d41\u5360\u6bd4\u592a\u5927\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u518d\u63d0\u9ad8\u529f\u7387\u4e86\u3002 Memory Wall Memory \u7684\u6027\u80fd\u589e\u957f\u4e0d\u5982 CPU \u7684\u6027\u80fd\u589e\u957f\uff0c\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u8bfb\u5199\u5185\u5b58\u4e86\uff0c\u5f71\u54cd\u6574\u4f53\u6027\u80fd\u3002 ITP Wall difficulty to find enough parallelism in the instructions stream of a single process to keep higher performance processor cores busy.  \u6307\u4ee4\u96c6\u5e76\u884c\u7a0b\u5ea6</p>"},{"location":"CO/co1/#multiprocessors","title":"Multiprocessors","text":"<p>requires explicitly parallel programming.  </p> <ul> <li>Amdahl's Law: Improve an aspect of a computer and expecting improvement in overall performance. \u5b9e\u9645\u4e0a, \\(T_{improved}=\\dfrac{T_{affected}}{improvement\\ factor}+T_{unaffected}\\). e.g. \u5bf9\u67d0\u4e00\u65b9\u9762\u4f18\u5316 90%, \u5e76\u4e0d\u80fd\u4f7f CPU \u6574\u4f53\u6027\u80fd\u4f18\u5316 90%.  Corollary: make the common case fast.  </li> <li>Low Power Not at Idle. \u673a\u5668\u5728\u6ca1\u6709\u5de5\u4f5c\u65f6\u4e5f\u6709\u529f\u8017\u635f\u5931\u3002  </li> <li>MIPS as a Performance Metric    <ul> <li>MIPS: Millions of Instructions Per Second  </li> <li>\u8fd9\u4e2a\u53c2\u6570\u9700\u8981\u5728\u5176\u4ed6\u53c2\u6570\u4e00\u81f4\u65f6\uff0c\u624d\u6709\u6bd4\u8f83\u610f\u4e49\u3002\u4e0d\u540c\u7684 ISA \u4e4b\u95f4\u4e0d\u80fd\u4ec5\u51ed MIPS \u6bd4\u8f83\u3002</li> </ul> </li> </ul>"},{"location":"CO/co2/","title":"Instructions: Language of the Computer","text":""},{"location":"CO/co2/#introduction","title":"Introduction","text":"<ul> <li>Language of the machine<ul> <li>Instructions (Statement)</li> <li>Instruction Set (Syntax)</li> </ul> </li> <li>Design goal<ul> <li>Maximize performance \u540c\u6837\u8d44\u6e90\u7684\u60c5\u51b5\u4e0b\u6027\u80fd\u5927</li> <li>Minimize cost \u540c\u6837\u6027\u80fd\u7684\u60c5\u51b5\u4e0b\u6210\u672c\u4f4e</li> <li>Reduce design time \u6307\u4ee4\u96c6\u7b80\u5355\uff0c\u6613\u4e8e\u7406\u89e3</li> </ul> </li> <li>\u6211\u4eec\u4f7f\u7528\u7684\u662f RISC-V \u67b6\u6784</li> </ul> <p>Instruction Characteristics</p> <p>\u6307\u4ee4\u96c6\u57fa\u672c\u7684\u7ed3\u6784\uff1aOperation \u64cd\u4f5c; Operand \u64cd\u4f5c\u6570</p> <ul> <li>\u4e0d\u540c\u6307\u4ee4\u96c6\uff0c\u6307\u4ee4\u7684\u7f16\u7801\u53ef\u4ee5\u4e0d\u540c\u3002\u5982 000 \u8868\u793a\u52a0\u6cd5\uff0c\u8fd9\u4e5f\u53eb\u6307\u4ee4\u7684 Encoding.  </li> <li>\u64cd\u4f5c\u6570\u4f4d\u5bbd\u53ef\u4ee5\u4e0d\u540c\uff0c\u53ef\u4ee5\u662f\u7acb\u5373\u6570/\u5bc4\u5b58\u5668/\u5185\u5b58\u3002 </li> </ul> <p>\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\uff1a \u6307\u4ee4\u7531\u6570\u5b57\u65b9\u5f0f\u88ab\u5b58\u50a8\uff0c\u53ef\u4ee5\u8fdb\u884c\u8bfb\u5199\u3002\uff1f\uff1f</p>"},{"location":"CO/co2/#operation","title":"Operation","text":"<ul> <li> <p>Every computer must be able to perform arithmetic.    </p> <ul> <li>Only one operation per instruction  </li> <li>Exactly 3 variables e.g. <code>add a, b, c</code> \u5373 \\(a\\leftarrow b+c\\) \u6ce8\u610f\u7ed3\u679c\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u6837\u6613\u4e8e\u89e3\u7801  </li> </ul> </li> <li> <p>Design Principle 1 - Simplicity favors regularity. </p> </li> </ul> <p>Example</p> <ul> <li>C code <pre><code>f = (g + h) - (i + j);\n</code></pre></li> <li>RISC-V code <pre><code>add t0, g, h\nadd t1, i, j\nsub f, t0, t1\n</code></pre></li> </ul>"},{"location":"CO/co2/#operands-of-the-computer-hardware","title":"Operands of the Computer Hardware","text":""},{"location":"CO/co2/#register-operands","title":"Register Operands","text":"<ul> <li>Arithmetic instructions use register operands.</li> <li> <p>RISC-V has a \\(32\\times 64\\)-bit register file</p> <ul> <li>Use for frequently accessed data</li> <li>32-bit data is called a word. 64-bit is called a doubleword.  </li> <li>we call them <code>x0</code> to <code>x31</code></li> </ul> </li> <li> <p>Design Principle 2 - Smaller is faster.  \u5bc4\u5b58\u5668\u4e0d\u662f\u8d8a\u591a\u8d8a\u597d\uff0c\u591a\u4e86\u4e4b\u540e\u8bbf\u95ee\u6162\u3002  </p> Name Register Name Usage Preserved or call? x0 0 The constant value 0 n.a. x1(ra) 1 Return address(link register) yes x2(sp) 2 Stack pointer yes x3(gp) 3 Global pointer yes x4(tp) 4 Thread pointer yes x5-x7 5-7 Temporaries no x8-x9 8-9 Saved yes x10-x17 10-17 Arguments/results no x18-x27 18-27 Saved yes x28-x31 28-31 Temporaries noW <p>\u4e3a\u4ec0\u4e48\u5bc4\u5b58\u5668 <code>x0</code> \u4e00\u76f4\u4e3a 0</p> <p>Make the common fast. \u56e0\u4e3a\u7ecf\u5e38\u6709 0 \u53c2\u4e0e\u8ba1\u7b97\uff0c\u5c06\u5176\u5b58\u5728\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u4fbf\u4e8e\u8ba1\u7b97\u3002</p> </li> </ul> Example <pre><code>add x5, x20, x21\nadd x6, x22, x23\nsub x19, x5, x6\n</code></pre>"},{"location":"CO/co2/#memory-operands","title":"Memory Operands","text":"<ul> <li>Data transfer instructions<ul> <li>Load: Load values from memory to register</li> <li>Store: Store result from register to memory; store doubleword</li> </ul> </li> <li>Memory is byte addressed.   </li> <li> <p>RISC-V is Little Endian </p> Little vs Big Endian <p> </p> <p>\u5c0f\u7aef\uff1a\u4f4e\u4f4d\u653e\u5728\u5730\u5740\u8f83\u5c0f\u5904\uff1b\u5927\u7aef\u76f8\u53cd   RISC-V dose not require words to be aligned in memory   words align: \u4e00\u4e2a\u5b57\u662f 4 \u5b57\u8282\uff0c\u6211\u4eec\u8981\u6c42\u5b57\u7684\u8d77\u59cb\u5730\u5740\u4e00\u5b9a\u8981\u662f 4 \u7684\u500d\u6570\u3002</p> <p>Memory Alignment</p> <p>  \u7b2c\u4e00\u4e2a\u662f\u5bf9\u9f50\u7684\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e0d\u5bf9\u9f50\u7684\u3002</p> <ul> <li>\u4e0d\u5bf9\u9f50\u7684\u597d\u5904\u662f\u7701\u7a7a\u95f4</li> </ul> </li> </ul> <p>Memory Operand Example</p> <p><pre><code>A[12] = h + A[8];\n</code></pre> (\u9ed8\u8ba4\u6570\u7ec4\u662f\u53cc\u5b57\u7684, h in <code>x21</code>, base address of A in <code>x22</code>) \u7ffb\u8bd1\u4e3a RISC-V \u4ee3\u7801\u5f97\u5230 <pre><code>ld x9, 64(x22)\nadd x9, x21, x9\nsd x9, 96(x22)\n</code></pre> \u5730\u5740\u662f\u4ee5 byte \u4e3a\u5355\u4f4d\uff0c\u6240\u4ee5\u8981\u504f\u79fb \\(8\\times 8=64\\) bytes. <code>load</code> \u548c <code>store</code> \u662f\u552f\u4e8c\u53ef\u4ee5\u8bbf\u95ee\u5b58\u50a8\u5668\u7684\u6307\u4ee4\u3002 </p>"},{"location":"CO/co2/#registers-vs-memory","title":"Registers vs. Memory","text":"<ul> <li>Registers are faster to access than memory  </li> <li>Operating on memory data requires loads and stores  </li> <li>Compiler must use registers for variables as much as  possible \u7f16\u8bd1\u5668\u5c3d\u91cf\u4f7f\u7528\u5bc4\u5b58\u5668\u5b58\u53d8\u91cf\u3002\u53ea\u6709\u5728\u5bc4\u5b58\u5668\u4e0d\u591f\u7528\u65f6\uff0c\u624d\u4f1a\u628a\u4e0d\u592a\u7528\u7684\u503c\u653e\u56de\u5185\u5b58\u3002  </li> </ul>"},{"location":"CO/co2/#constant-or-immediate-operands","title":"Constant or Immediate Operands","text":"<p>Immediate: Other method for adding constant  </p> <ul> <li>Avoids the load instruction  </li> <li>Offer versions of the instruction  e.g. <code>addi x22, x22, 4</code> </li> <li>Design Principle 3 - Make the common case fast. </li> </ul> <p>Summary</p> <p> </p> <ul> <li>\u4e3a\u4ec0\u4e48\u5185\u5b58\u662f \\(2^{61}\\) \u4e2a doublewords? \u53ef\u4ee5\u8868\u793a\u7684\u5730\u5740\u6709\u8fd9\u4e48\u591a\uff0c\u56e0\u4e3a\u6211\u4eec\u4ee5 64 \u4f4d\u5bc4\u5b58\u5668\u4e3a\u57fa\u5740\uff0c\u53ef\u4ee5\u8868\u793a\u7684\u53cc\u5b57\u5c31\u662f \\(2^{64}/2^3=2^{61}\\) (\u8fd9\u91cc \\(2^3\\) \u8868\u793a 8 \u4e2a\u5b57\u8282\uff0c\u5373\u53cc\u5b57). \u5373\u6211\u4eec\u7684 <code>load</code> \u6307\u4ee4\u53ef\u4ee5\u8bbf\u95ee\u7684\u8303\u56f4\u6709\u8fd9\u4e48\u5927\u3002   </li> </ul>"},{"location":"CO/co2/#signed-and-unsigned-number","title":"Signed and Unsigned Number","text":""},{"location":"CO/co2/#representing-instructions-in-the-computer","title":"Representing Instructions in the Computer","text":"<ul> <li>All information in computer consists of binary bits.</li> <li>Instructions are encoded in binary called machine code (\u673a\u5668\u7801) </li> <li>Mapping registers into numbers 0 for register <code>x0</code>, 31 for register <code>x31</code>. e.t.c. </li> <li>RISC-V instructions  32 \u4f4d\u6307\u4ee4\u7f16\u7801\u3002\u6240\u6709\u6307\u4ee4\u90fd\u662f\u89c4\u5219\u5316\u7684\uff0c\u5373\u4e00\u90e8\u5206\u662f opcode, \u4e00\u90e8\u5206\u662f operands \u7b49\u7b49\u3002  </li> </ul> <p>Summary of RISC-V architecture</p> <p> </p>"},{"location":"CO/co2/#r-format","title":"R-format","text":"<ul> <li>opcode: operaion code</li> <li>rd: destination register number</li> <li>funct3: 3-bit function code(additional opcode)  \u4f8b\u5982\uff0c\u6211\u4eec\u52a0\u6cd5\u51cf\u6cd5\u53ef\u4ee5\u505a\u6210\u4e00\u4e2a opcode, \u7136\u540e\u5229\u7528 funct \u8fdb\u884c\u9009\u62e9\u3002</li> <li>rs1/rs2: the first/second source register number</li> <li>funct7: 7-bit function code(additional opcode)  </li> </ul> <p>All instructions in RISC-V have the same length  </p> <p>Design Principle 4 - Good design demands good compromises</p>"},{"location":"CO/co2/#i-format","title":"I-format","text":"<ul> <li>Immediate arithmetic and load instructions e.g. <code>addi</code>, <code>ld</code> </li> <li>rs1: source or base address register number</li> <li>immediate: constant operand, or offset added to base  address \u5c06 rs2, funct7 \u5408\u5e76\u4e86\uff0c\u5f97\u5230 12 \u4f4d\u7acb\u5373\u6570</li> </ul>"},{"location":"CO/co2/#s-format","title":"S-format","text":"<ul> <li>rs1: base address register number</li> <li>rs2: source opearand register number</li> <li>immediate: Split so that rs1 and rs2 fields always in the same place.  </li> </ul> Example <p>Stored Program Computer  </p> <ul> <li>Instructions represented in binary, like data.  </li> <li>Instructions and data stored in memory.  </li> <li>Programs can operate on programs. e.g. compiplers, linkers. </li> <li>Binary compatibility allows compiled programs to work on different computers</li> </ul>"},{"location":"CO/co2/#logical-operations","title":"Logical Operations","text":"Operation C Java RISC-V Shift left &lt;&lt; &lt;&lt; <code>slli</code> Shift right &gt;&gt; &gt;&gt;&gt; <code>srli</code> Bit-by-by AND &amp; &amp; <code>and, andi</code> Bit-by-by OR | | <code>or, ori</code> Bit-by-by XOR ^ ^ <code>xor, xori</code> Bit-by-by NOT ~ ~ - <p>bitwise NOT \u8981\u7528\u5f02\u6216\u5b9e\u73b0\uff08\u4e0e\u5168 F \u5f02\u6216\uff09  </p>"},{"location":"CO/co2/#shift","title":"Shift","text":"<ul> <li>I \u578b\u6307\u4ee4</li> <li>\u4e3a\u4ec0\u4e48\u8fd8\u6709 <code>funct6</code>  \u79fb\u4f4d\u4e0d\u9700\u8981\u8fd9\u4e48\u591a\u7acb\u5373\u6570\uff0c\u53ea\u8981\u516d\u4f4d (\\(2^6=64\\)) \u5373\u53ef\u3002</li> <li>\u5de6\u79fb i \u4f4d\u76f8\u5f53\u4e8e\u4e58 \\(2^i\\), \u53f3\u79fb i \u4f4d\u76f8\u5f53\u4e8e\u9664 \\(2^i\\).  </li> </ul>"},{"location":"CO/co2/#and","title":"AND","text":""},{"location":"CO/co2/#or","title":"OR","text":""},{"location":"CO/co2/#xor","title":"XOR","text":""},{"location":"CO/co2/#instructions-for-making-decisions","title":"Instructions for making decisions","text":""},{"location":"CO/co2/#branch-instructions","title":"Branch instructions","text":"<ul> <li><code>beq reg1, reg2, Label</code> \u76f8\u7b49\u5219\u8df3\u8f6c</li> <li><code>bne reg1, reg2, Label</code> \u4e0d\u76f8\u7b49\u5219\u8df3\u8f6c</li> </ul> Example <p>store \u7684\u7acb\u5373\u6570\u662f\u4f5c\u4e3a\u6570\u636e\u7684\u5730\u5740, beq \u7684\u7acb\u5373\u6570\u662f\u4f5c\u4e3a\u8fd0\u7b97\u7684\u5730\u5740\uff08\u52a0\u5230 PC \u4e0a\uff09\u56e0\u6b64\u4e8c\u8005\u7684\u6307\u4ee4\u7c7b\u578b\u4e0d\u540c\u3002</p> <p>\u8df3\u8f6c\u7684\u8303\u56f4\u6709\u9650\u5236\uff0c\u56e0\u4e3a\u7acb\u5373\u6570\u53ea\u6709 12 \u4f4d\u3002\uff08PC \u76f8\u5bf9\u5bfb\u5740\uff0c\u4ee5\u5f53\u524d\u7a0b\u5e8f\u4f4d\u7f6e\u4e3a\u57fa\u51c6\u524d\u540e\u8df3\uff09  </p> Loop <p> </p>"},{"location":"CO/co2/#slt-instruction","title":"slt instruction","text":"<p>set on if less than.   <code>slt x2, x3, x4 # x2=1 if x3 &lt; x4</code> R \u578b\u6307\u4ee4</p> Example <p> </p>"},{"location":"CO/co2/#more-conditional-operations","title":"More Conditional Operations","text":"<ul> <li><code>blt rs1, rs2, L1</code> \u82e5 <code>rs1&lt;rs2</code> \u5219\u8df3\u5230 L1</li> <li><code>bge rs1, rs2, L1</code> \u82e5 <code>rs1&gt;=rs2</code> \u5219\u8df3\u5230 L1</li> </ul>"},{"location":"CO/co2/#signed-vs-unsigned","title":"Signed vs. Unsigned","text":"<p>\u9ed8\u8ba4\u662f\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83  </p> <ul> <li>Signed comparison: <code>blt</code>, <code>bge</code></li> <li>Unsigned comparison: <code>bltu</code>, <code>bgeu</code></li> </ul>"},{"location":"CO/co2/#caseswitch","title":"Case/Switch","text":"<p>Compiling a switch using jump address table</p> <p> </p> <p>\\(x_6\\) \u662f\u8df3\u8f6c\u8868\u7684\u57fa\u5730\u5740\uff0c\\(x_7\\leftarrow x_6+8*k\\) <code>jalr x1, 0(x7)</code>  \u628a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 PC+4<code>\u653e\u5165</code>x1<code>\u5bc4\u5b58\u5668\uff0c\u968f\u540e\u8df3\u5411</code>[x7] + 0<code>\u7684\u5730\u65b9\u3002   \u8fd9\u91cc\u6211\u4eec</code>jalr x0, ...<code>\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u6539\u53d8</code>x0` \u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u8fd9\u91cc\u4ec5\u7528\u4f5c\u5360\u4f4d\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u3002</p> <p>I \u578b\u6307\u4ee4</p> <p>A basic block is a sequence of instructions with</p> <ul> <li>No embedded branches (except at end)</li> <li>No branch targets (except at beginning)</li> </ul>"},{"location":"CO/co2/#supporting-procedures-in-computer-hardware","title":"Supporting Procedures in Computer Hardware","text":"<p>Procedure/function --- be used to structure programs \u4e3a\u4e86\u5b8c\u6210\u7279\u5b9a\u4efb\u52a1\u3002\u6613\u4e8e\u7406\u89e3\uff0c\u53ef\u4ee5\u590d\u7528\u3002</p> <p>\u8c03\u7528\u51fd\u6570\u7684\u6b65\u9aa4</p> <ol> <li>Place Parameters in a place where the procedure can access them (in registers <code>x10~x17</code>) \u4f20\u53c2</li> <li>Transfer control to the procedure \u63a7\u5236\u6743\u7ed9\u5b50\u7a0b\u5e8f</li> <li>Acquire the storage resources needed for the procedure</li> <li>Perform the desired task</li> <li>Place the result value in a place where the calling program can access it  </li> <li>Return control to the point of origin (address in <code>x1</code>)</li> </ol>"},{"location":"CO/co2/#procedure-call-instructions","title":"Procedure Call Instructions","text":"<ul> <li>Procedure call: jump and link <code>jal x1, ProcedureLabel</code><ul> <li>Address of following instruction put in <code>x1</code></li> <li>Jumps to target address</li> </ul> </li> <li>Procedure return: jump and link register <code>jalr x0, 0(x1)</code><ul> <li>Like jal, but jumps to <code>0 + address in x1</code></li> <li>Use <code>x0</code> as rd (<code>x0</code> cannot be changed)</li> <li>Can also be used for computed jump</li> </ul> </li> </ul> <p>\u4e0d\u80fd\u7528 <code>jal</code> \u8df3\u56de\u6765\uff0c\u8df3\u8fdb\u51fd\u6570\u7684\u5730\u5740\u7684\u662f\u56fa\u5b9a\u7684, Label \u4e00\u5b9a\u3002\u4f46\u662f\u8df3\u56de\u6765\u7684\u5730\u5740\u4e0d\u4e00\u5b9a\uff0c\u8981\u7528 <code>x1</code> \u5b58\u50a8\u624d\u80fd\u8df3\u56de\u3002  </p>"},{"location":"CO/co2/#using-more-registers","title":"Using More Registers","text":"<ul> <li>Registers for procedure calling<ul> <li><code>x10~x17</code>(<code>a0~a7</code>): eight argument registers to pass parameters or return values \u7528\u6765\u4f20\u53c2\u7684</li> <li><code>x1</code>: one return address register to return to origin point  </li> </ul> </li> <li>Stack\uff1aIdeal data structure for spilling registers<ul> <li>Push, pop</li> <li>Stack pointer (<code>sp</code>): <code>x2</code> \u6307\u5411\u6700\u6808\u9876\uff0c\u5373\u6700\u540e\u4e00\u4e2a\u6709\u6548\u6570\u636e\u6240\u5728\u7684\u4f4d\u7f6e</li> </ul> </li> <li>Stack grow from higher address to lower address  <ul> <li>Push: <code>sp = sp - 8</code></li> <li>Pop: <code>sp = sp + 8</code> </li> </ul> </li> </ul> Compiling a leaf procedure Name Register Name Usage Preserved or call? x0(zero) 0 The constant value 0 n.a. x1(ra) 1 Return address(link register) yes x2(sp) 2 Stack pointer yes x3(gp) 3 Global pointer yes x4(tp) 4 Thread pointer yes x5-x7(t0-t2) 5-7 Temporaries no x8(s0/fp) 8 Saved/frame pointer yes x9(s1) 9 Saved yes x10-x17(a0-a7) 10-17 Arguments/results no x18-x27(s2-s11) 18-27 Saved yes x28-x31(t3-t6) 28-31 Temporaries no PC - Auipc(Add Upper Immediate to PC) yes <ul> <li><code>t0~t6</code> \u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u4e0d\u9700\u8981\u5728\u51fd\u6570\u4e2d\u4fdd\u5b58 </li> <li><code>s0~s11</code> saved registers \u6807\u6709 Preserved \u8868\u660e\u6211\u4eec\u9700\u8981\u5728\u51fd\u6570\u5f00\u59cb\u65f6\u4fdd\u5b58\u8be5\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5e76\u5728\u79bb\u5f00\u51fd\u6570\u524d\u6062\u590d\u5bc4\u5b58\u5668\u7684\u503c\u3002  </li> </ul>"},{"location":"CO/co2/#nested-procedure","title":"Nested Procedure","text":"Example <p>Preserved or not</p> <p> </p> <p>\u5bc4\u5b58\u5668\u4e00\u822c\u9760\u5806\u6808\u4fdd\u5b58, sp \u9760\u52a0\u51cf\u4fdd\u5b58\u3002 </p> <p>Local Data on the Stack</p>"},{"location":"CO/co2/#communicating-with-people","title":"Communicating with People","text":"<ul> <li>Byte-encoded character sets e.g. ASCII, Latin-1</li> <li>Unicode: 32-bit character set e.g. UTF-8, UTF-16 </li> </ul> <p>\u7f16\u7801\u4e2d\u6709\u4e0d\u540c\u957f\u5ea6\u7684\u6570\u636e\uff0c\u56e0\u6b64\u4e5f\u9700\u8981\u6709\u4e0d\u540c\u957f\u5ea6\u7684 load \u548c store.  </p> <ul> <li> <p>Load byte/halfword/word: Sign extend to 64 bits in rd   \u6211\u4eec\u7684\u5bc4\u5b58\u5668\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64\u9700\u8981\u6269\u5145\u3002</p> <ul> <li><code>lb rd, offset(rs1)</code></li> <li><code>lh rd, offset(rs1)</code></li> <li><code>lw rd, offset(rs1)</code> </li> <li><code>ld rd, offset(rs1)</code> </li> </ul> Example <p>\u540c\u6837\u662f\u53d6 A[4] \u7684\u503c\uff0c\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b offset \u4e0d\u540c\u3002<code>char</code> \u4e3a 4, <code>short int</code> \u4e3a 8, <code>int</code> \u4e3a 16.  </p> </li> <li> <p>Load byte/halfword/word unsigned: 0 extend to 64 bits in rd</p> <ul> <li><code>lbu rd, offset(rs1)</code></li> <li><code>lhu rd, offset(rs1)</code></li> <li><code>lwu rd, offset(rs1)</code></li> </ul> </li> <li>Store byte/halfword/word: Store rightmost 8/16/32 bits  <ul> <li><code>sb rs2, offset(rs1)</code></li> <li><code>sh rs2, offset(rs1)</code></li> <li><code>sw rs2, offset(rs1)</code> \u5b58\u50a8\u5c31\u4e0d\u9700\u8981\u8003\u8651\u6269\u5145\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u505a\u8fd0\u7b97\uff0c\u53ea\u662f\u628a\u5bf9\u5e94\u90e8\u5206\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u3002 offset \u53ef\u4ee5\u662f 3. \u56e0\u4e3a RISC-V \u662f\u53ef\u4ee5\u4e0d\u5bf9\u9f50\u7684\u3002\uff08\u5b9e\u9645\u4e0a sh offset \u4e00\u822c\u662f 2 \u7684\u500d\u6570, sw \u662f 4 \u7684\u500d\u6570\uff09  </li> </ul> </li> </ul> <p>Compiling a string copy procedure</p> <p> </p> <p>i \u4e0d\u5e94\u8be5\u5206\u914d\u7ed9 s3, \u5206\u914d\u7ed9\u4e00\u4e2a\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u5c31\u53ef\u4ee5\u4e0d\u7528\u5806\u6808\u4fdd\u5b58 s3 \u4e86\u3002 \u5bf9\u4e8e\u4e00\u4e2a leaf procedure(\u4e0d\u518d\u8c03\u7528\u5176\u4ed6 procedure) \u7f16\u8bd1\u5668\u8981\u5c3d\u53ef\u80fd\u7528\u5b8c\u6240\u6709\u7684\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u518d\u53bb\u7528\u5176\u4ed6\u7684\u5bc4\u5b58\u5668\u3002 \u4e3a\u4ec0\u4e48\u5f3a\u8c03 leaf procedure? - \u56e0\u4e3a\u5bf9\u4e8e\u975e leaf \u7684\u51fd\u6570\uff0c\u53ef\u80fd\u4e34\u65f6\u53d8\u91cf\u4f1a\u88ab\u8c03\u7528\u540e\u7684\u51fd\u6570\u6539\u53d8\uff0c\u8fd9\u6837\u5c31\u4e0d\u80fd\u7ee7\u7eed\u7528\u4e86\u3002</p>"},{"location":"CO/co2/#risc-v-addressing-for-32-bit-immediate-and-addresses","title":"RISC-V Addressing for 32-Bit Immediate and Addresses","text":""},{"location":"CO/co2/#wide-bit-immediate-addressing","title":"Wide Bit Immediate addressing","text":"<p>\u5982\u4f55\u5c06\u4e00\u4e2a\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u4efb\u610f\u7684\u7acb\u5373\u6570\u3002</p> <p><code>lui reg, imm</code> \u53ef\u4ee5\u628a 20 \u4f4d\u7684\u5e38\u6570\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\u3002(U-type)</p> <p>\u6ce8\u610f\u8fd9\u91cc\uff0c\u6211\u4eec\u4f1a\u628a\u7acb\u5373\u6570\u653e\u5165\u5bc4\u5b58\u5668\u7684 [31:12] \u4f4d\uff0c\u4f4e\u4f4d\u4f1a\u586b\u5145\u4e3a 0.  </p> <p>Loading a 32-bit constant</p> <p> </p> <p>\u6211\u4eec\u6700\u7ec8\u60f3\u653e\u5165\u5bc4\u5b58\u5668\u7684\u503c\u662f 32 \u4f4d\u5e38\u6570 <code>0x003D0</code>. \u5148\u5229\u7528 <code>lui</code> \u5c06\u9ad8 20 \u4f4d 976 \u653e\u5165\u5bc4\u5b58\u5668\u4e2d\uff0c\u968f\u540e\u5229\u7528\u52a0\u6cd5\u6307\u4ee4\u52a0\u4e0a \u4f4e 12 \u4f4d\uff0c\u5373 2304.  </p>"},{"location":"CO/co2/#branch-addressing","title":"Branch Addressing","text":"<p>SB-type</p> <ul> <li>PC-relative addressing \\(Target\\ address = PC + Branch\\ offset = PC + immediate \\times 2\\) \u8fd9\u91cc\u4f4e\u4f4d\u4f1a\u9ed8\u8ba4\u8865 0. \u8fd9\u6837\u53ef\u4ee5\u628a\u5730\u5740\u8303\u56f4\u6269\u5927\u4e00\u500d\u3002</li> </ul>"},{"location":"CO/co2/#jump-addressing","title":"Jump Addressing","text":"<p>UJ-type(\u53ea\u6709 <code>jal</code> \u6307\u4ee4) 20-bit immediate for larger range, \u4f4e\u4f4d\u9ed8\u8ba4\u8865 0, \u6545\u5b9e\u9645\u8868\u793a\u7acb\u5373\u6570\u4e3a [20:0] \u5171 21 \u4f4d\u3002 </p> <p>Example</p> <p> </p> <p>RISC-V \u76f4\u63a5\u7528 PC \u7b97 offset, \u800c\u975e PC+4.  </p> <ul> <li>All RISC-V instructions are 4 bytes long</li> <li>PC-relative addressing refers to the number of halfwords</li> </ul> <p>While branch target is far away * Inserts an unconditional jump to target Invert the condition so that the branch decides whether to skip the jump.  </p> Branching far away <p> </p>"},{"location":"CO/co2/#risc-v-addressing-summary","title":"RISC-V Addressing Summary","text":"<p>\u5bfb\u5740\u65b9\u5f0f\u662f\u6307\u4ee4\u96c6\u7684\u6838\u5fc3\u533a\u522b\u3002</p> <ul> <li>\u7acb\u5373\u6570\u5bfb\u5740 <code>addi x5, x6, 4</code></li> <li>\u5bc4\u5b58\u5668\u5bfb\u5740 <code>add x5, x6, x7</code></li> <li>\u57fa\u5740\u5bfb\u5740 <code>ld x5,100(x6)</code></li> <li>PC \u76f8\u5bf9\u5bfb\u5740 <code>beq x5,x6,L1</code></li> </ul> Example <p> </p>"},{"location":"CO/co2/#risc-v-disassembly","title":"RISC-V Disassembly","text":"<p>\u628a\u673a\u5668\u7801\u7ffb\u8bd1\u4e3a\u6c47\u7f16\u6307\u4ee4\u3002</p> <ul> <li>opcode \u5148\u770b opcode, \u786e\u5b9a\u662f\u54ea\u7c7b\u6307\u4ee4\uff0c\u968f\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u5177\u4f53\u5212\u5206\u4e86\u3002</li> </ul> Example <p> </p>"},{"location":"CO/co2/#synchronization-in-risc-v","title":"Synchronization in RISC-V","text":"<ul> <li>Two processors sharing an area of memory<ul> <li>P1 writes, then P2 reads</li> <li>Data race if P1 and P2 don\u2019t synchronize<ul> <li>Result depends of order of accesses</li> </ul> </li> </ul> </li> <li>Hardware support required<ul> <li>Atomic read/write memory operation</li> <li>No other access to the location allowed between the read and  write</li> </ul> </li> <li>Could be a single instruction<ul> <li>e.g. atomic swap* of register \u2194 memory</li> <li>Or an atomic pair of instructions</li> </ul> </li> </ul> <p>Load reserved: <code>lr.d rd,(rs1)</code> \u628a\u5730\u5740 rs1 \u7684\u503c\u653e\u5230\u5bc4\u5b58\u5668 rd \u4e2d\uff0c\u540c\u65f6</p> <p>Store conditional: <code>sc.d rd,(rs1),rs2</code> \u628a\u5bc4\u5b58\u5668 rs2 \u7684\u503c\u653e\u5165\u5730\u5740 rs1. \u5982\u679c\u6210\u529f\u90a3\u4e48 rd \u91cc\u9762\u662f 0. \u5982\u679c\u4e0a\u6761\u6307\u4ee4 load \u540e\uff0c\u8fd9\u4e2a\u5730\u65b9\u7684\u503c\u88ab\u6539\u53d8\u4e86\uff0c\u90a3\u4e48\u5c31\u5931\u8d25\u4e86\uff0c\u8fd4\u56de 0. </p> <p>atomic swap</p> <p> </p> <p>lock</p> <p> </p> <p>\u5730\u5740 x20 \u653e\u7684\u662f\u9501\uff0c\u5982\u679c\u9501\u4e3a 0, \u8bf4\u660e\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5b58\u5165\u6570\u636e\uff0c\u5219\u6211\u4eec\u83b7\u5f97\u9501\u968f\u540e\u5b58\u5165\uff0c\u5e76\u91ca\u653e\u9501\u3002\u5426\u5219\u9700\u8981\u7b49\u9501\u91ca\u653e\u4e86\u624d\u80fd\u5b58\u3002</p>"},{"location":"CO/co2/#translating-and-starting-a-program","title":"Translating and starting a program","text":""},{"location":"CO/co2/#producing-an-object-module","title":"Producing an Object Module","text":"<p>Provides information for building a complete program from the pieces(Header).  </p> <ul> <li>Text segment: translated instructions</li> <li>Static data segment: data allocated for the life of the program</li> <li>Relocation info: for contents that depend on absolute location of loaded program</li> <li>Symbol table: global definitions and external refs</li> <li>Debug info: for associating with source cod</li> </ul>"},{"location":"CO/co2/#link","title":"Link","text":"<p>Object modules(including library routine) \\(\\rightarrow\\) executable program</p> <ul> <li>Place code and data modules symbolically in memory</li> <li>Determine the addresses of data and instruction labels</li> <li>Patch both the internal and external references (Address of invoke)</li> </ul>"},{"location":"CO/co2/#loading-a-program","title":"Loading a Program","text":"<p>Load from image file on disk into memory</p> <ol> <li>Read header to determine segment sizes</li> <li>Create virtual address space</li> <li>Copy text and initialized data into memory Or set page table entries so they can be faulted in</li> <li>Set up arguments on stack</li> <li>Initialize registers (including sp, fp, gp)</li> <li>Jump to startup routine Copies arguments to x10, \u2026 and calls main pWhen main returns, do exit syscall</li> </ol>"},{"location":"CO/co2/#dynamic-linking","title":"Dynamic Linking","text":"<p>Only link/load library procedure when it is called. \u9759\u6001\u94fe\u63a5\u5df2\u7ecf\u7f16\u5165\u6587\u4ef6\u4e86\uff0c\u52a8\u6001\u94fe\u63a5\u662f\u5728\u8fd0\u884c\u65f6\u94fe\u63a5\uff0c\u53ef\u4ee5\u7528\u5230\u6700\u65b0\u7684\u4ee3\u7801  </p> <ul> <li>Requires procedure code to be relocatable</li> <li>Avoids image bloat caused by static linking of all  (transitively) referenced libraries</li> <li>Automatically picks up new library versions</li> </ul>"},{"location":"CO/co2/#arrays-versus-pointers","title":"Arrays versus Pointers","text":"<p>\u6307\u9488\u662f\u53ef\u4ee5\u6539\u53d8\u7684\uff0c\u4f46\u662f\u6570\u7ec4\u9996\u5730\u5740\u4e0d\u80fd\u6539\u53d8\uff0c\u56e0\u6b64\u7ffb\u8bd1\u6210\u6c47\u7f16\u7684\u7ed3\u679c\u4e5f\u6709\u6240\u4e0d\u540c\u3002</p> Clearing an Array <p> </p>"},{"location":"CO/co2/#real-stuff-mips-instructions","title":"Real Stuff: MIPS Instructions","text":"<p>MIPS: commercial predecessor to RISC-V</p> <ul> <li>Similar basic set of instructions</li> <li>32-bit instructions</li> <li>32 general purpose registers, register 0 is always 0</li> <li>32 floating-point registers</li> <li>Memory accessed only by load/store instructions<ul> <li>Consistent use of addressing modes for all data sizes</li> </ul> </li> </ul> <p>Different conditional branches</p> <ul> <li>For &lt;, &lt;=, &gt;, &gt;=</li> <li>RISC-V: <code>blt, bge, bltu, bgeu</code></li> <li>MIPS: <code>slt, sltu</code> (set less than, result is 0 or 1)</li> <li>Then use <code>beq</code>, bne to complete the branch</li> </ul>"},{"location":"CO/co2/#real-stuff-the-intel-x86-isa","title":"Real Stuff: The Intel x86 ISA","text":""},{"location":"CO/co2/#other-risc-v-instructions","title":"Other RISC-V Instructions","text":"<ul> <li>Base integer instructions (RV64I)  <ul> <li>Those previously described, plus</li> <li><code>auipc rd, immed</code> // rd = (imm&lt;&lt;12) + pc</li> <li>follow by <code>jalr</code> (adds 12-bit immed) for long jump</li> <li><code>slt, sltu, slti, sltui</code>: set less than (like MIPS)</li> <li><code>addw, subw, addiw</code>: 32-bit add/sub</li> <li><code>sllw, srlw, srlw, slliw, srliw, sraiw</code>: 32-bit shift</li> </ul> </li> <li>32-bit variant: RV32I   registers are 32-bits wide, 32-bit operations</li> </ul> <p>RV64I \u662f\u6700\u57fa\u672c\u7684\u3002\u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u5f53\u524d\u6267\u884c\u662f\u57fa\u4e8e\u591a\u5c11\u4f4d\u7684\u5904\u7406\u5668\u3002</p> <p>Instruction Set Extensions</p> <ul> <li>M: integer multiply, divide, remainder</li> <li>A: atomic memory operations</li> <li>F: single-precision floating point</li> <li>D: double-precision floating point</li> <li>C: compressed instructions 16 \u4f4d\u7684\u6307\u4ee4\uff0c\u7528\u4e8e\u4f4e\u6210\u672c\u4ea7\u54c1\uff08\u5d4c\u5165\u5f0f\uff09</li> </ul> <p>Fallacies (\u8c2c\u8bef)</p> <ul> <li>Powerful instruction \\(\\Rightarrow\\) higher performance</li> <li>Use assembly code for high performance</li> <li>Backward compatibility \\(\\Rightarrow\\) instruction set doesn\u2019t change  </li> </ul> <p>Pifalls (\u9677\u9631) </p> <ul> <li>Sequential words are not at sequential addresses (\u5e94\u8be5 +4)</li> <li>Keeping a pointer to an automatic variable after procedure returns  </li> </ul>"},{"location":"CO/co3/","title":"Arithmetic for Computer","text":""},{"location":"CO/co3/#introduction","title":"Introduction","text":"<p>Instructions can be divided into 3 categories</p> <ul> <li>memory-reference instructions e.g. <code>lw, sw</code> \u9700\u8981 ALU \u8ba1\u7b97\u5185\u5b58\u5730\u5740</li> <li>arithmetic-logical instructions e.g. <code>add, sub, and, or, xor, slt</code> \u9700\u8981 ALU \u8fdb\u884c\u8ba1\u7b97</li> <li>control flow instructions e.g. <code>beq, bne, jal</code> \u9700\u8981 ALU \u8fdb\u884c\u6761\u4ef6\u5224\u65ad</li> </ul>"},{"location":"CO/co3/#signed-number-formats","title":"Signed Number Formats","text":"<ul> <li>Sign and magnitude</li> <li>2's Complement</li> <li>1's Complement</li> <li> <p>Biased notation  </p> <p>Why we need biased notation</p> <p> </p> <p>\u4e0a\u56fe\u662f 32 \u4f4d\u7684\u4e8c\u8fdb\u5236\u8865\u7801\u8868\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5de6\u4fa7\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u5982\u679c\u770b\u4f5c\u65e0\u7b26\u53f7\u6570\uff0c\u90a3\u4ed6\u4eec\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684\uff1b\u4f46\u53f3\u4fa7\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6574\u6570\u786e\u5b9e\u5206\u6bb5\u5355\u589e\u7684\u3002 \u6211\u4eec\u5e0c\u671b\u6709\u4e00\u79cd\u8fd9\u6837\u7684\u8868\u793a\uff0c\u80fd\u591f\u8ba9\u53f3\u4fa7\u7684\u5bf9\u5e94\u7684\u503c\u4e5f\u5355\u8c03\u9012\u589e\u3002 \u4e00\u4e2a\u60f3\u6cd5\u662f\u5bf9\u53f3\u4fa7\u6570\u52a0\u4e0a \\(2^31\\), \u76f8\u5f53\u4e8e\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u6700\u9ad8\u4f4d\u7ffb\u8f6c\u3002  </p> <p>\\([X]_b = 2^n + X\\)  \u4ece\u4e8c\u8fdb\u5236\u8865\u7801\u5230\u79fb\u7801\uff0c\u53ea\u9700\u8981\u7ffb\u8f6c\u7b26\u53f7\u4f4d\u5373\u53ef\u3002  </p> </li> </ul>"},{"location":"CO/co3/#arithmetic","title":"Arithmetic","text":"<ul> <li>Addition</li> <li>Substraction  </li> <li>Overflow detection: \\(C_n \\oplus C_{n-1}\\)</li> </ul> <p>Constructing an ALU </p> <p>\u6ce8: RISC-V \u4e0d\u652f\u6301 nor \u6307\u4ee4\u3002</p>"},{"location":"CO/co3/#multiplication","title":"Multiplication","text":""},{"location":"CO/co3/#unsigned-multiplication","title":"Unsigned multiplication","text":"<p>Multiplicand (\u88ab\u4e58\u6570) \\(\\times\\) Multiplier (\u4e58\u6570)  </p> <ul> <li> <p>\u5982\u679c\u4e58\u6570\u672b\u4f4d\u662f 1, \u52a0\u88ab\u4e58\u6570\uff0c\u5426\u5219\u52a0 0. \u968f\u540e\u5c06\u88ab\u4e58\u6570\u5de6\u79fb 1 \u4f4d\u3002      </p> <p>\u9700\u8981 128+128+64 bit \u7684\u5bc4\u5b58\u5668\uff0c\u548c\u4e00\u4e2a 128 bit ALU.  </p> </li> <li> <p>\u4e0d\u79fb\u88ab\u4e58\u6570\uff0c\u800c\u662f\u79fb\u79ef (product). \u8fd9\u6837 ALU \u53ea\u9700\u8981 64 \u4f4d\u3002      </p> Example <p> </p> </li> <li> <p>\u8fd9\u91cc\u79ef\u6700\u5f00\u59cb\u53ea\u4fdd\u5b58\u5728\u5de6\u534a\u90e8\u5206\uff0c\u53f3\u534a\u90e8\u5206\u4e3a\u7a7a\u3002\u800c\u4e58\u6570\u4e5f\u8981\u53f3\u79fb\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u628a\u4e24\u4e2a\u6570\u62fc\u5230\u4e00\u8d77\uff0c\u540c\u65f6\u53f3\u79fb\u3002 </p> </li> </ul>"},{"location":"CO/co3/#signed-multiplication","title":"Signed multiplication","text":"<p>\u6709\u7b26\u53f7\u76f8\u4e58\u4e0d\u80fd\u76f4\u63a5\u4e58\uff0c\u53ef\u4ee5\u5148\u7528\u7b26\u53f7\u4f4d\u51b3\u5b9a\u7ed3\u679c\u7b26\u53f7\uff0c\u518d\u5bf9\u7edd\u5bf9\u503c\u8fdb\u884c\u4e58\u6cd5\u3002 </p> <p>Booth's Algorithm </p> <p>\u601d\u60f3\uff1a\u5982\u679c\u6709\u4e00\u4e32 1, \u51cf\u6389\u4e58\u6570\u7684\u7b2c\u4e00\u4e2a 1, \u540e\u9762\u7684 1 \u7684\u5e8f\u5217\u8fdb\u884c\u79fb\u4f4d\uff0c\u5f53\u4e0a\u4e00\u6b65\u662f\u6700\u540e\u4e00\u4e2a 1 \u65f6\u52a0\u3002  </p> <p>\u6700\u5f00\u59cb\u628a\u79ef\u653e\u5728\u9ad8\u4f4d\uff0c\u88ab\u4e58\u6570\u653e\u5728\u4f4e\u4f4d\u3002\uff08\u6570\u636e\u4fdd\u5b58\u65b9\u6cd5\u540c 2.1.1\uff09\u9ed8\u8ba4 \\(bit_{-1}=0\\)</p> <ul> <li> <p>Action</p> <ul> <li>10 - subtract multiplicand from left</li> <li>11 - nop</li> <li>01 - add multiplicand to left half</li> <li>00 - nop</li> </ul> <p>\u6bcf\u4e2a\u64cd\u4f5c\u7ed3\u675f\u540e\u90fd\u8981\u79fb\u4f4d\uff0c\u548c 2.1.1 \u4e2d\u7c7b\u4f3c</p> </li> </ul> <p>\u6ce8\u610f\u79fb\u4f4d\u65f6\u4e0d\u8981\u6539\u53d8\u7b26\u53f7\u4f4d\u3002</p> <p>Example</p> <p> </p> <p>\u88ab\u4e58\u6570 Multiplicand \u662f 0010,  \u4e58\u6570 Multiplier \u662f 1101. \u6700\u5f00\u59cb\u5c06\u79ef 0000 \u653e\u5728\u9ad8\u56db\u4f4d, 1101 \u4f5c\u4e3a\u4e58\u6570\u653e\u5728\u4f4e\u56db\u4f4d\u3002 \u6700\u5f00\u59cb 10, \u5373\u6267\u884c\u51cf\u64cd\u4f5c, \\(0000-0010=1110\\). \u7b54\u6848\u4f9d\u7136\u653e\u5728\u9ad8\u56db\u4f4d\uff0c\u968f\u540e\u53f3\u79fb\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u6ce8\u610f\u53f3\u79fb\u7684\u65f6\u5019\u662f\u7b97\u672f\u53f3\u79fb, \\(bit_{-1}\\) \u4e5f\u53ef\u80fd\u4f1a\u6539\u53d8\u3002</p>"},{"location":"CO/co3/#faster-multiplication","title":"Faster Multiplication","text":"<p>32 \u4f4d\u6570\u4e58 32 \u4f4d\u6570\uff0c\u76f8\u5f53\u4e8e 32 \u4e2a 32 \u4f4d\u6570\u76f8\u52a0\u3002\uff08\u5e76\u884c\u52a0\u901f\uff09</p>"},{"location":"CO/co3/#division","title":"Division","text":"<p>Dividend (\u88ab\u9664\u6570) \\(\\div\\) Divisor (\u9664\u6570)   </p> <ul> <li> <p>\u5c06\u9664\u6570\u653e\u5230\u9ad8\u4f4d\u3002\u4ece\u9ad8\u4f4d\u5f00\u59cb\u51cf\uff0c\u51cf\u5b8c\u5c06\u9664\u6570\u53f3\u79fb\u3002\u5546\u4e5f\u968f\u4e4b\u4e0d\u65ad\u5de6\u79fb\u3002\u5982\u679c\u51cf\u5b8c\u4e4b\u540e\u662f\u8d1f\u6570\uff0c\u9700\u8981\u8fd8\u56de\u53bb\u3002      </p> 7\u00f72 <p> </p> </li> <li> <p>\u9664\u6570\u4e0d\u52a8\uff0c\u88ab\u9664\u6570\u4e0d\u505c\u5730\u5f80\u5de6\u79fb\u3002\u51cf\u5230\u6700\u540e\u4e00\u6b21\uff0c\u5982\u679c\u662f\u5c0f\u4e8e 0 \u7684\uff0c\u8bf4\u660e\u4e0d\u7528\u51cf\u4e86\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u4f59\u6570\uff0c\u9700\u8981\u53f3\u79fb\u79fb\u56de\u6765\u3002\uff08\u5373\u5c06\u5de6\u534a\u90e8\u5206\u53f3\u79fb\u4e00\u4f4d\uff09   \u56e0\u4e3a\u6bcf\u6b21\u90fd\u662f\u5c06\u9664\u6570\u548c\u88ab\u9664\u6570\u6700\u9ad8\u4f4d\u51cf\uff0c\u51cf\u4e86\u4e4b\u540e\u9ad8\u4f4d\u5c31\u6ca1\u7528\u4e86\uff0c\u53ef\u4ee5\u79fb\u51fa\u53bb\u3002  </p> </li> </ul> <pre><code>\u5b9e\u9645\u4e0a\u8fd9\u91cc\u7ed3\u679c\u662f 129 \u4f4d\uff0c\u9632\u6b62 carry \u4e22\u5931\n\n??? Example\n    &lt;div align=center&gt; &lt;img src=\"http://cdn.hobbitqia.cc/202303102303764.png\" width = 60%/&gt; &lt;/div&gt;\n\n    \u8fd9\u91cc\u6700\u5f00\u59cb\u4f59\u6570\u5c31\u662f\u6574\u4e2a\u88ab\u9664\u6570\u3002   \n    \u7c7b\u4f3c\u4e58\u6cd5\uff0c\u8fd9\u91cc\u7684\u9664\u6570\u53ea\u548c\u88ab\u9664\u6570\u7684\u9ad8\u4f4d\u76f8\u51cf\u3002\u5982\u679c\u51cf\u51fa\u6765\u662f\u8d1f\u6570\uff0c\u9700\u8981\u52a0\u56de\u53bb\u3002\u6bcf\u6b21\u51cf\u5b8c\u4e4b\u540e\u5148\u5de6\u79fb\uff0c\u7136\u540e\u6700\u53f3\u8fb9\u7684\u4e00\u4f4d\u653e\u5546\u3002   \n    4.1 \u65f6\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u7ed3\u675f\u4e86\u9664\u6cd5\u64cd\u4f5c\uff0c\u6b64\u65f6\u7684\u9ad8\u4f4d\u5c31\u662f\u6211\u4eec\u7684\u4f59\u6570\uff0c\u4f46\u662f\u8fd9\u6700\u540e\u4e00\u6b21\u7684\u7ed3\u679c\u8fd8\u6ca1\u6709\u653e\u56de\u5230 Reminder \u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u518d\u5f80\u5de6\u79fb\u4e00\u4f4d\u4e3a\u5546\u7559\u51fa\u7a7a\u95f4\uff0c\u653e\u5165\u540e\uff0c\u518d\u628a\u9ad8\u4f4d\u4f59\u6570\u5f80\u53f3\u79fb\u52a8\u4ee5\u62b5\u6d88\u5f71\u54cd\u3002\uff08\u4e2a\u4eba\u8ba4\u4e3a\u53ef\u4ee5\u76f4\u63a5\u5bf9\u4f4e\u4f4d\u5de6\u79fb\u4e00\u4f4d\u5373\u53ef\uff09\n</code></pre> <p>\u5e26\u7b26\u53f7\u7684\u9664\u6cd5\uff1a\u8981\u6c42\u4f59\u6570\u548c\u88ab\u9664\u6570\u7b26\u53f7\u76f8\u540c\u3002 \u9664\u96f6\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff0c\u7531\u8f6f\u4ef6\u68c0\u6d4b\u3002</p>"},{"location":"CO/co3/#floating-point-number","title":"Floating point number","text":"<p>\u53ef\u89c1 ICS Notes </p> S exp frac Float 1 8 23 Double 1 11 52 <p>Normalized form: \\(N=(-1)^S\\times M\\times 2^E\\) </p> <ul> <li>S: sign. \\(S=1\\) indicates the number is negative.</li> <li>M: \u5c3e\u6570. Normally, \\(M=1.frac=1+frac\\).</li> <li>E: \u9636\u7801. Normally, \\(E=exp-Bias\\) where \\(Bias=127\\) for floating point numbers. \\(Bias = 1023\\) for double. </li> </ul> <p>\u4e3a\u4ec0\u4e48\u8981\u628a exponent \u653e\u5728\u524d\u9762\uff1f \u56e0\u4e3a\u6570\u7684\u5927\u5c0f\u4e3b\u8981\u7531 exponent \u51b3\u5b9a\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981 Bias -&gt; \u79fb\u7801 </p> <p>\u4e0d\u8981\u5fd8\u4e86\u524d\u5bfc 1</p>"},{"location":"CO/co3/#precision","title":"Precision","text":"<ul> <li>signle: approx \\(2^{-23}\\) \\(23\\times \\log_{10}{2} \\approx 23\\times 0.3 \\approx 7\\) demical digits of precision.  </li> <li>double: approx \\(2^{-52}\\) \\(52\\times \\log_{10}{2}\\approx 52\\times 0.3 \\approx 16\\) demical digits of preicsion.</li> </ul>"},{"location":"CO/co3/#limitations","title":"Limitations","text":"<ul> <li>Overflow: The number is too big to be represented</li> <li>Underflow: The number is too small to be represented</li> </ul>"},{"location":"CO/co3/#denormal-numbers","title":"Denormal Numbers","text":"<ul> <li>\\(Exponent=000\\ldots 0\\)  \u975e\u89c4\u683c\u5316\u6570\uff0c\u8ba9\u6570\u5728\u8f83\u5c0f\u65f6\u80fd\u9010\u6e10\u4e0b\u6ea2\u51fa\u3002   \\(x=(-1)^s\\times((0+Fraction)\\times 2^{1-Bias})\\) \u6ce8\u610f\u6b64\u65f6\u6307\u6570\u662f \\(1-Bias=-126/-1022\\).   <ul> <li>Denormal with \\(Fraction = 000...0\\) we define \\(x=0\\)</li> </ul> </li> <li>\\(Exponent=111\\ldots 1, Fraction=000\\ldots 0\\)  \u8868\u793a \\(\\pm \\inf\\) </li> <li>\\(Exponent=111\\ldots 1, Fraction\\neq 000\\ldots 0\\)  \u8868\u793a NaN (Not-a-Number)  </li> </ul>"},{"location":"CO/co3/#floating-point-addition","title":"Floating-Point Addition","text":"<ul> <li> <p>Alignment \u7edf\u4e00\u6307\u6570\uff0c\u4e00\u822c\u5c0f\u7684\u5f80\u5927\u7684\u53d8\u3002\u56e0\u4e3a\u7cfb\u7edf\u7cbe\u5ea6\u4f4d\u6570\u6709\u9650\uff0c\u5982\u679c\u5c06\u5927\u7684\u5f80\u5c0f\u7684\u53d8\uff0c\u90a3\u53ef\u80fd\u4f1a\u56e0\u6b64\u635f\u5931\u8f83\u5927\u3002  </p> Example <p> </p> </li> <li> <p>The proper digits have to be added  </p> </li> <li>Addition of significands</li> <li>Normalization of the result</li> <li>Rounding</li> </ul> Example <p> </p> <p>FP Adder Hardware </p> <ul> <li>step 1 \u5728\u9009\u62e9\u6307\u6570\u5927\u7684\uff0c\u5e76\u8fdb\u884c\u5bf9\u9f50\u3002\u540c\u65f6\u5c3e\u6570\u53ef\u80fd\u8fd8\u8981\u52a0\u4e0a\u524d\u5bfc 1. </li> <li>step 3 \u662f\u5bf9\u7ed3\u679c\u8fdb\u884c\u6807\u51c6\u5316\u3002</li> <li>\u84dd\u8272\u7ebf\u4e3a\u63a7\u5236\u901a\u8def\uff0c\u9ed1\u8272\u7ebf\u4e3a\u6570\u636e\u901a\u8def\u3002</li> </ul>"},{"location":"CO/co3/#floating-point-multiplication","title":"Floating-Point Multiplication","text":"<p>\\((s1\\cdot 2^{e1}) \\cdot (s2\\cdot 2^{s2}) = (s1\\cdot s2)\\cdot 2^{e1+e2}\\)</p> <ul> <li>Add exponents</li> <li>Multiply the significands</li> <li>Normalize</li> <li>Over/Underflow? \u6709\u7684\u8bdd\u8981\u629b\u51fa\u5f02\u5e38\uff0c\u901a\u8fc7\u7ed3\u679c\u7684\u6307\u6570\u5224\u65ad\u3002</li> <li>Rounding</li> <li>Sign</li> </ul> <p>\u6ce8\u610f Exponet \u4e2d\u662f\u6709 Bias \u7684\uff0c\u4e24\u4e2a\u6570\u7684 exp \u90e8\u5206\u76f8\u52a0\u540e\u8fd8\u8981\u518d\u51cf\u53bb Bias. </p> Example <p> </p> <p>Data Flow</p> <ul> <li>\u53f3\u8fb9\u5f80\u56de\u7684\u7bad\u5934: Rounding \u540e\u53ef\u80fd\u4f1a\u8fdb\u4f4d\u3002</li> <li>Incr \u7528\u4e8e\u6807\u51c6\u5316\u7ed3\u679c\uff0c\u4e0e\u53f3\u4fa7 Shift Right \u914d\u5408\u3002</li> </ul>"},{"location":"CO/co3/#accurate-arithmetic","title":"Accurate Arithmetic","text":"<ul> <li> <p>Extra bits of precision (guard, round, sticky)</p> <ul> <li> <p>guard, round \u4e3a\u4e86\u4fdd\u8bc1\u56db\u820d\u4e94\u5165\u7684\u7cbe\u5ea6\u3002 \u7ed3\u679c\u6ca1\u6709\uff0c\u53ea\u5728\u8fd0\u7b97\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u7559\u3002</p> <p>Example</p> <p> </p> </li> <li> <p>sticky \u672b\u5c3e\u5982\u679c\u4e0d\u4e3a\u5168 0, \u5219 sticky \u4f4d\u4e3a 1, \u5426\u5219\u4e3a 0.</p> </li> </ul> </li> </ul> <p>\u635f\u5931\u4e0d\u4f1a\u8d85\u8fc7 0.5 \u4e2a ulp. </p>"},{"location":"CO/co4/","title":"The Processor","text":""},{"location":"CO/co4/#introduction","title":"Introduction","text":""},{"location":"CO/co4/#instruction-execution-overview","title":"Instruction Execution Overview","text":"<p>CPU performance factors</p> <ul> <li>Instruction count Determined by ISA and compiler \u5982\u540c\u6837\u7684\u529f\u80fd\u7528 Intel \u548c RISC-V \u7684\u5904\u7406\u5668\u5b9e\u73b0\uff0c\u82f1\u7279\u5c14\u7684\u6307\u4ee4\u7528\u7684\u66f4\u5c11\uff08\u56e0\u4e3a\u66f4\u590d\u6742\uff09</li> <li>CPI and Cycle time Determined by CPU hardware</li> </ul> <p>For every instruction, the first two steps are identical</p> <ul> <li>Fetch the instruction from the memory</li> <li>Decode and read the registers</li> </ul> <p>Next steps depend on the instruction class  </p> <ul> <li>Memory-reference <code>load, store</code></li> <li>Arithmetic-logical  </li> <li>branches  </li> </ul>"},{"location":"CO/co4/#cpu-overview","title":"CPU Overview","text":"<ul> <li>Use ALU to calculate<ul> <li>Arithmetic result</li> <li>Memory address for load/store</li> <li>Branch comparison \u56e0\u4e3a\u6211\u4eec\u662f\u5355\u5468\u671f\uff0c\u56e0\u6b64 ALU \u53ea\u80fd\u505a\u6bd4\u8f83\uff0c\u5177\u4f53\u8df3\u8f6c\u7684\u5730\u5740\u7531\u5355\u72ec\u7684 Adder \u8ba1\u7b97\u3002</li> </ul> </li> <li>Access data memory for load/store</li> <li>PC \\(\\leftarrow\\) target address or PC + 4  </li> </ul> Question <p>\u4e3a\u4ec0\u4e48\u6307\u4ee4\u8981\u548c\u5185\u5b58\u5206\u5f00\uff1f \u56e0\u4e3a\u6211\u4eec\u662f\u5355\u5468\u671f\uff0c\u6211\u4eec\u65e0\u6cd5\u5728\u540c\u4e00\u4e2a\u5468\u671f\u5185\u65e2\u8bfb\u6307\u4ee4\u53c8\u8bfb\u6570\u636e\u3002</p> <p>Can\u2019t just join wires together -- Use multiplexers.  </p>"},{"location":"CO/co4/#control","title":"Control","text":"<ul> <li>different sources for unit</li> <li>read/write memory</li> </ul>"},{"location":"CO/co4/#logical-design-convention","title":"Logical Design Convention","text":"<ul> <li>Information encoded in binary<ul> <li>Low voltage = 0, High voltage = 1</li> <li>One wire per bit</li> <li>Multi-bit data encoded on multi-wire buses </li> </ul> </li> <li>Combinational element<ul> <li>Operate on data</li> <li>Output is a function of input</li> </ul> </li> <li>State (sequential) elements Store information</li> </ul> \u903b\u8f91\u7535\u8def\u5185\u5bb9\u7b80\u8981\u590d\u4e60"},{"location":"CO/co4/#building-a-datapath","title":"Building a datapath","text":"<p>Elements that process data and addresses in the CPU.  </p> <p>\u540c\u7c7b\u6307\u4ee4\u7684 opcode \u662f\u4e00\u6837\u7684\uff08I \u578b\u6307\u4ee4\u7684\u91cc\u903b\u8f91\u8fd0\u7b97\u3001load \u6307\u4ee4\u3001jal \u4e0d\u540c\uff09\uff0c\u5177\u4f53\u529f\u80fd\u7531 Func \u51b3\u5b9a\u3002\uff08\u56e0\u6b64\u4e0d\u628a\u6240\u6709\u64cd\u4f5c\u7f16\u5230 opcode \u5185\uff09</p>"},{"location":"CO/co4/#instruction-execution-in-risc-v","title":"Instruction execution in RISC-V","text":"<ul> <li>Fetch:<ul> <li>Take instructions from the instruction memory </li> <li>Modify PC to point the next instruction</li> </ul> </li> <li>Instruction decoding &amp; Read Operand: <ul> <li>Will be translated into machine control command </li> <li>Reading Register Operands, whether or not to use </li> </ul> </li> <li>Executive Control:<ul> <li>Control the implementation of the corresponding ALU operation </li> </ul> </li> <li>Memory access:<ul> <li>Write or Read data from memory </li> <li>Only ld/sd</li> </ul> </li> <li>Write results to register:<ul> <li>If it is R-type instructions, ALU results are written to rd</li> <li>If it is I-type instructions, memory data are written to rd</li> </ul> </li> <li>Modify PC for branch instructions</li> </ul>"},{"location":"CO/co4/#instruction-fetching","title":"Instruction fetching","text":"<ul> <li>R-format Instructions  <ul> <li>Read 2 register operands</li> <li>Perform arithmetic/logical operation</li> <li>Write register result</li> </ul> </li> <li>Load/Store Instructions<ul> <li>Read register operands</li> <li>Calculate address using 12-bit offset Use ALU, but sign-extend offset</li> <li>Load: Read memory and update register</li> <li>Store: Write register value to memory</li> </ul> </li> <li>Branch Instructions<ul> <li>Read 2 register operands</li> <li>Compare operands use ALU, substract and check Zero output</li> <li>Calculate target address <ul> <li>Sign-extend displacement</li> <li>Shift left 1 place (halfword displacement)</li> <li>Add to PC value</li> </ul> </li> </ul> </li> </ul> <p>First-cut data path does an instruction in one clock cycle</p> <ul> <li>Each datapath element can only do one function at a time</li> <li>Hence, we need separate instruction and data memories</li> </ul>"},{"location":"CO/co4/#path-built-using-multiplexer","title":"Path Built using Multiplexer","text":"<ul> <li> <p>R-type instruction Datapath       </p> </li> <li> <p>I-type instruction Datapath</p> <ul> <li>For ALU</li> <li>For load </li> </ul> </li> <li> <p>S-type (store) instruction Datapath</p> </li> </ul> <ul> <li>SB-type (branch) instruction Datapath</li> </ul> <ul> <li>UJ-type instruction Datapath</li> </ul> <p>Full datapath</p>"},{"location":"CO/co4/#a-simple-implementation-scheme","title":"A simple Implementation Scheme","text":"<p>Analyse for cause and effect</p> <ul> <li>Information comes from the 32 bits of the instruction</li> <li>Selecting the operations to perform (ALU, read/write, etc.)</li> <li>Controlling the flow of data (multiplexor inputs)</li> <li>ALU's operation based on instruction type and function code</li> </ul> <ul> <li>7 \u4e2a\u63a7\u5236\u4fe1\u53f7\u548c\u4e00\u4e2a 4 \u4f4d\u7684 <code>ALU_operation</code>.  </li> <li>MemToReg \u6709\u4e09\u4e2a\u6e90\uff0c\u5206\u522b\u662f <code>load</code> \u6307\u4ee4\uff0cPC \u6765\u7684(<code>jal, jalr</code> \u5b58 PC+4), ALU \u51fa\u6765\u7684\uff08R \u578b\uff0cI \u578b\uff09</li> </ul>"},{"location":"CO/co4/#alu-symbol-control","title":"ALU symbol &amp; Control","text":"<p>ALU used for</p> <ul> <li>Load/Store: F = add</li> <li>Branch: F = subtract</li> <li>R-type: F depends on opcode</li> </ul> <p>\u56e0\u6b64\u6211\u4eec\u8fdb\u884c\u4e24\u7ea7\u89e3\u7801 2-level decode. </p>"},{"location":"CO/co4/#first-level","title":"First level","text":"<ul> <li>\u4e00\u7ea7\u89e3\u7801\u540e\uff0c\u53ef\u4ee5\u51b3\u5b9a\u9664\u4e86 <code>ALU_opration</code> \u4ee5\u5916\u7684\u63a7\u5236\u4fe1\u53f7</li> <li>\u540c\u65f6\u6211\u4eec\u4f1a\u89e3\u7801\u51fa 2 \u4f4d\u7684 <code>ALU_op</code>. </li> </ul>"},{"location":"CO/co4/#second-level","title":"second level","text":"<p>ALU operation is decided by 2-bit ALUOp derived  from opcode, and funct7 &amp; funct3 fields of the  instruction.  </p>"},{"location":"CO/co4/#datapath-with-control","title":"Datapath with Control","text":"<p>\u84dd\u7ebf\u4e3a\u63a7\u5236\u901a\u8def\uff0c\u4f1a\u51b3\u5b9a\u6570\u636e\u7684\u6d41\u5411\u3002</p>"},{"location":"CO/co4/#an-overview-of-pipelining","title":"An overview of pipelining","text":""},{"location":"CO/co4/#performance","title":"Performance","text":"<p>\u5bf9\u4e8e\u5355\u5468\u671f CPU, CPI \u662f 1, \u4f46\u65f6\u949f\u5468\u671f\u4f1a\u5f88\u957f\u3002   \u5047\u8bbe\u53d6\u6307\u4ee4 200ps, \u5bc4\u5b58\u5668\u8bfb 100ps, ALU \u8ba1\u7b97 200ps, \u5185\u5b58\u8bbf\u95ee 200ps, \u5bc4\u5b58\u5668\u5199 100ps. \u90a3\u4e48 <code>add</code> \u9700\u8981 600ps, <code>ld</code> \u9700\u8981 800ps, <code>sd</code> \u9700\u8981 700ps, <code>beq</code> \u9700\u8981 500ps.   </p> <p>Longest delay determines clock period. (<code>ld</code>) We will improve performance by pipelining.  </p>"},{"location":"CO/co4/#pipelining","title":"Pipelining","text":"<p>\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u6761\u6307\u4ee4\u90fd\u5212\u5206\u4e3a\u8fd9\u4e48\u51e0\u6b65\uff1a</p> <ol> <li>IF: Instruction fetch from memory</li> <li>ID: Instruction decode &amp; register read</li> <li>EX: Execute operation or calculate address</li> <li>MEM: Access memory operand</li> <li>WB: Write result back to register</li> </ol> <p>\\(CPI \\approx 1\\)</p> <ul> <li>One instruction will be issued (or finished) each cycle.  </li> <li>During any cycle, one instruction is present in each stage.  </li> </ul>"},{"location":"CO/co4/#pipeline-performance","title":"Pipeline Performance","text":"<p>\u4e0d\u540c\u64cd\u4f5c\u7684\u65f6\u95f4\u4e5f\u4e0d\u540c\uff0c\u6d41\u6c34\u7ebf CPU \u7684\u65f6\u949f\u5468\u671f\u4e3a\u6700\u957f\u7684\u64cd\u4f5c\u65f6\u95f4\u3002</p> <p>\u6d41\u6c34\u7ebf\u53ef\u4ee5\u63d0\u9ad8\u541e\u5410\u91cf(throughput) \u4f46\u5e76\u6ca1\u6709\u6539\u53d8\u6bcf\u6761\u6307\u4ee4\u7684\u6267\u884c\u65f6\u95f4(Latency)\u3002  </p>"},{"location":"CO/co4/#risc-v-isa-designed-for-pipelining","title":"RISC-V ISA designed for pipelining","text":"<p>RISC-V \u9002\u5408\u6d41\u6c34\u7ebf\u8bbe\u8ba1\u3002  </p> <ul> <li>All instructions are 32-bits Easier to fetch and decode in one cycle</li> <li>Few and regular instruction formats Can decode and read registers in one step</li> <li>Load/store addressing  Can calculate address in 3<sup>rd</sup> stage, access memory in 4<sup>th</sup> stage</li> </ul>"},{"location":"CO/co4/#hazards","title":"Hazards","text":"<p>\u5192\u9669/\u7ade\u4e89 \u5f53\u524d\u8fd9\u6761\u6307\u4ee4\u4e0d\u80fd\u8fdb\u5165\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u8981\u7b49\u5f85\u3002  </p> <ul> <li>Structure hazards  A required resource is busy.  </li> <li>Data hazard Need to wait for previous instruction to complete  its data read/write.  </li> <li>Control hazard Deciding on control action depends on previous  instruction.  </li> </ul>"},{"location":"CO/co4/#structure-hazards","title":"Structure Hazards","text":"<p>\u5982\u679c\u53ea\u6709\u4e00\u5757\u5185\u5b58\uff0c\u4f46 IF \u548c MEM \u9636\u6bb5\u90fd\u9700\u8981\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\uff0c\u90a3\u4e48 IF \u5c31\u4f1a\u88ab stall \u6682\u505c\uff0c\u9020\u6210\u4e00\u4e2a bubble. (\u5373\u6d41\u6c34\u7ebf\u5185\u6709\u4e00\u4e2a\u65f6\u523b\u662f\u6e05\u7a7a\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u6211\u4eec\u6ca1\u6709\u53bb\u53d6\u6307\u4ee4)</p> <p>Pipelined datapaths require separate instruction/data memories. (Or separate instruction/data caches)</p>"},{"location":"CO/co4/#data-hazards","title":"Data Hazards","text":"<p>An instruction depends on completion of data access by a previous instruction.  </p> <p>Example</p> <p> </p> <p>\u6ce8\u610f\u8fd9\u91cc WB \u662f\u5728\u524d\u534a\u4e2a\u5468\u671f\u5c06\u6570\u636e\u5199\u5165\u5bc4\u5b58\u5668, ID \u662f\u5728\u540e\u534a\u4e2a\u5468\u671f\u5c06\u6570\u636e\u4ece\u5bc4\u5b58\u5668\u4e2d\u53d6\u51fa\u3002 \u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u8981\u7528\u7684\u7ed3\u679c\u5728 EX \u65f6\u5df2\u7ecf\u4ea7\u751f\u4e86\u3002</p> <ul> <li> <p>Forwarding(Bypassing) Use result when it is computed  </p> <ul> <li>Don\u2019t wait for it to be stored in a register</li> <li>Requires extra connections in the datapath</li> </ul> Example <p> </p> </li> </ul> <p>Load-Use Data Hazard</p> Example <p> </p> <p>\u6d41\u6c34\u7ebf\u7684 CPI \u4e0d\u53ef\u80fd\u7b49\u4e8e 1, \u56e0\u4e3a\u4e0a\u56fe\u8fd9\u79cd\u60c5\u51b5\u4e00\u5b9a\u4f1a\u53d1\u751f(<code>ld</code> \u65e0\u6cd5\u907f\u514d)\u3002 \u53ef\u4ee5\u628a\u540e\u7eed\u4e0e\u8fd9\u4e9b\u5bc4\u5b58\u5668\u65e0\u5173\u7684\u6307\u4ee4\u5148\u62ff\u5230\u8fd9\u91cc\u6267\u884c\u3002\uff08\u4e71\u5e8f\u6267\u884c\uff09</p> Example <p> </p> <p>\u4fee\u6539\u540e, <code>ld x2, 8(x0)</code> \u5df2\u7ecf\u4ece\u5185\u5b58\u4e2d\u8bfb\u51fa\u6570\u636e\u8fd8\u6ca1\u6709\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u53ef\u4ee5\u76f4\u63a5\u9001\u5230 <code>add x3, x1, x2</code> \u4e2d\u53bb\u3002</p>"},{"location":"CO/co4/#control-hazards","title":"Control Hazards","text":"<p>Branch determines flow of control</p> <ul> <li>Fetching next instruction depends on branch outcome</li> <li>Pipeline can\u2019t always fetch correct instruction</li> </ul> <p>\u53ef\u4ee5\u9884\u6d4b\uff0c\u6216\u8005\u5c06\u6bd4\u8f83\u653e\u5728 ID \u7ea7\u3002</p> Example <p> </p> <p>Branch Prediction \u66f4\u957f\u7684\u6d41\u6c34\u7ebf\u4e0d\u80fd\u5f88\u65e9\u5730\u51b3\u5b9a\u5206\u652f\u7ed3\u679c\u3002 \u53ef\u4ee5\u9884\u6d4b branch \u547d\u4e2d\u6216\u8005\u4e0d\u547d\u4e2d\u3002  </p> <ul> <li>Static branch prediction \u5047\u8bbe\u603b\u662f\u547d\u4e2d/\u4e0d\u547d\u4e2d</li> <li>Dynamic branch prediction \u8bb0\u5f55\u4e0a\u6b21\u8dd1\u5230\u8fd9\u91cc\u662f\u5426\u547d\u4e2d\uff0c\u7136\u540e\u4e0b\u6b21\u6309\u7167\u4e4b\u524d\u7684\u7ed3\u679c\u9884\u6d4b\u3002  </li> </ul> <p>Summary</p> <ul> <li>Pipelining improves performance by increasing instruction throughput  <ul> <li>Executes multiple instructions in parallel</li> <li>Each instruction has the same latency</li> </ul> </li> <li>Subject to hazards(Structure, data, control)</li> <li>Instruction set design affects complexity of pipeline implementation</li> </ul>"},{"location":"CO/co4/#risc-v-pipelined-datapath","title":"RISC-V Pipelined Datapath","text":"<p>\u4e0d\u540c\u9636\u6bb5\u4e4b\u95f4\uff0c\u6211\u4eec\u9700\u8981\u5bc4\u5b58\u5668\u6765\u4fdd\u5b58\u4e4b\u524d\u9636\u6bb5\u5f97\u5230\u7684\u503c\u3002 \u7ade\u4e89\u53ea\u4f1a\u53d1\u751f\u5728\u4ece\u53f3\u5f80\u5de6\u7684\u9636\u6bb5\u3002</p> <p>\u6ce8\u610f\u5230\uff0c\u7b2c\u4e94\u4e2a\u9636\u6bb5\u5199\u56de\u65f6\uff0c\u5199\u5bc4\u5b58\u5668\u53f7\u5e94\u8be5\u662f\u4ece MEM/WB \u4e2d\u7684\uff0c\u800c\u4e0d\u662f IF \u51fa\u7684\u5bc4\u5b58\u5668\u53f7\u3002</p> <ul> <li>Single-clock-cycle pipeline diagram: Shows pipeline usage in a single cycle; Highlight resources used</li> <li>multi-clock-cycle diagram: Graph of operation over time</li> </ul>"},{"location":"CO/co4/#pipelined-control","title":"Pipelined Control","text":"<p>\u63a7\u5236\u4fe1\u53f7 ID \u9636\u6bb5\u5168\u90e8\u8bd1\u51fa\uff0c\u968f\u540e\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u5230\u540e\u7eed\u9636\u6bb5\u4e2d\u53bb\u3002 \u6709\u4e9b\u4fe1\u53f7\u5728 WB \u9636\u6bb5\u7528\uff0c\u6709\u4e9b\u5728 M \u9636\u6bb5\u7528\uff0c\u6709\u4e9b\u5728 EX. \u4f7f\u7528\u4e4b\u540e\u5c31\u4e0d\u518d\u9700\u8981\u628a\u4fe1\u53f7\u4f20\u9012\u4e0b\u53bb\u3002</p>"},{"location":"CO/co4/#data-hazards_1","title":"Data Hazards","text":""},{"location":"CO/co4/#forwarding","title":"Forwarding","text":"Example <p><code>and</code> \u8bed\u53e5\u4e2d\u5c06 EX \u7684\u7ed3\u679c\u524d\u9012, <code>or</code> \u8bed\u53e5\u4e2d\u8981\u5c06 DM \u7684\u7ed3\u679c\u524d\u9012\uff08\u6b64\u65f6 EX \u7684\u503c\u5df2\u7ecf\u4e0d\u662f\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\u4e86\uff09</p> <p>\u5982\u4f55\u5224\u65ad\u662f\u5426\u9700\u8981\u524d\u9012\uff1f  Rd \u8981\u4e00\u76f4\u4f20\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u6b64\u5224\u65ad\u8981\u8bfb\u51fa\u7684\u5bc4\u5b58\u5668\u662f\u5426\u662f\u4e4b\u524d\u6307\u4ee4\u8981\u5199\u56de\u7684\u5bc4\u5b58\u5668\u3002 Data hazards when</p> <ul> <li><code>EX/MEM.RegisterRd = ID/EX.RegisterRs1</code> \u5728\u7b2c\u56db\u4e2a\u65f6\u949f\u5468\u671f\u65f6\u628a EX/MEM \u7684\u5bc4\u5b58\u5668\u503c\u9001\u5230 ALU. </li> <li><code>EX/MEM.RegisterRd = ID/EX.RegisterRs2</code></li> <li><code>MEM/WB.RegisterRd = ID/EX.RegisterRs1</code></li> <li><code>MEM/WB.RegisterRd = ID/EX.RegisterRs2</code></li> </ul> <p>\u53ea\u6709\u5728\u6211\u4eec\u8981\u6539\u53d8\u5bc4\u5b58\u5668\u7684\u503c\u7684\u65f6\u5019\u624d\u80fd\u7528\u524d\u9012\u7684\u503c\uff08\u6709\u4e9b\u6307\u4ee4\u53ef\u80fd\u6839\u672c\u5c31\u4e0d\u4f1a\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u6ca1\u6709\u6709\u6548\u7684 Rd\uff09  <code>EX/MEM.RegWrite, MEM/WB.RegWrite</code> \u4e0d\u4e3a 0. \u6b64\u5916 <code>EX/MEM.RegisterRd, MEM/WB.RegisterRd</code> \u4e5f\u4e0d\u80fd\u4e3a 0. </p> Mux control Source Explanation <code>ForwardA = 00</code> ID/EX The first ALU operand comes from the register file. <code>ForwardA = 10</code> EX/MEM The first ALU operand is forwarded from the prior ALU result. <code>ForwardA = 01</code> MEM/WB The first ALU operand is forwarded from data memory or an earlier ALU result. <p>Double Data Hazard</p> <p> </p> <p>\u6211\u4eec\u524d\u9012\u65f6\u8981\u52a0\u4e00\u4e2a\u6761\u4ef6\uff0c\u53ea\u6709\u5728 EX/MEM \u7684\u6761\u4ef6\u4e0d\u6210\u7acb\u65f6\uff0c\u624d\u80fd\u67e5\u770b MEM/WB \u7684\u6761\u4ef6\u3002</p>"},{"location":"CO/co4/#load-use-hazard-detection","title":"Load-Use Hazard Detection","text":"<p>\u5982\u679c\u6211\u4eec\u5728 ld \u6307\u4ee4 EX/MEM \u65f6\u6682\u505c\uff0c\u6b64\u65f6 ld \u540e\u9762\u6709\u4e24\u6761\u6307\u4ee4\u9700\u8981\u6682\u505c\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u66f4\u65e9\u7684\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>Load-use hazard when</p> <ul> <li><code>ID/EX.MemRead and ((ID/EX.RegisterRd = IF/ID.RegisterRs1) or (ID/EX.RegisterRd = IF/ID.RegisterRs2))</code></li> </ul> <p>If detected, stall and insert bubble</p>"},{"location":"CO/co4/#stall","title":"Stall","text":"<p>\u5728 ld \u540e\u9762 stall\uff0c\u4f7f\u5f97\u8fd9\u7ea7\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a 0, \u540c\u65f6\u963b\u6b62 PC, IF/ID \u5bc4\u5b58\u5668\u7684\u66f4\u65b0\u3002 \u76f8\u5f53\u4e8e\u53c8\u8fdb\u884c\u4e86\u4e00\u6b21 decode. </p> Example <p> </p> <ul> <li>Stalls reduce performance<ul> <li>But are required to get correct results</li> </ul> </li> <li>Compiler can arrange code to avoid hazards and stalls</li> </ul>"},{"location":"CO/co4/#branch-hazards","title":"Branch Hazards","text":"<p>\u662f\u5426\u8df3\u8f6c\u5728 MEM \u9636\u6bb5\u51b3\u5b9a\u3002  </p> <p>\u6700\u6734\u7d20\u7684\u65b9\u6cd5\u662f\u65e0\u89c6\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u524d\u4e09\u4e2a\u9636\u6bb5\u5e76\u4e0d\u6d89\u53ca\u5bf9\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u4fee\u6539\uff0c\u5373\u4f7f\u6211\u4eec\u9884\u6d4b\u540e\u7eed\u4e0d\u6267\u884c\u8fd9\u4e9b\u6307\u4ee4\u4e5f\u4e0d\u4f1a\u5e26\u6765\u5f71\u54cd\u3002\u4f46\u8fd9\u6837\u53ef\u80fd\u5e26\u6765 CPI \u7684\u663e\u8457\u964d\u4f4e\u3002</p> <p>\u4e00\u79cd\u65b9\u6cd5\u662f\u5728 ID \u7ea7\u51b3\u5b9a\u662f\u5426\u8df3\u8f6c\uff08\u6b64\u65f6\u5df2\u7ecf\u6709\u4e86\u4e24\u4e2a\u6e90\u64cd\u4f5c\u6570\u548c\u7acb\u5373\u6570\uff09</p> Example <p> </p> <p>\u8fd9\u6837\u6211\u4eec\u53ea\u53ef\u80fd\u591a\u4f59\u4e00\u6761\u6307\u4ee4\uff0c\u63d2\u5165 bubble \u5373\u53ef\u3002\u4f46\u662f\u8fd9\u6837\u4e5f\u4e0d\u53ef\u63a5\u53d7\u3002</p>"},{"location":"CO/co4/#dynamic-branch-prediction","title":"Dynamic Branch Prediction","text":"<p>In deeper and superscalar(\u591a\u53d1\u5c04) pipelines, branch penalty is more significant.  </p> <p>Use dynamic prediction.  </p> <ul> <li>Branch prediction buffer (aka branch history table)  \u8bb0\u5f55\u524d\u51e0\u6b21\u662f\u5426\u547d\u4e2d</li> <li>Indexed by recent branch instruction addresses</li> <li>Stores outcome (taken/not taken)</li> <li>To execute a branch<ul> <li>Check table, expect the same outcome</li> <li>Start fetching from fall-through or target</li> <li>If wrong, flush pipeline and flip prediction</li> </ul> </li> </ul> <p>\u53ef\u4ee5\u5904\u7406 for \u5faa\u73af\u7684\u9884\u6d4b\u3002  </p> <p>1-Bit Predictor</p> <p>\u4f46\u4e5f\u5b58\u5728\u95ee\u9898\uff0c\u5bf9\u4e8e\u53cc\u5c42\u5faa\u73af\uff0c\u5f53\u5185\u5c42\u5faa\u73af\u8981\u7ed3\u675f\u65f6\u4f1a\u9519\u4e24\u6b21\u3002  </p> <ul> <li>Mispredict as taken on last iteration of inner loop</li> <li>Then mispredict as not taken on first iteration of inner loop next time around</li> </ul> <p>\u53ef\u4ee5\u4fee\u6539\u9884\u6d4b\u65b9\u5f0f\uff1a\u53ea\u6709\u8fde\u7eed\u9519\u8bef\u4e24\u6b21\u624d\u4f1a\u4fee\u6539\u6211\u4eec\u7684\u9884\u6d4b\u3002\u5373 2-Bit Predictor. </p>"},{"location":"CO/co4/#calculating-the-branch-target","title":"Calculating the Branch Target","text":"<p>\u5373\u4f7f branch \u547d\u4e2d\u4e86\uff0c\u6211\u4eec\u4e5f\u6709\u4e00\u4e2a\u65f6\u949f\u7684 bubble \u6765\u8ba1\u7b97\u5730\u5740\u3002 \u4f46 branch \u8981\u8df3\u8f6c\u7684\u5730\u5740\u5176\u5b9e\u662f\u53ef\u4ee5\u5b58\u4e0b\u6765\u7684\u3002  </p> <p>Branch target buffer</p> <ul> <li>Cache of target addresses</li> <li>Indexed by PC when instruction fetched If hit and instruction is branch predicted taken, can fetch target immediately</li> </ul>"},{"location":"CO/co4/#exceptions-and-interrupts","title":"Exceptions and Interrupts","text":"<p>\u201cUnexpected\u201d events requiring change in flow of control.</p> <ul> <li>Exception \u5f02\u5e38 Arises within the CPU e.g. undefined opcode, syscall, \u2026</li> <li>Interrupt \u4e2d\u65ad From an external I/O controller</li> </ul>"},{"location":"CO/co4/#handling-exceptions","title":"Handling Exceptions","text":"<ul> <li>Save PC of offending (or interrupted) instruction In RISC-V: Supervisor Exception Program Counter(SEPC)</li> <li>Save indication of the problem In RISC-V: Supervisor Exception Cause Register(SCAUSE) 64 bits, but most bits unused e.g. Exception code field: 2 for undefined opcode, 12 for hardware malfunction...</li> <li>Jump to handler \u5fc5\u987b\u7531\u786c\u4ef6\u8df3\u5230\u8fd9\u4e2a\u5730\u5740\u3002<ul> <li>Direct \u6240\u6709\u5f02\u5e38\u8df3\u5230\u56fa\u5b9a\u5730\u5740\u3002  </li> <li>Vectored Interrupts \u4e2d\u65ad\u5411\u91cf Handler address determined by the cause. Exception vector address to be added to a vector table base register  </li> </ul> </li> </ul> <p>\u5f53\u591a\u4e2a\u5f02\u5e38/\u4e2d\u65ad\u540c\u65f6\u6765\u65f6\uff0c\u5982\u4f55\u5904\u7406\uff1f</p>"},{"location":"CO/co4/#handler-actions","title":"Handler Actions","text":"<p>\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f</p> <ul> <li>Read cause, and transfer to relevant handler</li> <li>Determine action required  </li> <li>If restartable  <ul> <li>Take corrective action</li> <li>use SEPC to return to program</li> </ul> </li> <li>Otherwise<ul> <li>Terminate program</li> <li>Report error using SEPC, SCAUSE, ...</li> </ul> </li> </ul>"},{"location":"CO/co4/#exceptions-in-a-pipeline","title":"Exceptions in a Pipeline","text":"<p>Another form of control hazard.  </p> <p>Consider malfunction on add in EX stage.  <code>add x1, x2, x1</code> </p> <ul> <li>Prevent x1 from being clobbered</li> <li>Complete previous instructions</li> <li>Flush add and subsequent instructions</li> <li>Set SEPC and SCAUSE register values</li> <li>Transfer control to handler</li> </ul>"},{"location":"CO/co4/#instruction-level-parallelism-ilp","title":"Instruction-Level Parallelism (ILP)","text":"<p>Pipelining: executing multiple instructions in parallel \u6307\u4ee4\u7ea7\u5e76\u884c</p> <p>To increase ILP</p> <ul> <li>Deeper pipeline \u8ba9\u6bcf\u4e00\u7ea7\u6d41\u6c34\u7ebf\u505a\u66f4\u5c11\u7684\u4e8b\u60c5\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u63d0\u9ad8\u5de5\u4f5c\u9891\u7387\u3002 \u4f46\u6d41\u6c34\u7ebf\u4e0d\u80fd\u65e0\u9650\u7ec6\u5206\uff0c\u56e0\u4e3a\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e5f\u4f1a\u5e26\u6765\u5f00\u9500\u3002  </li> <li>Multiple issue  \u591a\u53d1\u5c04 \u8fd9\u6837\u53ef\u4ee5\u505a\u5230 CPI &lt; 1. \u4f7f\u7528 Instructions Per Cycle (IPC) </li> </ul>"},{"location":"CO/co4/#multiple-issue","title":"Multiple issue","text":"<ul> <li>Static multiple issue \u7f16\u8bd1\u5668\u628a\u80fd\u591f\u540c\u65f6\u653e\u5230\u6d41\u6c34\u7ebf\u7684\u6307\u4ee4\u6392\u597d \u7f16\u8bd1\u5668\u8981\u80fd\u68c0\u6d4b\uff0c\u907f\u514d\u7ade\u4e89</li> <li>Dynamic multiple issue CPU \u81ea\u5df1\u51b3\u5b9a\u6267\u884c\u90a3\u4e9b\u6307\u4ee4\uff0c\u7f16\u8bd1\u5668\u4f1a\u5e2e\u5fd9\u91cd\u6392\u6307\u4ee4\uff0c\u4f46\u8fd8\u662f\u7531 CPU \u89e3\u51b3\u7ade\u4e89\u3002</li> </ul>"},{"location":"CO/co4/#static-multiple-issue","title":"Static multiple issue","text":"RISC-V with Static Dual Issue <p>ALU/branch \u6307\u4ee4\u4e0d\u7528\u8bbf\u95ee\u5185\u5b58\u3002  </p> <p>\u6240\u4ee5\u8fd9\u4e24\u6761\u4e0d\u80fd\u540c\u65f6\u53d1\u51fa\uff0c\u56e0\u4e3a\u5b58\u5728\u7ade\u4e89\u5173\u7cfb\u3002  </p> <p>Loop Unrolling \u5faa\u73af\u5c55\u5f00\uff08\u4f46\u6ce8\u610f\u6307\u4ee4\u95f4\u8981\u5c3d\u91cf\u51cf\u5c11\u76f8\u540c\u5bc4\u5b58\u5668\u7684\u4f9d\u8d56\uff09</p> <p>Use different registers per replication</p> <ul> <li>Called \u201cregister renaming\u201d</li> <li>Avoid loop-carried \u201canti-dependencies\u201d</li> </ul> Loop Unrolling Example <p> </p>"},{"location":"CO/co5/","title":"Large and Fast: Exploiting Memory Hierarchy","text":"Abstract <ul> <li>Memory Technologies</li> <li>Memory Hierarchy Introduction</li> <li>The basics of Cache</li> <li>Measuring and improving cache performance</li> <li>Dependable Memory Hierarchy</li> <li>Virtual Machines</li> <li>Virtual Memory</li> <li>A common Framework for Memory Hierarchy</li> <li>Using FSM to Control a simple Cache</li> </ul>"},{"location":"CO/co5/#memory-technologies","title":"Memory Technologies","text":"<ul> <li>SRAM<ul> <li>value is stored on a pair of inverting gates</li> <li>very fast but takes up more space than DRAM </li> </ul> </li> <li>DRAM<ul> <li>value is stored as a charge on capacitor (must be refreshed)</li> <li>very small but slower than SRAM (factor of 5 to 10</li> </ul> </li> </ul> <p>\u89c1\u8ba1\u903b\u90e8\u5206</p>"},{"location":"CO/co5/#memory-hierarchy-introduction","title":"Memory Hierarchy Introduction","text":"<p>Programs access a small proportion of their address space at any time  </p> <ul> <li>Temporal locality Items accessed recently are likely to be accessed again soon \u5982 for \u5faa\u73af\uff0c\u8dd1\u8fc7\u4e00\u6b21\u540e\u6211\u4eec\u5927\u6982\u7387\u8fd8\u8981\u6267\u884c\u5faa\u73af\u4f53\u91cc\u7684\u4ee3\u7801</li> <li>Spatial locality Items near those accessed recently are likely to be accessed soon \u5982\u6570\u7ec4\uff0c\u6211\u4eec\u8bbf\u95ee\u4e86\u8fd9\u4e2a\u5143\u7d20\u540e\u5927\u6982\u7387\u8fd8\u8981\u8bbf\u95ee\u540e\u9762\u7684\u5143\u7d20</li> </ul> <p>\u5229\u7528\u5c40\u90e8\u6027\uff1a</p> <ul> <li>Memory hierarchy</li> <li>Store everything on disk</li> <li>Copy recently accessed (and nearby) items from disk to smaller DRAM memory<ul> <li>Main memory</li> </ul> </li> <li>Copy more recently accessed (and nearby) items from DRAM to smaller SRAM  memory<ul> <li>Cache memory attached to CPU</li> </ul> </li> </ul> <ul> <li>Block (aka line): unit of copying \u5411\u4e0a\u7ea7\u5b58\u50a8\u5668\u642c\u6570\u636e\u7684\u6700\u5c0f\u5355\u4f4d\uff08\u53ef\u80fd\u6709\u5f88\u591a\u4e2a\u5b57\uff09</li> <li>Hit: If accessed data is present in upper level \u547d\u4e2d - \u4e0a\u5c42\u7684\u5b58\u50a8\u5668\u6709\u6211\u4eec\u8981\u7684\u6570\u636e\uff0c\u4e0d\u9700\u8981\u53bb\u4e0b\u5c42\u5b58\u50a8\u5668\u5bfb\u627e<ul> <li>hit ratio: hits/accesses</li> <li>hit time: \u8bbf\u95ee\u4e0a\u5c42\u5b58\u50a8\u7684\u65f6\u95f4\u4ee5\u53ca\u51b3\u5b9a\u662f\u5426\u547d\u4e2d\u7684\u65f6\u95f4</li> </ul> </li> <li>Miss: If accessed data is absent \u9700\u8981\u4ece\u4e0b\u5c42\u5b58\u50a8\u5668\u4e2d\u628a\u5bf9\u5e94\u6570\u636e\u7684\u5757\u642c\u5230\u4e0a\u5c42\uff0c\u63a5\u7740\u4ece\u4e0a\u5c42\u628a\u6570\u636e\u8bfb\u8d70<ul> <li>miss penalty </li> <li>miss rate: 1 - hit ratio</li> <li>miss time: \u66ff\u4ee3\u4e0a\u5c42\u5b58\u50a8\u5668\u7684\u5757\u7684\u65f6\u95f4\u548c\u628a\u8fd9\u4e2a\u5757\u7ed9\u5904\u7406\u5668\u7684\u65f6\u95f4</li> </ul> </li> </ul> <p>Exploiting Memory Hierarchy</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u5173\u6ce8\u4e24\u90e8\u5206\uff1a</p> <ul> <li>The basics of Cache: SRAM and DRAM(main memory) \u89e3\u51b3\u901f\u5ea6\u95ee\u9898</li> <li>Virtual Memory: DRAM and DISK \u89e3\u51b3\u5bb9\u91cf\u95ee\u9898  </li> </ul>"},{"location":"CO/co5/#the-basics-of-cache","title":"The basics of Cache","text":"<p>For each item of data at the lower level, there is exactly one location in the cache where it might be. So, lots of items at the lower level share locations in the upper level. \u591a\u4e2a\u5757\u4f1a\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u4f4d\u7f6e\u3002</p> <ul> <li>How do we know if a data item is in the cache? \u5982\u4f55\u77e5\u9053\u6570\u636e\u662f\u5426\u5728 cache \u4e2d\uff1f</li> <li>If it is, how do we find it? \u5982\u679c\u6709\uff0c\u5982\u4f55\u627e\u5230\u6570\u636e\uff1f</li> </ul>"},{"location":"CO/co5/#direct-mapped-cache","title":"Direct Mapped Cache","text":"<p>memory address is modulo the number of blocks in the cache \u53d6\u6a21\u3002</p> <ul> <li>Store block address as well as the data \u6211\u4eec\u9700\u8981\u77e5\u9053 cache \u653e\u7684\u662f\u54ea\u4e2a\u5757\u3002<ul> <li>Actually, only need the high-order bits</li> <li>Called the tag </li> </ul> </li> <li>Valid bit: 1 = present, 0 = not present \u6211\u4eec\u9700\u8981\u77e5\u9053 cache \u91cc\u662f\u5426\u6709\u653e\u6709\u6548\u7684\u5757\u3002</li> </ul> <ul> <li>byte offset \u5730\u5740 \u5982\u679c\u4e00\u4e2a block \u662f\u4e00\u4e2a\u5b57\uff0c\u90a3\u4e48 byte offset \u5e94\u8be5\u6709 2 \u4f4d\u3002 \u6ce8\u610f CPU \u7ed9\u51fa\u7684\u5730\u5740\u90fd\u662f\u4ee5 byte \u4e3a\u6700\u5c0f\u5bfb\u5740\u5355\u5143\u7684\u3002</li> </ul> Example <p>\u8fd9\u91cc\u7701\u7565\u4e86\u540e\u9762\u7684 byte offset.  </p> <ul> <li>byte offset \u4f4d\u5bbd\u7531 block size \u51b3\u5b9a\u3002</li> <li>index \u4f4d\u5bbd\u7531 cache size \u51b3\u5b9a</li> <li>tag \u4f4d\u5bbd\u7531\u603b\u7684\u5730\u5740\u4f4d\u5bbd\u51cf\u6389\u5176\u4ed6\u4f4d\u51b3\u5b9a</li> </ul> <p>Bits in Cache</p> <p> </p> Mapping an Address to Multiword Cache Block <p> </p>"},{"location":"CO/co5/#handling-cache-hit-and-misses","title":"Handling Cache hit and Misses","text":"<ul> <li>Read hits</li> <li>Read misses\u2014two kinds of misses<ul> <li>data cache miss</li> <li>instruction cache miss Stall the CPU, fetch block from memory, deliver to cache, restart CPU read 1. Send the original PC value (current PC-4) to the memory.  \u56e0\u4e3a PC \u53d6\u503c\u5b8c\u5c31\u53d8\u6210 +4 \u4e86\uff0c\u6240\u4ee5\u5f53\u524d\u6267\u884c\u7684\u5176\u5b9e\u662f PC-4 2. Instruct main memory to perform a read and wait for the memory to complete its  access. 3. Write the cache entry, putting the data from memory in the data portion of the  entry, writing the upper bits of the address (from the ALU) into the tag field, and  turning the valid bit on. 4. Restart the instruction execution at the first step, which will refetch the instruction  again, this time finding it in the cache.  </li> </ul> </li> <li>Write hits<ul> <li>write-back: Cause Inconsistent \u53ea\u628a\u6570\u636e\u5199\u5230 cache \u4e2d\u3002\u4ee5\u540e\u518d\u628a block \u642c\u56de\u5230\u5185\u5b58\u3002</li> <li>write-through: Ensuring Consistent \u65e2\u628a\u6570\u636e\u5199\u5230 cache \u4e2d\u53c8\u5199\u5230\u5185\u5b58\u4e2d\u3002 Slower! -- write buffer</li> </ul> </li> <li>Write misses read the entire block into the cache, then write the word</li> </ul>"},{"location":"CO/co5/#deep-concept-in-cache","title":"Deep concept in Cache","text":"<ul> <li>Q1: Where can a block be placed in the upper level? (Block placement)</li> <li>Q2: How is a block found if it is in the upper level? (Block identification)</li> <li>Q3: Which block should be replaced on a miss? (Block replacement)</li> <li>Q4: What happens on a write? (Write strategy)</li> </ul>"},{"location":"CO/co5/#block-placement","title":"Block Placement","text":"<ul> <li>Direct mapped Block can only go in one place in the cache \u5757\u53ea\u80fd\u53bb\u4e00\u4e2a\u5730\u65b9\uff0c\u901a\u5e38\u53d6\u6a21</li> <li>Fully associative \u5168\u76f8\u8054 Block can go anywhere in cache. \u54ea\u91cc\u7a7a\u4e86\u53bb\u54ea\u91cc</li> <li>Set associative \u7ea7\u76f8\u8054 Block can go in one of a set of places in the cache.  A set is a group of blocks in the cache. \u4e0a\u4e24\u79cd\u65b9\u6cd5\u7684\u7ed3\u5408\u3002\u628a\u4e00\u7ec4\u5757\u7ec4\u5408\u6210 set, \u4e00\u4e2a\u5757\u53d6\u6a21\u627e\u5230\u8fd9\u4e2a\u7ec4\u53f7\uff0c\u53ef\u4ee5\u53bb\u7ec4\u91cc\u7684\u4efb\u610f\u4e00\u4e2a\u5757\u3002 Direct mapped \u76f8\u5f53\u4e8e 1-way set associative, Fully associative \u76f8\u5f53\u4e8e m-way set-associative(m blocks)</li> </ul> Example"},{"location":"CO/co5/#block-identification","title":"Block Identification","text":"<ul> <li>Tag \u76f4\u63a5\u6620\u5c04\u53ea\u9700\u8981\u6bd4\u8f83\u4e00\u4e2a\u5757\u7684 tag, \u7ea7\u76f8\u8054\u9700\u8981\u6bd4\u8f83 set \u91cc\u6240\u6709\u5757\u7684 tag.  </li> <li>Valid bit</li> </ul> <p>The Format of the Physical Address</p> <ul> <li>The Index field selects \u5168\u76f8\u8054\u6ca1\u6709 index. <ul> <li>The set, in case of a set-associative cache \u7ea7\u76f8\u8054 \\(\\log_2(sets)\\)</li> <li>The block, in case of a direct-mapped cache \u76f4\u63a5\u6620\u5c04 \\(\\log_2(blocks)\\)</li> </ul> </li> <li>The Byte Offset field selects \u7531\u4e00\u4e2a\u5757\u5185 byte \u7684\u6570\u76ee\u51b3\u5b9a. \\(\\log_2(size of block)\\)</li> <li>The Tag is used to find the matching block within a set or in the cache</li> </ul> Direct-mapped Cache Example (1-word Blocks) <p> </p> Fully-Associative Cache example (1-word Blocks) <p> </p> 2-Way Set-Associative Cache <p> </p> <p>\u6ce8\u610f\u8fd9\u91cc\u5e94\u8be5\u662f\u5bf9 Set0 \u91cc\u9762\u7684 tag \u6bd4\u8f83\u3002</p>"},{"location":"CO/co5/#block-replacement","title":"Block Replacement","text":"<p>In a direct-mapped cache, there is only one block that can be replaced. In set-associative and fully-associative caches, there are N blocks (where N is the degree of associativity).</p> <ul> <li>Random replacement - randomly pick any block<ul> <li>Easy to implement in hardware, just requires a random number generator  </li> <li>Spreads allocation uniformly across cache</li> <li>May evict a block that is about to be accessed</li> </ul> </li> <li>Least-recently used (LRU) - pick the block in the set which was least recently accessed<ul> <li>Assumed more recently accessed blocks more likely to be referenced again</li> <li>This requires extra bits in the cache to keep track of accesses.  \u9700\u8981\u989d\u5916\u7684\u4f4d\u6570\uff01</li> </ul> </li> <li>First in,first out(FIFO) - Choose a block from the set which was first came into the cache</li> </ul>"},{"location":"CO/co5/#write-strategy","title":"Write Strategy","text":"<ul> <li>If the data is written to memory, the cache is called a write through cache<ul> <li>Can always discard cached data - most up-to-date data is in memory \u597d\u5904\u662f\u53ef\u4ee5\u968f\u65f6\u628a cache \u7684\u5185\u5bb9\u4e22\u6389\u3002</li> <li>Cache control bit: only a valid bit</li> <li>memory (or other processors) always have latest data</li> </ul> </li> <li>If the data is NOT written to memory, the cache is called a write-back cache<ul> <li>Can\u2019t just discard cached data - may have to write it back to memory</li> <li>Cache control bits: both valid and dirty bits</li> <li>much lower bandwidth, since data often overwritten multiple times</li> </ul> </li> </ul> <p>\u5199\u56de\u9700\u8981\u65f6\u95f4\uff0c\u6211\u4eec\u9700\u8981 write stall. Write stall -- When the CPU must wait for writes to complete during write through. \u6211\u4eec\u5f80\u5f80\u4f7f\u7528 write buffer.  </p> <ul> <li>A small cache that can hold a few values waiting to go to main memory.</li> <li>It does not entirely eliminate stalls since it is possible for the buffer to fill if the burst is larger than the buffer. buffer \u53ef\u80fd\u88ab\u586b\u6ee1\uff0c\u4e0d\u80fd\u5b8c\u5168\u907f\u514d write stall. </li> </ul> <p>\u5b58\u5728\u95ee\u9898\uff1a\u5f53\u6211\u5982\u679c\u8981\u8bfb\u7684\u65f6\u5019\uff0c\u6570\u636e\u8fd8\u5728 buffer \u91cc\u6ca1\u6709\u88ab\u5199\u5165\u5185\u5b58\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u5728 buffer \u91cc\u9762\u6bd4\u8f83\uff0c\u5982\u679c\u6ca1\u6709\u518d\u5728\u5185\u5b58\u91cc\u627e\u3002</p> <p>Write misses</p> <ul> <li>Write allocate The block is loaded into the cache on a miss before anything else occurs. \u5e38\u4e0e write back \u642d\u914d</li> <li>Write around (no write allocate) \u5e38\u4e0e write through \u642d\u914d<ul> <li>The block is only written to main memory</li> <li>It is not stored in the cache.</li> </ul> </li> </ul> <p>Larger blocks exploit spatial locality</p>"},{"location":"CO/co5/#designing-the-memory-system-to-support-cache","title":"Designing the Memory system to Support Cache","text":"<p>\u4e3a\u4e86\u63d0\u9ad8 cache \u7684\u6027\u80fd\uff0c\u6211\u4eec\u6709\u4e0d\u540c\u7684 memory \u7ec4\u7ec7\u67b6\u6784</p> <ul> <li> <p>Performance basic memory organization      </p> </li> <li> <p>Performance in Wider Main Memory     \u4e00\u6b21\u53ef\u4ee5\u8bfb\u51fa\u4e24\u4e2a word.       </p> <p>\u4f46\u8fd9\u65f6\u5185\u5b58\u592a\u5927\u4e86\uff0c\u5f00\u9500\u5927\u3002 * Performance in Four-way interleaved memory  </p> <p>\u5185\u5b58\u5206\u4e3a\u591a\u4e2a banks, \u5e76\u884c\u8bbf\u95ee\u3002</p> </li> </ul>"},{"location":"CO/co5/#measuring-and-improving-cache-performance","title":"Measuring and improving cache performance","text":"<ul> <li>How to measure cache performance?</li> <li>How to improve performance?<ul> <li>Reducing cache misses by more flexible placement of blocks</li> <li>Reducing the miss penalty using multilevel caches</li> </ul> </li> </ul> <p>Average Memory Assess time = hit time + miss time =  hit rate \\(\\times\\) Cache time + miss rate \\(\\times\\) memory time</p>"},{"location":"CO/co5/#measuring-cache-performance","title":"Measuring cache performance","text":"<p>We use CPU time to measure cache performance.  </p> \\[ CPU\\  Time = CPU\\  execution\\  clock\\  cycles +  Memory-stall\\  clock\\  cycles \\times Clock\\  cycle\\  time \\] <p>\u8fd9\u91cc CPU \u7684\u6267\u884c\u65f6\u95f4\u5728\u8bbe\u8ba1\u6d41\u6c34\u7ebf\u7684\u65f6\u5019\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u6211\u4eec\u65e0\u9700\u8003\u8651\u3002</p> \\[ \\begin{align*} Memory-stall\\  clock\\ cycles &amp; =  instructions \\times miss\\  ratio \\times miss \\  penalty \\\\ &amp; = Read-stall\\  cycles + Write-stall\\  cycles \\end{align*} \\] <ul> <li> <p>For Read-stall  </p> \\[ Read-stall\\ cycles = \\dfrac{Read}{Program}\\times Read\\ miss\\ rate \\times Read\\ miss\\ penalty \\] <p>\u5305\u62ec\u53d6\u6307\u548c\u6570\u636e\u52a0\u8f7d\u3002</p> </li> <li> <p>For a write-through plus write buffer scheme \\(Write-stall\\ cycles = \\left(\\dfrac{Write}{Program} \\times Write\\ miss\\ rate \\times Write\\ miss\\ penalty\\right)+Write\\ buffer\\ stalls\\)</p> <ul> <li>If the write buffer stalls are small, we can safely ignore them. \u4e00\u822c\u6765\u8bf4 buffer \u4e0d\u4f1a\u6ea2\u51fa\u3002</li> <li>If the cache block size is one word, the write miss penalty is 0. \u5927\u5c0f\u662f\u4e00\u4e2a word, \u66ff\u6362\u51fa\u53bb\u5c31\u76f4\u63a5\u5199\u4e86\u3002</li> </ul> </li> </ul> <p>In most write-through cache organizations, the read and write miss penalties are the same.(\u4e3a\u4e86\u7b80\u4fbf\uff0c\u6211\u4eec\u8fd9\u91cc\u8fd9\u4e48\u5047\u8bbe)   If we neglect the write buffer stalls, we get the following equation: </p> \\[ \\begin{align*} Memory-stall\\ clock\\ cycles &amp; =\\dfrac{Memory\\ accesses}{Program}\\times Miss\\ rate\\times Miss\\ penalty\\\\ &amp; =\\dfrac{Instructions}{Program}\\times \\dfrac{Misses}{Instructions}\\times Miss\\ penalty \\end{align*} \\] Example <p> </p> <p>\u5185\u5b58\u5360\u4e86\u6027\u80fd\u74f6\u9888\u3002 \u5047\u8bbe\u6211\u4eec\u628a\u65f6\u949f\u9891\u7387\u63d0\u9ad8\u4e24\u500d\u3002\u8fd9\u6837 penalty \u9700\u8981\u7684\u65f6\u949f\u5468\u671f\u7ffb\u500d\u3002 \u6b64\u65f6 CPU \u6027\u80fd\u5b9e\u9645\u53ea\u63d0\u5347 1.23 \u500d\u3002  </p>"},{"location":"CO/co5/#improving","title":"Improving","text":"<p>\u63d0\u9ad8 cache \u547d\u4e2d\u7387\uff1b\u51cf\u5c0f penalty.  </p>"},{"location":"CO/co5/#reducing-cache-misses-by-more-flexible-placement-of-blocks","title":"Reducing cache misses by more flexible placement of blocks","text":"<p>\u5982\u679c\u6211\u4eec\u6b63\u597d\u4ee5\u6a21\u957f\u4e3a\u6b65\u8ddd\u8bbf\u95ee\uff0c\u5c31\u4f1a\u4e00\u76f4 miss. \u4f46\u5176\u5b9e\u6b64\u65f6 cache \u4e2d\u8fd8\u6709\u5f88\u591a\u7a7a\u4f4d\u3002</p> The disadvantage of a direct-mapped cache <p> </p> Miss rate versus set-associative <p>\u6ce8\u610f block addr \u662f\u5ffd\u7565\u4e86\u5730\u4f4d\u7684 byte offset \u7684\u3002  </p> Size of tags versus set associativity <p> </p>"},{"location":"CO/co5/#decreasing-miss-penalty-with-multilevel-caches","title":"Decreasing miss penalty with multilevel caches","text":"<p>Add a second level cache:</p> <ul> <li>often primary cache is on the same chip as the processor</li> <li>use SRAMs to add another cache above primary memory (DRAM)</li> <li>miss penalty goes down if data is in 2<sup>nd</sup> level cache</li> </ul> Example <p> </p> <p>Using multilevel caches:</p> <ul> <li>try and optimize the hit time on the 1<sup>st</sup> level cache</li> <li>try and optimize the miss rate on the 2<sup>nd</sup> level cache</li> </ul>"},{"location":"CO/co5/#virtual-memory","title":"Virtual Memory","text":"<p>Main Memory act as a \u201cCache\u201d for the secondary storage. \u628a\u4e3b\u5b58\u5f53\u4f5c\u78c1\u76d8\u7684\u7f13\u5b58\u3002</p> <ul> <li>Efficient and safe sharing of memory among multiple programs. \u4e0d\u540c\u7a0b\u5e8f\u6709\u81ea\u5df1\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6211\u4eec\u5e0c\u671b\u53ea\u8003\u8651\u81ea\u5df1\u7684\u7a7a\u95f4\uff0c\u4e0d\u5728\u4e4e\u5176\u4ed6\u7a0b\u5e8f\u653e\u5728\u54ea\u91cc\u3002\u8ba9\u8fdb\u7a0b\u8ba4\u4e3a\u662f\u81ea\u5df1\u72ec\u6709\u8fd9\u5757\u5730\u5740\u7a7a\u95f4\u3002</li> <li>Remove the programming burdens of a small, limited amount of main memory.  </li> </ul> <p>Translation of a program\u2019s address space to physical address. \u865a\u62df\u5185\u5b58\u7684\u4f5c\u7528\u5c31\u662f\u7ffb\u8bd1\u3002\uff08\u5185\u5b58\u662f\u788e\u7247\u5316\u7684\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u7a0b\u5e8f\u8ba4\u4e3a\u5730\u5740\u662f\u8fde\u7eed\u7684\uff09</p> <p>Advantages:</p> <ul> <li>illusion of having more physical memory</li> <li>program relocation </li> <li>protection</li> </ul>"},{"location":"CO/co5/#pages-virtual-memory-blocks","title":"Pages: virtual memory blocks","text":"<p>page \u662f\u6620\u5c04\u7684\u6700\u5c0f\u5355\u4f4d\u3002  </p> <p>\u865a\u62df\u9875\u7684\u6570\u91cf\u6bd4\u7269\u7406\u9875\u591a\uff08\u73b0\u5728\u4e0d\u4e00\u5b9a\uff09\u3002</p> <p>Page faults: the data is not in memory, retrieve it from disk</p> <ul> <li>huge miss penalty, thus pages should be fairly large e.g. 4KB</li> <li>reducing page faults is important \u8981\u51cf\u5c11 miss</li> <li>can handle the faults in software instead of hardware \u7f3a\u9875\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u5904\u7406\u7684\uff0c\u800c\u4e0d\u662f\u786c\u4ef6(cache \u662f\u786c\u4ef6\u505a\u7684)</li> <li>using write-through is too expensive so we use *write back* \u786c\u76d8\u64cd\u4f5c\u592a\u6162\u4e86\uff0c\u6211\u4eec\u53ea\u5728\u88ab\u8e22\u51fa\u7684\u65f6\u5019\u5199\u56de\u3002\u56e0\u6b64\u7a81\u7136\u65ad\u7535\u7684\u65f6\u5019\u6570\u636e\u4f1a\u4e22\u5931\u3002</li> </ul>"},{"location":"CO/co5/#page-tables","title":"Page Tables","text":"<p>pgtbl \u672c\u8eab\u5b58\u5728 memory \u91cc\uff0c\u8bb0\u5f55\u5730\u5740\u7684\u6620\u5c04\u5173\u7cfb\u3002\uff08\u7d22\u5f15\u662f\u865a\u62df\u5730\u5740\u7684\u9ad8\u4f4d\uff0c\u627e\u5230\u8868\u4e2d\u5bf9\u5e94\u9879\uff0c\u5c31\u662f\u7269\u7406\u5730\u5740\uff09</p> <p>\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684 Page table, Program counter and the page table register. \u8fdb\u7a0b\u4e4b\u95f4\u5207\u6362\uff0c\u5207\u6362\u9875\u8868\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>Virtual memory systems use fully associative mapping method. \u4e3a\u4e86\u63d0\u9ad8\u547d\u4e2d\u7387\uff0c\u6211\u4eec\u91c7\u7528\u5168\u76f8\u8054\u7684\u65b9\u5f0f\u3002\u8fd9\u5bfc\u81f4\u66ff\u6362\u7b56\u7565\uff08\u6bd4\u5982 LRU\uff09\u5f88\u590d\u6742\uff0c\u4f46\u56e0\u4e3a\u662f OS \u7f16\u5199\uff0c\u6240\u4ee5\u95ee\u9898\u4e0d\u5927\u3002</p> How larger page table? <p> </p> <p>entry size \u6307\u7684\u662f\u9875\u8868\u91cc\u6bcf\u6761\u7684\u5927\u5c0f\u3002 \u9875\u8868\u8981\u80fd\u628a\u6240\u6709\u7684\u9875\u90fd\u80fd\u653e\u4e0b\u3002\uff08\u6bcf\u4e2a\u865a\u62df\u9875\u90fd\u9700\u8981\u5b58\u653e\u5bf9\u5e94\u7684\u7269\u7406\u9875\uff09 \u6211\u4eec\u9700\u8981\u51cf\u5c0f\u9875\u8868\u7684\u5927\u5c0f\u3002</p> <p>disk write \u5f88\u6162\uff0c\u56e0\u6b64\u6211\u4eec\u7528 write-back \u7684\u7b56\u7565\uff0c\u9700\u8981\u6709\u4e00\u4e2a dirty bit. The dirty bit is set when a page is first written. If the dirty bit of a page is set, the page must be written back to disk before being replaced.</p>"},{"location":"CO/co5/#making-address-translation-fast-tlb","title":"Making Address Translation Fast--TLB","text":"<p>\u5728 pgtbl \u4e0a\u627e\u4e5f\u662f\u5f88\u6162\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5f15\u5165\u4e86 TLB.(CPU \u5185)   The TLB (Translation-lookaside Buffer) acts as Cache on the page table \u865a\u62df\u5730\u5740\uff0c\u5148\u5728 TLB \u627e\uff0c\u627e\u4e0d\u5230\u518d\u53bb\u5185\u5b58\u91cc\u7684\u9875\u8868\u627e\u3002\u4e00\u822c 16~512 entries.</p> FastMATH Memory Hierarchy <p> </p> Possible combinations of Event <p> </p> <p>\u6700\u540e\u4e09\u4e2a\u4e0d\u53ef\u80fd\u3002\u4e0d\u5728 pgtbl \u4e2d\u90a3\u80af\u5b9a\u4e5f\u4e0d\u5728 TLB \u4e2d\uff0c\u8bf4\u660e\u6570\u636e\u9875\u8fd8\u6ca1\u6709\u8fdb\u5165\u5185\u5b58\uff0c\u90a3 cache \u91cc\u9762\u80af\u5b9a\u4e5f\u4e0d\u80fd\u6709\u6570\u636e\u3002</p>"},{"location":"CO/co5/#page-faults","title":"Page faults","text":"<p>When the OS creates a process, it usually creates the space on disk for all the pages of a process.  OS \u542f\u52a8\u65f6\uff0c\u628a\u8981\u7528\u7684 page \u5168\u90e8\u653e\u5230\u4e00\u4e2a\u5730\u65b9(swap space) \u4fbf\u4e8e\u67e5\u627e\uff0c\u8bb0\u5f55\u9875\u5728\u786c\u76d8\u7684\u4ec0\u4e48\u4f4d\u7f6e\u3002\uff08\u6709\u7684 OS \u53ef\u80fd\u7528\u53e6\u5916\u7684\u8868\u6765\u7ef4\u62a4\u9875\u5728\u786c\u76d8\u7684\u4f4d\u7f6e\uff09</p> <ul> <li>When a page fault occurs, the OS will be given control through exception mechanism.</li> <li>The OS will find the page in the disk by the page table.</li> <li>Next, the OS will bring the requested page into main memory. If all the pages in main memory are in use, the OS will use LRU strategy to choose a page to replace</li> </ul>"},{"location":"CO/co5/#protection-in-the-virtual-memory-system","title":"Protection in the virtual memory System","text":"<p>\u53ea\u6709\u64cd\u4f5c\u7cfb\u7edf\u77e5\u9053\u5176\u4ed6\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002</p>"},{"location":"CO/co6/","title":"Storage, Networks and Other Peripherals","text":"Abstract <ul> <li>Introduction</li> <li>Disk Storage and Dependability</li> <li>Networks (Skim)</li> <li>Buses and Other Connections between Processors Memory, and I/O Devices</li> <li>Interfacing I/O Devices to the Memory, Processor, and Operating System</li> <li>I/O Performance Measures:  Examples from Disk and File Systems</li> <li>Designing an I/O system</li> <li>Real Stuff: A Typical Desktop I/O System</li> </ul>"},{"location":"CO/co6/#introduction","title":"Introduction","text":"<p>\u9664\u4e86 CPU \u7684\u8bbe\u5907\u6211\u4eec\u90fd\u8ba4\u4e3a\u662f I/O.  </p> <p>Assessing I/O system performance is very difficult. \u4e0d\u540c\u7684\u573a\u666f\u6709\u4e0d\u540c\u7684\u8bc4\u4f30\u3002</p> <p>Performance of I/O system depends on:</p> <ul> <li>connection between devices and the system</li> <li>the memory hierarchy</li> <li>the operating system</li> </ul> <p>CPU \u548c I/O \u7531\u603b\u7ebf\u8fde\u63a5. I/O \u5f80\u5f80\u901a\u8fc7\u4e2d\u65ad\u7684\u65b9\u5f0f\u901a\u77e5 CPU \u6709\u4e8b\u4ef6\u5904\u7406\u3002 \u4e0d\u540c\u7684\u8bbe\u5907\u6709\u4e0d\u540c\u7684\u9a71\u52a8(I/O controller)</p> <p>Three characters of IO</p> <ul> <li>Behavior Input (read once), output (write only, cannot read) ,or storage (can be reread and usually rewritten) \u8f93\u5165/\u8f93\u51fa/\u5b58\u50a8</li> <li>Partner Either a human or a machine is at the other end of the I/O device, either feeding data on input or reading data on output. \u548c\u8c01\u5bf9\u63a5\uff1f\u4eba/\u673a\u5668</li> <li>Data rate The peak rate at which data can be transferred between the I/O device and the main memory or processor. \u6570\u636e\u4f20\u8f93\u901f\u7387</li> </ul> <p>I/O performance depends on the application.  </p> <ul> <li>Throughput \u5355\u4f4d\u65f6\u95f4\u4f20\u8f93\u7684\u6570\u636e\u91cf\uff1b\u5355\u4f4d\u65f6\u95f4 I/O \u7684\u64cd\u4f5c\u6570\u3002</li> <li>Response time e.g., workstation and PC</li> <li>both throughput and response time e.g., ATM \u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u5173\u5fc3\u4e0d\u540c\u7684\u65b9\u9762\u3002</li> </ul>"},{"location":"CO/co6/#amdahls-law","title":"Amdahl\u2019s law","text":"<p>Sequential part can limit speedup  </p> Example <p> </p> <p>\u60f3\u7528 100 \u4e2a CPU \u5b8c\u6210 90 \u500d\u7684\u52a0\u901f\u3002\u8fd9\u8981\u6c42\u4e0d\u80fd\u88ab\u5e76\u884c\u6267\u884c\u7684\u90e8\u5206\u6700\u591a\u5360 0.1%. </p> <p>Remind us that ignoring I/O is dangerous. </p> Example <p> </p>"},{"location":"CO/co6/#disk-storage-and-dependability","title":"Disk Storage and Dependability","text":"<p>Two major types of magnetic disks</p> <ul> <li>floppy disks \u8f6f\u76d8\uff08\u5185\u5b58\uff09</li> <li>hard disks<ul> <li>larger</li> <li>higher density</li> <li>higher data rate</li> <li>more than one platter</li> </ul> </li> </ul>"},{"location":"CO/co6/#the-organization-of-hard-disk","title":"The organization of hard disk","text":"<ul> <li>platters: disk consists of a collection of platters, each of which has two recordable disk surfaces \u76d8</li> <li>tracks: each disk surface is divided into concentric circles \u76d8\u4e0a\u6709\u5f88\u591a\u4e2a\u8f68\u9053</li> <li>sectors: each track is in turn divided into sectors, which is the smallest unit that can be read or written \u6bcf\u6761\u8f68\u9053\u88ab\u5206\u4e3a\u82e5\u5e72\u4e2a\u6247\u533a</li> </ul>"},{"location":"CO/co6/#to-access-data-of-disk","title":"To access data of disk","text":"<ul> <li>Seek: position read/write head over the proper track \u6570\u636e\u4e0d\u4e00\u5b9a\u521a\u597d\u5728\u5708\u4e0a\uff0c\u9700\u8981\u627e\u5230\u6570\u636e\u5bf9\u5e94\u7684\u5708\u3002</li> <li> <p>Rotational latency: wait for desired sector \u627e\u5230\u5708\u540e\uff0c\u7b49\u5f85\u65cb\u8f6c\u5230\u6570\u636e\u8d77\u70b9\u3002</p> Example <p> </p> </li> <li> <p>Transfer: time to transfer a sector (1 KB/sector) function of rotation speed \u628a\u786c\u76d8\u6570\u636e\u642c\u5230\u5185\u5b58\u3002</p> </li> </ul> <p>Disk Read Time</p> <p> </p>"},{"location":"CO/co6/#flash-storage","title":"Flash Storage","text":"<p>Nonvolatile semiconductor storage</p> <ul> <li>100\u00d7 \u2013 1000\u00d7 faster than disk</li> <li>Smaller, lower power, more robust</li> <li>But more $/GB (between disk and DRAM)</li> </ul> <p>Flash Types</p> <ul> <li>NOR flash: bit cell like a NOR gate<ul> <li>Random read/write access \u53ef\u4ee5\u968f\u610f\u8bfb\u5199</li> <li>Used for instruction memory in embedded systems \u56e0\u6b64\u5728\u5d4c\u5165\u5f0f\u4e2d\u4f5c\u4e3a\u6307\u4ee4\u5b58\u50a8</li> </ul> </li> <li>NAND flash: bit cell like a NAND gate<ul> <li>Denser (bits/area), but block-at-a-time access \u5bc6\u5ea6\u53ef\u4ee5\u66f4\u9ad8\uff0c\u4f46\u662f\u8bfb\u5199\u8981\u4ee5 block \u4e3a\u5355\u4f4d\u3002</li> <li>Cheaper per GB  </li> <li>Used for USB keys, media storage  </li> </ul> </li> </ul> <p>Flash bits wears out after 100000\u2019s of accesses. \u56e0\u6b64\u4e0d\u9002\u5408\u505a RAM/\u786c\u76d8\u7684\u66ff\u4ee3\u3002 \u5f53\u5df2\u7ecf\u88ab\u78e8\u635f\u65f6\uff0c\u5c31\u628a\u672c\u6765\u7684\u6570\u636e\u6620\u5c04\u5230\u5176\u4ed6\u5185\u5b58\u3002</p>"},{"location":"CO/co6/#disk-performance-issues","title":"Disk Performance Issues","text":"<p>\u4e00\u822c\u5f97\u5230\u7684\u662f average seek time. </p>"},{"location":"CO/co6/#dependability","title":"Dependability","text":"<p>\u8861\u91cf\u786c\u76d8\u7684\u6307\u6807\u5c31\u662f\u53ef\u9760\u6027 Dependability(Reliability).  </p> <p>Computer system dependability is the quality of delivered service such that reliance can justifiably be placed on this  service. \u8fde\u7eed\u63d0\u4f9b\u670d\u52a1\u7684\u65f6\u95f4\u3002</p> <ul> <li>MTTF mean time to failure  \u5e73\u5747\u65e0\u6545\u969c\u65f6\u95f4</li> <li>MTTR mean time to repair \u5e73\u5747\u4fee\u590d\u65f6\u95f4</li> <li>MTBF (Mean Time Between Failures) \u5e73\u5747\u6545\u969c\u95f4\u9694\u65f6\u95f4 = MTTF+ MTTR</li> </ul> <p>\u56e0\u6b64\u53ef\u7528\u7684\u65f6\u95f4\u5c31\u662f \\(\\dfrac{MTTF}{MTTF+MTTR}\\)</p> <p>improve MTTF</p> <ul> <li>Fault avoidance  preventing fault occurrence by construction \u5728\u786c\u76d8\u5bff\u547d\u5230\u8fbe\u524d\u66ff\u6362\u786c\u76d8</li> <li>Fault tolerance using redundancy to allow the service to comply with the service specification despite faults occurring, which applies primarily to hardware faults \u591a\u4e2a\u5730\u65b9\u5907\u4efd</li> <li>Fault forecasting predicting the presence and creation of faults, which applies to hardware and software faults \u9884\u89c1\u6545\u969c\uff0c\u91c7\u53d6\u63aa\u65bd</li> </ul>"},{"location":"CO/co6/#redundant-arrays-of-inexpensive-disks","title":"Redundant Arrays of (Inexpensive) Disks","text":"<p>\u4e0d\u540c\u8bbe\u5907\u5bf9\u786c\u76d8\u7684\u9700\u6c42\u91cf\u4e0d\u540c\u3002 \u80fd\u4e0d\u80fd\u7528\u5c0f\u786c\u76d8\u7ec4\u5408\u6210\u5927\u786c\u76d8\uff1f \u597d\u5904\u662f\u53ef\u4ee5\u6709\u591a\u4e2a\u8bfb\u5199\u53e3\uff0c\u540c\u65f6\u8bbf\u95ee\u3002\u574f\u5904\u662f\u574f\u6389\u7684\u6982\u7387\u66f4\u5927\u4e86\u3002</p> <p>Hot spares support reconstruction in parallel with access: very high media availability can be achieved. \u70ed\u5907\u4efd\u53ef\u4ee5\u652f\u6301\u6570\u636e\u91cd\u5efa\u3002</p> <ul> <li>Files are \"striped\" across multiple disks  </li> <li>Redundancy yields high data availability  </li> <li>Disks will still fail</li> <li>Contents reconstructed from data redundantly stored in the array \u6570\u636e\u53ef\u4ee5\u4ece\u5197\u4f59\u7684\u7528\u4e8e\u5907\u4efd\u7684\u786c\u76d8\u91cc\u6062\u590d\uff0c\u4ee3\u4ef7\u662f\u5bb9\u91cf\u4f1a\u6709\u635f\u5931\u3002</li> </ul> <p>RAID</p>"},{"location":"CO/co6/#raid-0-no-redundancy","title":"RAID 0: No Redundancy","text":"<p>Data is striped across a disk array but there is no redundancy to tolerate disk failure. \u6570\u636e\u88ab\u653e\u5728\u591a\u4e2a\u76d8\u91cc\u63d0\u9ad8\u5e76\u884c\uff0c\u901f\u5ea6\u53ef\u4ee5\u63d0\u9ad8\uff08\u56e0\u4e3a\u80fd\u540c\u65f6\u8bbf\u95ee\uff09</p> <p>RAID 0 something of a misnomer as there is no Redundancy</p>"},{"location":"CO/co6/#raid-1-disk-mirroringshadowing","title":"RAID 1: Disk Mirroring/Shadowing","text":"<ul> <li>Each disk is fully duplicated onto its \u201cmirror\u201d \u6bcf\u4e00\u4e2a\u76d8\u7684\u5185\u5bb9\u90fd\u88ab\u590d\u5236\u653e\u5230\u53e6\u4e00\u4e2a\u76d8\u91cc\u3002</li> <li>Bandwidth sacrifice on write \u5199\u7684\u65f6\u5019\u9700\u8981\u540c\u65f6\u5199\u4e24\u4e2a\u76d8\uff0c\u8bfb\u53ef\u80fd\u88ab\u4f18\u5316\u3002</li> <li>Most expensive solution: 100% capacity overhead</li> </ul>"},{"location":"CO/co6/#raid-3-bit-interleaved-parity-disk","title":"RAID 3: Bit-Interleaved Parity Disk","text":"<p>P contains sum of other disks per stripe mod 2 (\u201cparity\u201d) \u5982\u7b2c 1\u30012\u30013 \u4e2a\u76d8\u7684\u7b2c\u4e00\u4e2a bit \u505a\u5947\u5076\u6821\u9a8c\u653e\u5728\u7b2c 4 \u4e2a\u76d8\u3002</p> <p>\u5f53\u5176\u4e2d\u4e00\u4e2a\u76d8\u6302\u6389\u7684\u65f6\u5019\uff0c\u8bfb\u51fa\u5176\u4ed6\u76d8\u7684\u6570\u636e\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u539f\u6765\u76d8\u7684\u6570\u636e\u3002  </p> <p>\u54ea\u4e2a\u76d8\u574f\u4e86\uff1f\uff08\u4e0d\u77e5\u9053x</p>"},{"location":"CO/co6/#raid-4-block-interleaved-parity","title":"RAID 4: Block-Interleaved Parity","text":"<p>RAID 3 relies on parity disk to discover errors on Read. </p> <p>\u6211\u4eec\u5e0c\u671b\u81ea\u5df1\u7684\u76d8\u6709\u81ea\u5df1\u7684 error detection, \u4e0d\u9700\u8981\u6821\u9a8c\u76d8\u6765\u68c0\u9a8c\u81ea\u5df1\u5bf9\u4e0d\u5bf9\uff0c\u76d8\u4e0e\u76d8\u4e4b\u95f4\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\u3002</p> <p>\u628a\u81ea\u5df1\u6bcf\u4e2a block \u505a\u4e86\u6821\u9a8c\u4f4d\uff0c\u653e\u5230\u5907\u4efd\u76d8\u4e2d\u3002</p> <p>\u5f53\u6211\u4eec\u540c\u65f6\u8bfb D0, D5 \u65f6 Paritybit \u4f1a\u88ab\u8bfb\u4e24\u6b21\u3002 Small Write \u589e\u52a0\u5f00\u9500\u3002</p>"},{"location":"CO/co6/#raid-5-high-io-rate-interleaved-parity","title":"RAID 5: High I/O Rate Interleaved Parity","text":"<p>P \u76d8\u662f\u4e0d\u5b9a\u7684\u3002</p>"},{"location":"CO/co6/#raid-6-pq-redundancy","title":"RAID 6: P+Q Redundancy","text":"<p>\u6709 P, Q \u4e24\u4f4d\uff0c\u53ef\u4ee5\u6062\u590d\u51fa\u4e24\u4e2a\u76d8\u7684\u5185\u5bb9\u3002</p> <p>RAID Techniques</p> <p> </p>"},{"location":"CO/co6/#buses-and-other-connections-between-processors-memory-and-io-devices","title":"Buses and Other Connections between Processors Memory, and I/O Devices","text":"<p>Bus: Shared communication link (one or more wires) \u4e00\u6761\u9ad8\u901f\u516c\u8def\u548c\u5404\u6761\u5c0f\u9053\uff0c\u7ed9\u4e0d\u540c\u8f66\u8f86\u5171\u4eab\u901a\u884c\u3002</p> <p>Difficult Design:</p> <ul> <li>may be bottleneck \u5f88\u5bb9\u6613\u6210\u4e3a\u6027\u80fd\u7684 bottleneck(\u74f6\u9888).</li> <li>length of the bus</li> <li>number of devices</li> <li>tradeoffs (fast bus accesses and high bandwidth)</li> <li>support for many different devices</li> <li>cost</li> </ul>"},{"location":"CO/co6/#bus-basics","title":"Bus Basics","text":"<p>\u603b\u7ebf\u4e0d\u662f\u4e00\u6761\u7ebf\uff0c\u800c\u662f\u591a\u6761\u7ebf\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u628a\u5404\u79cd\u8def\u3001\u8bbe\u5907\u8fde\u63a5\u8d77\u6765\u3002</p> <p>A bus contains two types of lines</p> <ul> <li>Control lines: signal requests and acknowledgments, and to indicate what types of information is on the data lines. \u6bd4\u5982\u7ed9\u5916\u8bbe\u53d1\u9001\u8bfb\u53d6\u547d\u4ee4\uff0c\u5916\u8bbe\u53d1\u9001\u53ef\u4ee5\u8bfb\u7684\u4fe1\u53f7\u3002</li> <li>Data lines: carry information (e.g., data, addresses, and complex commands) between the source and the destination.</li> </ul> <p>Bus transaction sending the address and receiving or sending the data  \u603b\u7ebf\u4f20\u8f93\u7684\u4e24\u90e8\u5206\uff0c\u9001\u5730\u5740\uff0c\u9001\u6570\u636e\u3002</p> <ul> <li>Types of buses<ul> <li>processor-memory : short high speed, custom design)  </li> <li>backplane : high speed, often standardized, e.g., PCI)</li> <li>I/O : lengthy, different devices, standardized, e.g., SCSI)</li> </ul> </li> </ul> <p>\u4ee5\u524d\u7684 CPU \u53ea\u6709\u4e00\u6761\u603b\u7ebf\uff0c\u5982\u679c IO \u8bbe\u5907\u548c Memory \u63a5\u5728\u4e00\u8d77\uff0c\u4ed6\u4eec\u7684\u901f\u5ea6\u9700\u8981\u9075\u5b88\u4e00\u6837\u7684\u534f\u8bae\u3002 IO \u8bbe\u5907\u662f\u5f88\u6162\u7684\uff0c\u4f1a\u5360\u7528 Bus, \u73b0\u5728\u6211\u4eec\u628a\u4efb\u52a1\u4e22\u8fc7\u53bb\u540e\u53ef\u4ee5\u7b49\u5904\u7406\u597d\u4e86\u518d\u6765\u62ff\u3002 \u4e0d\u540c IO \u8bbe\u5907\u4e4b\u95f4\u6570\u636e\u4f20\u8f93\u4e0d\u9700\u8981\u5360\u7528\u603b\u7ebf\u3002</p>"},{"location":"CO/co6/#synchronous-vs-asynchronous","title":"Synchronous vs. Asynchronous","text":"<p>\u540c\u6b65\u603b\u7ebf\u6216\u8005\u5f02\u6b65\u603b\u7ebf</p> <ul> <li>Synchronous bus: use a clock and a fixed protocol, fast and small but every device must operate at same rate and clock skew requires the bus to be short \u6240\u6709\u8bbe\u5907\u9700\u8981\u4ee5\u540c\u6837\u7684\u9891\u7387\u3002 clock skew, \u5373\u4e0a\u5347\u6cbf\u65e0\u6cd5\u5bf9\u9f50</li> <li> <p>Asynchronous bus: don\u2019t use a clock and instead use handshaking A serial of steps used to coordinate asynchronous bus transfers.  </p> <p>Example</p> <p> </p> <ol> <li>When memory sees the ReadReq line, it reads the address from the data bus, begin the memory read operation\uff0cthen raises Ack to tell the device that the ReadReq signal has been seen.  </li> <li>I/O device sees the Ack line high and releases the ReadReq data lines.  </li> <li>Memory sees that ReadReq is low and drops the Ack line.  </li> <li>When the memory has the data ready, it places the data on the data lines and raises DataRdy.  </li> <li>The I/O device sees DataRdy, reads the data from the bus , and signals that it has the data by raising ACK.   </li> <li>The memory sees Ack signals, drops DataRdy, and releases the data lines.  </li> <li>Finally, the I/O device, seeing DataRdy go low, drops the ACK line, which indicates that the transmission is completed.  </li> </ol> <p>\u8bfb\u6570\u636e\u65f6, CPU \u628a read request \u62c9\u8d77\u6765\u3002\u5185\u5b58\u770b\u5230\u540e\uff0c\u4f1a\u628a Data \u603b\u7ebf\u4e0a\u7684\u8bfb\u8d70\uff08\u5373\u5730\u5740\uff09\uff0c\u968f\u540e\u8fdb\u884c\u5185\u5b58\u8bfb\u53d6\uff0c\u540c\u65f6\u628a Ack \u4fe1\u53f7\u62c9\u8d77\u6765\uff0c\u544a\u8bc9 IO \u8bbe\u5907\u6211\u4eec\u5df2\u7ecf\u63a5\u6536\u5230 read request \u4e86. IO \u8bbe\u5907\u770b\u5230 Ack \u540e\u628a\u81ea\u5df1\u7684 read request \u653e\u4e0b\uff0c\u5185\u5b58\u770b\u5230 read request \u653e\u4e0b\u540e\uff0c\u628a Ack \u4e5f\u653e\u4e0b\u3002 \u5185\u5b58\u8bfb\u51fa\u6570\u636e\u540e\uff0c\u4f1a\u628a data ready \u62c9\u8d77\u6765\uff0c\u628a\u6570\u636e\u653e\u5728 data line \u4e0a. IO \u8bbe\u5907\u770b\u5230 data ready \u540e\u4f1a\u628a\u6570\u636e\u53d6\u8d70\uff0c\u5e76\u628a Ack \u4fe1\u53f7\u62c9\u8d77\u3002\u5185\u5b58\u770b\u5230 Ack \u4fe1\u53f7\u540e\u4f1a\u653e\u4e0b data ready \u4fe1\u53f7\uff0c\u968f\u540e IO \u8bbe\u5907\u653e\u4e0b ack \u4fe1\u53f7\u3002</p> </li> </ul>"},{"location":"CO/co6/#bus-arbitration","title":"Bus Arbitration","text":"<p>\u603b\u7ebf\u4e0a\u6709\u5f88\u591a\u8bbe\u5907\uff0c\u591a\u4e2a\u8bbe\u5907\u8981\u8bbf\u95ee\u540c\u4e00\u4e2a\u5185\u5b58\u65f6\uff0c\u9700\u8981\u603b\u7ebf\u4ef2\u88c1\uff0c\u83b7\u5f97\u603b\u7ebf\u7684\u6240\u6709\u6743\u3002  </p> <p>multiple device desiring to communicate could each try to assert the control and data lines for different transfers. a bus master is needed. Bus masters initiate and control all bus requests. \u5b9e\u9645\u4e0a\u73b0\u5728 master \u7684\u8bbe\u5907\u4e5f\u6709\u591a\u4e2a\uff0c\u4e0d\u540c master \u4e4b\u95f4\u4e5f\u6709\u7ade\u4e89\uff08CPU, \u663e\u5b58\u7b49\u90fd\u662f\u4e00\u4e2a master\uff09\u3002</p> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u53ea\u6709\u4e00\u4e2a CPU \u662f master, \u53ef\u4ee5\u5360\u9886\u603b\u7ebf\uff0c\u5e76\u8ba9 IO \u8bbe\u5907\u6267\u884c\u64cd\u4f5c\u3002</p> <p>\u80fd\u4e3b\u52a8\u53d1\u8d77\u64cd\u4f5c\uff08\u64cd\u4f5c Bus\uff09\u7684\u8bbe\u5907\u53eb\u505a Bus Master, \u4e00\u822c\u662f CPU. \u51b3\u5b9a\u54ea\u4e2a master \u80fd\u591f\u64cd\u4f5c\u603b\u7ebf\u7684\u8bbe\u5907\u53eb\u505a\u603b\u7ebf\u4ef2\u88c1\u3002  </p> <p>Two factors in choosing which device to grant the bus:</p> <ul> <li>bus priority</li> <li>fairness \u516c\u5e73\u6027\uff0c\u4e0d\u8ba9\u67d0\u4e2a\u8bbe\u5907\u4e00\u76f4\u5360\u7528\u603b\u7ebf\u3002</li> </ul>"},{"location":"CO/co6/#performance-analysis-of-synchronous-versus-asynchronous-buses","title":"Performance analysis of Synchronous versus Asynchronous buses","text":"<p>\u8bc4\u4ef7\u603b\u7ebf\u7684\u6027\u80fd - \u5e26\u5bbd  bandwidth</p> <p>Example</p> <p> </p> <p>\u5f02\u6b65\u65f6\u949f step1 \u7ed3\u675f\u65f6\u5185\u5b58\u5df2\u7ecf\u62ff\u5230\u5730\u5740\u4e86\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d step234 \u53ef\u4ee5\u540c\u65f6\u505a\u3002</p> <ul> <li>Increasing data bus width</li> <li>Use separate address and data lines</li> <li>transfer multiple words \u4e00\u6b21\u4f20\u8f93\u591a\u4e2a\u6570\u636e</li> </ul> <p>Increasing the Bus Bandwidth</p> <p> </p> <p>burst \u4f20\u8f93\uff0c\u5730\u5740\u53d1\u4e00\u6b21\uff0c\u8bfb\u591a\u4e2a\u6570\u636e\u3002\u5982\u8bfb\u5730\u5740 4, \u6211\u4eec\u53ef\u4ee5\u8fd4\u56de 4 5 6 7 \u7684\u6570\u636e\u3002  </p> <ul> <li> <p>the 4-word block transfers  </p> </li> <li> <p>the 16-word block transfers  </p> </li> </ul>"},{"location":"CO/co6/#interfacing-io-devices-to-the-memory-processor-and-operating-system","title":"Interfacing I/O Devices to the Memory, Processor, and Operating System","text":"<p>IO \u8bbe\u5907\uff08\u9700\u8981\u9a71\u52a8\uff09\u600e\u4e48\u548c OS \u901a\u4fe1  </p> <ul> <li>The OS must be able to give commands to the I/O devices. OS \u8981\u80fd\u7ed9 IO \u8bbe\u5907\u53d1\u51fa\u547d\u4ee4\uff0c\u6bd4\u5982\u542f\u52a8\u3001\u5173\u673a\u3002</li> <li>The device must be able to notify the OS, when I/O device completed an operation or has encountered an error. IO \u6709\u65b9\u5f0f\uff0c\u5728\u8bbe\u5907\u5b8c\u6210\u64cd\u4f5c\u6216\u8005\u9047\u5230\u9519\u8bef\u65f6\uff0c\u8981\u80fd\u901a\u77e5 OS. \u6bd4\u5982\u6253\u5370\u7ed3\u675f\uff0c\u53ef\u4ee5\u7ee7\u7eed\u4f20\u8f93\u6570\u636e\u4e86\u3002</li> <li>Data must be transferred between memory and an I/O device. \u6570\u636e\u8981\u80fd\u5728\u5185\u5b58\u548c IO \u8bbe\u5907\u4e4b\u95f4\u4f20\u8f93\u3002</li> </ul> <p>CPU \u8981\u80fd\u8bbf\u95ee\u5230 IO \u8bbe\u5907\uff0c\u9700\u8981\u6709\u4e00\u4e2a\u5730\u5740\u3002\uff08\u6ce8\u610f\u8fd9\u4e2a\u5730\u5740\u4e0d\u80fd\u8fdb\u5165 cache, \u5426\u5219\u6211\u4eec\u5c31\u65e0\u6cd5\u83b7\u5f97 IO \u8bbe\u5907\u7684\u6700\u65b0\u72b6\u6001\u4e86\uff09</p> <ul> <li>memory-mapped I/O \u628a\u5185\u5b58\u5730\u5740\u4e2d\u7684\u4e00\u90e8\u5206\u5206\u51fa\u6765\u7ed9 IO \u8bbe\u5907\u7528\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528 ld sd \u6765\u8bbf\u95ee\u3002</li> <li>special I/O instructions e.g. x86 \u4e2d in al,port out port,al. RISC-V \u4e2d\u6ca1\u6709</li> </ul> <p>IO \u8bbe\u5907\u9700\u8981\u6709\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u5b58\u50a8\u72b6\u6001  </p> <ul> <li>The Status register (a done bit, an error bit...)</li> <li>The Data register, The command register</li> </ul>"},{"location":"CO/co6/#communication-with-the-processor","title":"Communication with the Processor","text":"<ul> <li>Polling: The processor periodically checks status bit to see if it is time for the next I/O operation. \u5b9a\u671f\u68c0\u67e5\u8bbe\u5907\uff0c\u4f46\u662f\u4f1a\u5360\u7528 CPU. </li> <li>Interrupt: When an I/O device wants to notify processor that it has completed some operation or needs attentions, it causes processor to be interrupted. \u5f53 IO \u8bbe\u5907\u5b8c\u6210\u64cd\u4f5c\u7ed9 CPU \u4e00\u4e2a\u4e2d\u65ad\uff0c\u7b49\u5f85\u5176\u54cd\u5e94\u3002\u597d\u5904\u662f CPU \u53ef\u4ee5\u4e00\u76f4\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u3002</li> <li>DMA (direct memory access): the device controller transfer data directly to or from memory without involving processor. IO \u8bbe\u5907\u76f4\u63a5\u548c\u5185\u5b58\u4ea4\u4e92\uff0c\u4e0d\u9700\u8981 CPU \u53c2\u4e0e\u3002</li> </ul>"},{"location":"CO/co6/#interrupt-driven-io-mode","title":"Interrupt-Driven I/O mode","text":"<p>\u5047\u8bbe IO \u662f\u4e2a\u6253\u5370\u673a\u3002\u6bcf\u6b21\u6253\u5370\u4e00\u4e2a\u5b57\u7b26\uff0c\u5c31\u4f1a\u7ed9 CPU \u53d1\u4e00\u4e2a\u4e2d\u65ad\u3002CPU \u4f1a\u53bb\u8bfb\u53d6\u6253\u5370\u673a\u7684\u72b6\u6001\uff0c\u770b\u662f\u5426\u5b8c\u6210\u3002\u5b8c\u6210\u540e CPU \u7ee7\u7eed\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u3002</p>"},{"location":"CO/co6/#dma-transfer-mode","title":"DMA transfer mode","text":"<p>CPU \u9700\u8981\u914d\u7f6e DMA. DMA \u4f1a\u548c IO \u8bbe\u5907\u4ea4\u4e92\uff0c\u628a\u6570\u636e\u642c\u5230\u5185\u5b58\uff0c\u4e0d\u9700\u8981 CPU \u53c2\u4e0e\u3002</p> <p>A DMA transfer need three steps:</p> <ul> <li>The processor sets up the DMA by supplying some information, including the identity of the device, the operation, the memory address that is the source or destination of the data to be transferred, and the number of bytes to transfer.  CPU \u914d\u7f6e DMA\uff0c\u5305\u62ec\u54ea\u4e2a\u8bbe\u5907\u3001\u505a\u4ec0\u4e48\u64cd\u4f5c\u3001\u5185\u5b58\u5730\u5740\u3001\u6570\u636e\u5927\u5c0f\u7b49\u3002</li> <li>The DMA starts the operation on the device and arbitrates for the bus. If the request requires more than one transfer on the bus, the DMA unit generates the next memory address and initiates the next transfer. DMA \u5f00\u59cb\u64cd\u4f5c\u8bbe\u5907\uff0c\u5360\u7528\u603b\u7ebf\u3002\u5982\u679c\u9700\u8981\u591a\u6b21\u4f20\u8f93\uff0cDMA \u4f1a\u751f\u6210\u4e0b\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff0c\u5f00\u59cb\u4e0b\u4e00\u6b21\u4f20\u8f93\u3002 DMA \u4e5f\u662f\u6302\u5728\u603b\u7ebf\u4e0a\u7684 master, \u4f18\u5148\u7ea7\u6ca1\u6709 CPU \u9ad8\u3002\u56e0\u6b64\u4ed6\u4f1a\u8d81 CPU \u7a7a\u95f2\u7684\u65f6\u5019\u642c\u8fd0\u6570\u636e\uff0c\u53ef\u4ee5\u5145\u5206\u5229\u7528\u603b\u7ebf\u3002</li> <li>Once the DMA transfer is complete, the controller interrupts the processor, which then examines whether errors occur.  DMA \u5b8c\u6210\u540e\uff0c\u7ed9 CPU \u53d1\u4e2d\u65ad\uff0cCPU \u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef\u3002</li> </ul> <p>Compare polling, interrupts, DMA</p> <ul> <li>The disadvantage of polling is that it wastes a lot of processor time. When the CPU polls the I/O device periodically, the I/O devices maybe have no request or have not get ready. polling \u7684\u574f\u5904\u662f\u6d6a\u8d39\u4e86\u5927\u91cf\u7684 CPU \u7684\u65f6\u95f4\u3002CPU \u5b9a\u671f\u8f6e\u8be2 IO \u8bbe\u5907\u53ef\u80fd\u6ca1\u6709\u8bf7\u6c42\u6216\u8005\u6ca1\u6709\u51c6\u5907\u597d\u3002  </li> <li>If the I/O operations is interrupt driven, the OS can work on other tasks while data is being read from or written to the device. \u5982\u679c IO \u64cd\u4f5c\u662f\u4e2d\u65ad\u9a71\u52a8\u7684\uff0cOS \u53ef\u4ee5\u5728\u6570\u636e\u4ece\u8bbe\u5907\u8bfb\u53d6\u6216\u5199\u5165\u65f6\u5904\u7406\u5176\u4ed6\u4efb\u52a1\u3002</li> <li>Because DMA doesn\u2019t need the control of processor, it will not consume much of processor time. DMA \u4e0d\u9700\u8981 CPU \u63a7\u5236\uff0c\u4e0d\u4f1a\u6d88\u8017 CPU \u65f6\u95f4\u3002 \u4f46 DMA \u5176\u5b9e\u53ea\u662f\u642c\u8fd0\u6570\u636e\u65f6\u6709\u7528\uff0c\u5176\u5b9e\u548c polling interrupt \u4e0d\u5bf9\u7acb\u3002</li> </ul> Overhead of Polling in an I/O System <p> </p> Overhead of Interrupt-Driven I/O <p> </p> <p>polling \u5fc5\u987b\u65f6\u65f6\u523b\u523b\u67e5\u8be2\uff0c\u4e2d\u65ad\u53ea\u9700\u8981\u5728\u771f\u6b63\u6709\u6570\u636e\u4f20\u8f93\uff08\u6bd4\u5982 5% \u7684\u65f6\u95f4\uff09\u65f6\u518d\u53bb\u5904\u7406\u3002</p> Overhead of I/O Using DMA <p> </p>"},{"location":"CO/co6/#io-performance-measures-examples-from-disk-and-file-systems","title":"I/O Performance Measures: Examples from Disk and File Systems","text":"<p>CPU \u6709 benchmark, IO \u4e5f\u6709 benchmark \u6765\u8861\u91cf\u6027\u80fd\u3002</p> <p>I/O rate: the number of disk access per second, as opposed to data rate  </p>"},{"location":"CO/co6/#designing-an-io-system","title":"Designing an I/O system","text":"<p>\u6574\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf CPU+bus+I/O  </p> <ul> <li>Find the weakest link in the I/O system, which is the component in the I/O path that will constrain the design. Both the workload and configuration limits may dictate where the weakest link is located. \u901f\u5ea6\u7531\u6700\u6162\u7684\u51b3\u5b9a\u3002 \u770b\u54ea\u4e2a\u90e8\u5206\u6700\u5f31\uff0c\u5176\u4ed6\u90e8\u5206\u4fdd\u8bc1\u53ef\u4ee5\u6ee1\u8db3\u6700\u5f31\u7684\u6761\u4ef6\u5373\u53ef\u3002</li> <li>Configure this component to sustain the required bandwidth.  </li> <li>Determine the requirements for the rest of the system and configure them to support this bandwidth.  </li> </ul> Example <p> </p>"},{"location":"CSAPP/5/","title":"\u4f18\u5316\u7a0b\u5e8f\u6027\u80fd","text":"<p>Abstract</p> <ol> <li>\u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u5de5\u4f5c  </li> <li>\u7406\u89e3\u73b0\u4ee3\u5904\u7406\u5668</li> <li>\u6570\u636e\u6d41\u56fe</li> <li>\u7406\u89e3\u5185\u5b58\u6027\u80fd</li> </ol>"},{"location":"CSAPP/5/#_2","title":"\u4f18\u5316\u7f16\u8bd1\u5668\u7684\u80fd\u529b\u548c\u5c40\u9650","text":"<p>GCC\u4f18\u5316\u6307\u4ee4</p> <ul> <li>-Og:\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4e0d\u4f18\u5316\u3002  </li> <li> <p>-O1:\u7f16\u8bd1\u5668\u8bd5\u56fe\u4f18\u5316\u4ee3\u7801\u5927\u5c0f\u548c\u6267\u884c\u65f6\u95f4\uff0c\u5b83\u4e3b\u8981\u5bf9\u4ee3\u7801\u7684\u5206\u652f\uff0c\u5e38\u91cf\u4ee5\u53ca\u8868\u8fbe\u5f0f\u7b49\u8fdb\u884c\u4f18\u5316\uff0c\u4f46\u4e0d\u6267\u884c\u4efb\u4f55\u4f1a\u5360\u7528\u5927\u91cf\u7f16\u8bd1\u65f6\u95f4\u7684\u4f18\u5316\u3002  </p> </li> <li> <p>-O2:GCC\u6267\u884c\u51e0\u4e4e\u6240\u6709\u4e0d\u5305\u542b\u65f6\u95f4\u548c\u7a7a\u95f4\u6743\u8861\u7684\u4f18\u5316\uff08\u6bd4\u5982\uff0c\u5c1d\u8bd5\u66f4\u591a\u7684\u5bc4\u5b58\u5668\u7ea7\u7684\u4f18\u5316\u4ee5\u53ca\u6307\u4ee4\u7ea7\u7684\u4f18\u5316\uff09\u3002\u4e0e-O\u76f8\u6bd4\uff0c\u6b64\u9009\u9879\u589e\u52a0\u4e86\u7f16\u8bd1\u65f6\u95f4\uff0c\u4f46\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u6548\u7387\u3002  </p> </li> <li>-O3:\u6bd4-O2\u66f4\u4f18\u5316\uff0c\u5bf9\u4e8e-O3\u7f16\u8bd1\u9009\u9879\uff0c\u5728-O2\u7684\u57fa\u7840\u4e0a\uff0c\u6253\u5f00\u4e86\u66f4\u591a\u7684\u4f18\u5316\u9879\uff08\u6bd4\u5982\uff0c\u4f7f\u7528\u4f2a\u5bc4\u5b58\u5668\u7f51\u7edc\uff0c\u666e\u901a\u51fd\u6570\u7684\u5185\u8054\uff0c\u4ee5\u53ca\u9488\u5bf9\u5faa\u73af\u7684\u66f4\u591a\u4f18\u5316\uff09\u3002\u4e0d\u8fc7\u53ef\u80fd\u5bfc\u81f4\u7f16\u8bd1\u51fa\u6765\u7684\u4e8c\u7ea7\u5236\u7a0b\u5e8f\u4e0d\u80fddebug\u3002  </li> <li>-Os:\u4e3b\u8981\u662f\u5bf9\u4ee3\u7801\u5927\u5c0f\u7684\u4f18\u5316\uff0c\u6211\u4eec\u57fa\u672c\u4e0d\u7528\u505a\u66f4\u591a\u7684\u5173\u5fc3\u3002 \u901a\u5e38\u5404\u79cd\u4f18\u5316\u90fd\u4f1a\u6253\u4e71\u7a0b\u5e8f\u7684\u7ed3\u6784\uff0c\u8ba9\u8c03\u8bd5\u5de5\u4f5c\u53d8\u5f97\u65e0\u4ece\u7740\u624b\u3002\u5e76\u4e14\u4f1a\u6253\u4e71\u6267\u884c\u987a\u5e8f\uff0c\u4f9d\u8d56\u5185\u5b58\u64cd\u4f5c\u987a\u5e8f\u7684\u7a0b\u5e8f\u9700\u8981\u505a\u76f8\u5173\u5904\u7406\u624d\u80fd\u786e\u4fdd\u7a0b\u5e8f\u7684\u6b63\u786e\u6027\u3002  </li> </ul> <p>\u59a8\u788d\u4f18\u5316\u7684\u56e0\u7d20:</p> <ul> <li>\u5185\u5b58\u522b\u540d\u4f7f\u7528(memory aliasing) \u5728\u53ea\u6267\u884c\u5b89\u5168\u7684\u4f18\u5316\u4e2d, \u7f16\u8bd1\u5668\u5fc5\u987b\u5047\u8bbe\u4e0d\u540c\u7684\u6307\u9488\u53ef\u80fd\u4f1a\u6307\u5411\u5185\u5b58\u4e2d\u7684\u540c\u4e00\u4e2a\u4f4d\u7f6e.  </li> </ul> <p>Example</p> <pre><code>void twiddle1 (long *xp,long*yp)\n{\n*xp+ = *yp;\n*xp+ = *yp;\n}\nvoid twiddle2(long *xp,long*yp)\n{\n*xp+ = 2 * *yp;\n}\n</code></pre> <p>\u8868\u9762\u4e0a, twiddle1 \u9700\u8981 6 \u6b21\u5185\u5b58\u5f15\u7528(2 \u6b21\u8bfb xp, 2 \u6b21\u8bfb yp, 2 \u6b21\u5199 xp), \u800c twiddle2 \u53ea\u9700\u8981 3 \u6b21\u5185\u5b58\u5f15\u7528(1 \u6b21\u8bfb xp, 1 \u6b21\u8bfb yp, 1 \u6b21\u5199 xp). \u4f46\u5f53 xp \u548c yp \u5f15\u7528\u7684\u662f\u540c\u4e00\u5730\u5740\u65f6, twiddle1 \u4f1a\u8ba9 xp \u53d8\u4e3a\u539f\u6765\u7684 4 \u500d, \u800c twiddle2 \u4f1a\u8ba9 xp \u53d8\u4e3a\u539f\u6765\u7684 3 \u500d, \u56e0\u6b64\u7f16\u8bd1\u5668\u4e0d\u4f1a\u4ea7\u751f twiddle2 \u7684\u4ee3\u7801\u4f5c\u4e3a twiddle1 \u7684\u4f18\u5316\u7248\u672c.</p> <ul> <li>\u51fd\u6570\u8c03\u7528 </li> </ul> <p>Example</p> <p><pre><code>long f();\nlong func1() {\nreturn f() + f() + f() + f();\n}\nlong func2() {\nreturn 4 * f();\n}\n</code></pre> func2 \u53ea\u8c03\u7528 f \u4e00\u6b21, \u4f46 func1 \u4f1a\u8c03\u7528\u56db\u6b21.  </p> <p>\u4f46\u662f\u5f53\u51fd\u6570\u6709\u526f\u4f5c\u7528\u65f6--\u5b83\u4f1a\u6539\u53d8\u5168\u5c40\u7a0b\u5e8f\u72b6\u6001\u7684\u4e00\u90e8\u5206, \u90a3\u4e48\u6539\u53d8\u8c03\u7528\u5b83\u7684\u6b21\u6570\u4f1a\u6539\u53d8\u7a0b\u5e8f\u7684\u884c\u4e3a. \u56e0\u6b64\u5927\u591a\u6570\u7f16\u8bd1\u5668\u4e5f\u4e0d\u4f1a\u5bf9\u6b64\u505a\u4f18\u5316.  </p>"},{"location":"CSAPP/5/#_3","title":"\u8868\u793a\u7a0b\u5e8f\u6027\u80fd","text":"<p>\u7a0b\u5e8f\u6027\u80fd\u8861\u91cf\u6807\u51c6: \u6bcf\u5143\u7d20\u7684\u5468\u671f\u6570(CPE i.e. Cycles Per Element).</p> <p>Example</p> <p><pre><code>// Compute prefix sum of vector a\nvoid psum1(float a[], float p[], long n)\n{\nlong i;\np[0] = a[0];\nfor (i = 1; i &lt; n; i++)\np[i] = p[i-1] + a[i];\n}\nvoid psum2(float a[], float p[], long n)\n{\nlong i;\np[0] = a[0];\nfor (i = 1; i &lt; n-1; i+=2) {\nfloat  mid_val = p[i-1] + a[i];\np[i] = mid_val;\np[i+1] = mid_val + a[i+1];   }\nif (i &lt; n)\np[i] = p[i-1] + a[i];\n}\n</code></pre> psum1 \u6bcf\u6b21\u8ba1\u7b97\u5411\u91cf\u7684\u4e00\u4e2a\u5143\u7d20, psum2 \u6bcf\u6b21\u8ba1\u7b97\u4e24\u4e2a\u5143\u7d20(\u5faa\u73af\u5c55\u5f00). \u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\u6240\u9700\u8981\u7684\u65f6\u95f4\u6211\u4eec\u53ef\u4ee5\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u6765\u62df\u5408.  \u5176\u4e2d psum1: 368+9.0n, psum2: 368+6.0n. \u8fd9\u4e9b\u9879\u4e2d\u7684\u7cfb\u6570\u79f0\u4e3a CPE.</p>"},{"location":"CSAPP/5/#_4","title":"\u6d88\u9664\u5faa\u73af\u7684\u4f4e\u6548\u7387","text":"<p>Example</p> <p><pre><code>void lower1(char *s)\n{\nsize_t i;\nfor (i = 0; i &lt; strlen(s); i++)\nif (s[i] &gt;= 'A' &amp;&amp; s[i] &lt;= 'Z')\ns[i] -= ('A' - 'a');\n}\nvoid lower2(char *s)\n{\nsize_t i;\nsize_t len = strlen(s);           /*\u653e\u5728\u51fd\u6570\u4f53\u5916*/\nfor (i = 0; i &lt; len; i++)\nif (s[i] &gt;= 'A' &amp;&amp; s[i] &lt;= 'Z')\ns[i] -= ('A' - 'a');\n}\n</code></pre>  \u7531\u4e8e\u5faa\u73af\u7ed3\u6784\u7684\u6548\u7387\u6bd4\u8f83\u4f4e, \u521d\u59cb\u4ee3\u7801 lower1 \u7684\u8fd0\u884c\u65f6\u95f4\u662f\u4e8c\u6b21\u9879\u7684, \u4fee\u6539\u8fc7\u7684\u4ee3\u7801 lower2 \u7684\u8fd0\u884c\u65f6\u95f4\u662f\u7ebf\u6027\u7684. \u56e0\u4e3a lower1 \u7684 n \u6b21\u8fed\u4ee3\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u8c03\u7528 strlen \u51fd\u6570, \u800c strlen \u6240\u7528\u65f6\u95f4\u53c8\u4e0e n \u6210\u6b63\u6bd4, \u56e0\u6b64\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u662f n^2. \u540c\u65f6\u56e0\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u5728\u8fd0\u884c\u4e2d\u6539\u53d8, \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06 strlen \u51fd\u6570\u79fb\u5230\u5faa\u73af\u5916.  </p> <p>\u4e0a\u8ff0\u65b9\u6cd5\u79f0\u4e3a\u4ee3\u7801\u79fb\u52a8(code motion). \u5373\u8bc6\u522b\u8981\u6267\u884c\u591a\u6b21(\u4f8b\u5982\u5728\u5faa\u73af\u91cc)\u4f46\u662f\u8ba1\u7b97\u7ed3\u679c\u4e0d\u4f1a\u6539\u53d8\u7684\u8ba1\u7b97, \u56e0\u800c\u8bb2\u8ba1\u7b97\u79fb\u52a8\u5230\u4ee3\u7801\u524d\u9762\u4e0d\u4f1a\u88ab\u591a\u6b21\u6c42\u503c\u7684\u90e8\u5206. \u4f18\u5316\u7f16\u8bd1\u5668\u4e0d\u80fd\u53ef\u9760\u5730\u53d1\u73b0\u51fd\u6570\u662f\u5426\u6709\u526f\u4f5c\u7528, \u6240\u4ee5\u7a0b\u5e8f\u5458\u5fc5\u987b\u5e2e\u52a9\u7f16\u8bd1\u5668\u663e\u793a\u5730\u5b8c\u6210\u4ee3\u7801\u7684\u79fb\u52a8.  </p>"},{"location":"CSAPP/5/#_5","title":"\u51cf\u5c11\u8fc7\u7a0b\u8c03\u7528","text":"<p>Example</p> <p><pre><code>int get_vec_element(vec_ptr v, long index, data_t *dest)\n{\nif (index &lt; 0 || index &gt;= v-&gt;len)\nreturn 0;       // \u8fb9\u754c\u68c0\u67e5\n*dest = v-&gt;data[next];\nreturn 1;\n}\n/* Move call to vec_length out of loop */\nvoid combine2 (vec_ptr v, data_t *dest)\n{\nlong i;\nlong length vec_length(v);\n*dest = IDENT;\nfor (i=0;i&lt; length;i++)\n{\ndata_t val;\nget_vec_element(v,i,&amp;val);\n*dest = *dest OP val;\n}\n}\n</code></pre> \u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u90fd\u4f1a\u8c03\u7528 get_vec_element \u6765\u83b7\u53d6\u4e0b\u4e00\u4e2a\u5411\u91cf\u5143\u7d20, \u800c\u6bcf\u6b21\u5411\u91cf\u8c03\u7528\u90fd\u6709\u8fb9\u754c\u68c0\u67e5, \u4f1a\u9020\u6210\u4f4e\u6548\u7387. \u4e8e\u662f\u6211\u4eec\u6539\u4e3a\u5982\u4e0b\u7248\u672c: <pre><code>data_t *get_vec_start(vec_ptr v)\n{\nreturn v-data;\n}\n/* Move call to vec_length out of loop */\nvoid combine3 (vec_ptr v, data_t *dest)\n{\nlong i;\nlong length vec_length(v);\ndata_t *data = get_vec_start(v);\n*dest = IDENT;\nfor (i=0;i&lt; length;i++)\n{\n*dest = *dest OP data[i];\n}\n}\n</code></pre> </p> <p>\u4f46\u8fd9\u6837\u505a\u6ca1\u6709\u5e26\u6765\u6027\u80fd\u4e0a\u660e\u663e\u7684\u63d0\u5347. \u8bf4\u660e\u5185\u5faa\u73af\u4e2d\u7684\u5176\u4ed6\u64cd\u4f5c\u5f62\u6210\u4e86\u5e73\u9759, \u9650\u5236\u6027\u80fd\u8d85\u8fc7\u4e86 get_vec_element.</p>"},{"location":"CSAPP/5/#_6","title":"\u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5f15\u7528","text":"<p>Example</p> <p><pre><code>#Inner loop of combines. data_t double, OP =\n#dest in %rbx, data+i in %rdx, data+length in %rax \n.L17:\nvmovsd (%rbx),%xmm()           # Read product from dest vmulsd (%rdx),%xmm0,%xmm0      # Multiply product by data[i]\nvmovsd %xmm, (%rbx\uff09           # Store product at dest\naddq $8,%rdx                   # Increment data+i\ncmp %rax,%rdx                  # Compare to data+length jne .L17\n</code></pre> \u6211\u4eec\u53d1\u73b0 combine3 \u7684\u4ee3\u7801, \u6bcf\u6b21\u8fed\u4ee3\u65f6, \u7d2f\u79ef\u53d8\u91cf\u7684\u6570\u503c\u90fd\u8981\u4ece\u5185\u5b58\u8bfb\u51fa\u518d\u5199\u5165\u5230\u5185\u5b58. \u4e8e\u662f\u6211\u4eec\u5f15\u7528\u4e00\u4e2a\u5386\u53f2\u53d8\u91cf acc \u6765\u8868\u793a\u5728\u5faa\u73af\u4e2d\u7d2f\u79ef\u8ba1\u7b97\u7684\u503c. <pre><code>#Inner loop of combines. data_t double, OP =\n#dest in %rbx, data+i in %rdx, data+length in %rax \n.L25:\nvmulsd (%rdx),%xmm0,%xmm0      # Multiply product by data[i]\naddq $8,%rdx                   # Increment data+i\ncmp %rax,%rdx                  # Compare to data+length jne .L25    </code></pre> \u5176\u4fee\u6539\u90e8\u5206:  <pre><code>// combine4\n*data acc = IDENT;\nfor (i=0;i&lt; length;i++)\n{\nacc = acc OP data[i];\n}\n</code></pre> \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u505a\u7a0b\u5e8f\u6027\u80fd\u6709\u4e86\u663e\u8457\u63d0\u9ad8: </p> <p>\u6ce8\u610f\u7684\u662f, \u7531\u4e8e\u5185\u5b58\u522b\u540d\u4f7f\u7528, \u4f18\u5316\u540e\u51fd\u6570\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u884c\u4e3a(\u5982\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u82e5\u6211\u4eec\u5c06\u7b54\u6848\u5b58\u5728\u5411\u91cf\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e, combine3 \u548c combine4 \u5c31\u4e0d\u4f1a\u5f97\u5230\u76f8\u540c\u7684\u7b54\u6848), \u56e0\u6b64\u4e00\u822c\u6765\u8bf4\u7f16\u8bd1\u5668\u4e0d\u4f1a\u4e3a\u6211\u4eec\u505a\u8fd9\u4e00\u6b65\u4f18\u5316.  </p>"},{"location":"CSAPP/5/#_7","title":"\u7406\u89e3\u73b0\u4ee3\u5904\u7406\u5668","text":"<p>\u4e0a\u8ff0\u4f18\u5316\u90fd\u4e0d\u4f9d\u8d56\u4e8e\u76ee\u6807\u673a\u5668\u7684\u4efb\u4f55\u7279\u6027, \u53ea\u662f\u7b80\u5355\u964d\u4f4e\u4e86\u8fc7\u7a0b\u8c03\u7528\u7684\u5f00\u9500, \u4ee5\u53ca\u6d88\u9664\u4e86\u4e00\u4e9b\u91cd\u5927\u7684\u59a8\u788d\u4f18\u5316\u7684\u56e0\u7d20. \u8981\u8fdb\u4e00\u6b65\u63d0\u9ad8\u6027\u80fd, \u5fc5\u987b\u8003\u8651\u5229\u7528\u5904\u7406\u5668\u5fae\u4f53\u7cfb\u7ed3\u6784\u7684\u4f18\u5316. \u5728\u5b9e\u9645\u5904\u7406\u5668\u4e2d\u662f\u540c\u65f6\u5bf9\u591a\u6761\u6307\u4ee4\u6c42\u503c\u7684, \u8fd9\u4e2a\u73b0\u8c61\u79f0\u4e3a\u6307\u4ee4\u7ea7\u5e76\u884c</p>"},{"location":"CSAPP/5/#_8","title":"\u6574\u4f53\u64cd\u4f5c","text":"<p>\u5982\u4e0a\u56fe\u6240\u793a\u662f\u4e00\u4e2a\u7b80\u5316\u7684 Intel \u5904\u7406\u5668\u7684\u7ed3\u6784\uff0c\u5305\u542b\u4e24\u4e2a\u7279\u70b9\uff1a</p> <ul> <li>\u8d85\u6807\u91cf(Superscalar)\uff1a\u5904\u7406\u5668\u53ef\u4ee5\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u6267\u884c\u591a\u4e2a\u64cd\u4f5c</li> <li>\u4e71\u5e8f(Out-of-order)\uff1a\u6307\u4ee4\u6267\u884c\u7684\u987a\u5e8f\u4e0d\u4e00\u5b9a\u548c\u673a\u5668\u4ee3\u7801\u7684\u987a\u5e8f\u76f8\u540c\uff0c\u63d0\u9ad8\u6307\u4ee4\u7ea7\u5e76\u884c</li> </ul> <p>\u6574\u4e2a\u8bbe\u8ba1\u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206:</p> <ul> <li> <p>\u6307\u4ee4\u63a7\u5236\u5355\u5143(Instruction Control Unit) \u901a\u8fc7\u53d6\u503c\u63a7\u5236\u903b\u8f91\u4ece\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\u4e2d\u8bfb\u51fa\u6307\u4ee4\u5e8f\u5217, \u5e76\u6839\u636e\u8fd9\u4e9b\u5e8f\u5217\u751f\u6210\u4e00\u7ec4\u9488\u5bf9\u7a0b\u5e8f\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c, \u7136\u540e\u53d1\u9001\u5230 EU \u4e2d.  </p> <ul> <li>\u53d6\u503c\u63a7\u5236\u903b\u8f91 \u5206\u652f\u9884\u6d4b, \u731c\u6d4b\u662f\u5426\u4f1a\u9009\u62e9\u5206\u652f, \u540c\u65f6\u8fd8\u9884\u6d4b\u5206\u652f\u7684\u76ee\u6807\u5730\u5740.  </li> <li>\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58(instruction cache) \u4e00\u4e2a\u7279\u6b8a\u7684\u9ad8\u901f\u5b58\u50a8\u5668, \u5305\u542b\u6700\u8fd1\u8bbf\u95ee\u7684\u6307\u4ee4.  ICU \u4f1a\u5728\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u5f88\u65e9\u4e4b\u524d\u53d6\u6307, \u8fd9\u6837\u5b83\u624d\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5bf9\u6307\u4ee4\u8bd1\u7801.  </li> <li>\u6307\u4ee4\u8bd1\u7801\u903b\u8f91 \u63a5\u53d7\u5b9e\u9645\u7684\u7a0b\u5e8f\u6307\u4ee4, \u5e76\u5c06\u5b83\u4eec\u8f6c\u6362\u6210\u4e00\u7ec4\u57fa\u672c\u64cd\u4f5c(\u5fae\u64cd\u4f5c). \u6bcf\u4e2a\u8fd9\u6837\u7684\u64cd\u4f5c\u90fd\u5b8c\u6210\u67d0\u4e2a\u7b80\u5355\u7684\u8ba1\u7b97\u4efb\u52a1. e.g. x86 \u4e2d <code>addq %rax, %rdx</code> \u4f1a\u88ab\u8f6c\u5316\u6210\u4e00\u4e2a\u64cd\u4f5c\u4f46 <code>addq %rax, 8(%rdx)</code> \u4f1a\u88ab\u8bd1\u7801\u4e3a\u4e09\u4e2a\u64cd\u4f5c: \u8bfb\u5185\u5b58\u503c, \u505a\u52a0\u6cd5, \u5b58\u56de\u5185\u5b58.</li> <li> <p>\u9000\u5f79\u5355\u5143 \u8bb0\u5f55\u6b63\u5728\u8fdb\u884c\u7684\u5904\u7406, \u5e76\u786e\u4fdd\u5b83\u9075\u5b88\u673a\u5668\u7ea7\u7a0b\u5e8f\u7684\u987a\u5e8f\u8bed\u4e49. \u5b83\u5305\u542b\u5e76\u63a7\u5236\u7740\u5bc4\u5b58\u5668\u6587\u4ef6\u7684\u66f4\u65b0. \u6307\u4ee4\u5728\u8bd1\u7801\u65f6, \u6307\u4ee4\u4fe1\u606f\u88ab\u653e\u5728\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7684\u961f\u5217\u4e2d. \u4e00\u65e6\u4e00\u6761\u6307\u4ee4\u7684\u64cd\u4f5c\u5b8c\u6210, \u800c\u4e14\u6240\u6709\u5f15\u8d77\u8fd9\u6761\u6307\u4ee4\u7684\u5206\u652f\u70b9\u4e5f\u90fd\u9884\u6d4b\u6b63\u786e, \u90a3\u4e48\u8fd9\u6761\u6307\u4ee4\u5c31\u53ef\u4ee5\u9000\u5f79\u4e86, \u6240\u6709\u8fd9\u6761\u6307\u4ee4\u6709\u5173\u7684\u5bf9\u7a0b\u5e8f\u5bc4\u5b58\u5668\u7684\u66f4\u65b0\u90fd\u53ef\u4ee5\u5b9e\u9645\u6267\u884c\u4e86; \u5982\u679c\u67d0\u4e2a\u5206\u652f\u70b9\u9884\u6d4b\u9519\u8bef, \u8fd9\u6761\u6307\u4ee4\u4f1a\u88ab\u6e05\u7a7a, \u4e22\u5f03\u6240\u6709\u8ba1\u7b97\u7ed3\u679c.  </p> <p>Note</p> <p>\u4efb\u4f55\u5bf9\u7a0b\u5e8f\u5bc4\u5b58\u5668\u7684\u66f4\u65b0\u90fd\u53ea\u4f1a\u5728\u6307\u4ee4\u9000\u5f79\u65f6\u624d\u4f1a\u53d1\u751f. \u4e3a\u4e86\u52a0\u901f\u6307\u4ee4\u5230\u6307\u4ee4\u95f4\u7ed3\u679c\u7684\u4f20\u9001, \u8bb8\u591a\u6b64\u7c7b\u4fe1\u606f\u662f\u5728\u6267\u884c\u5355\u5143\u95f4\u4ea4\u6362\u7684, \u5373\u56fe\u4e2d\u7684\"\u64cd\u4f5c\u7ed3\u679c\".  </p> </li> </ul> </li> <li> <p>\u6267\u884c\u5355\u5143(Execution Unit) \u63a5\u6536\u6765\u81ea\u53d6\u6307\u5355\u5143\u7684\u64cd\u4f5c, \u901a\u5e38\u6bcf\u4e2a\u5468\u671f\u4f1a\u63a5\u53d7\u591a\u4e2a\u64cd\u4f5c, \u8fd9\u4e9b\u64cd\u4f5c\u4f1a\u88ab\u5206\u6d3e\u5230\u4e00\u7ec4\u529f\u80fd\u5355\u5143\u4e2d.  </p> <ul> <li>\u529f\u80fd\u5355\u5143 \u4e13\u95e8\u7528\u6765\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u64cd\u4f5c. \u4e00\u4e2a\u529f\u80fd\u5355\u5143\u53ef\u4ee5\u6267\u884c\u591a\u79cd\u64cd\u4f5c, \u591a\u4e2a\u529f\u80fd\u5355\u5143\u53ef\u4ee5\u6267\u884c\u540c\u4e00\u79cd\u64cd\u4f5c.  <ul> <li>\u8bfb\u5199\u5185\u5b58\u662f\u901a\u8fc7\u52a0\u8f7d/\u5b58\u50a8\u6a21\u5757\u5b8c\u6210\u7684. \u8fd9\u4e24\u4e2a\u5355\u5143\u5404\u5305\u542b\u4e00\u4e2a\u52a0\u6cd5\u5668\u6765\u5b8c\u6210\u5730\u5740\u8ba1\u7b97, \u5e76\u901a\u8fc7\u6570\u636e\u9ad8\u901f\u7f13\u5b58\u6765\u8bfb\u5199\u5185\u5b58.  </li> <li>\u7b97\u672f\u8fd0\u7b97\u6a21\u5757 </li> <li> <p>\u5206\u652f\u6a21\u5757 \u786e\u5b9a\u5206\u652f\u9884\u6d4b\u662f\u5426\u6b63\u786e(\u800c\u975e\u5206\u652f\u5f80\u54ea\u6267\u884c), \u5982\u679c\u9884\u6d4b\u9519\u8bef, \u6267\u884c\u5355\u5143\u4f1a\u4e22\u5f03\u5206\u652f\u70b9\u4e4b\u540e\u8ba1\u7b97\u51fa\u6765\u7684\u7ed3\u679c, \u5e76\u53d1\u4fe1\u53f7\u7ed9\u5206\u652f\u5355\u5143, \u5e76\u6307\u51fa\u6b63\u786e\u7684\u5206\u652f\u76ee\u7684. \u8fd9\u6837\u5206\u652f\u5355\u5143\u4f1a\u5728\u65b0\u7684\u4f4d\u7f6e\u53d6\u503c.  </p> <p>\u5bc4\u5b58\u5668\u91cd\u547d\u540d</p> <p>\u63a7\u5236\u64cd\u4f5c\u6570\u5728\u6267\u884c\u5355\u5143\u95f4\u4f20\u9001\u7684\u6700\u5e38\u89c1\u673a\u5236\u662f\u5bc4\u5b58\u5668\u91cd\u547d\u540d(register renaming). \u5f53\u6267\u884c\u4e00\u6761\u66f4\u65b0\u5bc4\u5b58\u5668r\u7684\u6307\u4ee4I1\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6307\u5411\u8be5\u64cd\u4f5c\u7ed3\u679c\u7684\u552f\u4e00\u6807\u8bc6\u7b26t\uff0c\u7136\u540e\u5c06(r, t)\u52a0\u5165\u91cd\u547d\u540d\u8868\u4e2d.   \u5f53\u540e\u7eed\u6709\u9700\u8981\u7528\u5230\u5bc4\u5b58\u5668r\u4f5c\u4e3a\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\u65f6\uff0c\u4f1a\u5c06t\u4f5c\u4e3a\u64cd\u4f5c\u6570\u6e90\u7684\u503c\u8f93\u5165\u5230\u5355\u5143\u4e2d\u8fdb\u884c\u6267\u884c, \u5f53I1\u6267\u884c\u5b8c\u6210\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7ed3\u679c(v, t)\uff0c\u8868\u793a\u6807\u8bc6\u7b26t\u7684\u64cd\u4f5c\u4ea7\u751f\u4e86\u7ed3\u679cv\uff0c\u7136\u540e\u6240\u6709\u7b49\u5f85t\u4f5c\u4e3a\u6e90\u7684\u64cd\u4f5c\u90fd\u4f1a\u4f7f\u7528v\u4f5c\u4e3a\u6e90\u503c\u3002 \u610f\u4e49\uff1a\u4f7f\u7528\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u673a\u5236\uff0c\u53ef\u4ee5\u5c06\u503c\u4ece\u4e00\u4e2a\u64cd\u4f5c\u76f4\u63a5\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a\u64cd\u4f5c\uff0c\u800c\u65e0\u9700\u8fdb\u884c\u5bc4\u5b58\u5668\u6587\u4ef6\u7684\u8bfb\u5199\uff0c\u4f7f\u5f97\u540e\u7eed\u7684\u64cd\u4f5c\u80fd\u5728\u7b2c\u4e00\u4e2a\u64cd\u4f5cI1\u5b8c\u6210\u540e\u5c3d\u5feb\u5f00\u59cb\u3002\u5e76\u4e14\u6295\u673a\u6267\u884c\u4e2d\uff0c\u5728\u9884\u6d4b\u6b63\u786e\u4e4b\u524d\u4e0d\u4f1a\u5c06\u7ed3\u679c\u5199\u5165\u5bc4\u5b58\u5668\u4e2d\uff0c\u800c\u901a\u8fc7\u8be5\u673a\u5236\u5c31\u53ef\u4ee5\u9884\u6d4b\u7740\u6267\u884c\u64cd\u4f5c\u7684\u6574\u4e2a\u5e8f\u5217.   \u6ce8\u610f\uff1a\u91cd\u547d\u540d\u8868\u53ea\u5305\u542b\u672a\u8fdb\u884c\u5bc4\u5b58\u5668\u5199\u64cd\u4f5c\u7684\u5bc4\u5b58\u5668\uff0c\u5982\u679c\u6709\u4e2a\u64cd\u4f5c\u9700\u8981\u7684\u5bc4\u5b58\u5668\u6ca1\u6709\u5728\u91cd\u547d\u540d\u8868\u4e2d\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u5bc4\u5b58\u5668\u6587\u4ef6\u4e2d\u83b7\u53d6\u503c.  </p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"CSAPP/5/#_9","title":"\u6027\u80fd","text":"<p>\u523b\u753b\u6027\u80fd: \u5ef6\u8fdf(latency): \u8868\u793a\u5b8c\u6210\u8fd0\u7b97\u6240\u9700\u8981\u7684\u603b\u65f6\u95f4 \u53d1\u5c04\u65f6\u95f4(issue time): \u8868\u793a\u4e24\u4e2a\u8fde\u7eed\u7684\u540c\u7c7b\u578b\u7684\u8fd0\u7b97\u4e4b\u95f4\u9700\u8981\u7684\u6700\u5c0f\u5468\u671f\u6570 \u5bb9\u91cf(capacity)*: \u8868\u793a\u80fd\u591f\u6267\u884c\u8be5\u8fd0\u7b97\u7684\u529f\u80fd\u5355\u5143\u7684\u6570\u91cf  </p> <p>\u53c2\u8003\u673a\u7684\u6027\u80fd</p> <p> </p> <p>\u53d1\u5c04\u65f6\u95f4\u4e3a 1 \u7684\u529f\u80fd\u5355\u5143\u88ab\u79f0\u4e3a\u5b8c\u5168\u6d41\u6c34\u5316\u7684(fully pipelined): \u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u90fd\u53ef\u4ee5\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u8fd0\u7b97. e.g. \u4e00\u4e2a\u5178\u578b\u7684\u6d6e\u70b9\u52a0\u6cd5\u5668(\u6240\u4ee5\u5ef6\u8fdf\u662f 3 \u4e2a\u5468\u671f): \u4e00\u4e2a\u9636\u6bb5\u5904\u7406\u6307\u6570, \u4e00\u4e2a\u9636\u6bb5\u76f8\u52a0\u5c0f\u6570, \u4e00\u4e2a\u9636\u6bb5\u5bf9\u7ed3\u679c\u820d\u5165. \u7b97\u672f\u8fd0\u7b97\u53ef\u4ee5\u8fde\u7eed\u5730\u901a\u8fc7\u5404\u4e2a\u9636\u6bb5, \u4e0d\u7528\u7b49\u4e00\u4e2a\u64cd\u4f5c\u5b8c\u6210\u540e\u518d\u8fdb\u884c\u4e0b\u4e00\u4e2a. \u53ea\u6709\u5f53\u8981\u6267\u884c\u7684\u8fd0\u7b97\u662f\u8fde\u7eed, \u903b\u8f91\u4e0a\u72ec\u7acb\u7684\u65f6\u5019\u624d\u80fd\u5229\u7528\u8fd9\u79cd\u529f\u80fd. \u6ce8\u610f\u5230\u9664\u6cd5\u5668\u7684\u53d1\u5c04\u65f6\u95f4\u7b49\u4e8e\u5ef6\u8fdf, \u56e0\u6b64\u5fc5\u987b\u5728\u5b8c\u6210\u6574\u4e2a\u9664\u6cd5\u540e\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u4e2a\u9664\u6cd5.  </p> <p>\u6211\u4eec\u66f4\u503e\u5411\u4e8e\u4f7f\u7528\u6700\u5927\u541e\u5410\u91cf\u6765\u8868\u793a\u53d1\u5c04\u65f6\u95f4, \u5b9a\u4e49\u4e3a\u53d1\u5c04\u65f6\u95f4\u7684\u5012\u6570. \u5bf9\u4e8e\u4e00\u4e2a\u5bb9\u91cf\u4e3a C\uff0c\u53d1\u5c04\u65f6\u95f4\u4e3a I \u7684\u64cd\u4f5c\u800c\u8a00\uff0c\u5176\u541e\u5410\u91cf\u4e3a C/I.</p> <p>\u6839\u636e\u4ee5\u4e0a\u6027\u80fd, \u6211\u4eec\u5f97\u5230 CPE \u7684\u4e24\u4e2a\u57fa\u672c\u754c\u9650: \u5ef6\u8fdf\u754c\u9650 \u5ef6\u8fdf\u754c\u9650\u7ed9\u51fa\u4e86\u4efb\u4f55\u5fc5\u987b\u6309\u7167\u4e25\u683c\u987a\u5e8f\u5b8c\u6210\u5408\u5e76\u8fd0\u7b97\u7684\u51fd\u6570\u6240\u9700\u8981\u7684\u6700\u5c0f CPE \u503c. \u5f53\u5b58\u5728\u6570\u636e\u76f8\u5173\u65f6\uff0c\u6307\u4ee4\u662f\u4e25\u683c\u987a\u5e8f\u6267\u884c\u7684\uff0c\u610f\u5473\u7740\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7\u6307\u4ee4\u5e76\u884c\u6765\u8fdb\u884c\u52a0\u901f\u3002\u800c\u901a\u8fc7\u53c2\u8003\u673a\u7684\u8fd0\u7b97\u6027\u80fd\u77e5\u9053\u6267\u884c\u6bcf\u79cd\u8fd0\u7b97\u6240\u9700\u7684\u5ef6\u8fdf\uff0c\u5c31\u786e\u5b9a\u4e86\u6267\u884c\u8be5\u8fd0\u7b97\u6240\u9700\u7684\u6700\u5c0f\u65f6\u949f\u5468\u671f\u6570\uff0c\u6b64\u65f6CPE\u7684\u5ef6\u8fdf\u754c\u9650\u5c31\u662f\u8fd0\u7b97\u64cd\u4f5c\u7684\u5ef6\u8fdf. \u541e\u5410\u91cf\u754c\u9650 \u6839\u636e\u529f\u80fd\u5355\u5143\u4ea7\u751f\u7ed3\u679c\u7684\u6700\u5927\u901f\u7387, \u541e\u5410\u91cf\u754c\u9650\u7ed9\u51fa\u4e86 CPE \u7684\u6700\u5c0f\u754c\u9650. \u8868\u793a\u6211\u4eec\u8003\u8651\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7684\u529f\u80fd\u5355\u5143\uff0c\u8ba1\u7b97\u51fa\u6765\u8fd0\u7b97\u7ed3\u679c\u7684\u6700\u5927\u901f\u7387.  </p> <p>\u53c2\u8003\u673a\u7684\u4e24\u4e2a\u754c\u9650</p> <p>  \u6574\u6570\u4e58\u6cd5\u7684\u5ef6\u8fdf\u4e3a3\u4e2a\u65f6\u949f\u5468\u671f\uff0c\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u75283\u4e2a\u65f6\u949f\u5468\u671f\u624d\u80fd\u5b8c\u6210\u4e00\u4e2a\u6574\u6570\u4e58\u6cd5\u8fd0\u7b97\uff0c\u4e0d\u53ef\u80fd\u66f4\u5feb\u4e86\uff0c\u6240\u4ee5\u5f53\u524d\u7684CPE\u503c\u4e3a3.  \u53c2\u8003\u673a\u542b\u67094\u4e2a\u53ef\u4ee5\u6267\u884c\u6574\u6570\u52a0\u6cd5\u7684\u529f\u80fd\u5355\u5143\uff0c\u4e14\u6574\u6570\u52a0\u6cd5\u7684\u53d1\u5c04\u65f6\u95f4\u4e3a1\uff0c\u6240\u4ee5\u7cfb\u7edf\u6267\u884c\u6574\u6570\u52a0\u6cd5\u7684\u541e\u5410\u91cf\u4e3a4\uff0c\u610f\u5473\u7740CPE\u503c\u4e3a0.25\uff0c\u4f46\u662f\u53c2\u8003\u673a\u4e2d\u53ea\u6709\u4e24\u4e2a\u652f\u6301\u52a0\u8f7d\u7684\u529f\u80fd\u5355\u5143\uff0c\u610f\u5473\u7740\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u53ea\u80fd\u8bfb\u53d6\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u541e\u5410\u91cf\u5c31\u53d7\u5230\u4e86\u52a0\u8f7d\u7684\u9650\u5236\uff0cCPE\u503c\u4e3a0.5\u3002\u518d\u6bd4\u5982\u53c2\u8003\u673a\u5185\u53ea\u542b\u6709\u4e00\u4e2a\u80fd\u6267\u884c\u6574\u6570\u4e58\u6cd5\u7684\u529f\u80fd\u5355\u5143\uff0c\u8bf4\u660e\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u6574\u6570\u4e58\u6cd5\uff0c\u6b64\u65f6\u6027\u80fd\u541e\u5410\u91cf\u5c31\u53d7\u5230\u4e86\u529f\u80fd\u5355\u5143\u8fd0\u7b97\u7684\u9650\u5236\uff0cCPE\u503c\u4e3a1.  </p>"},{"location":"CSAPP/5/#_10","title":"\u5904\u7406\u5668\u64cd\u4f5c\u7684\u62bd\u8c61\u6a21\u578b","text":"<p>\u6211\u4eec\u4f7f\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u6d41(data-flow)\u8868\u793a, \u5c55\u793a\u4e86\u4e0d\u540c\u64cd\u4f5c\u4e4b\u95f4\u7684\u6570\u636e\u76f8\u5173\u662f\u5982\u4f55\u9650\u5236\u4ed6\u4eec\u7684\u6267\u884c\u5355\u5143\u7684. \u8fd9\u4e9b\u9650\u5236\u5f62\u6210\u4e86\u56fe\u4e2d\u7684\u5173\u952e\u8def\u5f84(critical path), \u8fd9\u662f\u6267\u884c\u4e00\u7ec4\u673a\u5668\u6307\u4ee4\u6240\u9700\u65f6\u949f\u5468\u671f\u6570\u7684\u4e00\u4e2a\u4e0b\u754c.  </p> <p> \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u770b\u5230\u9664\u4e86\u6574\u6570\u52a0\u6cd5, \u6d4b\u91cf\u503c\u4e0e\u5904\u7406\u5668\u7684\u5ef6\u8fdf\u754c\u9650\u662f\u4e00\u6837\u7684, \u8fd9\u8868\u660e\u8fd9\u4e9b\u51fd\u6570\u7684\u6027\u80fd\u662f\u7531\u6c42\u548c/\u4e58\u79ef\u8fd0\u7b97\u4e3b\u5bfc, \u800c\u4e14\u5b58\u5728\u6570\u636e\u76f8\u5173.</p>"},{"location":"CSAPP/5/#_11","title":"\u4ece\u673a\u5668\u7ea7\u4ee3\u7801\u5230\u6570\u636e\u6d41\u56fe","text":"<p>\u5bf9\u4e8e\u5f62\u6210\u5faa\u73af\u7684\u4ee3\u7801\u7247\u6bb5, \u6211\u4eec\u5c06\u8bbf\u95ee\u5230\u7684\u5bc4\u5b58\u5668\u5206\u4e3a\u56db\u7c7b:  </p> <ul> <li>\u53ea\u8bfb: \u8fd9\u4e9b\u5bc4\u5b58\u5668\u53ea\u7528\u4e8e\u6e90\u503c, \u5728\u5faa\u73af\u4e2d\u4e0d\u4f1a\u88ab\u4fee\u6539.  </li> <li>\u53ea\u5199: \u8fd9\u4e9b\u5bc4\u5b58\u5668\u4f5c\u4e3a\u6570\u636e\u4f20\u9001\u64cd\u4f5c\u7684\u76ee\u7684.  </li> <li>\u5c40\u90e8: \u8fd9\u4e9b\u5bc4\u5b58\u5668\u5728\u5faa\u73af\u5185\u90e8\u88ab\u4fee\u6539\u548c\u4f7f\u7528, \u8fed\u4ee3\u548c\u8fed\u4ee3\u4e4b\u95f4\u4e0d\u76f8\u5173.  </li> <li>\u5faa\u73af: \u5bf9\u5faa\u73af\u6765\u8bf4\u8fd9\u4e9b\u5bc4\u5b58\u5668\u65e2\u4f5c\u4e3a\u6e90\u503c, \u53c8\u4f5c\u4e3a\u76ee\u7684, \u4e00\u6b21\u8fed\u4ee3\u4e2d\u4ea7\u751f\u7684\u503c\u4f1a\u5728\u53e6\u4e00\u6b21\u8fed\u4ee3\u4e2d\u7528\u5230.  </li> </ul> <p>\u4ee5 combine4 \u4e3a\u4f8b</p> <p> \u8f6c\u5316\u4e3a\u6570\u636e\u6d41\u56fe:  \u4e0a\u65b9\u5bc4\u5b58\u5668\u4e3a\u8f93\u5165\u7684\u5bc4\u5b58\u5668\uff0c\u4e0b\u65b9\u5bc4\u5b58\u5668\u4e3a\u8f93\u51fa\u7684\u5bc4\u5b58\u5668\uff0c\u4ece\u5bc4\u5b58\u5668\u6307\u5411\u64cd\u4f5c\u7684\u7bad\u5934\u8868\u793a\u8be5\u64cd\u4f5c\u8bfb\u53d6\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u64cd\u4f5c\u6307\u5411\u5bc4\u5b58\u5668\u8868\u793a\u64cd\u4f5c\u7684\u7ed3\u679c\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u5982\u679c\u67d0\u4e9b\u64cd\u4f5c\u4ea7\u751f\u7684\u503c\u4e0d\u5bf9\u5e94\u4e8e\u4efb\u4f55\u5bc4\u5b58\u5668\uff0c\u5c31\u5728\u64cd\u4f5c\u95f4\u7528\u5f27\u7ebf\u8fde\u63a5\u8d77\u6765\u3002\u5176\u4e2d<code>vmulsd (%rdx), %xmm0, %xmm0</code>\u5305\u542b\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6(%rdx)\u7684\u503c\uff0c\u7136\u540e\u8ba1\u7b97\u6d6e\u70b9\u6570\u4e58\u6cd5\u7684\u57fa\u672c\u64cd\u4f5c. \u5176\u4e2d %rax \u662f\u53ea\u8bfb\u5bc4\u5b58\u5668, %rdx \u548c %xmm0 \u662f\u5faa\u73af\u5bc4\u5b58\u5668.  </p> <p>\u6211\u4eec\u5c06\u6570\u636e\u6d41\u56fe\u505a\u4fee\u6539, \u5220\u9664\u975e\u5faa\u73af\u5bc4\u5b58\u5668\u4ee5\u5916\u7684\u5bc4\u5b58\u5668\uff0c\u5e76\u5220\u9664\u4e0d\u5728\u5faa\u73af\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u64cd\u4f5c\uff0c\u5f97\u5230\u4ee5\u4e0b\u7b80\u5316\u7684\u6570\u636e\u6d41\u56fe.  \u6211\u4eec\u5c06 combine4 \u7684\u5185\u5faa\u73af\u91cd\u590d n \u6b21, \u5373\u53ef\u5f97\u5230\u5faa\u73af\u7684\u6570\u636e\u6d41\u8868\u793a.  \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u6709\u4e24\u6761\u6570\u636e\u76f8\u5173\u94fe. \u5047\u8bbe\u6d6e\u70b9\u4e58\u6cd5\u5ef6\u8fdf\u4e3a 5 \u4e2a\u5468\u671f, \u6574\u6570\u52a0\u6cd5\u5ef6\u8fdf\u4e3a 1 \u4e2a\u5468\u671f, \u90a3\u4e48\u5de6\u8fb9\u7684\u94fe\u4f1a\u6210\u4e3a\u5173\u952e\u8def\u5f84. \u81f3\u5c11\u9700\u8981 5n \u4e2a\u5468\u671f\u6267\u884c.  </p> <p>\u5faa\u73af\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u64cd\u4f5c\u94fe\u51b3\u5b9a\u4e86\u9650\u5236\u6027\u80fd\u7684\u6570\u636e\u76f8\u5173. </p>"},{"location":"CSAPP/5/#_12","title":"\u5176\u4ed6\u6027\u80fd\u56e0\u7d20","text":"<p>\u6570\u636e\u6d41\u4e2d\u7684\u5173\u952e\u8def\u5f84\u53ea\u662f\u63d0\u4f9b\u7a0b\u5e8f\u9700\u8981\u5468\u671f\u6570\u7684\u4e0b\u754c\uff0c\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u56e0\u7d20\u4f1a\u9650\u5236\u6027\u80fd\u3002e.g. combine4 \u4e2d\u5f53\u6211\u4eec\u5c06\u5de6\u4fa7\u7684\u64cd\u4f5c\u53d8\u4e3a\u6574\u6570\u52a0\u6cd5\u65f6\uff0c\u6839\u636e\u6570\u636e\u6d41\u9884\u6d4b\u7684CPE\u5e94\u8be5\u4e3a1\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u91cc\u7684\u64cd\u4f5c\u53d8\u5f97\u5f88\u5feb\uff0c\u4f7f\u5f97\u5176\u4ed6\u64cd\u4f5c\u4f9b\u5e94\u6570\u636e\u7684\u901f\u5ea6\u4e0d\u591f\u5feb\uff0c\u9020\u6210\u5b9e\u9645\u5f97\u5230\u7684CPE\u4e3a1.27.</p> <p>\u7ec3\u4e60\u9898 5.5 &amp; 5.6</p> <p><pre><code>double poly(double a[], double x, long degree)\n{\nlong i;\ndouble result = a[0];\ndouble xpwr = x;\nfor(i=1; i&lt;=degree; i++){\nresult += a[i]*xpwr;\nxpwr = x*xpwr;\n}\nreturn result;\n}\ndouble polyh(double a[], double x, long degree)\n{\nlong i;\ndouble result = a[degree];\nfor(i=degree-1; i&gt;=0; i--){\nresult = a[i]+x*result;\n}\nreturn result;\n}\n</code></pre> \u6211\u4eec\u6d4b\u91cf\u53d1\u73b0 poly \u7684 CPE \u4e3a 5.00, \u4f46 polyh \u7684 CPE \u4e3a 8.00, \u4e3a\u4ec0\u4e48? polyh \u4e0d\u96be\u7406\u89e3, \u56e0\u4e3a\u4e58\u6cd5\u5fc5\u987b\u5728\u52a0\u6cd5\u5b8c\u6210\u540e\u624d\u80fd\u6267\u884c, \u6240\u4ee5\u662f 5+3=8. \u800c poly \u51fd\u6570\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0, <code>a[i] * xpwr</code> \u548c<code>x * xpwe</code> \u7684\u8ba1\u7b97\u548c result \u65e0\u5173, \u6211\u4eec\u53ef\u4ee5\u628a result \u653e\u5728\u4e0b\u4e00\u6b21\u5faa\u73af\u4e2d\u548c\u4e24\u4e2a\u4e58\u6cd5\u5e76\u884c\u8ba1\u7b97, \u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5728\u8fd9\u6b21\u5faa\u73af\u4e2d\u5148\u4e58\u6cd5\u518d\u52a0\u6cd5\u4e86. be like:  \u56e0\u6b64\u5bf9\u4e00\u4e2a\u6570\u636e\u6d41\u56fe, \u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8\u5faa\u73af\u5bc4\u5b58\u5668\u7684\u6570\u636e\u76f8\u5173\u94fe, \u5373\u5b83\u5173\u952e\u8def\u5f84\u4e0a\u7684\u64cd\u4f5c\u6570.</p> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u544a\u8bc9\u6211\u4eec, \u51fd\u6570\u5177\u6709\u66f4\u5c11\u7684\u64cd\u4f5c\u4e0d\u610f\u5473\u7740\u5177\u6709\u66f4\u597d\u7684\u6027\u80fd.</p>"},{"location":"CSAPP/5/#_13","title":"\u5faa\u73af\u5c55\u5f00","text":"<p>\u5faa\u73af\u5c55\u5f00\u662f\u4e00\u79cd\u7a0b\u5e8f\u53d8\u6362, \u901a\u8fc7\u589e\u52a0\u6bcf\u6b21\u8fed\u4ee3\u8ba1\u7b97\u7684\u5143\u7d20\u7684\u6570\u91cf, \u51cf\u5c11\u5faa\u73af\u7684\u8fed\u4ee3\u6b21\u6570. \u5b83\u51cf\u5c11\u4e86\u4e0d\u76f4\u63a5\u6709\u52a9\u4e8e\u7a0b\u5e8f\u7ed3\u679c\u7684\u64cd\u4f5c\u7684\u6570\u91cf, \u4f8b\u5982\u5faa\u73af\u7d22\u5f15\u8ba1\u7b97\u548c\u6761\u4ef6\u5206\u652f; \u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u6765\u8fdb\u4e00\u6b65\u53d8\u5316\u4ee3\u7801, \u51cf\u5c11\u6574\u4e2a\u8ba1\u7b97\u4e2d\u5173\u952e\u8def\u5f84\u4e0a\u7684\u64cd\u4f5c\u6570\u91cf. \u8fd9\u91cc\u4f7f\u7528\u4e00\u79cd\"k*1 \u5faa\u73af\u5c55\u5f00\"\u7684\u65b9\u6cd5, \u7b2c\u4e00\u4e2a\u5faa\u73af\u6bcf\u6b21\u5904\u7406\u6570\u7ec4\u7684 k \u4e2a\u5143\u7d20, \u7b2c\u4e8c\u4e2a\u5faa\u73af\u5904\u7406\u5269\u4e0b\u8fd8\u6ca1\u5904\u7406\u7684\u5143\u7d20(\u56e0\u4e3a\u6570\u7ec4\u957f\u5ea6\u4e0d\u4e00\u5b9a\u662f k \u7684\u500d\u6570).  </p> <p>Example</p> <p><pre><code>// 2 * 1 loop unrolling\nvoid combine5(vec_ptr v, data_t *dest)\n{\nlong i;\nlong length = vec_length(v);\nlong limit = length-1;\ndata_t *data = get_vec_start(v);\ndata_t acc = IDENT;\nfor(i=0; i&lt;limit; i+=2){\nacc = (acc OP data[i]) OP data[i+1];\n}\nfor(; i&lt;length; i++){\nacc = acc OP data[i];\n}\nreturn acc;\n}\n</code></pre>  \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230, \u6574\u6570\u52a0\u6cd5\u7684\u4e00\u4e2a\u5468\u671f\u7684\u5ef6\u8fdf\u6210\u4e3a\u4e86\u9650\u5236\u6027\u80fd\u7684\u56e0\u7d20. \u5f53\u6211\u4eec\u4e0d\u65ad\u589e\u52a0 k \u7684\u5927\u5c0f\u65f6, \u6211\u4eec\u53d1\u73b0 CPE \u7684\u6d4b\u91cf\u503c\u6ca1\u6709\u4e00\u4e2a\u4f4e\u4e8e\u5ef6\u8fdf\u754c\u9650. \u6211\u4eec\u753b\u51fa\u4ed6\u7b80\u5316\u540e\u7684\u6570\u636e\u6d41\u56fe:  \u867d\u7136\u5faa\u73af\u5c55\u5f00\u4e86 2 \u6b21, \u4f46\u5173\u952e\u8def\u5f84\u8fd8\u662f n \u4e2a mul \u64cd\u4f5c.  </p> <p>Info</p> <p>\u7f16\u8bd1\u5668\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u505a\u5230\u5faa\u73af\u5c55\u5f00. \u7528\u4f18\u5316\u7b49\u7ea7 3 \u6216\u66f4\u9ad8\u7b49\u7ea7\u8c03\u7528 GCC, \u5b83\u5c31\u4f1a\u6267\u884c\u5faa\u73af\u5c55\u5f00.</p>"},{"location":"CSAPP/5/#_14","title":"\u63d0\u9ad8\u5e76\u884c\u6027","text":""},{"location":"CSAPP/5/#_15","title":"\u591a\u4e2a\u7d2f\u79ef\u53d8\u91cf","text":"<p>\u5047\u8bbe\u8fd9\u91cc\u6709 \\(a_0,a_1,\\ldots,a_{n-1}\\) \u4e2a\u5143\u7d20, \u6211\u4eec\u8981\u8ba1\u7b97 \\(P_n=\\prod\\limits_{i=0}^{n-1}a_i\\). \u53ef\u4ee5\u901a\u8fc7 \\(PE_n=\\prod\\limits_{i=0}^{n/2-1}a_{2i}\\quad PO_n=\\prod\\limits_{i=0}^{n/2-1}a_{2i+1}\\) \u5219 \\(P_n=PE_n\\times PO_n\\) \u5f97\u5230.</p> <p>\u63a8\u5e7f\u4e0a\u8ff0\u601d\u8def, \u6211\u4eec\u5f97\u5230\u4e00\u79cd \"k*k \u5faa\u73af\u5c55\u5f00\u65b9\u6cd5\"\uff0c\u5c06\u4e00\u4e2a\u5faa\u73af\u5c55\u5f00\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u6bcf\u6b21\u5faa\u73af\u5904\u7406k\u4e2a\u5143\u7d20\uff0c\u80fd\u591f\u51cf\u5c11\u5faa\u73af\u6b21\u6570\uff0c\u5e76\u4e14\u5f15\u5165k\u4e2a\u53d8\u91cf\u4fdd\u5b58\u7ed3\u679c\uff1b\u7b2c\u4e8c\u90e8\u5206\u5904\u7406\u5269\u4e0b\u8fd8\u6ca1\u8ba1\u7b97\u7684\u5143\u7d20\uff0c\u662f\u9010\u4e2a\u8fdb\u884c\u8ba1\u7b97\u7684.  </p> <p>Example</p> <p>``` C // 2 * 2 loop unrolling</p> <p>void combine5(vec_ptr v, data_t dest) {     long i;     long length = vec_length(v);     long limit = length-1;     data_t data = get_vec_start(v);     data_t acc0 = IDENT;     data_t acc1 = IDENT;     for(i=0; i&lt;limit; i+=2){         acc0 = acc0 OP data[i];         acc1 = acc1 OP data[i+1];     }     for(; i&lt;length; i++){         acc0 = acc0 OP data[i];     }     *dest = acc0 OP acc1; } ```  \u6211\u4eec\u53d1\u73b0\u6211\u4eec\u7a81\u7834\u4e86\u5ef6\u8fdf\u754c\u9650. \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u6709\u4e24\u6761\u5173\u952e\u8def\u5f84, \u4e00\u6761\u8ba1\u7b97\u7d22\u5f15\u4e3a\u5076\u6570\u7684\u5143\u7d20(acc0) \u53e6\u4e00\u6761\u8ba1\u7b97\u7d22\u5f15\u4e3a\u5947\u6570\u7684\u5143\u7d20(acc1), \u6bcf\u6761\u5173\u952e\u8def\u5f84\u53ea\u5305\u542b n/2 \u4e2a\u64cd\u4f5c, \u56e0\u6b64\u7406\u60f3\u72b6\u6001\u53ef\u4ee5\u4f7f CPE \u51cf\u534a.  </p> <p>\u5f53 k \u8db3\u591f\u5927\u65f6, \u7a0b\u5e8f\u5728\u6240\u6709\u60c5\u51b5\u51e0\u4e4e\u90fd\u80fd\u8fbe\u5230\u541e\u5410\u91cf\u754c\u9650. \u4e3a\u4e86\u63a5\u8fd1\u541e\u5410\u91cf\u754c\u9650\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u529f\u80fd\u5355\u5143\uff0c\u5e76\u4e14\u4fdd\u8bc1\u529f\u80fd\u5355\u5143\u7684\u6d41\u6c34\u7ebf\u59cb\u7ec8\u662f\u6162\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5bb9\u91cf\u4e3a C\u3001\u5ef6\u8fdf\u4e3a L \u7684\u64cd\u4f5c\u800c\u8a00\uff0c\u9700\u8981\u8bbe\u7f6e \\(k\\geq C\\cdot L\\)(\u6700\u5feb\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c). \u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f, \u6211\u4eec\u9700\u8981\u7533\u8bf7 k \u4e2a\u5c40\u90e8\u53d8\u91cf\u6765\u4fdd\u5b58\u4e2d\u95f4\u7ed3\u679c. \u4f46\u5982\u679c k \u5927\u4e8e\u4e86\u5bc4\u5b58\u5668\u7684\u6570\u76ee, \u7ed3\u679c\u5c31\u4f1a\u88ab\u4fdd\u5b58\u5728\u5806\u6808\u4e2d, \u8fd9\u5c31\u9700\u8981\u6211\u4eec\u53cd\u590d\u8bfb\u5199\u5185\u5b58, \u9020\u6210\u6027\u80fd\u635f\u5931.  </p>"},{"location":"CSAPP/5/#_16","title":"\u91cd\u65b0\u7ed3\u5408\u53d8\u6362","text":"<p>\u6211\u4eec\u6539\u53d8\u5408\u5e76\u6267\u884c\u7684\u65b9\u5f0f, \u4e5f\u80fd\u6781\u5927\u5730\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd.  </p> <p>Example</p> <p>\u6211\u4eec\u5c06 combine5(21 \u5c55\u5f00)\u4e2d<code>acc = (acc OP data[i]) OP data[i+1];</code> \u53d8\u4e3a combine7 \u4e2d\u7684 <code>acc = acc OP (data[i] OP data[i+1];</code> \u8fd9\u79f0\u4e3a \"21a \u5faa\u73af\u5c55\u5f00\", \u6211\u4eec\u89c2\u5bdf\u5b83\u7684\u6027\u80fd, \u53d1\u73b0\u5b83\u4e5f\u7a81\u7834\u4e86\u5ef6\u8fdf\u754c\u9650:  </p> <p> \u5176\u6570\u636e\u6d41\u56fe:  \u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u5173\u952e\u8def\u5f84\u4e0a\u53ea\u6709\u4e00\u4e2a mul (\u53e6\u4e00\u4e2a mul \u53ef\u4ee5\u5229\u7528\u7ec3\u4e60\u9898 5.5 \u7c7b\u4f3c\u7684\u601d\u8def), \u800c\u4e14\u5173\u952e\u8def\u5f84\u4e0a\u53ea\u6709 n/2 \u4e2a\u64cd\u4f5c, \u56e0\u6b64\u6700\u5c0f\u53ef\u80fd\u7684 CPE \u51cf\u534a.  </p>"},{"location":"CSAPP/5/#_17","title":"\u9650\u5236\u56e0\u7d20","text":""},{"location":"CSAPP/5/#_18","title":"\u5bc4\u5b58\u5668\u6ea2\u51fa","text":"<p>\u5982\u679c\u6211\u4eec\u7684\u5e76\u884c\u5ea6 p \u8d85\u8fc7\u4e86\u53ef\u7528\u7684\u5bc4\u5b58\u5668\u7684\u6570\u91cf, \u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u8bc9\u8bf8\u6ea2\u51fa, \u5c06\u67d0\u4e9b\u4e34\u65f6\u4e4b\u5b58\u653e\u5230\u5185\u5b58\u4e2d, \u901a\u5e38\u662f\u5728\u5806\u6808\u4e0a\u5206\u914d\u7a7a\u95f4.</p>"},{"location":"CSAPP/5/#_19","title":"\u5206\u652f\u9884\u6d4b\u548c\u9884\u6d4b\u9519\u8bef\u60e9\u7f5a","text":"<p>\u5f53\u5206\u652f\u9884\u6d4b\u903b\u8f91\u4e0d\u80fd\u6b63\u786e\u9884\u6d4b\u4e00\u4e2a\u5206\u652f\u662f\u5426\u8981\u8df3\u8f6c\u65f6, \u6761\u4ef6\u5206\u652f\u53ef\u80fd\u4f1a\u62db\u81f4\u5f88\u5927\u7684\u9884\u6d4b\u9519\u8bef\u60e9\u7f5a.  </p>"},{"location":"CSAPP/5/#_20","title":"\u4e0d\u8981\u8fc7\u5206\u5173\u5fc3\u53ef\u9884\u6d4b\u7684\u5206\u652f","text":"<p>\u5b9e\u9645\u4e0a, \u73b0\u4ee3\u5904\u7406\u5668\u4e2d\u7684\u5206\u652f\u9884\u6d4b\u903b\u8f91\u975e\u5e38\u5584\u4e8e\u8fa8\u522b\u4e0d\u540c\u5206\u652f\u6307\u4ee4\u7684\u6709\u89c4\u5f8b\u7684\u6a21\u5f0f\u548c\u957f\u671f\u8d8b\u52bf. \u800c\u4e14\u6267\u884c\u8fb9\u754c\u68c0\u6d4b\u6240\u9700\u7684\u989d\u5916\u8fd0\u53ef\u4ee5\u4e0e\u5408\u5e76\u64cd\u4f5c\u5e76\u5b58\u6267\u884c, \u6240\u4ee5\u8fd9\u4e9b\u6c42\u503c\u90fd\u4e0d\u4f1a\u5bf9\u5f62\u6210\u7a0b\u5e8f\u6267\u884c\u4e2d\u5173\u952e\u8def\u5f84\u7684\u6307\u4ee4\u7684\u53d6\u503c\u548c\u5904\u7406\u4ea7\u751f\u592a\u5927\u7684\u5f71\u54cd.  </p>"},{"location":"CSAPP/5/#_21","title":"\u4e66\u5199\u9002\u5408\u4f7f\u7528\u6761\u4ef6\u4f20\u9001\u5b9e\u73b0\u7684\u4ee3\u7801","text":"<p>\u5bf9\u4e8e\u672c\u8d28\u65e0\u6cd5\u9884\u6d4b\u7684\u60c5\u51b5, \u5982\u679c\u7f16\u8bd1\u5668\u80fd\u4ea7\u751f\u4f7f\u7528\u6761\u4ef6\u4f20\u9001\u800c\u4e0d\u662f\u4f7f\u7528\u6761\u4ef6\u63a7\u5236\u8f6c\u79fb\u7684\u4ee3\u7801, \u53ef\u4ee5\u6781\u5927\u5730\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd. \u4f46\u8981\u6ce8\u610f, \u4e0d\u662f\u6240\u6709\u7684\u6761\u4ef6\u884c\u4e3a\u90fd\u80fd\u7528\u6761\u4ef6\u6570\u636e\u4f20\u9001\u6765\u5b9e\u73b0.  </p>"},{"location":"CSAPP/5/#_22","title":"\u7406\u89e3\u5185\u5b58\u6027\u80fd","text":""},{"location":"CSAPP/5/#_23","title":"\u52a0\u8f7d\u7684\u6027\u80fd","text":"<p>\u4e00\u4e2a\u5305\u542b\u52a0\u8f7d\u64cd\u4f5c\u7684\u7a0b\u5e8f\u7684\u6027\u80fd\u65e2\u4f9d\u8d56\u4e8e\u6d41\u6c34\u7ebf\u7684\u80fd\u529b, \u4e5f\u4f9d\u8d56\u4e8e\u52a0\u8f7d\u5355\u5143\u7684\u5ef6\u8fdf. e.g. \u6211\u4eec\u7684\u53c2\u8003\u673a\u5305\u542b\u4e24\u4e2a\u52a0\u8f7d\u529f\u80fd\u5355\u5143\uff0c\u610f\u5473\u7740\u5f53\u6d41\u6c34\u7ebf\u5b8c\u5168\u65f6\uff0c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u6700\u591a\u80fd\u591f\u6267\u884c\u4e24\u4e2a\u52a0\u8f7d\u64cd\u4f5c\uff0c\u7531\u4e8e\u6bcf\u4e2a\u5143\u7d20\u7684\u8ba1\u7b97\u9700\u8981\u52a0\u8f7d\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5CPE\u7684\u6700\u5c0f\u503c\u53ea\u80fd\u662f0.5\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u7684\u8ba1\u7b97\u9700\u8981\u52a0\u8f7dk\u4e2a\u503c\u7684\u5e94\u7528\u800c\u8a00\uff0cCPE\u7684\u6700\u5c0f\u503c\u53ea\u80fd\u662fk/2. \u5728\u4e4b\u524d\u6211\u4eec\u7684\u793a\u4f8b\u4e2d, \u52a0\u8f7d\u64cd\u4f5c\u53ea\u4f9d\u8d56\u5faa\u73af\u7d22\u5f15 i, \u4e0d\u5b58\u5728\u6570\u636e\u76f8\u5173, \u56e0\u6b64\u52a0\u8f7d\u4e0d\u4f1a\u79f0\u4e3a\u5173\u952e\u8def\u5f84\u4e0a\u7684\u64cd\u4f5c.  </p> <p>\u94fe\u8868</p> <p><pre><code>typedef struct ELE {\nstruct ELE *next;\nlong data;\n}list_ele, *list_ptr;\nlong list_len(list_ptr ls) {\nlong len = 0;\nwhile (ls) {\nlen++;\nls = ls -&gt; next;\n}\nreturn len;\n}\n</code></pre> \u5176\u6570\u636e\u6d41\u56fe:  \u56e0\u6b64\u52a0\u8f7d\u64cd\u4f5c\u51fa\u73b0\u5728\u5173\u952e\u8def\u5f84\u4e0a. \u8fd9\u4e2a\u4f8b\u5b50\u6d4b\u51fa CPE \u4e3a 4.0.  </p>"},{"location":"CSAPP/5/#_24","title":"\u5b58\u50a8\u7684\u6027\u80fd","text":"<p>\u5b58\u50a8\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u4efb\u4f55\u5bc4\u5b58\u5668, \u56e0\u6b64\u4e00\u7cfb\u5217\u5b58\u50a8\u64cd\u4f5c\u4e0d\u4f1a\u4ea7\u751f\u6570\u636e\u76f8\u5173. \u53ea\u6709\u52a0\u8f7d\u64cd\u4f5c\u4f1a\u53d7\u5b58\u50a8\u64cd\u4f5c\u5f71\u54cd. \u4e00\u4e2a\u5185\u5b58\u8bfb\u7684\u7ed3\u679c\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u6700\u8fd1\u7684\u5185\u5b58\u5199, \u6211\u4eec\u79f0\u4e4b\u4e3a\u5199/\u8bfb\u76f8\u5173.</p> <p> \u5b58\u50a8\u5355\u5143\u5305\u542b\u4e00\u4e2a\u5b58\u50a8\u7f13\u51b2\u533a, \u5b83\u5305\u542b\u5df2\u7ecf\u88ab\u53d1\u5c04\u5230\u5b58\u50a8\u5355\u5143\u800c\u53c8\u6ca1\u6709\u5b8c\u6210\u7684\u5b58\u50a8\u64cd\u4f5c\u7684\u5730\u5740\u548c\u64cd\u4f5c, \u8fd9\u91cc\u7684\u5b8c\u6210\u5305\u62ec\u66f4\u65b0\u6570\u636e\u9ad8\u901f\u7f13\u5b58. \u5f53\u4e00\u4e2a\u52a0\u8f7d\u64cd\u4f5c\u53d1\u751f\u65f6, \u5b83\u5fc5\u987b\u68c0\u67e5\u5b58\u50a8\u7f13\u51b2\u533a\u4e2d\u7684\u6761\u76ee, \u770b\u662f\u5426\u6709\u5730\u5740\u76f8\u5339\u914d. \u82e5\u6709(\u5b58\u5728\u5199/\u8bfb\u76f8\u5173)\u5c31\u53d6\u51fa\u5bf9\u5e94\u6570\u636e\u6761\u76ee\u4f5c\u4e3a\u52a0\u8f7d\u64cd\u4f5c\u7684\u7ed3\u679c.  </p> <p>Example</p> <p> \u6570\u636e\u6d41\u56fe:  \u6ce8\u610f\u8fd9\u91cc\u7684\u865a\u7ebf\u6307, \u82e5\u5b58\u5728\u6570\u636e\u76f8\u5173, \u9700\u8981\u5c06\u8981\u5b58\u50a8\u7684\u503c\u8f6c\u53d1\u5230\u52a0\u8f7d\u5f53\u4e2d. \u6807\u53f7 1 \u8868\u793a\u5b58\u50a8\u5730\u5740\u5fc5\u987b\u5728\u6570\u636e\u88ab\u5b58\u50a8\u4e4b\u524d\u8ba1\u7b97\u51fa\u6765, 2 \u8868\u793a load \u64cd\u4f5c\u8981\u5c06\u5b83\u7684\u5730\u5740\u548c\u6240\u6709\u672a\u5b8c\u6210\u7684\u5b58\u50a8\u64cd\u4f5c\u7684\u5730\u5740\u6bd4\u8f83, 3 \u8868\u793a\u6570\u636e\u76f8\u5173. \u7b80\u5316\u540e:  \u5f53\u6ca1\u6709\u6570\u636e\u76f8\u5173\u65f6(A), CPE \u4e3a 1.00. \u6570\u636e\u76f8\u5173\u65f6(B), CPE \u4e3a 7.00.  </p>"},{"location":"CSAPP/6/","title":"\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784","text":""},{"location":"CSAPP/6/#_2","title":"\u5b58\u50a8\u6280\u672f","text":""},{"location":"CSAPP/6/#_3","title":"\u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668","text":"<p>\u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668(Random-Access Memory, RAM) \u6839\u636e\u5b58\u50a8\u5355\u5143\u53ef\u5206\u4e3a\u4e24\u7c7b: \u9759\u6001\u7684 RAM(SRAM) \u548c\u52a8\u6001\u7684 RAM(DRAM).  </p> <p></p>"},{"location":"CSAPP/6/#sram","title":"SRAM","text":"<p>SRAM \u5c06\u6bcf\u4e2a\u4f4d\u5b58\u50a8\u5728\u4e00\u4e2a\u53cc\u7a33\u6001(bistable) \u7684\u5b58\u50a8\u5355\u5143\u91cc. \u6bcf\u4e2a\u5355\u5143\u7528\u4e00\u4e2a\u516d\u6676\u4f53\u7ba1\u7535\u8def\u5b9e\u73b0. \u5b83\u53ef\u4ee5\u65e0\u9650\u671f\u5730\u4fdd\u6301\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7535\u538b\u914d\u7f6e\u6216\u8005\u72b6\u6001\u4e4b\u4e00, \u5176\u4ed6\u4efb\u4f55\u72b6\u6001\u90fd\u662f\u4e0d\u7a33\u5b9a\u7684, \u7535\u8def\u4f1a\u8fc5\u901f\u5730\u8f6c\u79fb\u5230\u4e24\u4e2a\u7a33\u5b9a\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a.  \u6ce8: \u5f53\u949f\u6446\u5728\u5782\u76f4\u7684\u4f4d\u7f6e\u65f6, \u5904\u4e8e\u4e9a\u7a33\u6001, \u6700\u7ec6\u5fae\u7684\u6270\u52a8\u4e5f\u80fd\u4f7f\u5b83\u5012\u4e0b, \u4e14\u65e0\u6cd5\u6062\u590d.  </p> <ul> <li>\u7279\u70b9 \u53ea\u8981\u6709\u7535, \u5b83\u5c31\u80fd\u6c38\u8fdc\u4fdd\u6301\u5b83\u7684\u503c, \u5373\u4f7f\u6709\u5e72\u6270\u6765\u6270\u4e71\u7535\u538b, \u5f53\u5e72\u6270\u6d88\u9664\u65f6\u7535\u8def\u5c31\u4f1a\u6062\u590d\u5230\u7a33\u5b9a\u503c.  </li> </ul>"},{"location":"CSAPP/6/#dram","title":"DRAM","text":"<p>DRAM \u5c06\u6bcf\u4e2a\u4f4d\u5b58\u50a8\u4e3a\u5bf9\u4e00\u4e2a\u7535\u5bb9\u7684\u5145\u7535. \u6bcf\u4e2a\u5355\u5143\u7531\u4e00\u4e2a\u7535\u5bb9\u548c\u4e00\u4e2a\u8bbf\u95ee\u6676\u4f53\u7ba1\u7ec4\u6210.  </p> <ul> <li> <p>\u7279\u70b9:</p> <ul> <li>\u6bcf\u4e2a\u7535\u5bb9\u975e\u5e38\u5c0f, \u56e0\u6b64\u53ef\u4ee5 DRAM \u5b58\u50a8\u5668\u53ef\u4ee5\u5236\u9020\u5f97\u975e\u5e38\u5bc6\u96c6.  </li> <li>DRAM \u5b58\u50a8\u5668\u5bf9\u5e72\u6270\u975e\u5e38\u654f\u611f, \u5f53\u7535\u5bb9\u7535\u538b\u88ab\u6270\u4e71\u540e\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u6062\u590d\u4e86. \u66b4\u9732\u5728\u5149\u7ebf\u4e2d\u4f1a\u5bfc\u81f4\u7535\u5bb9\u7535\u538b\u6539\u53d8.   </li> <li>\u5f88\u591a\u539f\u56e0\u4f1a\u5bfc\u81f4\u6f0f\u7535, \u4f7f\u5f97 DRAM \u5355\u5143\u5728 10~100 \u6beb\u79d2\u65f6\u95f4\u5185\u5931\u53bb\u7535\u8377. \u56e0\u6b64\u5185\u5b58\u5fc5\u987b\u5468\u671f\u6027\u5730\u901a\u8fc7\u8bfb\u51fa, \u7136\u540e\u91cd\u5199\u6765\u5237\u65b0\u5185\u5b58\u6bcf\u4e00\u4f4d.  </li> </ul> </li> </ul> <p>\u4f20\u7edf\u7684 DRAM \u82af\u7247\u4e2d\u7684\u5355\u5143(\u4f4d)\u88ab\u5206\u6210 \\(d\\) \u4e2a\u8d85\u5355\u5143(supercell), \u6bcf\u4e2a\u8d85\u5355\u5143\u90fd\u7531 \\(w\\) \u4e2a DRAM \u5355\u5143\u7ec4\u6210. \u4e00\u4e2a \\(d\\times w\\) \u7684 DRAM \u603b\u5171\u5b58\u50a8\u4e86 \\(dw\\) \u4f4d\u4fe1\u606f. \u8d85\u5355\u5143\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a \\(r\\) \u884c \\(c\\) \u5217\u957f\u65b9\u5f62\u9635\u5217, \u8fd9\u91cc \\(rc=d\\). \u4fe1\u606f\u901a\u8fc7\u79f0\u4e3aaddr \u548c data \u5f15\u811a(pin)\u7684\u5916\u90e8\u8fde\u63a5\u5668\u6d41\u5165\u548c\u6d41\u51fa\u82af\u7247. \u6bcf\u4e2a DRAM \u82af\u7247\u88ab\u8fde\u63a5\u5230\u5185\u5b58\u63a7\u5236\u5668\u7684\u7535\u8def, \u8fd9\u4e2a\u7535\u8def\u53ef\u4ee5\u4e00\u6b21\u4f20\u9001 \\(w\\) \u4f4d\u5230\u6bcf\u4e2a DRAM \u82af\u7247\u6216\u4e00\u6b21\u4ece DRAM \u82af\u7247\u4f20\u51fa \\(w\\) \u4f4d. \u4e3a\u4e86\u8bfb\u51fa (i,j) \u7684\u5185\u5bb9, \u5185\u5b58\u63a7\u5236\u5668\u5c06\u884c\u5730\u5740 i \u53d1\u9001\u5230 DRAM, \u7136\u540e\u662f\u5217\u5730\u5740 j. DRAM \u628a\u8d85\u5355\u5143 (i,j) \u7684\u5185\u5bb9\u53d1\u56de\u7ed9\u63a7\u5236\u5668\u4f5c\u4e3a\u76f8\u5e94. \u884c\u5730\u5740 i \u79f0\u4e3aRAS(Row Access Strobe), \u5217\u5730\u5740\u79f0\u4e3a CAS(Column Access Strobe).   </p> <p>\u4e00\u4e2a 128 \u4f4d\u7684 \\(16\\times 8\\) \u7684 DRAM \u82af\u7247</p> <p> \u6709 \\(d=16\\) \u4e2a\u8d85\u5355\u5143, \u6bcf\u4e2a\u8d85\u5355\u5143\u5b58\u50a8 \\(w=8\\) \u4f4d\u4fe1\u606f. \u4f8b\u5982\u6211\u4eec\u8981\u53d6 (2,1) \u7684\u5185\u5bb9, \u5148\u901a\u8fc7 addr \u53d1\u9001\u884c\u5730\u5740 2, DRAM \u4f1a\u5c06\u8be5\u884c\u5185\u5bb9\u590d\u5236\u5230\u4e00\u4e2a\u5185\u90e8\u884c\u7f13\u51b2\u533a, \u63a5\u4e0b\u6765\u53d1\u9001\u5217\u5730\u5740 1, DRAM \u5c06\u8d85\u5355\u5143(2,1) \u53d6\u51fa\u5e76\u901a\u8fc7 data \u53d1\u9001\u56de\u5185\u5b58\u63a7\u5236\u5668.  </p> <p>\u7535\u8def\u8bbe\u8ba1\u8005\u5c06 DRAM \u7ec4\u7ec7\u6210\u4e8c\u7ef4\u9635\u5217\u800c\u4e0d\u662f\u7ebf\u6027\u6570\u7ec4\u7684\u4e00\u4e2a\u539f\u56e0\u662f\u964d\u4f4e\u82af\u7247\u4e0a\u5730\u5740\u5f15\u811a\u7684\u6570\u91cf. i.e. \\(\\max(\\lceil \\log_2{r} \\rceil,\\lceil \\log_2{c} \\rceil)\\) </p> <p>DRAM \u82af\u7247\u5c01\u88c5\u5728\u5185\u5b58\u6a21\u5757\u4e2d, \u5b83\u63d2\u5230\u4e3b\u677f\u7684\u6269\u5c55\u69fd\u4e0a. </p> <p>8 \u4e2a 8M\\(\\times\\)8 \u7684 DRAM \u7ec4\u6210\u7684\u5185\u5b58\u6a21\u5757</p> <p>  \u8981\u4ece\u5185\u5b58\u5730\u5740 A \u53d6\u4e00\u4e2a\u5b57, \u5185\u5b58\u63a7\u5236\u5668\u5c06 A \u8f6c\u5316\u4e3a\u4e00\u4e2a\u8d85\u5355\u5143\u5730\u5740 (i,j), \u5e76\u5c06\u5b83\u53d1\u9001\u5230\u5185\u5b58\u6a21\u5757, \u7136\u540e\u5185\u5b58\u6a21\u5757\u518d\u5c06 i \u548c j \u5e7f\u64ad\u5230\u6bcf\u4e2a DRAM. \u6bcf\u4e2a DRAM \u8f93\u51fa\u5b83\u7684 (i,j) \u8d85\u5355\u5143\u7684 8 \u4f4d\u5185\u5bb9, \u6a21\u5757\u4e2d\u7684\u7535\u8def\u6536\u96c6\u8fd9\u4e9b\u8f93\u51fa\u5e76\u5c06\u5b83\u4eec\u5408\u5e76\u4e3a\u4e00\u4e2a 64 \u4f4d\u7684\u5b57, \u518d\u8fd4\u56de\u5185\u5b58\u63a7\u5236\u5668.  </p> <p>\u6211\u4eec\u53ef\u4ee5\u5c06\u591a\u4e2a\u5185\u5b58\u6a21\u5757\u8fde\u63a5\u5230\u5185\u5b58\u63a7\u5236\u5668, \u805a\u5408\u6210\u4e3b\u5b58. \u8fd9\u79cd\u60c5\u51b5\u4e0b\u5185\u5b58\u63a7\u5236\u5668\u6536\u5230\u5730\u5740 A \u65f6\u4f1a\u5148\u627e\u5230\u5305\u542b\u5730\u5740 A \u7684\u5185\u5b58\u6a21\u5757 A, \u7136\u540e\u6309\u7167\u4e0a\u8ff0\u6b65\u9aa4\u5f97\u5230\u5b57.  </p> <ul> <li>\u589e\u5f3a\u7684 DRAM  <ul> <li>\u5feb\u9875\u6a21\u5f0f DRAM(Fast Page Mode DRAM, FPM DRAM) \u4f20\u7edf\u7684 DRAM \u5c06\u8d85\u5355\u5143\u4e00\u6574\u884c\u590d\u5236\u5230\u5b83\u7684\u5185\u90e8\u884c\u7f13\u51b2\u533a, \u4f7f\u7528\u4e00\u4e2a\u7136\u540e\u4e22\u5f03\u5269\u4f59\u7684. FPM DRAM \u5141\u8bb8\u5bf9\u540c\u4e00\u884c\u8fde\u7eed\u5730\u8bbf\u95ee\u53ef\u4ee5\u76f4\u63a5\u4ece\u884c\u7f13\u51b2\u533a\u5f97\u5230\u670d\u52a1.  </li> <li>\u6269\u5c55\u6570\u636e\u8f93\u51fa\u7684 DRAM(Extended Data Out DRAM, EDO DRAM) FPM DRAM \u7684\u589e\u5f3a\u5f62\u5f0f, \u5141\u8bb8\u5404\u4e2a CAS \u4fe1\u53f7\u5728\u65f6\u95f4\u4e0a\u9760\u5f97\u66f4\u7d27\u5bc6\u4e00\u70b9.  </li> <li>\u540c\u6b65 DRAM(Synchronous DRAM, SDRAM) \u4ed6\u4eec\u4e0e\u5185\u5b58\u63a7\u5236\u5668\u901a\u4fe1\u4f7f\u7528\u4e00\u7ec4\u663e\u5f0f\u7684\u63a7\u5236\u4fe1\u53f7(FPM EDO\u90fd\u662f\u5f02\u6b65\u7684), \u6700\u7ec8\u6548\u679c\u662f SDRAM \u80fd\u6bd4\u5f02\u6b65\u7684\u5b58\u50a8\u5668\u66f4\u5feb\u5730\u8f93\u51fa\u8d85\u5355\u5143\u7684\u5185\u5bb9.  </li> <li>\u53cc\u500d\u6570\u636e\u901f\u7387\u540c\u6b65 DRAM(Double Data-Rate Synchronous DRAM, DDR SDRAM) \u4f7f\u7528\u4e24\u4e2a\u65f6\u949f\u6cbf\u4f5c\u4e3a\u63a7\u5236\u4fe1\u53f7, \u4ece\u800c\u4f7f DRAM \u7684\u901f\u5ea6\u7ffb\u500d.  </li> <li>\u89c6\u9891 RAM(Video RAM, VVRAM) </li> </ul> </li> </ul>"},{"location":"CSAPP/6/#_4","title":"\u975e\u6613\u5931\u5b58\u50a8\u5668","text":"<p>\u5982\u679c\u65ad\u7535, DRAM \u548c SRAM \u4f1a\u4e22\u5931\u4ed6\u4eec\u7684\u4fe1\u606f, \u56e0\u6b64\u4ed6\u4eec\u662f\u6613\u5931\u7684(volatile). \u800c\u975e\u6613\u5931\u5b58\u50a8\u5668(Nonvolatile Memory) \u5373\u4f7f\u65ad\u7535\u4e5f\u80fd\u4fdd\u5b58\u4ed6\u4eec\u7684\u4fe1\u606f, \u8fd9\u7c7b\u5b58\u50a8\u5668\u79f0\u4e3a\u53ea\u8bfb\u5b58\u50a8\u5668(Read-Only Memory, ROM).(\u90e8\u5206\u5b58\u50a8\u5668\u53ef\u4ee5\u8bfb\u5199, \u5386\u53f2\u539f\u56e0\u6211\u4eec\u4fdd\u7559\u540d\u5b57)</p> <ul> <li>PROM(Programmable ROM, \u53ef\u7f16\u7a0bROM): \u53ea\u80fd\u88ab\u7f16\u7a0b\u4e00\u6b21, PROM \u6bcf\u4e2a\u5b58\u50a8\u5668\u5355\u5143\u90fd\u6709\u4e00\u79cd\u7194\u4e1d, \u53ea\u80fd\u7528\u9ad8\u7535\u6d41\u7194\u65ad\u4e00\u6b21.  </li> <li>\u53ef\u64e6\u5199\u53ef\u7f16\u7a0b ROM(Erasable Programmable ROM, EPROM): \u53ef\u4ee5\u6279\u91cf\u64e6\u9664   </li> <li>\u95ea\u5b58(Flash Memory): \u5177\u6709\u90e8\u5206(\u5757\u7ea7)\u64e6\u9664\u529f\u80fd, \u5927\u7ea6\u64e6\u9664\u5341\u4e07\u6b21\u540e\u4f1a\u8017\u5c3d \u5b58\u50a8\u5728 ROM \u8bbe\u5907\u4e2d\u7684\u7a0b\u5e8f\u79f0\u4e3a\u56fa\u4ef6(firmware). \u5f53\u4e00\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u901a\u7535\u540e, \u5b83\u4f1a\u8fd0\u884c\u5b58\u50a8\u5728 ROM \u4e2d\u7684\u56fa\u4ef6.  </li> </ul>"},{"location":"CSAPP/6/#_5","title":"\u8bbf\u95ee\u4e3b\u5b58","text":"<p>\u6570\u636e\u6d41\u901a\u8fc7 \u603b\u7ebf(bus) \u7684\u5171\u4eab\u7535\u5b50\u7535\u8def\u5728\u5904\u7406\u5668\u548c DRAM \u4e3b\u5b58\u4e4b\u95f4\u6765\u56de\u56de\u4f20\u9012\u6570\u636e. \u6bcf\u6b21 CPU \u548c\u4e3b\u5b58\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u9001\u90fd\u662f\u901a\u8fc7\u603b\u7ebf\u4e8b\u52a1(bus transaction)\u6765\u5b8c\u6210. \u603b\u7ebf\u662f\u4e00\u7ec4\u5e76\u884c\u7684\u5bfc\u7ebf, \u80fd\u643a\u5e26\u5730\u5740, \u6570\u636e\u548c\u63a7\u5236\u4fe1\u53f7.  </p> <p>\u5176\u4e2d I/O \u6865\u63a5\u5668\u4e2d\u5305\u62ec\u5185\u5b58\u63a7\u5236\u5668, \u80fd\u591f\u5c06\u7cfb\u7edf\u603b\u7ebf\u7684\u7535\u5b50\u4fe1\u53f7\u548c\u5185\u5b58\u603b\u7ebf\u7684\u7535\u5b50\u4fe1\u53f7\u4e92\u76f8\u7ffb\u8bd1, \u4e5f\u80fd\u5c06\u7cfb\u7edf\u603b\u7ebf\u548c\u5185\u5b58\u603b\u7ebf\u8fde\u63a5\u5230I/O\u603b\u7ebf.  </p> <p>\u8bfb\u4e8b\u52a1&amp;\u5199\u4e8b\u52a1</p> <p>\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u6570\u636e\u5230\u5bc4\u5b58\u5668: <code>movq A, %rax</code> </p> <ul> <li>CPU \u5c06 \u5730\u5740 A \u653e\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a, I/O \u6865\u5c06\u4fe1\u53f7\u4f20\u9012\u5230\u5185\u5b58\u603b\u7ebf.  </li> <li>\u4e3b\u5b58\u611f\u77e5\u5230\u5185\u5b58\u603b\u7ebf\u4e0a\u7684\u5730\u5740\u4fe1\u53f7, \u4ece\u5185\u5b58\u603b\u7ebf\u8bfb\u5730\u5740, \u4ece DRAM \u53d6\u51fa\u6570\u636e\u5b57, \u5e76\u5c06\u6570\u636e\u5199\u5230\u5185\u5b58\u603b\u7ebf. I/O \u603b\u7ebf\u5c06\u5185\u5b58\u603b\u7ebf\u4fe1\u53f7\u7ffb\u8bd1\u6210\u7cfb\u7edf\u603b\u7ebf\u4fe1\u53f7, \u7136\u540e\u6cbf\u7740\u7cfb\u7edf\u603b\u7ebf\u4f20\u9012.  </li> <li>CPU \u611f\u77e5\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a\u7684\u6570\u636e, \u4ece\u603b\u7ebf\u4e0a\u8bfb\u6570\u636e, \u5e76\u5c06\u6570\u636e\u590d\u5236\u5230\u5bc4\u5b58\u5668 %rax. </li> </ul> <p>\u5199\u5185\u5b58\u7c7b\u4f3c: </p>"},{"location":"CSAPP/6/#_6","title":"\u78c1\u76d8\u5b58\u50a8","text":"<p>\u78c1\u76d8(disk) \u662f\u5e7f\u4e3a\u5e94\u7528\u7684\u4fdd\u5b58\u5927\u91cf\u6570\u636e\u7684\u5b58\u50a8\u8bbe\u5907, \u5b58\u50a8\u6570\u636e\u7684\u6570\u91cf\u7ea7\u53ef\u4ee5\u8fbe\u5230\u51e0\u767e\u5230\u51e0\u5343\u5343\u5146\u5b57\u8282.  </p>"},{"location":"CSAPP/6/#_7","title":"\u78c1\u76d8\u6784\u9020","text":"<p>\u78c1\u76d8\u662f\u7531 \u76d8\u7247(platter) \u6784\u6210\u7684, \u6bcf\u4e2a\u76d8\u7247\u6709\u4e24\u4e2a\u8868\u9762. \u8868\u9762\u8986\u76d6\u7740\u78c1\u6027\u8bb0\u5f55\u6750\u6599. \u76d8\u7247\u4e2d\u592e\u6709\u4e00\u4e2a\u53ef\u4ee5\u65cb\u8f6c\u7684\u4e3b\u8f74(spindle), \u5b83\u4f7f\u5f97\u76d8\u7247\u4ee5\u56fa\u5b9a\u7684\u65cb\u8f6c\u901f\u7387\u65cb\u8f6c. \u6bcf\u4e2a\u8868\u9762\u662f\u7531\u4e00\u7ec4 \u78c1\u9053(track) \u7684\u540c\u5fc3\u5706\u7ec4\u6210\u7684. \u6bcf\u4e2a\u78c1\u9053\u88ab\u5212\u5206\u4e3a\u4e00\u7ec4\u6247\u533a(sector). \u6bcf\u4e2a\u6247\u533a\u5305\u542b\u76f8\u7b49\u6570\u91cf\u7684\u6570\u636e\u4f4d(\u901a\u5e38\u662f 512 \u5b57\u8282). \u6247\u533a\u4e4b\u95f4\u7531\u4e00\u4e9b\u95f4\u9699\u5206\u9694\u5f00, \u95f4\u9699\u4e0d\u5b58\u50a8\u6570\u636e\u4f4d, \u95f4\u9699\u5b58\u50a8\u7528\u6765\u6807\u8bc6\u6247\u533a\u7684\u683c\u5f0f\u5316\u4f4d. \u901a\u5e38\u4f7f\u7528 \u67f1\u9762(cyclinder) \u6765\u63cf\u8ff0\u591a\u4e2a\u76d8\u7247\u9a71\u52a8\u5668\u7684\u6784\u9020, \u67f1\u9762\u662f\u6240\u6709\u76d8\u7247\u8868\u9762\u4e0a\u5230\u4e3b\u8f74\u4e2d\u5fc3\u7684\u8ddd\u79bb\u76f8\u7b49\u7684\u78c1\u9053\u7684\u96c6\u5408.  </p> <p> </p>"},{"location":"CSAPP/6/#_8","title":"\u78c1\u76d8\u5bb9\u91cf","text":"<p>\u4e00\u4e2a\u78c1\u76d8\u4e0a\u53ef\u4ee5\u8bb0\u5f55\u7684\u6700\u5927\u4f4d\u6570\u79f0\u4e3a\u4ed6\u7684\u6700\u5927\u5bb9\u91cf, \u4e3b\u8981\u7531\u4e0b\u5217\u6280\u672f\u56e0\u7d20\u51b3\u5b9a:  </p> <ul> <li>\u8bb0\u5f55\u5bc6\u5ea6(\u4f4d/\u82f1\u5bf8): \u78c1\u9053\u4e00\u82f1\u5bf8\u7684\u6bb5\u4e2d\u53ef\u4ee5\u653e\u5165\u7684\u4f4d\u6570.  </li> <li>\u78c1\u9053\u5bc6\u5ea6(\u9053/\u82f1\u5bf8): \u4ece\u76d8\u7247\u4e2d\u5fc3\u51fa\u53d1\u534a\u5f84\u4e0a\u4e00\u82f1\u5bf8\u7684\u6bb5\u5185\u53ef\u4ee5\u6709\u7684\u78c1\u9053\u6570.  </li> <li>\u9762\u5bc6\u5ea6(\u4f4d/\u5e73\u65b9\u82f1\u5c3a): \u8bb0\u5f55\u5bc6\u5ea6\u4e0e\u78c1\u9053\u5bc6\u5ea6\u7684\u4e58\u79ef.  </li> </ul> <p>\u4e3a\u4e86\u4fdd\u6301\u6bcf\u4e2a\u78c1\u9053\u6709\u56fa\u5b9a\u7684\u6247\u533a\u6570, \u8d8a\u5f80\u5916\u7684\u78c1\u9053\u6247\u533a\u9694\u5f97\u8d8a\u5f00. \u73b0\u4ee3\u5927\u5bb9\u91cf\u78c1\u76d8\u4f7f\u7528\u4e00\u79cd\u591a\u533a\u8bb0\u5f55\u7684\u6280\u672f, \u67f1\u9762\u7684\u96c6\u5408\u88ab\u5206\u5272\u6210\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6\u5408, \u79f0\u4e3a\u8bb0\u5f55\u533a. \u78c1\u76d8\u5bb9\u91cf\u8ba1\u7b97\u516c\u5f0f: </p>"},{"location":"CSAPP/6/#_9","title":"\u78c1\u76d8\u64cd\u4f5c","text":"<p>\u78c1\u76d8\u7528\u8bfb/\u5199\u5934\u6765\u8bfb\u5199\u5b58\u50a8\u5728\u78c1\u6027\u8868\u9762\u7684\u4f4d, \u800c\u8bfb\u5199\u5934\u8fde\u63a5\u5230\u4e00\u4e2a\u4f20\u52a8\u81c2\u4e00\u7aef. \u78c1\u76d8\u4ee5\u6247\u533a\u5927\u5c0f\u7684\u5757\u6765\u8bfb\u5199\u6570\u636e, \u5bf9\u6247\u533a\u7684\u8bbf\u95ee\u65f6\u95f4\u6709\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u7ec4\u6210:  </p> <ul> <li>\u5bfb\u9053\u65f6\u95f4: \u4e3a\u4e86\u8bfb\u53d6\u67d0\u4e2a\u76ee\u6807\u6247\u533a\u7684\u5185\u5bb9, \u4f20\u9001\u81c2\u9996\u5148\u5c06\u8bfb/\u5199\u5934\u5b9a\u4f4d\u5230\u5305\u542b\u76ee\u6807\u6247\u533a\u7684\u78c1\u9053\u4e0a. \u79fb\u52a8\u4f20\u9001\u81c2\u7684\u65f6\u95f4\u79f0\u4e3a\u5bfb\u9053\u65f6\u95f4. \u5bfb\u9053\u65f6\u95f4 \\(T_{seek}\\) \u4f9d\u8d56\u4e8e\u8bfb/\u5199\u5934\u4ee5\u524d\u7684\u4f4d\u7f6e\u548c\u4f20\u9001\u81c2\u5728\u76d8\u9762\u4e0a\u79fb\u52a8\u7684\u901f\u5ea6.  </li> <li>\u65cb\u8f6c\u65f6\u95f4: \u8bfb/\u5199\u5934\u5230\u671f\u671b\u7684\u78c1\u9053\u540e, \u9a71\u52a8\u5668\u7b49\u5f85\u76ee\u6807\u6247\u533a\u7684\u7b2c\u4e00\u4e2a\u4f4d\u65cb\u8f6c\u5230\u8bfb/\u5199\u5934\u4e0b. \u8fd9\u4e2a\u6b65\u9aa4\u7684\u6027\u80fd\u4f9d\u8d56\u4e8e\u8bfb/\u5199\u5934\u5230\u8fbe\u76ee\u6807\u6247\u533a\u76d8\u9762\u7684\u4f4d\u7f6e\u4ee5\u53ca\u78c1\u76d8\u7684\u65cb\u8f6c\u901f\u5ea6. \u6700\u5927\u65cb\u8f6c\u5ef6\u8fdf \\(T_{max_rotation}=\\frac{1}{RPM}\\times \\frac{60s}{1min}\\)(\u6574\u5468\u671f), \u5e73\u5747\u65cb\u8f6c\u65f6\u95f4\u662f\u6700\u5927\u5ef6\u8fdf\u7684\u4e00\u534a.    </li> <li>\u4f20\u9001\u65f6\u95f4: \u5f53\u8bfb/\u5199\u5934\u5904\u4e8e\u76ee\u6807\u6247\u533a\u7684\u7b2c\u4e00\u4f4d\u65f6, \u5c31\u53ef\u4ee5\u8fdb\u884c\u4f20\u9001\u4e86. \u4e00\u4e2a\u6247\u533a\u7684\u4f20\u9001\u65f6\u95f4\u4f9d\u8d56\u4e8e\u65cb\u8f6c\u901f\u5ea6\u548c\u6bcf\u6761\u78c1\u9053\u7684\u6247\u533a\u6570\u76ee. \\(T_{avg\\_transfer}=\\frac{1}{RPM}\\times \\frac{1}{\u5e73\u5747\u6247\u533a\u6570/\u78c1\u9053}\\times \\frac{60s}{1min}\\)</li> </ul> <p>\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0, \u5bfb\u9053\u65f6\u95f4\u548c\u65cb\u8f6c\u65f6\u95f4\u662f\u4e3b\u8981\u7684\u5f71\u54cd\u90e8\u5206, \u800c\u4e14\u4e24\u8005\u5927\u81f4\u76f8\u7b49, \u53ef\u4ee5\u636e\u6b64\u4f30\u8ba1\u4f7f\u7528\u65f6\u95f4.  </p>"},{"location":"CSAPP/6/#_10","title":"\u903b\u8f91\u78c1\u76d8\u5757","text":"<p>\u4e3a\u4e86\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u9690\u85cf\u590d\u6742\u6027, \u73b0\u4ee3\u78c1\u76d8\u5c06\u5b83\u4eec\u7684\u6784\u9020\u5448\u73b0\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u89c6\u56fe, \u4e00\u5171 B \u4e2a\u6247\u533a\u5927\u5c0f\u7684\u903b\u8f91\u5757\u7684\u5e8f\u5217, \u7f16\u53f7\u4e3a \\(0,1,\\ldots,B-1\\). \u78c1\u76d8\u5c01\u88c5\u4e2d\u6709\u4e00\u4e2a\u5c0f\u7684\u786c\u4ef6/\u56fa\u4ef6\u8bbe\u5907, \u79f0\u4e3a\u78c1\u76d8\u63a7\u5236\u5668, \u7ef4\u62a4\u903b\u8f91\u5757\u53f7\u548c\u5b9e\u9645\u78c1\u76d8\u6247\u533a\u7684\u6620\u5c04\u5173\u7cfb. \u5f53\u64cd\u4f5c\u7cfb\u7edf\u60f3\u8981\u6267\u884c\u4e00\u4e2a I/O \u64cd\u4f5c\u65f6, \u5982\u4ece\u78c1\u76d8\u8bfb\u53d6\u6570\u636e\u5230\u4e3b\u5b58:  </p> <ul> <li>\u64cd\u4f5c\u7cfb\u7edf\u53d1\u9001\u4e00\u4e2a\u547d\u4ee4\u9053\u78c1\u76d8\u63a7\u5236\u5668, \u8ba9\u5b83\u8bfb\u67d0\u4e2a\u903b\u8f91\u5757\u53f7.  </li> <li>\u786c\u76d8\u63a7\u5236\u5668\u4e0a\u7684\u56fa\u4ef6\u6267\u884c\u5feb\u901f\u8868\u67e5\u627e, \u4f7f\u5f97\u8be5\u903b\u8f91\u5757\u53f7\u7ffb\u8bd1\u6210\u4e00\u4e2a\u4e09\u5143\u7ec4 (\u76d8\u9762, \u78c1\u9053, \u6247\u533a) \u7684\u4e09\u5143\u7ec4  </li> <li>\u78c1\u76d8\u63a7\u5236\u5668\u89e3\u91ca\u4e09\u5143\u7ec4\u4fe1\u606f, \u5c06\u8bfb/\u5199\u5934\u79fb\u52a8\u5230\u5bf9\u5e94\u7684\u6247\u533a  </li> <li>\u5c06\u8bfb\u53d6\u5230\u7684\u4fe1\u606f\u653e\u5230\u78c1\u76d8\u63a7\u5236\u5668\u7684\u7f13\u51b2\u533a\u4e2d  </li> <li>\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u590d\u5236\u5230\u4e3b\u5b58\u4e2d  </li> </ul> <p>\u78c1\u76d8\u683c\u5f0f\u5316</p> <p>\u78c1\u76d8\u63a7\u5236\u5668\u5fc5\u987b\u5bf9\u78c1\u76d8\u8fdb\u884c\u683c\u5f0f\u5316, \u7136\u540e\u624d\u80fd\u5728\u8be5\u78c1\u76d8\u4e0a\u5b58\u50a8\u6570\u636e. \u683c\u5f0f\u5316\u5305\u62ec:  </p> <ul> <li>\u7528\u6807\u8bc6\u6247\u533a\u7684\u4fe1\u606f\u586b\u5199\u6247\u533a\u4e4b\u95f4\u7684\u95f4\u9699  </li> <li>\u6807\u8bc6\u51fa\u8868\u9762\u6709\u6545\u969c\u7684\u67f1\u9762\u5e76\u4e14\u4e0d\u4f7f\u7528\u4ed6\u4eec  </li> <li>\u5728\u6bcf\u4e2a\u533a\u4e2d\u9884\u7559\u51fa\u4e00\u7ec4\u67f1\u9762\u4f5c\u4e3a\u5907\u7528(\u56e0\u6b64\u683c\u5f0f\u5316\u5bb9\u91cf\u6bd4\u6700\u5927\u5bb9\u91cf\u8981\u5c0f)  </li> </ul>"},{"location":"CSAPP/6/#io","title":"\u8fde\u63a5 I/O \u8bbe\u5907","text":"<p>\u5982\u4e0a\u56fe, \u56fe\u5f62\u5361/\u76d1\u89c6\u5668/\u9f20\u6807/\u952e\u76d8/\u78c1\u76d8\u8fd9\u6837\u7684\u8f93\u5165/\u8f93\u51fa(I/O)\u8bbe\u5907, \u90fd\u662f\u901a\u8fc7 I/O \u603b\u7ebf\u8fde\u63a5\u5230 CPU \u548c\u4e3b\u5b58.  </p> <ul> <li>\u901a\u7528\u4e32\u884c(Universal Serial Bus, USB)\u63a7\u5236\u5668\u662f\u4e00\u4e2a\u8fde\u63a5\u5230 USB \u603b\u7ebf\u7684\u8bbe\u5907\u7684\u4e2d\u8f6c\u673a\u6784, USB \u603b\u7ebf\u662f\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u6807\u51c6, \u8fde\u63a5\u5404\u79cd\u5916\u56f4 I/O \u8bbe\u5907.  </li> <li>\u56fe\u5f62\u5361(\u6216\u9002\u914d\u5668) \u5305\u542b\u786c\u4ef6\u548c\u8f6f\u4ef6\u903b\u8f91, \u5b83\u4eec\u8d1f\u8d23\u4ee3\u8868 CPU \u5728\u663e\u793a\u5668\u4e0a\u9762\u753b\u50cf\u7d20.  </li> <li>\u4e3b\u673a\u603b\u7ebf\u9002\u914d\u5668\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u78c1\u76d8\u8fde\u63a5\u5230 I/O \u603b\u7ebf, \u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u7279\u522b\u7684\u4e3b\u673a\u603b\u7ebf\u63a5\u53e3\u5b9a\u4e49\u7684\u901a\u4fe1\u534f\u8bae.  </li> <li>\u7f51\u7edc\u9002\u914d\u5668: \u53ef\u4ee5\u901a\u8fc7\u5c06\u9002\u914d\u5668\u63d2\u5165\u4e3b\u677f\u4e0a\u7a7a\u7684\u6269\u5c55\u69fd\u4e2d, \u4ece\u800c\u8fde\u63a5\u5230 I/O \u603b\u7ebf.  </li> </ul>"},{"location":"CSAPP/6/#_11","title":"\u8bbf\u95ee\u78c1\u76d8","text":"<p>CPU \u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a \u5185\u5b58\u6620\u5c04I/O \u7684\u6280\u672f\u6765\u5411 I/O \u8bbe\u5907\u53d1\u5c04\u547d\u4ee4, \u5730\u5740\u7a7a\u95f4\u4e2d\u6709\u4e00\u5757\u5730\u5740\u662f\u4e3a\u4e0e I/O \u8bbe\u5907\u901a\u4fe1\u4fdd\u7559\u7684. \u6bcf\u4e2a\u8fd9\u6837\u7684\u5730\u5740\u79f0\u4e3a\u4e00\u4e2a I/O \u7aef\u53e3. \u8bbe\u5907\u53ef\u4ee5\u81ea\u5df1\u6267\u884c\u8bfb\u6216\u8005\u5199\u603b\u7ebf\u4e8b\u52a1\u800c\u4e0d\u9700\u8981 CPU \u5e72\u6d89\u7684\u8fc7\u7a0b, \u79f0\u4e3a\u76f4\u63a5\u5185\u5b58\u8bbf\u95ee(Direct Memory Access, DMA), \u8fd9\u79cd\u6570\u636e\u4f20\u9001\u79f0\u4e3a DMA \u4f20\u9001.</p> <p>\u78c1\u76d8\u8bfb\u53d6</p> <p>\u5047\u8bbe\u78c1\u76d8\u63a7\u5236\u5668\u6620\u5c04\u5230\u7aef\u53e3<code>0xa0</code>.  </p> <ul> <li> <p>CPU\u4f1a\u901a\u8fc7\u5bf9\u5730\u5740 0xa0 \u6267\u884c\u4e09\u4e2a\u5b58\u50a8\u6307\u4ee4\uff0c\u5c06\u5730\u5740 0xa0 \u7684\u5185\u5bb9\u4fdd\u5b58\u5230\u5185\u5b58\u4e2d\uff0c\u5b8c\u6210\u5bf9\u78c1\u76d8\u7684\u8bfb\u53d6\u3002\u53d1\u9001\u5b8c\u6307\u4ee4\u540e\uff0c\u7531\u4e8e\u78c1\u76d8\u8bfb\u53d6\u901f\u5ea6\u6bd4 CPU \u6267\u884c\u901f\u5ea6\u6162\u5f88\u591a\uff0c\u6240\u4ee5 CPU \u4f1a\u5148\u53bb\u6267\u884c\u5176\u4ed6\u5de5\u4f5c.</p> <ul> <li>\u6307\u4ee41\uff1a\u53d1\u9001\u4e00\u4e2a\u547d\u4ee4\u5b57\uff0c\u544a\u8bc9\u78c1\u76d8\u53d1\u8d77\u4e00\u4e2a Read</li> <li>\u6307\u4ee42\uff1a\u6307\u660e\u5e94\u8be5\u8bfb\u53d6\u7684\u903b\u8f91\u5757\u53f7</li> <li>\u6307\u4ee43\uff1a\u6307\u660e\u4fdd\u5b58\u7684\u5185\u5b58\u5730\u5740</li> </ul> </li> <li> <p>\u78c1\u76d8\u63a7\u5236\u5668\u63a5\u6536\u5230Read\u547d\u4ee4\u540e\uff0c\u4f1a\u901a\u8fc7\u4e0a\u8ff0\u65b9\u6cd5\u76f4\u63a5\u5c06\u78c1\u76d8\u5185\u5bb9\u4f20\u9001\u5230\u4e3b\u5b58\u4e2d.(DMA \u4f20\u9001)  </p> </li> <li>\u78c1\u76d8\u53d1\u9001\u5b8c\u6570\u636e\u540e\uff0c\u4f1a\u7ed9 CPU \u53d1\u9001\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\uff0c\u6682\u505c CPU \u6b63\u5728\u505a\u7684\u5de5\u4f5c\uff0c\u7136\u540e\u5c06\u63a7\u5236\u8fd4\u56de\u5230 CPU \u88ab\u4e2d\u65ad\u7684\u5730\u65b9.  </li> </ul>"},{"location":"CSAPP/6/#_12","title":"\u56fa\u6001\u786c\u76d8","text":"<p>\u56fa\u6001\u786c\u76d8(Solid State Disk, SSD) \u662f\u4e00\u79cd\u57fa\u4e8e\u95ea\u5b58\u7684\u5b58\u50a8\u6280\u672f. SSD \u5c01\u88c5\u63d2\u5728 I/O \u603b\u7ebf\u4e0a\u6807\u51c6\u786c\u76d8\u63d2\u69fd, \u884c\u4e3a\u5c31\u548c\u5176\u4ed6\u786c\u76d8\u4e00\u6837.   \u4e0a\u56fe\u662f\u5178\u578b SSD \u7684\u6027\u80fd\u7279\u5f81. \u5b83\u7531\u95ea\u5b58\u548c\u95ea\u5b58\u7ffb\u8bd1\u5c42\u7ec4\u6210.  </p> <ul> <li>\u95ea\u5b58\u7ffb\u8bd1\u5c42: \u662f\u4e00\u4e2a\u786c\u4ef6/\u56fa\u4ef6\u8bbe\u5907, \u626e\u6f14\u4e0e\u78c1\u76d8\u63a7\u5236\u5668\u76f8\u540c\u7684\u89d2\u8272, \u5c06\u5bf9\u903b\u8f91\u5757\u7684\u8bf7\u6c42\u7ffb\u8bd1\u6210\u5bf9\u5e95\u5c42\u7269\u7406\u8bbe\u5907\u7684\u8bbf\u95ee.  </li> <li>\u95ea\u5b58: \u95ea\u5b58\u7684\u57fa\u672c\u5c5e\u6027\u51b3\u5b9a\u4e86 SSD \u968f\u673a\u8bfb\u5199\u7684\u6027\u80fd, \u901a\u5e38\u7531 B \u4e2a\u5757\u7684\u5e8f\u5217\u7ec4\u6210, \u6bcf\u4e2a\u5757\u7531 P \u9875\u7ec4\u6210, \u9875\u4f5c\u4e3a\u6570\u636e\u7684\u5355\u4f4d\u8fdb\u884c\u8bfb\u5199. \u901a\u5e38\u9875\u5927\u5c0f\u4e3a 512 \u5b57\u8282-4KB\uff0c\u5757\u4e2d\u5305\u542b 32-128 \u9875, \u5219\u5757\u7684\u5927\u5c0f\u6709 16KB-512KB.  </li> </ul> <p>\u53ea\u6709\u5728\u4e00\u9875\u6240\u5c5e\u7684\u5757\u6574\u4e2a\u88ab\u64e6\u9664\u4e4b\u540e, \u624d\u80fd\u5199\u8fd9\u4e00\u9875. \u56e0\u6b64\u8bfb SSD \u6bd4\u5199\u8981\u5feb. \u968f\u673a\u5199\u5f88\u6162, \u56e0\u4e3a\u64e6\u9664\u5757\u9700\u8981\u76f8\u5bf9\u8f83\u957f\u7684\u65f6\u95f4, \u800c\u4e14\u5982\u679c\u5199\u64cd\u4f5c\u8bd5\u56fe\u4fee\u6539\u4e00\u4e2a\u5305\u542b\u5df2\u7ecf\u6709\u6570\u636e\u7684\u9875 p, \u90a3\u4e48\u8fd9\u4e2a\u5757\u79cd\u6240\u6709\u5e26\u6709\u7528\u6570\u636e\u7684\u9875\u5fc5\u987b\u88ab\u590d\u5236\u5230\u4e00\u4e2a\u65b0(\u64e6\u9664\u8fc7\u7684)\u5757. \u95ea\u5b58\u5757\u4f1a\u78e8\u635f, \u6240\u4ee5 SSD \u4e5f\u5bb9\u6613\u78e8\u635f. \u95ea\u5b58\u7ffb\u8bd1\u5c42\u4e2d\u7684\u5e73\u5747\u78e8\u635f\u903b\u8f91\u8bd5\u56fe\u901a\u8fc7\u5c06\u64e6\u9664\u5e73\u5747\u5206\u5e03\u5728\u6240\u6709\u7684\u5757\u4e0a\u6765\u6700\u5927\u5316\u6bcf\u4e2a\u5757\u7684\u5bff\u547d.  </p> <p>SSD\u7684\u4f18\u7f3a\u70b9\uff1a</p> <ul> <li>\u4f18\u70b9: \u7531\u4e8e\u95ea\u5b58\u662f\u534a\u5bfc\u4f53\u5b58\u50a8\u5668\uff0c\u6ca1\u6709\u79fb\u52a8\u7684\u90e8\u4ef6\uff0c\u6240\u4ee5\u901f\u5ea6\u6bd4\u78c1\u76d8\u66f4\u5feb\u4e14\u78e8\u635f\u5c0f\uff0c\u80fd\u8017\u4f4e.  </li> <li>\u7f3a\u70b9: SSD\u6bcf\u5b57\u8282\u6bd4\u78c1\u76d8\u8d35\u5927\u7ea630\u500d\uff0c\u6240\u4ee5\u5e38\u7528\u7684\u5b58\u50a8\u5bb9\u91cf\u6bd4\u78c1\u76d8\u5c0f100\u500d\u5de6\u53f3.  </li> </ul>"},{"location":"CSAPP/6/#_13","title":"\u5b58\u50a8\u6280\u672f\u8d8b\u52bf","text":"<ul> <li>\u4e0d\u540c\u7684\u5b58\u50a8\u6280\u672f\u6709\u4e0d\u540c\u7684\u4ef7\u683c\u548c\u6027\u80fd\u6298\u4e2d. SRAM \u6bd4 DRAM \u5feb\u4e00\u70b9, \u800c DRAM \u6bd4 \u78c1\u76d8\u5757\u5f88\u591a. \u53e6\u4e00\u65b9\u9762, \u5feb\u901f\u5b58\u50a8\u603b\u662f\u6bd4\u6162\u901f\u5b58\u50a8\u8981\u8d35\u7684.  </li> <li>\u4e0d\u540c\u5b58\u50a8\u6280\u672f\u7684\u4ef7\u683c\u548c\u6027\u80fd\u5c5e\u6027\u4ee5\u622a\u7136\u4e0d\u540c\u7684\u5c5e\u6027\u53d8\u5316\u7740 </li> </ul> <p>DRAM \u548c\u78c1\u76d8\u7684\u6027\u80fd\u6ede\u540e\u4e8e CPU \u7684\u6027\u80fd. \u800cSRAM\u7684\u6027\u80fd\u867d\u7136\u4e5f\u6ede\u540e\u4e8eCPU\u6027\u80fd, \u4f46\u662f\u8fd8\u4fdd\u6301\u589e\u957f, \u6240\u4ee5\u73b0\u4ee3\u8ba1\u7b97\u673a\u4f1a\u4f7f\u7528\u57fa\u4e8eSRAM\u7684\u9ad8\u901f\u7f13\u5b58, \u6765\u5f25\u8865CPU\u548c\u5185\u5b58\u4e4b\u95f4\u7684\u5dee\u8ddd.  </p>"},{"location":"CSAPP/6/#_14","title":"\u5c40\u90e8\u6027","text":"<p>\u5177\u6709\u826f\u597d\u5c40\u90e8\u6027(locality) \u7684\u7a0b\u5e8f, \u5373\u5b83\u4eec\u503e\u5411\u4e8e\u5f15\u7528\u6700\u8fd1\u5f15\u7528\u8fc7\u7684\u6570\u636e\u9879\u5468\u56f4\u7684\u6570\u636e\u9879, \u6216\u8005\u6700\u8fd1\u5f15\u7528\u8fc7\u7684\u6570\u636e\u9879, \u8fd9\u88ab\u79f0\u4e3a\u5c40\u90e8\u6027\u539f\u7406. \u5c40\u90e8\u6027\u6709\u4e24\u79cd\u5f62\u5f0f:  </p> <ul> <li>\u65f6\u95f4\u5c40\u90e8\u6027(temporal locality): \u88ab\u5f15\u7528\u8fc7\u4e00\u6b21\u7684\u5185\u5b58\u4f4d\u7f6e\u5f88\u53ef\u80fd\u5728\u4e0d\u8fdc\u7684\u5c06\u6765\u518d\u88ab\u591a\u6b21\u5f15\u7528.  </li> <li>\u7a7a\u95f4\u5c40\u90e8\u6027(space locality): \u5982\u679c\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u88ab\u5f15\u7528\u4e86\u4e00\u6b21, \u90a3\u4e48\u7a0b\u5e8f\u5f88\u53ef\u80fd\u5728\u4e0d\u8fdc\u7684\u5c06\u6765\u5f15\u7528\u9644\u8fd1\u7684\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e.  </li> </ul> <p>\u4e00\u822c\u800c\u8a00, \u6709\u826f\u597d\u5c40\u90e8\u6027\u7684\u7a0b\u5e8f\u6bd4\u5c40\u90e8\u6027\u5dee\u7684\u7a0b\u5e8f\u8fd0\u884c\u5f97\u66f4\u5feb.</p> <p>\u5c40\u90e8\u6027\u7684\u5e94\u7528</p> <p>\u4ece\u786c\u4ef6\u5230\u64cd\u4f5c\u7cfb\u7edf\uff0c\u518d\u5230\u5e94\u7528\u7a0b\u5e8f\uff0c\u90fd\u5229\u7528\u4e86\u5c40\u90e8\u6027.  </p> <ul> <li>\u786c\u4ef6: \u5728\u5904\u7406\u5668\u548c\u4e3b\u5b58\u4e4b\u95f4\u5f15\u5165\u4e00\u4e2a\u5c0f\u800c\u5feb\u901f\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668, \u6765\u4fdd\u5b58\u6700\u8fd1\u5f15\u7528\u7684\u6307\u4ee4\u548c\u6570\u636e, \u4ece\u800c\u63d0\u9ad8\u5bf9\u4e3b\u5b58\u7684\u8bbf\u95ee\u901f\u5ea6.  </li> <li>\u64cd\u4f5c\u7cfb\u7edf: \u7528\u4e3b\u5b58\u6765\u7f13\u5b58\u865a\u62df\u7a7a\u95f4\u4e2d\u6700\u8fd1\u88ab\u5f15\u7528\u7684\u6570\u636e\u5757.  </li> <li>\u5e94\u7528\u7a0b\u5e8f: \u6bd4\u5982Web\u6d4f\u89c8\u5668\u4f1a\u5c06\u6700\u8fd1\u5f15\u7528\u7684\u6587\u6863\u653e\u5165\u672c\u5730\u78c1\u76d8\u4e2d, \u6765\u7f13\u5b58\u670d\u52a1\u5668\u7684\u6570\u636e.  </li> </ul> <p>Example</p> <p> \u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u53d8\u91cf sum \u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u4e2d\u90fd\u4f1a\u88ab\u5f15\u7528\u4e00\u6b21, \u56e0\u6b64\u6709\u8f83\u597d\u7684\u65f6\u95f4\u5c40\u9650\u6027. \u56e0\u4e3a sum \u662f\u6807\u91cf\u6240\u4ee5\u4ed6\u6ca1\u6709\u7a7a\u95f4\u5c40\u9650\u6027. \u5bf9\u4e8e\u53d8\u91cf v \u6765\u8bf4\u6709\u826f\u597d\u7684\u7a7a\u95f4\u5c40\u9650\u6027, \u4f46\u65f6\u95f4\u5c40\u9650\u6027\u5f88\u5dee, \u56e0\u4e3a\u6bcf\u4e2a\u5411\u91cf\u5143\u7d20\u53ea\u80fd\u88ab\u8bbf\u95ee\u4e00\u6b21. \u7efc\u4e0a, \u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u51fd\u6570\u6709\u826f\u597d\u7684\u5c40\u9650\u6027.  </p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u5411\u91cf, \u5982\u679c\u6bcf\u4e00\u8f6e\u5f15\u7528\u7684\u6570\u636e\u9879\u4e4b\u95f4\u5728\u5185\u5b58\u7a7a\u95f4\u4e2d\u76f8\u9694 k, \u5219\u79f0\u8be5\u7a0b\u5e8f\u5177\u6709\u6b65\u957f\u4e3a k \u7684\u5f15\u7528\u6a21\u5f0f(Stride-k Reference Pattern). \u6b65\u957f k \u8d8a\u5927, \u5219\u6bcf\u4e00\u8f6e\u5f15\u7528\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u95f4\u9694\u5f88\u5927, \u5219\u7a7a\u95f4\u5c40\u90e8\u6027\u8d8a\u5dee.  </p> <p>Example</p> <p>  \u7b2c\u4e00\u4e2a\u7c7b\u4f3c\u4e0a\u6587\u7684\u4f8b\u5b50. \u7b2c\u4e8c\u4e2a\u4e2d\u53d8\u91cf v \u5177\u6709\u6b65\u957f\u4e3a N \u7684\u5f15\u7528\u6a21\u5f0f, \u7a7a\u95f4\u5c40\u90e8\u6027\u8f83\u5dee.  </p> <p>\u53d6\u6307\u4ee4\u65b9\u9762, \u56e0\u4e3a\u7a0b\u5e8f\u6307\u4ee4\u662f\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684, CPU \u5fc5\u987b\u53d6\u51fa\u8fd9\u4e9b\u6307\u4ee4, \u6240\u4ee5\u6211\u4eec\u4e5f\u80fd\u8003\u8651\u53d6\u6307\u7684\u5c40\u9650\u6027. for \u5faa\u73af\u4f53\u4e2d\u7684\u6307\u4ee4\u662f\u6309\u8fde\u7eed\u7684\u5185\u5b58\u987a\u5e8f\u6267\u884c\u7684, \u56e0\u6b64\u5faa\u73af\u5177\u6709\u826f\u597d\u7684\u7a7a\u95f4\u5c40\u9650\u6027. \u56e0\u4e3a\u5faa\u73af\u4f53\u4f1a\u6267\u884c\u591a\u6b21, \u56e0\u6b64\u4ed6\u4e5f\u5177\u6709\u826f\u597d\u7684\u65f6\u95f4\u5c40\u9650\u6027.  </p> <p>\u603b\u7684\u6765\u8bf4:  </p> <ul> <li>\u91cd\u590d\u5f15\u7528\u76f8\u540c\u53d8\u91cf\u7684\u7a0b\u5e8f\u6709\u826f\u597d\u7684\u65f6\u95f4\u5c40\u90e8\u6027.  </li> <li>\u5bf9\u4e8e\u5177\u6709\u6b65\u957f\u4e3a k \u7684\u5f15\u7528\u6a21\u5f0f\u7684\u7a0b\u5e8f, \u6b65\u957f\u8d8a\u5c0f, \u7a7a\u95f4\u5c40\u90e8\u6027\u8d8a\u597d.  </li> <li>\u5bf9\u4e8e\u53d6\u6307\u4ee4\u6765\u8bf4, \u5faa\u73af\u6709\u597d\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5c40\u90e8\u6027. \u5faa\u73af\u4f53\u8d8a\u5c0f, \u5faa\u73af\u8fed\u4ee3\u6b21\u6570\u8d8a\u591a, \u5c40\u90e8\u6027\u8d8a\u597d.  </li> </ul>"},{"location":"CSAPP/6/#_15","title":"\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784","text":"<p>\u901a\u8fc7\u4e0a\u9762\u4e24\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5b58\u50a8\u6280\u672f\u548c\u8f6f\u4ef6\u7684\u57fa\u672c\u5c5e\u6027\uff1a </p> <ul> <li>\u4e0d\u540c\u5b58\u50a8\u6280\u672f\u7684\u8bbf\u95ee\u65f6\u95f4\u76f8\u5dee\u8f83\u5927, \u901f\u5ea6\u5feb\u7684\u6280\u672f\u6bcf\u5b57\u8282\u7684\u6210\u672c\u6bd4\u901f\u5ea6\u6162\u7684\u6280\u672f\u9ad8, \u4e14\u5bb9\u91cf\u5c0f. \u5e76\u4e14CPU\u548c\u4e3b\u5b58\u4e4b\u95f4\u7684\u5dee\u8ddd\u5728\u53d8\u5927. </li> <li>\u7f16\u5199\u826f\u597d\u7684\u7a0b\u5e8f\u5177\u6709\u826f\u597d\u7684\u5c40\u90e8\u6027. </li> </ul> <p>\u6211\u4eec\u5f97\u5230\u4e00\u79cd\u7ec4\u7ec7\u5b58\u50a8\u5668\u7cfb\u7edf\u7684\u65b9\u6cd5, \u79f0\u4e3a\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784(memory hierarchy). </p> <p>\u4e00\u822c\u800c\u8a00, \u4ece\u9ad8\u5c42\u5f80\u4f4e\u5c42\u8d70, \u5b58\u50a8\u8bbe\u5907\u53d8\u5f97\u66f4\u6162, \u66f4\u4fbf\u5b9c\u548c\u66f4\u5927. </p>"},{"location":"CSAPP/6/#_16","title":"\u7f13\u5b58","text":"<p>\u9ad8\u901f\u7f13\u5b58(cache) \u662f\u4e00\u4e2a\u5c0f\u800c\u5feb\u901f\u7684\u5b58\u50a8\u8bbe\u5907, \u5b83\u4f5c\u4e3a\u5b58\u50a8\u5728\u66f4\u5927, \u4e5f\u66f4\u6162\u7684\u8bbe\u5907\u4e2d\u7684\u6570\u636e\u5bf9\u8c61\u7684\u7f13\u51b2\u533a\u57df. \u4f7f\u7528\u9ad8\u901f\u7f13\u5b58\u7684\u8fc7\u7a0b\u79f0\u4e3a\u7f13\u5b58(caching). \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u7684\u4e2d\u5fc3\u601d\u60f3\u662f: \u5bf9\u4e8e\u6bcf\u4e2a k, \u4f4d\u4e8e k \u5c42\u7684\u66f4\u5feb\u66f4\u5c0f\u7684\u5b58\u50a8\u8bbe\u5907\u4f5c\u4e3a\u4f4d\u4e8e k+1 \u5c42\u7684\u66f4\u5927\u66f4\u6162\u7684\u5b58\u50a8\u8bbe\u5907\u7684\u7f13\u5b58.  </p> <p>\u8be5\u7ed3\u6784\u4e3a\u4ec0\u4e48\u6709\u6548</p> <p>\u56e0\u4e3a\u7a0b\u5e8f\u7684\u5c40\u90e8\u6027\u539f\u7406. \u76f8\u6bd4\u4e8e\u7b2ck+1\u5c42\u7684\u6570\u636e\uff0c\u7a0b\u5e8f\u4f1a\u503e\u5411\u4e8e\u8bbf\u95ee\u5b58\u50a8\u5728\u7b2ck\u5c42\u7684\u6570\u636e\u3002\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u7b2ck+1\u5c42\u5b58\u50a8\u7684\u6570\u636e\uff0c\u6211\u4eec\u4f1a\u5c06\u5176\u62f7\u8d1d\u5230\u7b2ck\u5c42\uff0c\u56e0\u4e3a\u6839\u636e\u5c40\u90e8\u6027\u539f\u7406\u6211\u4eec\u5f88\u6709\u53ef\u80fd\u5c06\u518d\u6b21\u8bbf\u95ee\u8be5\u6570\u636e\uff0c\u7531\u6b64\u6211\u4eec\u5c31\u80fd\u4ee5\u7b2ck\u5c42\u7684\u8bbf\u95ee\u901f\u5ea6\u6765\u8bbf\u95ee\u6570\u636e\u3002\u800c\u4e14\u56e0\u4e3a\u6211\u4eec\u4e0d\u7ecf\u5e38\u8bbf\u95ee\u7b2ck+1\u5c42\u7684\u6570\u636e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u901f\u5ea6\u66f4\u6162\u4e14\u66f4\u4fbf\u5b9c\u7684\u5b58\u50a8\u8bbe\u5907.  </p> <p>\u7b2c k+1 \u5c42\u7684\u5b58\u50a8\u5668\u88ab\u5212\u5206\u4e3a\u8fde\u7eed\u7684\u6570\u636e\u5bf9\u8c61\u7ec4\u5757(chunk), \u79f0\u4e3a\u5757(block). \u6bcf\u4e2a\u5757\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5730\u5740\u6216\u540d\u5b57. \u5757\u53ef\u4ee5\u662f\u56fa\u5b9a\u5927\u5c0f, \u4e5f\u53ef\u4ee5\u662f\u53ef\u53d8\u5927\u5c0f. \u6570\u636e\u603b\u662f\u4ee5\u5757\u5927\u5c0f\u4e3a\u4f20\u9001\u5355\u5143\u5728\u7b2c k \u5c42\u548c k+1 \u5c42\u4e4b\u95f4\u6765\u56de\u590d\u5236. \u5c42\u6b21\u7ed3\u6784\u4e2d\u8f83\u4f4e\u5c42(\u79bb CPU \u8f83\u8fdc)\u7684\u8bbe\u5907\u7684\u8bbf\u95ee\u65f6\u95f4\u8f83\u957f, \u4e3a\u4e86\u8865\u507f\u8f83\u957f\u7684\u8bbf\u95ee\u65f6\u95f4, \u503e\u5411\u4e8e\u4f7f\u7528\u8f83\u5927\u7684\u5757. </p>"},{"location":"CSAPP/6/#_17","title":"\u7f13\u5b58\u547d\u4e2d","text":"<p>\u5f53\u7a0b\u5e8f\u9700\u8981 k+1 \u5c42\u7684\u67d0\u4e2a\u6570\u636e\u5bf9\u8c61 d \u65f6, \u5b83\u9996\u5148\u5728\u5f53\u524d\u5b58\u50a8\u5728 k \u5c42\u7684\u4e00\u4e2a\u5757\u4e2d\u67e5\u627e d. \u5982\u679c d \u521a\u597d\u7f13\u5b58\u5728\u7b2c k \u5c42, \u90a3\u4e48\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u7f13\u5b58\u547d\u4e2d(cache hit).  </p>"},{"location":"CSAPP/6/#_18","title":"\u7f13\u5b58\u4e0d\u547d\u4e2d","text":"<p>\u82e5\u7b2c k \u5c42\u4e2d\u6ca1\u6709 d, \u5c31\u662f\u7f13\u5b58\u4e0d\u547d\u4e2d(cache miss). \u6b64\u65f6\u7b2c k \u5c42\u7684\u7f13\u5b58\u4ece k+1 \u5c42\u7684\u7f13\u5b58\u4e2d\u53d6\u51fa\u5305\u542b d \u7684\u90a3\u4e2a\u5757. \u5982\u679c\u7b2c k \u5c42\u7684\u7f13\u5b58\u5df2\u7ecf\u6ee1\u4e86, \u5c31\u4f1a\u8986\u76d6\u73b0\u5b58\u7684\u4e00\u4e2a\u5757. \u8986\u76d6\u73b0\u5b58\u5757\u7684\u8fc7\u7a0b\u79f0\u4e3a\u66ff\u6362\u6216\u9a71\u9010\u8fd9\u4e2a\u5757. \u88ab\u9a71\u9010\u7684\u5757\u4e5f\u79f0\u4e3a\u727a\u7272\u5feb(victim block). \u51b3\u5b9a\u66ff\u6362\u54ea\u4e2a\u5757\u662f\u7531\u7f13\u5b58\u7684\u66ff\u6362\u7b56\u7565\u63a7\u5236\u7684.  </p> <ul> <li>\u4e00\u4e2a\u7a7a\u7684\u7f13\u5b58\u79f0\u4e3a\u51b7\u7f13\u5b58(cold cache), \u6b64\u65f6\u7684\u4e0d\u547d\u4e2d\u79f0\u4e3a\u5f3a\u5236\u6027\u4e0d\u547d\u4e2d\u6216\u8005\u51b7\u4e0d\u547d\u4e2d.  </li> <li>\u53ea\u8981\u53d1\u751f\u4e86\u4e0d\u547d\u4e2d, \u7f13\u5b58\u5c31\u8981\u6267\u884c\u67d0\u4e2a\u653e\u7f6e\u7b56\u7565. \u4f46\u8fd9\u79cd\u9650\u5236\u6027\u7684\u653e\u7f6e\u7b56\u7565\u4f1a\u5f15\u8d77\u4e00\u4e2d\u4e0d\u547d\u4e2d, \u5373\u51b2\u7a81\u4e0d\u547d\u4e2d. e.g. \u6211\u4eec\u5c06 k+1 \u5c42\u7684\u5757 i \u653e\u5728 k \u5c42\u7684 \\(i mod 4\\) \u7684\u5757\u4e2d. \u6b64\u65f6\u6211\u4eec\u5982\u679c\u8fde\u7eed\u8bf7\u6c42\u5757 0 \u548c\u5757 8, \u4e24\u6b21\u5f15\u7528\u90fd\u4f1a\u4e0d\u547d\u4e2d.  </li> <li>\u5757\u7684\u96c6\u5408\u79f0\u4e3a\u8fd9\u4e2a\u9636\u6bb5\u7684\u5de5\u4f5c\u96c6. \u5f53\u5de5\u4f5c\u96c6\u5927\u5c0f\u8d85\u8fc7\u7f13\u5b58\u7684\u5927\u5c0f\u65f6, \u7f13\u5b58\u4f1a\u7ecf\u5386\u5bb9\u91cf\u4e0d\u547d\u4e2d.  </li> </ul> <p>\u901a\u8fc7\u4ee5\u4e0a\u5185\u5bb9\uff0c\u5c31\u80fd\u89e3\u91ca\u5c40\u90e8\u6027\u597d\u7684\u7a0b\u5e8f\u7684\u4f18\u52bf:  </p> <ul> <li>\u65f6\u95f4\u5c40\u90e8\u6027: \u5f53\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\u5728\u7b2c\u4e00\u6b21\u4e0d\u547d\u4e2d\u88ab\u590d\u5236\u5230\u7f13\u5b58\u4e2d\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u7684\u65f6\u95f4\u5c40\u90e8\u6027\u597d\uff0c\u5219\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5c31\u80fd\u53cd\u590d\u5728\u7b2ck\u5c42\u8bbf\u95ee\u5230\u8be5\u5757\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u8fd0\u884c\u66f4\u5feb.  </li> <li>\u7a7a\u95f4\u5c40\u90e8\u6027: \u7531\u4e8e\u7f13\u5b58\u4e2d\u4e00\u4e2a\u5757\u5305\u542b\u591a\u4e2a\u6570\u636e\u5bf9\u8c61\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u7684\u7a7a\u95f4\u5c40\u90e8\u6027\u597d\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u7b2ck\u5c42\u7684\u6570\u636e\u5757\uff0c\u907f\u514d\u518d\u4ece\u7b2ck+1\u5c42\u4f20\u8f93\u5757\u5230\u7b2ck\u5c42.  </li> </ul>"},{"location":"CSAPP/6/#_19","title":"\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668","text":""},{"location":"CSAPP/6/#_20","title":"\u901a\u7528\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668\u7ec4\u7ec7\u67b6\u6784","text":"<p>\u8003\u8651\u4e00\u4e2a\u7cfb\u7edf, \u6bcf\u4e2a\u5b58\u50a8\u5668\u5730\u5740\u6709 m \u4f4d, \u5f62\u6210 \\(M=2^m\\) \u4e2a\u4e0d\u540c\u7684\u5730\u5740. \u9ad8\u901f\u7f13\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a \\(S=2^s\\) \u4e2a\u9ad8\u901f\u7f13\u5b58\u7ec4\u7684\u6570\u7ec4. \u6bcf\u4e2a\u7ec4\u6709 E \u4e2a\u9ad8\u901f\u7f13\u5b58\u884c, \u6bcf\u4e2a\u884c\u662f\u7531\u4e00\u4e2a \\(B=2^b\\) \u7684\u6570\u636e\u5757, \u4e00\u4e2a\u6709\u6548\u4f4d, \u548c \\(t=m-(b+s)\\)\u4e2a\u6807\u8bb0\u4f4d\u7ec4\u6210. \u9ad8\u901f\u7f13\u5b58\u7684\u7ed3\u6784\u53ef\u4ee5\u901a\u8fc7\u5143\u7ec4 \\((S, E, B, m)\\) \u9ad8\u901f\u7f13\u5b58\u7684\u5927\u5c0f \\(C=S\\times E\\times B\\). </p> <p>\u5982\u4e0a\u56fe, m \u4f4d\u7684\u5730\u5740\u88ab\u5206\u4e3a\u4e09\u90e8\u5206:  </p> <ul> <li>s \u4f4d: \u7ec4\u7d22\u5f15.  </li> <li>t \u4f4d: \u6bcf\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u6709\u4e00\u4e2a t \u4f4d\u7684\u6807\u8bb0\u4f4d, \u552f\u4e00\u6807\u8bc6\u6570\u636e\u5757. \u5f53\u6211\u4eec\u901a\u8fc7\u7ec4\u7d22\u5f15\u5b9a\u4f4d\u5230\u7ec4\u65f6, \u6807\u8bb0\u4f4d\u544a\u8bc9\u6211\u4eec\u9700\u8981\u7ec4\u4e2d\u7684\u54ea\u4e00\u884c. \u53ea\u6709\u5f53\u5730\u5740\u7684\u6807\u8bb0\u548c\u884c\u7684\u6807\u8bb0\u4f4d\u76f8\u540c, \u800c\u4e14\u8bbe\u7f6e\u4e86\u884c\u7684\u6709\u6548\u4f4d, \u624d\u80fd\u7f13\u51b2\u547d\u4e2d.  </li> <li>b \u4f4d: \u5728 B \u4e2a\u5b57\u8282\u4e2d\u7684\u5b57\u504f\u79fb.  </li> </ul>"},{"location":"CSAPP/6/#_21","title":"\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58","text":"<p>\u5f53 \\(E=1\\) \u65f6, \u9ad8\u901f\u7f13\u5b58\u88ab\u79f0\u4e3a\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58(direct-mapped cache).  </p> <p> </p> <p>\u4ece\u5757\u4e2d\u62bd\u53d6\u51fa\u5b57\u7684\u6d41\u7a0b:  </p> <ul> <li>\u7ec4\u9009\u62e9: \u4ece w \u7684\u5730\u5740\u4e2d\u95f4\u62bd\u51fa s \u4e2a\u7d22\u5f15\u4f4d, \u8fd9\u4e9b\u4f4d\u88ab\u89e3\u91ca\u4f4d\u4e3a\u4e00\u4e2a\u5bf9\u5e94\u7ec4\u53f7\u7684\u65e0\u7b26\u53f7\u6574\u6570. </li> <li>\u884c\u5339\u914d: \u56e0\u4e3a\u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c, \u5f53\u4e14\u4ec5\u5f53\u8bbe\u7f6e\u4e86\u6709\u6548\u4f4d, \u800c\u4e14\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u7684\u6807\u8bb0\u4e0e w \u5730\u5740\u4e2d\u7684\u6807\u8bb0\u76f8\u5339\u914d\u65f6, \u8fd9\u4e00\u884c\u624d\u5305\u542b w \u7684\u4e00\u4e2a\u526f\u672c. </li> <li>\u5b57\u9009\u62e9: \u628a\u5757\u770b\u6210\u4e00\u4e2a\u5b57\u7684\u6570\u7ec4, \u5b57\u8282\u504f\u79fb\u5c31\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u4e00\u4e2a\u7d22\u5f15.  </li> <li>\u4e0d\u547d\u4e2d\u65f6\u7684\u884c\u66ff\u6362: \u5982\u679c\u7f13\u5b58\u4e0d\u547d\u4e2d, \u5b83\u5c31\u4ece\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e0b\u4e00\u5c42\u53d6\u51fa\u88ab\u8bf7\u6c42\u7684\u5757, \u7136\u540e\u5c06\u65b0\u7684\u5757\u5b58\u50a8\u5728\u7ec4\u7d22\u5f15\u4f4d\u6307\u793a\u7684\u7ec4\u4e2d\u7684\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d.  </li> </ul> <p>\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u51b2\u7a81\u4e0d\u547d\u4e2d</p> <p>\u5f53\u7a0b\u5e8f\u8bbf\u95ee\u5927\u5c0f\u4e3a 2 \u7684\u5e42\u6b21\u7684\u6570\u7ec4\u65f6, \u901a\u5e38\u4f1a\u53d1\u751f\u51b2\u7a81\u4e0d\u547d\u4e2d. <pre><code>float dotprod(float x[8], float y[8]) {\nfloat sum = 0.0;\nint i;\nfor (i = 0; i &lt; 8; i++)\nsum += x[i] * y[i];\nreturn sum;\n}\n</code></pre> \u5047\u8bbe\u6d6e\u70b9\u6570\u662f 4 \u4e2a\u5b57\u8282, x \u88ab\u52a0\u8f7d\u5230 0 \u5f00\u59cb\u7684 32 \u5b57\u8282\u8fde\u7eed\u5185\u5b58\u4e2d, y \u4ece\u5730\u5740 32 \u5f00\u59cb. \u5047\u8bbe\u4e00\u4e2a\u5757\u662f 16 \u4e2a\u5b57\u8282, \u7531\u4e24\u4e2a\u7ec4\u7ec4\u6210. \u90a3\u4e48 x[i] \u548c y[i] \u4f1a\u88ab\u6620\u5c04\u5230\u76f8\u540c\u7684\u5185\u5b58\u7ec4:  \u8fd9\u6837\u6211\u4eec\u4f1a\u5728 x \u548c y \u7684\u5757\u4e4b\u95f4\u6296\u52a8(thrash), \u5373\u9ad8\u901f\u7f13\u5b58\u53cd\u590d\u5730\u52a0\u8f7d\u548c\u9a71\u9010\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u5757\u7684\u7ec4. \u53ef\u4ee5\u53d1\u73b0: \u5373\u4f7f\u7a0b\u5e8f\u7684\u5c40\u90e8\u6027\u826f\u597d, \u4e14\u5de5\u4f5c\u96c6\u7684\u5927\u5c0f\u6ca1\u6709\u8d85\u8fc7\u9ad8\u901f\u7f13\u5b58\u5bb9\u91cf, \u4f46\u662f\u7531\u4e8e\u8fd9\u4e9b\u6570\u636e\u5757\u90fd\u88ab\u6620\u5c04\u5230\u4e86\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d, \u4e14\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u6bcf\u4e2a\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c, \u6240\u4ee5\u4f1a\u51fa\u73b0\u6296\u52a8, \u4e0d\u65ad\u51fa\u73b0\u7f13\u5b58\u4e0d\u547d\u4e2d. \u6211\u4eec\u53ef\u4ee5\u4fee\u6b63\u6296\u52a8\u95ee\u9898: \u5728\u6bcf\u4e2a\u6570\u7ec4\u7684\u7ed3\u5c3e\u653e B \u5b57\u8282\u7684\u586b\u5145. </p> <p>\u4e3a\u4ec0\u4e48\u7528\u4e2d\u95f4\u7684\u4f4d\u6765\u505a\u7d22\u5f15</p> <p>\u5982\u679c\u7528\u9ad8\u4f4d\u505a\u7d22\u5f15, \u90a3\u4e48\u4e00\u4e9b\u8fde\u7eed\u7684\u5185\u5b58\u5757\u5c31\u4f1a\u6620\u5c04\u5230\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u51b2\u5757. \u987a\u5e8f\u626b\u63cf\u4e00\u4e2a\u6570\u7ec4\u7684\u5143\u7d20, \u90a3\u4e48\u9ad8\u901f\u7f13\u5b58\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u5757\u5927\u5c0f\u7684\u6570\u7ec4\u5185\u5bb9, \u8fd9\u6837\u7684\u4f7f\u7528\u6548\u7387\u5f88\u4f4e.  </p>"},{"location":"CSAPP/6/#_22","title":"\u7ea7\u76f8\u8054\u9ad8\u901f\u7f13\u5b58","text":"<p>\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u51b2\u7a81\u4e0d\u547d\u4e2d\u7684\u6839\u6e90\u5c31\u662f\u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c. \u7ea7\u76f8\u8054\u9ad8\u901f\u7f13\u5b58(set associative cache) \u653e\u9001\u4e86\u8fd9\u4e2a\u9650\u5236. \u4e00\u4e2a \\(1&lt;E&lt;C/B\\) \u7684\u9ad8\u901f\u7f13\u5b58\u79f0\u4e3a E \u8def\u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58. \u62bd\u5b57\u8fc7\u7a0b\u5982\u4e0a. \u5f53\u7f13\u5b58\u4e0d\u547d\u4e2d\u65f6\u9700\u8981\u7f13\u5b58\u884c\u66ff\u6362. \u5982\u679c\u5bf9\u5e94\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d\u6709\u7a7a\u884c, \u76f4\u63a5\u4fdd\u5b58\u5230\u7a7a\u884c, \u5426\u5219\u8003\u8651\u5408\u9002\u7684\u66ff\u6362\u7b56\u7565.  </p> <ul> <li>\u6700\u4e0d\u5e38\u4f7f\u7528(Least-Frequently-Used, LFU): \u66ff\u6362\u8fc7\u53bb\u67d0\u4e2a\u65f6\u95f4\u7a97\u53e3\u5185\u5f15\u7528\u6b21\u6570\u6700\u5c11\u7684\u4e00\u884c.  </li> <li>\u6700\u8fd1\u6700\u5c11\u539f\u7406(Least-Recently-Used, LRU): \u66ff\u6362\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u95f4\u6700\u4e45\u8fdc\u7684\u90a3\u4e00\u884c.  </li> </ul>"},{"location":"CSAPP/6/#_23","title":"\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58","text":"<p>\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58(Full Associative Cache) \u662f\u7528\u4e00\u4e2a\u5305\u542b\u6240\u6709\u9ad8\u901f\u7f13\u5b58\u884c\u7684\u7ec4\u7ec4\u6210\u7684, \u5176\u4e2d \\(E=C/B\\) \u5373 \\(E=1\\). \u6ce8\u610f\u5730\u5740\u4e2d\u4e0d\u9700\u8981\u7ec4\u7d22\u5f15\u4f4d, \u5730\u5740\u53ea\u88ab\u5212\u5206\u4e3a\u4e00\u4e2a\u6807\u8bb0\u548c\u4e00\u4e2a\u5757\u504f\u79fb. \u56e0\u4e3a\u9ad8\u901f\u7f13\u5b58\u7535\u8def\u5fc5\u987b\u5e76\u884c\u5730\u641c\u7d22\u8bb8\u591a\u76f8\u5339\u914d\u7684\u6807\u8bb0, \u6784\u9020\u4e00\u4e2a\u53c8\u5927\u53c8\u5feb\u7684\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u5f88\u56f0\u96be, \u800c\u4e14\u5f88\u6602\u8d35. \u56e0\u6b64\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u53ea\u9002\u5408\u505a\u5f88\u5c0f\u7684\u7f13\u5b58.  </p>"},{"location":"CSAPP/6/#_24","title":"\u5199\u64cd\u4f5c","text":"<p>\u5f53 CPU \u60f3\u8981\u5bf9\u5730\u5740 A \u8fdb\u884c\u5199\u64cd\u4f5c\u65f6, \u4f1a\u901a\u8fc7\u5730\u5740 A \u5224\u65ad\u662f\u5426\u7f13\u5b58\u4e86\u8be5\u5730\u5740, \u5982\u679c\u7f13\u5b58\u4e86\u79f0\u4e3a\u5199\u547d\u4e2d(Write Hit),\u5426\u5219\u79f0\u4e3a\u5199\u4e0d\u547d\u4e2d(Write Miss).  </p> <ul> <li> <p>\u5199\u547d\u4e2d: \u9ad8\u901f\u7f13\u5b58\u4f1a\u5148\u66f4\u65b0\u5728\u7f13\u5b58\u4e2d\u7684\u7248\u672c, \u7136\u540e\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u6cd5\u66f4\u65b0\u4e0b\u4e00\u7248\u672c. </p> <ul> <li>\u76f4\u5199(write-through): \u7acb\u5373\u5c06 w \u7684\u9ad8\u901f\u7f13\u5b58\u5757\u5199\u56de\u5230\u7d27\u6328\u7740\u7684\u4f4e\u4e00\u5c42\u4e2d. \u7f3a\u70b9\u662f\u6bcf\u6b21\u5199\u90fd\u4f1a\u5f15\u8d77\u603b\u7ebf\u6d41\u91cf.  </li> <li>\u5199\u56de(write-back): \u5c3d\u53ef\u80fd\u5730\u63a8\u8fdf\u66f4\u65b0, \u53ea\u6709\u5f53\u66ff\u6362\u7b97\u6cd5\u8981\u9a71\u9010\u8fd9\u4e2a\u66f4\u65b0\u8fc7\u7684\u5757\u65f6\u624d\u628a\u5b83\u5199\u5230\u7d27\u6328\u7740\u7684\u4f4e\u4e00\u5c42\u4e2d. \u4e3a\u6b64\u6211\u4eec\u8981\u4e3a\u9ad8\u901f\u7f13\u5b58\u7ef4\u62a4\u4e00\u4e2a\u989d\u5916\u7684\u4fee\u6539\u4f4d. \u5b83\u663e\u8457\u5730\u51cf\u5c11\u4e86\u603b\u7ebf\u6d41\u91cf, \u4f46\u7f3a\u70b9\u662f\u589e\u52a0\u4e86\u590d\u6742\u6027.  </li> <li> <p>\u5199\u4e0d\u547d\u4e2d: </p> </li> <li> <p>\u5199\u5206\u914d(write-allocate): \u52a0\u8f7d\u76f8\u5e94\u7684\u4f4e\u4e00\u5c42\u4e2d\u7684\u5757\u5230\u9ad8\u901f\u7f13\u5b58\u4e2d, \u7136\u540e\u66f4\u65b0\u8fd9\u4e2a\u9ad8\u901f\u7f13\u5b58\u5757. \u5199\u5206\u914d\u8bd5\u56fe\u5229\u7528\u7a7a\u95f4\u5c40\u90e8\u6027, \u4f46\u7f3a\u70b9\u662f\u6bcf\u6b21\u4e0d\u547d\u4e2d\u90fd\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u5757\u4ece\u4f4e\u5230\u9ad8\u7684\u4f20\u9001.  </p> </li> <li>\u975e\u5199\u5206\u914d: \u907f\u5f00\u9ad8\u901f\u7f13\u5b58, \u76f4\u63a5\u5c06\u8fd9\u4e2a\u5b57\u5199\u5230\u4f4e\u4e00\u5c42\u4e2d.  </li> </ul> </li> </ul> <p>\u76f4\u5199\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u4e3a\u5199\u4e0d\u5206\u914d\u7684, \u5199\u56de\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u4e3a\u5199\u5206\u914d\u7684. \u5efa\u8bae\u91c7\u7528\u5199\u56de\u548c\u5199\u5206\u914d.  </p>"},{"location":"CSAPP/6/#_25","title":"\u771f\u5b9e\u7684\u9ad8\u901f\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784","text":"<p>\u5b9e\u9645\u4e0a, \u9ad8\u901f\u7f13\u5b58\u65e2\u4fdd\u5b58\u6570\u636e, \u4e5f\u4fdd\u5b58\u6307\u4ee4  </p> <ul> <li>i-cache: \u53ea\u4fdd\u5b58\u6307\u4ee4\u7684\u9ad8\u901f\u7f13\u5b58.  </li> <li>d-cache: \u53ea\u4fdd\u5b58\u7a0b\u5e8f\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58.  </li> <li>\u7edf\u4e00\u7684\u9ad8\u901f\u7f13\u5b58(unified cache): \u65e2\u4fdd\u5b58\u6307\u4ee4\u53c8\u4fdd\u5b58\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58.  </li> </ul> <p>\u8fd9\u6837\u505a\u7684\u539f\u56e0:  </p> <ul> <li>\u5c06\u6570\u636e\u548c\u6307\u4ee4\u5206\u522b\u4fdd\u5b58\u5728\u4e24\u4e2a\u9ad8\u901f\u7f13\u5b58\u4e2d, \u4f7f\u5f97\u5904\u7406\u5668\u53ef\u4ee5\u540c\u65f6\u8bfb\u4e00\u4e2a\u6307\u4ee4\u5b57\u548c\u4e00\u4e2a\u6570\u636e\u5b57.  </li> <li>i-cache \u901a\u5e38\u662f\u53ea\u8bfb\u7684, \u6240\u4ee5\u4f1a\u6bd4\u8f83\u7b80\u5355.  </li> <li>\u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u7684\u8bbf\u95ee\u6a21\u5f0f\u4f18\u5316\u8fd9\u4e24\u4e2a\u9ad8\u901f\u7f13\u5b58, \u4f7f\u7528\u4e0d\u540c\u7684\u5757\u5927\u5c0f\u3001\u76f8\u8054\u5ea6\u548c\u5bb9\u91cf.  </li> <li>\u786e\u4fdd\u6570\u636e\u8bbf\u95ee\u548c\u6307\u4ee4\u8bbf\u95ee\u4e4b\u95f4\u4e0d\u5f62\u6210\u51b2\u7a81\u4e0d\u547d\u4e2d.  </li> </ul> <p>\u4ee3\u4ef7\u5c31\u662f\u4f1a\u5bfc\u81f4\u9ad8\u901f\u7f13\u5b58\u5bb9\u91cf\u53d8\u5c0f, \u63d0\u9ad8\u51fa\u73b0\u5bb9\u91cf\u4e0d\u547d\u4e2d\u7684\u53ef\u80fd\u6027.  </p>"},{"location":"CSAPP/6/#_26","title":"\u9ad8\u901f\u7f13\u5b58\u53c2\u6570\u5bf9\u6027\u80fd\u7684\u5f71\u54cd","text":"<p>\u8861\u91cf\u9ad8\u901f\u7f13\u5b58\u6027\u80fd\u7684\u6307\u6807:  </p> <ul> <li>\u4e0d\u547d\u4e2d\u7387: \u4e0d\u547d\u4e2d\u6570\u91cf/\u5f15\u7528\u6570\u91cf   </li> <li>\u547d\u4e2d\u7387: 1 - \u4e0d\u547d\u4e2d\u7387  </li> <li>\u547d\u4e2d\u65f6\u95f4: \u4ece\u9ad8\u901f\u7f13\u5b58\u4f20\u9001\u4e00\u4e2a\u5b57\u5230 CPU \u6240\u9700\u7684\u65f6\u95f4  </li> <li>\u4e0d\u547d\u4e2d\u5904\u7f5a: \u7531\u4e8e\u4e0d\u547d\u4e2d\u6240\u9700\u8981\u7684\u989d\u5916\u7684\u65f6\u95f4  </li> </ul> \u53c2\u6570 \u4f18\u70b9 \u7f3a\u70b9 \u5efa\u8bae \u9ad8\u901f\u7f13\u5b58\u5927\u5c0f(\u8d8a\u5927) \u63d0\u9ad8\u547d\u4e2d\u7387 \u589e\u52a0\u547d\u4e2d\u65f6\u95f4 L1&lt;L2&lt;L3 \u5757\u5927\u5c0f(\u8d8a\u5927) \u5229\u7528\u7a7a\u95f4\u5c40\u9650\u6027, \u63d0\u9ad8\u547d\u4e2d\u7387 \u9ad8\u901f\u7f13\u5b58\u884c\u8d8a\u5c11, \u635f\u5bb3\u65f6\u95f4\u5c40\u9650\u6027; \u5bf9\u4e0d\u547d\u4e2d\u5904\u7f5a\u6709\u8d1f\u9762\u5f71\u54cd, \u4f20\u9001\u65f6\u95f4\u8d8a\u957f \u73b0\u4ee3\u7cfb\u7edf\u6298\u4e2d\u8bbe\u7f6e\u5757\u5305\u542b64\u4e2a\u5b57\u8282 \u76f8\u8054\u5ea6(\u8d8a\u9ad8, \u5373 E \u8d8a\u5927) \u964d\u4f4e\u4e86\u9ad8\u901f\u7f13\u5b58\u7531\u4e8e\u51b2\u7a81\u4e0d\u547d\u4e2d\u51fa\u73b0\u6296\u52a8\u7684\u53ef\u80fd \u8f83\u9ad8\u7684\u6210\u672c; \u9700\u8981\u66f4\u591a\u6807\u8bb0\u4f4d; \u589e\u52a0\u547d\u4e2d\u65f6\u95f4; \u589e\u52a0\u4e0d\u547d\u4e2d\u60e9\u7f5a L1 \u548c L2 \u4f7f\u7528 8 \u8def\u7ec4\u76f8\u8054, L3 \u4f7f\u7528 16 \u8def\u7ec4\u76f8\u8054 \u5199\u7b56\u7565(\u76f4\u5199) \u5bb9\u6613\u5b9e\u73b0; \u80fd\u4f7f\u7528\u72ec\u7acb\u4e8e\u9ad8\u901f\u7f13\u5b58\u7684\u5199\u7f13\u51b2\u533a\u6765\u66f4\u65b0\u5185\u5b58;\u8bfb\u4e0d\u547d\u4e2d\u7684\u5f00\u9500\u4e0d\u5927 \u5f15\u8d77\u7684\u4f20\u9001\u6b21\u6570\u591a \u9ad8\u901f\u7f13\u5b58\u8d8a\u5f80\u4e0b\u5c42, \u8d8a\u53ef\u80fd\u4f7f\u7528\u5199\u56de\u800c\u4e0d\u662f\u76f4\u5199 <p>\u7531\u6b64, \u7f16\u5199\u9ad8\u901f\u7f13\u5b58\u53cb\u597d\u7684\u4ee3\u7801\u9700\u8981:  </p> <ul> <li> <p>\u8ba9\u6700\u5e38\u89c1\u7684\u4ee3\u7801\u8fd0\u884c\u5f97\u5feb.  </p> <ul> <li>\u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u53cd\u590d\u5f15\u7528\u662f\u597d\u7684, \u56e0\u4e3a\u7f16\u8bd1\u5668\u80fd\u591f\u628a\u5b83\u4eec\u7f13\u5b58\u5728\u5bc4\u5b58\u5668\u4e4b\u4e2d(\u65f6\u95f4\u5c40\u90e8\u6027).  </li> <li>\u6b65\u957f\u4e3a 1 \u7684\u5f15\u7528\u6a21\u5f0f\u662f\u597d\u7684, \u56e0\u4e3a\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u6240\u6709\u5c42\u6b21\u4e0a\u7684\u7f13\u5b58\u90fd\u662f\u5c06\u6570\u636e\u7f13\u5b58\u4e3a\u8fde\u7eed\u7684\u5757.(\u7a7a\u95f4\u5c40\u90e8\u6027)  </li> <li>\u5c3d\u91cf\u51cf\u5c11\u6bcf\u4e2a\u5faa\u73af\u5185\u7684\u7f13\u5b58\u4e0d\u547d\u4e2d\u6570\u91cf, \u8f83\u9ad8\u7684\u4e0d\u547d\u4e2d\u7387\u961f\u8fd0\u884c\u65f6\u95f4\u53ef\u4ee5\u6709\u663e\u8457\u7684\u5f71\u54cd.    </li> </ul> </li> </ul>"},{"location":"CSAPP/6/#_27","title":"\u5b58\u50a8\u5668\u5c71","text":"<p>\u4e00\u4e2a\u7a0b\u5e8f\u4ece\u5b58\u50a8\u5668\u7cfb\u7edf\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u901f\u7387\u79f0\u4e3a\u8bfb\u541e\u5410\u91cf(Read Throughput) \u6216 \u8bfb\u5e26\u5bbd(Read Bandwidth)\uff0c\u5355\u4f4d\u4e3aMB/s. \u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u6765\u8861\u91cf\u7a7a\u95f4\u5c40\u90e8\u6027\u548c\u65f6\u95f4\u5c40\u90e8\u6027\u5bf9\u7a0b\u5e8f\u541e\u5410\u91cf\u7684\u5f71\u54cd.  </p> <p></p> <p>\u901a\u8fc7\u8c03\u6574 size(\u65f6\u95f4\u5c40\u90e8\u6027. size \u5c0f\u5219\u653e\u8fdb L1 \u9ad8\u901f\u7f13\u5b58, size \u5927\u5219\u653e\u8fdb L3) \u548c stride(\u7a7a\u95f4\u5c40\u90e8\u6027, \u6b65\u957f) \u6765\u5ea6\u91cf\u7a0b\u5e8f\u7684\u541e\u5410\u91cf\uff0c\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u5b58\u50a8\u5668\u5c71(Memory Mountain). </p> <p>\u4fdd\u6301 stride \u4e0d\u53d8, \u89c2\u5bdf\u9ad8\u901f\u7f13\u5b58\u5927\u5c0f\u548c\u65f6\u95f4\u5c40\u90e8\u6027\u5bf9\u6027\u80fd\u7684\u5f71\u54cd: </p> <p>\u4fdd\u6301\u5de5\u4f5c\u96c6\u4e3a 4MB, \u6cbf\u7740 L3 \u5c71\u810a\u67e5\u770b\u7a7a\u95f4\u5c40\u90e8\u6027\u5bf9\u6027\u80fd\u7684\u5f71\u54cd:  </p> <p></p> <p>\u7efc\u4e0a\u6240\u8ff0\uff1a\u4f7f\u9891\u7e41\u4f7f\u7528\u7684\u5b57\u4ece L1 \u4e2d\u53d6\u51fa\uff0c\u8fd8\u9700\u8981\u5229\u7528\u7a7a\u95f4\u5c40\u90e8\u6027\uff0c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u591a\u7684\u5b57\u4ece\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u8bfb\u53d6\u5230.</p>"},{"location":"CSAPP/6/#_28","title":"\u91cd\u65b0\u6392\u5217\u5faa\u73af\u4ee5\u63d0\u9ad8\u7a7a\u95f4\u5c40\u90e8\u6027","text":"<p>\u77e9\u9635\u4e58\u6cd5</p> <p>\u5047\u8bbe\u4e24\u4e2a\u77e9\u9635\u90fd\u662f n*n \u7684 double \u578b\u6570\u7ec4. sizeof(double) == 8. \u53ea\u6709\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58, \u5176\u5757\u5927\u5c0f\u4e3a 32 \u5b57\u8282. n \u5f88\u5927\u4ee5\u81f3\u4e8e\u77e9\u9635\u7684\u4e00\u884c\u90fd\u4e0d\u80fd\u5b8c\u5168\u88c5\u8fdb L1 \u9ad8\u901f\u7f13\u5b58\u4e2d. \u7f16\u8bd1\u5668\u5c06\u5c40\u90e8\u53d8\u91cf\u5b58\u50a8\u5230\u5bc4\u5b58\u5668\u4e2d, \u56e0\u6b64\u5faa\u73af\u5185\u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528\u4e0d\u9700\u8981\u4efb\u4f55\u5b58\u50a8\u548c\u52a0\u8f7d\u6307\u4ee4. </p> <p>\u5176\u7ed3\u679c:(\u5185\u5faa\u73af) </p>"},{"location":"CSAPP/6/#_29","title":"\u4f7f\u7528\u5206\u5757\u63d0\u9ad8\u65f6\u95f4\u5c40\u90e8\u6027","text":""},{"location":"CSAPP/7/","title":"\u94fe\u63a5","text":"<p>\u94fe\u63a5(linking) \u662f\u5c06\u5404\u79cd\u4ee3\u7801\u548c\u6570\u636e\u7247\u6bb5\u6536\u96c6\u5e76\u7ec4\u5408\u6210\u4e3a\u4e00\u4e2a\u5355\u4e00\u6587\u4ef6\u7684\u8fc7\u7a0b, \u8fd9\u4e2a\u6587\u4ef6\u53ef\u88ab\u52a0\u8f7d(\u590d\u5236)\u5230\u5185\u5b58\u5e76\u6267\u884c. \u94fe\u63a5\u53ef\u88ab\u6267\u884c\u4e8e\u4e09\u4e2a\u9636\u6bb5:  </p> <ul> <li>\u7f16\u8bd1\u65f6: \u5728\u6e90\u4ee3\u7801\u7ffb\u8bd1\u6210\u673a\u5668\u4ee3\u7801\u65f6\u7684\u4f20\u7edf\u9759\u6001\u94fe\u63a5.  </li> <li>\u52a0\u8f7d\u65f6: \u5728\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u5668\u52a0\u8f7d\u5230\u5185\u5b58\u5e76\u6267\u884c\u65f6\u7684\u52a8\u6001\u94fe\u63a5.  </li> <li>\u8fd0\u884c\u65f6: \u7531\u5e94\u7528\u7a0b\u5e8f\u6765\u6267\u884c\u7684\u52a8\u6001\u94fe\u63a5.  </li> </ul> <p>\u94fe\u63a5\u662f\u7531\u94fe\u63a5\u5668(linker) \u7a0b\u5e8f\u81ea\u52a8\u6267\u884c, \u94fe\u63a5\u7684\u5b58\u5728\u4f7f\u5f97\u5206\u79bb\u7f16\u8bd1\u6210\u4e3a\u53ef\u80fd, \u4e00\u4e2a\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u5c0f\u7684\u6a21\u5757, \u53ea\u9700\u8981\u5bf9\u8fd9\u4e9b\u6a21\u5757\u8fdb\u884c\u4fee\u6539\u7f16\u8bd1, \u7136\u540e\u901a\u8fc7\u94fe\u63a5\u5668\u5c06\u5176\u7ec4\u5408\u6210\u5927\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5c31\u884c.</p>"},{"location":"CSAPP/7/#_2","title":"\u57fa\u672c\u6982\u5ff5","text":""},{"location":"CSAPP/7/#_3","title":"\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f","text":"<p>\u5927\u591a\u6570\u7f16\u8bd1\u7cfb\u7edf\u63d0\u4f9b\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f(compiler driver), \u5b83\u4ee3\u8868\u7528\u6237\u5728\u9700\u8981\u65f6\u8c03\u7528\u8bed\u8a00\u5904\u7406\u5668, \u7f16\u8bd1\u5668, \u6c47\u7f16\u5668\u548c\u94fe\u63a5\u5668.  </p> <p></p> <p>\u6b64\u65f6\u6211\u4eec\u8f93\u5165 <code>linux&gt; gcc -Og -o prog main.c sum.c</code> </p> <p>GCC\u9a71\u52a8\u7a0b\u5e8f</p> <ul> <li>\u9996\u5148\u8fd0\u884c C \u9884\u5904\u7406\u5668(cpp), \u5c06 C \u7684\u6e90\u7a0b\u5e8f main.c \u7ffb\u8bd1\u6210\u4e00\u4e2a ASCII \u7801\u7684\u4e2d\u95f4\u6587\u4ef6 main.i <code>cpp [other argument] main.c /tmp/main.i</code></li> <li>\u7136\u540e\u8fd0\u884c C \u7f16\u8bd1\u5668(ccl), \u5c06 main.i \u7ffb\u8bd1\u6210\u4e00\u4e2a ASCII \u6c47\u7f16\u8bed\u8a00\u6587\u4ef6 main.s <code>ccl /tmp/main.i -Og [other argument] -o /tmp/main.s</code></li> <li>\u8fd0\u884c\u6c47\u7f16\u5668(as), \u5b83\u5c06 main.s \u7ffb\u8bd1\u6210\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 main.o <code>as [other argument] -o /tmp/main.o /tmp/main.s</code></li> <li>\u5bf9 sum.c \u7ecf\u8fc7\u76f8\u540c\u7684\u8fc7\u7a0b\u751f\u6210 sum.o </li> <li>\u8fd0\u884c\u94fe\u63a5\u5668\u7a0b\u5e8f ld, \u5c06 main.o \u548c sum.o \u4ee5\u53ca\u4e00\u4e9b\u5fc5\u8981\u7684\u7cfb\u7edf\u76ee\u6807\u6587\u4ef6\u7ec4\u5408\u8d77\u6765, \u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 prog. <code>ld -o prog [system object files and args] /tmp/main.o /tmp/sum.o</code></li> <li>shell \u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u52a0\u8f7d\u5668, \u5c06\u53ef\u6267\u884c\u6587\u4ef6 prog \u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u590d\u5236\u5230\u5185\u5b58, \u7136\u540e\u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u5f00\u5934. <code>linux&gt; ./prog</code></li> </ul> <p></p>"},{"location":"CSAPP/7/#_4","title":"\u76ee\u6807\u6587\u4ef6","text":"<ul> <li>\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6: \u5305\u542b\u4e8c\u8fdb\u5236\u4ee3\u7801\u548c\u6570\u636e, \u5176\u5f62\u5f0f\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u4e0e\u5176\u4ed6\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u5408\u5e76\u8d77\u6765, \u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6.  <ul> <li>\u5171\u4eab\u76ee\u6807\u6587\u4ef6: \u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6, \u53ef\u4ee5\u5728\u52a0\u8f7d\u6216\u8fd0\u884c\u65f6\u88ab\u52a8\u6001\u5730\u52a0\u8f7d\u8fdb\u5185\u5b58\u5e76\u94fe\u63a5.  </li> </ul> </li> <li>\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6: \u5305\u542b\u4e8c\u8fdb\u5236\u4ee3\u7801\u548c\u6570\u636e, \u5176\u5f62\u5f0f\u53ef\u4ee5\u88ab\u76f4\u63a5\u590d\u5236\u5230\u5185\u5b58\u5e76\u6267\u884c.  </li> </ul> <p>\u7f16\u8bd1\u5668\u548c\u6c47\u7f16\u5668\u751f\u6210\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6(\u5305\u62ec\u5171\u4eab\u76ee\u6807\u6587\u4ef6), \u94fe\u63a5\u5668\u751f\u6210\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u4e00\u4e2a\u76ee\u6807\u6a21\u5757\u5c31\u662f\u4e00\u4e2a\u5b57\u8282\u5e8f\u5217, \u800c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u662f\u4e00\u4e2a\u4ee5\u6587\u4ef6\u5f62\u5f0f\u5b58\u653e\u5728\u78c1\u76d8\u7684\u76ee\u6807\u6a21\u5757.  </p> <p>\u73b0\u4ee3 x86-64 Linux \u548c Unix \u7cfb\u7edf\u4f7f\u7528\u53ef\u6267\u884c\u53ef\u94fe\u63a5\u683c\u5f0f(Executable and Linkable Format, ELF).</p>"},{"location":"CSAPP/7/#_5","title":"\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6","text":"<ul> <li> <p>ELF \u5934(header)\u4ee5\u4e00\u4e2a 16 \u5b57\u8282\u7684\u5e8f\u5217\u5f00\u59cb, \u8fd9\u4e2a\u5e8f\u5217\u63cf\u8ff0\u4e86\u751f\u6210\u8be5\u6587\u4ef6\u7684\u7cfb\u7edf\u7684\u5b57\u7684\u5927\u5c0f\u548c\u5b57\u8282\u987a\u5e8f. \u8fd8\u5305\u62ec\u4e86\u5e2e\u52a9\u94fe\u63a5\u5668\u8bed\u6cd5\u5206\u6790\u548c\u89e3\u91ca\u76ee\u6807\u6587\u4ef6\u7684\u4fe1\u606f, \u5982 ELF \u5934\u7684\u5927\u5c0f, \u76ee\u6807\u6587\u4ef6\u7684\u7c7b\u578b, \u673a\u5668\u7c7b\u578b(\u5982 x86-64), \u8282\u5934\u90e8\u8868\u7684\u6587\u4ef6\u504f\u79fb, \u8282\u5934\u90e8\u8868\u4e2d\u6761\u76ee\u7684\u5927\u5c0f\u548c\u6570\u91cf. </p> <ul> <li>\u8282\u5934\u90e8\u8868(section header table): \u63cf\u8ff0\u4e86\u4e0d\u540c\u8282\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f, \u76ee\u6807\u6587\u4ef6\u4e2d\u6bcf\u4e2a\u8282\u90fd\u6709\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u6761\u76ee\u5728\u8868\u4e2d.  </li> <li><code>.text</code>: \u5df2\u7f16\u8bd1\u7a0b\u5e8f\u7684\u673a\u5668\u4ee3\u7801</li> <li><code>.rodata</code>: \u53ea\u8bfb\u6570\u636e. \u5982\u8df3\u8f6c\u8868, printf \u4e2d\u7684\u683c\u5f0f\u4e32.  </li> <li><code>.data</code>: \u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u548c\u9759\u6001 C \u53d8\u91cf.   </li> <li><code>.bss</code>: \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u548c\u9759\u6001 C \u53d8\u91cf, \u4ee5\u53ca\u6240\u6709\u88ab\u521d\u59cb\u5316\u4e3a 0 \u7684\u5168\u5c40\u6216\u9759\u6001\u53d8\u91cf.  </li> <li>\u76ee\u6807\u6587\u4ef6\u4e2d\u8fd9\u4e2a\u8282\u4e0d\u5360\u636e\u5b9e\u9645\u7a7a\u95f4, \u4ec5\u662f\u4e00\u4e2a\u5360\u4f4d\u7b26.   </li> <li>\u533a\u5206\u5df2\u521d\u59cb\u5316\u548c\u672a\u521d\u59cb\u5316\u53d8\u91cf, \u662f\u56e0\u4e3a\u5728\u76ee\u6807\u6587\u4ef6\u4e2d, \u672a\u521d\u59cb\u5316\u53d8\u91cf\u4e0d\u9700\u8981\u5360\u636e\u4efb\u4f55\u5b9e\u9645\u7684\u78c1\u76d8\u7a7a\u95f4, \u8fd0\u884c\u65f6\u518d\u5728\u5185\u5b58\u4e2d\u5206\u914d\u8fd9\u4e9b\u53d8\u91cf, \u521d\u59cb\u503c\u4e3a0.</li> <li>\u5c40\u90e8 C \u53d8\u91cf\u5728\u8fd0\u884c\u65f6\u53ea\u4fdd\u5b58\u5728\u6808\u4e2d, \u4e0d\u51fa\u73b0\u5728<code>.data</code>\u548c<code>.bss</code>\u4e2d.  </li> </ul> </li> <li> <p><code>.symtab</code>: \u4e00\u4e2a\u7b26\u53f7\u8868, \u5b83\u5b58\u653e\u5728\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u548c\u5f15\u7528\u7684\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\u7684\u4fe1\u606f. \u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u5728<code>.symtab</code>\u90fd\u6709\u4e00\u5f20\u7b26\u53f7\u8868. \u4e0d\u5305\u542b\u5c40\u90e8\u53d8\u91cf\u7684\u6761\u76ee.  </p> </li> <li><code>.rel.text</code>: <code>.text</code>\u8282\u7684\u91cd\u5b9a\u4f4d\u4fe1\u606f, \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u9700\u8981\u4fee\u6539\u7684\u6307\u4ee4\u5730\u5740</li> <li> <p><code>.rel.data</code>: <code>.data</code>\u8282\u7684\u91cd\u5b9a\u4f4d\u4fe1\u606f, \u5408\u5e76\u540e\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u9700\u8981\u4fee\u6539\u7684\u6307\u9488\u6570\u636e\u7684\u5730\u5740</p> <ul> <li>\u4e00\u822c\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf, \u5982\u679c\u521d\u59cb\u503c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u5730\u5740\u6216\u5916\u90e8\u5b9a\u4e49\u51fd\u6570\u7684\u5730\u5740, \u5c31\u9700\u8981\u88ab\u4fee\u6539.</li> <li>\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5df2\u5b8c\u6210\u91cd\u5b9a\u4f4d, \u5c31\u4e0d\u9700\u8981<code>.rel.text</code>\u548c<code>.rel.data</code>\u6570\u636e\u8282.  </li> </ul> </li> <li> <p><code>.debug</code>: \u8c03\u8bd5\u7b26\u53f7\u8868, \u6761\u76ee\u662f\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u548c\u7c7b\u578b\u5b9a\u4e49, \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u548c\u5f15\u7528\u7684\u5168\u5c40\u53d8\u91cf, \u4ee5\u53ca\u539f\u59cb\u7684 C \u6e90\u6587\u4ef6.  </p> </li> <li><code>.line</code>: \u539f\u59cb C \u6e90\u7a0b\u5e8f\u4e2d\u7684\u884c\u53f7\u548c<code>.text</code>\u8282\u4e2d\u673a\u5668\u6307\u4ee4\u4e4b\u95f4\u7684\u6620\u5c04.  \u6ce8\u610f: \u53ea\u6709\u4ee5 -g \u9009\u9879\u8c03\u7528\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\uff0c\u624d\u4f1a\u51fa\u73b0<code>.debug</code>\u548c<code>.line</code></li> <li><code>.strtab</code>\uff1a \u5b57\u7b26\u4e32\u8868, \u5305\u62ec<code>.symtab</code>\u548c<code>.debug</code>\u8282\u4e2d\u7684\u7b26\u53f7\u8868, \u4ee5\u53ca\u8282\u5934\u90e8\u4e2d\u7684\u8282\u540d\u5b57  </li> </ul>"},{"location":"CSAPP/7/#_6","title":"\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6","text":"<ul> <li>ELF \u5934\u63cf\u8ff0\u6587\u4ef6\u7684\u603b\u4f53\u683c\u5f0f, \u8fd8\u5305\u62ec\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9(entry point), \u5373\u7a0b\u5e8f\u6267\u884c\u65f6\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740.  </li> <li><code>.init</code>\u8282\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5c0f\u51fd\u6570<code>_init</code>, \u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u4ee3\u7801\u4f1a\u8c03\u7528\u5b83.   </li> <li>\u56e0\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u662f\u5b8c\u5168\u94fe\u63a5\u7684(\u5df2\u88ab\u91cd\u5b9a\u4f4d), \u56e0\u6b64\u5b83\u4e0d\u9700\u8981 rel \u8282.  </li> </ul> <p>\u7a0b\u5e8f\u5934\u90e8\u8868\u63cf\u8ff0\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u8fde\u7eed\u7684\u7247\u88ab\u6620\u5c04\u5230\u8fde\u7eed\u7684\u5185\u5b58\u6bb5\u7684\u6620\u5c04\u5173\u7cfb.  </p> <p></p> <ul> <li>off \u662f\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u504f\u79fb, \u8868\u793a\u8981\u4ece\u76ee\u6807\u6587\u4ef6\u7684\u4ec0\u4e48\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u8be5\u6bb5</li> <li>vaddr/paddr \u662f\u5185\u5b58\u5730\u5740, \u8868\u793a\u8981\u5c06\u8be5\u6bb5\u52a0\u8f7d\u5230\u7684\u5185\u5b58\u5730\u5740</li> <li>align \u662f\u5bf9\u9f50\u8981\u6c42</li> <li>filesz \u662f\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6bb5\u5927\u5c0f, \u5219\u901a\u8fc7 off \u548c filesz \u5c31\u80fd\u786e\u5b9a\u6211\u4eec\u8981\u52a0\u8f7d\u7684\u6bb5\u7684\u5185\u5bb9</li> <li>memsz \u662f\u5185\u5b58\u4e2d\u7684\u6bb5\u5927\u5c0f, \u8868\u793a\u6211\u4eec\u5c06\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u8be5\u6bb5\u52a0\u8f7d\u5230\u591a\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d</li> <li>flags \u8868\u793a\u8be5\u6bb5\u8fd0\u884c\u65f6\u7684\u8bbf\u95ee\u6743\u9650</li> </ul> <p>\u5bf9\u4efb\u4f55\u6bb5 s, \u94fe\u63a5\u5668\u5fc5\u987b\u9009\u62e9\u4e00\u4e2a\u8d77\u59cb\u5730\u5740 vaddr, \u4f7f\u5f97 vaddr mod aligh = off mod align. \u8fd9\u79cd\u5bf9\u9f50\u662f\u4e00\u79cd\u4f18\u5316, \u4f7f\u5f97\u5f53\u7a0b\u5e8f\u6267\u884c\u65f6, \u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6bb5\u80fd\u6709\u6548\u7387\u5730\u4f20\u9001\u5230\u5185\u5b58\u4e2d.  </p>"},{"location":"CSAPP/7/#_7","title":"\u7b26\u53f7\u548c\u7b26\u53f7\u8868","text":"<p>\u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6a21\u5757 m \u90fd\u6709\u4e00\u4e2a\u7b26\u53f7\u8868. \u5b83\u5305\u542b m \u5b9a\u4e49\u548c\u5f15\u7528\u7684\u7b26\u53f7\u7684\u97f3\u7cfb.</p> <ul> <li>\u5168\u5c40\u94fe\u63a5\u5668\u7b26\u53f7: \u7531\u6a21\u5757 m \u5b9a\u4e49\u5e76\u80fd\u88ab\u5176\u4ed6\u6a21\u5757\u5f15\u7528\u7684\u5168\u5c40\u7b26\u53f7. \u5bf9\u5e94\u975e\u9759\u6001\u7684 C \u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf.  </li> <li>\u5916\u90e8\u7b26\u53f7: \u7531\u5176\u4ed6\u6a21\u5757\u5b9a\u4e49\u5e76\u88ab m \u6a21\u5757\u5f15\u7528\u7684\u5168\u5c40\u7b26\u53f7. \u5bf9\u5e94\u5176\u4ed6\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u975e\u9759\u6001\u7684 C \u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf.  </li> <li>\u5c40\u90e8\u7b26\u53f7: \u53ea\u88ab\u6a21\u5757 m \u5b9a\u4e49\u548c\u5f15\u7528. \u5bf9\u5e94\u5e26 static \u5c5e\u6027\u7684 C \u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf.  </li> </ul> <p>Note</p> <p>\u5c40\u90e8\u9759\u6001\u53d8\u91cf\u4e0d\u5728\u6808\u4e2d\u7ba1\u7406, \u56e0\u6b64\u9700\u8981\u7f16\u8bd1\u5668\u5728<code>.data</code>\u6216<code>.bss</code>\u4e2d\u4e3a\u6bcf\u4e2a\u5b9a\u4e49\u5206\u914d\u7a7a\u95f4, \u5e76\u5728\u7b26\u53f7\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u6709\u552f\u4e00\u540d\u5b57\u7684\u672c\u5730\u94fe\u63a5\u5668\u7b26\u53f7.  </p> <p><code>.symtab</code> \u4e2d\u6bcf\u4e2a\u6761\u76ee\u7684\u683c\u5f0f:  </p> <ul> <li>name: \u7b26\u53f7\u7684\u540d\u5b57, \u662f\u5728\u5b57\u7b26\u4e32\u8868<code>.strtab</code>\u4e2d\u7684\u5b57\u8282\u504f\u79fb.  </li> <li>value: \u7b26\u53f7\u7684\u5730\u5740. \u5bf9\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u6765\u8bf4, value \u662f\u8ddd\u5b9a\u4e49\u76ee\u6807\u7684\u8282\u7684\u8d77\u59cb\u4f4d\u7f6e\u7684\u504f\u79fb(\u5982\u51fd\u6570\u88ab\u5b9a\u4e49\u5728<code>.text</code>\u4e2d, value \u5c31\u662f\u5b9a\u4e49\u7684\u4f4d\u7f6e\u8ddd\u79bb\u6b64\u8282\u4e2d\u7684\u504f\u79fb);  \u5bf9\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u6765\u8bf4, value \u662f\u7edd\u5bf9\u8fd0\u884c\u65f6\u7684\u5730\u5740.  </li> <li>size: \u76ee\u6807\u7684\u5927\u5c0f(\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d)  </li> <li>type: \u8bf4\u660e\u8be5\u7b26\u53f7\u7684\u7c7b\u578b, \u662f\u51fd\u6570, \u53d8\u91cf\u8fd8\u662f\u6570\u636e\u8282\u7b49\u7b49.  </li> <li>binding: \u8bf4\u660e\u8be5\u7b26\u53f7\u662f\u672c\u5730\u7684\u8fd8\u662f\u5c40\u90e8\u7684.  </li> <li>section: \u8bf4\u660e\u8be5\u7b26\u53f7\u4fdd\u5b58\u5728\u76ee\u6807\u6587\u4ef6\u7684\u54ea\u4e2a\u8282\u4e2d, \u4e5f\u662f\u8282\u5934\u90e8\u8868\u4e2d\u7684\u4e00\u4e2a\u7d22\u5f15(\u504f\u79fb\u91cf) \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u6709\u4e09\u4e2a\u65e0\u6cd5\u901a\u8fc7\u8282\u5934\u90e8\u8868\u7d22\u5f15\u7684\u6570\u636e\u8282, \u79f0\u4e3a\u4f2a\u8282(pseudosection).(\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u6ca1\u6709)<ul> <li>ABS: \u4ee3\u8868\u4e0d\u8be5\u88ab\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7</li> <li>UNDEF: \u4ee3\u8868\u672a\u5b9a\u4e49\u7684\u7b26\u53f7, \u4e5f\u5c31\u662f\u5728\u672c\u76ee\u6807\u6a21\u5757\u4e2d\u5f15\u7528\u5374\u5728\u5176\u4ed6\u5730\u65b9\u5b9a\u4e49\u7684\u7b26\u53f7</li> <li>COMMON: \u4ee3\u8868\u8fd8\u672a\u88ab\u5206\u914d\u4f4d\u7f6e\u7684\u672a\u521d\u59cb\u5316\u7684\u6570\u636e\u76ee\u6807.(\u5982\u672a\u88ab\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf) \u6b64\u65f6 value \u7ed9\u51fa\u5bf9\u9f50\u8981\u6c42, size \u7ed9\u51fa\u6700\u5c0f\u5927\u5c0f.  </li> </ul> </li> </ul>"},{"location":"CSAPP/7/#_8","title":"\u9759\u6001\u94fe\u63a5","text":"<p>Linux LD \u7a0b\u5e8f\u8fd9\u6837\u7684\u9759\u6001\u94fe\u63a5\u5668\u4ee5\u4e00\u7ec4\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u53c2\u6570\u4f5c\u4e3a\u8f93\u5165, \u751f\u6210\u4e00\u4e2a\u5b8c\u5168\u94fe\u63a5\u7684, \u53ef\u4ee5\u52a0\u8f7d\u548c\u8fd0\u884c\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4f5c\u4e3a\u8f93\u51fa. \u4e3a\u4e86\u6784\u9020\u53ef\u6267\u884c\u6587\u4ef6, \u94fe\u63a5\u5668\u5fc5\u987b\u5b8c\u6210\u4e24\u4e2a\u4e3b\u8981\u4efb\u52a1:  </p> <ul> <li>\u7b26\u53f7\u89e3\u6790(symbol resolution): \u76ee\u6807\u6587\u4ef6\u5b9a\u4e49\u548c\u5f15\u7528\u7b26\u53f7, \u6bcf\u4e2a\u7b26\u53f7\u5bf9\u5e94\u4e00\u4e2a\u51fd\u6570, \u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6216\u4e00\u4e2a\u9759\u6001\u53d8\u91cf. \u7b26\u53f7\u89e3\u6790\u7684\u76ee\u7684\u662f\u5c06\u6bcf\u4e2a\u7b26\u53f7\u5f15\u7528\u6b63\u597d\u548c\u4e00\u4e2a\u7b26\u53f7\u5b9a\u4e49\u5173\u8054\u8d77\u6765.  </li> <li>\u91cd\u5b9a\u4f4d(relocation): \u7f16\u8bd1\u5668\u548c\u6c47\u7f16\u5668\u751f\u6210\u4ece\u5730\u5740 0 \u5f00\u59cb\u7684\u4ee3\u7801\u548c\u6570\u636e\u8282. \u8fde\u63a5\u5668\u901a\u8fc7\u628a\u6bcf\u4e2a\u7b26\u53f7\u5b9a\u4e49\u4e0e\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5173\u8054\u8d77\u6765, \u4ece\u800c\u91cd\u5b9a\u4f4d\u8fd9\u4e9b\u8282, \u7136\u540e\u4fee\u6539\u6240\u6709\u5bf9\u8fd9\u4e9b\u7b26\u53f7\u7684\u5f15\u7528, \u4f7f\u5f97\u5b83\u4eec\u6307\u5411\u8fd9\u4e2a\u5185\u5b58\u4f4d\u7f6e.  </li> </ul>"},{"location":"CSAPP/7/#_9","title":"\u7b26\u53f7\u89e3\u6790","text":"<p>\u94fe\u63a5\u5668\u89e3\u6790\u7b26\u53f7\u5f15\u7528\u7684\u65b9\u6cd5\u662f\u5c06\u6bcf\u4e2a\u5f15\u7528\u4e0e\u5b83\u8f93\u5165\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4e2d\u4e00\u4e2a\u786e\u5b9a\u7684\u7b26\u53f7\u5b9a\u4e49\u5173\u8054\u8d77\u6765.  </p> <ul> <li>\u5bf9\u5c40\u90e8\u7b26\u53f7, \u5f15\u7528\u548c\u5b9a\u4e49\u90fd\u5728\u76f8\u540c\u6a21\u5757\u4e2d, \u7b26\u53f7\u89e3\u6790\u662f\u7b80\u5355\u660e\u4e86\u7684. \u7f16\u8bd1\u5668\u53ea\u5141\u8bb8\u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u6bcf\u4e2a\u5c40\u90e8\u7b26\u53f7\u53ea\u6709\u4e00\u4e2a\u5b9a\u4e49. \u800c\u5c40\u90e8\u9759\u6001\u53d8\u91cf(\u6839\u636e\u5b9a\u4e49\u4e0d\u5c5e\u4e8e\u5c40\u90e8\u7b26\u53f7)\u4e5f\u4f1a\u6709\u5c40\u90e8\u94fe\u63a5\u5668\u7b26\u53f7, \u6240\u4ee5\u7f16\u8bd1\u5668\u8fd8\u8981\u786e\u4fdd\u5b83\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u5b57.  </li> <li>\u5bf9\u5168\u5c40\u6216\u5916\u90e8\u7b26\u53f7, \u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u78b0\u5230\u4e0d\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\uff0c\u5219\u4f1a\u5047\u8bbe\u8be5\u7b26\u53f7\u662f\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\uff0c\u5c31\u4f1a\u5728\u91cd\u5b9a\u4f4d\u8868\u4e2d\u4ea7\u751f\u8be5\u7b26\u53f7\u7684\u6761\u76ee\uff0c\u8ba9\u94fe\u63a5\u5668\u53bb\u89e3\u51b3. \u800c\u94fe\u63a5\u5668\u53ef\u80fd\u8fd8\u4f1a\u78b0\u5230\u5728\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u5b9a\u4e49\u76f8\u540c\u540d\u5b57\u7684\u5168\u5c40\u7b26\u53f7\uff0c\u4e5f\u8981\u89e3\u51b3\u8fd9\u4e9b\u51b2\u7a81.  </li> </ul>"},{"location":"CSAPP/7/#_10","title":"\u89e3\u6790\u591a\u91cd\u5b9a\u4e49\u7684\u5168\u5c40\u7b26\u53f7","text":"<p>\u5728\u7f16\u8bd1\u65f6, \u7f16\u8bd1\u5668\u4f1a\u5411\u6c47\u7f16\u5668\u8f93\u51fa\u6bcf\u4e2a\u5168\u5c40\u7b26\u53f7\u662f\u5f3a\u8fd8\u662f\u5f31\u7684\u4fe1\u606f, \u6c47\u7f16\u5668\u5c06\u8fd9\u4e2a\u4fe1\u606f\u9690\u542b\u5730\u7f16\u7801\u5728\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u91cc. \u51fd\u6570\u548c\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u662f\u5f3a\u7b26\u53f7, \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u662f\u5f31\u7b26\u53f7. \u89c4\u5219:  </p> <ul> <li>\u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\u540c\u540d\u7684\u5f3a\u7b26\u53f7.  </li> <li>\u5982\u679c\u6709\u4e00\u4e2a\u5f3a\u7b26\u53f7\u4e0e\u591a\u4e2a\u5f31\u7b26\u53f7\u540c\u540d, \u90a3\u4e48\u9009\u62e9\u5f3a\u7b26\u53f7.  </li> <li>\u5982\u679c\u6709\u591a\u4e2a\u5f31\u7b26\u53f7\u540c\u540d, \u90a3\u4e48\u9009\u62e9\u4efb\u610f\u4e00\u4e2a.  </li> </ul> <p>\u5f53\u7f16\u8bd1\u5668\u9047\u5230\u4e00\u4e2a\u5f31\u5168\u5c40\u7b26\u53f7\u65f6, \u5b83\u65e0\u6cd5\u786e\u5b9a\u5176\u4ed6\u6a21\u5757\u662f\u5426\u6709\u5b9a\u4e49, \u4e5f\u65e0\u6cd5\u786e\u5b9a\u94fe\u63a5\u5668\u4f1a\u91c7\u7528\u54ea\u4e2a\u5b9a\u4e49, \u6240\u4ee5\u7f16\u8bd1\u5668\u628a\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u7b26\u53f7\u653e\u5728<code>common</code>\u8868\u4e2d, \u8ba9\u94fe\u63a5\u5668\u53bb\u51b3\u5b9a. \u800c\u5df2\u7ecf\u88ab\u521d\u59cb\u5316 0 \u7684\u5168\u5c40\u53d8\u91cf, \u4ed6\u5fc5\u7136\u662f\u552f\u4e00\u7684, \u7f16\u8bd1\u5668\u53ef\u4ee5\u81ea\u4fe1\u5730\u628a\u4ed6\u5206\u914d\u7ed9<code>.bss</code>. \u9759\u6001\u7b26\u53f7\u4e5f\u662f\u552f\u4e00\u7684, \u7f16\u8bd1\u5668\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u653e\u5230<code>.data</code>\u6216<code>.bss</code>\u4e2d.(\u53d6\u51b3\u4e8e\u662f\u5426\u88ab\u521d\u59cb\u5316\u4ee5\u53ca\u662f\u5426\u88ab\u521d\u59cb\u5316\u4e3a0) \u9700\u8981\u6ce8\u610f\u7684\u662f, \u540c\u540d\u7b26\u53f7\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f\u4e0d\u540c\u7684, \u56e0\u6b64\u89c4\u5219 23 \u53ef\u80fd\u5e26\u6765\u610f\u60f3\u4e0d\u5230\u7684\u9519\u8bef.  </p>"},{"location":"CSAPP/7/#_11","title":"\u4e0e\u9759\u6001\u5e93\u94fe\u63a5","text":"<p>\u7f16\u8bd1\u7cfb\u7edf\u63d0\u4f9b\u4e00\u79cd\u673a\u5236, \u5c06\u6240\u6709\u76f8\u5173\u7684\u76ee\u6807\u6a21\u5757\u6253\u5305\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6, \u79f0\u4e3a\u9759\u6001\u5e93(static library). \u5b83\u53ef\u4ee5\u7528\u4f5c\u94fe\u63a5\u5668\u7684\u8f93\u5165. \u5f53\u94fe\u63a5\u5668\u6784\u9020\u4e00\u4e2a\u8f93\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6\u65f6, \u5b83\u53ea\u590d\u5236\u9759\u6001\u5e93\u91cc\u88ab\u5e94\u7528\u7a0b\u5e8f\u5f15\u7528\u7684\u76ee\u6807\u6a21\u5757, \u8fd9\u51cf\u5c11\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e2d\u7684\u5927\u5c0f. \u5728 Linux \u7cfb\u7edf\u4e2d, \u9759\u6001\u5e93\u4ee5\u4e00\u79cd\u5b58\u6863(archive) \u7684\u7279\u6b8a\u6587\u4ef6\u683c\u5f0f\u5b58\u653e\u5728\u78c1\u76d8\u4e2d. \u5b58\u6863\u6587\u4ef6\u662f\u4e00\u7ec4\u8fde\u63a5\u8d77\u6765\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u96c6\u5408, \u6709\u4e00\u4e2a\u5934\u90e8\u6765\u63cf\u8ff0\u6bcf\u4e2a\u6210\u5458\u76ee\u6807\u6587\u4ef6\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e. \u5b58\u6863\u6587\u4ef6\u94ed\u7531\u540e\u7f00 .a \u6807\u8bc6.</p> <p>\u521b\u5efa\u9759\u6001\u5e93</p> <p> \u8981\u628a\u8fd9\u4e9b\u51fd\u6570\u521b\u5efa\u4e3a\u4e00\u4e2a\u9759\u6001\u5e93, \u6211\u4eec\u4f7f\u7528 AR \u5de5\u5177. <pre><code>linux&gt; gcc -c addvec.c multvec.c\nlinux&gt; ar rcs libvector.a addvec.o multvec.o\n</code></pre> \u7531\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u9759\u6001\u5e93 libvector.a</p> <p>\u4e0e\u9759\u6001\u5e93\u94fe\u63a5</p> <p><pre><code>// main2.c\n#include &lt;stdio.h&gt;\n#include \"vector.h\"\nint x[2] = {1, 2};\nint y[2] = {3, 4};\nint z[2];\nint main()\n{\naddvec(x, y, z, 2);\nprintf(\"z = [%d %d]\\n\", z[0], z[1]);\nreturn 0;\n}\n</code></pre> \u4e3a\u4e86\u521b\u5efa\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6, \u6211\u4eec\u8981\u7f16\u8bd1\u548c\u94fe\u63a5\u8f93\u5165\u6587\u4ef6 main2.o \u548c libvector.a <pre><code>linux&gt; gcc -c main2.c\nlinux&gt; gcc -static -o prog2c main2.o ./libvector.a\n</code></pre> \u6216\u8005\u7b2c\u4e8c\u884c\u4e5f\u53ef<code>gcc -static -o prog2c main.o -L. -lvector</code> \u8fd9\u91cc\u7684 -lvector \u662f libvector.a \u7684\u7f29\u5199, -L. \u544a\u8bc9\u94fe\u63a5\u5668\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u67e5\u627e libvector.a \u9759\u6001\u5e93. </p>"},{"location":"CSAPP/7/#_12","title":"\u4f7f\u7528\u9759\u6001\u5e93\u89e3\u6790\u5f15\u7528","text":"<p>\u7b26\u53f7\u89e3\u6790\u9636\u6bb5, \u94fe\u63a5\u5668\u4ece\u5de6\u5230\u53f3\u6309\u7167\u5b83\u4eec\u5728\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\u547d\u4ee4\u884c\u4e0a\u51fa\u73b0\u7684\u987a\u5e8f\u626b\u63cf\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u548c\u5b58\u6863\u6587\u4ef6.(\u9a71\u52a8\u7a0b\u5e8f\u81ea\u52a8\u5c06 .c \u7ffb\u8bd1\u4e3a .o \u6587\u4ef6) \u626b\u63cf\u4e2d\u94fe\u63a5\u5668\u7ef4\u62a4\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u96c6\u5408 E(\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u6587\u4ef6\u4f1a\u88ab\u5408\u5e76\u8d77\u6765\u5f62\u6210\u53ef\u6267\u884c\u6587\u4ef6), \u4e00\u4e2a\u672a\u89e3\u6790\u7684\u7b26\u53f7(\u5373\u5f15\u7528\u4e86\u4f46\u662f\u5c1a\u672a\u5b9a\u4e49\u7684\u7b26\u53f7)\u96c6\u5408 U, \u4ee5\u53ca\u4e00\u4e2a\u5728\u524d\u9762\u8f93\u5165\u6587\u4ef6\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u7684\u7b26\u53f7\u96c6\u5408 D. \u521d\u59cb\u65f6, E D U \u5747\u4e3a\u7a7a.  </p> <ul> <li>\u5bf9\u4e8e\u547d\u4ee4\u884c\u4e0a\u6bcf\u4e2a\u8f93\u5165\u6587\u4ef6 f, \u94fe\u63a5\u5668\u4f1a\u5224\u65ad f \u662f\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u8fd8\u662f\u4e00\u4e2a\u5b58\u6863\u6587\u4ef6. <ul> <li>\u76ee\u6807\u6587\u4ef6: \u628a f \u6dfb\u52a0\u5230 E, \u4fee\u6539 U \u548c D \u6765\u53cd\u6620 f \u4e2d\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u4f7f\u7528.</li> <li>\u5b58\u6863\u6587\u4ef6: \u94fe\u63a5\u5668\u5c1d\u8bd5\u5339\u914d U \u4e2d\u672a\u89e3\u6790\u7684\u7b26\u53f7\u548c\u7531\u5b58\u6863\u6587\u4ef6\u6210\u5458\u5b9a\u4e49\u7684\u7b26\u53f7. \u5982\u679c\u67d0\u4e2a\u5b58\u6863\u6587\u4ef6\u6210\u5458 m, \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b26\u53f7\u6765\u89e3\u6790 U \u4e2d\u7684\u5f15\u7528(\u5373 m \u5b9a\u4e49\u4e86\u4e00\u4e2a U \u4e2d\u7684\u7b26\u53f7), \u90a3\u4e48\u5c31\u5c06 m \u52a0\u5165\u5230 E \u4e2d, \u5e76\u4e14\u94fe\u63a5\u5668\u4fee\u6539 U \u548c D \u6765\u53cd\u6620 m \u4e2d\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u5f15\u7528. \u5176\u4ed6\u4e0d\u5305\u542b\u5728 E \u4e2d\u7684\u6210\u5458\u5c06\u88ab\u629b\u5f03.  </li> </ul> </li> <li>\u5982\u679c\u5f53\u94fe\u63a5\u5668\u5b8c\u6210\u5bf9\u6587\u4ef6\u7684\u626b\u63cf\u540e, U \u662f\u975e\u7a7a\u7684, \u90a3\u4e48\u94fe\u63a5\u5668\u5c31\u4f1a\u8f93\u51fa\u4e00\u4e2a\u9519\u8bef\u5e76\u7ec8\u6b62. \u5426\u5219\u5b83\u4f1a\u5408\u5e76\u548c\u91cd\u5b9a\u4f4d E \u4e2d\u7684\u76ee\u6807\u6587\u4ef6, \u6784\u5efa\u8f93\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6.  </li> </ul> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f, \u5982\u679c\u5b9a\u4e49\u4e00\u4e2a\u7b26\u53f7\u7684\u5e93\u51fa\u73b0\u5728\u5f15\u7528\u8fd9\u4e2a\u7b26\u53f7\u7684\u76ee\u6807\u6587\u4ef6\u4e4b\u524d, \u90a3\u4e48\u5f15\u7528\u662f\u4e0d\u80fd\u88ab\u89e3\u6790\u7684, \u94fe\u63a5\u4f1a\u5931\u8d25. \u5173\u4e8e\u5e93\u7684\u4e00\u822c\u51c6\u5219\u662f\u628a\u5b83\u4eec\u653e\u5728\u547d\u4ee4\u884c\u7684\u7ed3\u5c3e. \u5982\u679c\u5e93\u4e0d\u662f\u76f8\u4e92\u72ec\u7acb\u7684, \u9700\u8981\u5bf9\u4ed6\u4eec\u6392\u5e8f.  </p>"},{"location":"CSAPP/7/#_13","title":"\u91cd\u5b9a\u4f4d","text":"<p>\u5f53\u94fe\u63a5\u5668\u5b8c\u6210\u4e86\u7b26\u53f7\u89e3\u6790, \u5c31\u8981\u5f00\u59cb\u91cd\u5b9a\u4f4d. \u8fd9\u4e2a\u6b65\u9aa4\u4e2d, \u5c06\u5408\u5e76\u8f93\u5165\u6a21\u5757\u5e76\u4e3a\u6bcf\u4e2a\u7b26\u53f7\u5206\u914d\u8fd0\u884c\u65f6\u5730\u5740.</p> <ul> <li>\u91cd\u5b9a\u4f4d\u8282\u548c\u7b26\u53f7\u5b9a\u4e49 \u94fe\u63a5\u5668\u5c06\u6240\u6709\u76f8\u540c\u7c7b\u578b\u7684\u8282\u5408\u5e76\u4e3a\u540c\u4e00\u7c7b\u578b\u7684\u805a\u5408\u8282. \u4f8b\u5982\u6765\u81ea\u6240\u6709\u8f93\u5165\u6a21\u5757\u7684<code>.data</code>\u8282\u88ab\u5168\u90e8\u5408\u5e76\u4e3a\u4e00\u4e2a\u8282, \u8fd9\u4e2a\u8282\u6210\u4e3a\u8f93\u51fa\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684<code>.data</code>\u8282. \u7136\u540e\u94fe\u63a5\u5668\u5c06\u8fd0\u884c\u65f6\u5185\u5b58\u5730\u5740\u8d4b\u7ed9\u65b0\u7684\u805a\u5408\u8282, \u8d4b\u7ed9\u8f93\u5165\u6a21\u5757\u5b9a\u4e49\u7684\u6bcf\u4e2a\u8282, \u4ee5\u53ca\u8f93\u5165\u6a21\u5757\u5b9a\u4e49\u7684\u6bcf\u4e2a\u7b26\u53f7.  </li> <li>\u91cd\u5b9a\u4f4d\u8282\u4e2d\u7684\u7b26\u53f7\u5f15\u7528 \u94fe\u63a5\u5668\u4fee\u6539\u4ee3\u7801\u8282\u548c\u6570\u636e\u8282\u4e2d\u5bf9\u6bcf\u4e2a\u7b26\u53f7\u7684\u5f15\u7528, \u4f7f\u5176\u6307\u5411\u6b63\u786e\u7684\u8fd0\u884c\u65f6\u4f4d\u7f6e.  </li> </ul>"},{"location":"CSAPP/7/#_14","title":"\u91cd\u5b9a\u4f4d\u6761\u76ee","text":"<p>\u65e0\u8bba\u4f55\u65f6, \u6c47\u7f16\u5668\u9047\u5230\u5bf9\u6700\u7ec8\u4f4d\u7f6e\u672a\u77e5\u7684\u76ee\u6807\u5f15\u7528, \u5b83\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a\u91cd\u5b9a\u4f4d\u6761\u76ee, \u544a\u8bc9\u94fe\u63a5\u5668\u5728\u5c06\u76ee\u6807\u6587\u4ef6\u5408\u5e76\u6210\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u5982\u4f55\u4fee\u6539\u8fd9\u4e2a\u5f15\u7528. \u4ee3\u7801\u7684\u91cd\u5b9a\u4f4d\u6761\u76ee\u653e\u5728<code>.rel.text</code>\u4e2d, \u5df2\u521d\u59cb\u5316\u7684\u6570\u636e\u7684\u91cd\u5b9a\u4f4d\u6761\u76ee\u653e\u5728<code>.rel.data</code>\u4e2d.  </p> <p></p> <ul> <li>offset: \u9700\u8981\u88ab\u4fee\u6539\u7684\u5f15\u7528\u7684\u8282\u504f\u79fb</li> <li>symbol: \u88ab\u4fee\u6539\u5f15\u7528\u7684\u7b26\u53f7</li> <li>type: \u544a\u77e5\u94fe\u63a5\u5668\u5982\u4f55\u4fee\u6539\u65b0\u7684\u5f15\u7528(\u76f8\u5bf9/\u7edd\u5bf9\u5bfb\u5740)</li> <li>addend: \u4e00\u4e2a\u6709\u7b26\u53f7\u5e38\u6570, \u4e00\u4e9b\u7c7b\u578b\u7684\u91cd\u5b9a\u4f4d\u9700\u8981\u4f7f\u7528\u5b83\u5bf9\u4fee\u6539\u5f15\u7528\u7684\u503c\u505a\u504f\u79fb\u8c03\u6574.  </li> </ul> <p>ELF \u5b9a\u4e49\u4e86\u4e24\u79cd\u57fa\u672c\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b:  </p> <ul> <li>R_X86_64_PC32: \u4f7f\u7528 32 \u4f4d PC \u76f8\u5bf9\u5730\u5740\u7684\u5f15\u7528.(\u6ce8\u610f\u4e00\u822c PC \u662f\u4e0b\u4e00\u6761\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740)</li> <li>R_X86_64_32: \u4f7f\u7528 32 \u4f4d\u7edd\u5bf9\u5730\u5740\u7684\u5f15\u7528.  </li> </ul>"},{"location":"CSAPP/7/#_15","title":"\u91cd\u5b9a\u4f4d\u7b26\u53f7\u5f15\u7528","text":"<p><pre><code>int sum(int *a, int n)      //defined in sum.c\nint array[2] = {1, 2};\nint main()\n{\nint val = sum(array, 2);\nreturn val;\n}\n</code></pre> \u5176\u53cd\u6c47\u7f16\u4ee3\u7801\u4e3a:  </p> <ul> <li> <p>\u91cd\u5b9a\u4f4d PC \u76f8\u5bf9\u5f15\u7528</p> <p>\u8be5\u91cd\u5b9a\u4f4d\u6761\u76ee\u4e3b\u8981\u7528\u6765\u4ea7\u751f 32 \u4f4dPC\u76f8\u5bf9\u5730\u5740\u7684\u5f15\u7528, \u5373\u51fd\u6570\u8c03\u7528\u65f6\u7684\u91cd\u5b9a\u4f4d.  </p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, main \u8c03\u7528\u51fd\u6570 sum, \u4f46 sum \u51fd\u6570\u662f\u5728 sum.o \u4e2d\u5b9a\u4e49. (\u8d77\u521d call \u540e\u9762\u7684\u6570\u5b57\u662f\u5360\u4f4d\u7b26) \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5176\u91cd\u5b9a\u4f4d\u6761\u76ee:  </p> <pre><code>r.offset = 0xf\nr.symbol = sum\nr.type = R_X86_64_PC32\nr.addend = -4\n</code></pre> <ul> <li>call \u6307\u4ee4\u5f00\u59cb\u4e8e\u8282\u504f\u79fb 0xe \u7684\u5730\u65b9, \u540c\u65f6 call \u672c\u8eab\u7684\u64cd\u4f5c\u7801 0xe8 \u5360\u4e86\u4e00\u4e2a\u5b57\u8282, \u56e0\u6b64 sum \u7684 offset \u4e3a 0xf.</li> <li>addend\u662f\u56e0\u4e3a, \u5f53\u6211\u4eec\u5728\u6267\u884c\u8fd9\u6761\u6307\u4ee4\u65f6, PC \u5df2\u7ecf\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4(0x13), \u9700\u8981\u901a\u8fc7\u8fd9\u4e2a\u504f\u79fb\u91cf\u6765\u8c03\u6574.  </li> </ul> <p>\u6211\u4eec\u5047\u8bbe <pre><code>ADDR(s) = ADDR(.text) = 0x4004d0\nrefaddr = ADDR(s) + r.offset\n= 0x4004d0 + 0xf\n= 0x4004df\n</code></pre> \u90a3\u4e48\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230 <pre><code>refptr = s + r.offset //\u5360\u4f4d\u7b26\u7684\u6307\u9488\nADDR(r.symbol) = ADDR(sum) = 0x4004e8\n*refptr = (unsigned)(ADDR(s.symbol) + r.addend - refaddr)\n= (unsigned)(0x4004e8 + (-4) - 0x4004df)\n= (unsigned) 0x5\n</code></pre></p> <p>\u4e8e\u662f\u6211\u4eec\u6709 <code>4004de:   e8 05 00 00 00  callq 4004e8 &lt;sum&gt;</code></p> </li> <li> <p>\u91cd\u5b9a\u4f4d\u7edd\u5bf9\u5f15\u7528</p> <p>\u8be5\u91cd\u5b9a\u4f4d\u6761\u76ee\u4e3b\u8981\u7528\u6765\u4ea7\u751f 32 \u4f4d\u7edd\u5bf9\u5730\u5740\u7684\u5f15\u7528, \u5373\u6570\u7ec4\u7684\u91cd\u5b9a\u4f4d.  </p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, \u5bf9 array \u7684\u5f15\u7528\u5c31\u4f7f\u7528\u7edd\u5bf9\u5f15\u7528. <pre><code>r.offset = 0xa\nr.symbol = array\nr.type = R_X86_64_32\nr.addend = 0\n</code></pre> \u4e8e\u662f <pre><code>refptr = s + r.offset //\u5360\u4f4d\u7b26\u7684\u6307\u9488\n*refptr = (unsigned)(ADDR(r.symbol) + r.addend)\n= (unsigned) 0x601018 </code></pre> \u6700\u540e\u5f97\u5230 <code>4004d9:    bf 18 10 60 00      mov $0x601018, %edi</code></p> </li> </ul>"},{"location":"CSAPP/7/#_16","title":"\u52a0\u8f7d\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6","text":"<p>\u5f53\u5f97\u5230\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 prog \u540e, \u8f93\u5165<code>linux&gt; ./prog</code>  \u56e0\u4e3a prog \u4e0d\u662f\u4e00\u4e2a\u5185\u7f6e\u7684 shell \u547d\u4ee4, \u6240\u4ee5 shell \u4f1a\u8ba4\u4e3a prog \u662f\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6, \u901a\u8fc7\u8c03\u7528\u67d0\u4e2a\u9a7b\u7559\u5728\u5b58\u50a8\u5668\u4e2d\u88ab\u79f0\u4e3a\u52a0\u8f7d\u5668\u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\u6765\u8fd0\u884c\u5b83. \u52a0\u8f7d\u5668\u5c06\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u4ece\u78c1\u76d8\u590d\u5236\u5230\u5185\u5b58\u4e2d, \u7136\u540e\u901a\u8fc7\u8df3\u8f6c\u5230\u7a0b\u5e8f\u7b2c\u4e00\u6761\u6307\u4ee4\u6216\u5165\u53e3\u70b9\u6765\u8fd0\u884c\u8be5\u7a0b\u5e8f. \u8fd9\u4e2a\u5c06\u7a0b\u5e8f\u590d\u5236\u5230\u5185\u5b58\u5e76\u8fd0\u884c\u7684\u8fc7\u7a0b\u53eb\u52a0\u8f7d.  </p> <p>\u5f53\u52a0\u8f7d\u5668\u8fd0\u884c\u65f6, \u5b83\u521b\u5efa\u7c7b\u4f3c\u4e0b\u56fe\u7684\u5185\u5b58\u6620\u50cf. </p> <ul> <li>\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5: x86-64 \u901a\u5e38\u5c06\u4ee3\u7801\u6bb5\u4fdd\u5b58\u5728 0x400000 \u5904, \u6240\u4ee5\u4f1a\u5c06\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u6620\u5c04\u4e3a\u5982\u4e0a\u5f62\u5f0f.  \u6ce8\u610f: \u8fd9\u91cc\u6570\u636e\u6bb5\u4e3a\u4e86\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42, \u4f1a\u548c\u4ee3\u7801\u6bb5\u4e4b\u95f4\u5b58\u5728\u95f4\u9699.</li> <li>\u8fd0\u884c\u65f6\u5806: \u5728\u6570\u636e\u6bb5\u4e4b\u540e\u4f1a\u6709\u4e00\u4e2a\u8fd0\u884c\u65f6\u5806\uff0c\u662f\u901a\u8fc7\u8c03\u7528 malloc \u5e93\u52a8\u6001\u5f80\u4e0a\u589e\u957f\u7684</li> <li>\u5171\u4eab\u5e93: \u5728\u5806\u4e4b\u540e\u662f\u4e00\u4e2a\u5171\u4eab\u5e93\u7684\u5185\u5b58\u6620\u5c04\u533a\u57df</li> <li>\u7528\u6237\u6808: \u7528\u6237\u6808\u662f\u4ece\u6700\u5927\u7684\u5408\u6cd5\u7528\u6237\u5730\u5740\u5f00\u59cb, \u5411\u8f83\u5c0f\u7684\u5730\u5740\u589e\u957f</li> <li>\u5185\u6838: \u6700\u4e0a\u65b9\u7684\u662f\u4f4d\u5185\u6838\u4e2d\u7684\u6570\u636e\u548c\u4ee3\u7801\u4fdd\u7559\u7684, \u662f\u64cd\u4f5c\u7cfb\u7edf\u9a7b\u7559\u5728\u5185\u5b58\u7684\u4f4d\u7f6e</li> </ul>"},{"location":"CSAPP/7/#_17","title":"\u5171\u4eab\u5e93","text":"<p>\u9759\u6001\u5e93\u548c\u6240\u6709\u7684\u8f6f\u4ef6\u4e00\u6837, \u9700\u8981\u5b9a\u671f\u7ef4\u62a4\u548c\u66f4\u65b0. \u6b64\u5916\u51e0\u4e4e\u6bcf\u4e2a C \u7a0b\u5e8f\u90fd\u4f1a\u4f7f\u7528\u6807\u51c6 I/O \u51fd\u6570, \u5728\u8fd0\u884c\u65f6\u8fd9\u4e9b\u51fd\u6570\u88ab\u8d4b\u503c\u5230\u6bcf\u4e2a\u8fd0\u884c\u8fdb\u7a0b\u7684\u6587\u672c\u6bb5\u91cc, \u8fd9\u5bf9\u5185\u5b58\u662f\u6781\u5927\u7684\u6d6a\u8d39. \u5171\u4eab\u5e93(shared library) \u662f\u4e00\u4e2a\u76ee\u6807\u6a21\u5757, \u5728\u8fd0\u884c\u6216\u52a0\u8f7d\u65f6, \u53ef\u4ee5\u52a0\u8f7d\u5230\u4efb\u610f\u7684\u5185\u5b58\u5730\u5740, \u5e76\u548c\u4e00\u4e2a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u94fe\u63a5\u8d77\u6765. \u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u52a8\u6001\u94fe\u63a5, \u662f\u7531\u52a8\u6001\u94fe\u63a5\u5668\u6267\u884c. \u5171\u4eab\u5e93\u4e5f\u88ab\u79f0\u4e3a\u5171\u4eab\u76ee\u6807, linux \u7cfb\u7edf\u4e2d\u901a\u5e38\u7528 .so \u540e\u7f00\u6765\u8868\u793a.  \u52a8\u6001\u94fe\u63a5\u5668\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807, Linux \u4e2d\u4e3a ld-linux.so \u5171\u4eab\u5e93\u4e2d\u7684\"\u5171\u4eab\"\u6709\u4e24\u79cd\u542b\u4e49:  </p> <ul> <li>\u5728\u4efb\u610f\u6587\u4ef6\u7cfb\u7edf\u4e2d, \u5bf9\u4e8e\u4e00\u4e2a\u5e93\u53ea\u6709\u4e00\u4e2a .so \u6587\u4ef6. \u6240\u6709\u5f15\u7528\u8be5\u5e93\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5171\u4eab\u8fd9\u4e2a .so \u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e, \u800c\u4e0d\u662f\u50cf\u9759\u6001\u5e93\u90a3\u6837\u88ab\u590d\u5236\u548c\u5d4c\u5165\u5230\u5f15\u7528\u5b83\u4eec\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u53bb.  </li> <li>\u5728\u5185\u5b58\u4e2d, \u4e00\u4e2a\u5171\u4eab\u5e93\u7684<code>.text</code>\u8282\u7684\u4e00\u4e2a\u526f\u672c\u53ef\u4ee5\u88ab\u4e0d\u540c\u7684\u6b63\u5728\u8fdb\u884c\u7684\u8fdb\u7a0b\u5171\u4eab.   </li> </ul>"},{"location":"CSAPP/7/#_18","title":"\u52a0\u8f7d\u65f6\u52a8\u6001\u94fe\u63a5","text":"<p>\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u751f\u6210\u5171\u4eab\u5e93: <code>linux&gt; gcc -shared -fpic -o libvector.so addvec.c multvec.c</code> \u5176\u4e2d<code>-fpic</code>\u9009\u9879\u6307\u793a\u7f16\u8bd1\u5668\u751f\u6210\u4e0e\u4f4d\u7f6e\u65e0\u5173\u7684\u4ee3\u7801, <code>-share</code>\u9009\u9879\u6307\u793a\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u7684\u76ee\u6807\u6587\u4ef6. \u968f\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u8fd0\u7528\u5171\u4eab\u5e93: <code>linux&gt; gcc -o prog21 main2.c ./libvector.so</code> \u7531\u6b64\u521b\u5efa\u4e86\u53ef\u6267\u884c\u6587\u4ef6 prog21. </p> <ul> <li>\u5728\u521b\u5efa\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6, \u94fe\u63a5\u5668\u4f1a\u590d\u5236\u5171\u4eab\u5e93\u4e2d\u7684\u91cd\u5b9a\u4f4d<code>.rel</code>\u548c\u7b26\u53f7\u8868<code>.symtab</code>\u4fe1\u606f, \u4f7f\u5f97\u8fd0\u884c\u65f6\u53ef\u4ee5\u89e3\u6790\u5bf9\u5171\u4eab\u5e93\u4e2d\u4ee3\u7801\u548c\u6570\u636e\u7684\u5f15\u7528\uff0c\u7531\u6b64\u5f97\u5230\u90e8\u5206\u94fe\u63a5\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u6ce8\u610f: \u6b64\u65f6\u6ca1\u6709\u5c06\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u548c\u6570\u636e\u8282\u590d\u5236\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d.</li> <li>\u8c03\u7528\u52a0\u8f7d\u5668\u52a0\u8f7d\u90e8\u5206\u94fe\u63a5\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6, \u52a0\u8f7d\u5668\u4f1a\u5728\u6bb5\u5934\u90e8\u8868\u7684\u5f15\u5bfc\u4e0b, \u5c06\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u6bb5\u548c\u4ee3\u7801\u6bb5\u590d\u5236\u5230\u5bf9\u5e94\u7684\u5185\u5b58\u4f4d\u7f6e.  </li> <li>\u52a0\u8f7d\u5668\u53ef\u4ee5\u5728 prog2l \u4e2d\u53d1\u73b0<code>.interp</code>\u8282\uff0c\u5176\u4e2d\u4fdd\u5b58\u4e86\u52a8\u6001\u94fe\u63a5\u5668\u7684\u8def\u5f84\uff0c\u5219\u52a0\u8f7d\u5668\u4f1a\u52a0\u8f7d\u548c\u8fd0\u884c\u8fd9\u4e2a\u52a8\u6001\u94fe\u63a5\u5668</li> <li>\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5c06\u4e0d\u540c\u7684\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u548c\u6570\u636e\u4fdd\u5b58\u5230\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\u4e2d</li> <li>\u52a8\u6001\u94fe\u63a5\u5668\u8fd8\u4f1a\u6839\u636e\u5171\u4eab\u5e93\u5728\u5185\u5b58\u7684\u4f4d\u7f6e, \u6765\u91cd\u5b9a\u4f4d prog2l \u4e2d\u6240\u6709\u5bf9\u5171\u4eab\u5e93\u5b9a\u4e49\u7684\u7b26\u53f7\u7684\u5f15\u7528</li> <li>\u6700\u540e\u52a0\u8f7d\u5668\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f, \u6b64\u65f6\u5171\u4eab\u5e93\u7684\u4f4d\u7f6e\u5c31\u56fa\u5b9a\u4e86, \u5e76\u5728\u7a0b\u5e8f\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u6539\u53d8.  </li> </ul>"},{"location":"CSAPP/7/#_19","title":"\u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5","text":"<pre><code>#include &lt;dlfcn.h&gt;\nvoid *dlopen(const char *filename, int flag);\n</code></pre> <p>dlopen \u51fd\u6570\u52a0\u8f7d\u548c\u94fe\u63a5\u5171\u4eab\u5e93 filename, \u5e76\u8fd4\u56de\u53e5\u67c4\u6307\u9488. \u53c2\u6570 flag \u53ef\u7528\u4e8e\u786e\u5b9a\u5171\u4eab\u5e93\u7684\u89e3\u6790\u65b9\u5f0f\u4ee5\u53ca\u4f5c\u7528\u8303\u56f4:  </p> <ul> <li>RTLD_NOW: \u94fe\u63a5\u5668\u7acb\u5373\u89e3\u6790\u5bf9\u5916\u90e8\u7b26\u53f7\u7684\u5f15\u7528</li> <li>RTLD_LAZY: \u94fe\u63a5\u5668\u63a8\u8fdf\u7b26\u53f7\u89e3\u6790\u76f4\u5230\u6267\u884c\u6765\u81ea\u5e93\u4e2d\u7684\u4ee3\u7801</li> <li>RTLD_GLOBAL: \u5171\u4eab\u5e93\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\u53ef\u88ab\u5176\u540e\u6253\u5f00\u7684\u5176\u4ed6\u5e93\u7528\u4e8e\u7b26\u53f7\u89e3\u6790</li> <li>RTLD_LOCAL: \u5171\u4eab\u5e93\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\u4e0d\u80fd\u88ab\u5176\u540e\u6253\u5f00\u7684\u5176\u4ed6\u5e93\u7528\u4e8e\u91cd\u5b9a\u4f4d, \u662f\u9ed8\u8ba4\u7684</li> </ul> <pre><code>#include &lt;dlfcn.h&gt;\nvoid *dlsym(void *handle, char *symbol);\n</code></pre> <p>dlsym \u51fd\u6570\u8fd4\u56de\u4e4b\u524d\u6253\u5f00\u7684\u5171\u4eab\u5e93\u7684\u53e5\u67c4\u4e2dsymbol\u6307\u5b9a\u7684\u7b26\u53f7\u7684\u5730\u5740.</p> <pre><code>#include &lt;dlfcn.h&gt;\nvoid dlclose(void *handle); </code></pre> <p>\u7528\u6765\u5173\u95ed\u6253\u5f00\u7684\u5171\u4eab\u5e93\u53e5\u67c4</p> <pre><code>#include &lt;dlfcn.h&gt;\nconst char *dlerror(void);\n</code></pre> <p>\u5982\u679c dlopen, dlsym \u6216 dlclose \u51fd\u6570\u53d1\u751f\u9519\u8bef, \u5c31\u8fd4\u56de\u5b57\u7b26\u4e32.  </p> <p>Example</p> <p> \u8be5\u7a0b\u5e8f\u5c31\u4f1a\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5e93 libvector.so, \u7136\u540e\u8c03\u7528 addvec \u51fd\u6570. <code>linux&gt; gcc -rdynamic -o prog2r dll.c -ldl</code> \u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u7f16\u8bd1. \u5176\u4e2d<code>-rdynamic</code>\u901a\u77e5\u94fe\u63a5\u5668\u5c06\u5168\u90e8\u7b26\u53f7\u52a0\u5165\u5230\u52a8\u6001\u7b26\u53f7\u8868\u4e2d, \u5c31\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 dlopen \u6765\u5b9e\u73b0\u5411\u540e\u8ddf\u8e2a, <code>-ldl</code>\u8868\u793a\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f1a\u52a8\u6001\u52a0\u8f7d\u5171\u4eab\u5e93.  </p>"},{"location":"CSAPP/7/#_20","title":"\u4f4d\u7f6e\u65e0\u5173\u4ee3\u7801","text":"<p>\u5f53\u94fe\u63a5\u5668\u4ea7\u751f\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u5df2\u4e3a\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8282\u548c\u7b26\u53f7\u5206\u914d\u597d\u4e86\u5185\u5b58\u5730\u5740\uff0c\u5982\u679c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u6709\u5f15\u7528\u5171\u4eab\u5e93\u4e2d\u7684\u7b26\u53f7\u65f6\uff0c\u5c31\u9700\u8981\u5047\u8bbe\u5171\u4eab\u5e93\u7b26\u53f7\u7684\u5730\u5740\u3002\u8f83\u65e9\u5b58\u5728\u9759\u6001\u5171\u4eab\u5e93(Static Shared Library) \u65b9\u6cd5\uff0c\u5373\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5728\u67d0\u4e2a\u7279\u5b9a\u7684\u5730\u5740\u4e2d\u5212\u5206\u4e00\u90e8\u5206\uff0c\u4e3a\u5df2\u77e5\u7684\u5171\u4eab\u5e93\u9884\u7559\u7a7a\u95f4\uff0c\u5219\u5171\u4eab\u5e93\u4f1a\u88ab\u52a0\u8f7d\u5230\u5bf9\u5e94\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u800c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5c31\u53ef\u4ee5\u5728\u5bf9\u5e94\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u627e\u5230\u60f3\u8981\u7684\u5171\u4eab\u5e93\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u4f1a\u9020\u6210\u5730\u5740\u51b2\u7a81\uff0c\u5e76\u9020\u6210\u5730\u5740\u7a7a\u95f4\u7684\u6d6a\u8d39\uff0c\u4ee5\u53ca\u7ef4\u62a4\u7684\u56f0\u96be.   </p> <p>\u6240\u4ee5\u5c31\u60f3\u80fd\u5426\u5c06\u5171\u4eab\u5e93\u52a0\u8f7d\u5230\u4efb\u610f\u7684\u5185\u5b58\u4f4d\u7f6e\uff0c\u8fd8\u80fd\u4f7f\u5f97\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u80fd\u627e\u5230\u3002\u7c7b\u4f3c\u4e8e\u4f7f\u7528\u9759\u6001\u5e93\u65f6\uff0c\u94fe\u63a5\u5668\u4f1a\u6839\u636e\u91cd\u5b9a\u4f4d\u8868\u548c\u5206\u914d\u597d\u7684\u5185\u5b58\u5730\u5740\u6765\u66ff\u6362\u7f16\u8bd1\u65f6\u672a\u77e5\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u52a0\u8f7d\u65f6\u91cd\u5b9a\u4f4d(Load Time Relocation) \u65b9\u6cd5\uff0c\u7531\u4e8e\u7f16\u8bd1\u3001\u6c47\u7f16\u548c\u94fe\u63a5\u65f6\u5bf9\u5171\u4eab\u5e93\u5728\u5185\u5b58\u7684\u4f4d\u7f6e\u662f\u672a\u77e5\u7684\uff0c\u6240\u4ee5\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5bf9\u5171\u4eab\u5e93\u7684\u7b26\u53f7\u7684\u5f15\u7528\u4e5f\u7528\u5360\u4f4d\u7b26\u4ee3\u66ff\uff0c\u5f53\u52a0\u8f7d\u5668\u52a0\u8f7d\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u52a0\u8f7d\u65f6\uff0c\u4f1a\u8c03\u7528\u52a8\u6001\u94fe\u63a5\u52a0\u8f7d\u5668\u5c06\u5171\u4eab\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u6b64\u65f6\u5c31\u80fd\u6839\u636e\u5171\u4eab\u5e93\u88ab\u52a0\u8f7d\u7684\u5185\u5b58\u5730\u5740\uff0c\u5bf9\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u5360\u4f4d\u7b26\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u4f1a\u5bf9\u5171\u4eab\u5e93\u4e2d\u7684\u6307\u4ee4\u8fdb\u884c\u4fee\u6539\uff0c\u7531\u4e8e\u6307\u4ee4\u88ab\u91cd\u5b9a\u4f4d\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\u662f\u4e0d\u540c\u7684\uff0c\u6240\u4ee5\u8be5\u5171\u4eab\u5e93\u65e0\u6cd5\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e2d\u5171\u4eab\u3002\u4f46\u662f\u5171\u4eab\u5e93\u4e2d\u7684\u6570\u636e\u90e8\u5206\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e2d\u662f\u6709\u81ea\u5df1\u5907\u4efd\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u8be5\u65b9\u6cd5\u6765\u89e3\u51b3.    </p> <p>\u6211\u4eec\u7684\u76ee\u7684\u5176\u5b9e\u5c31\u662f\u5e0c\u671b\u5171\u4eab\u7684\u6307\u4ee4\u90e8\u5206\u5728\u88c5\u8f7d\u65f6\u4e0d\u9700\u8981\u56e0\u4e3a\u88c5\u8f7d\u5730\u5740\u7684\u6539\u53d8\u800c\u6539\u53d8\uff0c\u6240\u4ee5\u5b9e\u73b0\u7684\u57fa\u672c\u60f3\u6cd5\u5c31\u662f\u628a\u6307\u4ee4\u4e2d\u90a3\u4e9b\u9700\u8981\u88ab\u4fee\u6539\u7684\u90e8\u5206\u5206\u79bb\u51fa\u6765\uff0c\u8ddf\u6570\u636e\u90e8\u5206\u653e\u5728\u4e00\u8d77\uff0c\u8fd9\u6837\u6307\u4ee4\u90e8\u5206\u5c31\u53ef\u4ee5\u4fdd\u6301\u4e0d\u53d8\uff0c\u800c\u6570\u636e\u90e8\u5206\u53ef\u4ee5\u5728\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u62e5\u6709\u4e00\u4e2a\u526f\u672c\u3002\u8fd9\u79cd\u65b9\u6848\u5c31\u662f\u76ee\u524d\u88ab\u79f0\u4e3a\u5730\u5740\u65e0\u5173\u4ee3\u7801(PC, Position-independent Code) \u7684\u6280\u672f.  </p>"},{"location":"CSAPP/7/#pic","title":"PIC \u6570\u636e\u5f15\u7528","text":"<p>\u5f53\u4f60\u5728\u4ee3\u7801\u4e2d\u8c03\u7528\u5171\u4eab\u5e93\u4e2d\u7684\u51fd\u6570\u6216\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u3001\u6c47\u7f16\u5668\u4ee5\u53ca\u94fe\u63a5\u5668\u5e76\u4e0d\u77e5\u9053\u8be5\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff0c\u53ea\u6709\u5f53\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u52a0\u8f7d\u65f6\u6216\u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5e93\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u5171\u4eab\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u65f6\uff0c\u624d\u77e5\u9053\u5171\u4eab\u5e93\u4e2d\u7684\u5730\u5740.  </p> <p>\u4f46\u662f\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u6bb5\u662f\u4e0d\u53ef\u5199\u7684\uff0c\u6240\u4ee5\u65e0\u6cd5\u901a\u8fc7\u52a8\u6001\u94fe\u63a5\u5668\u5bf9\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u5176\u6307\u5411\u5171\u4eab\u5e93\u7684\u51fd\u6570\u6216\u53d8\u91cf\u7684\u5730\u5740\uff1b\u5176\u6b21\uff0c\u6bd4\u5982\u52a8\u6001\u5e93A\u7684\u51fd\u6570\u8c03\u7528\u4e86\u52a8\u6001\u5e93glibc.so\u4e2d\u5b9a\u4e49\u7684printf\u51fd\u6570\u65f6\uff0c\u53ea\u6709\u5728\u52a8\u6001\u94fe\u63a5\u5668\u52a0\u8f7d\u4e86glibc.so\u65f6\uff0c\u52a8\u6001\u5e93A\u624d\u80fd\u77e5\u9053printf\u51fd\u6570\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff0c\u4f46\u662f\u6211\u4eec\u4e5f\u4e0d\u80fd\u5bf9\u52a8\u6001\u5e93A\u7684\u4ee3\u7801\u6bb5\u8fdb\u884c\u4fee\u6539\uff0c\u5426\u5219\u52a8\u6001\u5e93A\u5c31\u65e0\u6cd5\u5728\u5404\u4e2a\u8fdb\u7a0b\u4e2d\u5171\u4eab\u4e86.  </p> <p>\u6211\u4eec\u5728\u6570\u636e\u6bb5\u7684\u5f00\u59cb\u7684\u5730\u65b9\u521b\u5efa\u4e86\u5168\u5c40\u504f\u79fb\u91cf\u8868(Global Offset Table, GOT). \u5728 GOT \u4e2d, \u6bcf\u4e2a\u88ab\u8fd9\u4e2a\u76ee\u6807\u6a21\u5757\u5f15\u7528\u7684\u5168\u5c40\u6570\u636e\u76ee\u6807(\u8fc7\u7a0b\u6216\u5168\u5c40\u53d8\u91cf)\u90fd\u4f1a\u6709\u4e00\u4e2a 8 \u5b57\u8282\u6761\u76ee. \u7f16\u8bd1\u5668\u8fd8\u4e3a\u5176\u4e2d\u6bcf\u4e2a\u6761\u76ee\u90fd\u751f\u6210\u4e86\u4e00\u4e2a\u91cd\u5b9a\u4f4d\u8bb0\u5f55, \u5728\u52a0\u8f7d\u65f6\u91cd\u5b9a\u4f4d GOT \u4e2d\u6bcf\u4e2a\u6761\u76ee, \u4f7f\u5f97\u5b83\u5305\u542b\u76ee\u6807\u7684\u6b63\u786e\u7684\u7edd\u5bf9\u5730\u5740.  </p> <p>GOT \u7684\u8bbe\u8ba1\u5229\u7528\u4e86\u4e00\u4e2a\u4e8b\u5b9e: \u6570\u636e\u6bb5\u4e0e\u4ee3\u7801\u6bb5\u7684\u8ddd\u79bb\u603b\u662f\u4e0d\u53d8\u7684. \u56e0\u6b64\u4ee3\u7801\u6bb5\u4e2d\u7684\u4efb\u610f\u6307\u4ee4\u5475\u6570\u636e\u6bb5\u4e2d\u4efb\u4f55\u53d8\u91cf\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u662f\u4e00\u4e2a\u8fd0\u884c\u65f6\u5e38\u91cf.  </p> <p>Example</p> <p></p>"},{"location":"CSAPP/7/#pic_1","title":"PIC \u51fd\u6570\u8c03\u7528","text":"<p>\u5047\u8bbe\u7a0b\u5e8f\u8c03\u7528\u4e00\u4e2a\u7531\u5171\u4eab\u5e93\u5b9a\u4e49\u7684\u51fd\u6570, \u7f16\u8bd1\u5668\u6ca1\u6cd5\u6b63\u786e\u9884\u6d4b\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u5730\u5740. \u4e8e\u662f\u5b83\u751f\u6210\u4e00\u6761\u91cd\u5b9a\u4f4d\u8bb0\u5f55, \u7136\u540e\u52a8\u6001\u94fe\u63a5\u5668\u5728\u7a0b\u5e8f\u52a0\u8f7d\u65f6\u518d\u89e3\u6790\u5b83. GNU \u7f16\u8bd1\u7cfb\u7edf\u4f7f\u7528\u4e86\u5ef6\u8fdf\u7ed1\u5b9a(lazy bindng), \u5c06\u8fc7\u7a0b\u5730\u5740\u7684\u7ed1\u5b9a\u5ef6\u8fdf\u5230\u4e86\u7b2c\u4e00\u6b21\u8c03\u7528\u8be5\u8fc7\u7a0b\u7684\u65f6\u5019.  </p> <p>\u6211\u4eec\u91c7\u7528 GOT \u548c\u8fc7\u7a0b\u94fe\u63a5\u8868(Procedure Linkage Table, PLT) \u7684\u65b9\u6cd5, \u5982\u679c\u4e00\u4e2a\u76ee\u6807\u6a21\u5757\u8c03\u7528\u5b9a\u4e49\u5728\u5171\u4eab\u5e93\u4e2d\u7684\u4efb\u4f55\u51fd\u6570, \u90a3\u4e48\u5b83\u5c31\u6709\u81ea\u5df1\u7684 GOT \u548c PLT.  </p> <ul> <li>PLT: PLT \u662f\u4e00\u4e2a\u6570\u7ec4, \u5176\u4e2d\u6bcf\u4e2a\u6761\u76ee\u90fd\u662f 16 \u5b57\u8282\u4ee3\u7801. PLT[0] \u662f\u4e00\u4e2a\u7279\u6b8a\u6761\u76ee, \u5b83\u8df3\u8f6c\u5230\u52a8\u6001\u94fe\u63a5\u5668\u4e2d. PLT[1] \u8c03\u7528\u7cfb\u7edf\u542f\u52a8\u51fd\u6570\u521d\u59cb\u5316\u6267\u884c\u73af\u5883, \u5176\u4ed6\u6761\u76ee\u8c03\u7528\u7528\u6237\u4ee3\u7801\u8c03\u7528\u7684\u51fd\u6570.  </li> <li>GOT: GOT \u662f\u4e00\u4e2a\u6570\u7ec4, \u6bcf\u4e2a\u6761\u76ee\u90fd\u662f 8 \u5b57\u8282\u5730\u5740. GOT[0] \u548c [1] \u662f\u5305\u542b\u52a8\u6001\u94fe\u63a5\u5668\u5728\u89e3\u6790\u51fd\u6570\u5730\u5740\u65f6\u4f1a\u4f7f\u7528\u7684\u4fe1\u606f, GOT[2] \u662f\u52a8\u6001\u94fe\u63a5\u5668\u5728 ld-linux.so \u6a21\u5757\u4e2d\u7684\u5165\u53e3, \u5176\u4f59\u6bcf\u4e2a\u6761\u76ee\u5bf9\u5e94\u4e00\u4e2a\u88ab\u8c03\u7528\u7684\u51fd\u6570.  </li> </ul> <p>Example</p> <p></p>"},{"location":"CSAPP/7/#_21","title":"\u5e93\u6253\u6869","text":"<p>\u5e93\u6253\u6869(library interpositioning), \u5141\u8bb8\u622a\u83b7\u5bf9\u5171\u4eab\u5e93\u51fd\u6570\u7684\u8c03\u7528, \u53d6\u800c\u4ee3\u4e4b\u6267\u884c\u81ea\u5df1\u7684\u4ee3\u7801. \u4f7f\u7528\u6253\u6869\u673a\u5236, \u6211\u4eec\u53ef\u4ee5\u8ffd\u8e2a\u5bf9\u67d0\u4e2a\u7279\u6b8a\u5e93\u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570, \u9a8c\u8bc1\u548c\u8ffd\u8e2a\u5b83\u7684\u8f93\u5165\u548c\u8f93\u51fa\u503c, \u6216\u8005\u751a\u81f3\u628a\u5b83\u66ff\u6362\u6210\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u5b9e\u73b0.  </p> <p>\u57fa\u672c\u601d\u60f3: \u7ed9\u5b9a\u4e00\u4e2a\u9700\u8981\u6253\u6869\u7684\u76ee\u6807\u51fd\u6570, \u521b\u5efa\u4e00\u4e2a\u5305\u88c5\u51fd\u6570, \u5b83\u7684\u539f\u578b\u4e0e\u76ee\u6807\u51fd\u6570\u5b8c\u5168\u4e00\u6837. \u4f7f\u7528\u67d0\u79cd\u7279\u6b8a\u6253\u6869\u673a\u5236, \u4f60\u5c31\u53ef\u4ee5\u6b3a\u9a97\u7cfb\u7edf\u8c03\u7528\u5305\u88c5\u51fd\u6570\u800c\u4e0d\u662f\u76ee\u6807\u51fd\u6570\u4e86.  </p>"},{"location":"CSAPP/7/#_22","title":"\u7f16\u8bd1\u65f6\u6253\u6869","text":"<p>\u6211\u4eec\u8fd9\u6837\u7f16\u8bd1\u548c\u94fe\u63a5: <pre><code>linux&gt; gcc -DCOMPILETIME -c mymalloc.c\nlinux&gt; gcc -I. -o intc int.c mymalloc.c\n</code></pre> \u7531\u4e8e\u6709 -I. \u53c2\u6570, \u6240\u4ee5\u4f1a\u8fdb\u884c\u6253\u6869. \u5b83\u544a\u8bc9 C \u9884\u5904\u7406\u5668\u5728\u641c\u7d22\u901a\u5e38\u7684\u7cfb\u7edf\u76ee\u5f55\u4e4b\u524d\u5148\u5728\u5f53\u524d\u76ee\u5f55\u67e5\u627e malloc.h.  </p>"},{"location":"CSAPP/7/#_23","title":"\u94fe\u63a5\u65f6\u6253\u6869","text":"<p>Linux \u9759\u6001\u94fe\u63a5\u5668\u652f\u6301\u7528 --wrap f \u6807\u5fd7\u8fdb\u884c\u94fe\u63a5\u65f6\u6253\u6869. \u8fd9\u4e2a\u7b26\u53f7\u544a\u8bc9\u94fe\u63a5\u5668\u628a\u7b26\u53f7 f \u7684\u5f15\u7528\u89e3\u6790\u6210 __wrap_f(\u524d\u7f00\u4e24\u4e2a\u4e0b\u5212\u7ebf), \u8fd8\u8981\u628a\u5bf9\u7b26\u53f7 __real_f \u7684\u5f15\u7528\u89e3\u6790\u4e3a f.  </p> <p></p> <p>\u7528\u4e0b\u8ff0\u65b9\u6cd5\u7f16\u8bd1: <pre><code>linux&gt; gcc -DLINKTIME -c mymalloc.c\nlinux&gt; gcc -c int.c\n</code></pre> \u7136\u540e\u94fe\u63a5: <code>linux&gt; gcc -W1,--wrap,malloc -W1,--wrap,free -o int1 int.o mymalloc.i</code> <code>-W1,option</code> \u6807\u5fd7\u628a option \u4f20\u9012\u7ed9\u94fe\u63a5\u5668. option \u4e2d\u6bcf\u4e2a\u90fd\u8981\u66ff\u6362\u4e3a\u4e00\u4e2a\u7a7a\u683c, \u56e0\u6b64<code>-W1,--wrap,malloc</code>\u5c31\u628a<code>--wrap malloc</code>\u4f20\u9012\u7ed9\u94fe\u63a5\u5668.   </p>"},{"location":"CSAPP/7/#_24","title":"\u8fd0\u884c\u65f6\u6253\u6869","text":"<p>\u5982\u679c LD_PRELOAD \u73af\u5883\u53d8\u91cf\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5171\u4eab\u5e93\u8def\u5f84\u540d\u7684\u5217\u8868(\u4ee5\u7a7a\u683c\u6216\u5206\u53f7\u5206\u9694), \u90a3\u4e48\u5f53\u4f60\u52a0\u8f7d\u548c\u6267\u884c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u89e3\u6790\u672a\u5b9a\u4e49\u7684\u5f15\u7528\u65f6, \u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u5148\u641c\u7d22 LD_PRELOAD \u5171\u4eab\u5e93, \u7136\u540e\u624d\u641c\u7d22\u4efb\u4f55\u5176\u4ed6\u7684\u5e93.   </p> <p></p> <p>\u7f16\u8bd1: <pre><code>linux&gt; gcc -DRUNTIME -shared -fpic -o mymalloc.so mymalloc.c -ldl\nlinux&gt; gcc -o intr int.c\n</code></pre> \u5f53\u8fd0\u884c\u65f6, <code>linux&gt; LD_PRELOAD=\"./mymalloc.so\" ./intr</code> \u5c31\u5b9e\u73b0\u4e86\u6253\u6869.  </p>"},{"location":"CSAPP/8/","title":"\u5f02\u5e38\u63a7\u5236\u6d41","text":"<p>\u4ece\u7ed9\u5904\u7406\u5668\u52a0\u7535\u5230\u65ad\u7535, \u7a0b\u5e8f\u8ba1\u6570\u5668\u90fd\u5047\u8bbe\u4e00\u4e2a\u503c\u7684\u5e8f\u5217 \\(a_0, a_1, \\ldots,a_{n-1}\\) \u5176\u4e2d\u6bcf\u4e2a \\(a_k\\) \u662f\u67d0\u4e2a\u76f8\u5e94\u6307\u4ee4 \\(I_k\\) \u7684\u5730\u5740. \u6bcf\u6b21\u4ece \\(a_k\\) \u5230 \\(a_{k+1}\\) \u7684\u8fc7\u6e21\u79f0\u4e3a\u63a7\u5236\u8f6c\u79fb(control transfer). \u8fd9\u6837\u7684\u63a7\u5236\u8f6c\u79fb\u5e8f\u5217\u79f0\u4e3a\u5904\u7406\u5668\u7684\u63a7\u5236\u6d41(control flow).  </p> <p>\u5f53\u6bcf\u4e2a \\(I_k\\) \u548c \\(I_{k+1}\\) \u5728\u5185\u5b58\u4e2d\u662f\u76f8\u90bb\u7684, \u5219\u79f0\u8fd9\u79cd\u63a7\u5236\u6d41\u662f\u5e73\u6ed1\u7684, \u5426\u5219\u5b58\u5728\u7a81\u53d8. \u7cfb\u7edf\u4f1a\u901a\u8fc7\u4f7f\u63a7\u5236\u6d41\u7a81\u53d8\u6765\u5bf9\u7cfb\u7edf\u72b6\u6001\u7684\u53d8\u5316\u505a\u51fa\u53cd\u6620, \u6211\u4eec\u628a\u8fd9\u4e9b\u7a81\u53d8\u79f0\u4e3a\u5f02\u5e38\u63a7\u5236\u6d41(Exceptional Control Flow, ECF).  </p>"},{"location":"CSAPP/8/#_2","title":"\u5f02\u5e38","text":"<p>\u5f02\u5e38(Exception) \u5c31\u662f\u63a7\u5236\u6d41\u4e2d\u7684\u7a81\u53d8, \u7528\u6765\u54cd\u5e94\u5904\u7406\u5668\u72b6\u6001\u4e2d\u7684\u67d0\u4e9b\u53d8\u5316.  \u5728\u5904\u7406\u5668\u4e2d, \u72b6\u6001\u88ab\u7f16\u7801\u4e3a\u4e0d\u540c\u7684\u4f4d\u548c\u865a\u62df\u53f7. \u72b6\u6001\u53d8\u5316\u88ab\u79f0\u4e3a\u4e8b\u4ef6(event).   </p>"},{"location":"CSAPP/8/#_3","title":"\u5f02\u5e38\u5904\u7406","text":"<p>\u5f53\u5904\u7406\u5668\u68c0\u6d4b\u5230\u6709\u4e8b\u4ef6\u53d1\u751f\u65f6, \u5b83\u4f1a\u901a\u8fc7\u4e00\u5f20\u5f02\u5e38\u8868\u7684\u8df3\u8f6c\u8868, \u8fdb\u884c\u4e00\u4e2a\u95f4\u63a5\u8fc7\u7a0b\u8c03\u7528, \u5230\u4e00\u4e2a\u4e13\u95e8\u5904\u7406\u8fd9\u7c7b\u4e8b\u4ef6\u7684\u64cd\u4f5c\u7cfb\u7edf\u5b50\u7a0b\u5e8f, \u5373\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f(exception handler). \u7cfb\u7edf\u4e3a\u53ef\u80fd\u7684\u6bcf\u79cd\u7c7b\u578b\u7684\u5f02\u5e38\u90fd\u5206\u914d\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u975e\u8d1f\u6574\u6570\u7684\u5f02\u5e38\u53f7. \u6709\u4e9b\u53f7\u7801\u7531\u5904\u7406\u5668\u8bbe\u8ba1\u8005\u5206\u914d, \u5176\u4ed6\u53f7\u7801\u7531\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u6838\u8bbe\u8ba1\u8005\u5206\u914d, \u5206\u522b\u7528\u6765\u8868\u793a\u4e0d\u540c\u5c42\u6b21\u7684\u5f02\u5e38. \u5f53\u7cfb\u7edf\u542f\u52a8\u65f6, \u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u548c\u521d\u59cb\u5316\u4e00\u5f20\u5f02\u5e38\u8868\u7684\u8df3\u8f6c\u8868, \u4f7f\u5f97\u8868\u76ee k \u5305\u542b\u5f02\u5e38 k \u7684\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740.  </p> <p></p> <p>\u5f53\u5904\u7406\u5668\u68c0\u6d4b\u5230\u53d1\u751f\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u5e76\u786e\u5b9a\u5176\u5f02\u5e38\u53f7\u4e3a k, \u5904\u7406\u5668\u6267\u884c\u95f4\u63a5\u8fc7\u7a0b\u8c03\u7528, \u901a\u8fc7\u6761\u76ee k \u8f6c\u5230\u76f8\u5e94\u7684\u5904\u7406\u7a0b\u5e8f. \u5f02\u5e38\u8868\u7684\u8d77\u59cb\u5730\u5740\u653e\u5728\u5f02\u5e38\u8868\u57fa\u5740\u5bc4\u5b58\u5668\u7684\u7279\u6b8aCPU\u5bc4\u5b58\u5668\u91cc.  </p> <p></p> <p>\u5f02\u5e38\u7c7b\u4f3c\u4e8e\u8fc7\u7a0b\u8c03\u7528, \u4f46\u6709\u4e00\u4e9b\u4e0d\u540c:  </p> <ul> <li>\u6839\u636e\u5f02\u5e38\u7684\u7c7b\u578b, \u8fd4\u56de\u5730\u5740\u8981\u4e48\u662f\u5f53\u524d\u6307\u4ee4(\u4e8b\u4ef6\u53d1\u751f\u65f6\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4), \u8981\u4e48\u662f\u4e0b\u4e00\u6761\u6307\u4ee4.  </li> <li>\u5904\u7406\u5668\u628a\u4e00\u4e9b\u989d\u5916\u7684\u5904\u7406\u5668\u72b6\u6001\u538b\u5230\u6808\u91cc, \u5728\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u91cd\u65b0\u5f00\u59cb\u6267\u884c\u88ab\u4e2d\u65ad\u7684\u7a0b\u5e8f\u4e5f\u9700\u8981\u8fd9\u4e9b\u72b6\u6001.  </li> <li>\u5982\u679c\u63a7\u5236\u4ece\u7528\u6237\u7a0b\u5e8f\u8f6c\u79fb\u5230\u5185\u6838, \u6240\u6709\u8fd9\u4e9b\u9879\u76ee\u88ab\u538b\u5230\u5185\u6838\u6808\u4e2d, \u800c\u4e0d\u662f\u7528\u6237\u6808.  </li> <li>\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f\u4e0b, \u5bf9\u6240\u6709\u7684\u7cfb\u7edf\u8d44\u6e90\u6709\u5b8c\u5168\u7684\u8bbf\u95ee\u6743\u9650.   </li> </ul>"},{"location":"CSAPP/8/#_4","title":"\u5f02\u5e38\u7c7b\u578b","text":"\u7c7b\u522b \u539f\u56e0 \u5f02\u6b65/\u540c\u6b65 \u8fd4\u56de\u884c\u4e3a \u4e2d\u65ad \u6765\u81eaI/O\u8bbe\u5907\u7684\u4fe1\u53f7 \u5f02\u6b65 \u603b\u662f\u8fd4\u56de\u5230\u4e0b\u4e00\u6761\u6307\u4ee4 \u9677\u9631 \u6709\u610f\u7684\u5f02\u5e38 \u540c\u6b65 \u603b\u662f\u8fd4\u56de\u5230\u4e0b\u4e00\u6761\u6307\u4ee4 \u6545\u969c \u6f5c\u5728\u53ef\u6062\u590d\u7684\u9519\u8bef \u540c\u6b65 \u53ef\u80fd\u8fd4\u56de\u5230\u5f53\u524d\u6307\u4ee4 \u7ec8\u6b62 \u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef \u540c\u6b65 \u4e0d\u4f1a\u8fd4\u56de <p>\u5728 Linux/x86-64\u4e2d\u7684\u5e38\u89c1\u5f02\u5e38:  </p> \u5f02\u5e38\u53f7 \u63cf\u8ff0 \u5f02\u5e38\u7c7b\u522b 0 \u9664\u6cd5\u9519\u8bef \u6545\u969c 13 \u4e00\u822c\u4fdd\u62a4\u6545\u969c \u6545\u969c 14 \u7f3a\u9875 \u6545\u969c 18 \u673a\u5668\u68c0\u67e5 \u7ec8\u6b62 32~255 \u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u7684\u5f02\u5e38 \u4e2d\u65ad\u6216\u9677\u9631 <p>\u5f02\u6b65&amp;\u540c\u6b65</p> <p>\u5f02\u6b65\u5f02\u5e38\u662f\u7531\u4e8e\u5904\u7406\u5668\u5916\u90e8\u72b6\u6001\u53d8\u5316\u800c\u5f15\u8d77\u7684, \u5e76\u975e\u662f\u7531\u4efb\u610f\u4e00\u6761\u4e13\u95e8\u7684\u6307\u4ee4\u9020\u6210. \u540c\u6b65\u5f02\u5e38\u662f\u6267\u884c\u5f53\u524d\u6307\u4ee4\u7684\u7ed3\u679c, \u4e5f\u88ab\u79f0\u4e3a\u6545\u969c\u6307\u4ee4(faulting instruction).  </p>"},{"location":"CSAPP/8/#_5","title":"\u4e2d\u65ad","text":"<p>\u4e2d\u65ad(Interrupt) \u662f\u5f02\u6b65\u53d1\u751f\u7684, \u662f\u6765\u81ea\u5904\u7406\u5668\u5916\u90e8\u7684 I/O \u8bbe\u5907\u7684\u4fe1\u53f7\u7684\u7ed3\u679c.  </p> <p>\u5728 I/O \u8bbe\u5907\u4e2d, \u5411\u5904\u7406\u5668\u82af\u7247\u4e0a\u7684\u4e00\u4e2a\u5f15\u811a\u53d1\u9001\u4fe1\u53f7, \u5e76\u628a\u5f02\u5e38\u53f7\u653e\u5728\u7cfb\u7edf\u603b\u7ebf\u4e0a, \u6765\u89e6\u53d1\u4e2d\u65ad. \u5728\u5f53\u524d\u6307\u4ee4\u6267\u884c\u5b8c\u540e, \u5904\u7406\u5668\u6ce8\u610f\u5230\u4e2d\u65ad\u5f15\u811a\u7684\u7535\u538b\u53d8\u9ad8\u4e86, \u5c31\u4ece\u7cfb\u7edf\u603b\u7ebf\u8bfb\u53d6\u5f02\u5e38\u597d, \u5e76\u8c03\u7528\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f. \u5f53\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u5c06\u63a7\u5236\u8fd4\u56de\u7ed9\u4e0b\u4e00\u6761\u6307\u4ee4.  </p> <p></p>"},{"location":"CSAPP/8/#_6","title":"\u9677\u9631(\u7cfb\u7edf\u8c03\u7528)","text":"<p>\u9677\u9631(trap) \u662f\u6709\u610f\u7684\u5f02\u5e38, \u662f\u6267\u884c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c. \u9677\u9631\u6700\u91cd\u8981\u7684\u7528\u9014\u662f\u5728\u7528\u6237\u7a0b\u5e8f\u548c\u5185\u6838\u4e4b\u95f4\u63d0\u4f9b\u4e00\u4e2a\u50cf\u8fc7\u7a0b\u4e00\u6837\u7684\u63a5\u53e3, \u79f0\u4e3a\u7cfb\u7edf\u8c03\u7528.  </p> <p>\u5f53\u7528\u6237\u7a0b\u5e8f\u60f3\u8981\u5411\u5185\u6838\u8bf7\u6c42\u670d\u52a1 n \u65f6, \u53ef\u4ee5\u6267\u884c<code>syscall n</code>. \u6267\u884c<code>syscall</code>\u6307\u4ee4\u5bfc\u81f4\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u7684\u9677\u9631, \u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u89e3\u6790\u53c2\u6570, \u5e76\u8c03\u7528\u9002\u5f53\u7684\u5185\u6838\u7a0b\u5e8f.  </p> <p></p> <p>\u6ce8\u610f: </p> <ul> <li>\u7cfb\u7edf\u8c03\u7528\u548c\u51fd\u6570\u8c03\u7528\u5b58\u5728\u4e0d\u540c: \u7cfb\u7edf\u8c03\u7528\u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f\u4e0b, \u800c\u51fd\u6570\u8c03\u7528\u8fd0\u884c\u5728\u7528\u6237\u6a21\u5f0f.  </li> <li>\u7cfb\u7edf\u8c03\u7528\u90fd\u6709\u5bf9\u5e94\u7684\u6574\u6570\u53f7, \u5bf9\u5e94\u4e00\u4e2a\u5230\u5185\u6838\u4e2d\u8df3\u8f6c\u8868\u7684\u504f\u79fb\u91cf. \u4f46\u8fd9\u4e2a\u8df3\u8f6c\u8868\u548c\u5f02\u5e38\u8868\u4e0d\u540c.  </li> </ul> <p>\u5728 Linux/x86-64 \u7cfb\u7edf\u4e2d, \u7cfb\u7edf\u8c03\u7528\u901a\u8fc7<code>syscall</code>\u6267\u884c, \u8be5\u6307\u4ee4\u7684\u53c2\u6570\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012, \u800c\u4e0d\u662f\u6808. \u5176\u4e2d\uff0c%rax \u4e2d\u5305\u542b\u7cfb\u7edf\u8c03\u7528\u53f7, %rdi, %rsi, %rdx, %r10, %r8 \u548c %r9 \u5206\u522b\u7528\u6765\u4fdd\u5b58\u53c2\u6570. \u5f53\u4ece\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u65f6\uff0c\u4f1a\u7834\u574f %rcx \u548c%r11, \u800c\u5c06\u8fd4\u56de\u503c\u4fdd\u5b58\u5728% rax \u4e2d. -4095 \u5230 -1 \u4e4b\u95f4\u7684\u8d1f\u6570\u8fd4\u56de\u503c\u8868\u660e\u53d1\u751f\u4e86\u9519\u8bef, \u5bf9\u5e94\u4e8e\u8d1f\u7684 errno.   </p> <p>C \u7a0b\u5e8f\u4e2d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5305\u88c5\u51fd\u6570. \u6211\u4eec\u5c06\u7cfb\u7edf\u8c03\u7528\u4e0e\u5b83\u4eec\u76f8\u5173\u8054\u7684\u5305\u88c5\u51fd\u6570\u90fd\u79f0\u4e3a\u7cfb\u7edf\u7ea7\u51fd\u6570.  </p> <p></p>"},{"location":"CSAPP/8/#_7","title":"\u6545\u969c","text":"<p>\u6545\u969c\u7531\u9519\u8bef\u60c5\u51b5\u5f15\u8d77, \u5b83\u53ef\u80fd\u80fd\u591f\u88ab\u6545\u969c\u5904\u7406\u7a0b\u5e8f\u4fee\u6b63. \u6545\u969c\u53d1\u751f\u65f6\u5904\u7406\u5668\u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u6545\u969c\u5904\u7406\u7a0b\u5e8f, \u5982\u679c\u80fd\u591f\u4fee\u6b63, \u5c31\u5c06\u63a7\u5236\u8fd4\u56de\u7ed9\u5f15\u8d77\u6545\u969c\u7684\u6307\u4ee4, \u4ece\u800c\u91cd\u65b0\u6267\u884c\u5b83. \u5982\u679c\u4e0d\u80fd, \u5904\u7406\u7a0b\u5e8f\u5c31\u8fd4\u56de\u5230\u5185\u6838\u4e2d\u7684 abort \u4f8b\u7a0b, \u7ec8\u6b62\u5f15\u8d77\u6545\u969c\u7684\u5e94\u7528\u7a0b\u5e8f.  </p> <p></p>"},{"location":"CSAPP/8/#_8","title":"\u7ec8\u6b62","text":"<p>\u7ec8\u6b62\u662f\u4e0d\u53ef\u6062\u590d\u7684\u81f4\u547d\u9519\u8bef\u9020\u6210\u7684\u7ed3\u679c, \u901a\u5e38\u662f\u786c\u4ef6\u9519\u8bef. \u5904\u7406\u5668\u4f1a\u5c06\u63a7\u5236\u8fd4\u56de\u7ed9\u4e00\u4e2a abort \u4f8b\u7a0b, \u8be5\u4f8b\u7a0b\u4f1a\u7ec8\u6b62\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f.  </p> <p></p>"},{"location":"CSAPP/8/#_9","title":"\u8fdb\u7a0b","text":"<p>\u5f02\u5e38\u662f\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u63d0\u4f9b\u8fdb\u7a0b(process) \u6982\u5ff5\u7684\u57fa\u672c\u6784\u9020\u5757. \u8fdb\u7a0b\u5c31\u662f\u4e00\u4e2a\u6267\u884c\u4e2d\u7a0b\u5e8f\u7684\u5b9e\u4f8b. \u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u8fd0\u884c\u5728\u67d0\u4e2a\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587(context) \u4e2d. \u4e0a\u4e0b\u6587\u662f\u7531\u7a0b\u5e8f\u6b63\u786e\u8fd0\u884c\u6240\u9700\u8981\u7684\u72b6\u6001\u7ec4\u6210\u7684, \u5b83\u5305\u62ec\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u4ee3\u7801\u6570\u636e, \u6808, \u901a\u7528\u5bc4\u5b58\u5668, \u73af\u5883\u53d8\u91cf\u7b49. </p> <p>\u5f53\u6211\u4eec\u6267\u884c\u8fd0\u884c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6, shell \u5c31\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b, \u7136\u540e\u5728\u65b0\u7684\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u8fd9\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6.   </p> <p>\u8fdb\u7a0b\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5173\u952e\u7684\u62bd\u8c61:  </p> <ul> <li>\u4e00\u4e2a\u72ec\u7acb\u7684\u903b\u8f91\u63a7\u5236\u6d41, \u5b83\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61, \u597d\u50cf\u6211\u4eec\u7684\u7a0b\u5e8f\u72ec\u5360\u4f7f\u7528\u5904\u7406\u5668.  </li> <li>\u4e00\u4e2a\u79c1\u6709\u7684\u5730\u5740\u7a7a\u95f4, \u5b83\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61, \u597d\u50cf\u6211\u4eec\u7684\u7a0b\u5e8f\u72ec\u5360\u5730\u4f7f\u7528\u5185\u5b58\u7cfb\u7edf.  </li> </ul>"},{"location":"CSAPP/8/#_10","title":"\u903b\u8f91\u63a7\u5236\u6d41","text":"<p>\u5f53\u6211\u4eec\u7528\u8c03\u8bd5\u5668\u5355\u6b65\u8c03\u8bd5\u7a0b\u5e8f\u65f6, \u6211\u4eec\u4f1a\u770b\u5230\u4e00\u7cfb\u5217\u7a0b\u5e8f\u8ba1\u6570\u5668(PC)\u7684\u503c. \u8fd9\u4e2a PC \u503c\u7684\u5e8f\u5217\u5c31\u53eb\u505a\u903b\u8f91\u63a7\u5236\u6d41, \u6216\u8005\u7b80\u79f0\u903b\u8f91\u6d41.  </p> <p></p> <p>\u5982\u56fe, \u8fd9\u4e2a\u7cfb\u7edf\u8fd0\u884c\u4e86\u4e09\u4e2a\u8fdb\u7a0b, \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u903b\u8f91\u6d41(\u9ed1\u8272\u7ad6\u7ebf). \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e09\u4e2a\u903b\u8f91\u6d41\u662f\u4ea4\u9519\u8fdb\u884c\u7684, \u8fdb\u7a0b\u8f6e\u6d41\u4f7f\u7528\u5904\u7406\u5668. \u6bcf\u4e2a\u8fdb\u7a0b\u6267\u884c\u5b83\u7684\u6d41\u7684\u4e00\u90e8\u5206, \u7136\u540e\u88ab\u62a2\u5360(preempted)(\u6682\u65f6\u6302\u8d77), \u7136\u540e\u8f6e\u5230\u5176\u4ed6\u8fdb\u7a0b. \u4f46\u4ece\u5355\u4e2a\u8fdb\u7a0b\u7684\u89d2\u5ea6, \u5b83\u7684\u903b\u8f91\u6d41\u662f\u8fde\u7eed\u7684, \u610f\u5473\u7740\u6211\u4eec\u63d0\u4f9b\u4e86\u5b83\u72ec\u5360\u5904\u7406\u5668\u7684\u5047\u8c61. </p> <p>\u5e76\u53d1\u6d41</p> <p>\u4e00\u4e2a\u903b\u8f91\u6d41\u7684\u6267\u884c\u5728\u65f6\u95f4\u4e0a\u4e0e\u53e6\u4e00\u4e2a\u6d41\u91cd\u53e0, \u79f0\u4e3a\u5e76\u53d1\u6d41(concurrent flow), \u8fd9\u4e24\u4e2a\u6d41\u79f0\u4e3a\u5e76\u53d1\u5730\u8fd0\u884c. \u5373\u5f53\u903b\u8f91\u6d41X\u5728\u903b\u8f91\u6d41Y\u5f00\u59cb\u4e4b\u540e\u548cY\u7ed3\u675f\u4e4b\u524d\u8fd0\u884c, \u6216\u903b\u8f91\u6d41Y\u5728\u903b\u8f91\u6d41X\u5f00\u59cb\u4e4b\u540e\u548cX\u7ed3\u675f\u4e4b\u524d\u8fd0\u884c. e.g. \u4e0a\u56fe\u7684\u4f8b\u5b50\u4e2d\u8fdb\u7a0b A \u548c B, \u4ee5\u53ca\u8fdb\u7a0b A \u548c C \u90fd\u662f\u5e76\u53d1\u8fd0\u884c, \u4f46 B \u548c C \u4e0d\u662f. \u591a\u4e2a\u6d41\u5e76\u53d1\u5730\u6267\u884c\u79f0\u4e3a\u5e76\u53d1, \u4e00\u4e2a\u8fdb\u7a0b\u548c\u5176\u4ed6\u8fdb\u7a0b\u8f6e\u6d41\u8fd0\u884c\u79f0\u4e3a\u591a\u4efb\u52a1(multitasking). \u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u5b83\u63a7\u5236\u6d41\u7684\u4e00\u90e8\u5206\u7684\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6bb5\u79f0\u4e3a\u65f6\u95f4\u7247(time slice). \u56e0\u6b64\u591a\u4efb\u52a1\u4e5f\u53eb\u65f6\u95f4\u5206\u7247(time slicing).  </p> <p>\u6ce8\u610f: \u5e76\u53d1\u6d41\u7684\u601d\u60f3\u548c\u6d41\u8fd0\u884c\u7684\u5904\u7406\u5668\u6838\u6570, \u8ba1\u7b97\u673a\u6570\u65e0\u5173. \u5982\u679c\u4e24\u4e2a\u6d41\u5e76\u53d1\u5730\u8fd0\u884c\u5728\u4e0d\u540c\u5904\u7406\u5668\u6838\u6216\u8005\u8ba1\u7b97\u673a\u4e0a, \u5219\u79f0\u4e3a\u5e76\u884c\u6d41(parallel flow). \u5e76\u884c\u6d41\u662f\u5e76\u53d1\u6d41\u7684\u771f\u5b50\u96c6.  </p>"},{"location":"CSAPP/8/#_11","title":"\u79c1\u6709\u5730\u5740\u7a7a\u95f4","text":"<p>\u8fdb\u7a0b\u4e5f\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61, \u597d\u50cf\u5b83\u72ec\u5360\u5730\u4f7f\u7528\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4. \u5730\u5740\u7a7a\u95f4\u662f \\(2^n\\) \u4e2a\u53ef\u80fd\u5730\u5740\u7684\u96c6\u5408, \u548c\u8fd9\u4e2a\u7a7a\u95f4\u4e2d\u67d0\u4e2a\u5730\u5740\u76f8\u5173\u8054\u7684\u5185\u5b58\u5b57\u8282\u662f\u4e0d\u80fd\u88ab\u5176\u4ed6\u8fdb\u7a0b\u8bfb\u6216\u8005\u5199\u7684, \u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\u8fd9\u4e2a\u5730\u5740\u7a7a\u95f4\u662f\u79c1\u6709\u7684.  </p> <p></p>"},{"location":"CSAPP/8/#_12","title":"\u7528\u6237\u6a21\u5f0f\u548c\u5185\u6838\u6a21\u5f0f","text":"<p>\u5904\u7406\u5668\u4e3a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e24\u79cd\u6a21\u5f0f, \u7528\u6237\u6a21\u5f0f\u548c\u5185\u6838\u6a21\u5f0f, \u5904\u7406\u5668\u901a\u8fc7\u67d0\u4e2a\u63a7\u5236\u5bc4\u5b58\u5668\u7684\u6a21\u5f0f\u4f4d(model bit) \u6765\u63d0\u4f9b\u8fd9\u79cd\u529f\u80fd.  </p> <ul> <li>\u5f53\u8bbe\u7f6e\u4e86\u6a21\u5f0f\u4f4d, \u8fdb\u7a0b\u5c31\u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f(\u8d85\u7ea7\u7528\u6237\u6a21\u5f0f)\u4e2d, \u4e00\u4e2a\u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u7684\u8fdb\u7a0b\u53ef\u4ee5\u6267\u884c\u6307\u4ee4\u96c6\u4e2d\u7684\u4efb\u4f55\u6307\u4ee4, \u5e76\u4e14\u53ef\u4ee5\u8bbf\u95ee\u5185\u5b58\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e.  </li> <li>\u6ca1\u6709\u8bbe\u7f6e\u6a21\u5f0f\u4f4d, \u8fdb\u884c\u5c31\u8fd0\u884c\u5728\u7528\u6237\u6a21\u5f0f\u4e2d. \u7528\u6237\u6a21\u5f0f\u7684\u8fdb\u7a0b\u4e0d\u5141\u8bb8\u6267\u884c\u7279\u6743\u6307\u4ee4, \u4e5f\u4e0d\u5141\u8bb8\u76f4\u63a5\u5f15\u7528\u5730\u5740\u7a7a\u95f4\u4e2d\u5185\u6838\u533a\u5185\u7684\u4ee3\u7801\u548c\u6570\u636e.  </li> </ul> <p>\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u8fdb\u7a0b\u521d\u59cb\u4e3a\u7528\u6237\u6a21\u5f0f, \u8fdb\u7a0b\u4ece\u7528\u6237\u6a21\u5f0f\u53d8\u4e3a\u5185\u6838\u6a21\u5f0f\u552f\u4e00\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u5f02\u5e38. \u5f53\u5f02\u5e38\u53d1\u751f\u65f6\u5b83\u53d8\u4e3a\u5185\u6838\u6a21\u5f0f, \u5f53\u5f02\u5e38\u8fd4\u56de\u5230\u5e94\u7528\u7a0b\u5e8f\u65f6\u53c8\u6539\u56de\u5230\u7528\u6237\u6a21\u5f0f.  </p> <p>Linux \u901a\u8fc7 /proc \u6587\u4ef6\u7cfb\u7edf, \u5141\u8bb8\u7528\u6237\u6a21\u5f0f\u8fdb\u7a0b\u8bbf\u95ee\u5185\u6838\u6570\u636e\u7ed3\u6784\u7684\u5185\u5bb9.  </p>"},{"location":"CSAPP/8/#_13","title":"\u4e0a\u4e0b\u6587\u5207\u6362","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4f7f\u7528\u4e0a\u4e0b\u6587\u5207\u6362(context switch) \u7684\u8f83\u9ad8\u5c42\u6b21\u5f62\u5f0f\u7684\u5f02\u5e38\u63a7\u5236\u6765\u5b9e\u73b0\u591a\u4efb\u52a1. \u5185\u6838\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u6301\u4e00\u4e2a\u4e0a\u4e0b\u6587, \u5728\u8fdb\u7a0b\u6267\u884c\u7684\u67d0\u4e9b\u65f6\u523b, \u5185\u6838\u53ef\u4ee5\u51b3\u5b9a\u62a2\u5360\u5f53\u524d\u8fdb\u7a0b, \u5e76\u91cd\u65b0\u5f00\u59cb\u4e00\u4e2a\u5148\u524d\u88ab\u62a2\u5360\u4e86\u7684\u8fdb\u7a0b. \u8fd9\u79cd\u51b3\u7b56\u53eb\u8c03\u5ea6(scheduling), \u662f\u7531\u5185\u6838\u4e2d\u7684\u8c03\u5ea6\u5668(scheduler)\u7684\u4ee3\u7801\u5904\u7406\u7684. \u5f53\u5185\u6838\u9009\u62e9\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\u8fdb\u884c\u65f6, \u6211\u4eec\u8bf4\u5185\u6838\u8c03\u5ea6\u4e86\u8fd9\u4e2a\u8fdb\u7a0b. \u5728\u5185\u6838\u8c03\u5ea6\u4e86\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u8fd0\u884c\u540e, \u5b83\u5c31\u62a2\u5360\u5f53\u524d\u8fdb\u7a0b, \u5e76\u4f7f\u7528\u4e00\u79cd\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u673a\u5236\u6765\u8f6c\u79fb\u63a7\u5236\u5230\u65b0\u7684\u8fdb\u7a0b.   </p> <p>\u4e0a\u4e0b\u6587\u5207\u6362:  </p> <ul> <li>\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u4e0a\u4e0b\u6587  </li> <li>\u6062\u590d\u67d0\u4e2a\u5148\u524d\u88ab\u62a2\u5360\u7684\u8fdb\u7a0b\u88ab\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587  </li> <li>\u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u8fd9\u4e2a\u65b0\u6062\u590d\u7684\u8fdb\u7a0b</li> </ul> <p>\u5185\u6838\u4ee3\u8868\u7528\u6237\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\u53ef\u80fd\u56de\u53d1\u751f\u4e0a\u4e0b\u6587\u5207\u6362. \u5982\u679c\u7cfb\u7edf\u8c03\u7528\u56e0\u4e3a\u67d0\u4e2a\u4e8b\u4ef6\u53d1\u751f\u800c\u5835\u585e, \u5185\u6838\u53ef\u4ee5\u8ba9\u5f53\u524d\u8fdb\u7a0b\u4f11\u7720, \u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b. \u4e2d\u65ad\u4e5f\u80fd\u5f15\u53d1\u4e0a\u4e0b\u6587\u5207\u6362.  </p> <p>Example</p> <p></p> <p>\u5982\u4e0a\u56fe\u4e2d, read \u7cfb\u7edf\u8c03\u7528\u9700\u8981\u8bbf\u95ee\u78c1\u76d8, \u5185\u6838\u4e2d\u7684\u9677\u9631\u5904\u7406\u7a0b\u5e8f\u8bf7\u6c42\u6765\u81ea\u78c1\u76d8\u63a7\u5236\u5668\u7684 DMA \u4f20\u9001. \u800c\u78c1\u76d8\u8bfb\u53d6\u4e8b\u4ef6\u6bd4\u8f83\u8017\u65f6, \u5185\u6838\u9009\u62e9\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\u5148\u8fdb\u884c\u53e6\u4e00\u4e2a\u8fdb\u7a0b B. \u5f53\u78c1\u76d8\u8bfb\u53d6\u5b8c\u6210\u540e, \u78c1\u76d8\u53d1\u8d77\u4e2d\u65ad, \u5185\u6838\u5224\u5355\u8fdb\u7a0b B \u5df2\u7ecf\u8fdb\u884c\u4e86\u8db3\u591f\u957f\u7684\u65f6\u95f4, \u5c31\u6267\u884c\u4ece\u8fdb\u7a0b B \u5230\u8fdb\u7a0b A \u7684\u4e0a\u4e0b\u6587\u5207\u6362.  </p>"},{"location":"CSAPP/8/#_14","title":"\u8fdb\u7a0b\u63a7\u5236","text":""},{"location":"CSAPP/8/#_15","title":"\u9519\u8bef\u5904\u7406","text":"<p>\u5f53 Unix \u7cfb\u7edf\u7ea7\u51fd\u6570\u9047\u5230\u9519\u8bef\u65f6, \u5b83\u4eec\u901a\u5e38\u4f1a\u8fd4\u56de -1, \u5e76\u8bbe\u7f6e\u5168\u5c40\u6574\u6570\u53d8\u91cf errno \u6765\u8868\u793a\u4e3a\u4ec0\u4e48\u51fa\u9519\u4e86. strerror \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6587\u672c\u4e32, \u63cf\u8ff0\u4e86\u548c\u67d0\u4e2a errno \u503c\u76f8\u5173\u8054\u7684\u9519\u8bef.   \u6211\u4eec\u901a\u5e38\u4f7f\u7528\u5c01\u88c5\u7684\u9519\u8bef\u62a5\u544a\u51fd\u6570:  </p> <pre><code>void unix_error(char *msg){\nfprintf(stderr, \"%s: %s\\n\", msg, strerror(errno));\nexit(0);\n}\npid_t Fork(void){\npid_t pid;\nif((pid = fork()) &lt; 0)\nunix_error(\"Fork error\");\nreturn pid;\n}\n</code></pre>"},{"location":"CSAPP/8/#id","title":"\u83b7\u53d6\u8fdb\u7a0b ID","text":"<p>\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6b63\u6570(\u975e\u96f6)\u8fdb\u7a0b ID(PID). <code>getpid</code> \u51fd\u6570\u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u7684 PID, <code>getppid</code> \u8fd4\u56de\u5b83\u7236\u8fdb\u7a0b\u7684 PID. <pre><code>#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\npid_t getpid(void);\npid_t getppid(void);\n</code></pre></p> <p><code>getpid</code>\u548c<code>getppid</code>\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a pid_t \u7684\u6574\u6570\u503c, Linux \u7cfb\u7edf\u5728 types.h \u4e2d\u5b9a\u4e49\u4e3a int.  </p>"},{"location":"CSAPP/8/#_16","title":"\u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b","text":"<p>\u4e00\u4e2a\u8fdb\u7a0b\u6709\u4e09\u79cd\u53ef\u80fd\u7684\u72b6\u6001:  </p> <ul> <li>\u8fd0\u884c: \u8fdb\u7a0b\u8981\u4e48\u5728 CPU \u4e0a\u6267\u884c, \u8981\u4e48\u5728\u7b49\u5f85\u88ab\u6267\u884c\u4e14\u6700\u7ec8\u4f1a\u88ab\u5185\u6838\u8c03\u5ea6.  </li> <li>\u505c\u6b62: \u8fdb\u7a0b\u7684\u6267\u884c\u88ab\u6302\u8d77(suspended), \u4e14\u4e0d\u4f1a\u88ab\u8c03\u5ea6. \u5f53\u6536\u5230 SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU \u4fe1\u53f7\u65f6\u8fdb\u7a0b\u88ab\u505c\u6b62, \u5e76\u4e14\u4fdd\u6301\u505c\u6b62\u76f4\u5230\u6536\u5230 SIGCONT \u4fe1\u53f7. \u5728\u8fd9\u4e2a\u65f6\u523b\u8fdb\u7a0b\u518d\u6b21\u5f00\u59cb\u8fd0\u884c.  </li> <li>\u7ec8\u6b62: \u8fdb\u7a0b\u6c38\u8fdc\u5730\u505c\u6b62\u4e86. \u539f\u56e0\u5728\u4e8e: \u6536\u5230\u4e00\u4e2a\u4fe1\u53f7, \u4fe1\u53f7\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u7ec8\u6b62\u8be5\u8fdb\u7a0b; \u4ece\u4e3b\u7a0b\u5e8f\u8fd4\u56de; \u8c03\u7528 exit \u51fd\u6570.  </li> </ul>"},{"location":"CSAPP/8/#_17","title":"\u7ec8\u6b62\u8fdb\u7a0b","text":"<p>exit \u51fd\u6570\u4ee5 status \u9000\u51fa\u72b6\u6001\u6765\u7ec8\u6b62\u8fdb\u7a0b. <pre><code>#include &lt;stdlib.h&gt;\nvoid exit(int status);\n</code></pre></p>"},{"location":"CSAPP/8/#_18","title":"\u521b\u5efa\u8fdb\u7a0b","text":"<p>\u7236\u8fdb\u7a0b\u901a\u8fc7\u8c03\u7528\u51fd\u6570 fork \u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fd0\u884c\u7684\u5b50\u8fdb\u7a0b.  </p> <pre><code>#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\npid_t fork(void);\n</code></pre> <ul> <li>fork \u51fd\u6570\u53ea\u88ab\u8c03\u7528\u4e00\u6b21, \u4f46\u5374\u4f1a\u8fd4\u56de\u4e24\u6b21: \u4e00\u6b21\u662f\u5728\u8c03\u7528\u8fdb\u7a0b(\u7236\u8fdb\u7a0b)\u4e2d, \u4e00\u6b21\u662f\u5728\u65b0\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u4e2d. \u5728\u7236\u8fdb\u7a0b\u4e2d fork \u8fd4\u56de\u5b50\u8fdb\u7a0b\u7684 PID; \u5b50\u8fdb\u7a0b\u4e2d fork \u8fd4\u56de 0.   </li> <li>\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5e76\u53d1\u6267\u884c, \u5185\u6838\u80fd\u591f\u4ee5\u4efb\u610f\u65b9\u5f0f\u4ea4\u66ff\u6267\u884c\u5b83\u4eec\u7684\u903b\u8f91\u63a7\u5236\u4e2d\u7684\u6307\u4ee4. \u6211\u4eec\u51b3\u4e0d\u80fd\u5bf9\u4e0d\u540c\u8fdb\u7a0b\u4e2d\u6307\u4ee4\u7684\u4ea4\u66ff\u6267\u884c\u505a\u4efb\u4f55\u5047\u8bbe.  </li> <li>\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u6709\u76f8\u540c\u4f46\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4. \u4e24\u4e2a\u8fdb\u7a0b\u6709\u76f8\u540c(\u503c\u76f8\u540c, \u5e76\u975e\u540c\u4e00\u4e2a\u5bf9\u8c61, \u5b50\u8fdb\u7a0b\u5f97\u5230\u7684\u53ea\u662f\u7236\u8fdb\u7a0b\u7684\u4e00\u4e2a\u526f\u672c)\u7684\u7528\u6237\u6808, \u672c\u5730\u53d8\u91cf\u503c, \u5806, \u5168\u5c40\u53d8\u91cf\u503c, \u4ee3\u7801. \u4f46\u540e\u9762\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5bf9\u6570\u636e\u505a\u4efb\u4f55\u6539\u53d8\u90fd\u662f\u72ec\u7acb\u7684.  </li> <li>\u5171\u4eab\u6587\u4ef6. \u5b50\u8fdb\u7a0b\u8fd8\u83b7\u5f97\u4e0e\u7236\u8fdb\u7a0b\u4efb\u4f55\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u540c\u7684\u526f\u672c, \u5373\u5b50\u8fdb\u7a0b\u53ef\u4ee5\u8bfb\u5199\u7236\u8fdb\u7a0b\u6253\u5f00\u7684\u4efb\u4f55\u6587\u4ef6.  </li> </ul> <p>Example</p> <p><pre><code>int main()\n{\npid_t pid;\nint x = 1;\npid = Fork();\nif (!pid)   /* Child */\n{\nprintf(\"child : x=%d\\n\", ++x);\nexit(0);\n}\n/* Parent */\nprintf(\"parent: x=%d\\n\", --x);\nexit(0);\n}\n</code></pre> \u6211\u4eec\u53ef\u4ee5\u753b\u51fa\u4ed6\u7684\u62d3\u6251\u6392\u5e8f\u56fe:  \u800c\u7236\u5b50\u8fdb\u7a0b\u7684 printf \u8c01\u5148\u6267\u884c, \u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u8c03\u5ea6, \u4e0d\u540c\u7684\u7cfb\u7edf\u4e0a\u4f1a\u6709\u4e0d\u540c\u7684\u7ed3\u679c.  </p> <p>Example</p> <p><pre><code>#include &lt;unistd.h&gt;\nint main()\n{\nFork();\nFork();\nprintf(\"hello\\n\");\nexit(0);\n} </code></pre> </p> <p>Hint: \u6709 fork \u5b58\u5728\u7684\u7a0b\u5e8f\u6700\u597d\u753b\u51fa\u62d3\u6251\u56fe.  </p>"},{"location":"CSAPP/8/#_19","title":"\u56de\u6536\u8fdb\u7a0b","text":"<p>\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u7ec8\u6b62\u65f6, \u5b83\u4f1a\u4e00\u76f4\u4fdd\u6301\u5728\u5df2\u7ec8\u6b62\u7684\u72b6\u6001\u76f4\u5230\u88ab\u5b83\u7684\u7236\u8fdb\u7a0b\u56de\u6536(reaped). \u5f53\u7236\u8fdb\u7a0b\u56de\u6536\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u65f6, \u5185\u6838\u5c06\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa\u72b6\u6001\u4f20\u9012\u7ed9\u7236\u8fdb\u7a0b, \u7136\u540e\u629b\u5f03\u5df2\u7ec8\u6b62\u7684\u7236\u8fdb\u7a0b, \u6b64\u65f6\u8be5\u8fdb\u7a0b\u4e0d\u518d\u5b58\u5728\u4e86. \u4e00\u4e2a\u7ec8\u6b62\u4e86\u8fd8\u6ca1\u88ab\u56de\u6536\u7684\u8fdb\u7a0b\u79f0\u4e3a\u50f5\u6b7b\u8fdb\u7a0b(zombie). \u5982\u679c\u4e00\u4e2a\u7236\u8fdb\u7a0b\u7ec8\u6b62\u4e86, \u5185\u6838\u4f1a\u5b89\u6392 init \u8fdb\u7a0b\u79f0\u8c13\u4ed6\u7684\u5b64\u513f\u8fdb\u7a0b\u7684\u517b\u7236. init \u8fdb\u7a0b\u7684 PID \u4e3a 1, \u662f\u5728\u7cfb\u7edf\u542f\u52a8\u540e\u7531\u5185\u6838\u521b\u5efa\u7684, \u5b83\u4e0d\u4f1a\u7ec8\u6b62, \u662f\u6240\u6709\u8fdb\u7a0b\u7684\u7956\u5148.   </p> <p>\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7<code>waitpid</code>\u51fd\u6570\u6765\u7b49\u5f85\u5b83\u7684\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u6216\u505c\u6b62, \u7236\u8fdb\u7a0b\u4f1a\u5f97\u5230\u88ab\u56de\u6536\u7684\u5b50\u8fdb\u7a0b PID, \u4e14\u5185\u6838\u4f1a\u6e05\u9664\u6b64\u50f5\u6b7b\u8fdb\u7a0b.  </p> <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\npid_t waitpid(pid_t pid, int *statusp, int options); </code></pre> <ul> <li> <p>\u7b49\u5f85\u96c6\u5408 pid</p> <ul> <li><code>pid&gt;0</code>, \u7b49\u5f85\u96c6\u5408\u5c31\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5b50\u8fdb\u7a0b, \u5b83\u7684\u8fdb\u7a0b PID \u7b49\u4e8e pid.  </li> <li><code>pid=-1</code>, \u7b49\u5f85\u96c6\u5408\u5c31\u662f\u7531\u7236\u8fdb\u7a0b\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u7ec4\u6210\u7684.  </li> </ul> </li> <li> <p>\u7b49\u5f85\u884c\u4e3a options</p> <ul> <li><code>0</code> \u9ed8\u8ba4\u9009\u9879. waitpid \u6302\u8d77\u8c03\u7528\u8fdb\u7a0b\u7684\u6267\u884c, \u76f4\u5230\u5b83\u7684\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7ec8\u6b62. \u5982\u679c\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u5728\u521a\u8c03\u7528\u7684\u65f6\u523b\u5df2\u7ecf\u7ec8\u6b62\u4e86, \u90a3\u4e48 waitpid \u5c31\u7acb\u523b\u8fd4\u56de. \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5 waitpid \u8fd4\u56de\u5bfc\u81f4 waitpid \u8fd4\u56de\u7684\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u7684 PID. \u6b64\u65f6\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u88ab\u56de\u6536.  </li> <li><code>WNOHANG</code> \u5982\u679c\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b\u90fd\u8fd8\u6ca1\u6709\u7ec8\u6b62, \u90a3\u4e48\u5c31\u7acb\u5373\u8fd4\u56de 0. \u5982\u679c\u60f3\u5728\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u7684\u540c\u65f6\u505a\u4e9b\u5176\u4ed6\u5de5\u4f5c, \u8fd9\u4e2a\u9009\u9879\u4f1a\u6709\u7528.  </li> <li><code>WUNTRACED</code> \u6302\u8d77\u8c03\u7528\u7a0b\u5e8f\u7684\u6267\u884c, \u76f4\u5230\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u53d8\u6210\u5df2\u7ec8\u6b62\u6216\u88ab\u505c\u6b62.  </li> <li><code>WCONTINUED</code> \u6302\u8d77\u8c03\u7528\u7a0b\u5e8f\u7684\u6267\u884c, \u76f4\u5230\u7b49\u5f85\u96c6\u5408\u4e2d\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u7ec8\u6b62\u6216\u8005\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u88ab\u505c\u6b62\u7684\u8fdb\u7a0b\u6536\u5230 SIGCONT \u4fe1\u53f7\u91cd\u65b0\u5f00\u59cb\u6267\u884c.  </li> <li>\u6ce8: \u53ef\u4ee5\u7528<code>|</code>\u5c06\u9009\u9879\u7ed3\u5408.  </li> </ul> </li> <li> <p>\u68c0\u67e5\u5df2\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa\u72b6\u6001 \u5982\u679c statusp \u53c2\u6570\u975e\u7a7a, waitpid \u4f1a\u5728 status \u4e2d\u653e\u4e0a\u5173\u4e8e\u5bfc\u81f4\u8fd4\u56de\u7684\u5b50\u8fdb\u7a0b\u7684\u72b6\u6001\u4fe1\u606f, status \u662f statusp \u6307\u5411\u7684\u503c.  </p> <ul> <li><code>WIFEXITED(status)</code>: \u5982\u679c\u5b50\u8fdb\u7a0b\u901a\u8fc7\u8c03\u7528 exit \u6216\u8005 return \u6b63\u5e38\u7ec8\u6b62\u5c31\u8fd4\u56de true, \u6b64\u65f6\u53ef\u901a\u8fc7<code>WEXITSTATUS(status)</code>\u83b7\u5f97\u9000\u51fa\u72b6\u6001.  </li> <li><code>WIFSIGNALED(status)</code>: \u5982\u679c\u5b50\u8fdb\u7a0b\u56e0\u4e3a\u4e00\u4e2a\u672a\u88ab\u6355\u83b7\u7684\u4fe1\u53f7\u7ec8\u6b62, \u8fd4\u56de true, \u6b64\u65f6\u53ef\u901a\u8fc7<code>WTERMSIG(statusp)</code>\u83b7\u5f97\u4fe1\u53f7\u7f16\u53f7.  </li> <li><code>WIFSTOPPED(statusp)</code>: \u5982\u679c\u5f15\u8d77\u51fd\u6570\u8fd4\u56de\u7684\u5b50\u8fdb\u7a0b\u662f\u505c\u6b62\u7684, \u5219\u8fd4\u56de true, \u6b64\u65f6\u53ef\u901a\u8fc7 WSTOPSIG(statusp) \u83b7\u5f97\u5f15\u8d77\u5b50\u8fdb\u7a0b\u505c\u6b62\u7684\u4fe1\u53f7\u7f16\u53f7.  </li> <li><code>WIFCONTINUED(statusp)</code>: \u5982\u679c\u5b50\u8fdb\u7a0b\u6536\u5230 SIGCONT \u4fe1\u53f7\u91cd\u65b0\u8fd0\u884c, \u5219\u8fd4\u56de true.  </li> </ul> </li> <li> <p>\u5982\u679c\u8c03\u7528\u8fdb\u7a0b\u6ca1\u6709\u5b50\u8fdb\u7a0b, \u90a3\u4e48 waitpid \u8fd4\u56de -1, \u5e76\u8bbe\u7f6e errno \u4e3a ECHILD. \u5982\u679c waitpid \u88ab\u4e00\u4e2a\u4fe1\u53f7\u4e2d\u65ad, \u90a3\u4e48\u5b83\u8fd4\u56de -1, \u5e76\u8bbe\u7f6e errno \u4e3a EINTR.  </p> </li> </ul> <p>wait \u51fd\u6570\u662f waitpid \u7684\u7b80\u5355\u7248\u672c. <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\npid_t wait(int *statusp);\n</code></pre></p> <p>\u8c03\u7528<code>wait(&amp;status)</code>\u7b49\u4ef7\u4e8e\u8c03\u7528<code>waitpid(-1, &amp;status, 0)</code></p> <p>Example</p> <p><pre><code>int main()\n{\nif (Fork() == 0)\n{\nprintf(\"a\");\nfflush(stdout);\n}\nelse\n{\nprintf(\"b\");\nfflush(stdout);\nwait(NULL);\n}\npritnf(\"c\"); fflush(stdout);\nexit(0);\n}\n</code></pre> \u753b\u51fa\u5176\u62d3\u6251\u56fe: </p> <p>Warning</p> <p>\u7a0b\u5e8f\u4e0d\u4f1a\u6309\u7279\u5b9a\u7684\u987a\u5e8f\u56de\u6536\u5b50\u8fdb\u7a0b.  </p>"},{"location":"CSAPP/8/#_20","title":"\u8ba9\u8fdb\u7a0b\u4f11\u7720","text":"<pre><code>#include &lt;unistd.h&gt;\nunsigned int sleep(unsigned int secs);\nint pause(void);\n</code></pre> <p><code>sleep</code>\u51fd\u6570\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u6302\u8d77\u4e00\u6bb5\u6307\u5b9a\u7684\u65f6\u95f4 \u5982\u679c\u8bf7\u6c42\u7684\u65f6\u95f4\u5230\u4e86, <code>sleep</code>\u5c31\u8fd4\u56de 0, \u5426\u5219\u8fd4\u56de\u8fd8\u5269\u4e0b\u8981\u4f11\u7720\u7684\u65f6\u95f4. \u5f53<code>sleep</code>\u88ab\u4e00\u4e2a\u4fe1\u53f7\u4e2d\u65ad\u65f6, \u5b83\u53ef\u80fd\u4f1a\u8fc7\u65e9\u7684\u8fd4\u56de.  </p> <p><code>pause</code>\u51fd\u6570\u5c06\u8fdb\u7a0b\u6302\u8d77, \u76f4\u5230\u8be5\u8fdb\u7a0b\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7.  </p>"},{"location":"CSAPP/8/#_21","title":"\u52a0\u8f7d\u5e76\u8fd0\u884c\u7a0b\u5e8f","text":"<p><code>execve</code>\u51fd\u6570\u5728\u5f53\u524d\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u52a0\u8f7d\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7a0b\u5e8f. <pre><code>#include &lt;unistd.h&gt;\nint execve(const char *filename, const char *argv[], const char *envp[]); </code></pre></p> <p><code>execve</code>\u51fd\u6570\u52a0\u8f7d\u5e76\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6 filename, \u4e14\u5e26\u53c2\u6570\u5217\u8868 argv \u548c\u73af\u5883\u53d8\u91cf\u5217\u8868 envp. \u53ea\u6709\u5f53\u51fa\u73b0\u9519\u8bef(e.g. \u627e\u4e0d\u5230 filename), <code>execve</code>\u624d\u4f1a\u8fd4\u56de\u5230\u8c03\u7528\u7a0b\u5e8f. \u52a0\u8f7d filename \u540e, \u8c03\u7528\u542f\u52a8\u4ee3\u7801, \u5e76\u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u65b0\u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570. argv \u53d8\u91cf\u6307\u5411\u4e00\u4e2a\u4ee5 null \u7ed3\u5c3e\u7684\u6307\u9488\u6570\u7ec4, \u5176\u4e2d\u6bcf\u4e2a\u6307\u9488\u90fd\u6307\u5411\u4e00\u4e2a\u53c2\u6570\u5b57\u7b26\u4e32, envp\u7c7b\u4f3c.   </p> <p>\u7528\u6237\u6808\u7684\u7ec4\u7ec7\u7ed3\u6784:   \u5176\u4e2d\u5168\u5c40\u53d8\u91cf environ \u6307\u5411 envp[0], \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 environ \u6765\u83b7\u5f97\u73af\u5883\u5217\u8868.  </p> <p>\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e9b\u51fd\u6570\u80fd\u591f\u5bf9\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c: <pre><code>#include &lt;stdlib.h&gt;\nchar *getenv(const char *name); //\u83b7\u5f97\u540d\u5b57\u4e3aname\u7684\u73af\u5883\u503c\nint setenv(const char *name, const char *newvalue, int overwrite); //\u5bf9\u73af\u5883\u503c\u8fdb\u884c\u4fee\u6539\nint unsetenv(const char *name); // \u5220\u9664\u73af\u5883\u53d8\u91cf\n</code></pre></p> <p>fork &amp; execve</p> <ul> <li><code>fork</code>\u51fd\u6570\u65b0\u5efa\u4e00\u4e2a\u4e0d\u540c PID \u7684\u5b50\u8fdb\u7a0b\uff0c\u5177\u6709\u548c\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u4e0a\u4e0b\u6587\uff0c\u662f\u7236\u8fdb\u7a0b\u7684\u590d\u5236\u54c1\uff0c\u8fd0\u884c\u76f8\u540c\u7684\u4ee3\u7801\u3001\u7a0b\u5e8f\u548c\u53d8\u91cf\uff0c\u5c31\u662f\u7a0b\u5e8f\u4e0d\u53d8\uff0c\u800c\u5728\u4e0d\u540c\u8fdb\u7a0b. \u800c<code>execve</code>\u51fd\u6570\u4fdd\u6301 PID \u4e0d\u53d8\uff0c\u5728\u5f53\u524d\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u52a0\u8f7d\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7a0b\u5e8f\uff0c\u4f1a\u8986\u76d6\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5e76\u7ee7\u627f\u8c03\u7528<code>execve</code>\u51fd\u6570\u65f6\u5df2\u6253\u5f00\u7684\u6240\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5c31\u662f\u4fdd\u6301\u8fdb\u7a0b\u4e0d\u53d8\uff0c\u4f46\u662f\u8fd0\u884c\u5b8c\u5168\u4e0d\u540c\u7684\u7a0b\u5e8f.  </li> <li><code>fork</code>\u51fd\u6570\u8c03\u7528\u4e00\u6b21\u8fd4\u56de\u4e24\u6b21\uff0c\u800c<code>execve</code>\u51fd\u6570\u8c03\u7528\u540e\uff0c\u53ea\u6709\u51fa\u73b0\u9519\u8bef\u624d\u4f1a\u8fd4\u56de\u5230\u8c03\u7528\u7a0b\u5e8f.  </li> <li>\u60f3\u8981\u4fdd\u6301\u5f53\u524d\u8fdb\u884c\u8fd0\u884c\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7<code>fork</code>\u65b0\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u7136\u540e\u5728\u5b50\u8fdb\u7a0b\u4e2d\u7528<code>execve</code>\u6267\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6b64\u65f6\u5728\u7236\u8fdb\u7a0b\u5c31\u8fd0\u884c\u539f\u6765\u7684\u7a0b\u5e8f\uff0c\u800c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5c31\u8fd0\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f.  </li> </ul>"},{"location":"CSAPP/8/#_22","title":"\u4fe1\u53f7","text":"<p>\u4fe1\u53f7\u5c31\u662f\u4e00\u6761\u5c0f\u6d88\u606f, \u5b83\u901a\u77e5\u8fdb\u7a0b\u7cfb\u7edf\u4e2d\u53d1\u751f\u4e86\u4e00\u4e2a\u67d0\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6.  </p> <ul> <li>\u5185\u6838\u68c0\u6d4b\u5230\u4e86\u4e00\u4e2a\u7cfb\u7edf\u4e8b\u4ef6\uff0c\u6bd4\u5982\u9664\u96f6\u9519\u8bef\u3001\u6267\u884c\u975e\u6cd5\u6307\u4ee4\u6216\u5b50\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u4f4e\u5c42\u6b21\u7684\u786c\u4ef6\u5f02\u5e38\u90fd\u662f\u7531\u5185\u6838\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5904\u7406\u7684\uff0c\u5bf9\u7528\u6237\u8fdb\u7a0b\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u7ed9\u7528\u6237\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u7684\u5f62\u5f0f\u6765\u544a\u77e5\uff0c\u6bd4\u5982\u9664\u96f6\u9519\u8bef\u5c31\u53d1\u9001<code>SIGFPE</code>\u4fe1\u53f7\uff0c\u6267\u884c\u975e\u6cd5\u6307\u4ee4\u5c31\u53d1\u9001<code>SIGILL</code>\u4fe1\u53f7\uff0c\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u5185\u6838\u5c31\u53d1\u9001<code>SIGHLD</code>\u5230\u7236\u8fdb\u7a0b\u4e2d\uff0c\u5219\u6b64\u65f6\u7236\u8fdb\u7a0b\u5c31\u80fd\u5bf9\u8be5\u5b50\u8fdb\u7a0b\u8c03\u7528<code>waitpid</code>\u6765\u8fdb\u884c\u56de\u6536. </li> <li>\u5185\u6838\u6216\u5176\u4ed6\u8fdb\u7a0b\u51fa\u73b0\u4e86\u8f83\u9ad8\u5c42\u6b21\u7684\u8f6f\u4ef6\u4e8b\u4ef6\uff0c\u6bd4\u5982\u8f93\u5165\u7ec4\u5408\u952e\uff0c\u6216\u4e00\u4e2a\u8fdb\u7a0b\u5c1d\u8bd5\u7ec8\u6b62\u5176\u4ed6\u8fdb\u7a0b\uff0c\u90fd\u662f\u663e\u793a\u8981\u6c42\u5185\u6838\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\u7ed9\u76ee\u6807\u8fdb\u7a0b\uff0c\u6bd4\u5982\u8f93\u5165\u7ec4\u5408\u952e\u5185\u6838\u4f1a\u53d1\u9001<code>SIGINT</code>\u4fe1\u53f7\u7ed9\u6240\u6709\u8fdb\u7a0b\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u53d1\u9001<code>SIGKILL</code>\u4fe1\u53f7\u7ed9\u522b\u7684\u8fdb\u7a0b\u6765\u8fdb\u884c\u7ec8\u6b62.  </li> </ul> <p>\u6ce8: \u5f02\u5e38\u662f\u7531\u786c\u4ef6\u548c\u8f6f\u4ef6\u5171\u540c\u5b9e\u73b0, \u800c\u4fe1\u53f7\u5b8c\u5168\u7531\u8f6f\u4ef6\u5b9e\u73b0, \u4e14\u90fd\u662f\u7531\u5185\u6838\u53d1\u9001. \u5982\u4e0b\u662f Linux \u7cfb\u7edf\u652f\u6301\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u4fe1\u53f7, \u6bcf\u79cd\u4fe1\u53f7\u90fd\u5bf9\u5e94\u67d0\u79cd\u7cfb\u7edf\u4e8b\u4ef6. </p> <p>\u4f20\u9001\u4e00\u4e2a\u4fe1\u53f7\u5230\u76ee\u7684\u8fdb\u7a0b\u662f\u7531\u4e24\u4e2a\u6b65\u9aa4\u7ec4\u6210:  </p> <ul> <li>\u53d1\u9001\u4fe1\u53f7 \u5185\u6838\u901a\u8fc7\u66f4\u65b0\u76ee\u7684\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u7684\u67d0\u4e2a\u72b6\u6001, \u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\u7ed9\u76ee\u7684\u8fdb\u7a0b. \u53d1\u9001\u4fe1\u53f7\u53ef\u80fd\u6709\u4e24\u79cd\u539f\u56e0: \u5185\u6838\u68c0\u6d4b\u5230\u4e00\u4e2a\u7cfb\u7edf\u65f6\u95f4(\u5982\u9664\u96f6, \u5b50\u8fdb\u7a0b\u7ec8\u6b62); \u4e00\u4e2a\u8fdb\u7a0b\u8c03\u7528\u4e86<code>kill</code>\u51fd\u6570, \u663e\u5f0f\u5730\u8981\u6c42\u5185\u6838\u53d1\u9001\u4fe1\u53f7. \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u53d1\u4fe1\u53f7\u7ed9\u4ed6\u81ea\u5df1.  </li> <li>\u63a5\u6536\u4fe1\u53f7 \u5f53\u76ee\u7684\u8fdb\u7a0b\u88ab\u5185\u6838\u5f3a\u8feb\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5bf9\u4fe1\u53f7\u7684\u53d1\u9001\u505a\u51fa\u53cd\u5e94\u65f6, \u5b83\u5c31\u63a5\u53d7\u4e86\u4fe1\u53f7. \u8fdb\u7a0b\u53ef\u4ee5\u5ffd\u7565\u4fe1\u53f7, \u7ec8\u6b62\u8fdb\u7a0b, \u6216\u6267\u884c\u7528\u6237\u7ea7\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f. </li> </ul> <p>\u4e00\u4e2a\u53d1\u51fa\u800c\u6ca1\u6709\u63a5\u6536\u7684\u4fe1\u53f7\u53eb\u505a\u5f85\u5904\u7406\u4fe1\u53f7(pending signal). \u4efb\u4f55\u65f6\u523b\u4e00\u79cd\u7c7b\u578b\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u5f85\u5904\u7406\u4fe1\u53f7. \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u6709\u7c7b\u578b k \u7684\u5f85\u5904\u7406\u4fe1\u53f7, \u90a3\u4e48\u63a5\u4e0b\u6765\u4efb\u4f55\u53d1\u5230\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u7c7b\u578b k \u4fe1\u53f7\u5c06\u88ab\u76f4\u63a5\u4e22\u5f03. \u5f53\u4e00\u79cd\u4fe1\u53f7\u88ab\u5835\u585e\u65f6, \u5b83\u4ecd\u7136\u53ef\u4ee5\u88ab\u53d1\u9001, \u53ea\u662f\u4e0d\u4f1a\u88ab\u63a5\u6536. \u4e00\u4e2a\u5f85\u5904\u7406\u4fe1\u53f7\u6700\u591a\u88ab\u63a5\u53d7\u4e00\u6b21.  </p>"},{"location":"CSAPP/8/#_23","title":"\u53d1\u9001\u4fe1\u53f7","text":"<p>Unix \u63d0\u4f9b\u5411\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u7684\u673a\u5236, \u90fd\u662f\u57fa\u4e8e\u8fdb\u7a0b\u7ec4(process group).  </p>"},{"location":"CSAPP/8/#_24","title":"\u8fdb\u7a0b\u7ec4","text":"<p>\u6bcf\u4e2a\u8fdb\u7a0b\u53ea\u5c5e\u4e8e\u4e00\u4e2a\u8fdb\u7a0b\u7ec4, \u8fdb\u7a0b\u7ec4\u7531\u4e00\u4e2a\u6b63\u6574\u6570\u8fdb\u7a0b\u7ec4 ID \u6765\u6807\u8bc6. <code>getpgrp</code>\u51fd\u6570\u8fd4\u56de\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u7ec4 ID. <pre><code>#include &lt;unistd.h&gt;\npid_t getpgrp(void); //\u8fd4\u56de\u6240\u5728\u7684\u8fdb\u7a0b\u7ec4\n</code></pre> \u9ed8\u8ba4\u5730, \u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fdb\u7a0b\u7ec4. \u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u53ef\u4ee5\u901a\u8fc7<code>set-pgid</code>\u51fd\u6570\u6765\u6539\u53d8\u81ea\u5df1\u6216\u5176\u4ed6\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u7ec4. <pre><code>#include &lt;unistd.h&gt;\nint setpgip(pid_t pid, pid_t pgid); //\u8bbe\u7f6e\u8fdb\u7a0b\u7ec4\n</code></pre> <code>setpgid</code>\u51fd\u6570\u5c06\u8fdb\u7a0b pid \u7684\u8fdb\u7a0b\u7ec4\u6539\u4e3a pgid. \u5982\u679c pid \u662f 0, \u90a3\u4e48\u5c31\u4f7f\u7528\u5f53\u524d\u8fdb\u7a0b\u7684 PID. \u5982\u679c pgid \u662f 0, \u90a3\u4e48\u5c31\u7528 pid \u6307\u5b9a\u7684\u8fdb\u7a0b PID \u4f5c\u4e3a\u8fdb\u7a0b\u7ec4 ID(\u521b\u5efa/\u52a0\u5165\u4e00\u4e2a\u8fdb\u7a0b\u7ec4 ID \u4e3a pid \u7684\u8fdb\u7a0b\u7ec4).  </p> <p>Unix shell \u4f7f\u7528\u4f5c\u4e1a(job) \u7684\u6982\u5ff5\u6765\u8868\u793a\u5bf9\u4e00\u6761\u547d\u4ee4\u884c\u6c42\u503c\u800c\u521b\u5efa\u7684\u8fdb\u7a0b. \u5728\u4efb\u4f55\u65f6\u523b\u81f3\u591a\u6709\u4e00\u4e2a\u524d\u53f0\u4f5c\u4e1a\u548c\u4efb\u610f\u4e2a\u540e\u53f0\u4f5c\u4e1a. shell \u4f1a\u4e3a\u6bcf\u4e2a\u4f5c\u4e1a\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u8fdb\u7a0b\u7ec4, \u8be5\u8fdb\u7a0b\u7ec4 ID \u7531\u8be5\u4f5c\u4e1a\u4e2d\u4efb\u610f\u4e00\u4e2a\u7236\u8fdb\u7a0b\u7684 PID \u51b3\u5b9a. </p>"},{"location":"CSAPP/8/#_25","title":"\u53d1\u9001\u4fe1\u53f7","text":"<ul> <li> <p>\u7528<code>/bin/kill</code>\u53d1\u9001\u4fe1\u53f7     <code>/bin/kill [-\u4fe1\u53f7\u7f16\u53f7] id</code>\u53ef\u4ee5\u5411\u53e6\u5916\u7684\u8fdb\u7a0b\u53d1\u9001\u4efb\u610f\u7684\u4fe1\u53f7. e.g. <code>linux&gt; /bin/kill -9 15213</code>\u53d1\u9001\u4fe1\u53f7 9(SIGKILL)\u7ed9\u8fdb\u7a0b 15213.  </p> <p>\u4e00\u4e2a\u4e3a\u8d1f\u7684 PID \u4f1a\u5bfc\u81f4\u4fe1\u53f7\u88ab\u53d1\u9001\u5230\u8fdb\u7a0b\u7ec4 PID \u7684\u6bcf\u4e2a\u8fdb\u7a0b. e.g. <code>linux&gt; /bin/kill -0 -15213</code>\u53d1\u9001\u4fe1\u53f7\u5230\u8fdb\u7a0b\u7ec4 15213 \u7684\u6bcf\u4e2a\u8fdb\u7a0b.  </p> <p>\u6ce8: \u6211\u4eec\u4f7f\u7528\u5b8c\u6574\u8def\u5f84<code>/bin/kill</code>, \u56e0\u4e3a\u6709\u4e9b Unix shell \u6709\u81ea\u5df1\u5185\u7f6e\u7684<code>kill</code>\u6307\u4ee4.  </p> </li> <li> <p>\u4ece\u952e\u76d8\u53d1\u9001\u4fe1\u53f7     \u5728\u952e\u76d8\u4e0a\u8f93\u5165<code>Ctrl+C</code>\u4f1a\u5bfc\u81f4\u5185\u6838\u53d1\u9001\u4e00\u4e2a<code>SIGINT</code>\u4fe1\u53f7\u5230\u524d\u53f0\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u7ec8\u6b62\u524d\u53f0\u4f5c\u4e1a. \u7c7b\u4f3c\u5730, \u8f93\u5165<code>Ctrl+Z</code>\u4f1a\u53d1\u9001\u4e00\u4e2a<code>SIGTSTP</code>\u4fe1\u53f7\u5230\u524d\u53f0\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b. \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7ed3\u679c\u662f\u505c\u6b62(\u6302\u8d77)\u524d\u53f0\u4f5c\u4e1a.  </p> </li> <li> <p>\u7528<code>kill</code>\u51fd\u6570\u53d1\u9001\u4fe1\u53f7     \u8fdb\u7a0b\u901a\u8fc7\u8c03\u7528<code>kill</code>\u51fd\u6570\u53d1\u9001\u4fe1\u53f7\u7ed9\u5176\u4ed6\u8fdb\u7a0b(\u5305\u62ec\u5b83\u4eec\u81ea\u5df1) <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;signal.h&gt;\nint kill(pid_t pid, int sig); </code></pre>     \u5982\u679c pid \u5927\u4e8e 0, \u90a3\u4e48<code>kill</code>\u51fd\u6570\u53d1\u9001\u4fe1\u53f7 sig \u7ed9\u8fdb\u7a0b pid. \u5982\u679c pid \u7b49\u4e8e 0, \u90a3\u4e48<code>kill</code>\u53d1\u9001\u4fe1\u53f7\u7ed9\u8c03\u7528\u8fdb\u7a0b\u7ec4\u6240\u5728\u7684\u6bcf\u4e2a\u8fdb\u7a0b(\u5305\u62ec\u8c03\u7528\u8fdb\u7a0b\u81ea\u5df1) \u5982\u679c pid \u5c0f\u4e8e 0, <code>kill</code>\u53d1\u9001\u4fe1\u53f7\u7ed9\u8fdb\u7a0b\u7ec4 \\({\\left|pid\\right|}\\) \u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b.  </p> </li> <li> <p>\u7528<code>alarm</code>\u51fd\u6570\u53d1\u9001\u4fe1\u53f7     \u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528<code>alarm</code>\u51fd\u6570\u5411\u5b83\u81ea\u5df1\u53d1\u9001<code>SIGALRM</code>\u4fe1\u53f7. <pre><code>#include &lt;unistd.h&gt;\nunsigned int alarm(unsigned int secs); </code></pre> <code>alarm</code>\u51fd\u6570\u5b89\u6392\u5185\u6838\u5728 secs \u79d2\u540e\u53d1\u9001\u4e00\u4e2a <code>SIGALRM</code> \u4fe1\u53f7\u7ed9\u8c03\u7528\u8fdb\u7a0b. \u4e00\u4e2a\u8fdb\u7a0b\u53ea\u80fd\u6709\u4e00\u4e2a\u95f9\u949f, \u5982\u679c\u5728\u8c03\u7528<code>alarm</code>\u524d\u5df2\u7ecf\u6709\u5f85\u5904\u7406\u7684\u95f9\u949f, \u5219\u66ff\u6362\u5b83\u5e76\u8fd4\u56de\u5f85\u5904\u7406\u95f9\u949f\u5269\u4f59\u7684\u65f6\u95f4. secs \u5982\u679c\u4e3a 0 \u5219\u4e0d\u4f1a\u5b89\u6392\u65b0\u7684\u95f9\u949f.  </p> </li> </ul>"},{"location":"CSAPP/8/#_26","title":"\u63a5\u6536\u4fe1\u53f7","text":"<p>\u5f53\u5185\u6838\u628a\u8fdb\u7a0b p \u4ece\u5185\u6838\u6a21\u5f0f\u5207\u6362\u5230\u7528\u6237\u6a21\u5f0f\u65f6(\u4f8b\u5982\u4ece\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u6216\u8005\u5b8c\u6210\u4e00\u6b21\u4e0a\u4e0b\u6587\u5207\u6362), \u5b83\u4f1a\u68c0\u67e5\u8fdb\u7a0b p \u7684\u672a\u88ab\u963b\u585e\u7684\u5f85\u5904\u7406\u4fe1\u53f7\u7684\u96c6\u5408, \u5373<code>pending &amp; ~blocked</code> \u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u4e3a\u7a7a, \u90a3\u4e48\u5185\u6838\u5c06\u63a7\u5236\u4f20\u9012\u5230 p \u7684\u903b\u8f91\u63a7\u5236\u6d41\u7684\u4e0b\u4e00\u6761\u6307\u4ee4. \u5982\u679c\u96c6\u5408\u975e\u7a7a, \u5185\u6838\u9009\u62e9\u96c6\u5408\u4e2d\u67d0\u4e2a\u4fe1\u53f7 k(\u901a\u5e38\u662f\u6700\u5c0f\u7684 k)\u5e76\u5f3a\u5236 p \u63a5\u6536\u4fe1\u53f7 k, \u5b8c\u6210\u4fe1\u53f7\u5bf9\u5e94\u7684\u884c\u4e3a, \u518d\u5c06\u63a7\u5236\u8f6c\u79fb\u5230 p \u903b\u8f91\u6d41\u7684\u4e0b\u4e00\u6761\u6307\u4ee4. \u6bcf\u4e2a\u4fe1\u53f7\u7c7b\u578b\u90fd\u6709\u4e00\u79cd\u9884\u5b9a\u4e49\u7684\u9ed8\u8ba4\u884c\u4e3a:  </p> <ul> <li>\u8fdb\u7a0b\u7ec8\u6b62   </li> <li>\u8fdb\u7a0b\u7ec8\u6b62\u5e76\u8f6c\u50a8\u5185\u5b58  </li> <li>\u8fdb\u7a0b\u505c\u6b62(\u6302\u8d77)\u76f4\u5230\u88ab<code>SIGCONT</code>\u4fe1\u53f7\u91cd\u542f  </li> <li>\u8fdb\u7a0b\u5ffd\u7565\u8be5\u4fe1\u53f7  </li> </ul> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7<code>signal</code>\u51fd\u6570\u4fee\u6539\u4e0e\u4fe1\u53f7\u76f8\u5173\u8054\u7684\u9ed8\u8ba4\u884c\u4e3a.(<code>SIGSTOP``SIGKILL</code>\u5b83\u4eec\u7684\u9ed8\u8ba4\u884c\u4e3a\u4e0d\u80fd\u88ab\u4fee\u6539) <pre><code>#include &lt;signal.h&gt;\ntypedef void (*sighandler_t)(int); sighandler_t signal(int signum, sighandler_t handler);\n</code></pre></p> <ul> <li>\u5982\u679c handler \u662f<code>SIG_IGN</code>, \u90a3\u4e48\u5ffd\u7565\u7c7b\u578b\u4e3a signum \u7684\u4fe1\u53f7.  </li> <li>\u5982\u679c handler \u662f<code>SIG_DFL</code>, \u90a3\u4e48\u7c7b\u578b\u4e3a signum \u7684\u4fe1\u53f7\u884c\u4e3a\u6062\u590d\u4e3a\u9ed8\u8ba4\u884c\u4e3a.  </li> <li>\u5426\u5219 handler \u4e3a\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u5730\u5740, \u8fd9\u4e2a\u51fd\u6570\u79f0\u4e3a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f. \u5f53\u63a5\u6536\u5230 signum \u4fe1\u53f7\u65f6\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u7a0b\u5e8f. \u8fd9\u79cd\u884c\u4e3a\u53eb\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f.(\u540c\u4e00\u4e2a\u5904\u7406\u51fd\u6570\u53ef\u4ee5\u6355\u83b7\u591a\u79cd\u7c7b\u578b\u7684\u4fe1\u53f7) \u8c03\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u79f0\u4e3a\u6355\u83b7\u4fe1\u53f7, \u6267\u884c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u79f0\u4e3a\u5904\u7406\u4fe1\u53f7.   \u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u63a7\u5236(\u901a\u5e38)\u4f20\u9012\u56de\u63a7\u5236\u6d41\u4e2d\u4e0b\u4e00\u6761\u6307\u4ee4.  </li> <li>\u5f53<code>signal</code>\u6267\u884c\u6210\u529f, \u8fd4\u56de\u4e4b\u524d signal handler \u7684\u503c, \u5426\u5219\u8fd4\u56de<code>SIG_ERR</code>(\u4e0d\u8bbe\u7f6e errno)</li> </ul> <p>Warning</p> <p>\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u5176\u4ed6\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u65ad. </p> <p>Warning</p> <p>\u5728 fork + execve \u540e, \u5b50\u8fdb\u7a0b\u8fdb\u5165\u5230\u65b0\u7684\u4e0a\u4e0b\u6587\u91cc, \u6b64\u65f6\u539f\u5148\u7ed1\u5b9a\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e0d\u518d\u751f\u6548, \u800c\u662f\u56de\u5230\u9ed8\u8ba4\u72b6\u6001.  </p>"},{"location":"CSAPP/8/#_27","title":"\u963b\u585e\u4fe1\u53f7","text":"<p>\u963b\u585e, \u6307\u4fe1\u53f7\u88ab\u53d1\u9001\u540e\u6682\u4e0d\u63a5\u6536(\u5904\u7406)\u6b64\u4fe1\u53f7, \u800c\u975e\u4e22\u5f03.  </p> <p>Linux \u63d0\u4f9b\u663e\u5f0f\u548c\u9690\u5f0f\u7684\u963b\u585e\u673a\u5236.  </p> <ul> <li>\u9690\u5f0f\u963b\u585e\u673a\u5236: \u5185\u6838\u9ed8\u8ba4\u963b\u585e\u4efb\u4f55\u5f53\u524d\u5904\u7406\u7a0b\u5e8f\u6b63\u5728\u5904\u7406\u4fe1\u53f7\u7c7b\u578b\u7684\u5f85\u5904\u7406\u7684\u4fe1\u53f7. e.g. \u7a0b\u5e8f\u6355\u83b7\u4e86\u4fe1\u53f7 s, \u6b63\u5728\u6267\u884c\u5176\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f, \u8fd9\u65f6\u518d\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7 s, s \u4f1a\u53d8\u6210\u5f85\u5904\u7406\u800c\u4e0d\u662f\u88ab\u63a5\u6536.  </li> <li> <p>\u663e\u5f0f\u963b\u585e\u673a\u5236: \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528<code>sigprocmask</code>\u51fd\u6570\u548c\u5b83\u7684\u8f85\u52a9\u51fd\u6570, \u663e\u5f0f\u5730\u963b\u585e\u548c\u89e3\u9664\u963b\u585e\u9009\u5b9a\u7684\u4fe1\u53f7. <pre><code>#include &lt;signal.h&gt;\nint sigprocmask(int how, const sigset_t *set, sigset_t *oldset);\n</code></pre> <code>sigprocmask</code>\u51fd\u6570\u6539\u53d8\u5f53\u524d\u963b\u585e\u4fe1\u53f7\u7684\u96c6\u5408(blocked \u4f4d\u5411\u91cf). \u901a\u8fc7 how \u7684\u503c\u6765\u51b3\u5b9a\u6539\u53d8\u96c6\u5408\u7684\u65b9\u5f0f:  </p> </li> <li> <p><code>SIG_BLOCK</code>: \u628a set \u4e2d\u7684\u4fe1\u53f7\u6dfb\u52a0\u5230 blocked \u4e2d. <code>blocked = blocked | set</code></p> </li> <li><code>SIG_UNBLOCK</code>: \u4ece blocked \u4e2d\u5220\u9664 set \u4e2d\u7684\u4fe1\u53f7. <code>blocked = blocked &amp; ~set</code> </li> <li><code>SIG_SETMASK</code>: <code>blocked = mask</code></li> </ul> <p>\u5982\u679c oldset \u975e\u7a7a, \u90a3\u4e48 blocked \u4f4d\u5411\u91cf\u4e4b\u524d\u7684\u503c\u4fdd\u5b58\u5728 oldset \u4e2d.  </p> <p>\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u51fd\u6570\u5bf9 set \u4fe1\u53f7\u96c6\u5408\u8fdb\u884c\u64cd\u4f5c:  <pre><code>int sigemptyset(sigset_t *set); int sigfillset(sigset_t *set);\nint sigaddset(sigset_t *set, int signum);\nint sigdelset(sigset_t *set, int signum); int sigismember(const sigset_t *set, int signum);\n</code></pre></p> <ul> <li><code>sigemptyset</code>: \u521d\u59cb\u5316 set \u4e3a\u7a7a\u96c6\u5408</li> <li><code>sigfillset</code>: \u5c06\u6bcf\u4e2a\u4fe1\u53f7\u90fd\u6dfb\u52a0\u5230 set \u4e2d</li> <li><code>sigaddset</code>: \u5c06 sigunm \u6dfb\u52a0\u5230 set</li> <li><code>sigdelset</code>: \u4ece set \u4e2d\u5220\u9664 signum</li> <li><code>sigismember</code>: \u5982\u679c signum \u662f set \u7684\u6210\u5458\u5219\u8fd4\u56de 1, \u5426\u5219\u8fd4\u56de 0.  </li> </ul>"},{"location":"CSAPP/8/#_28","title":"\u7f16\u5199\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f","text":"<p>\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6709\u51e0\u4e2a\u68d8\u624b\u5c5e\u6027\u4f7f\u5f97\u4ed6\u4eec\u5f88\u96be\u5206\u6790:  </p> <ul> <li>\u5904\u7406\u7a0b\u5e8f\u4e0e\u4e3b\u7a0b\u5e8f\u5728\u76f8\u540c\u7684\u8fdb\u7a0b\u4e2d\u5e76\u53d1\u8fd0\u884c, \u5171\u4eab\u540c\u6837\u7684\u5168\u5c40\u53d8\u91cf.  </li> <li>\u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u63a5\u6536\u4fe1\u53f7\u5e38\u5e38\u6709\u8fdd\u4eba\u7684\u76f4\u89c9  </li> <li>\u4e0d\u540c\u7684\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u8bed\u4e49  </li> </ul>"},{"location":"CSAPP/8/#_29","title":"\u5b89\u5168\u7684\u4fe1\u53f7\u5904\u7406","text":"<ul> <li>\u5904\u7406\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u7b80\u5355. e.g. \u5904\u7406\u7a0b\u5e8f\u53ea\u662f\u7b80\u5355\u5730\u8bbe\u7f6e\u5168\u5c40\u6807\u5fd7\u5e76\u7acb\u5373\u53d1\u6325; \u6240\u6709\u4e0e\u63a5\u6536\u4fe1\u53f7\u76f8\u5173\u7684\u5904\u7406\u90fd\u7531\u4e3b\u7a0b\u5e8f\u6267\u884c, \u5b83\u5468\u671f\u6027\u5730\u68c0\u67e5(\u5e76\u91cd\u7f6e)\u8fd9\u4e2a\u6807\u5fd7.   </li> <li> <p>\u5728\u5904\u7406\u7a0b\u5e8f\u4e2d\u53ea\u8c03\u7528\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570. \u56e0\u4e3a\u5b83\u662f\u53ef\u91cd\u5165\u7684(\u4f8b\u5982\u53ea\u8bbf\u95ee\u5c40\u90e8\u53d8\u91cf), \u8981\u4e48\u5b83\u662f\u4e0d\u80fd\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u65ad\u7684. \u4e0b\u56fe\u5217\u51fa\u4e86 Linux \u5b89\u5168\u7684\u7cfb\u7edf\u7ea7\u51fd\u6570. \u6ce8\u610f\u8bb8\u591a\u5e38\u89c1\u7684\u51fd\u6570(printf, sprintf, malloc, exit)\u90fd\u4e0d\u5728\u6b64\u5217.  </p> <p>SIO(\u5b89\u5168\u7684 I/O \u5305)</p> <p>\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u4ea7\u751f\u8f93\u51fa\u552f\u4e00\u5b89\u5168\u7684\u65b9\u6cd5\u662f\u4f7f\u7528<code>write</code>\u51fd\u6570. <pre><code>#include \"csapp.h\"\nssize_t sio_putl(long v);\nssize_t sio_puts(char s[]);\n//\u5982\u679c\u6210\u529f\u5219\u8fd4\u56de\u4f20\u9001\u7684\u5b57\u8282\u6570, \u51fa\u9519\u8fd4\u56de -1\nvoid sio_error(char s[]);  </code></pre> \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b: <pre><code>ssize_t sio_puts(char s[])\n{\nreturn write(STDOUT_FILENO, s, sio_strlen(s));\n}\nssize_t sio_putl(long v)\n{\nchar s[128];\nsio_ltoa(v, s, 10); /* Based on K&amp;R itoa */\nreturn sio_puts(s);\n}\nvoid sio_error(char s[])/* Put error message and exit */\n{\nsi_puts(s);\n_exit(1);\n}\n</code></pre></p> <ul> <li>\u4fdd\u5b58\u548c\u6062\u590d errno \u8bb8\u591a Linux \u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570\u90fd\u4f1a\u5728\u51fa\u9519\u8fd4\u56de\u65f6\u8bbe\u7f6e errno. \u5728\u5904\u7406\u7a0b\u5e8f\u4e2d\u8c03\u7528\u8fd9\u6837\u7684\u51fd\u6570\u53ef\u80fd\u4f1a\u5e72\u6270\u4e3b\u7a0b\u5e8f\u4e2d\u5176\u4ed6\u4f9d\u8d56\u4e8e errno \u7684\u90e8\u5206. \u89e3\u51b3\u65b9\u6cd5\u662f\u5728\u8fdb\u5165\u5904\u7406\u7a0b\u5e8f\u65f6\u628a errno \u4fdd\u5b58\u5728\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u4e2d, \u5728\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u524d\u6062\u590d\u5b83. \u53ea\u6709\u5728\u5904\u7406\u7a0b\u5e8f\u8981\u8fd4\u56de\u65f6\u624d\u6709\u5fc5\u8981\u8fd9\u4e48\u505a.  </li> <li>\u963b\u585e\u6240\u6709\u4fe1\u53f7, \u4fdd\u62a4\u5bf9\u5171\u4eab\u5168\u5c40\u6570\u636e\u7ed3\u6784\u7684\u8bbf\u95ee \u5bf9\u5168\u5c40\u6570\u636e\u7ed3\u6784\u8bbf\u95ee\u65f6, \u5904\u7406\u7a0b\u5e8f\u548c\u4e3b\u7a0b\u5e8f\u5e94\u8be5\u6682\u65f6\u963b\u585e\u6240\u6709\u7684\u4fe1\u53f7.  </li> <li>\u7528<code>volatile</code>\u58f0\u660e\u5168\u5c40\u53d8\u91cf \u8003\u8651\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u548c\u4e00\u4e2a main \u51fd\u6570(\u5b83\u4eec\u5728\u540c\u4e00\u8fdb\u7a0b\u4e2d), \u5b83\u4eec\u5171\u4eab\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf g. \u5904\u7406\u7a0b\u5e8f\u66f4\u65b0 g, main \u5468\u671f\u6027\u5730\u8bfb g. \u5bf9\u4e00\u4e2a\u4f18\u5316\u7f16\u8bd1\u5668, main \u4e2d g \u7684\u503c\u770b\u4e0a\u53bb\u4ece\u6ca1\u6709\u53d8\u5316\u8fc7, \u56e0\u6b64\u4f7f\u7528\u7f13\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d g \u7684\u526f\u672c\u6765\u6ee1\u8db3\u5bf9 g \u7684\u6bcf\u6b21\u5f15\u7528\u662f\u5f88\u5b89\u5168\u7684, \u8fd9\u5c31\u5bfc\u81f4 main \u51fd\u6570\u53ef\u80fd\u6c38\u8fdc\u65e0\u6cd5\u770b\u5230 g \u66f4\u65b0\u540e\u7684\u503c.  \u53ef\u4ee5\u7528<code>volatile</code>\u7c7b\u578b\u9650\u5b9a\u7b26\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf, \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u7f13\u5b58\u8fd9\u4e2a\u53d8\u91cf. <code>volatile</code>\u9650\u5b9a\u7b26\u5f3a\u8feb\u7f16\u8bd1\u5668\u6bcf\u6b21\u5f15\u7528\u53d8\u91cf\u65f6\u90fd\u8981\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6. \u6ce8: \u58f0\u660e/\u8bbf\u95ee g \u65f6\u4e5f\u8981\u963b\u585e\u4fe1\u53f7.  </li> <li>\u7528<code>sig_atmoic_t</code>\u58f0\u660e\u6807\u5fd7 <code>sig_atmoic_t</code>\u58f0\u660e\u53d8\u91cf, \u4fdd\u8bc1\u5bf9\u5b83\u4eec\u7684\u8bfb\u5199\u662f\u539f\u5b50\u7684(\u4e0d\u53ef\u4e2d\u65ad\u7684), \u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u6682\u65f6\u963b\u585e\u4fe1\u53f7. \u5927\u591a\u6570\u7cfb\u7edf\u4e2d<code>sig_atmoic_t</code>\u662f<code>int</code>\u7c7b\u578b\u7684.  \u6ce8: \u5bf9\u539f\u5b50\u6027\u7684\u4fdd\u8bc1\u53ea\u9002\u7528\u4e8e\u5355\u4e2a\u8bfb/\u5199, <code>flag++``flag=flag+10</code>\u8fd9\u6837\u7684\u66f4\u65b0\u53ef\u80fd\u9700\u8981\u591a\u6761\u6307\u4ee4.  </li> </ul> </li> </ul>"},{"location":"CSAPP/8/#_30","title":"\u6b63\u786e\u7684\u4fe1\u53f7\u5904\u7406","text":"<p>\u4fe1\u53f7\u7684\u4e00\u4e2a\u4e0e\u76f4\u89c9\u4e0d\u7b26\u7684\u65b9\u9762\u5c31\u662f\u672a\u5904\u7406\u7684\u4fe1\u53f7\u662f\u4e0d\u6392\u961f\u7684. \u56e0\u4e3a pending \u4f4d\u5411\u91cf\u4e2d\u6bcf\u79cd\u7c7b\u578b\u7684\u4fe1\u53f7\u53ea\u5bf9\u5e94\u6709\u4e00\u4f4d, \u56e0\u6b64\u6bcf\u79cd\u7c7b\u578b\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u672a\u5904\u7406\u7684\u4fe1\u53f7. \u5982\u679c\u5b58\u5728\u4e00\u4e2a\u672a\u5904\u7406\u7684\u4fe1\u53f7\u90a3\u4e48\u5c31\u8868\u660e\u81f3\u5c11\u6709\u4e00\u4e2a\u4fe1\u53f7\u5230\u8fbe\u4e86. \u6ce8: \u4e0d\u53ef\u4ee5\u7528\u4fe1\u53f7\u6765\u5bf9\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u53d1\u751f\u7684\u4e8b\u4ef6\u8ba1\u6570.  </p> <p>\u56de\u6536\u5b50\u8fdb\u7a0b</p> <p>\u6211\u4eec\u7528<code>SIGCHILD</code>\u6765\u56de\u6536\u5b50\u8fdb\u7a0b, \u800c\u4e0d\u662f\u663e\u5f0f\u5730\u7b49\u5b50\u8fdb\u7a0b\u7ec8\u6b62.(\u5f53\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u6216\u505c\u6b62, \u5185\u6838\u4f1a\u53d1\u9001\u4e00\u4e2a<code>SIGCHILD</code>\u4fe1\u53f7\u7ed9\u7236\u8fdb\u7a0b.)  \u8fd9\u4e2a\u4ee3\u7801\u7684\u95ee\u9898\u5728\u4e8e: \u7236\u8fdb\u7a0b\u63a5\u6536\u5e76\u6355\u83b7\u4e86\u7b2c\u4e00\u4e2a\u4fe1\u53f7, \u5f53\u5904\u7406\u7a0b\u5e8f\u8fd8\u5728\u5904\u7406\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u65f6, \u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u548c\u7b2c\u4e09\u4e2a\u4fe1\u53f7\u5c31\u53d1\u9001\u6765\u4e86, \u4f46\u5f15\u7269 SIGCHILD \u4fe1\u53f7\u88ab SIGCHILD \u5904\u7406\u7a0b\u5e8f\u5835\u585e\u4e86, \u8fd9\u4e24\u4e2a\u53d1\u9001\u6765\u7684\u4fe1\u53f7\u5176\u4e2d\u4e00\u4e2a\u4f1a\u5904\u4e8e\u5f85\u5904\u7406, \u800c\u53e6\u4e00\u4e2a\u4f1a\u88ab\u76f4\u63a5\u4e22\u5f03. \u6539\u8fdb: <pre><code>void handler2(int sig)\n{\nint olderrno = errno;\nwhile(waitpid(-1, NULL, 0) &gt; 0)\n{\nsio_puts(\"Handler reaped child\\n\");\n}\nif (errno != ECHILD)\nsio_error(\"waitpid error\");\nSleep(1);\nerrno = olderrno;\n}\n</code></pre> \u6211\u4eec\u5728\u6bcf\u6b21\u5904\u7406\u4fe1\u53f7\u65f6, \u5c3d\u53ef\u80fd\u591a\u5730\u56de\u6536\u50f5\u6b7b\u8fdb\u7a0b.  </p>"},{"location":"CSAPP/8/#_31","title":"\u53ef\u79fb\u690d\u7684\u4fe1\u53f7\u5904\u7406","text":"<p>Unix \u4fe1\u53f7\u5904\u7406\u7684\u53e6\u4e00\u4e2a\u7f3a\u9677\u5728\u4e8e\u4e0d\u540c\u7684\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u8bed\u4e49, \u4f8b\u5982:  </p> <ul> <li><code>signal</code>\u51fd\u6570\u7684\u8bed\u4e49\u5404\u6709\u4e0d\u540c.  </li> <li>\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u88ab\u4e2d\u65ad. \u50cf<code>read``write``accept</code>\u8fd9\u6837\u7684\u7cfb\u7edf\u8c03\u7528\u6f5c\u5728\u5730\u963b\u585e\u8fdb\u7a0b\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4, \u79f0\u4e3a\u6162\u901f\u7cfb\u7edf\u8c03\u7528. \u65e9\u671f Unix \u7cfb\u7edf\u4e2d, \u5728\u6267\u884c\u6162\u901f\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u5982\u679c\u8fdb\u7a0b\u63a5\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7\uff0c\u53ef\u80fd\u4f1a\u4e2d\u65ad\u8be5\u6162\u901f\u7cfb\u7edf\u8c03\u7528\uff0c\u5e76\u4e14\u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c\u6162\u901f\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u6761\u4ef6\uff0c\u5e76\u5c06 errno \u8bbe\u7f6e\u4e3a<code>EINTR</code>. Posix \u6807\u51c6\u5b9a\u4e49\u4e86<code>sigaction</code>\u51fd\u6570, \u5141\u8bb8\u7528\u6237\u5728\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u65f6, \u660e\u786e\u6307\u5b9a\u4ed6\u4eec\u60f3\u8981\u7684\u4fe1\u53f7\u5904\u7406\u8bed\u4e49.  </li> </ul> <p><code>sigaction</code></p> <p><pre><code>#include &lt;signal.h&gt;\nint sigaction(int signum, struct sigaction *act, struct sigaction *oldact);         //\u6210\u529f\u8fd4\u56de 0, \u51fa\u9519\u8fd4\u56de -1\n</code></pre> \u53ef\u4ee5\u7c7b\u4f3c<code>signal</code>\u51fd\u6570\u90a3\u6837\u4f7f\u7528\uff0c\u4fe1\u53f7\u5904\u7406\u8bed\u4e49\u4e3a\uff1a  </p> <ul> <li>\u53ea\u6709\u5f53\u524d\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6b63\u5728\u5904\u7406\u7684\u4fe1\u53f7\u7c7b\u578b\u4f1a\u88ab\u963b\u585e  </li> <li>\u53ea\u8981\u53ef\u80fd\uff0c\u88ab\u4e2d\u65ad\u4f60\u7684\u7cfb\u7edf\u8c03\u7528\u4f1a\u81ea\u52a8\u91cd\u542f  </li> <li>\u4e00\u65e6\u8bbe\u7f6e\u4e86\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\uff0c\u5c31\u4f1a\u4e00\u76f4\u4fdd\u6301   </li> </ul>"},{"location":"CSAPP/8/#_32","title":"\u5176\u4ed6","text":""},{"location":"CSAPP/8/#_33","title":"\u540c\u6b65\u6d41\u4ee5\u907f\u514d\u8ba8\u538c\u7684\u5e76\u53d1\u9519\u8bef","text":"<p>\u7236\u8fdb\u7a0b\u5728\u4e00\u4e2a\u5168\u5c40\u4f5c\u4e1a\u5217\u8868\u4e2d\u8bb0\u5f55\u7740\u5f53\u524d\u7684\u5b50\u8fdb\u7a0b, \u6bcf\u4e2a\u4f5c\u4e1a\u4e00\u4e2a\u6761\u76ee. <code>addjob</code>\u548c<code>deletejob</code>\u51fd\u6570\u5206\u522b\u5411\u8fd9\u4e2a\u4f5c\u4e1a\u5217\u8868\u6dfb\u52a0\u548c\u5220\u9664\u4f5c\u4e1a. \u5f53\u7236\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b50\u8fdb\u7a0b\u540e, \u5c31\u628a\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e2d. \u5f53\u7236\u8fdb\u7a0b\u5728<code>SIGCHILD</code>\u5904\u7406\u7a0b\u5e8f\u4e2d\u56de\u6536\u4e00\u4e2a\u7ec8\u6b62\u7684\u50f5\u6b7b\u5b50\u8fdb\u7a0b, \u5b83\u5c31\u4ece\u4f5c\u4e1a\u5217\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u5b50\u8fdb\u7a0b.  \u8fd9\u4e2a\u4ee3\u7801\u5b58\u5728\u4e00\u5b9a\u95ee\u9898, \u56e0\u4e3a\u53ef\u80fd\u53d1\u751f\u8fd9\u6837\u7684\u4e8b\u4ef6\u5e8f\u5217:  </p> <ul> <li>\u7236\u8fdb\u7a0b\u6267\u884c fork \u51fd\u6570, \u5185\u6838\u8c03\u5ea6\u65b0\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u8fd0\u884c, \u800c\u4e0d\u662f\u7236\u8fdb\u7a0b.  </li> <li>\u7236\u8fdb\u7a0b\u80fd\u518d\u6b21\u8fd0\u884c\u4e4b\u524d\u5b50\u8fdb\u7a0b\u5c31\u7ec8\u6b62\u5e76\u53d8\u4e3a\u4e00\u4e2a\u50f5\u6b7b\u8fdb\u7a0b, \u5185\u6838\u7ed9\u7236\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a<code>SIGCHILD</code>\u4fe1\u53f7.  </li> <li>\u7236\u8fdb\u7a0b\u518d\u6b21\u53d8\u4e3a\u53ef\u8fd0\u884c\u4f46\u53c8\u5728\u5b83\u6267\u884c\u4e4b\u524d, \u5185\u6838\u6ce8\u610f\u5230\u6709\u672a\u5904\u7406\u7684<code>SIGCHILD</code>\u4fe1\u53f7, \u8fd0\u884c\u5904\u7406\u7a0b\u5e8f\u63a5\u6536\u8fd9\u4e2a\u4fe1\u53f7.  </li> <li>\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d<code>deletejob</code>, \u4f46\u8fd9\u65f6\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u88ab\u52a0\u5165\u4f5c\u4e1a\u5217\u8868, \u8fd9\u4e2a\u51fd\u6570\u4ec0\u4e48\u4e5f\u4e0d\u9519.  </li> <li>\u5904\u7406\u5b8c\u6bd5, \u7236\u8fdb\u7a0b\u901a\u8fc7\u8c03\u7528<code>addjob</code>\u5c06\u5df2\u7ecf\u88ab\u56de\u6536\u7684\u5b50\u8fdb\u7a0b\u52a0\u5165\u5230\u4f5c\u4e1a\u5217\u8868\u4e2d.  </li> </ul> <p>\u8fd9\u662f\u4e00\u4e2a\u7ade\u4e89(race) \u7684\u7ecf\u5178\u540c\u6b65\u9519\u8bef\u7684\u793a\u4f8b.  </p> <p></p> <p>\u4fee\u6539\u4e4b\u540e, \u5bf9\u4e8e\u7236\u8fdb\u7a0b\u6211\u4eec\u5728 fork \u4e4b\u524d\u5c31\u963b\u585e\u4e86 SIGCHILD \u4fe1\u53f7, \u5728<code>addjob</code> \u4e4b\u540e\u624d\u53d6\u6d88\u963b\u585e, \u8fd9\u6837\u5b50\u8fdb\u7a0b\u4e00\u5b9a\u5728\u88ab\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e4b\u540e\u624d\u4f1a\u88ab\u56de\u6536.  </p>"},{"location":"CSAPP/8/#_34","title":"\u663e\u5f0f\u5730\u7b49\u5f85\u4fe1\u53f7","text":"<p>\u6709\u65f6\u5019\u4e3b\u7a0b\u5e8f\u9700\u8981\u663e\u5f0f\u5730\u7b49\u5f85\u67d0\u4e2a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u8fd0\u884c. \u5982 Linux shell \u521b\u5efa\u4e00\u4e2a\u524d\u53f0\u4f5c\u4e1a, \u5728\u63a5\u53d7\u4e0b\u4e00\u6761\u7528\u6237\u547d\u4ee4\u4e4b\u524d\u5b83\u5fc5\u987b\u7b49\u5f85\u4f5c\u4e1a\u7ec8\u6b62, \u88ab<code>SIGCHILD</code>\u5904\u7406\u7a0b\u5e8f\u56de\u6536.  </p> <p></p> <p>\u7236\u8fdb\u7a0b(shell)\u8bbe\u7f6e<code>SIGINT</code>\u548c<code>SIGCHILD</code>\u7684\u5904\u7406\u7a0b\u5e8f, \u7136\u540e\u8fdb\u5165\u4e00\u4e2a\u65e0\u9650\u5faa\u73af. \u5b83\u963b\u585e<code>SIGCHILD</code>. \u521b\u5efa\u5b50\u8fdb\u7a0b\u540e, \u628a pid \u8bbe 0, \u53d6\u6d88\u963b\u585e<code>SIGCHILD</code>, \u7136\u540e\u4ee5\u5faa\u73af\u7684\u65b9\u5f0f\u7b49\u5f85 pid \u53d8\u4e3a\u975e\u96f6. \u5b50\u8fdb\u7a0b\u7ec8\u6b62\u540e, \u5904\u7406\u7a0b\u5e8f\u56de\u6536\u5b83, \u628a\u975e\u96f6\u7684 pid \u8d4b\u7ed9\u5168\u5c40\u53d8\u91cf, \u8fd9\u4f1a\u7ec8\u6b62\u5faa\u73af, \u7236\u8fdb\u7a0b\u8fd9\u624d\u7ee7\u7eed\u5176\u4ed6\u5de5\u4f5c.   </p> <p>\u4f46\u8fd9\u6bb5\u4ee3\u7801\u4e2d, \u5faa\u73af\u5728\u6d6a\u8d39\u5904\u7406\u5668\u8d44\u6e90. \u6211\u4eec\u5728\u5faa\u73af\u4f53\u4e2d\u63d2\u5165<code>pause</code>, \u7b49\u5f85\u7684\u65f6\u5019\u628a\u8fdb\u7a0b\u6302\u8d77\u505a\u5176\u4ed6\u4e8b. <pre><code>while(!pid)\npause();\n</code></pre> \u4f46\u8fd9\u6837\u4e5f\u4f1a\u9762\u5bf9\u7ade\u4e89: \u5982\u679c\u5728<code>while</code>\u6d4b\u8bd5\u540e<code>pause</code>\u4e4b\u524d\u6536\u5230<code>SIGCHILD</code>\u4fe1\u53f7, <code>pause</code>\u4f1a\u6c38\u8fdc\u7761\u7720. \u6216\u8005\u6539\u7528<code>sleep</code>\u51fd\u6570: <pre><code>while(!pid)\nsleep(1);\n</code></pre> \u4f46\u8fd9\u6837\u592a\u6162\u4e86, \u5982\u679c\u5728<code>while</code>\u6d4b\u8bd5\u4e4b\u540e<code>sleep</code>\u4e4b\u524d\u6536\u5230\u4fe1\u53f7, \u7a0b\u5e8f\u5fc5\u987b\u7b49\u76f8\u5f53\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\u624d\u4f1a\u518d\u6b21\u68c0\u6d4b\u5faa\u73af\u7684\u7ec8\u6b62\u6761\u4ef6.    </p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>sigsuspend</code>\u51fd\u6570 <pre><code>#include &lt;signal.h&gt;\nint sigsuspend(const sigset_t *mast);\n//\u8fd4\u56de -1\n</code></pre> <code>sigsuspend</code>\u6682\u65f6\u7528 mask \u66ff\u6362\u5f53\u524d\u963b\u585e\u96c6\u5408, \u7136\u540e\u6302\u8d77\u8be5\u8fdb\u7a0b, \u76f4\u5230\u6536\u5230\u4e00\u4e2a\u865a\u62df\u53f7. \u5176\u884c\u4e3a\u8981\u4e48\u662f\u8fd0\u884c\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u8981\u4e48\u662f\u7ec8\u6b62\u8be5\u8fdb\u7a0b. \u5b83\u7b49\u4ef7\u4e8e\u4e0b\u5217\u4ee3\u7801\u7684\u539f\u5b50(\u4e0d\u53ef\u4e2d\u65ad)\u7248\u672c.   <pre><code>sigprocmask(SIG_SETMASK, &amp;mask, &amp;prev);\npause();\nsigprocmask(SIG_SETMASK, &amp;prev, NULL); </code></pre></p>"},{"location":"CSAPP/8/#_35","title":"\u975e\u672c\u5730\u8df3\u8f6c","text":"<p>C \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u79cd\u7528\u6237\u7ea7\u5f02\u5e38\u63a7\u5236\u6d41\u5f62\u5f0f, \u79f0\u4e3a\u975e\u672c\u5730\u8df3\u8f6c(nonlocal jump). \u5b83\u5c06\u63a7\u5236\u76f4\u63a5\u4ece\u4e00\u4e2a\u51fd\u6570\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u6b63\u5728\u6267\u884c\u7684\u51fd\u6570, \u800c\u4e0d\u9700\u8981\u7ecf\u8fc7\u6b63\u5e38\u7684\u8c03\u7528-\u8fd4\u56de\u5e8f\u5217. <pre><code>#include &lt;setjmp.h&gt;\nint setjmp(jmp_buf env);\nvoid longjmp(jmp_buf env, int retval);\n</code></pre> <code>setjmp</code>\u51fd\u6570\u5728 env \u7f13\u51b2\u533a\u4fdd\u5b58\u5f53\u524d\u8c03\u7528\u73af\u5883, \u4ee5\u4f9b\u540e\u9762<code>longjmp</code>\u4f7f\u7528, \u5e76\u8fd4\u56de 0. <code>setjmp</code>\u8fd4\u56de\u7684\u503c\u4e0d\u80fd\u8d4b\u503c\u7ed9\u53d8\u91cf. <code>longjmp</code>\u51fd\u6570\u4ece env \u7f13\u51b2\u533a\u4e2d\u6062\u590d\u8c03\u7528\u73af\u5883, \u7136\u540e\u89e6\u53d1\u4e00\u4e2a\u4ece\u6700\u8fd1\u4e00\u6b21\u521d\u59cb\u5316 env \u7684<code>setjmp</code>\u8c03\u7528\u7684\u8fd4\u56de. \u7136\u540e<code>setjmp</code>\u8fd4\u56de, \u5e76\u5e26\u6709\u975e\u96f6\u7684\u8fd4\u56de\u503c retval.  </p>"},{"location":"CSAPP/8/#_36","title":"\u4ece\u6df1\u5c42\u5d4c\u5957\u51fd\u6570\u4e2d\u8fd4\u56de","text":"<p>\u5728<code>main</code>\u51fd\u6570\u4e2d\uff0c\u9996\u5148\u5728 12 \u884c\u4e2d\u6267\u884c<code>setjmp(buf)</code>\u51fd\u6570\u5c06\u5f53\u524d\u8c03\u7528\u73af\u5883\u4fdd\u5b58\u5230 buf \u4e2d\uff0c\u5e76\u8fd4\u56de 0\uff0c\u6240\u4ee5\u5c31\u8c03\u7528<code>foo</code>\u51fd\u6570\u548c<code>bar</code>\u51fd\u6570\uff0c\u5f53\u8fd9\u4e24\u4e2a\u51fd\u6570\u4e2d\u51fa\u73b0\u9519\u8bef\uff0c\u5219\u901a\u8fc7<code>longjmp(buf, retval)</code>\u6062\u590d\u8c03\u7528\u73af\u5883\uff0c\u5e76\u8df3\u8f6c\u56de\u7b2c 13 \u884c\uff0c\u7136\u540e\u8ba9<code>setjmp</code>\u51fd\u6570\u8fd4\u56de retval \u7684\u503c\uff0c\u7531\u6b64\u5c31\u65e0\u9700\u89e3\u6790\u8c03\u7528\u6808\u4e86\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u53ef\u80fd\u5b58\u5728\u5185\u5b58\u6cc4\u9732\u95ee\u9898.   </p>"},{"location":"CSAPP/8/#_37","title":"\u4f7f\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u5206\u652f\u5230\u4e00\u4e2a\u7279\u6b8a\u7684\u4ee3\u7801\u4f4d\u7f6e","text":"<pre><code>#include &lt;setjmp.h&gt;\nint sigsetjmp(sigjmp_buf env, int savesigs);\n//\u82e5 savesigs != 0, \u5219\u4f1a\u628a\u5835\u585e\u7684\u4fe1\u53f7\u96c6\u5408\u4e5f\u4fdd\u5b58.  \nvoid siglongjmp(sigjmp_buf env, int retval); </code></pre> <p><code>sigsetjmp</code>\u548c<code>siglongjmp</code>\u662f\u53ef\u4ee5\u88ab\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4f7f\u7528\u7684\u7248\u672c. \u5176\u4e2d<code>sigsetjmp</code>\u51fd\u6570\u8fd8\u4f1a\u5c06\u5f85\u5904\u7406\u4fe1\u53f7\u548c\u88ab\u963b\u585e\u4fe1\u53f7\u4fdd\u5b58\u5230 env \u4e2d.  </p> <p>\u4e0b\u9762\u7684\u4f8b\u5b50, \u5f53\u7528\u6237\u5728<code>Ctrl+C</code>\u65f6, \u8fd9\u4e2a\u7a0b\u5e8f\u7528\u4fe1\u53f7\u548c\u975e\u672c\u5730\u8df3\u8f6c\u5b9e\u73b0\u8f6f\u91cd\u542f. </p> <p>\u9996\u5148\uff0c\u5728<code>main</code>\u51fd\u6570\u4e2d\u7b2c 12 \u884c\u901a\u8fc7<code>sigsetjmp</code>\u51fd\u6570\u5c06\u8c03\u7528\u73af\u5883\u4fdd\u5b58\u5230 buf \u4e2d\uff0c\u5e76\u8fd4\u56de 0\uff0c\u968f\u540e\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u3002\u5f53\u7528\u6237\u8f93\u5165<code>Ctrl+C</code>\u65f6\uff0c\u4f1a\u8c03\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f<code>handler</code>\uff0c\u6b64\u65f6\u4f1a\u901a\u8fc7<code>siglongjmp</code>\u6062\u590d\u8c03\u7528\u73af\u5883\uff0c\u7136\u540e\u8df3\u8f6c\u56de\u7b2c 12 \u884c\uff0c\u7136\u540e\u8ba9<code>sigsetjmp</code>\u8fd4\u56de1\uff0c\u6b64\u65f6\u5c31\u907f\u514d\u4e86\u8fd4\u56de\u5230\u4e2d\u65ad\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u5904.   </p> <p>\u6ce8\u610f: <code>signal</code>\u8bbe\u7f6e\u5904\u7406\u7a0b\u5e8f\u8981\u5728\u8c03\u7528<code>sigsetjmp</code>\u4e4b\u540e\uff0c\u907f\u514d\u8fd8\u672a\u8bbe\u7f6e<code>sigsetjmp</code>\u5c31\u63a5\u6536\u5230\u4fe1\u53f7\u800c\u6267\u884c<code>siglongjmp</code>; \u800c\u4e14<code>sigsetjmp</code>\u548c<code>siglongjmp</code>\u4e0d\u5728\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570\u4e4b\u5217.  </p>"},{"location":"CSAPP/9/","title":"\u865a\u62df\u5185\u5b58","text":"<p>\u73b0\u4ee3\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u79cd\u5bf9\u4e3b\u5b58\u7684\u62bd\u8c61, \u79f0\u4e3a\u865a\u62df\u5185\u5b58(VM).  </p> <ul> <li>\u5b83\u5c06\u4e3b\u5b58\u770b\u6210\u662f\u4e00\u4e2a\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u7684\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u901f\u7f13\u5b58, \u5728\u4e3b\u5b58\u4e2d\u53ea\u4fdd\u5b58\u6d3b\u52a8\u533a\u57df, \u5e76\u6839\u636e\u9700\u8981\u5728\u78c1\u76d8\u548c\u4e3b\u5b58\u4e4b\u95f4\u6765\u56de\u4f20\u9001\u6570\u636e, \u4ee5\u6b64\u9ad8\u6548\u4f7f\u7528\u4e3b\u5b58.  </li> <li>\u5b83\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u81f4\u7684\u5730\u5740\u7a7a\u95f4, \u4ece\u800c\u7b80\u5316\u4e86\u5185\u5b58\u7ba1\u7406.  </li> <li>\u5b83\u4fdd\u62a4\u4e86\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u88ab\u5176\u4ed6\u8fdb\u7a0b\u7834\u574f.  </li> </ul>"},{"location":"CSAPP/9/#_2","title":"\u5730\u5740\u7a7a\u95f4","text":"<p>\u5730\u5740\u7a7a\u95f4(address space) \u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u5730\u5740\u7684\u6709\u5e8f\u96c6\u5408. \\(\\{0,1,2,\\ldots\\}\\) \u5982\u679c\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u6574\u6570\u662f\u8fde\u7eed\u7684, \u6211\u4eec\u79f0\u4e3a\u7ebf\u6027\u5730\u5740\u7a7a\u95f4.(\u5047\u8bbe\u6211\u4eec\u8ba8\u8bba\u7684\u90fd\u662f\u7ebf\u6027\u5730\u5740\u7a7a\u95f4)  </p> <p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e3b\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a\u7531 M \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u5355\u5143\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u7269\u7406\u5730\u5740(Physical Address), \u5e76\u4e14\u7269\u7406\u5730\u5740\u662f\u8fde\u7eed\u7684\u3002\u7531\u6b64\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u7269\u7406\u5730\u5740\u7a7a\u95f4(Physical Address Space), \u5bf9\u5e94\u4e8e\u7cfb\u7edf\u4e2d\u7269\u7406\u5185\u5b58\u7684 M \u4e2a\u5b57\u8282. CPU \u53ef\u4ee5\u901a\u8fc7\u7269\u7406\u5730\u5740\u6765\u8bbf\u95ee\u5185\u5b58\uff0c\u8fd9\u79cd\u65b9\u5f0f\u79f0\u4e3a\u7269\u7406\u5bfb\u5740(Physical Addressing), \u518d\u5c06\u83b7\u5f97\u7684\u6570\u636e\u5b57\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d.  </p> <p></p> <p>\u5bf9\u4e8e\u4e3b\u5b58\u5b58\u50a8\u5668\u8d44\u6e90\u4e5f\u53ef\u4ee5\u901a\u8fc7\u865a\u62df\u5185\u5b58\u63d0\u4f9b\u53e6\u4e00\u79cd\u4e0d\u540c\u7684\u89c6\u56fe. \u73b0\u4ee3 CPU \u4ece\u4e00\u4e2a\u6709 \\(N=2^n\\) \u4e2a\u5730\u5740\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u751f\u6210\u865a\u62df\u5730\u5740(Virtual Address), \u8be5\u5730\u5740\u7a7a\u95f4\u79f0\u4e3a\u865a\u62df\u5730\u5740\u7a7a\u95f4(Virtual Address Space), \u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u5927\u5c0f\u7531\u8868\u793a\u6700\u5927\u865a\u62df\u5730\u5740\u6240\u9700\u7684\u4f4d\u6570 n \u6765\u786e\u5b9a, \u73b0\u4ee3\u7cfb\u7edf\u652f\u6301 32 \u4f4d\u6216 64 \u4f4d\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4. CPU \u4f1a\u4f7f\u7528\u865a\u62df\u5730\u5740\u6765\u8bbf\u95ee\u4e3b\u5b58\uff0c\u79f0\u4e3a\u865a\u62df\u5bfb\u5740(Virtual Addressing), \u9700\u8981\u9996\u5148\u901a\u8fc7\u5730\u5740\u7ffb\u8bd1(Address Translation) \u5c06\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740, \u518d\u901a\u8fc7\u7269\u7406\u5730\u5740\u6765\u8bbf\u95ee\u5185\u5b58. \u800c\u5730\u5740\u7ffb\u8bd1\u7c7b\u4f3c\u4e8e\u5f02\u5e38\u5904\u7406(\u8f6f\u786c\u7ed3\u5408)\uff0c\u9700\u8981 CPU \u4e0a\u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143(Memory Management Unit, MMU), \u4ee5\u53ca\u5185\u5b58\u4e2d\u7531\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u7684\u67e5\u8be2\u8868\u6765\u52a8\u6001\u7ffb\u8bd1\u865a\u62df\u5185\u5b58. \u6240\u4ee5\u901a\u8fc7 MMU \u6765\u63a7\u5236\u5bf9\u5185\u5b58\u7684\u8bfb\u5199, \u8fbe\u5230\u5bf9\u5185\u5b58\u8fdb\u884c\u865a\u62df\u5316\u7684\u76ee\u7684.  </p> <p></p> <p>\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 MME \u6765\u5bf9\u5185\u5b58\u8fdb\u884c\u62bd\u8c61</p> <ul> <li>\u865a\u62df\u5185\u5b58\u5c06 DRAM \u5185\u5b58\u4f5c\u4e3a\u78c1\u76d8\u4e0a\u5b9e\u9645\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u5373\u6211\u4eec\u53ef\u4ee5\u5728\u4e3b\u5b58\u8bbf\u95ee\u78c1\u76d8\u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u800c\u4e3b\u5b58\u53ea\u4fdd\u5b58\u6d3b\u52a8\u533a\u57df\uff0c\u6839\u636e\u9700\u8981\u5728\u78c1\u76d8\u548c\u4e3b\u5b58\u4e4b\u95f4\u6765\u56de\u4f20\u9001\u6570\u636e\uff0c\u4f7f\u5f97\u8fdb\u7a0b\u53ef\u4ee5\u5f97\u5230\u66f4\u5927\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5e76\u4e14\u66f4\u6709\u6548\u5730\u5229\u7528\u4e3b\u5b58\u8d44\u6e90.  </li> <li>\u865a\u62df\u5185\u5b58\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e00\u81f4\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u4ee3\u7801\u548c\u6570\u636e\u603b\u662f\u52a0\u8f7d\u5230\u56fa\u5b9a\u7684\u5730\u5740\uff0c\u5806\u6808\u4f4d\u4e8e\u7528\u6237\u8bfe\u4ef6\u5730\u5740\u7a7a\u95f4\u7684\u9876\u90e8\u7b49\u7b49\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e0e\u90a3\u4e9b\u865a\u62df\u5730\u5740\u76f8\u5bf9\u5e94\u7684\u5185\u5bb9\u5206\u5e03\u5728\u6574\u4e2a\u4e3b\u5b58\u50a8\u5668\u4e2d\uff0c\u6240\u4ee5\u901a\u8fc7\u4f7f\u7528\u865a\u62df\u5185\u5b58\u53ef\u4ee5\u7b80\u5316\u5185\u5b58\u7684\u7ba1\u7406.  </li> <li>\u865a\u62df\u5185\u5b58\u4fdd\u62a4\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u4f1a\u88ab\u522b\u7684\u8fdb\u7a0b\u7834\u574f.  </li> </ul>"},{"location":"CSAPP/9/#_3","title":"\u865a\u62df\u5185\u5b58","text":"<p>\u6982\u5ff5\u4e0a, \u865a\u62df\u5185\u5b58\u88ab\u7ec4\u7ec7\u4e3a\u4e00\u4e2a\u7531\u5b58\u653e\u5728\u78c1\u76d8\u4e0a\u7684 N \u4e2a\u8fde\u7eed\u5b57\u8282\u5927\u5c0f\u7684\u5355\u5143\u7ec4\u6210\u7684\u6570\u7ec4, \u6bcf\u4e2a\u5b57\u8282\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u865a\u62df\u5730\u5740, \u800c\u8be5\u6570\u7ec4\u7684\u5185\u5bb9\u88ab\u7f13\u5b58\u5230\u4e3b\u5b58\u4e2d.   </p> <p>VM \u7cfb\u7edf\u5c06\u865a\u62df\u5185\u5b58\u5206\u5272\u4e3a\u865a\u62df\u9875(Virtual Page, VP), \u6bcf\u4e2a\u865a\u62df\u9875\u7684\u5927\u5c0f\u4e3a \\(P=2^p\\) \u5b57\u8282. \u7c7b\u4f3c\u5730\u7269\u7406\u5185\u5b58\u88ab\u5206\u5272\u4e3a\u7269\u7406\u9875(Physical Page, PP), \u5927\u5c0f\u4e5f\u4e3a P \u5b57\u8282, \u7269\u7406\u9875\u4e5f\u88ab\u79f0\u4e3a\u9875\u5e27(page frame).  </p> <p>\u865a\u62df\u9875\u9762\u5206\u4e3a\u4e09\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6: (\u8fd9\u91cc\u7684\u7269\u7406\u5185\u5b58\u5373\u4e3b\u5b58, \u76f8\u5f53\u4e8e DRAM \u7f13\u5b58)</p> <ul> <li>\u672a\u5206\u914d\u7684: VM \u7cfb\u7edf\u8fd8\u672a\u5206\u914d(\u6216\u8005\u521b\u5efa)\u7684\u9875, \u4e0d\u5360\u7528\u4efb\u4f55\u78c1\u76d8\u7a7a\u95f4  </li> <li>\u7f13\u5b58\u7684: \u5f53\u524d\u5df2\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5df2\u5206\u914d\u9875  </li> <li>\u672a\u7f13\u5b58\u7684: \u672a\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5df2\u5206\u914d\u9875   </li> </ul> <p></p> <p>DRAM \u7f13\u5b58\u7684\u4e0d\u547d\u4e2d\u4ee3\u4ef7\u66f4\u6602\u8d35, \u800c\u4e14\u4ece\u78c1\u76d8\u7684\u4e00\u4e2a\u6247\u533a\u8bfb\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u65f6\u95f4\u5f00\u9500\u4e5f\u975e\u5e38\u5927, \u56e0\u6b64\u865a\u62df\u9875\u5f80\u5f80\u5f88\u5927, \u901a\u5e38\u662f 4KB~2MB. DRAM \u7f13\u5b58\u662f\u5168\u76f8\u8054\u7684, \u4efb\u4f55\u865a\u62df\u9875\u53ef\u4ee5\u653e\u5728\u4efb\u4f55\u7269\u7406\u9875\u4e2d. \u56e0\u4e3a\u5bf9\u78c1\u76d8\u8bbf\u95ee\u65f6\u95f4\u957f, DRAM \u7f13\u5b58\u603b\u662f\u91c7\u7528\u5199\u56de, \u800c\u4e0d\u662f\u76f4\u5199.  </p>"},{"location":"CSAPP/9/#_4","title":"\u9875\u8868","text":"<p>\u4e3a\u4e86\u5224\u65ad\u865a\u62df\u9875\u662f\u5426\u7f13\u5b58\u5728 DRAM \u4e2d\u7684\u67d0\u4e2a\u5730\u65b9, \u8f6f\u786c\u4ef6\u8054\u5408(\u5305\u62ec\u64cd\u4f5c\u7cfb\u7edf\u8f6f\u4ef6, MMU \u4e2d\u7684\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6\u548c\u4e00\u4e2a\u5b58\u653e\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u9875\u8868)\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd. \u9875\u8868\u5c06\u865a\u62df\u9875\u6620\u5c04\u5230\u7269\u7406\u9875, \u6bcf\u6b21\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6\u5c06\u4e00\u4e2a\u865a\u62df\u5730\u5740\u8f6c\u4e3a\u7269\u7406\u5730\u5740\u65f6, \u90fd\u4f1a\u8bfb\u53d6\u9875\u8868. \u64cd\u4f5c\u7cfb\u7edf\u8d1f\u8d23\u7ef4\u62a4\u9875\u8868\u7684\u5185\u5bb9, \u4ee5\u53ca\u5728\u78c1\u76d8\u548c DRAM \u4e4b\u95f4\u6765\u56de\u4f20\u9001\u9875.  </p> <p>\u9875\u8868\u5c31\u662f\u4e00\u4e2a\u9875\u8868\u6761\u76ee(Page Table Entry, PTE) \u7684\u6570\u7ec4. \u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u6bcf\u4e2a\u9875\u5728\u9875\u8868\u4e2d\u4e00\u4e2a\u56fa\u5b9a\u504f\u79fb\u91cf\u5904\u90fd\u6709\u4e00\u4e2a PTE. \u6211\u4eec\u5047\u8bbe PTE \u662f\u4e00\u4e2a\u6709\u6548\u4f4d\u548c\u4e00\u4e2a n \u4f4d\u5730\u5740\u5b57\u6bb5\u7ec4\u6210.  </p> <ul> <li>\u6709\u6548\u4f4d\u8868\u660e\u8be5\u865a\u62df\u9875\u662f\u5426\u88ab\u7f13\u5b58\u5728 DRAM \u4e2d. \u5982\u679c\u8bbe\u7f6e\u4e86\u6709\u6548\u4f4d, n \u4f4d\u5730\u5740\u5b57\u6bb5\u5c31\u8868\u793a DRAM \u4e2d\u76f8\u5e94\u7269\u7406\u9875\u7684\u8d77\u59cb\u5730\u5740.   </li> <li>\u6ca1\u6709\u8bbe\u7f6e\u6709\u6548\u4f4d, \u5982\u679c\u672a\u5206\u914d\u5219\u4ee5\u4e00\u4e2a\u7a7a\u5730\u5740\u8868\u793a, \u5982\u679c\u5df2\u7ecf\u5206\u914d, \u5730\u5740\u5b57\u6bb5\u5c31\u662f\u865a\u62df\u5185\u5b58(\u78c1\u76d8)\u4e2d\u865a\u62df\u9875\u7684\u8d77\u59cb\u5730\u5740.  </li> </ul> <p>\u6ce8: \u56e0\u4e3a DRAM \u7f13\u5b58\u662f\u5168\u76f8\u8054\u7684, \u6240\u4ee5\u4efb\u610f\u7269\u7406\u9875\u90fd\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u865a\u62df\u9875.  </p> <p></p>"},{"location":"CSAPP/9/#_5","title":"\u76f8\u5173\u64cd\u4f5c","text":"<p>\u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e4b\u95f4\u4f20\u9001\u9875\u7684\u6d3b\u52a8\u53eb\u505a\u4ea4\u6362\u6216\u8005\u9875\u9762\u8c03\u5ea6(paging). \u9875\u4ece\u78c1\u76d8\u6362\u5165(\u6216\u8005\u9875\u9762\u8c03\u5165) DRAM \u548c\u4ece DRAM \u6362\u51fa(\u6216\u8005\u9875\u9762\u8c03\u51fa)\u78c1\u76d8. \u6240\u6709\u73b0\u4ee3\u7cfb\u7edf\u90fd\u4f7f\u7528\u6309\u9700\u9875\u9762\u8c03\u5ea6(demand paging) \u7684\u65b9\u5f0f, \u5373\u5f53\u6709\u4e0d\u547d\u4e2d\u53d1\u751f\u65f6\u731c\u6362\u5165\u9875\u9762.  </p> <p>\u53c8\u662f\u5c40\u90e8\u6027\u6551\u4e86\u6211\u4eec</p> <p>\u865a\u62df\u5185\u5b58\u4e4b\u6240\u4ee5\u6709\u6548\uff0c\u4e5f\u662f\u56e0\u4e3a\u5c40\u90e8\u6027. \u865a\u62df\u5185\u5b58\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u5b58\u50a8\u5668\u5c42\u6b21\uff0c\u5927\u5c0f\u4f1a\u6bd4\u7269\u7406\u5185\u5b58\u5927\uff0c\u6240\u4ee5\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7a0b\u5e8f\u5f15\u7528\u7684\u4e0d\u540c\u9875\u9762\u603b\u6570\u53ef\u80fd\u4f1a\u8d85\u51fa\u7269\u7406\u5185\u5b58\u5927\u5c0f. \u5982\u679c\u7a0b\u5e8f\u5177\u6709\u597d\u7684\u5c40\u90e8\u6027\uff0c\u5219\u5728\u4efb\u610f\u65f6\u523b\u7684\u5de5\u4f5c\u96c6\u8f83\u5c0f\uff0c\u7a0b\u5e8f\u4f1a\u8d8b\u4e8e\u5728\u4e00\u4e2a\u8f83\u5c0f\u7684\u6d3b\u52a8\u9875\u9762(Active Page) \u96c6\u5408\u4e0a\u5de5\u4f5c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728\u4e00\u5f00\u59cb\u5c06\u5de5\u4f5c\u96c6\u9875\u9762\u8c03\u5ea6\u5230\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u8fc7\u540e\u5c31\u4e0d\u4f1a\u4ea7\u751f\u989d\u5916\u7684\u78c1\u76d8\u6d41\u91cf\u4e86. \u4f46\u662f\u5982\u679c\u5c40\u90e8\u6027\u8f83\u5dee\uff0c\u5219\u5de5\u4f5c\u96c6\u8d85\u8fc7\u4e86\u7269\u7406\u5185\u5b58\u5927\u5c0f\uff0c\u5219\u4f1a\u53d1\u751f\u6296\u52a8(Thrashing)\uff0c\u4f7f\u5f97\u4e0d\u65ad\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u9875\u5230\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u7a0b\u5e8f\u6027\u80fd\u5927\u5927\u964d\u4f4e. \u5728 Linux \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7<code>getrusage</code>\u51fd\u6570\u68c0\u6d4b\u7f3a\u9875\u7684\u6570\u91cf.  </p>"},{"location":"CSAPP/9/#_6","title":"\u9875\u547d\u4e2d","text":"<p>\u5f53CPU\u60f3\u8981\u8bbf\u95ee\u4f4d\u4e8e\u865a\u62df\u5730\u5740 x \u4e2d\u7684\u6570\u636e\u5b57\u65f6\uff0c\u4f1a\u9996\u5148\u901a\u8fc7\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6\u5c06\u865a\u62df\u5730\u5740\u4f5c\u4e3a\u4e00\u4e2a\u7d22\u5f15\u6765\u5b9a\u4f4d PTE \uff0c\u7136\u540e\u901a\u8fc7 PTE \u6765\u786e\u5b9a\u5bf9\u5e94\u7684\u865a\u62df\u9875\u7684\u72b6\u6001\u3002\u5982\u679c PTE \u7684\u6709\u6548\u4f4d\u4e3a 1\uff0c\u8bf4\u660e\u8be5\u865a\u62df\u9875\u88ab\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e86\uff0c\u5219 CPU \u53ef\u4ee5\u901a\u8fc7\u8be5 PTE \u7684\u5730\u5740\u5b57\u6bb5\u83b7\u5f97\u7269\u7406\u5185\u5b58\u7684\u5730\u5740\uff0c\u7136\u540e\u8fdb\u884c\u8bbf\u95ee, \u8fd9\u5c31\u662f\u9875\u547d\u4e2d.  </p> <p>e.g. \u4e0a\u56fe\u4e2d\u5047\u8bbe\u6211\u4eec\u8bbf\u95ee VP2, \u5373\u4e3a\u4e00\u4e2a\u9875\u547d\u4e2d.  </p>"},{"location":"CSAPP/9/#_7","title":"\u7f3a\u9875","text":"<p>DRAM \u7f13\u5b58\u4e0d\u547d\u4e2d\u79f0\u4e3a\u7f3a\u9875(page fault). \u5982\u4e0a\u56fe\u4e2d\u6211\u4eec\u8bbf\u95ee VP3, \u4f46\u4ece\u6709\u6548\u4f4d\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\u5904 VP3 \u5e76\u672a\u88ab\u7f13\u5b58\u5230 DRAM \u4e2d, \u56e0\u6b64\u89e6\u53d1\u4e00\u4e2a\u7f3a\u9875\u5f02\u5e38, \u968f\u540e\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u9009\u62e9\u4e00\u4e2a\u727a\u7272\u9875\u8fdb\u884c\u66ff\u6362.  </p> <p>Example</p> <p></p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u6211\u4eec\u9009\u62e9\u4e86 VP4 \u4f5c\u4e3a\u727a\u7272\u9875, \u5982\u679c VP4 \u5df2\u7ecf\u88ab\u4fee\u6539\u4e86\u5185\u6838\u4f1a\u628a\u5b83\u5199\u56de\u78c1\u76d8(\u5199\u56de). \u968f\u540e\u5185\u6838\u4ece\u78c1\u76d8\u590d\u5236 VP3 \u5230\u5185\u5b58\u4e2d\u7684 PP3, \u66f4\u65b0 PTE3, \u968f\u540e\u8fd4\u56de. \u5f02\u5e38\u7a0b\u5e8f\u8fd4\u56de\u540e, \u91cd\u65b0\u542f\u52a8\u5bfc\u81f4\u7f3a\u9875\u7684\u6307\u4ee4, \u8be5\u6307\u4ee4\u91cd\u65b0\u53d1\u9001\u865a\u62df\u5730\u5740\u5230\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6.  </p>"},{"location":"CSAPP/9/#_8","title":"\u5206\u914d\u9875\u9762","text":"<p>Example</p> <p> \u5982\u56fe\u4e2d, \u6211\u4eec\u8c03\u7528 malloc, VP5 \u7684\u5206\u914d\u8fc7\u7a0b\u662f\u5728\u78c1\u76d8\u4e0a\u521b\u9020\u7a7a\u95f4\u5e76\u66f4\u65b0 PTE5.  </p>"},{"location":"CSAPP/9/#_9","title":"\u865a\u62df\u5185\u5b58\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u7684\u5de5\u5177","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u9875\u8868, \u5373\u4e00\u4e2a\u72ec\u7acb\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4. \u6ce8: \u591a\u4e2a\u865a\u62df\u9875\u9762\u53ef\u4ee5\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u7269\u7406\u9875\u9762. </p> <p></p> <ul> <li> <p>\u7b80\u5316\u94fe\u63a5: \u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\u5141\u8bb8\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u6620\u50cf\u4f7f\u7528\u76f8\u540c\u7684\u57fa\u672c\u683c\u5f0f. \u5982  \u5bf9\u4e8e 64 \u4f4d\u5730\u5740\u7a7a\u95f4, \u4ee3\u7801\u6bb5\u603b\u662f\u4ece\u865a\u62df\u5730\u5740 0x400000 \u5f00\u59cb, \u6570\u636e\u6bb5\u8ddf\u5728\u4ee3\u7801\u6bb5\u4e4b\u540e, \u4e2d\u95f4\u4e00\u6bb5\u5bf9\u5176\u7a7a\u767d. \u6808\u5360\u636e\u7528\u6237\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u6700\u9ad8\u7684\u90e8\u5206, \u5e76\u5411\u4e0b\u751f\u957f.  </p> </li> <li> <p>\u7b80\u5316\u52a0\u8f7d: \u8981\u628a\u53ef\u6267\u884c\u6587\u4ef6\u4e2d<code>.text</code>\u548c<code>.data</code>\u8282\u52a0\u8f7d\u5230\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\u4e2d, Linux \u52a0\u8f7d\u5668\u4e3a\u5176\u5206\u914d\u865a\u62df\u9875, \u628a\u5b83\u4eec\u6807\u8bb0\u4e3a\u65e0\u6548(\u5373\u672a\u88ab\u7f13\u5b58), \u5c06 PTE \u6307\u5411\u76ee\u6807\u6587\u4ef6\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e. \u8bbf\u95ee\u67d0\u4e00\u865a\u62df\u5730\u5740\u65f6\uff0c\u53d1\u73b0\u5176\u5bf9\u5e94\u7684 PTE \u662f\u65e0\u6548\u7684\uff0c\u5219\u4f1a\u53d1\u8d77\u7f3a\u9875\u5f02\u5e38\uff0c\u901a\u8fc7\u7f3a\u9875\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u81ea\u52a8\u5730\u5c06\u865a\u62df\u9875\u52a0\u8f7d\u5230\u7269\u7406\u9875\u4e2d. \u52a0\u8f7d\u5668\u4ece\u4e0d\u4ece\u78c1\u76d8\u5230\u5185\u5b58\u5b9e\u9645\u590d\u5236\u4efb\u4f55\u6570\u636e.(\u7a0b\u5e8f\u8fd0\u884c\u4e2d\u53ef\u80fd\u4f1a)  </p> </li> <li>\u7b80\u5316\u5171\u4eab: \u8fd9\u91cc\u53ea\u9700\u8981\u5728\u8fdb\u7a0b\u4e2d\u901a\u8fc7\u4e00\u4e2a PTE \u6307\u5411\u8be5\u5171\u4eab\u7684\u6570\u636e\u6216\u4ee3\u7801\u7684\u7269\u7406\u9875\uff0c\u5c31\u80fd\u5b9e\u73b0\u5728\u6240\u6709\u8fdb\u7a0b\u4e2d\u5171\u4eab\u7684\u7ed3\u679c.  </li> <li>\u7b80\u5316\u5185\u5b58\u5206\u914d: \u5f53\u4e00\u4e2a\u8fd0\u884c\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u8981\u6c42\u989d\u5916\u7684\u5806\u7a7a\u95f4(\u5982\u8c03\u7528<code>malloc</code>\u65f6), \u64cd\u4f5c\u7cfb\u7edf\u8981\u5206\u914d\u4e00\u4e2a\u9002\u5f53\u6570\u5b57\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u9875\u9762, \u5e76\u5c06\u5b83\u4eec\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u4e2d\u4efb\u610f k \u4e2a\u7269\u7406\u9875\u9762. \u7531\u4e8e\u9875\u9762\u6620\u5c04, \u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7684\u7269\u7406\u9875\u9762\u53ef\u4ee5\u968f\u673a\u5206\u914d\u5728\u7269\u7406\u5185\u5b58\u4e2d.  </li> </ul>"},{"location":"CSAPP/9/#_10","title":"\u865a\u62df\u5185\u5b58\u4f5c\u4e3a\u5185\u5b58\u4fdd\u62a4\u7684\u5de5\u5177","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5728 PTE \u4e0a\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u8bb8\u53ef\u4f4d\u6765\u9650\u5236\u5bf9\u4e00\u4e2a\u865a\u62df\u9875\u9762\u7684\u8bbf\u95ee.  </p> <p></p> <p>\u8fd9\u91cc\u5f15\u5165\u4e86\u4e09\u4e2a\u5b57\u6bb5:  </p> <ul> <li>SUP: \u786e\u5b9a\u8be5\u7269\u7406\u9875\u7684\u8bbf\u95ee\u6743\u9650, \u786e\u5b9a\u662f\u5426\u9700\u8981\u5185\u6838\u6a21\u5f0f\u624d\u80fd\u8bbf\u95ee</li> <li>READ: \u786e\u5b9a\u8be5\u7269\u7406\u9875\u7684\u8bfb\u6743\u9650</li> <li>WRITE: \u786e\u5b9a\u8be5\u7269\u7406\u9875\u7684\u5199\u6743\u9650</li> </ul> <p>\u5982\u679c\u4e00\u6761\u6307\u4ee4\u8fdd\u53cd\u4e86\u8bb8\u53ef\u6761\u4ef6, \u90a3\u4e48 CPU \u89e6\u53d1\u4e00\u4e2a\u4e00\u822c\u4fdd\u62a4\u4fdd\u969c, \u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u4e00\u4e2a\u5185\u6838\u4e2d\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f. Linux shell \u5c06\u8fd9\u79cd\u5f02\u5e38\u62a5\u544a\u79f0\u4e3a\u6bb5\u9519\u8bef(segment fault).  </p>"},{"location":"CSAPP/9/#_11","title":"\u5730\u5740\u7ffb\u8bd1","text":"<p>\u5f62\u5f0f\u4e0a\u8bf4, \u5730\u5740\u7ffb\u8bd1\u5c31\u662f\u4e00\u4e2a N \u5143\u7d20\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4(VAS)\u4e2d\u7684\u5143\u7d20\u548c\u4e00\u4e2a M \u5143\u7d20\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4(PAS)\u4e2d\u5143\u7d20\u7684\u4e00\u4e2a\u6620\u5c04: \\(MAP:VAS\\rightarrow PAS \\cup\\empty\\) </p> <p></p> <ul> <li>\u5730\u5740\u7ffb\u8bd1: \u865a\u62df\u9875\u5927\u5c0f\u4e3a P \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u9700\u8981\u865a\u62df\u5730\u5740\u7684\u4f4e p \u4f4d\u6765\u7d22\u5f15\u4e00\u4e2a\u865a\u62df\u9875\u4e2d\u7684\u5b57\u8282, \u5f97\u5230\u865a\u62df\u9875\u504f\u79fb\u91cfVirtual Page Offset\uff0cVPO), \u7136\u540e\u901a\u8fc7\u865a\u62df\u5730\u5740\u7684\u9ad8 n-p \u4f4d\u6765\u786e\u5b9a\u865a\u62df\u9875\u5728\u9875\u8868\u4e2d\u7684\u7d22\u5f15, \u5f97\u5230\u865a\u62df\u9875\u53f7(Virtual Page Number\uff0cVPN). \u800c\u9875\u8868\u7684\u8d77\u59cb\u5730\u5740\u4fdd\u5b58\u5728\u4e00\u4e2a\u7279\u6b8a\u7684 CPU \u5bc4\u5b58\u5668 \u9875\u8868\u57fa\u5740\u5bc4\u5b58\u5668(Page Table Base Register\uff0cPTBR) \u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 VPN \u548c PTBR \u7ec4\u5408\u5f97\u5230\u60f3\u8981\u7684 PTE \u7684\u7269\u7406\u5185\u5b58\u5730\u5740. \u5e76\u4e14\u7531\u4e8e\u865a\u62df\u9875\u548c\u7269\u7406\u9875\u7684\u5927\u5c0f\u76f8\u540c, \u6240\u4ee5\u4e24\u8005\u7f16\u7801\u9875\u4e2d\u504f\u79fb\u91cf\u6240\u9700\u7684\u4f4d\u6570 p \u76f8\u540c, \u53ef\u4ee5\u5047\u8bbe\u6570\u636e\u5728\u865a\u62df\u9875\u548c\u5728\u7269\u7406\u9875\u4e2d\u7684\u504f\u79fb\u91cf\u76f8\u540c, \u7531\u6b64\u5c31\u65e0\u9700\u5728\u9875\u8868\u4e2d\u4fdd\u5b58\u7269\u7406\u9875\u504f\u79fb\u91cf(Physical Page Offset\uff0cPPO), \u53ea\u9700\u8981\u4fdd\u5b58\u7269\u7406\u9875\u53f7(Physical Page Number\uff0cPPN), \u53ef\u4ee5\u76f4\u63a5\u5c06 VPO \u590d\u5236\u7ed9 PPO, \u6765\u786e\u5b9a\u6570\u636e\u5728\u7269\u7406\u9875\u4e2d\u7684\u504f\u79fb\u91cf. \u6ce8: \u4ece\u7f13\u5b58\u89d2\u5ea6\u770b, VPN \u5c31\u662f\u6807\u5fd7\u4f4d, VPO \u5c31\u662f\u5757\u504f\u79fb. \u9875\u8868\u4e2d\u53ea\u4fdd\u5b58 PPN \u548c\u6807\u5fd7\u4f4d.  </li> <li> <p>\u9875\u9762\u547d\u4e2d\u4e3b\u8981\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4:  </p> <ul> <li>\u5904\u7406\u5668\u751f\u6210\u4e00\u4e2a\u865a\u62df\u5730\u5740, \u5e76\u4f20\u7ed9 MMU</li> <li>MMU \u751f\u6210 PTE \u5730\u5740(\u56e0\u4e3a\u9875\u8868\u4fdd\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d, \u8fd9\u91cc\u53d1\u9001\u7684 PTEA \u5373<code>PTBR+VPN</code>), \u5e76\u4ece\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u8bf7\u6c42\u5f97\u5230\u5b83</li> <li>\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u5411 MMU \u8fd4\u56de PTE(\u4e0d\u5305\u542b PPO)  </li> <li>MMU \u6784\u9020\u7269\u7406\u5730\u5740, \u5e76\u628a\u5b83\u4f20\u9001\u7ed9\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58  </li> <li>\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u8fd4\u56de\u6240\u8bf7\u6c42\u7684\u6570\u636e\u5b57\u7ed9\u5904\u7406\u5668  </li> </ul> <p> * \u9875\u9762\u4e0d\u547d\u4e2d\u4e3b\u8981\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4:  </p> <ul> <li>\u524d\u4e09\u6b65\u4e0e\u9875\u9762\u547d\u4e2d\u76f8\u540c  </li> <li>PTE \u4e2d\u6709\u6548\u4f4d\u662f 0, \u56e0\u6b64 MMU \u89e6\u53d1\u5f02\u5e38, \u63a7\u5236\u4f20\u9012\u5230\u7f3a\u9875\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f.  </li> <li>\u7f3a\u9875\u5904\u7406\u7a0b\u5e8f\u786e\u5b9a\u7269\u7406\u5185\u5b58(\u9ad8\u901f\u7f13\u5b58/\u5185\u5b58)\u4e2d\u7684\u727a\u7272\u9875, \u5982\u679c\u5982\u679c\u9875\u9762\u5df2\u7ecf\u88ab\u4fee\u6539\u4e86\u5c31\u628a\u5b83\u5199\u56de\u5230\u78c1\u76d8  </li> <li>\u7f3a\u9875\u5904\u7406\u7a0b\u5e8f\u8c03\u5165\u65b0\u7684\u9875\u9762, \u5e76\u66f4\u65b0\u5185\u5b58\u4e2d\u7684 PTE  </li> <li>\u7f3a\u9875\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u5230\u539f\u6765\u7684\u8fdb\u7a0b, \u518d\u6b21\u6267\u884c\u6307\u4ee4.  </li> </ul> <p></p> </li> </ul>"},{"location":"CSAPP/9/#_12","title":"\u7ed3\u5408\u9ad8\u901f\u7f13\u5b58\u548c\u865a\u62df\u5185\u5b58","text":""},{"location":"CSAPP/9/#tlb","title":"\u5229\u7528 TLB \u52a0\u901f\u5730\u5740\u7ffb\u8bd1","text":"<p>\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21 CPU \u5c06\u4e00\u4e2a\u865a\u62df\u5730\u5740\u53d1\u9001\u7ed9 MMU \u65f6, MMU \u90fd\u4f1a\u5c06\u9700\u8981\u7684 PTE \u7269\u7406\u5730\u5740\u53d1\u9001\u7ed9\u9ad8\u901f\u7f13\u5b58/\u5185\u5b58\u6765\u83b7\u5f97 PTE, \u5982\u679c\u9ad8\u901f\u7f13\u5b58\u521a\u597d\u4fdd\u5b58\u4e86\u8be5 PTE\uff0c\u5219 MMU \u53ef\u4ee5\u5f88\u5feb\u83b7\u5f97, \u5426\u5219\u9700\u8981\u7b49\u5f85\u5f88\u591a\u65f6\u949f\u5468\u671f\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6.  </p> <p>\u5728 MMU \u4e2d\u6709\u4e00\u4e2a\u5173\u4e8e PTE \u7684\u5c0f\u7684\u7f13\u5b58, \u79f0\u4e3a\u5feb\u8868(Translation Lookaside Buffer, TLB). TLB \u662f\u4e00\u4e2a\u5c0f\u7684, \u865a\u62df\u5bfb\u5740\u7684\u7f13\u5b58, \u5176\u4e2d\u6bcf\u4e00\u884c\u90fd\u4fdd\u5b58\u7740\u4e00\u4e2a\u7531\u5355\u4e2a PTE \u7ec4\u6210\u5757. TLB \u901a\u5e38\u6709\u9ad8\u5ea6\u7684\u76f8\u8054\u5ea6.  </p> <p></p> <p>\u5982\u679c TLB \u6709 \\(T=2^t\\) \u4e2a\u7ec4, \u90a3\u4e48TLB\u7d22\u5f15(TLBI) \u662f\u7531 VPN \u7684 t \u4e2a\u6700\u4f4e\u4f4d\u7ec4\u6210\u7684, \u800cTLB\u6807\u8bb0(TLBT) \u662f\u7531 VPN \u4e2d\u5269\u4f59\u7684\u4f4d\u7ec4\u6210\u7684.  </p> <ul> <li> <p>TLB \u547d\u4e2d</p> <ul> <li>CPU \u4ea7\u751f\u4e00\u4e2a\u865a\u62df\u5730\u5740</li> <li>MMU \u4ece TLB \u4e2d\u53d6\u51fa\u76f8\u5e94\u7684 PTE(PPN \u548c\u6807\u8bb0\u4f4d)<ul> <li>TLB \u5bf9 VPN \u8fdb\u884c\u5206\u89e3\uff0c\u5f97\u5230 TLBI \u548c TLBT\uff0c\u6839\u636e TLBI \u786e\u5b9a\u6240\u5728\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\uff0c\u7136\u540e\u5728\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d\u4f9d\u6b21\u6bd4\u8f83\u5404\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u7684\u6807\u8bb0\u662f\u5426\u548c TLBT \u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5219 TLB \u547d\u4e2d\uff0c\u5c06\u5bf9\u5e94\u7684 PPN \u53d1\u9001\u7ed9 MMU.  </li> </ul> </li> <li>MMU \u5c06\u8fd9\u4e2a\u865a\u62df\u5730\u5740\u7ffb\u8bd1\u4e3a\u7269\u7406\u5730\u5740, \u5e76\u5c06\u5b83\u53d1\u9001\u5230\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58</li> <li>\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u5c06\u6240\u8bf7\u6c42\u7684\u6570\u636e\u5b57\u8fd4\u56de\u7ed9 CPU</li> </ul> </li> <li> <p>TLB \u4e0d\u547d\u4e2d     MMU \u5fc5\u987b\u4ece L1 \u7f13\u5b58\u4e2d\u53d6\u51fa\u76f8\u5e94\u7684 PTE, \u53ef\u80fd\u8986\u76d6\u4e00\u4e2a\u539f\u6709\u7684\u6761\u76ee.  </p> </li> </ul>"},{"location":"CSAPP/9/#_13","title":"\u591a\u7ea7\u9875\u8868","text":"<p>\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a 32 \u4f4d\u7684\u5730\u5740\u7a7a\u95f4, \u9875\u9762\u5927\u5c0f\u4e3a 4KB, PTE \u5927\u5c0f\u4e3a 4 \u5b57\u8282, \u90a3\u4e48\u65e0\u8bba\u88ab\u4f7f\u7528\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u591a\u5c0f, \u6211\u4eec\u90fd\u9700\u8981\u4e00\u4e2a 4MB \u7684\u9875\u8868\u9a7b\u7559\u5728\u5185\u5b58\u4e2d.  </p> <p>Note</p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, \u9875\u9762\u5927\u5c0f 4KB \u5373 \\(4*2^{10}=2^{12}\\) bytes. \u6211\u4eec\u9700\u8981 \\(2^{32}/2^{12} = 2^20\\) \u4e2a\u9875\u9762, \u8fd9\u4e5f\u5c31\u9700\u8981 \\(2^20\\) \u4e2a PTE. \u56e0\u6b64\u9875\u8868\u5927\u5c0f\u4e3a \\(2^20 \\times 4 = 4 MB\\)</p> <p>\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u591a\u7ea7\u9875\u8868\u6765\u538b\u7f29\u5185\u5bb9:  </p> <p></p> <p>\u4e00\u7ea7\u9875\u8868\u4e2d\u6bcf\u4e2a PTE \u8d1f\u8d23\u6620\u5c04\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u4e00\u4e2a 4MB \u7684\u7247(chunk), \u8fd9\u91cc\u6bcf\u4e00\u7247\u90fd\u662f\u7531 1024 \u4e2a\u8fde\u7eed\u9875\u9762\u7ec4\u6210(\u56e0\u6b64\u4e8c\u7ea7\u9875\u8868\u4e2d\u6bcf\u4e00\u4e2a\u7247\u5bf9\u5e94 1024 \u4e2a PTE). \u5bf9\u4e8e 4GB \u7684\u5730\u5740\u7a7a\u95f4, \u4e00\u7ea7\u9875\u8868\u4e2d 1024 \u4e2a PTE \u5df2\u7ecf\u8db3\u591f\u8986\u76d6\u6574\u4e2a\u5185\u5b58\u7a7a\u95f4.  \u5982\u679c\u7247 i \u4e2d\u7684\u6bcf\u4e2a\u9875\u9762\u90fd\u672a\u88ab\u5206\u914d, \u90a3\u4e48\u5176\u4e00\u7ea7 PTEi \u5c31\u4e3a\u7a7a. \u5982\u679c\u81f3\u5c11\u6709\u4e00\u4e2a\u9875\u662f\u5206\u914d\u4e86\u7684, \u90a3\u4e48\u4e00\u7ea7 PTEi \u5c31\u6307\u5411\u4e00\u4e2a\u4e8c\u7ea7\u9875\u8868\u7684\u57fa\u5740.  </p> <p>\u4e8c\u7ea7\u9875\u8868\u4e2d\u6bcf\u4e2a PTE \u8d1f\u8d23\u6620\u5c04\u4e00\u4e2a 4KB \u7684\u865a\u62df\u5185\u5b58\u754c\u9762. \u6211\u4eec\u4e00\u7ea7\u548c\u4e8c\u7ea7\u9875\u8868\u7684 PTE \u5927\u5c0f\u90fd\u662f 4 \u5b57\u8282, \u56e0\u6b64\u9875\u8868\u90fd\u662f 4KB \u7684, \u521a\u597d\u4e0e\u9875\u9762\u5927\u5c0f\u4e00\u81f4.  </p> <p>\u8fd9\u79cd\u65b9\u6cd5\u51cf\u5c11\u4e86\u5185\u5b58\u8981\u6c42:  </p> <ul> <li>\u5982\u679c\u4e00\u7ea7\u9875\u8868\u4e2d\u7684\u4e00\u4e2a PTE \u662f\u7a7a\u7684, \u90a3\u4e48\u4e8c\u7ea7\u9875\u8868\u6839\u672c\u4e0d\u4f1a\u5b58\u5728.  </li> <li>\u53ea\u6709\u4e00\u7ea7\u9875\u8868\u624d\u9700\u8981\u603b\u662f\u5728\u5185\u5b58\u4e2d, \u865a\u62df\u5185\u5b58\u7cfb\u7edf\u53ef\u4ee5\u5728\u9700\u8981\u65f6\u521b\u5efa, \u9875\u9762\u8c03\u5165\u6216\u8c03\u51fa\u4e8c\u7ea7\u9875\u8868, \u8fd9\u51cf\u5c11\u4e86\u4e3b\u5b58\u7684\u538b\u529b. \u53ea\u6709\u6700\u7ecf\u5e38\u4f7f\u7528\u7684\u4e8c\u7ea7\u9875\u8868\u624d\u9700\u8981\u7f13\u5b58\u5728\u4e3b\u5b58 \u4e2d.  </li> </ul> <p></p>"},{"location":"CSAPP/9/#intel-core-i7linux","title":"\u6848\u4f8b\u5206\u6790: Intel Core i7/Linux \u5185\u5b58\u7cfb\u7edf","text":"<p>Core i7 \u652f\u6301 48 \u4f4d\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c 52 \u4f4d\u7269\u7406\u5730\u5740\u7a7a\u95f4, \u8fd8\u517c\u5bb9 32 \u4f4d\u865a\u62df\u548c\u7269\u7406\u5730\u5740\u7a7a\u95f4.  </p> <p></p>"},{"location":"CSAPP/9/#core-i7","title":"Core i7 \u5730\u5740\u7ffb\u8bd1","text":"<p>Core i7 \u91c7\u7528\u56db\u7ea7\u9875\u8868\u5c42\u6b21\u7ed3\u6784. CR3 \u63a7\u5236\u5bc4\u5b58\u5668\u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868(L1) \u7684\u8d77\u59cb\u4f4d\u7f6e. CR3 \u7684\u503c\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u4e00\u90e8\u5206, \u6bcf\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\u65f6 CR3 \u7684\u503c\u90fd\u4f1a\u88ab\u6062\u590d.  \u9875\u5927\u5c0f\u53ef\u4ee5\u5728\u542f\u52a8\u65f6\u88ab\u914d\u7f6e\u4e3a 4KB \u6216 4MB. Linux \u4f7f\u7528\u7684\u662f 4KB \u7684\u9875, \u56e0\u6b64 \\(p=12\\).  </p> <p></p> <p>\u5176\u4e2d\u6bcf\u4e2a PTE \u4e3a 8 \u5b57\u8282, \u8fd9\u91cc\u8981\u6c42\u7269\u7406\u9875 4KB \u5bf9\u9f50. \u7531\u4e8e\u7269\u7406\u5730\u5740\u4e3a 52 \u4f4d,  PPO \u4e3a 12 \u4f4d, \u5219 PPN \u4e3a 40 \u4f4d, \u6240\u4ee5\u8fd9\u91cc\u7684\u9875\u8868\u7269\u7406\u57fa\u5730\u5740\u4e3a 40 \u4f4d. \u8fd9\u91cc\u589e\u52a0\u4e86 3 \u4e2a\u6743\u9650\u4f4d\u6765\u63a7\u5236\u5bf9\u9875\u7684\u8bbf\u95ee: <code>R/W</code>\u3001<code>U/S</code>\u548c<code>XD</code>, \u5176\u4e2d<code>XD</code>\u662f 64 \u4f4d\u7cfb\u7edf\u5f15\u5165\u7684, \u9650\u5236\u4e86\u53ea\u80fd\u5728\u53ea\u8bfb\u4ee3\u7801\u6bb5\u6267\u884c, \u964d\u4f4e\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\u7684\u98ce\u9669\u3002\u6b64\u5916, \u5f53 MMU \u8bbf\u95ee\u4e00\u4e2a\u9875\u65f6, \u4f1a\u8bbe\u7f6e\u5f15\u7528\u4f4d(Reference Bit) A \u4f4d, \u8ba9\u5185\u6838\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5, \u5f53 MMU \u4fee\u6539\u4e00\u4e2a\u9875\u65f6, \u4f1a\u8bbe\u7f6e\u810f\u4f4d(Dirty Bit) D\u4f4d, \u4f7f\u5f97\u5185\u6838\u5bf9\u727a\u7272\u9875\u8fdb\u884c\u5199\u56de.   </p> <p></p> <p>\u603b\u4f53\u6d41\u7a0b\u56fe: </p> <p>\u9ad8\u901f\u7f13\u5b58</p> <p>\u6700\u540e\u7269\u7406\u5730\u5740\u7684 52 \u4f4d\u4e2d, CT \u8868\u793a\u6807\u5fd7\u4f4d, CI \u8868\u793a\u7ec4\u7d22\u5f15, CO \u8868\u793a\u5757\u504f\u79fb. \u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7279\u70b9: \u9ad8\u901f\u7f13\u5b58\u7684 \\(CI+CO=12\\) \u4f4d, \u800c VPO \u4e5f\u662f 12 \u4f4d. \u8fd9\u4e0d\u662f\u5de7\u5408, \u800c\u662f\u6545\u610f\u8fd9\u6837\u8bbe\u8ba1\u6765\u52a0\u901f\u5730\u5740\u7ffb\u8bd1. \u6211\u4eec\u77e5\u9053, VPO=PPO, \u800c PPN \u9700\u8981\u901a\u8fc7\u5730\u5740\u7ffb\u8bd1\u83b7\u5f97, \u5219\u4e00\u5f00\u59cb\u8f93\u5165\u865a\u62df\u5730\u5740\u65f6, \u5c31\u80fd\u4e00\u4e0b\u7b49\u5230 PPO, \u7136\u540e\u7b49\u5f85\u68c0\u7d22 PPN. \u6b64\u65f6\u6211\u4eec\u5c31\u80fd\u76f4\u63a5\u5c06 PPO \u8f93\u5165\u5230\u9ad8\u901f\u7f13\u5b58\u4e2d, \u56e0\u4e3aPPO\u786e\u5b9a\u4e86\u5bf9\u5e94\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\u548c\u5757\u504f\u79fb\u91cf, \u5c31\u80fd\u5148\u901a\u8fc7 PPO \u83b7\u5f97\u5bf9\u5e94\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4, \u7136\u540e\u53ea\u8981\u7b49\u68c0\u7d22\u5230 PPN \u65f6, \u5c31\u80fd\u76f4\u63a5\u548c\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d\u6bcf\u4e00\u884c\u7684\u6807\u5fd7\u4f4d\u8fdb\u884c\u6bd4\u8f83, \u6781\u5927\u52a0\u901f\u4e86\u5730\u5740\u7ffb\u8bd1\u8fc7\u7a0b.  </p>"},{"location":"CSAPP/9/#linux","title":"Linux \u865a\u62df\u5185\u5b58\u7cfb\u7edf","text":"<p>Linux \u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4. </p> <p>\u5176\u4e2d\u5185\u6838\u865a\u62df\u5185\u5b58\u5305\u62ec\u5185\u6838\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u7ed3\u6784. \u5185\u6838\u865a\u62df\u5185\u5b58\u7684\u67d0\u4e9b\u533a\u57df\u88ab\u6620\u5c04\u5230\u6240\u6709\u8fdb\u7a0b\u5171\u4eab\u7684\u7269\u7406\u9875\u9762. Linux \u8fd8\u5c06\u4e00\u7ec4\u8fde\u7eed\u7684\u865a\u62df\u9875\u9762(\u5927\u5c0f\u7b49\u4e8e\u7cfb\u7edf\u4e2d DRAM \u603b\u91cf)\u6620\u5c04\u5230\u76f8\u5e94\u7684\u4e00\u7ec4\u8fde\u7eed\u7684\u7269\u7406\u9875\u9762. \u8fd9\u6837\u5185\u6838\u53ef\u4ee5\u5728\u8fd9\u4e2a\u865a\u62df\u5185\u5b58\u4e0a\u8fdb\u884c\u8bfb\u5199\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u7269\u7406\u5185\u5b58\u8fdb\u884c\u8bfb\u5199, \u8fd9\u4e3a\u5185\u6838\u63d0\u4f9b\u4e00\u79cd\u4fbf\u5229\u7684\u65b9\u6cd5\u6765\u8bbf\u95ee\u7269\u7406\u5185\u5b58\u3002\u8fd9\u90e8\u5206\u5185\u5bb9\u5bf9\u6240\u6709\u8fdb\u7a0b\u90fd\u662f\u4e00\u6837\u7684.  </p>"},{"location":"CSAPP/9/#linux_1","title":"Linux \u865a\u62df\u5185\u5b58\u533a\u57df","text":"<p>Linux \u5c06\u865a\u62df\u5185\u5b58\u7ec4\u7ec7\u6210\u4e00\u4e9b\u533a\u57df(\u4e5f\u53eb\u6bb5)\u7684\u96c6\u5408, \u4e00\u4e2a\u533a\u57df\u5c31\u662f\u5df2\u7ecf\u5b58\u5728\u7740\u7684(\u5df2\u5206\u914d)\u865a\u62df\u5185\u5b58\u7684\u8fde\u7eed\u7247, \u8fd9\u4e9b\u9875\u662f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u76f8\u5173\u8054\u7684, \u5982\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u3001\u5171\u4eab\u5e93\u6bb5\u4ee5\u53ca\u7528\u6237\u6808, \u8fd9\u79cd\u7ec4\u7ec7\u6210\u6bb5\u7684\u5f62\u5f0f, \u5141\u8bb8\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5b58\u5728\u95f4\u9699.  </p> <p>\u5185\u6838\u4e3a\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684\u4efb\u52a1\u7ed3\u6784(\u6e90\u4ee3\u7801\u4e2d\u7684<code>task_struct</code>, \u5b58\u4e8e\u6700\u4e0a\u9762\u90a3\u5757)\u5176\u4e2d\u5305\u62ec\u8fd0\u884c\u8be5\u8fdb\u7a0b\u6240\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f. \u5176\u4e2d\u6709\u4e00\u4e2a\u6761\u76ee\u6307\u5411<code>mm_struct</code>, \u5b83\u63cf\u8ff0\u4e86\u865a\u62df\u5185\u5b58\u7684\u5f53\u524d\u72b6\u6001. \u5b83\u5305\u542b\u4e24\u4e2a\u6709\u8da3\u7684\u5b57\u6bb5:  </p> <ul> <li><code>pgd</code>: \u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868(\u9875\u5168\u5c40\u76ee\u5f55)\u7684\u57fa\u5740. \u5f53\u5185\u6838\u8fd0\u884c\u8fdb\u7a0b\u65f6, \u5c31\u628a<code>pgd</code>\u653e\u5728 CR3 \u63a7\u5236\u5bc4\u5b58\u5668\u4e0b.  </li> <li> <p><code>mmap</code>: \u6307\u5411\u4e00\u4e2a<code>vm_area_struct</code>(\u533a\u57df\u7ed3\u6784)\u7684\u94fe\u8868.  </p> <ul> <li><code>vm_start</code>: \u6307\u5411\u8fd9\u4e2a\u533a\u57df\u7684\u8d77\u59cb\u5904   </li> <li><code>vm_end</code>: \u6307\u5411\u8fd9\u4e2a\u533a\u57df\u7684\u7ed3\u675f\u5904  </li> <li><code>vm_prot</code>: \u63cf\u8ff0\u8fd9\u4e2a\u533a\u57df\u5185\u5305\u542b\u7684\u6240\u6709\u9875\u7684\u8bfb\u5199\u8bb8\u53ef\u6743\u9650  </li> <li><code>vm_flags</code>: \u63cf\u8ff0\u8fd9\u4e2a\u533a\u57df\u5185\u7684\u9875\u9762\u662f\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u7684, \u8fd8\u662f\u8fd9\u4e2a\u8fdb\u7a0b\u79c1\u6709\u7684  </li> <li><code>vm_next</code>: \u6307\u5411\u94fe\u8868\u4e2d\u4e0b\u4e00\u4e2a\u7ed3\u6784  </li> </ul> </li> </ul> <p></p>"},{"location":"CSAPP/9/#linux_2","title":"Linux \u7f3a\u9875\u5f02\u5e38\u5904\u7406","text":"<p>\u5047\u8bbe MMU \u5728\u8bd5\u56fe\u7ffb\u8bd1\u67d0\u4e2a\u865a\u62df\u5730\u5740 A \u65f6\u89e6\u53d1\u4e86\u4e00\u4e2a\u7f3a\u9875, \u5904\u7406\u7a0b\u5e8f\u968f\u540e\u6267\u884c\u4e0b\u9762\u7684\u6b65\u9aa4:  </p> <ul> <li>\u865a\u62df\u5730\u5740 A \u662f\u5426\u5408\u6cd5: A \u662f\u5426\u662f\u5728\u67d0\u4e2a\u533a\u57df\u7ed3\u6784\u5b9a\u4e49\u7684\u533a\u57df\u5185? \u5904\u7406\u7a0b\u5e8f\u4f1a\u628a A \u4e0e\u6bcf\u4e2a\u533a\u57df\u7ed3\u6784\u7684<code>vm_start</code>\u548c<code>vm_end</code>\u505a\u6bd4\u8f83. \u5982\u679c\u6307\u4ee4\u4e0d\u5408\u6cd5, \u7a0b\u5e8f\u89e6\u53d1\u4e00\u4e2a\u6bb5\u9519\u8bef, \u7ec8\u6b62\u8fdb\u7a0b.     </li> <li>\u5bf9\u5730\u5740 A \u7684\u8bbf\u95ee\u662f\u5426\u5408\u6cd5: \u8fdb\u7a0b\u662f\u5426\u6709\u8bfb\u5199\u6216\u8005\u6267\u884c\u8fd9\u4e2a\u533a\u57df\u5185\u9875\u9762\u7684\u6743\u9650? \u5982\u679c\u8bbf\u95ee\u4e0d\u5408\u6cd5, \u7a0b\u5e8f\u4f1a\u89e6\u53d1\u4e00\u4e2a\u4fdd\u62a4\u5f02\u5e38, \u7ec8\u6b62\u8fdb\u7a0b.   </li> <li>\u6b63\u5e38\u7684\u7f3a\u9875\u5904\u7406: \u9009\u62e9\u4e00\u4e2a\u727a\u7272\u9875, \u5982\u679c\u88ab\u4fee\u6539\u4e86\u5c31\u5199\u56de, \u968f\u540e\u5c06\u865a\u62df\u5730\u5740 A \u5bf9\u5e94\u7684\u865a\u62df\u9875\u5199\u5165\u7269\u7406\u9875\u4e2d, \u4fee\u6539\u9875\u8868, \u4ece\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de.  </li> </ul>"},{"location":"CSAPP/9/#_14","title":"\u5185\u5b58\u6620\u5c04","text":"<p>Linux \u901a\u8fc7\u5c06\u4e00\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df\u4e0e\u4e00\u4e2a\u78c1\u76d8\u4e0a\u7684\u5bf9\u8c61(object) \u5173\u8054\u8d77\u6765, \u4ee5\u521d\u59cb\u5316\u8fd9\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u5185\u5bb9, \u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u5185\u5b58\u6620\u5c04(memory mapping). \u865a\u62df\u5185\u5b58\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u5230\u4e24\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u4e2d\u7684\u4e00\u79cd:  </p> <ul> <li>Linux \u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u666e\u901a\u6587\u4ef6 \u4e00\u4e2a\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u5230\u4e00\u4e2a\u666e\u901a\u78c1\u76d8\u6587\u4ef6\u7684\u8fde\u7eed\u90e8\u5206, \u4f8b\u5982\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u6587\u4ef6\u533a(section) \u88ab\u5206\u6210\u9875\u5927\u5c0f\u7684\u7247, \u7528\u6765\u521d\u59cb\u5316\u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u6bb5, \u5982\u679c\u6bb5\u6bd4\u6587\u4ef6\u5927, \u5219\u7528 0 \u6765\u586b\u5145\u5269\u4e0b\u7684\u5185\u5bb9. \u7136\u540e\u6309\u9700\u5c06\u865a\u62df\u9875\u590d\u5236\u5230\u7269\u7406\u9875\u4e2d.   </li> <li>\u533f\u540d\u6587\u4ef6 \u4e00\u4e2a\u533a\u57df\u4e5f\u53ef\u4ee5\u6620\u5c04\u5230\u4e00\u4e2a\u533f\u540d\u6587\u4ef6, \u533f\u540d\u6587\u4ef6\u662f\u7531\u5185\u6838\u521b\u5efa\u7684, \u5305\u542b\u7684\u5168\u662f\u4e8c\u8fdb\u5236\u96f6.  \u56e0\u6b64\u6620\u5c04\u5230\u533f\u540d\u6587\u4ef6\u7684\u533a\u57df\u4e2d\u7684\u9875\u9762\u4e5f\u88ab\u79f0\u4e3a\u8bf7\u6c42\u4e8c\u8fdb\u5236\u96f6\u7684\u9875(demand-zero page).  </li> </ul> <p>\u4e00\u65e6\u4e00\u4e2a\u865a\u62df\u9875\u9762\u88ab\u521d\u59cb\u5316\u4e86, \u5b83\u5c31\u5728\u4e00\u4e2a\u7531\u5185\u6838\u7ef4\u62a4\u7684\u4e13\u95e8\u7684\u4ea4\u6362\u6587\u4ef6\u4e4b\u95f4\u6362\u6765\u6362\u53bb. \u4ea4\u6362\u6587\u4ef6\u4e5f\u53eb\u505a\u4ea4\u6362\u7a7a\u95f4\u6216\u8005\u4ea4\u6362\u533a\u57df. \u4ea4\u6362\u7a7a\u95f4\u9650\u5236\u5f53\u524d\u8fdb\u7a0b\u80fd\u591f\u5206\u914d\u7684\u865a\u62df\u9875\u9762\u7684\u603b\u6570.  </p>"},{"location":"CSAPP/9/#_15","title":"\u5171\u4eab\u5bf9\u8c61","text":"<p>\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u88ab\u6620\u5c04\u5230\u865a\u62df\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u533a\u57df, \u8981\u4e48\u4f5c\u4e3a\u5171\u4eab\u5bf9\u8c61, \u8981\u4e48\u4f5c\u4e3a\u79c1\u6709\u5bf9\u8c61. \u6620\u5c04\u5230\u5171\u4eab\u5bf9\u8c61\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\u53eb\u5171\u4eab\u533a\u57df, \u7c7b\u4f3c\u5730\u6709\u79c1\u6709\u533a\u57df.  </p> <ul> <li>\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u5c06\u4e00\u4e2a\u5171\u4eab\u5bf9\u8c61\u6620\u5c04\u5230\u5b83\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u4e2a\u533a\u57df\u5185, \u90a3\u4e48\u8fd9\u4e2a\u8fdb\u7a0b\u5bf9\u8fd9\u4e2a\u533a\u57df\u7684\u4efb\u4f55\u5199\u64cd\u4f5c, \u5bf9\u4e8e\u90a3\u4e9b\u4e5f\u8fd9\u6837\u505a\u7684\u8fdb\u7a0b\u800c\u8a00, \u4e5f\u662f\u53ef\u89c1\u7684, \u800c\u4e14\u8fd9\u4e9b\u53d8\u5316\u4f1a\u53cd\u6620\u5230\u78c1\u76d8\u4e0a\u7684\u539f\u59cb\u5bf9\u8c61\u4e2d.   </li> <li>\u5bf9\u4e8e\u4e00\u4e2a\u6620\u5c04\u5230\u79c1\u6709\u5bf9\u8c61\u7684\u533a\u57df\u7684\u6539\u53d8, \u5bf9\u5176\u4ed6\u8fdb\u7a0b\u662f\u4e0d\u53ef\u89c1\u7684, \u800c\u4e14\u53d8\u5316\u4e0d\u4f1a\u53cd\u6620\u5230\u78c1\u76d8\u4e0a\u7684\u5bf9\u8c61\u4e2d.  </li> </ul> <p></p> <p>\u5728\u8fdb\u7a0b 1 \u4e2d\uff0c\u5f53\u6211\u4eec\u5c06\u78c1\u76d8\u4e0a\u7684\u4e00\u4e2a\u5bf9\u8c61\u901a\u8fc7\u5185\u5b58\u6620\u5c04\u4e0e\u8be5\u8fdb\u7a0b\u7684\u4e00\u4e2a\u5171\u4eab\u6bb5\u5173\u8054\u8d77\u6765\u65f6\uff0c\u5c31\u4f1a\u4f7f\u5f97\u865a\u62df\u9875\u5bf9\u5e94\u7684 PTE \u6307\u5411\u8be5\u5bf9\u8c61\uff0c\u5f53\u5f15\u7528\u8be5\u5bf9\u8c61\u65f6\uff0c\u5c31\u4f1a\u5c06\u5bf9\u5e94\u7684\u865a\u62df\u9875\u52a0\u8f7d\u5230\u7269\u7406\u9875\u4e2d\uff1b\u800c\u8fdb\u7a0b 2 \u4e5f\u8981\u5c06\u8be5\u5bf9\u8c61\u4e0e\u81ea\u5df1\u7684\u4e00\u4e2a\u5171\u4eab\u6bb5\u5173\u8054\u8d77\u6765\u65f6\uff0c\u5f53\u5bf9\u5176\u5f15\u7528\u65f6\uff0c\u7531\u4e8e\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6587\u4ef6\u540d\uff0c\u6240\u4ee5\u5185\u6838\u53ef\u4ee5\u53d1\u73b0\u8fdb\u7a0b 1 \u5c06\u8be5\u5bf9\u8c61\u52a0\u8f7d\u7684\u7269\u7406\u9875\uff0c\u5c31\u76f4\u63a5\u5728\u8fdb\u7a0b 2 \u4e2d\u5c06\u5bf9\u5e94\u7684 PTE \u6307\u5411\u76f8\u540c\u7684\u7269\u7406\u9875\u5c31\u884c\u4e86.  \u6ce8: \u8fdb\u7a0b \u00bd \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e0d\u540c; \u5373\u4f7f\u4e00\u4e2a\u5bf9\u8c61\u4e0e\u591a\u4e2a\u8fdb\u7a0b\u7684\u5171\u4eab\u6bb5\u7ba1\u7406, \u7269\u7406\u5185\u5b58\u4e2d\u53ea\u653e\u5171\u4eab\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c.  </p> <p>\u79c1\u6709\u5bf9\u8c61\u4f7f\u7528\u5199\u65f6\u590d\u5236(copy-on-write) \u7684\u65b9\u6cd5. \u672a\u5bf9\u79c1\u6709\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\u65f6, \u7269\u7406\u5185\u5b58\u4e2d\u53ea\u4f1a\u4fdd\u5b58\u540c\u4e00\u4e2a\u5bf9\u8c61\u526f\u672c, \u4e14\u5404\u4e2a\u8fdb\u7a0b\u4e2d\u5bf9\u8be5\u5bf9\u8c61\u7684 PTE \u90fd\u662f\u53ea\u8bfb\u7684, \u800c\u865a\u62df\u5185\u5b58\u6bb5\u6807\u8bb0\u4e3a\u79c1\u6709\u7684\u5199\u65f6\u590d\u5236. \u53ea\u8981\u6ca1\u6709\u8fdb\u7a0b\u8bd5\u56fe\u5199\u5b83\u81ea\u5df1\u7684\u79c1\u6709\u533a\u57df, \u5b83\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5171\u4eab\u7269\u7406\u5185\u5b58\u4e2d\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c.  \u4f46\u5f53\u6709\u8fdb\u7a0b\u8bd5\u56fe\u5199\u79c1\u6709\u533a\u57df\u7684\u67d0\u4e2a\u5c40\u9762\u65f6, \u4f1a\u89e6\u53d1\u4e00\u4e2a\u4fdd\u62a4\u6545\u969c. \u6545\u969c\u5904\u7406\u7a0b\u5e8f\u4f1a\u5728\u7269\u7406\u5185\u5b58\u4e2d\u521b\u5efa\u8fd9\u4e2a\u9875\u9762\u7684\u4e00\u4e2a\u65b0\u526f\u672c, \u66f4\u65b0 PTE \u6307\u5411\u65b0\u526f\u672c, \u7136\u540e\u6062\u590d\u8fd9\u4e2a\u9875\u9762\u7684\u53ef\u5199\u6743\u9650. \u6545\u969c\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u540e\u91cd\u65b0\u6267\u884c\u5199\u64cd\u4f5c\u5373\u53ef. </p> <p>Note</p> <p>\u56fe\u4e2d\u5927\u5757\u7684\u8868\u793a\u5bf9\u8c61\uff0c\u53ef\u80fd\u7531\u5f88\u591a\u4e2a\u9875\u7ec4\u6210\uff0c\u5f53\u6211\u4eec\u5c1d\u8bd5\u5bf9\u5176\u4e2d\u4e00\u4e2a\u9875\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u53ea\u4f1a\u5bf9\u8be5\u9875\u8fdb\u884c\u590d\u5236\uff0c\u5e76\u4fee\u6539\u8be5\u9875\u5bf9\u5e94\u7684 PTE\uff0c\u800c\u8be5\u5bf9\u8c61\u7684\u5176\u4ed6\u9875\u4fdd\u6301\u4e0d\u53d8. </p> <p>\u901a\u8fc7\u5199\u65f6\u590d\u5236\u8fd9\u79cd\u7b56\u7565\uff0c\u5c3d\u53ef\u80fd\u5ef6\u8fdf\u7269\u7406\u5185\u5b58\u4e2d\u7684\u62f7\u8d1d\uff0c\u80fd\u6700\u5927\u6548\u7387\u5730\u4f7f\u7528\u7269\u7406\u5185\u5b58.  </p>"},{"location":"CSAPP/9/#fork","title":"<code>fork</code>\u51fd\u6570","text":"<p>\u5f53<code>fork</code>\u51fd\u6570\u88ab\u5f53\u524d\u8fdb\u7a0b\u8c03\u7528\u65f6, \u5185\u6838\u4e3a\u65b0\u8fdb\u7a0b\u521b\u5efa\u5404\u79cd\u6570\u636e\u7ed3\u6784, \u5e76\u5206\u914d\u7ed9\u5b83\u552f\u4e00\u7684 PID. \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u865a\u62df\u5730\u5740\u7a7a\u95f4, \u6211\u4eec\u4f7f\u7528\u5199\u65f6\u590d\u5236\u7684\u6280\u672f:  </p> <ul> <li>\u4e3a\u4e86\u5177\u6709\u548c\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u865a\u62df\u5185\u5b58\u72b6\u6001\uff0c\u5185\u6838\u4f1a\u590d\u5236\u7236\u8fdb\u7a0b\u7684<code>mm_struct</code></li> <li>\u4e3a\u4e86\u5177\u6709\u548c\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u865a\u62df\u5185\u5b58\u6bb5\u5206\u914d\uff0c\u5185\u6838\u4f1a\u590d\u5236\u7236\u8fdb\u7a0b\u7684<code>vm_area_struct</code>(\u533a\u57df\u7ed3\u6784)</li> <li>\u4e3a\u4e86\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u5177\u6709\u76f8\u540c\u7684\u865a\u62df\u5185\u5b58\u5185\u5bb9\uff0c\u5185\u6838\u4f1a\u590d\u5236\u7236\u8fdb\u7a0b\u7684\u9875\u8868\uff0c\u5c31\u80fd\u5c06\u76f8\u540c\u7684\u78c1\u76d8\u5185\u5bb9\u6620\u5c04\u5230\u76f8\u540c\u7684\u865a\u62df\u9875\u4e2d\uff0c\u5e76\u5c06\u865a\u62df\u9875\u7f13\u5b58\u5728\u76f8\u540c\u7684\u7269\u7406\u9875\u4e2d.  </li> <li>\u4e3a\u4e86\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u80fd\u76f8\u4e92\u72ec\u7acb\uff0c\u4e24\u4e2a\u8fdb\u7a0b\u7684\u9875\u90fd\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\u7684\uff0c\u4e14\u6bb5\u90fd\u6807\u8bb0\u4e3a\u79c1\u6709\u7684\u5199\u56de\u590d\u5236\u3002\u5f53\u7236\u5b50\u8fdb\u7a0b\u90fd\u6ca1\u6709\u5bf9\u9875\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u7236\u5b50\u8fdb\u7a0b\u662f\u5171\u4eab\u76f8\u540c\u7684\u7269\u7406\u5185\u5b58\u7684\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u8fdb\u7a0b\u5bf9\u9875\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u5c31\u4f1a\u5bf9\u8be5\u9875\u8fdb\u884c\u5199\u56de\u590d\u5236\uff0c\u5e76\u4e3a\u8be5\u9875\u8d4b\u4e88\u5199\u6743\u9650\uff0c\u5e76\u66f4\u65b0\u8fdb\u7a0b\u5bf9\u5e94\u7684\u9875\u8868.   </li> </ul>"},{"location":"CSAPP/9/#execve","title":"<code>execve</code>\u51fd\u6570","text":"<p>\u5f53\u6211\u4eec\u8fd0\u884c<code>execve(\"a.out\", NULL, NULL);</code>\u65f6, \u52a0\u8f7d\u5e76\u5141\u8bb8<code>a.out</code>\u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4:  </p> <ul> <li>\u5220\u9664\u5df2\u5b58\u5728\u7684\u7528\u6237\u533a\u57df: \u5220\u9664\u5f53\u524d\u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7684\u7528\u6237\u90e8\u5206\u5df2\u5b58\u5728\u7684\u533a\u57df\u7ed3\u6784, \u5373<code>vm_area_struct</code>\u548c\u9875\u8868.  </li> <li>\u6620\u5c04\u79c1\u6709\u533a\u57df: \u4e3a\u65b0\u7a0b\u5e8f\u7684\u4ee3\u7801, \u6570\u636e, bss \u548c\u6808\u533a\u57df\u521b\u5efa\u65b0\u7684\u533a\u57df\u7ed3\u6784.  </li> <li>\u6620\u5c04\u5171\u4eab\u533a\u57df: \u5982\u679c\u4e0e\u5171\u4eab\u5bf9\u8c61\u94fe\u63a5(\u5982\u5171\u4eab\u5e93), \u90a3\u4e48\u5728<code>vm_area_struct</code>\u4e2d\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u6bb5, \u7136\u540e\u5c06\u5176\u4e0e\u5171\u4eab\u5e93\u7684\u5185\u5bb9\u5173\u8054\u8d77\u6765.  </li> <li>\u8bbe\u7f6e\u7a0b\u5e8f\u8ba1\u6570\u5668(PC): \u4f7f\u5176\u6307\u5411\u4ee3\u7801\u6bb5\u7684\u5165\u53e3\u70b9.  </li> </ul> <p></p> <p>Note</p> <p>\u5f53\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u52a0\u8f7d\u4efb\u4f55\u5185\u5bb9\u5230\u5185\u5b58\u4e2d\uff0c\u6240\u505a\u7684\u53ea\u662f\u8bbe\u7f6e\u5185\u5b58\u6620\u5c04\uff0c\u5728\u5185\u6838\u4e2d\u521b\u5efa\u6570\u636e\u7ed3\u6784\uff0c\u7531\u6b64\u521b\u5efa\u4e86\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c\u8fd9\u4e9b\u5bf9\u8c61\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u800c\u5b9e\u9645\u7684\u62f7\u8d1d\u5de5\u4f5c\u4f1a\u7531\u7f3a\u9875\u5f02\u5e38\u6309\u9700\u5b8c\u6210.  </p>"},{"location":"CSAPP/9/#mmap","title":"<code>mmap</code>\u51fd\u6570\u7684\u7528\u6237\u7ea7\u5185\u5b58\u6620\u5c04","text":"<p>Linux \u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528<code>mmap</code>\u51fd\u6570\u6765\u521b\u5efa\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df. <pre><code>#include &lt;unistd.h&gt;\n#include &lt;sys/mman.h&gt;\nvoid *mmap(void *start, size_t length, int port, int flags, int fd, off_t offset);\n</code></pre> <code>mmap</code>\u51fd\u6570\u8981\u6c42\u5185\u6838\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df, \u6700\u597d\u662f\u4ece\u5730\u5740 start \u5f00\u59cb\u7684\u4e00\u4e2a\u533a\u57df, \u5e76\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26\u53f7 fd \u6307\u5b9a\u7684\u5bf9\u8c61\u7684\u4e00\u4e2a\u8fde\u7eed\u7684\u7247\u6620\u5c04\u5230\u8fd9\u4e2a\u65b0\u7684\u533a\u57df. \u8fde\u7eed\u5bf9\u8c61\u7684\u7247\u7684\u957f\u5ea6\u4e3a length \u5b57\u8282, \u4ece\u8ddd\u6587\u4ef6\u5f00\u59cb\u504f\u79fb\u91cf\u4e3a offset \u5b57\u8282\u7684\u5730\u65b9\u5f00\u59cb. start \u53ef\u8bbe\u4e3a NULL, \u8ba9\u5185\u6838\u81ea\u52a8\u5206\u914d.  </p> <p></p> <p>\u5176\u4e2d\uff0cprot \u5bf9\u5e94\u4e8e\u6bb5\u7ed3\u6784\u4e2d\u7684<code>vm_prot</code>\u53c2\u6570\uff0c\u7528\u6765\u786e\u5b9a\u8be5\u865a\u62df\u5185\u5b58\u6bb5\u7684\u8bfb\u5199\u6743\u9650\uff1a<code>PROT_EXEC</code>\u8868\u793a\u8be5\u6bb5\u4e2d\u7684\u9875\u662f\u53ef\u6267\u884c\u7684\uff1b<code>PROT_READ</code>\u8868\u793a\u8be5\u6bb5\u4e2d\u7684\u9875\u662f\u53ef\u8bfb\u7684\uff1b<code>PROT_WRITE</code>\u8868\u793a\u8be5\u6bb5\u4e2d\u7684\u9875\u662f\u53ef\u5199\u7684\uff1b<code>PROT_NONE</code>\u8868\u793a\u8be5\u6bb5\u5185\u7684\u9875\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684.  </p> <p>flags \u5bf9\u5e94\u4e8e\u6bb5\u7ed3\u6784\u4e2d\u7684<code>vm_flags</code>: <code>MAP_PRIVATE</code>\u8868\u793a\u8be5\u6bb5\u662f\u79c1\u6709\u7684\u5199\u65f6\u590d\u5236\u7684\uff1b<code>MAP_SHARED</code>\u8868\u793a\u8be5\u6bb5\u662f\u5171\u4eab\u7684\u3002\u4e5f\u53ef\u4ee5\u8bbe\u7f6e<code>MAP_ANON</code>\uff0c\u8868\u793a\u662f\u4e00\u4e2a\u533f\u540d\u5bf9\u8c61.  </p> <p>\u5f53\u51fd\u6570\u6267\u884c\u6210\u529f\u65f6\uff0c\u4f1a\u8fd4\u56de\u6307\u5411\u8be5\u6bb5\u7684\u6307\u9488\uff0c\u5982\u679c\u5931\u8d25\uff0c\u5219\u8fd4\u56de<code>MAP_FAILED</code>.  </p> <p><code>munmap</code>\u51fd\u6570\u5220\u9664\u4ece\u865a\u62df\u5730\u5740 start \u5f00\u59cb, \u7531\u63a5\u4e0b\u6765 length \u5b57\u8282\u7ec4\u6210\u7684\u865a\u62df\u5185\u5b58\u533a\u57df  <pre><code>#include &lt;unistd.h&gt;\n#include &lt;sys/mman.h&gt;\nint munmap(void *start, size_t length); </code></pre></p> <p>\u5185\u5b58\u6620\u5c04\u7684\u597d\u5904</p> <ul> <li>\u4f7f\u5f97\u78c1\u76d8\u6587\u4ef6\u4e2d\u7684\u4e00\u5757\u6570\u636e\u80fd\u4e0e\u865a\u62df\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e2a\u6bb5\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u80fd\u76f4\u63a5\u901a\u8fc7\u5bf9\u8be5\u865a\u62df\u5185\u5b58\u6bb5\u7684\u8bbf\u95ee\u6765\u95f4\u63a5\u8bbf\u95ee\u78c1\u76d8\u6587\u4ef6\u5185\u5bb9\uff0c\u4e0d\u5fc5\u6267\u884c\u6587\u4ef6I/O\u64cd\u4f5c\uff0c\u4e5f\u65e0\u9700\u5bf9\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u7f13\u5b58\u5904\u7406\u3002\u5e76\u4e14\u865a\u62df\u5185\u5b58\u8fdb\u884c\u6309\u9700\u9875\u9762\u8c03\u5ea6\u7684\uff0c\u5f53\u4f60\u8bbf\u95ee\u4e86\u6587\u4ef6\u5185\u5bb9\uff0c\u5b83\u5c31\u4f1a\u5c06\u5bf9\u5e94\u7684\u865a\u62df\u9875\u52a0\u8f7d\u5230\u7269\u7406\u9875\u4e2d\uff0c\u6b64\u65f6\u5c31\u80fd\u4ece\u5185\u5b58\u4e2d\u5f88\u5feb\u5730\u8bbf\u95ee\u6587\u4ef6\u5185\u5bb9\u3002\u5f53\u4f60\u5904\u7406\u5927\u6587\u4ef6\u6216\u9891\u7e41\u8bfb\u5199\u6587\u4ef6\u65f6\u80fd\u63d0\u901f\uff0c\u56e0\u4e3a\u6b64\u65f6\u5c31\u76f4\u63a5\u5c06\u6587\u4ef6\u5185\u5bb9\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\u4e2d\u4e86\uff0c\u4e00\u5207\u8bfb\u5199\u64cd\u4f5c\u90fd\u662f\u5728\u7269\u7406\u5185\u5b58\u4e2d\u8fdb\u884c\u7684\uff0c\u901f\u5ea6\u7279\u522b\u5feb\uff0c\u53ea\u6709\u5728\u5185\u6838\u5c06\u5176\u727a\u7272\u65f6\uff0c\u624d\u4f1a\u8fdb\u884c\u5199\u56de.  </li> <li>\u901a\u8fc7\u5185\u5b58\u6620\u5c04\u65b9\u6cd5\uff0c\u6211\u4eec\u8fd8\u80fd\u5b9a\u4e49\u4e00\u4e2a\u8fdb\u7a0b\u5171\u4eab\u7684\u865a\u62df\u5185\u5b58\u6bb5\uff0c\u4f7f\u5f97\u80fd\u8ba9\u591a\u4e2a\u8fdb\u7a0b\u5bf9\u4e00\u4e2a\u533a\u57df\u8fdb\u884c\u8bbf\u95ee\u548c\u4fee\u6539.   </li> </ul>"},{"location":"CSAPP/9/#_16","title":"\u52a8\u6001\u5185\u5b58\u5206\u914d","text":"<p>\u867d\u7136\u53ef\u4ee5\u4f7f\u7528<code>mmap</code>\u548c<code>munmap</code>\u6765\u521b\u5efa\u548c\u5220\u9664\u865a\u62df\u5185\u5b58\u7684\u533a\u57df, \u4f46\u662f C \u7a0b\u5e8f\u5458\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668(dynamic memory allocator) \u66f4\u65b9\u4fbf, \u4e5f\u6709\u66f4\u597d\u7684\u79fb\u690d\u6027.  </p> <p>\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668\u7ef4\u62a4\u7740\u4e00\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u533a\u57df, \u79f0\u4e3a\u5806(heap). \u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u6838\u90fd\u7ef4\u62a4\u4e00\u4e2a\u53d8\u91cf brk, \u5b83\u6307\u5411\u5806\u7684\u9876\u90e8.   </p> <p>\u5206\u914d\u5668\u5c06\u5806\u89c6\u4e3a\u4e00\u7ec4\u4e0d\u540c\u5927\u5c0f\u7684\u5757\u7684\u96c6\u5408\u6765\u7ef4\u62a4. \u6bcf\u4e2a\u5757\u5c31\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u7247, \u8981\u4e48\u662f\u5df2\u5206\u914d\u7684, \u8981\u4e48\u662f\u7a7a\u95f2\u7684.    </p> <p>\u5206\u914d\u5668\u6709\u4e24\u79cd\u98ce\u683c, \u90fd\u8981\u6c42\u5e94\u7528\u663e\u5f0f\u5730\u5206\u914d\u5757, \u4e0d\u540c\u5728\u4e8e\u7531\u54ea\u4e2a\u5b9e\u4f53\u8d1f\u8d23\u91ca\u653e\u5df2\u5206\u914d\u7684\u5757:  </p> <ul> <li>\u663e\u5f0f\u5206\u914d\u5668(explicit allocator): \u8981\u6c42\u5e94\u7528\u663e\u5f0f\u5730\u91ca\u653e\u4efb\u4f55\u5df2\u5206\u914d\u7684\u5757. \u5982 C \u8bed\u8a00\u4e2d\u7684<code>malloc``free</code>\u51fd\u6570, C++ \u4e2d\u7684<code>new``delete</code>\u51fd\u6570.  </li> <li>\u9690\u5f0f\u5206\u914d\u5668(implicit allocator): \u8981\u6c42\u5206\u914d\u5668\u68c0\u6d4b\u4e00\u4e2a\u5df2\u5206\u914d\u5757\u4f55\u65f6\u4e0d\u518d\u88ab\u7a0b\u5e8f\u6240\u4f7f\u7528, \u90a3\u4e48\u5c31\u91ca\u653e\u8fd9\u4e2a\u5757. \u9690\u5f0f\u5206\u914d\u5668\u4e5f\u53eb\u5783\u573e\u6536\u96c6\u5668(garbage collector)*, \u81ea\u52a8\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5df2\u5206\u914d\u7684\u5757\u7684\u8fc7\u7a0b\u53eb\u5783\u573e\u6536\u96c6**.  </li> </ul> <p>\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d</p> <p>\u7ecf\u5e38\u76f4\u5230\u7a0b\u5e8f\u5b9e\u9645\u8fd0\u884c\u65f6, \u624d\u77e5\u9053\u67d0\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u5927\u5c0f.  </p>"},{"location":"CSAPP/9/#_17","title":"\u663e\u5f0f\u5206\u914d\u5668","text":""},{"location":"CSAPP/9/#mallocfree","title":"<code>malloc</code>\u548c<code>free</code>\u51fd\u6570","text":"<p>\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7<code>malloc</code>\u51fd\u6570\u6765\u663e\u793a\u5730\u4ece\u5806\u4e2d\u5206\u914d\u5757</p> <p><pre><code>#include &lt;stdlib.h&gt;\nvoid *malloc(size_t size); </code></pre> <code>malloc</code>\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u9488, \u6307\u5411\u5927\u5c0f\u4e3a\u81f3\u5c11 size \u5b57\u8282\u7684\u5185\u5b58\u5757.(\u8fd9\u4e2a\u5757\u53ef\u80fd\u4e3a\u5728\u8fd9\u4e2a\u5757\u5185\u4efb\u4f55\u6570\u636e\u5bf9\u8c61\u7c7b\u578b\u505a\u5bf9\u9f50) \u5b9e\u9645\u4e2d\u5bf9\u9f50\u4e5f\u6765\u7f16\u8bd1\u4ee3\u7801\u5904\u4e8e 32 \u4f4d\u6a21\u5f0f(<code>gcc -m32</code>)\u8fd8\u662f 64 \u4f4d\u6a21\u5f0f(<code>gcc -m64</code>). 32 \u4f4d\u6a21\u5f0f\u4e2d<code>malloc</code>\u8fd4\u56de\u7684\u5757\u7684\u5730\u5740\u603b\u662f 8 \u7684\u500d\u6570, 64 \u4f4d\u6a21\u5f0f\u4e2d\u5730\u5740\u603b\u662f 16 \u7684\u500d\u6570. \u5982\u679c<code>malloc</code>\u9047\u5230\u95ee\u9898, \u5982\u8981\u6c42\u7684\u5185\u5b58\u5757\u6bd4\u53ef\u7528\u7684\u865a\u62df\u5185\u5b58\u8fd8\u8981\u5927, \u90a3\u4e48\u5c31\u8fd4\u56de NULL, \u5e76\u8bbe\u7f6e errn. <code>malloc</code>\u4e0d\u521d\u59cb\u5316\u8fd4\u56de\u7684\u5185\u5b58, <code>calloc</code>\u4f1a\u5c06\u5185\u5b58\u521d\u59cb\u4e3a 0. <code>realloc</code>\u53ef\u4ee5\u7528\u6765\u6539\u53d8\u4e00\u4e2a\u4ee5\u524d\u5df2\u5206\u914d\u5757\u7684\u5927\u5c0f.  </p> <p>\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7<code>free</code>\u51fd\u6570\u6765\u91ca\u653e\u5df2\u5206\u914d\u7684\u5806\u5757 <pre><code>#include &lt;stdlib.h&gt;\nvoid free(void *ptr);\n</code></pre> ptr \u53c2\u6570\u5fc5\u987b\u6307\u5411\u4e00\u4e2a\u4ece<code>malloc``calloc``realooc</code>\u83b7\u5f97\u7684\u5df2\u5206\u914d\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e, \u5982\u679c\u4e0d\u662f, \u90a3\u4e48<code>free</code>\u7684\u884c\u4e3a\u5c31\u662f\u672a\u5b9a\u4e49\u7684, \u800c\u4e14\u56e0\u4e3a\u4ed6\u6ca1\u6709\u8fd4\u56de\u503c, \u5b83\u4e5f\u4e0d\u4f1a\u544a\u8bc9\u5e94\u7528\u51fa\u73b0\u4e86\u9519\u8bef.  </p> <p>\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668\u53ef\u4ee5\u4f7f\u7528<code>mmap</code>\u548c<code>munmap</code>\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>sbrk</code>\u51fd\u6570\u6765\u5411\u5185\u6838\u7533\u8bf7\u5806\u5185\u5b58\u7a7a\u95f4\uff0c\u53ea\u6709\u5148\u7533\u8bf7\u83b7\u5f97\u5806\u5185\u5b58\u7a7a\u95f4\u540e\uff0c\u624d\u80fd\u5c1d\u8bd5\u5bf9\u5757\u8fdb\u884c\u5206\u914d\u8ba9\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528. <pre><code>#include &lt;unistd.h&gt;\nvoid *sbrk(intptr_t incr); </code></pre> <code>sbrk</code>\u51fd\u6570\u5c06\u5185\u6838\u7684 brk \u6307\u9488\u589e\u52a0 incr \u6765\u6269\u5c55\u548c\u6536\u7f29\u5806. \u5982\u679c\u6210\u529f\u5c31\u8fd4\u56de brk \u7684\u65e7\u503c, \u5426\u5219\u8fd4\u56de -1 \u5e76\u8bbe\u7f6e errno \u4e3a<code>ENOMEM</code>. \u5982\u679c incr \u4e3a 0 \u90a3\u4e48 sbrk \u5c31\u8fd4\u56de brk \u5f53\u524d\u503c. \u7528\u4e00\u4e2a\u8d1f\u7684 incr \u8c03\u7528<code>sbrk</code>\u662f\u5408\u6cd5\u7684, \u8fd4\u56de\u503c\u6307\u5411\u65b0\u5806\u9876\u5411\u4e0a<code>abs(incr)</code>\u5b57\u8282\u5904.  </p> <p>Example</p> <p>\u672c\u8282\u4e2d\u6211\u4eec\u5047\u8bbe\u5b57\u662f 4 \u5b57\u8282, \u53cc\u5b57\u662f 8 \u5b57\u8282.  </p> <p> \u6bcf\u4e2a\u65b9\u5757\u4ee3\u8868\u4e00\u4e2a 4 \u5b57\u8282\u7684\u5b57. \u5176\u4e2d b \u5373\u8fdb\u884c\u4e86\u5bf9\u9f50.  </p>"},{"location":"CSAPP/9/#_18","title":"\u5206\u914d\u5668\u7684\u8981\u6c42\u548c\u76ee\u6807","text":"<p>\u663e\u793a\u5206\u914d\u5668\u5fc5\u987b\u5728\u4e00\u4e9b\u76f8\u5f53\u4e25\u683c\u7684\u7ea6\u675f\u6761\u4ef6\u4e0b\u5de5\u4f5c:  </p> <ul> <li>\u5904\u7406\u4efb\u610f\u8bf7\u6c42\u5e8f\u5217 \u4e00\u4e2a\u5e94\u7528\u53ef\u4ee5\u7531\u4efb\u610f\u7684\u5206\u914d\u548c\u91ca\u653e\u8bf7\u6c42\u5e8f\u5217, \u53ea\u8981\u6ee1\u8db3\u5148\u5206\u914d\u540e\u91ca\u653e. \u5206\u914d\u5668\u4e0d\u53ef\u4ee5\u5047\u8bbe\u5206\u914d\u548c\u91ca\u653e\u7684\u987a\u5e8f.   </li> <li>\u7acb\u5373\u76f8\u5e94\u8bf7\u6c42 \u5206\u914d\u5668\u5fc5\u987b\u7acb\u5373\u76f8\u5e94\u8bf7\u6c42, \u4e0d\u5141\u8bb8\u5206\u914d\u5668\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\u91cd\u65b0\u6392\u5217\u6216\u8005\u7f13\u51b2\u8bf7\u6c42.  </li> <li>\u53ea\u4f7f\u7528\u5806 \u4e3a\u4e86\u4f7f\u5206\u914d\u5668\u53ef\u6269\u5c55, \u4f7f\u7528\u7684\u4efb\u4f55\u975e\u6807\u91cf\u6570\u636e\u7ed3\u6784\u5fc5\u987b\u4fdd\u5b58\u5728\u5806\u91cc.  </li> <li>\u5bf9\u9f50\u5757  \u5206\u914d\u5668\u5fc5\u987b\u5bf9\u9f50\u5757, \u4f7f\u5f97\u5b83\u4eec\u53ef\u4ee5\u4fdd\u5b58\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u5bf9\u8c61.  </li> <li>\u4e0d\u4fee\u6539\u5df2\u5206\u914d\u7684\u5757 \u5206\u914d\u5668\u53ea\u80fd\u64cd\u4f5c\u6539\u53d8\u7a7a\u95f2\u5757, \u4e00\u65e6\u5757\u88ab\u5206\u914d\u5c31\u4e0d\u5141\u8bb8\u4fee\u6539\u6216\u8005\u79fb\u52a8.  </li> </ul> <p>\u6211\u4eec\u6709\u4e24\u4e2a\u6027\u80fd\u76ee\u6807:  </p> <ul> <li>\u6700\u5927\u5316\u541e\u5410\u7387 \u541e\u5410\u7387\u5b9a\u4e49\u4e3a\u6bcf\u4e2a\u5355\u4f4d\u65f6\u95f4\u91cc\u5b8c\u6210\u7684\u8bf7\u6c42\u6570. \u4e00\u822c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u6ee1\u8db3\u5206\u914d\u548c\u91ca\u653e\u8bf7\u6c42\u7684\u5e73\u5747\u65f6\u95f4\u6700\u5c0f\u5316\u6765\u4f7f\u541e\u5410\u7387\u6700\u5927\u5316. \u5408\u7406\u6027\u80fd\u7684\u5206\u914d\u5668\u6307\u4e00\u4e2a\u5206\u914d\u8bf7\u6c42\u7684\u6700\u7cdf\u8fd0\u884c\u65f6\u95f4\u4e0e\u7a7a\u95f2\u5757\u6570\u91cf\u6210\u7ebf\u6027\u5173\u7cfb, \u800c\u4e00\u4e2a\u91ca\u653e\u8bf7\u6c42\u7684\u8fd0\u884c\u65f6\u95f4\u662f\u5e38\u6570.  </li> <li>\u6700\u5927\u5316\u5185\u5b58\u5229\u7528\u7387 \u5047\u8bbe n \u4e2a\u5206\u914d\u548c\u91ca\u653e\u7684\u67d0\u79cd\u5e8f\u5217 \\(R_0, R_1, \\ldots, R_k,\\ldots, R_{n-1}\\), \u7528 \\(H_k\\) \u8868\u793a\u5f53\u524d\u5806\u7684\u5927\u5c0f.    <ul> <li>\u6709\u6548\u8f7d\u8377(payload): \u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u4e00\u4e2a p \u5b57\u8282\u7684\u5757, \u90a3\u4e48\u5f97\u5230\u7684\u5df2\u5206\u914d\u5757\u7684\u6709\u6548\u8f7d\u8377\u662f p \u5b57\u8282.  </li> <li>\u805a\u7126\u6709\u6548\u8f7d\u8377(aggregate payload): \u7528 \\(P_k\\) \u8868\u793a, \u4e3a\u5f53\u524d\u5df2\u5206\u914d\u7684\u6709\u6548\u8f7d\u8377\u4e4b\u548c.  </li> <li>\u5cf0\u503c\u5229\u7528\u7387(peak utilization): \u5cf0\u503c\u5229\u7528\u7387\u662f\u6700\u5e38\u7528\u6765\u8bc4\u5224\u5185\u5b58\u5229\u7528\u7387\u7684\u6807\u51c6. \u5047\u8bbe \\(H_k\\) \u662f\u5355\u8c03\u4e0d\u9012\u51cf\u7684, \u90a3\u4e48\u524d k+1 \u4e2a\u8bf7\u6c42\u7684\u5cf0\u503c\u5229\u7528\u7387 \\(U_k=\\frac{max_{i&lt;=k}P_i}{H_k}\\). \u5206\u914d\u5668\u7684\u76ee\u6807\u5c31\u662f\u4f7f\u5f97 \\(U_{n-1}\\) \u6700\u5927\u5316. \u6ce8: \u6211\u4eec\u53ef\u4ee5\u653e\u5bbd\u5355\u8c03\u6027\u5047\u8bbe,\u8ba9 \\(H_k\\) \u8868\u793a\u524d k+1 \u4e2a\u8bf7\u6c42\u7684\u5806\u7684\u6700\u9ad8\u5cf0.  </li> </ul> </li> </ul> <p>\u9020\u6210\u5806\u5229\u7528\u7387\u4f4e\u7684\u4e3b\u8981\u539f\u56e0\u4e4b\u4e00\u5c31\u662f\u788e\u7247(fragmentation).  </p> <ul> <li>\u5185\u90e8\u788e\u7247 \u4e00\u4e2a\u5df2\u5206\u914d\u5757\u6bd4\u6709\u6548\u8f7d\u8377\u5927, \u6bd4\u5982\u5206\u914d\u5668\u4e3a\u4e86\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42, \u5c31\u4f1a\u7533\u8bf7\u989d\u5916\u7684\u5185\u5b58\u7a7a\u95f4. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5df2\u5206\u914d\u5757\u7684\u5927\u5c0f\u4e0e\u5176\u6709\u6548\u8f7d\u8377\u7684\u5dee\u6765\u91cf\u5316\u5185\u90e8\u788e\u7247\uff0c\u5219\u5185\u90e8\u788e\u7247\u7684\u6570\u91cf\u4e3b\u8981\u53d6\u51b3\u4e8e\u4e4b\u524d\u8bf7\u6c42\u7684\u6a21\u5f0f\u548c\u5206\u914d\u5668\u7684\u5b9e\u73b0\u65b9\u6cd5.   </li> <li>\u5916\u90e8\u788e\u7247 \u5f53\u7a7a\u95f2\u5185\u5b58\u5408\u8ba1\u8d77\u6765\u8db3\u591f\u6ee1\u8db3\u4e00\u4e2a\u5206\u914d\u8bf7\u6c42, \u4f46\u662f\u6ca1\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u7a7a\u95f2\u5757\u8db3\u591f\u5927\u53ef\u4ee5\u6765\u5904\u7406\u8fd9\u4e2a\u8bf7\u6c42\u65f6\u53d1\u751f\u7684. \u5982\u56fe  \u5916\u90e8\u788e\u7247\u7684\u91cf\u5316\u66f4\u52a0\u56f0\u96be, \u56e0\u4e3a\u5b83\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u4ee5\u524d\u8bf7\u6c42\u7684\u6a21\u5f0f\u548c\u5206\u914d\u5668\u7684\u5904\u7406\u65b9\u5f0f, \u8fd8\u53d6\u51b3\u4e8e\u5c06\u6765\u8bf7\u6c42\u7684\u6a21\u5f0f. \u6240\u4ee5\u5206\u914d\u5668\u901a\u5e38\u91c7\u7528\u542f\u53d1\u5f0f\u7b56\u7565\u6765\u8bd5\u56fe\u7ef4\u6301\u5c11\u91cf\u7684\u5927\u7a7a\u95f2\u5757, \u800c\u4e0d\u662f\u5927\u91cf\u7684\u5c0f\u7a7a\u95f2\u5757.   </li> </ul> <p>\u4e3a\u4e86\u5e73\u8861\u597d\u541e\u5410\u7387\u548c\u5229\u7528\u7387\u4e4b\u95f4\u7684\u5e73\u8861, \u6211\u4eec\u9700\u8981\u8003\u8651\u51e0\u4e2a\u95ee\u9898:  </p> <ul> <li>\u7a7a\u95f2\u5757\u7ec4\u7ec7: \u5982\u4f55\u8bb0\u5f55\u7a7a\u95f2\u5757?  </li> <li>\u653e\u7f6e: \u5982\u4f55\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u7a7a\u95f2\u5757\u6765\u653e\u7f6e\u4e00\u4e2a\u65b0\u5206\u914d\u7684\u5757?  </li> <li>\u5206\u5272: \u5728\u5c06\u4e00\u4e2a\u65b0\u5206\u914d\u7684\u5757\u653e\u5230\u67d0\u4e2a\u7a7a\u95f2\u5757\u4e4b\u540e, \u5982\u4f55\u5904\u7406\u7a7a\u95f2\u5757\u4e2d\u7684\u5269\u4f59\u90e8\u5206?  </li> <li>\u5408\u5e76: \u5982\u4f55\u5904\u7406\u4e00\u4e2a\u521a\u521a\u91ca\u653e\u7684\u5757?  </li> </ul>"},{"location":"CSAPP/9/#_19","title":"\u9690\u5f0f\u7a7a\u95f2\u94fe\u8868","text":"<p>\u4e00\u4e2a\u5757\u7531\u4e00\u4e2a\u5b57\u7684\u5934\u90e8, \u6709\u6548\u8f7d\u8377, \u4ee5\u53ca\u53ef\u80fd\u7684\u4e00\u4e9b\u989d\u5916\u7684\u586b\u5145\u7ec4\u6210\u7684.  </p> <ul> <li>\u5934\u90e8 \u5934\u90e8\u5927\u5c0f\u4e3a\u4e00\u4e2a\u5b57. \u5934\u90e8\u7f16\u7801\u4e86\u8fd9\u4e2a\u5757\u7684\u5927\u5c0f(\u5757\u5927\u5c0f\u5305\u62ec\u5934\u90e8\u548c\u5bf9\u9f50\u586b\u5145), \u4ee5\u53ca\u8fd9\u4e2a\u5757\u662f\u5426\u5206\u914d. \u5982\u679c\u6211\u4eec\u8981\u6ee1\u8db3\u53cc\u5b57\u5bf9\u9f50, \u90a3\u4e48\u5757\u7684\u5927\u5c0f\u603b\u662f 8 \u7684\u500d\u6570, \u56e0\u6b64\u5757\u5927\u5c0f\u7684\u7b2c\u4e09\u4f4d(\u4e8c\u8fdb\u5236)\u603b\u662f 0, \u6211\u4eec\u5c31\u7528\u5176\u4e2d\u7684\u6700\u4f4e\u4f4d\u6765\u8868\u793a\u8fd9\u4e2a\u5757\u7684\u5206\u914d\u60c5\u51b5.   </li> <li>\u6709\u6548\u8f7d\u8377 \u5e94\u7528<code>malloc</code>\u8bf7\u6c42\u7684\u6709\u6548\u8f7d\u8377  </li> <li>\u586b\u5145 \u53ef\u9009\u7684, \u5206\u914d\u5668\u7528\u6765\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42, \u6216\u8005\u5904\u7406\u5916\u90e8\u788e\u7247.  </li> </ul> <p>\u6211\u4eec\u79f0\u8fd9\u79cd\u7ed3\u6784\u4e3a\u9690\u5f0f\u7a7a\u95f2\u94fe\u8868, \u56e0\u4e3a\u7a7a\u95f2\u5757\u901a\u8fc7\u5934\u90e8\u7684\u5927\u5c0f\u5b57\u6bb5\u9690\u542b\u5730\u8fde\u63a5. \u5206\u914d\u5668\u53ef\u4ee5\u4fbf\u5229\u5806\u4e2d\u7684\u6240\u6709\u5757, \u4ece\u800c\u95f4\u63a5\u5730\u904d\u5386\u6574\u4e2a\u7a7a\u95f2\u5757\u7684\u96c6\u5408. \u6ce8: \u6211\u4eec\u9700\u8981\u67d0\u79cd\u7279\u6b8a\u6807\u8bb0\u7684\u7ed3\u675f\u5757, \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f\u4e00\u4e2a\u8bbe\u7f6e\u4e86\u5df2\u5206\u914d\u4f4d\u800c\u5927\u5c0f\u4e3a 0 \u7684\u7ec8\u6b62\u5934\u90e8(terminating header).  </p> <p></p> <p>\u7531\u4e8e\u5730\u5740\u5bf9\u9f50\u8981\u6c42\u548c\u5206\u914d\u5668\u5bf9\u5757\u683c\u5f0f\u7684\u9009\u62e9\uff0c\u4f1a\u5bf9\u6700\u5c0f\u5757\u7684\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6ca1\u6709\u5df2\u5206\u914d\u7684\u5757\u548c\u7a7a\u95f2\u5757\u6bd4\u6700\u5c0f\u5757\u8fd8\u5c0f\uff0c\u5982\u679c\u6bd4\u6700\u5c0f\u5757\u8fd8\u5c0f\uff0c\u5c31\u4f1a\u53d8\u6210\u5916\u90e8\u788e\u7247(\u6240\u4ee5\u6700\u5c0f\u5757\u8d8a\u5927\uff0c\u5185\u90e8\u788e\u7247\u7a0b\u5ea6\u8d8a\u9ad8).  </p>"},{"location":"CSAPP/9/#_20","title":"\u653e\u7f6e\u5df2\u5206\u914d\u7684\u5757","text":"<p>\u5f53\u4e00\u4e2a\u5e94\u7528\u8bf7\u6c42\u4e00\u4e2a k \u5b57\u8282\u7684\u5757\u65f6, \u5206\u914d\u5668\u641c\u7d22\u7a7a\u95f2\u94fe\u8868, \u67e5\u627e\u4e00\u4e2a\u8db3\u591f\u5927\u53ef\u4ee5\u653e\u7f6e\u6240\u8bf7\u6c42\u5757\u7684\u7a7a\u95f2\u5757. \u5206\u914d\u5668\u6267\u884c\u8fd9\u79cd\u641c\u7d22\u7684\u65b9\u5f0f\u662f\u7531\u653e\u7f6e\u7b56\u7565(placement policy)\u786e\u5b9a\u7684.  </p> <ul> <li> <p>\u9996\u6b21\u9002\u914d(first fit): \u4ece\u5934\u5f00\u59cb\u641c\u7d22\u7a7a\u95f2\u94fe\u8868, \u9009\u62e9\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u7a7a\u95f2\u5757.  </p> <ul> <li>\u4f18\u70b9: \u5c06\u5927\u7684\u7a7a\u95f2\u5757\u4fdd\u7559\u5728\u540e\u9762  </li> <li>\u7f3a\u70b9: \u5728\u9760\u8fd1\u94fe\u8868\u8d77\u59cb\u5904\u7559\u4e0b\u5c0f\u7a7a\u95f2\u5757\u7684\"\u788e\u7247\", \u589e\u52a0\u4e86\u5bf9\u8f83\u5927\u5757\u7684\u641c\u7d22\u65f6\u95f4.    </li> <li> <p>\u4e0b\u4e00\u6b21\u9002\u914d(next fit): \u4ece\u4e0a\u4e00\u6b21\u67e5\u8be2\u7ed3\u675f\u7684\u5730\u65b9\u5f00\u59cb\u641c\u7d22, \u9009\u62e9\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u7a7a\u95f2\u5757.    </p> </li> <li> <p>\u4f18\u70b9: \u8fd0\u884c\u6bd4\u9996\u6b21\u9002\u914d\u5757\u4e00\u4e9b, \u53ef\u4ee5\u8df3\u8fc7\u5f00\u5934\u7684\u788e\u7247    </p> </li> <li>\u7f3a\u70b9: \u5185\u5b58\u5229\u7528\u7387\u6bd4\u9996\u6b21\u9002\u914d\u4f4e\u5f88\u591a      </li> <li> <p>\u6700\u4f73\u9002\u914d(best fit): \u68c0\u67e5\u6bcf\u4e2a\u7a7a\u95f2\u5757, \u9009\u62e9\u9002\u5408\u6240\u9700\u8bf7\u6c42\u5927\u5c0f\u7684\u6700\u5c0f\u7a7a\u95f2\u5757.  </p> </li> <li> <p>\u4f18\u70b9: \u5185\u5b58\u5229\u7528\u7387\u6bd4\u524d\u4e24\u8005\u90fd\u9ad8\u4e00\u4e9b</p> </li> <li>\u7f3a\u70b9: \u9700\u8981\u904d\u5386\u5b8c\u6574\u7684\u7a7a\u95f2\u94fe\u8868  </li> </ul> </li> </ul>"},{"location":"CSAPP/9/#_21","title":"\u5206\u5272\u5185\u5b58\u5757","text":"<p>\u4e00\u65e6\u5206\u914d\u5668\u627e\u5230\u4e00\u4e2a\u5339\u914d\u7684\u7a7a\u95f2\u5757, \u5b83\u5fc5\u987b\u505a\u53e6\u4e00\u4e2a\u7b56\u7565\u51b3\u5b9a, \u90a3\u5c31\u662f\u5206\u914d\u7a7a\u95f2\u5757\u4e2d\u591a\u5c11\u7a7a\u95f4. \u4e00\u4e2a\u9009\u62e9\u662f\u7528\u6574\u4e2a\u7a7a\u95f2\u5757, \u867d\u7136\u7b80\u5355\u5feb\u6377\u4f46\u4f1a\u4ea7\u751f\u5185\u90e8\u788e\u7247. \u5982\u679c\u653e\u7f6e\u7b56\u7565\u503e\u5411\u4e8e\u4ea7\u751f\u8f83\u597d\u7684\u5339\u914d\u90a3\u4e48\u4e5f\u53ef\u4ee5\u63a5\u6536\u989d\u5916\u7684\u5185\u90e8\u788e\u7247. \u5206\u914d\u5668\u901a\u5e38\u4f1a\u5c06\u8fd9\u4e2a\u7a7a\u95f2\u5757\u5206\u5272\u6210\u4e24\u90e8\u5206, \u7b2c\u4e00\u90e8\u5206\u53d8\u6210\u5206\u914d\u5757, \u800c\u5269\u4e0b\u7684\u53d8\u6210\u4e00\u4e2a\u65b0\u7684\u7a7a\u95f2\u5757. </p>"},{"location":"CSAPP/9/#_22","title":"\u83b7\u53d6\u989d\u5916\u7684\u5806\u5185\u5b58","text":"<p>\u5982\u679c\u5206\u914d\u5668\u4e0d\u80fd\u4e3a\u8bf7\u6c42\u627e\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757, \u4e00\u4e2a\u9009\u62e9\u662f\u901a\u8fc7\u5408\u5e76\u90a3\u4e9b\u5728\u5185\u5b58\u4e2d\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2\u5757\u6765\u521b\u5efa\u4e00\u4e9b\u66f4\u5927\u7684\u7a7a\u95f2\u5757. \u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u8c03\u7528<code>sbrk</code>\u51fd\u6570, \u5411\u5185\u6838\u8bf7\u6c42\u989d\u5916\u7684\u5806\u5185\u5b58. \u5206\u914d\u5668\u5c06\u989d\u5916\u7684\u5185\u5b58\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5927\u7a7a\u95f2\u5757, \u5c06\u8fd9\u4e2a\u5757\u63d2\u5165\u5230\u7a7a\u95f2\u94fe\u8868\u4e2d, \u7136\u540e\u5c06\u88ab\u8bf7\u6c42\u7684\u5757\u653e\u5230\u8fd9\u4e2a\u65b0\u7684\u7a7a\u95f2\u5757\u4e2d.  </p>"},{"location":"CSAPP/9/#_23","title":"\u5408\u5e76\u7a7a\u95f2\u5757","text":"<p>\u5f53\u5206\u914d\u5668\u91ca\u653e\u4e00\u4e2a\u5df2\u5206\u914d\u5757\u65f6, \u53ef\u80fd\u4f1a\u7531\u5176\u4ed6\u7a7a\u95f2\u5757\u4e0e\u4e2d\u56fd\u65b0\u91ca\u653e\u7684\u7a7a\u95f2\u5757\u76f8\u90bb. \u8fd9\u4e9b\u90bb\u63a5\u7684\u7a7a\u95f2\u5757\u5f15\u8d77\u4e00\u79cd\u73b0\u8c61, \u5373\u5047\u788e\u7247(fault fragmentation).  </p> <p>\u5206\u914d\u5668\u53ef\u4ee5\u9009\u62e9\u7acb\u5373\u5408\u5e76\u6216\u8005\u63a8\u8fdf\u5408\u5e76.  </p> <ul> <li>\u7acb\u5373\u5408\u5e76(immediate coalescing): \u6bcf\u6b21\u4e00\u4e2a\u5757\u88ab\u91ca\u653e\u65f6, \u5c31\u5408\u5e76\u6240\u6709\u7684\u76f8\u90bb\u5757.  </li> <li>\u63a8\u8fdf\u5408\u5e76(deferred coalescing): \u627e\u4e0d\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757\u65f6, \u518d\u626b\u63cf\u6574\u4e2a\u5806\u8fdb\u884c\u5408\u5e76.  </li> </ul> <p>\u7acb\u5373\u5408\u5e76\u7b80\u5355\u660e\u4e86, \u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u5185\u5b8c\u6210, \u4f46\u5bf9\u4e8e\u67d0\u4e9b\u8bf7\u6c42\u6a21\u5f0f\u4f1a\u4ea7\u751f\u4e00\u79cd\u5f62\u5f0f\u7684\u6296\u52a8, \u5373\u5757\u53cd\u590d\u5730\u5408\u5e76, \u7136\u540e\u9a6c\u4e0a\u88ab\u5206\u5272.  </p> <p>\u5177\u4f53\u5b9e\u73b0\u5408\u5e76\u4e2d: \u5408\u5e76\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5757\u662f\u7b80\u5355\u9ad8\u6548\u7684, \u56e0\u4e3a\u5f53\u524d\u5757\u5934\u90e8\u6307\u5411\u4e0b\u4e00\u4e2a\u5757\u7684\u5934\u90e8. \u53ea\u9700\u8981\u68c0\u67e5\u4e0b\u4e00\u4e2a\u5757\u7684\u5934\u90e8, \u770b\u5b83\u662f\u5426\u7a7a\u95f2\u5373\u53ef. \u5982\u679c\u662f, \u5c06\u5927\u5c0f\u76f8\u52a0\u5373\u53ef. \u4f46\u662f\u5408\u5e76\u524d\u4e00\u4e2a\u5757, \u9700\u8981\u4f7f\u7528\u8fb9\u754c\u6807\u8bb0(boundray tag). \u5728\u6bcf\u4e2a\u5757\u7684\u7ed3\u5c3e\u5904\u6dfb\u52a0\u4e00\u4e2a\u811a\u90e8(footer), \u811a\u90e8\u5c31\u662f\u5934\u90e8\u7684\u4e00\u4e2a\u526f\u672c. \u5982\u679c\u6bcf\u4e2a\u5757\u90fd\u5305\u62ec\u8fd9\u6837\u4e00\u4e2a\u811a\u90e8, \u90a3\u4e48\u5206\u914d\u5668\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u5b83\u7684\u811a\u90e8\u5224\u65ad\u524d\u4e00\u4e2a\u5757\u7684\u4f4d\u7f6e\u548c\u72b6\u6001. \u8fd9\u4e2a\u811a\u90e8\u603b\u662f\u5728\u8ddd\u5f53\u524d\u5757\u5f00\u59cb\u4f4d\u7f6e\u4e00\u4e2a\u5b57\u7684\u8ddd\u79bb. </p> <p>\u53ef\u4ee5\u5c06\u60c5\u51b5\u5206\u4e3a\u4e0b\u9762\u51e0\u79cd: </p> <ul> <li>\u524d\u4e00\u5757\u548c\u540e\u4e00\u5757\u90fd\u662f\u5206\u914d\u7684\uff1a\u6b64\u65f6\u4e0d\u4f1a\u53d1\u751f\u5408\u5e76\u64cd\u4f5c.  </li> <li>\u524d\u4e00\u5757\u662f\u5df2\u5206\u914d\u7684\uff0c\u540e\u4e00\u5757\u662f\u7a7a\u95f2\u7684\uff1a\u5f53\u524d\u5757\u4f1a\u5c06\u5934\u90e8\u4e2d\u7684\u5757\u5927\u5c0f\u8bbe\u7f6e\u4e3a\u5f53\u524d\u5757\u7684\u5927\u5c0f\u548c\u4e0b\u4e00\u5757\u5927\u5c0f\u4e4b\u548c\uff0c\u5e76\u4e14\u4fee\u6539\u4e0b\u4e00\u5757\u7684\u811a\u90e8.  </li> <li>\u524d\u4e00\u5757\u662f\u7a7a\u95f2\u7684\uff0c\u4e0b\u4e00\u5757\u662f\u5df2\u5206\u914d\u7684\uff1a\u524d\u4e00\u5757\u4f1a\u5c06\u5934\u90e8\u4e2d\u7684\u5757\u5927\u5c0f\u8bbe\u7f6e\u4e3a\u81ea\u5df1\u7684\u5757\u5927\u5c0f\u548c\u5f53\u524d\u5757\u5927\u5c0f\u4e4b\u548c\uff0c\u5e76\u4e14\u4fee\u6539\u5f53\u524d\u5757\u7684\u811a\u90e8.  </li> <li>\u524d\u4e00\u5757\u548c\u5f53\u524d\u5feb\u90fd\u662f\u7a7a\u95f2\u7684\uff1a\u524d\u4e00\u5757\u4f1a\u5c06\u5934\u90e8\u4e2d\u7684\u5757\u5927\u5c0f\u8bbe\u7f6e\u4e3a\u8fd9\u4e09\u4e2a\u5757\u7684\u5927\u5c0f\u4e4b\u548c\uff0c\u5e76\u4fee\u6539\u4e0b\u4e00\u5757\u7684\u811a\u90e8.  </li> </ul> <p>\u8be5\u6280\u672f\u7684\u7f3a\u70b9\u662f\u4f1a\u663e\u8457\u589e\u52a0\u5185\u5b58\u5f00\u9500\uff0c\u7531\u4e8e\u5f15\u5165\u4e86\u811a\u90e8\uff0c\u4f7f\u5f97\u6709\u6548\u8f7d\u8377\u5927\u5c0f\u53d8\u5c0f\uff0c\u800c\u4f7f\u5f97\u5185\u90e8\u788e\u7247\u53d8\u591a\u4e86\uff0c\u5e76\u4e14\u6700\u5c0f\u5757\u7684\u5927\u5c0f\u53d8\u5927\u5bfc\u81f4\u5916\u90e8\u788e\u7247\u4e5f\u53d8\u591a\u4e86.  </p> <p>\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\uff0c\u6709\u4e9b\u60c5\u51b5\u662f\u4e0d\u9700\u8981\u8fb9\u754c\u6807\u8bb0\u7684\uff0c\u53ea\u6709\u5728\u5408\u5e76\u65f6\u624d\u9700\u8981\u811a\u90e8\uff0c\u800c\u6211\u4eec\u53ea\u4f1a\u5728\u7a7a\u95f2\u5757\u4e0a\u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u5728\u5df2\u5206\u914d\u7684\u5757\u4e0a\u53ef\u4ee5\u4e0d\u9700\u8981\u811a\u90e8\uff0c\u90a3\u7a7a\u95f2\u5757\u5982\u4f55\u5224\u65ad\u524d\u4e00\u4e2a\u5757\u662f\u5426\u4e3a\u5df2\u5206\u914d\u7684\u5462\uff1f\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u5934\u90e8\u7684 3 \u4e2a\u4f4d\u4e2d\u7528\u4e00\u4e2a\u4f4d\u6765\u6807\u8bb0\u524d\u4e00\u4e2a\u5757\u662f\u5426\u4e3a\u7a7a\u95f2\u7684\uff0c\u5982\u679c\u524d\u4e00\u4e2a\u5757\u4e3a\u5df2\u5206\u914d\u7684\uff0c\u5219\u65e0\u9700\u5173\u5fc3\u524d\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u8fdb\u884c\u5408\u5e76\uff1b\u5982\u679c\u524d\u4e00\u4e2a\u5757\u4e3a\u7a7a\u95f2\u7684\uff0c\u5219\u524d\u4e00\u4e2a\u5757\u81ea\u5df1\u5c31\u6709\u811a\u90e8\uff0c\u8bf4\u660e\u4e86\u524d\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\uff0c\u5219\u53ef\u4ee5\u987a\u5229\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c. \u5373, \u5df2\u5206\u914d\u5757\u53ef\u4ee5\u4e0d\u7528\u811a\u90e8.  </p>"},{"location":"CSAPP/9/#_24","title":"\u5b9e\u73b0\u9690\u5f0f\u7a7a\u95f2\u94fe\u8868","text":""},{"location":"CSAPP/9/#_25","title":"\u901a\u7528\u5206\u914d\u5668\u8bbe\u8ba1","text":"<ul> <li><code>mem_init</code>\u51fd\u6570\u5c06\u5bf9\u4e8e\u5806\u6765\u8bf4\u53ef\u7528\u7684\u865a\u62df\u5185\u5b58\u6a21\u578b\u5316\u4e3a\u4e00\u4e2a\u5927\u7684, \u53cc\u5b57\u5bf9\u9f50\u7684\u5b57\u8282\u6570\u7ec4. \u5728<code>mem_heap</code>\u548c<code>mem_brk</code>\u4e4b\u95f4\u7684\u5b57\u8282\u8868\u793a\u5df2\u5206\u914d\u7684\u865a\u62df\u5185\u5b58(\u4e0d\u5305\u62ec<code>mem_brk</code>). <code>mem_brk</code>\u4e4b\u540e\u7684\u5b57\u8282\u8868\u793a\u672a\u5206\u914d\u7684\u865a\u62df\u5185\u5b58.  </li> <li><code>mem_sbrk</code>\u79fb\u52a8<code>mem_brk</code>\u6307\u9488\u6765\u8c03\u6574\u5806\u5185\u5b58.  </li> <li> <p>\u6211\u4eec\u8fd8\u5f15\u7528\u4e86\u53e6\u4e00\u4e2a\u6e90\u6587\u4ef6\u4e2d\u7684\u51fd\u6570:  </p> <p><pre><code>extern int mm_init(void);\nextern void *mm_malloc(size_t size);\nextern void mm_free(void *ptr);\n</code></pre> \u5176\u4e2d<code>mm_malloc</code>\u548c<code>mm_free</code>\u51fd\u6570\u4e0e\u5b83\u4eec\u5bf9\u5e94\u7684\u7cfb\u7edf\u51fd\u6570\u6709\u76f8\u540c\u7684\u63a5\u53e3\u548c\u8bed\u4e49. <code>mm_init</code>\u521d\u59cb\u5316\u5206\u914d\u5668, \u6210\u529f\u5c31\u8fd4\u56de 0 \u5426\u5219 -1. \u7b2c\u4e00\u4e2a\u5b57\u662f\u53cc\u5b57\u8fb9\u754c\u5bf9\u9f50\u7684\u4e0d\u4f7f\u7528\u7684\u586b\u5145\u5b57. \u7136\u540e\u662f\u4e00\u4e2a 8 \u5b57\u8282\u7684\u5df2\u5206\u914d\u5757(\u4e5f\u53eb\u5e8f\u8a00\u5757(prologue block)), \u53ea\u5305\u62ec\u5934\u90e8\u548c\u5c3e\u90e8, \u4e14\u6c38\u4e0d\u91ca\u653e. \u5e8f\u8a00\u5757\u540e\u7d27\u8ddf\u7684\u662f 0 \u6216\u8005\u591a\u4e2a\u8c03\u7528\u521b\u5efa\u7684\u666e\u901a\u5757. \u6700\u540e\u662f\u4ee5\u4e00\u4e2a\u7279\u6b8a\u7684\u7ed3\u5c3e\u5757(epilogue block) \u7ed3\u675f, \u8fd9\u4e2a\u5757\u5927\u5c0f\u4e3a 0, \u53ea\u7531\u4e00\u4e2a\u5934\u90e8\u7ec4\u6210. \u5e8f\u8a00\u5757\u548c\u7ed3\u5c3e\u5757\u662f\u4e00\u79cd\u6d88\u9664\u5408\u5e76\u65f6\u8fb9\u754c\u6761\u4ef6\u7684\u6280\u5de7. \u4e00\u4e2a<code>heap_listp</code>\u6307\u5411\u5e8f\u8a00\u5757. (\u6216\u8005\u5e8f\u8a00\u5757\u7684\u4e0b\u4e00\u4e2a\u5757)</p> </li> </ul> <p></p>"},{"location":"CSAPP/9/#_26","title":"\u64cd\u4f5c\u7a7a\u95f2\u94fe\u8868\u7684\u57fa\u672c\u5e38\u6570\u548c\u5b8f","text":"<ul> <li><code>PACK</code>\u5c06\u5927\u5c0f\u548c\u5df2\u5206\u914d\u4f4d\u7ed3\u5408\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c, \u53ef\u5b58\u653e\u5230\u5934\u90e8\u6216\u8005\u5c3e\u90e8. </li> <li><code>GET</code>\u548c<code>PUT</code>\u8868\u793a\u5728\u5730\u5740 p \u5904\u8bfb\u5199\u4e00\u4e2a\u5b57. \u6ce8\u610f\u8fd9\u91cc\u9700\u8981\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362, \u5426\u5219 void * \u65e0\u6cd5\u95f4\u63a5\u5f15\u7528.  </li> <li><code>GET_SIZE</code>\u548c<code>GET_ALLOC</code>\u8868\u793a\u4ece\u5730\u5740 p \u5904\u83b7\u5f97\u5757\u5927\u5c0f\u548c\u662f\u5426\u5206\u914d.  </li> <li><code>HDRP</code>\u548c<code>FTRP</code>\u662f\u8f93\u5165(bp)\u6307\u5411\u7b2c\u4e00\u4e2a\u6709\u6548\u8f7d\u8377\u5b57\u8282\u7684\u5757\u6307\u9488(Block Pointer), \u7528\u6765\u83b7\u5f97\u5757\u5934\u90e8\u548c\u811a\u90e8.  </li> <li><code>NEXT_BLKP</code>\u548c<code>PREV_BLKP</code>\u7528\u6765\u83b7\u5f97\u4e0b\u4e00\u4e2a\u548c\u524d\u4e00\u4e2a\u5757\u7684\u5757\u6307\u9488(bp).  </li> </ul>"},{"location":"CSAPP/9/#_27","title":"\u521b\u5efa\u521d\u59cb\u7a7a\u95f2\u94fe\u8868","text":"<p>\u9996\u5148\uff0c\u6700\u5c0f\u7684\u9690\u5f0f\u7a7a\u95f2\u94fe\u8868\u9700\u8981\u5305\u542b\u4e00\u4e2a\u5b57\u7528\u4e8e\u5bf9\u9f50\uff0c\u4ee5\u53ca\u4e24\u4e2a\u5b57\u7684\u5e8f\u8a00\u5757\u548c\u4e00\u4e2a\u5b57\u7684\u7ed3\u5c3e\u5757\uff0c\u6240\u4ee5\u9996\u5148\u4f7f\u7528<code>mem_sbrk</code>\u7533\u8bf7 4 \u4e2a\u5b57\u7684\u5806\u5185\u5b58. \u7136\u540e\u6839\u636e\u8981\u6c42\u586b\u5145\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8ba9<code>heap_listp</code>\u6307\u5411\u5e8f\u8a00\u5757\u811a\u90e8\u7684\u8d77\u59cb\u5730\u5740\u3002\u521d\u59cb\u5b8c\u540e\uff0c\u7531\u4e8e\u662f\u7a7a\u7684\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8c03\u7528<code>extend_heap</code>\u51fd\u6570\u6765\u7533\u8bf7<code>CHUNKSIZE</code>\u5b57\u8282. </p> <p><code>extend_heap</code>\u51fd\u6570\u4f1a\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u88ab\u8c03\u7528: \u5806\u88ab\u521d\u59cb\u5316\u65f6; <code>mm_malloc</code>\u4e0d\u80fd\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u5339\u914d\u5757\u65f6. \u4e3a\u4e86\u4fdd\u6301\u5bf9\u9f50\u5c06 size \u5927\u5c0f\u5411\u4e0a\u820d\u5165\u4e3a\u6700\u63a5\u8fd1 2 \u5b57\u7684\u500d\u6570. \u6ce8\u610f\uff1a\u5728\u7b2c 8 \u884c\u7533\u8bf7 size \u4e2a\u5b57\u8282\u540e\uff0cbp \u6307\u5411\u7684\u662f\u7ed3\u5c3e\u5757\u7684\u4e0b\u4e00\u4e2a\u5b57(\u56e0\u4e3a<code>mem_brk</code>\u4e0d\u653e\u5143\u7d20)\uff0c\u6240\u4ee5\u5728\u7b2c 12 \u884c\u8bbe\u7f6e\u7a7a\u95f2\u5757\u5934\u90e8\u65f6\uff0c\u6839\u636e<code>PUT</code>\u5b9a\u4e49\uff0c\u53ef\u77e5\u8fd9\u91cc\u65b0\u7533\u8bf7\u7684\u7a7a\u95f2\u5757\u8986\u76d6\u4e86\u4e4b\u524d\u7684\u7ed3\u5c3e\u5757\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e86\u81ea\u5df1\u7684\u5934\u90e8\u5b57\uff0c\u7136\u540e\u5728\u8bbe\u7f6e\u811a\u90e8\u65f6\uff0c\u7559\u4e0b\u4e86\u4e00\u4e2a\u5b57\u7528\u6765\u4f5c\u4e3a\u65b0\u7684\u7ed3\u5c3e\u5757.  </p> <p>\u6700\u540e\u5c1d\u8bd5\u5408\u5e76\u524d\u9762\u7684\u7a7a\u95f2\u5757.  </p>"},{"location":"CSAPP/9/#_28","title":"\u91ca\u653e\u548c\u5408\u5e76\u5757","text":"<p>\u6211\u4eec\u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0: \u6211\u4eec\u5c06\u5e8f\u8a00\u5757\u548c\u7ed3\u5c3e\u5757\u90fd\u6807\u8bb0\u4e3a\u5df2\u5206\u914d, \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5904\u7406\u8fb9\u754c\u60c5\u51b5.  </p>"},{"location":"CSAPP/9/#_29","title":"\u5206\u914d\u5757","text":"<p>\u9996\u5148\u5b57\u8282\u6570 size \u4f20\u8fdb\u6765\u540e\uff0c\u4f1a\u73b0\u5728\u7b2c 12 \u884c\u5230 14 \u884c\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42\uff0c\u7136\u540e\u5f97\u5230\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42\u7684\u5b57\u8282\u6570 asize\u3002\u7136\u540e\u5c1d\u8bd5\u5bfb\u627e\u5408\u9002\u7684\u7a7a\u95f2\u5757\u8fdb\u884c\u5206\u914d\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757\uff0c\u5c31\u9700\u8981\u5411\u5185\u6838\u518d\u7533\u8bf7\u5806\u5185\u5b58\u7a7a\u95f4\uff0c\u518d\u5c1d\u8bd5\u5206\u914d.   </p>"},{"location":"CSAPP/9/#_30","title":"\u663e\u5f0f\u7a7a\u95f2\u94fe\u8868","text":"<p>\u5806\u53ef\u4ee5\u7ec4\u7ec7\u6210\u4e00\u4e2a\u53cc\u5411\u7a7a\u95f2\u94fe\u8868, \u6bcf\u4e2a\u7a7a\u95f2\u5757\u91cc\u90fd\u5305\u542b\u4e00\u4e2a pred(\u524d\u9a71) \u548c succ(\u540e\u7ee7)\u6307\u9488. </p> <p>\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u9996\u6b21\u9002\u914d\u7684\u5206\u914d\u65f6\u95f4\u4ece\u5757\u603b\u6570\u7684\u7ebf\u6027\u65f6\u95f4\u51cf\u5c11\u5230\u7a7a\u95f2\u5757\u6570\u91cf\u7684\u7ebf\u6027\u65f6\u95f4, \u4e0d\u8fc7\u91ca\u653e\u4e00\u4e2a\u5757\u7684\u65f6\u95f4\u662f\u53d6\u51b3\u4e8e\u6392\u5e8f\u7b56\u7565:  </p> <ul> <li>\u540e\u8fdb\u5148\u51fa(LIFO): \u5c06\u65b0\u91ca\u653e\u7684\u5757\u653e\u5728\u94fe\u8868\u5f00\u59cb\u5904. \u8fd9\u6837\u91ca\u653e\u4e00\u4e2a\u5757\u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u5b8c\u6210, \u5982\u679c\u4f7f\u7528\u8fb9\u754c\u6807\u8bb0\u90a3\u4e48\u5408\u5e76\u4e5f\u662f\u5e38\u6570\u65f6\u95f4. \u5f53\u6211\u4eec\u4f7f\u7528\u9996\u6b21\u9002\u914d\u7684\u653e\u7f6e\u7b56\u7565\u65f6, \u5206\u914d\u5668\u4f1a\u6700\u5148\u68c0\u67e5\u4f7f\u7528\u8fc7\u7684\u5757.  </li> <li>\u5730\u5740\u987a\u5e8f: \u94fe\u8868\u6bcf\u4e2a\u5757\u7684\u5730\u5740\u90fd\u5c0f\u4e8e\u540e\u7ee7\u7684\u5730\u5740. \u8fd9\u79cd\u60c5\u51b5\u4e0b\u91ca\u653e\u4e00\u4e2a\u5757\u9700\u8981\u7ebf\u6027\u65f6\u95f4\u6765\u641c\u7d22\u5b9a\u4f4d\u5408\u9002\u7684\u524d\u9a71, \u4f46\u53ef\u4ee5\u6709\u66f4\u9ad8\u7684\u5185\u5b58\u5229\u7528\u7387.  </li> </ul>"},{"location":"CSAPP/9/#_31","title":"\u5206\u79bb\u7684\u7a7a\u95f2\u94fe\u8868","text":"<p>\u5206\u79bb\u5b58\u50a8(segregated storage) \u7ef4\u62a4\u591a\u4e2a\u7a7a\u95f2\u94fe\u8868, \u5176\u4e2d\u6bcf\u4e2a\u94fe\u8868\u4e2d\u7684\u5757\u6709\u5927\u81f4\u76f8\u7b49\u7684\u5927\u5c0f. \u4e00\u822c\u601d\u8def\u662f\u5c06\u6240\u6709\u53ef\u80fd\u7684\u5757\u5927\u5c0f\u5212\u5206\u4e3a\u7b49\u4ef7\u7c7b, \u4e5f\u53eb\u5927\u5c0f\u7c7b(size class), \u6bd4\u5982\u53ef\u4ee5\u6839\u636e 2 \u7684\u5e42\u6b21\u6765\u5212\u5206\u5757\u5927\u5c0f. \\(\\{1\\}, \\{2\\}, \\{3,4\\}, \\ldots, \\{5,6,7, 8\\}\\) \u5206\u914d\u5668\u7ef4\u62a4\u4e00\u4e2a\u7a7a\u95f2\u94fe\u8868\u6570\u7ec4, \u6bcf\u4e2a\u5927\u5c0f\u7c7b\u4e00\u4e2a\u7a7a\u95f2\u94fe\u8868, \u6309\u7167\u5927\u5c0f\u5347\u5e8f\u6392\u5217. \u5f53\u5206\u914d\u5668\u9700\u8981\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u5757\u65f6, \u5c31\u641c\u7d22\u76f8\u5e94\u7684\u7a7a\u95f2\u94fe\u8868. \u5982\u679c\u4e0d\u80fd\u627e\u5230\u5408\u9002\u7684\u5757\u5bf9\u5e94\u5c31\u641c\u7d22\u4e0b\u4e00\u4e2a\u94fe\u8868.  </p>"},{"location":"CSAPP/9/#_32","title":"\u7b80\u5355\u5206\u79bb\u5b58\u50a8","text":"<p>\u6bcf\u4e2a\u5927\u5c0f\u7c7b\u7684\u7a7a\u95f2\u94fe\u8868\u5305\u542b\u5927\u5c0f\u76f8\u7b49\u7684\u5757, \u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\u5c31\u662f\u8fd9\u4e2a\u5927\u5c0f\u7c7b\u4e2d\u6700\u5927\u5143\u7d20\u7684\u5927\u5c0f.  \u4e3a\u4e86\u5206\u914d\u4e00\u4e2a\u7ed9\u5b9a\u5927\u5c0f\u7684\u5757, \u6211\u4eec\u4f1a\u68c0\u67e5\u76f8\u5e94\u7684\u7a7a\u95f2\u94fe\u8868. \u5982\u679c\u94fe\u8868\u975e\u7a7a, \u6211\u4eec\u7b80\u5355\u5730\u5206\u914d\u5176\u4e2d\u7b2c\u4e00\u5757\u7684\u5168\u90e8. \u7a7a\u95f2\u5757\u662f\u4e0d\u4f1a\u5206\u5272\u4ee5\u6ee1\u8db3\u5206\u914d\u8bf7\u6c42\u7684. \u5982\u679c\u94fe\u8868\u4e3a\u7a7a, \u5206\u914d\u5668\u5c31\u5411\u64cd\u4f5c\u7cfb\u7edf\u8bf7\u6c42\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u989d\u5916\u5185\u5b58\u7247(\u901a\u5e38\u662f\u9875\u5927\u5c0f\u7684\u6574\u6570\u500d), \u5c06\u8fd9\u4e2a\u7247\u5206\u6210\u5927\u5c0f\u76f8\u7b49\u7684\u5757, \u5e76\u5c06\u8fd9\u4e9b\u5757\u8fde\u63a5\u8d77\u6765\u5f62\u6210\u65b0\u7684\u7a7a\u95f2\u94fe\u8868. \u8981\u91ca\u653e\u4e00\u4e2a\u5757, \u5206\u914d\u5668\u53ea\u8981\u7b80\u5355\u5730\u5c06\u8fd9\u4e2a\u5757\u63d2\u5165\u5230\u76f8\u5e94\u7684\u7a7a\u95f2\u94fe\u8868\u7684\u524d\u90e8.  </p> <ul> <li>\u4f18\u70b9: \u5206\u914d\u548c\u91ca\u653e\u5757\u90fd\u662f\u5e38\u6570\u65f6\u95f4\uff0c\u4e0d\u5206\u5272\uff0c\u4e0d\u5408\u5e76\uff0c\u5df2\u5206\u914d\u5757\u4e0d\u9700\u8981\u5934\u90e8\u548c\u811a\u90e8\uff0c\u7a7a\u95f2\u94fe\u8868\u53ea\u9700\u662f\u5355\u5411\u7684\uff0c\u56e0\u6b64\u6700\u5c0f\u5757\u4e3a\u5355\u5b57\u5927\u5c0f.   </li> <li>\u7f3a\u70b9: \u7531\u4e8e\u4f7f\u7528\u5206\u5272\u548c\u5408\u5e76\uff0c\u6240\u4ee5\u4f1a\u6709\u5927\u91cf\u7684\u5185\u90e8\u548c\u5916\u90e8\u788e\u7247.   </li> </ul>"},{"location":"CSAPP/9/#_33","title":"\u5206\u79bb\u9002\u914d","text":"<p>\u5206\u914d\u5668\u7ef4\u62a4\u4e00\u4e2a\u7a7a\u95f2\u94fe\u8868\u7684\u6570\u7ec4, \u6bcf\u4e2a\u7a7a\u95f2\u94fe\u8868\u662f\u548c\u4e00\u4e2a\u5927\u5c0f\u7c7b\u76f8\u5173\u8054\u7684, \u5e76\u88ab\u7ec4\u7ec7\u6210\u67d0\u79cd\u7c7b\u578b\u7684\u663e\u5f0f\u6216\u9690\u5f0f\u94fe\u8868. \u5206\u914d\u5757\u65f6\uff0c\u786e\u5b9a\u8bf7\u6c42\u7684\u5927\u5c0f\u7c7b\uff0c\u5bf9\u9002\u5f53\u7684\u7a7a\u95f2\u94fe\u8868\u505a\u9996\u6b21\u9002\u914d\uff0c\u5982\u679c\u627e\u5230\u5408\u9002\u7684\u5757\uff0c\u53ef\u4ee5\u5206\u5272\u5b83\uff0c\u5c06\u5269\u4f59\u7684\u90e8\u5206\u63d2\u5165\u9002\u5f53\u7684\u7a7a\u95f2\u94fe\u8868\u4e2d\uff1b\u5982\u679c\u6ca1\u627e\u5230\u5408\u9002\u7684\u5757\uff0c\u67e5\u627e\u66f4\u5927\u7684\u5927\u5c0f\u7c7b\u7684\u7a7a\u95f2\u94fe\u8868\u3002\u5982\u679c\u6ca1\u6709\u5408\u9002\u7684\u5757\uff0c\u5c31\u5411\u5185\u6838\u8bf7\u6c42\u989d\u5916\u7684\u5806\u5185\u5b58\uff0c\u4ece\u8fd9\u5806\u5185\u5b58\u4e2d\u5206\u5272\u51fa\u5408\u9002\u7684\u5757\uff0c\u7136\u540e\u5c06\u5269\u4f59\u90e8\u5206\u653e\u5230\u5408\u9002\u7684\u5927\u5c0f\u7c7b\u4e2d\u3002\u6bcf\u91ca\u653e\u4e00\u4e2a\u5757\u65f6\uff0c\u5c31\u8fdb\u884c\u5408\u5e76\uff0c\u5e76\u5c06\u5176\u653e\u5230\u5408\u9002\u7684\u5927\u5c0f\u7c7b\u4e2d.  </p> <p>\u5982 GNU malloc \u5305\u5c31\u662f\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5. \u8fd9\u79cd\u65b9\u6cd5\u65e2\u5feb\u3001\u5229\u7528\u7387\u4e5f\u9ad8.  </p>"},{"location":"CSAPP/9/#_34","title":"\u4f19\u4f34\u7cfb\u7edf","text":"<p>\u4f19\u4f34\u7cfb\u7edf(buddy system) \u662f\u5206\u79bb\u9002\u914d\u7684\u4e00\u79cd\u7279\u4f8b, \u5176\u4e2d\u6bcf\u4e2a\u5927\u5c0f\u7c7b\u90fd\u662f 2 \u7684\u5e42. \u57fa\u672c\u601d\u60f3\u662f\u5047\u8bbe\u5806\u7684\u5927\u5c0f\u662f \\(2^m\\) \u4e2a\u5b57, \u6211\u4eec\u4e3a\u6bcf\u4e2a\u5757\u5927\u5c0f \\(2^k\\) \u7ef4\u62a4\u4e00\u4e2a\u5206\u79bb\u7a7a\u95f2\u94fe\u8868. \u8bf7\u6c42\u5757\u5927\u5c0f\u5411\u4e0a\u820d\u5165\u5230\u6700\u63a5\u8fd1 2 \u7684\u5e42. \u4e3a\u4e86\u5206\u914d\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(2^k\\) \u7684\u5757, \u6211\u4eec\u627e\u5230\u7b2c\u4e00\u4e2a\u53ef\u7528\u7684 \\(2^j, k&lt;=j&lt;=m\\) \u7684\u5757. \u5982\u679c \\(j=k\\) \u90a3\u4e48\u5206\u914d\u5b8c\u6210, \u5426\u5219\u6211\u4eec\u9012\u5f52\u5730\u4e8c\u5206\u8fd9\u4e2a\u5757\u76f4\u5230 \\(j=k\\). \u5f53\u6211\u4eec\u8fdb\u884c\u8fd9\u6837\u7684\u5206\u5272\u65f6, \u6bcf\u4e2a\u5269\u4e0b\u7684\u534a\u5757(\u4e5f\u53eb\u4f19\u4f34)\u88ab\u653e\u7f6e\u5728\u76f8\u5e94\u7684\u7a7a\u95f2\u94fe\u8868\u4e2d.  </p> <p>\u4e00\u4e2a\u5173\u952e\u4e8b\u5b9e\u662f, \u7ed9\u5b9a\u5730\u5740\u548c\u5757\u7684\u5927\u5c0f, \u5f88\u5bb9\u6613\u8ba1\u7b97\u51fa\u4ed6\u4f19\u4f34\u7684\u5730\u5740. \u5982 \\(xxx\\ldots x00000\\) \u548c \\(xxx\\ldots x10000\\) \u4e92\u4e3a\u4f19\u4f34. \u4e00\u4e2a\u5757\u7684\u5730\u5740\u548c\u5b83\u7684\u4f19\u4f34\u7684\u5730\u5740\u53ea\u6709\u4e00\u4f4d\u4e0d\u76f8\u540c.  </p>"},{"location":"CSAPP/9/#_35","title":"\u5783\u573e\u6536\u96c6","text":"<p>\u5783\u573e\u6536\u96c6\u5668(garbage collector) \u662f\u4e00\u79cd\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668, \u81ea\u52a8\u91ca\u653e\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u7684\u5df2\u5206\u914d\u5757, \u8fd9\u4e9b\u5757\u79f0\u4e3a\u5783\u573e.  </p> <p>\u5783\u573e\u5904\u7406\u5668\u5c06\u5185\u5b58\u770b\u4f5c\u4e00\u5f20\u6709\u5411\u53ef\u8fbe\u56fe(reachability graph).  </p> <ul> <li>\u6bcf\u4e2a\u5806\u8282\u70b9\u5bf9\u5e94\u5806\u4e2d\u7684\u4e00\u4e2a\u5df2\u5206\u914d\u5757. </li> <li>\u6709\u5411\u8fb9 \\(p\\rightarrow q\\) \u610f\u5473\u7740\u5757 p \u4e2d\u67d0\u4e2a\u4f4d\u7f6e\u6307\u5411\u5757 q \u4e2d\u67d0\u4e2a\u4f4d\u7f6e. </li> <li>\u6839\u8282\u70b9\u5bf9\u5e94\u4e00\u79cd\u4e0d\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e, \u5305\u542b\u6307\u5411\u5806\u4e2d\u7684\u6307\u9488. \u5982\u5bc4\u5b58\u5668\u7684\u53d8\u91cf, \u865a\u62df\u5185\u5b58\u4e2d\u8bfb\u5199\u533a\u57df\u7684\u5168\u5c40\u53d8\u91cf\u7b49.  </li> </ul> <p>\u5f53\u5b58\u5728\u4e00\u6761\u4ece\u4efb\u610f\u6839\u8282\u70b9\u51fa\u53d1\u5230\u8fbe p \u7684\u6709\u5411\u8def\u5f84\u65f6, \u6211\u4eec\u8bf4 p \u662f\u53ef\u8fbe\u7684. \u4e0d\u53ef\u8fbe\u8282\u70b9\u5bf9\u5e94\u4e8e\u5783\u573e, \u4e0d\u80fd\u88ab\u518d\u6b21\u5e94\u7528\u548c\u4f7f\u7528. \u5783\u573e\u5904\u7406\u5668\u5c31\u662f\u7ef4\u62a4\u53ef\u8fbe\u56fe\u7684\u67d0\u79cd\u8868\u793a, \u5e76\u901a\u8fc7\u91ca\u653e\u4e0d\u53ef\u8fbe\u8282\u70b9\u5e76\u628a\u5b83\u4eec\u8fd4\u56de\u7ed9\u7a7a\u95f2\u94fe\u8868\u6765\u5b9a\u671f\u56de\u6536\u5b83\u4eec. </p> <p>\u5bf9\u4e8e\u50cf ML \u548c Java \u8bed\u8a00\uff0c\u5176\u5bf9\u6307\u9488\u521b\u5efa\u548c\u4f7f\u7528\u6709\u4e25\u683c\u7684\u8981\u6c42\uff0c\u7531\u6b64\u6765\u6784\u5efa\u5341\u5206\u7cbe\u786e\u7684\u53ef\u8fbe\u56fe\uff0c\u6240\u4ee5\u80fd\u56de\u6536\u6240\u6709\u5783\u573e. \u800c\u5bf9\u4e8e\u50cf C \u548c C++ \u8fd9\u6837\u7684\u8bed\u8a00\uff0c\u5783\u573e\u6536\u96c6\u5668\u65e0\u6cd5\u7ef4\u62a4\u5341\u5206\u7cbe\u786e\u7684\u53ef\u8fbe\u56fe\uff0c\u53ea\u80fd\u6b63\u786e\u5730\u6807\u8bb0\u6240\u6709\u53ef\u8fbe\u8282\u70b9\uff0c\u800c\u6709\u4e00\u4e9b\u4e0d\u53ef\u8fbe\u8282\u70b9\u4f1a\u88ab\u9519\u8bef\u5730\u6807\u8bb0\u4e3a\u53ef\u8fbe\u7684\uff0c\u6240\u4ee5\u4f1a\u9057\u7559\u90e8\u5206\u5783\u573e\uff0c\u8fd9\u79cd\u5783\u573e\u6536\u96c6\u5668\u79f0\u4e3a\u4fdd\u5b88\u7684\u5783\u573e\u6536\u96c6\u5668(Conservative Garbage Collector).   </p> <p>\u5728C\u4e2d\u4f7f\u7528\u5783\u573e\u6536\u96c6\u5668</p> <p>\u5c06\u5176\u96c6\u6210\u5230<code>malloc</code>\u51fd\u6570\u4e2d. \u5f53\u5f15\u7528\u8c03\u7528<code>malloc</code>\u51fd\u6570\u6765\u5206\u914d\u5757\u65f6\uff0c\u5982\u679c\u65e0\u6cd5\u627e\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757\uff0c\u5c31\u4f1a\u8c03\u7528\u5783\u573e\u6536\u96c6\u5668\u6765\u8bc6\u522b\u51fa\u6240\u6709\u5783\u573e\uff0c\u5e76\u8c03\u7528<code>free</code>\u51fd\u6570\u6765\u8fdb\u884c\u91ca\u653e\u3002</p>"},{"location":"CSAPP/9/#mark-sweep","title":"Mark &amp; Sweep \u5783\u573e\u6536\u96c6\u5668","text":"<p>Mark&amp;Sweep\u5783\u573e\u6536\u96c6\u5668\u7531\u4e24\u4e2a\u9636\u6bb5\u7ec4\u6210:  </p> <ul> <li>\u6807\u8bb0\u9636\u6bb5: \u6807\u8bb0\u51fa\u6839\u8282\u70b9\u7684\u6240\u6709\u5df2\u8fbe\u548c\u5df2\u5206\u914d\u7684\u540e\u7ee7  </li> <li>\u6e05\u7406\u9636\u6bb5: \u91ca\u653e\u6bcf\u4e2a\u672a\u88ab\u6807\u8bb0\u7684\u5df2\u5206\u914d\u5757. \u5757\u5934\u90e8\u4e2d\u7a7a\u95f2\u7684\u4f4e\u4f4d\u4e2d\u7684\u4e00\u4f4d\u8868\u793a\u8fd9\u4e2a\u5757\u662f\u5426\u88ab\u6807\u8bb0\u4e86.  </li> </ul> <p>\u6211\u4eec\u5c06\u4f7f\u7528\u4e0b\u9762\u51fd\u6570:  </p> <ul> <li><code>ptr isPtr(ptr p)</code>: \u5982\u679c p \u6307\u5411\u4e00\u4e2a\u5df2\u5206\u914d\u5757\u4e2d\u7684\u67d0\u4e2a\u5b57, \u90a3\u4e48\u5c31\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\u7684\u6307\u9488 p, \u5426\u5219\u8fd4\u56de NULL.  </li> <li><code>int blockMarked(ptr b)</code>: \u5982\u679c\u5757 b \u5df2\u6807\u8bb0, \u8fd4\u56de true.  </li> <li><code>blockAllocated(ptr b)</code>: \u5982\u679c\u5757 b \u5df2\u5206\u914d, \u8fd4\u56de true.  </li> <li><code>void markBlock(ptr b)</code>: \u6807\u8bb0\u5757 b  </li> <li><code>int length(ptr b)</code>: \u8fd4\u56de\u5757 b \u4ee5\u5b57\u4e3a\u5355\u4f4d\u7684\u957f\u5ea6(\u4e0d\u542b\u5934\u90e8)    </li> <li><code>void unmarkBlock(ptr b)</code>: \u5c06\u5757 b \u7684\u72b6\u6001\u7531\u5df2\u6807\u8bb0\u6539\u4e3a\u672a\u6807\u8bb0   </li> <li><code>ptr nextBlock(ptr b)</code>: \u8fd4\u56de\u5806\u4e2d\u5757 b \u7684\u540e\u7ee7  </li> </ul> <p></p> <p></p>"},{"location":"CSAPP/9/#c-mark-sweep","title":"C \u7a0b\u5e8f\u4fdd\u5b88\u7684 Mark &amp; Sweep","text":"<p>C \u7a0b\u5e8f\u60f3\u8981\u4f7f\u7528 Mark&amp;Sweep \u5783\u573e\u6536\u96c6\u5668\uff0c\u5728\u5b9e\u73b0<code>isPtr</code>\u51fd\u6570\u65f6\u5177\u6709\u4e24\u4e2a\u56f0\u96be\uff1a</p> <ul> <li>\u8fdb\u5165<code>isPtr</code>\u51fd\u6570\u65f6\uff0c\u9996\u5148\u9700\u8981\u5224\u65ad\u8f93\u5165\u7684p\u662f\u5426\u4e3a\u6307\u9488\uff0c\u53ea\u6709 p \u4e3a\u6307\u9488\uff0c\u624d\u5224\u65ad p \u662f\u5426\u6307\u5411\u67d0\u4e2a\u5df2\u5206\u914d\u5757\u7684\u6709\u6548\u8f7d\u8377. \u4f46\u662f\u5728 C \u8bed\u8a00\u4e0d\u4f1a\u7528\u7c7b\u578b\u4fe1\u606f\u6765\u6807\u8bb0\u5185\u5b58\u4f4d\u7f6e\uff0c\u6bd4\u5982 int \u6216 float \u8fd9\u4e9b\u6807\u91cf\u5c31\u53ef\u80fd\u88ab\u4f2a\u88c5\u6210\u6307\u9488\uff0c\u6bd4\u5982 p \u5bf9\u5e94\u7684\u662f\u4e00\u4e2a int \u7c7b\u578b\u6570\u636e\uff0c\u4f46\u662f C \u8bef\u4ee5\u4e3a\u662f\u6307\u9488\uff0c\u800c\u5c06\u8be5\u6570\u636e\u4f5c\u4e3a\u6307\u9488\u53c8\u6b63\u597d\u6307\u5411\u67d0\u4e2a\u4e0d\u53ef\u8fbe\u7684\u5df2\u5206\u914d\u5757\u4e2d\uff0c\u5219\u5206\u914d\u5668\u4f1a\u8bef\u4ee5\u4e3a\u8be5\u5206\u914d\u5757\u65f6\u53ef\u8fbe\u7684\uff0c\u9020\u6210\u65e0\u6cd5\u5bf9\u8be5\u5783\u573e\u8fdb\u884c\u56de\u6536. \u8fd9\u4e5f\u662f C \u7a0b\u5e8f\u7684 Mark&amp;Sweep \u5783\u573e\u6536\u96c6\u5668\u5fc5\u987b\u662f\u4fdd\u5b88\u7684\u539f\u56e0.  </li> <li>\u5f53\u5224\u65ad p \u4e3a\u6307\u9488\u65f6\uff0c\u5982\u4f55\u786e\u5b9a\u5b83\u6240\u5728\u5757\u7684\u5934\u90e8. \u8fd9\u91cc\u53ef\u4ee5\u5c06\u5df2\u5206\u914d\u7684\u5757\u7ec4\u7ec7\u6210\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5f62\u5f0f\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u4fdd\u8bc1\u5de6\u5b50\u6811\u6240\u6709\u7684\u5757\u90fd\u5728\u8f83\u5c0f\u7684\u5730\u5740\u5904\uff0c\u53f3\u5b50\u6811\u6240\u6709\u7684\u5757\u90fd\u5728\u8f83\u5927\u7684\u5730\u5740\u5904. \u6b64\u65f6\u8f93\u5165\u4e00\u4e2a\u6307\u9488 p\uff0c\u4ece\u8be5\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u6839\u636e\u5757\u5934\u90e8\u7684\u5757\u5927\u5c0f\u5b57\u6bb5\u6765\u5224\u65ad\u6307\u9488\u662f\u5426\u6307\u5411\u8be5\u5757\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u6839\u636e\u5730\u5740\u5927\u5c0f\u53ef\u8df3\u8f6c\u5230\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u8fdb\u884c\u67e5\u627e.  </li> </ul>"},{"location":"CSAPP/9/#c","title":"C \u7a0b\u5e8f\u4e2d\u5e38\u89c1\u4e0e\u5185\u5b58\u6709\u5173\u7684\u9519\u8bef","text":""},{"location":"CSAPP/9/#_36","title":"\u95f4\u63a5\u5f15\u7528\u574f\u6307\u9488","text":"<p>\u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u6838\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a<code>vm_area_struct</code>\u6570\u636e\u7ed3\u6784\uff0c\u6765\u5c06\u865a\u62df\u5185\u5b58\u5212\u5206\u6210\u4e0d\u540c\u7684\u6bb5\uff0c\u8fd9\u4e5f\u9020\u6210\u865a\u62df\u5185\u5b58\u53ef\u80fd\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5bf9\u4e0d\u5904\u4e8e\u4efb\u4f55\u6bb5\u7684\u865a\u62df\u5185\u5b58\u8fdb\u884c\u5f15\u7528\u65f6\uff0c\u5185\u6838\u5c31\u4f1a\u53d1\u51fa\u6bb5\u5f02\u5e38\u7ec8\u6b62\u7a0b\u5e8f. \u5176\u6b21\uff0c\u4e0d\u540c\u6bb5\u9650\u5236\u4e86\u4e0d\u540c\u9875\u7684\u8bfb\u5199\u6743\u9650\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5bf9\u53ea\u8bfb\u865a\u62df\u9875\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u5185\u6838\u5c31\u4f1a\u53d1\u51fa\u4fdd\u62a4\u5f02\u5e38\u7ec8\u6b62\u7a0b\u5e8f.  \u5982 <code>scanf(\"%d, val\");</code> \u5982\u679c val \u5bf9\u5e94\u865a\u62df\u5185\u5b58\u67d0\u4e2a\u5408\u6cd5\u7684\u8bfb\u5199\u533a\u57df, \u6211\u4eec\u5c31\u8986\u76d6\u4e86\u8fd9\u5757\u5185\u5b58.  </p>"},{"location":"CSAPP/9/#_37","title":"\u8bfb\u672a\u521d\u59cb\u5316\u7684\u5185\u5b58","text":"<p>\u6211\u4eec\u5b9a\u4e49\u7684\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u5904\u4e8e<code>.bss</code>\u6bb5\u4e2d\uff0c\u8be5\u6bb5\u4f1a\u4e0e\u533f\u540d\u6587\u4ef6\u8fdb\u884c\u5173\u8054\uff0c\u4f7f\u5f97\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u90fd\u4e3a 0\u3002\u4f46\u662f\u4f7f\u7528<code>malloc</code>\u5206\u914d\u5806\u5185\u5b58\u65f6\uff0c\u53ea\u662f\u7b80\u5355\u7684\u4fee\u6539\u4e86 brk \u6307\u9488\uff0c\u5e76\u4e0d\u4f1a\u5bf9\u5df2\u5206\u914d\u7684\u5757\u8fdb\u884c\u4efb\u4f55\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u8981\u5bf9\u52a8\u6001\u5185\u5b58\u5206\u914d\u5f97\u5230\u7684\u5806\u5185\u5b58\u8fdb\u884c\u521d\u59cb\u5316.(<code>calloc</code>\u51fd\u6570\u4f1a\u8fdb\u884c\u521d\u59cb\u5316)</p>"},{"location":"CSAPP/9/#_38","title":"\u5141\u8bb8\u6808\u7f13\u51b2\u533a\u6ea2\u51fa","text":"<p>\u4e0d\u68c0\u67e5\u8f93\u5165\u4e32\u7684\u5927\u5c0f\u5c31\u5199\u5165\u6808\u4e2d\u7684\u76ee\u6807\u7f13\u51b2\u533a, \u5c31\u4f1a\u7531\u7f13\u51b2\u533a\u6ea2\u51fa\u9519\u8bef(buffer overflow bug). \u5982 <pre><code>void bufferoverflow()\n{\nchar buf[64];\ngets(buf);\nreturn;\n}\n</code></pre> \u6211\u4eec\u5e94\u8be5\u4f7f\u7528<code>fgets</code>\u51fd\u6570, \u9650\u5236\u8f93\u5165\u4e32\u7684\u5927\u5c0f.  </p>"},{"location":"CSAPP/9/#_39","title":"\u5047\u8bbe\u6307\u9488\u548c\u4ed6\u4eec\u6307\u5411\u7684\u5bf9\u8c61\u662f\u76f8\u540c\u5927\u5c0f","text":"<p><pre><code>int **makeArray1(int n, int m)\n{\nint i;\nint **A = (int *)malloc(n * sizeof(int));\nfor (i = 0; i &lt; n; i++)\nA[i] = (int *)malloc(m * sizeof(int));\nreturn A;\n}\n</code></pre> \u7b2c\u56db\u884c\u5e94\u8be5\u662f<code>sizeof(int *)</code>\u800c\u4e0d\u662f<code>sizeof(int)</code>.  </p>"},{"location":"CSAPP/9/#_40","title":"\u9519\u4f4d\u9519\u8bef","text":"<p><pre><code>int **makeArray1(int n, int m)\n{\nint i;\nint **A = (int *)malloc(n * sizeof(int *));\nfor (i = 0; i &lt;= n; i++)\nA[i] = (int *)malloc(m * sizeof(int));\nreturn A;\n}\n</code></pre> \u7b2c\u4e94\u884c\u591a\u521d\u59cb\u5316\u4e86\u4e00\u5143\u7d20. (0~n \u662f n+1 \u4e2a\u5143\u7d20, \u800c\u4e0d\u662f n \u4e2a)   </p>"},{"location":"CSAPP/9/#_41","title":"\u5f15\u7528\u6307\u9488\u800c\u4e0d\u662f\u5b83\u6307\u5411\u7684\u5bf9\u8c61","text":"<p><pre><code>int *binheapDelete(int **binheap, int *size)\n{\nint *packet = binheap[0];\nbinheap[0] = binheap[*size - 1];\n*size--;\nheapify(binheap, *size, 0);\nreturn(packet);\n}\n</code></pre> \u7b2c\u516d\u884c, \u4e00\u5143\u8fd0\u7b97\u7b26<code>--</code>\u548c<code>*</code>\u4f18\u5148\u7ea7\u76f8\u540c, \u4ece\u53f3\u5f80\u5de6\u7ed3\u5408. \u56e0\u6b64\u7b2c\u516d\u884c\u5b9e\u9645\u51cf\u5c11\u7684\u662f\u6307\u9488\u7684\u503c, \u800c\u4e0d\u662f\u5b83\u6307\u5411\u7684\u6574\u6570\u7684\u503c.  </p>"},{"location":"CSAPP/9/#_42","title":"\u8bef\u89e3\u6307\u9488\u8fd0\u7b97","text":"<p><pre><code>int *search(int *p, int val)\n{\nwhile (*p &amp;&amp; *p != val)\np += sizeof(int);\nreturn p;\n}\n</code></pre> \u6307\u9488\u7684\u7b97\u672f\u64cd\u4f5c\u662f\u4ee5\u5b83\u4eec\u6307\u5411\u7684\u5bf9\u8c61\u7684\u5927\u5c0f\u4e3a\u5355\u4f4d\u6765\u8fdb\u884c, \u800c\u4e0d\u662f\u5b57\u8282.  \u7b2c\u56db\u884c\u5e94\u4e3a<code>p++</code>.   </p>"},{"location":"CSAPP/9/#_43","title":"\u5f15\u7528\u4e0d\u5b58\u5728\u7684\u53d8\u91cf","text":"<p><pre><code>int *stackref()\n{\nint val;\nreturn &amp;val;\n}\n</code></pre> \u8fd9\u91cc\u8fd4\u56de\u7684\u6307\u9488, \u5c3d\u7ba1\u4ecd\u7136\u6307\u5411\u4e00\u4e2a\u5408\u6cd5\u7684\u5185\u5b58\u5730\u5740, \u4f46\u5df2\u7ecf\u4e0d\u518d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u53d8\u91cf\u4e86.(\u5c40\u90e8\u53d8\u91cf\u5728\u6808\u5e27\u4e2d, \u51fd\u6570\u7ed3\u675f\u6808\u6bc1\u706d\u4e86)    </p>"},{"location":"CSAPP/9/#_44","title":"\u5f15\u7528\u7a7a\u95f2\u5806\u5757\u4e2d\u7684\u6570\u636e","text":"<pre><code>int *heapref(int n, int m)\n{\nint i;\nint *x, *y;\nx = (int *)malloc(n * sizeof(int));\n...\nfree(x);\ny = (int *)malloc(n * sizeof(int));\nfor (i = 0; i &lt; m; i++)\ny[i] = x[i]++;\nreturn y;\n}\n</code></pre>"},{"location":"CSAPP/9/#_45","title":"\u5f15\u8d77\u5185\u5b58\u6cc4\u6f0f","text":"<p>\u7a0b\u5e8f\u5458\u5fd8\u8bb0\u91ca\u653e\u5df2\u5206\u914d\u5757, \u800c\u5728\u5806\u91cc\u521b\u5efa\u4e86\u5783\u573e, \u4f1a\u9010\u6e10\u5360\u7528\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u5185\u5b58. <pre><code>void leak(n)\n{\nint *x = (int *)malloc(n * sizeof(int));\nreturn;\n}\n</code></pre></p>"},{"location":"DB/","title":"\u6570\u636e\u5e93\u7cfb\u7edf","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u6570\u636e\u5e93\u7cfb\u7edf\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0  </p> <ul> <li>\u6559\u6750: Database System Concepts 7<sup>th</sup> </li> <li>\u8001\u5e08: \u5b59\u5efa\u4f36/TA: \u8042\u4fca\u54f2</li> </ul> \u6570\u636e\u5e93\u7cfb\u7edf Cheating Sheet by HobbitQia 3.1 MB / 2 P / 2023-06-20 <p> \u4e0b\u8f7d</p>"},{"location":"DB/db1/","title":"Introduction","text":"Abstract <ul> <li>Database Systems</li> <li>Database Applications</li> <li>Purpose of Database Systems</li> <li>View of Data</li> <li>Data Models</li> <li>Database Languages</li> <li>Database Design</li> <li>Database Engine</li> <li>Database Users and Administrators</li> <li>History of Database Systems</li> </ul>"},{"location":"DB/db1/#database-systems","title":"Database Systems","text":"<p>DBMS (Database Management System)</p>"},{"location":"DB/db1/#purpose-of-database-systems","title":"Purpose of Database Systems","text":"<p>Database systems offer solutions to all the below problems.  </p> <ul> <li>data redundancy (\u6570\u636e\u5197\u4f59) and inconsistency</li> <li>data isolation (\u6570\u636e\u5b64\u7acb\uff0c\u6570\u636e\u5b64\u5c9b)</li> <li>difficulty in accessing data</li> <li> <p>Integrity problems (\u5b8c\u6574\u6027\u95ee\u9898)</p> <ul> <li>\u5b8c\u6574\u7684\u7ea6\u675f\u6761\u4ef6\u88ab\u85cf\u5728\u6570\u636e\u548c\u4ee3\u7801\u4e2d\uff0c\u800c\u4e0d\u662f\u663e\u5f0f\u5730\u58f0\u660e\u3002 e.g. \"account balance \\(\\geq\\) 1\"</li> </ul> </li> <li> <p>Atomicity problems (\u539f\u5b50\u6027\u95ee\u9898)</p> <ul> <li>Failures may leave database in an inconsistent state with partial updates carried out e.g. \u4ece A \u8d26\u6237\u8f6c\u8d26\u5230 B, \u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1 A \u8f6c\u51fa B \u8f6c\u5165\u8fd9\u4e24\u4ef6\u4e8b\u540c\u65f6\u8fdb\u884c\uff0c\u4e0d\u80fd\u88ab\u6253\u65ad\u3002</li> </ul> </li> <li> <p>Concurrent access anomalies (\u5e76\u53d1\u8bbf\u95ee\u5f02\u5e38)</p> <ul> <li>Uncontrolled concurrent accesses can lead to inconsistencies  </li> </ul> Example <p> </p> </li> <li> <p>Security problems  </p> <ul> <li>Authentication (\u8ba4\u8bc1), Priviledge (\u6743\u9650), Audit (\u5ba1\u8ba1)</li> </ul> </li> </ul>"},{"location":"DB/db1/#characteristics-of-databases","title":"Characteristics of Databases","text":"<ul> <li>data persistence (\u6570\u636e\u6301\u4e45\u6027)</li> <li>convenience in accessing data (\u6570\u636e\u8bbf\u95ee\u4fbf\u5229\u6027)</li> <li>data integrity(\u6570\u636e\u5b8c\u6574\u6027)</li> <li>concurrency control for multiple user (\u591a\u7528\u6237\u5e76\u53d1\u63a7\u5236)</li> <li>failure recovery (\u6545\u969c\u6062\u590d)</li> <li>security control (\u5b89\u5168\u63a7\u5236)</li> </ul>"},{"location":"DB/db1/#view-of-data","title":"View of Data","text":"<p>Three-level abstraction of databases  </p> <ul> <li>physical level: \u7269\u7406\u4e2d\u5982\u4f55\u4fdd\u5b58\u3001\u5b9e\u73b0\uff08\u5982\u78c1\u76d8\uff09</li> <li>logical level: \u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u4ec0\u4e48\u6570\u636e\uff1f\u6570\u636e\u4e4b\u95f4\u7684\u5173\u7cfb\uff1f</li> <li>view level: \u4e0d\u540c\u4eba\u770b\u5230\u4e0d\u540c\u7684\u4ed6\u4eec\u6240\u9700\u8981\u7684\u6570\u636e</li> </ul> <p>Advantages:  </p> <ul> <li>Hide the complexities</li> <li>Enhance the adaptation to changes \u786c\u4ef6\u73af\u5883\u53d8\u5316 (physical level), \u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u903b\u8f91\u5173\u7cfb\u548c\u6620\u5c04\u6765\u9002\u5e94\u65b0\u7684\u786c\u4ef6\u73af\u5883\u3002   \u903b\u8f91\u73af\u5883\u53d8\u5316 (logic level), \u53ef\u4ee5\u901a\u8fc7 view \u548c logic \u7684\u6620\u5c04\u4f7f\u5f97 view \u5c3d\u91cf\u5c11\u53d8\u5316\u3002  </li> </ul>"},{"location":"DB/db1/#schema-and-instance","title":"Schema and Instance","text":"<p>Similar to types and variables in programming languages.  </p> <ul> <li>Schema (\u6a21\u5f0f)\u2013 the logical structure of the database (physical/logical)</li> <li>Instance (\u5b9e\u4f8b) \u2013 the actual content of the database at a particular point in time </li> </ul>"},{"location":"DB/db1/#data-independence","title":"Data Independence","text":"<ul> <li>Physical Data Independence (\u7269\u7406\u6570\u636e\u72ec\u7acb\u6027) \u2013 the ability to modify the physical schema without changing the logical schema</li> <li>Logical Data Independence (\u903b\u8f91\u6570\u636e\u72ec\u7acb\u6027) - the ability to modify the logical schema without changing the user view schema</li> </ul> <p>\u6620\u5c04\u4fee\u6539\uff0c\u4f46\u4e0d\u7528\u4fee\u6539 schema. </p>"},{"location":"DB/db1/#data-models","title":"Data Models","text":"<p>Data models is a collection of tools for describing data, data relationships, data semantics, data constraints.  </p> <ul> <li>Relational model(\u5173\u7cfb\u6a21\u578b) \uff08\u8868\u683c\uff09\u6570\u636e\u5e93\u7cfb\u7edf\u5c42\u9762</li> <li>Entity-Relationship(\u5b9e\u4f53-\u8054\u7cfb) data model  \u9700\u6c42\u5206\u6790\u5c42\u9762</li> <li>Object-based data models <ul> <li>Object-oriented  (\u9762\u5411\u5bf9\u8c61\u6570\u636e\u6a21\u578b)</li> <li>Object-relational (\u5bf9\u8c61-\u5173\u7cfb\u6a21\u578b\u6a21\u578b)</li> </ul> </li> <li>Semistructured data model  (XML)(\u534a\u7ed3\u6784\u5316\u6570\u636e\u6a21\u578b)</li> <li>Other older models:<ul> <li>Network model (\u7f51\u72b6\u6a21\u578b)</li> <li>Hierarchical model(\u5c42\u6b21\u6a21\u578b)</li> </ul> </li> </ul> <p>Relational Model</p> <p> </p> <p>12 tuples, 4 attributes. </p>"},{"location":"DB/db1/#datahase-languages","title":"Datahase Languages","text":""},{"location":"DB/db1/#data-definition-language-ddl","title":"Data Definition Language (DDL, \u6570\u636e\u5b9a\u4e49\u8bed\u8a00)","text":"Example <p>C \u8bed\u8a00\u91cc\u7684 struct \u7ecf\u8fc7\u7f16\u8bd1\u540e\u5168\u90e8\u53d8\u4e3a\u4e86\u4ee3\u7801\uff08\u6709\u4e00\u5f20\u7b26\u53f7\u8868\uff09\u4f46\u6570\u636e\u5e93\u91cc\u4e0d\u4f1a\u3002</p> <p>Data dictionary contains metadata (\u5143\u6570\u636e\uff0ci.e. data about data)</p> <ul> <li>DDL compiler generates a set of table templates stored in a data dictionary (\u6570\u636e\u5b57\u5178)</li> <li>Database schema </li> <li>Integrity constraints (\u5b8c\u6574\u6027\u7ea6\u675f)  Primary key (ID uniquely identifies instructors, \u4e3b\u952e) Referential integrity (references constraint in SQL, \u53c2\u7167\u5b8c\u6574\u6027) e.g. dept_name value in any instructor tuple must appear in department relation</li> <li>Authorization (\u6743\u9650)</li> </ul>"},{"location":"DB/db1/#data-manipulation-language-dml","title":"Data Manipulation Language (DML, \u6570\u636e\u64cd\u4f5c\u8bed\u8a00)","text":"<p>Two classes of languages </p> <ul> <li>Procedural (\u8fc7\u7a0b\u5f0f)\u2013 user specifies what data is required and how to get those data e.g. C</li> <li>Declarative (nonprocedural\uff0c\u9648\u8ff0\u5f0f\uff0c\u975e\u8fc7\u7a0b\u5f0f) \u2013 user specifies what data is required without specifying how to get those data e.g. SQL</li> </ul> <p>SQL is the most widely used query language</p>"},{"location":"DB/db1/#sql-query-language","title":"SQL Query Language","text":""},{"location":"DB/db1/#database-access-from-application-program","title":"Database Access from Application Program","text":"<p>\u6570\u636e\u5e93\u5fc5\u987b\u7531\u8fc7\u7a0b\u5f0f\u8bed\u8a00\u7f16\u5199\u3002</p> <p>Application programs generally access databases through one of * Language extensions to allow embedded SQL e.g. \u901a\u8fc7\u9884\u5904\u7406\u5668\uff0c\u5c06 select \u8bed\u53e5\u8bc6\u522b\u51fa\u6765\uff0c\u7ffb\u8bd1\u6210 C \u8bed\u8a00\u7684\u51fd\u6570\u8c03\u7528\u3002 * API (Application program interface) e.g. ODBC/JDBC which allow SQL queries to be sent to a database. </p>"},{"location":"DB/db1/#database-design","title":"Database Design","text":"<ul> <li> <p>Entity Relationship Model (\u5b9e\u4f53-\u8054\u7cfb\u6a21\u578b)  \u4e00\u5bf9\u4e00/\u4e00\u5bf9\u591a/\u591a\u5bf9\u4e00/\u591a\u5bf9\u591a  </p> <p> </p> </li> </ul> <p>\u56fe\u662f\u4e2d\u7acb\u7684\uff0c\u53ef\u4ee5\u7528\u5173\u7cfb\u6570\u636e\u5e93/\u9762\u5411\u5bf9\u8c61\u6570\u636e\u5e93\u5b9e\u73b0</p> <ul> <li> <p>Normalization Theory (\u89c4\u8303\u5316\u7406\u8bba) Formalize what designs are bad, and test for them  </p> <p>Example</p> <p> </p> <p>\u8fd9\u4e2a\u8868\u5b58\u5728\u5197\u4f59, department \u6709\u91cd\u590d\uff0c\u5e94\u8be5\u62c6\u5206\u4e3a\u4e24\u4e2a\u8868\uff08\u524d\u56db\u5217\u548c\u540e\u4e09\u5217\uff09</p> </li> </ul>"},{"location":"DB/db1/#database-enginee","title":"Database Enginee","text":"<ul> <li>The storage manager,</li> <li>The query processor component, </li> <li>The transaction management component.</li> </ul>"},{"location":"DB/db1/#storage-manager","title":"Storage Manager","text":"<p>\u4e3a\u4e86\u6570\u636e\u6301\u4e45\u5316\uff0c\u653e\u5728\u786c\u76d8\u91cc\uff0c\u4f46\u6570\u636e\u5904\u7406\u8981\u8fdb\u5165\u5185\u5b58\uff0c\u8fd9\u4e4b\u95f4\u5b58\u5728\u6570\u636e\u9e3f\u6c9f\u3002 \u6309\u5757\u8bbf\u95ee\u5185\u5b58 (4k/16k), \u7f13\u51b2\u7ba1\u7406\u3002</p> <ul> <li>File manager</li> <li>Buffer manager</li> <li>Authorization and integrity manager</li> <li>Transaction manager</li> </ul> <p>\u6570\u636e\u5e93\u91cc\u653e\u7684\u662f</p> <ul> <li>data files \u771f\u6b63\u7684\u6570\u636e</li> <li>data dictionary \u653e\u7684\u662f metadata</li> <li>statistical data \u7528\u4e8e\u6570\u636e\u5e93\u7684\u67e5\u8be2\u5904\u7406</li> <li>indices</li> </ul>"},{"location":"DB/db1/#query-processor","title":"Query Processor","text":"<p>The query processor components include:  </p> <ul> <li>DDL interpreter -- interprets DDL statements and records the definitions in the data dictionary.</li> <li>DML compiler -- translates DML statements in a query language into an evaluation plan consisting of low-level instructions that the query evaluation engine understands.<ul> <li>The DML compiler performs query optimization (\u67e5\u8be2\u4f18\u5316); that is, it picks the lowest cost evaluation plan from among the various alternatives.   \u6267\u884c\u8ba1\u5212\u4f1a\u6839\u636e\u7edf\u8ba1\u6570\u636e\u7684\u6539\u53d8\u800c\u6539\u53d8\u3002  </li> </ul> </li> <li>Query evaluation engine -- executes low-level instructions generated by the DML compiler.  </li> </ul> <ul> <li>Parsing and translation</li> <li>Optimization</li> <li>Evaluation</li> </ul>"},{"location":"DB/db1/#transaction-management","title":"Transaction Management (\u4e8b\u52a1\u7ba1\u7406)","text":"<p>\u94f6\u884c\u8f6c\u8d26\uff0cA \u8f6c\u8d26\u5230 B, A \u4f59\u989d\u51cf\u6389 B \u4f59\u989d\u52a0\u4e0a\u3002 \u8981\u6709\u9694\u79bb\u6027\uff0c\u5ef6\u8fdf\u5199\u56de</p> <ul> <li>Recover Manager  ensures that the database remains in a consistent (correct) state despite system failures (e.g. power failures and operating system crashes) and transaction failures. \u65e5\u5fd7\uff0c\u9632\u6b62\u5199\u56de\u6570\u636e\u5e93\u65f6\u51fa\u73b0\u65ad\u7535\u6216\u8005\u5d29\u6e83\u3002  </li> <li>Concurrency-control manager controls the interaction among the concurrent transactions, to ensure the consistency of the database.   </li> </ul>"},{"location":"DB/db1/#database-users","title":"Database Users","text":"<ul> <li>Database Administrator (DBA) \u6570\u636e\u5e93\u7ba1\u7406\u5458\uff0c\u8981\u505a\u5b9a\u4e49\u6a21\u5f0f\uff0c\u6570\u636e\u5e93\u8c03\u8c10\uff0c\u6545\u969c\u65f6\u6062\u590d\uff08\u5907\u4efd\uff09\u7b49\u5de5\u4f5c\u3002 \u8001\u5e08\uff1a\u6211\u4e0d\u770b\u597d\uff01  </li> </ul>"},{"location":"DB/db1/#history","title":"History","text":"<ul> <li>1973 Turing Award: Charles W. Bachman father of databases</li> <li>1981 Turing Award: Edgar F. Codd  </li> <li>1998 Turing Award: Jim Gray </li> <li>2014 Turing Award: Michael Stonebraker</li> </ul>"},{"location":"DB/db10/","title":"Indexing","text":""},{"location":"DB/db10/#basic-concepts","title":"Basic Concepts","text":"<p>Indexing mechanisms used to speed up access to desired data. \u7d22\u5f15\u7528\u6765\u52a0\u901f\u67e5\u627e\u3002  </p> <p>Search Key - attribute to set of attributes used to look up records in a file. An index file consists of records (called index entries) of the form. \u7d22\u5f15\u6587\u4ef6\u901a\u5e38\u662f\u6709\u987a\u5e8f\u7684</p>"},{"location":"DB/db10/#index-evaluation-metrics","title":"Index Evaluation Metrics","text":"<ul> <li>Access types supported efficiently<ul> <li>Point query: records with a specified value in the attribute. \u70b9\u67e5\u8be2</li> <li>Range query: records with an attribute value falling in a specified range of values. \u8303\u56f4\u67e5\u8be2</li> </ul> </li> <li>Access time</li> <li>Insertion time</li> <li>Deletion time</li> <li>Space overhead</li> </ul>"},{"location":"DB/db10/#ordered-indices","title":"Ordered Indices","text":"<ul> <li>Primary index\uff08\u4e3b\u7d22\u5f15\uff09: in a sequentially ordered file, the index whose search key specifies the sequential order of the file.  <ul> <li>Also called clustering index\uff08\u805a\u96c6\u7d22\u5f15\uff09</li> <li>The search key of a primary index is usually but not necessarily the primary key.</li> </ul> </li> <li>Secondary index\uff08\u8f85\u52a9\u7d22\u5f15\uff09: an index whose search key specifies an order different from the sequential order of the file.  Also called non-clustering index.</li> </ul> Example <p>\u4e3b\u7d22\u5f15\u548c\u6570\u636e\u5185\u7684\u987a\u5e8f\u662f\u4e00\u6837\u7684\u3002\u70b9\u67e5\u548c\u8303\u56f4\u67e5\u90fd\u662f\u6bd4\u8f83\u9ad8\u6548\u7684\u3002  </p> <p>\u5982\u679c key \u4e0d\u662f\u4e00\u4e2a\u4e3b\u952e\uff0c\u90a3\u53ef\u80fd\u4f1a\u5bf9\u5e94\u591a\u4e2a\u8bb0\u5f55\u3002</p> <p>Primary index \u662f\u5f88\u5b9d\u8d35\u7684\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u5176\u4ed6\u90fd\u662f\u8f85\u52a9\u7d22\u5f15\u3002    </p> <ul> <li>Dense index(\u7a20\u5bc6\u7d22\u5f15) \u2014 Index record appears for every search-key value in the file.  \u6240\u6709 search-key \u90fd\u8981\u51fa\u73b0\u5728\u7d22\u5f15\u6587\u4ef6\u91cc\u3002  </li> <li>Sparse Index\uff08\u7a00\u758f\u7d22\u5f15\uff09:  contains index records for only some search-key values.</li> </ul> Example <p> </p> <p>Good tradeoff: sparse index with an index entry for every block in file, corresponding to least search-key value in the block.</p>"},{"location":"DB/db10/#multilevel-index","title":"Multilevel Index","text":"<p>If primary index does not fit in memory, access becomes expensive. \u53ef\u4ee5\u5bf9\u7d22\u5f15\u6587\u4ef6\u672c\u8eab\u518d\u5efa\u7acb\u4e00\u6b21\u7d22\u5f15\u3002</p>"},{"location":"DB/db10/#b-tree-index","title":"B+-Tree Index","text":"<ul> <li>All paths from root to leaf are of the same length</li> <li>Inner node(not a root or a leaf): between \\(\\lceil n/2\\rceil\\) and \\(n\\) children.</li> <li>Leaf node: between \\(\\lceil (n\u20131)/2\\rceil\\) and \\(n\u20131\\) values</li> <li>Special cases: <ul> <li>If the root is not a leaf: at least 2 children.</li> <li>If the root is a leaf : between 0 and (n\u20131)values.</li> </ul> </li> </ul> <p>\u4e00\u822c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u5757\u7684\u5927\u5c0f, 4K. B+ \u6811\u7684\u53c9\u662f\u975e\u5e38\u5927\u7684\u3002</p>"},{"location":"DB/db10/#observations-about-b-trees","title":"Observations about B+-trees","text":"<p>Since the inter-node connections are done by pointers, \u201clogically\u201d close blocks need not be \u201cphysically\u201d close. \u5982\u679c\u6709\u5f88\u591a\u6587\u4ef6\u4e00\u6b21\u6027\u5efa\u7acb B+ \u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\u5efa\u7acb\u3002</p> <p>\u5982\u679c\u6709 K \u4e2a\u7d22\u5f15\u9879\uff0c\u5219\u6811\u9ad8\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 \\(\\lceil \\log_{\\lceil n/2 \\rceil}(K/2)\\rceil + 1\\). \u9ad8\u5ea6\u6700\u5c0f\u4e3a \\(\\log_n(K)\\)</p> <p>Examples of Insert on B+-Tree</p> <p> </p> <p>\u6ce8\u610f\u5185\u70b9\u7684 split \u548c\u53f6\u5b50\u7684\u4e0d\u4e00\u6837\u3002\u8981\u628a\u4e2d\u95f4\u7684\u8282\u70b9 move \u4e0a\u53bb\u3002</p> <p>Examples of Delete on B+-Tree</p> <p> </p> <p>\u4e2d\u95f4\u70b9\u5982\u679c\u4e0d\u591f\uff0c\u4ece\u53e6\u5916\u4e00\u8fb9\u501f\u4e00\u4e2a\u8fc7\u6765\u3002\u4f46\u662f\u4e0d\u80fd\u76f4\u63a5\u501f\uff0c\u9700\u8981\u628a\u5b83\u9876\u4e0a\u53bb\u3002  </p> <p>\u6ce8\u610f\u8003\u8651\u548c\u5144\u5f1f\u5408\u5e76\u3002</p>"},{"location":"DB/db10/#b-tree-height-and-size-estimation","title":"B+- tree : height and size estimation","text":"<p>\u5168\u6ee1\u7684\u65f6\u5019\u8282\u70b9\u6700\u5c11 \u6ce8\u610f\u8fd9\u91cc\u7684\u5411\u4e0a/\u5411\u4e0b\u53d6\u6574\u95ee\u9898 \u6d45\u5c42\u8282\u70b9\u4e2a\u6570\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u7b2c\u4e00\u5c42\u548c\u7b2c\u4e8c\u5c42\u7684\u8282\u70b9\u90fd\u653e\u5230\u5185\u5b58\u4e2d pin \u4f4f\u3002</p>"},{"location":"DB/db10/#b-tree-file-organization","title":"B+-Tree File Organization","text":"<p>\u6587\u4ef6\u7ec4\u7ec7 B+-Tree File Organization:</p> <ul> <li>Leaf nodes in a B+-tree file organization store records, instead of pointers \u53f6\u5b50\u8282\u70b9\u4e0d\u518d\u653e\u7d22\u5f15\u9879\uff0c\u653e\u8bb0\u5f55\u672c\u8eab\u3002 </li> <li>Helps keep data records clustered even when there are insertions/deletions/updates  </li> </ul> <p>\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u534a\u6ee1\u7684\u8981\u6c42\u4ee5\u63d0\u9ad8\u7a7a\u95f4\u5229\u7528\u7387\u3002</p>"},{"location":"DB/db10/#other-issues-in-indexing","title":"Other Issues in Indexing","text":"<ul> <li>Record relocation and secondary indices If a record moves, all secondary indices that store record pointers have to be updated  Node splits in B+-tree file organizations become very expensive Solution: use primary-index search key instead of record pointer in secondary index</li> <li>Variable length strings as keys Variable fanout  </li> <li>Prefix compression Key values at internal nodes can be prefixes of full key Keep enough characters to distinguish entries in the subtrees separated by the key value</li> </ul>"},{"location":"DB/db10/#multiple-key-access","title":"Multiple-Key Access","text":"<p>Composite search keys are search keys containing more than one attribute e.g. <code>(dept_name, salary)</code> </p> <p>Lexicographic ordering: \\((a_1, a_2) &lt; (b_1, b_2)\\) if either \\(a_1 &lt; b_1\\), or \\(a_1=b_1\\) and \\(a_2 &lt; b_2\\).  </p> <p>\u5355\u4e2a key, \u4e0d\u540c key \u4e4b\u95f4\u7ec4\u5408\u90fd\u53ef\u4ee5\u5efa\u7acb B+ \u6811\u3002\u8fd9\u6837\u4f1a\u6709\u5f88\u591a\u7ec4\u5408\uff0c\u53ef\u4ee5\u5728\u9891\u7e41\u51fa\u73b0\u7684\u67e5\u8be2\u5c5e\u6027\u4e0a\u5efa\u7acb B+ \u6811\u3002</p>"},{"location":"DB/db10/#non-unique-search-keys","title":"Non-unique Search Keys","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5728 B+ \u6811\u53f6\u5b50\u8282\u70b9\u4e0d\u76f4\u63a5\u6307\u5411\u78c1\u76d8\u91cc\u7684\u6570\u636e\uff0c\u800c\u662f\u6307\u5411\u4e00\u4e2a\u5757\u3002 \u4e5f\u53ef\u4ee5\u5728\u7d22\u5f15\u4e0a\u52a0\u4e0a\u53bb\u4e00\u4e2a\u7d22\u5f15\uff0c\u4f7f\u5b83\u5bf9\u5e94\u7684\u8bb0\u5f55\u552f\u4e00\u3002 \u53ef\u4ee5\u901a\u8fc7\u8303\u56f4\u67e5\u627e</p>"},{"location":"DB/db10/#bulk-loading-and-bottom-up-build","title":"Bulk Loading and Bottom-Up Build","text":"<p>Inserting entries one-at-a-time into a B+-tree requires \\(\\geq 1\\) IO per entry   </p> <p>\u5982\u679c\u6211\u4eec\u4e00\u6b21\u6027\u63d2\u5165\u5f88\u591a\u7d22\u5f15\u9879</p> <ul> <li>Efficient alternative 1: Insert in sorted order \u5c40\u90e8\u6027\u8f83\u597d\uff0c\u51cf\u5c11 I/O. </li> <li>Efficient alternative 2: Bottom-up B+-tree construction<ul> <li>First sort index entries </li> <li>Then create B+-tree layer-by-layer, starting with leaf level</li> <li>The built B+-tree is written to disk using sequential I/O operations</li> </ul> </li> </ul> <p>Example</p> <p> </p> <p>\u5982\u679c\u8981\u6392\u5e8f\u7684\u5185\u5bb9\u8f83\u5927\uff0c\u65e0\u6cd5\u653e\u4e0b\u5185\u5b58\uff0c\u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u6392\u5e8f\u3002 fanout \u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\u3002 \u53ef\u4ee5\u7528 level-order \u5199\u5230\u78c1\u76d8\u91cc\uff0c\u4fbf\u4e8e\u987a\u5e8f\u8bbf\u95ee\u6240\u6709\u7d22\u5f15\uff0c\u6b64\u65f6\u5757\u662f\u8fde\u7eed\u7684\u3002\uff08\u4fbf\u4e8e\u987a\u5e8f\u8bbf\u95ee\u6240\u6709\u6570\u636e\u9879\uff09  \u8fd9\u91cc\u7684\u4ee3\u4ef7\u5c31\u662f\u5efa\u597d\u540e\uff0c\u4e00\u6b21 seek \u540e\u5168\u90e8\u5199\u51fa\u53bb (9 blocks)  </p> <p>Bulk insert index entries   </p> <p>Example</p> <p> </p> <p>\u628a\u521a\u521a\u90a3\u68f5 B+ \u6811\u53f6\u5b50\u8282\u70b9\uff08\u5373\u904d\u5386\u6240\u6709\u6570\u636e\uff09\u9700\u8981 1seek+6blocks. \u968f\u540e\u548c\u4e0a\u9762\u7684\u6570\u636e\u5408\u5e76\u540e\uff0c\u5199\u56de\u78c1\u76d8\u65f6\u9700\u8981 1seek+13blocks. </p> <p>Merge two existing two B+-trees , to create a new B+-tree using the Bottom-UP Build algorithm, as in LSM-tree Index \u5047\u8bbe\u6709\u4e24\u68f5\u8fd9\u6837\u751f\u6210\u7684 B+ \u6811\uff0c\u5c06\u4ed6\u4eec\u5408\u5e76\u5728\u4e00\u8d77\u3002\u9996\u5148\u628a\u53f6\u5b50\u8282\u70b9\u62ff\u51fa\u6765\u6392\u5e8f\u3002  </p>"},{"location":"DB/db10/#indexing-in-main-memory","title":"Indexing in Main Memory","text":"<p>cache \u6309 cache line \u4f20\u8f93, \u53ea\u6709 64B. </p> <ul> <li>Random access in memory  <ul> <li>Much cheaper than on disk/flash, but still expensive compared to cache read</li> <li>Binary search for a key value within a large B+-tree node results in many cache misses \u4e8c\u5206\u67e5\u627e\u53ef\u80fd\u5e26\u6765\u5f88\u591a cache miss.  </li> <li>Data structures that make best use of cache preferable \u2013 cache conscious </li> </ul> </li> </ul> <p>B+- trees with small nodes that fit in cache line are preferable to reduce cache misses search key \u548c pointer \u53ef\u4ee5\u5206\u5f00\u653e\u3002</p> <p>Key idea:  </p> <ul> <li>use large node size to optimize disk access, </li> <li>but structure data within a node using a tree with small node size, instead of using an array, to optimize cache access.</li> </ul>"},{"location":"DB/db10/#indexing-on-flash","title":"Indexing on Flash","text":"<p>Flash \u91cc\u4e0d\u662f\u5373\u65f6\u4fee\u6539\uff0c\u800c\u662f\u5148\u64e6\u6389\u518d\u5199\u3002\u540c\u65f6\u64e6\u7684\u6b21\u6570\u662f\u6709\u9650\u5236\u7684\u3002\u56e0\u6b64\u6700\u597d\u7684\u65b9\u6cd5\u662f\u4ece\u5e95\u6784\u5efa\uff0c\u7136\u540e\u987a\u5e8f\u5199\u5165\u3002</p> <ul> <li>Random I/O cost much lower on flash 20 to 100 microseconds for read/write</li> <li>Writes are not in-place, and (eventually) require a more expensive erase Optimum page size therefore much smaller</li> <li>Bulk-loading still useful since it minimizes page erases</li> <li>Write-optimized tree structures (i.e., LSM-tree) have been adapted to minimize page writes for flash-optimized search trees \u5199\u4f18\u5316\u7d22\u5f15\u7ed3\u6784 </li> </ul>"},{"location":"DB/db10/#log-structured-merge-lsm-tree","title":"Log Structured Merge (LSM) Tree","text":"<ul> <li>Records inserted first into in-memory tree (\\(L_0\\) tree)  </li> <li>When in-memory tree is full, records moved to disk (\\(L_1\\) tree) B+-tree constructed using bottom-up build by merging existing \\(L_1\\) tree with records from \\(L_0\\) tree \u5185\u5b58\u91cc\u7684 B+ \u6811\u5982\u679c\u6ee1\u4e86\uff0c\u5c31\u9a6c\u4e0a\u5199\u5230\u78c1\u76d8\u91cc\u53bb\uff08\u53ef\u4ee5\u8fde\u7eed\u5199\uff09  </li> <li>When \\(L_1\\) tree exceeds some threshold, merge into $L_2\uffe5 tree And so on for more levels Size threshold for \\(L_{i+1}\\) tree is \\(k\\) times size threshold for \\(L_i\\) tree </li> </ul> <p>\u8fd9\u6837\u6211\u4eec\u628a\u968f\u673a\u5199\u53d8\u4e3a\u4e86\u987a\u5e8f\u5199\u3002\u4f46\u6b64\u65f6\u67e5\u627e\u4e00\u4e2a\u7d22\u5f15\uff0c\u5c31\u8981\u904d\u5386\u6240\u6709 B+ \u6811\u3002</p> <ul> <li>Benefits of LSM approach<ul> <li>Inserts are done using only sequential I/O operations</li> <li>Leaves are full, avoiding space wastage</li> <li>Reduced number of I/O operations per record inserted as compared to normal B+-tree (up to some size)</li> </ul> </li> <li>Drawback of LSM approach<ul> <li>Queries have to search multiple trees</li> <li>Entire content of each level copied multiple times</li> </ul> </li> </ul> <p>Stepped Merge Index \u539f\u5148\u7684\u7ed3\u6784\u4e2d\uff0cMerge \u64cd\u4f5c\u592a\u591a\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u6027\u5408\u5e76\u3002 \u78c1\u76d8\u4e0a\u6bcf\u5c42\u6709 k \u68f5\u6811\uff0c\u5f53 k \u4e2a\u7d22\u5f15\u5904\u4e8e\u540c\u4e00\u5c42\u65f6\uff0c\u5408\u5e76\u5b83\u4eec\u5e76\u5f97\u5230\u4e00\u68f5\u5c42\u6570 \\(+1\\) \u7684\u6811\uff0c\u5199\u56de\u3002   \\(L_1\\) \u6709\u5927\u5c0f\u9650\u5236\uff0c\u8fbe\u5230\u540e\u4f1a\u751f\u6210\u53e6\u4e00\u4e2a B+ \u6811\uff0c\u4f9d\u6b21\u4e3a k \u500d\u3002  \u5e03\u9686\u8fc7\u6ee4\u5668</p>"},{"location":"DB/db11/","title":"Query Processing","text":"Abstract <ul> <li>Basic Steps in Query Processing</li> <li>Measures of Query Cost</li> <li>Selection Operation  </li> <li>Sorting </li> <li>Join Operation </li> <li>Other Operations</li> <li>Evaluation of Expressions</li> </ul>"},{"location":"DB/db11/#basic-steps-in-query-processing","title":"Basic Steps in Query Processing","text":"<p>\u7ecf\u8fc7\u8bed\u6cd5\u5206\u6790\u3001\u8bed\u4e49\u68c0\u67e5\u7ffb\u8bd1\u6210\u5173\u7cfb\u8868\u8fbe\u5f0f\uff0c\u7ecf\u8fc7\u67e5\u8be2\u4f18\u5316\u8f6c\u5316\u6210\u6267\u884c\u8ba1\u5212\uff08\u76ee\u6807\u4ee3\u7801\uff09\uff0c\u7531\u6c42\u503c\u5f15\u64ce\u5f97\u5230\u8f93\u51fa\u3002</p> <p>Example</p> <p> </p> <p>\u903b\u8f91\u4f18\u5316\uff1a\u628a\u9009\u62e9\u8fd0\u7b97\u5f80\u53f6\u5b50\u4e0a\u63a8\uff1b\u5148\u8fde\u63a5\u7684\u662f\u7ed3\u679c\u6bd4\u8f83\u5c0f\u7684\u3002 An evaluation plan defines exactly what algorithm is used for each operation, and how the execution of the operations is coordinated. </p> <p>\u7ecf\u8fc7\u4ee3\u4ef7\u4f30\u7b97\uff0c\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u7b97\u6cd5\u7684\u4ee3\u4ef7\u6700\u5c0f\u3002\u5982\u4e0a\u56fe\u5de6\u8fb9\u4f7f\u7528\u4e86 B+ \u6811\u7d22\u5f15\uff0c\u53f3\u8fb9\u4f7f\u7528\u4e86\u7ebf\u6027\u626b\u63cf\u3002 pipeline \u8868\u793a\u6700\u4e0b\u9762\u4e24\u6b65\u53ef\u4ee5\u6d41\u6c34\u7ebf\uff0c\u5373\u5e76\u884c\u8ba1\u7b97\u3002 \uff08\u706b\u5c71\u6a21\u578b\uff09</p>"},{"location":"DB/db11/#measures-of-query-cost","title":"Measures of Query Cost","text":"<p>Typically disk access is the predominant cost, and is also relatively easy to estimate.  \u5ffd\u7565 CPU cost. Measured by taking into account</p> <ul> <li>Number of seeks </li> <li>Number of blocks read </li> <li>Number of blocks written  \u901a\u5e38\u5199\u7684\u65f6\u95f4\u6bd4\u8bfb\u7684\u65f6\u95f4\u4e45\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u80fd\u9700\u8981\u68c0\u9a8c\u5199\u7684\u7ed3\u679c</li> </ul> <p>For simplicity we just use the number of block transfers from disk and the number of seeks as the cost measures</p> <ul> <li>\\(t_T\\) \u2013 time to transfer one block</li> <li>\\(t_S\\) \u2013 time for one seek</li> <li>Cost for b block transfers plus S seeks \\(b * t_T + S * t_S\\) </li> </ul> <p>We often use worst case estimates, assuming only the minimum amount of memory needed for the operation is available. \u5373\u5047\u8bbe\u7f13\u51b2\u533a\u6700\u5c0f\u7684\u65f6\u5019\uff0c\u800c\u4e14\u90fd\u662f\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u800c\u975e\u4ece buffer \u4e2d\u8bfb\u53d6\u3002</p>"},{"location":"DB/db11/#selection-operation","title":"Selection Operation","text":""},{"location":"DB/db11/#file-scan","title":"File scan","text":"<p>Algorithm A1 (linear search). Scan each file block and test all records to see whether they satisfy the selection condition. \uff08\u5047\u5b9a\u6570\u636e\u5757\u90fd\u662f\u8fde\u7eed\u5b58\u653e\u7684\uff09</p> <ul> <li>worst cost = \\(b_r*t_T+t_S\\) \\(b_r\\) \u662f\u8981\u627e\u7684\u5757\u7684\u6570\u91cf</li> <li>average cost = \\(b_r/2*t_T+t_S\\) \u8fd9\u91cc\u5982\u679c\u641c\u7d22\u7684\u662f key, \u90a3\u6211\u4eec\u626b\u5230\u8fd9\u4e2a\u8bb0\u5f55\u5c31\u53ef\u4ee5\u505c\u6b62\u3002</li> </ul>"},{"location":"DB/db11/#index-scan","title":"Index scan","text":"<p>A2 (primary B+-tree index / clustering B+-tree index, equality on key).   \u5728\u4e3b\u952e\u4e0a\u67e5\u627e</p> <p>cost = \\((h_i+1)* (t_T+t_S)\\)</p> \u4e3b\u7d22\u5f15, key \u4e0a\u7684\u7b49\u503c\u67e5\u627e <p> </p> <p>\u8fd9\u91cc\u7684\u9ad8\u5ea6\u4ece 1 \u5f00\u59cb\uff08+1 \u8868\u793a\u6700\u540e\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u9700\u8981\u4ece\u78c1\u76d8\u4e2d\u8bfb\uff09</p> <p>A3 (primary B+-tree index/ clustering B+-tree index, equality on nonkey). Records will be on consecutive blocks \u6b64\u65f6\u7d22\u5f15\u7684\u503c\u4e0d\u662f\u4e3b\u952e. b \u8868\u793a\u641c\u7d22\u7801\u5bf9\u5e94\u7684\u8bb0\u5f55\u6570\u91cf\u3002</p> <p>cost = \\(h_i *(t_T+t_S) + t_S + t_T *b\\)</p> \u4e3b\u7d22\u5f15, nonkey \u4e0a\u7684\u7b49\u503c\u67e5\u627e <p> </p> <p>A4 (secondary B+-tree index , equality on key).    </p> <p>cost = \\((h_i + 1) * (t_T + t_S)\\)</p> \u8f85\u52a9\u7d22\u5f15, key \u4e0a\u7684\u7b49\u503c\u67e5\u627e <p> </p> <p>A4\u2019 (secondary B+-index on nonkey, equality).</p> <p>Cost = $(h_i + m+ n) * (t_T + t_S) $ \u8fd9\u91cc m \u8868\u793a\u653e\u6307\u9488\u7684\u5757\u7684\u6570\u91cf, n \u8868\u793a\u5bf9\u5e94\u78c1\u76d8\u91cc\u7684\u8bb0\u5f55\u7684\u6570\u91cf\u3002</p> \u8f85\u52a9\u7d22\u5f15, nonkey \u4e0a\u7684\u7b49\u503c\u67e5\u627e <p> </p>"},{"location":"DB/db11/#selections-involving-comparisons","title":"Selections Involving Comparisons","text":"<p>\u67e5\u8be2 \\(\\sigma_{A\\leq V}(r)\\) (or \\(\\sigma_{A\\geq V}(r)\\))</p> <p>A5 (primary B+-index / clustering B+-index index, comparison). (Relation is sorted on A) </p> <ul> <li>\u9996\u5148\u627e\u5230\u7b2c\u4e00\u4e2a \\(\\geq v\\). \u7684\u503c</li> <li>\u628a\u540e\u9762\u7684\u5757\u987a\u5e8f\u8bfb\u8fdb\u53bb Cost = \\(h_i * (t_T + t_S) + t_S + t_T * b\\) (\u540c\u60c5\u51b5 3)</li> </ul> \u4e3b\u7d22\u5f15, key \u4e0a\u7684\u6bd4\u8f83 <p> </p> <p>A6 (secondary B+-tree index, comparison). \u60c5\u51b5\u7c7b\u4f3c A4</p> \u8f85\u52a9\u7d22\u5f15, nonkey \u4e0a\u7684\u6bd4\u8f83 <p> </p>"},{"location":"DB/db11/#implementation-of-complex-selections","title":"Implementation of Complex Selections","text":"<p>Conjunction \\(\\sigma_{\\theta_1} \\wedge \\ldots \\wedge_{\\theta_n}(r)\\) \u53ef\u4ee5\u7ebf\u6027\u626b\u63cf\uff0c\u6216\u8005\u5229\u7528\u67d0\u4e2a\u5c5e\u6027\u7684 index \u5148\u67e5\u8be2\uff0c\u628a\u7b26\u5408\u7684\u8bfb\u5230\u5185\u5b58\u4e2d\uff0c\u518d\u68c0\u67e5\u5176\u4ed6\u5c5e\u6027\u3002 \u5982\u679c\u6709\u5f88\u591a\u4e2a\u5c5e\u6027\u90fd\u6709\u7d22\u5f15\uff0c\u6211\u4eec\u9009\u62e9\u4e2d\u95f4\u7ed3\u679c\u5c11\u7684\u3002</p> <p>A7 (conjunctive selection using one index). </p> <ul> <li>Select a combination of \\(\\theta_i\\) and algorithms A1 through A6 that results in the least cost for \\(\\sigma_{\\theta_i}(r)\\).</li> <li>Test other conditions on tuple after fetching it into memory buffer.</li> </ul> <p>A8 (conjunctive selection using composite index).  Use appropriate composite (multiple-key) index if available. \u5229\u7528\u590d\u5408\u7d22\u5f15</p> <p>A9 (conjunctive selection by intersection of identifiers). \u5bf9\u6bcf\u4e2a\u7d22\u5f15\u90fd\u8fdb\u884c\u67e5\u8be2\uff0c\u5c06\u7ed3\u679c\u62fc\u8d77\u6765</p>"},{"location":"DB/db11/#algorithms-for-complex-selections","title":"Algorithms for Complex Selections","text":"<ul> <li>Disjunction: \\(\\sigma_{\\theta_1} \\vee \\ldots \\vee_{\\theta_n}(r)\\) A10 (disjunctive selection by union of identifiers). <ul> <li>Applicable if all  conditions have available indices.  </li> <li>Otherwise use linear scan.</li> <li>Use corresponding index for each condition, and take union of all the obtained sets of record pointers. </li> <li>Then fetch records from file</li> </ul> </li> <li>Negation: \\(\\sigma_{\\neg \\theta}(r)\\)<ul> <li>Use linear scan on file   </li> <li>If very few records satisfy \\(\\neg \\theta\\), and an index is applicable to \\(\\theta\\)  Find satisfying records using index and fetch from file</li> </ul> </li> </ul>"},{"location":"DB/db11/#bitmap-index-scan","title":"Bitmap Index Scan","text":""},{"location":"DB/db11/#sorting","title":"Sorting","text":"<p>For relations that don\u2019t fit in memory, external sort-merge is a good choice. </p> <p>Example</p> <p> </p> <p>\u521d\u59cb\u5185\u5b58\u653e\u4e0d\u4e0b\uff0c\u53ea\u80fd\u653e \\(M\\) pages. \u4e00\u6b21\u6027\u8bfb \\(M\\) \u5757\uff0c\u5728\u5185\u5b58\u5185\u6392\u5e8f\uff0c\u6392\u597d\u540e\u5148\u5199\u56de\uff0c\u5f62\u6210\u4e00\u4e2a\u5f52\u5e76\u6bb5\u3002\u518d\u8bfb\u5165\u7b2c\u4e8c\u6bb5\u5230\u5185\u5b58\u4e2d\uff0c\u6392\u5e8f\u540e\u518d\u5199\u56de\uff0c\u5f97\u5230\u82e5\u5e72\u5f52\u5e76\u6bb5(\\(\\dfrac{b_r}{M}\\)) \u4f1a\u6709 \\(2*\\dfrac{b_r}{M}\\) \u6b21 seek, \\(2*b_r\\) \u6b21 transfer. </p>"},{"location":"DB/db11/#procedure","title":"Procedure","text":"<p>Let \\(M\\) denote memory size (in pages). </p> <ul> <li>Create sorted runs(\u5f52\u5e76\u6bb5) Repeatedly do the following till the end of the relation:<ul> <li>Read M blocks of relation into memory     </li> <li>Sort the in-memory blocks</li> <li>Write sorted data to run \\(R_i\\); increment i. \u5047\u8bbe\u751f\u6210\u4e86 \\(N\\) \u4e2a\u5f52\u5e76\u6bb5</li> </ul> </li> <li> <p>Merge the runs </p> <ul> <li> <p>\\(N&lt;M\\) \u5982\u679c\u5f52\u5e76\u6bb5\u5c11\u4e8e\u53ef\u7528\u5185\u5b58\u9875 N \u8def\u5f52\u5e76  \u5f52\u5e76\u65f6\u6bcf\u4e00\u6bb5\u53ea\u9700\u8981\u4e00\u5757\u7f13\u51b2\u533a\uff08\u8f93\u51fa\u5757\u4e5f\u9700\u8981\u4e00\u5757\u7f13\u51b2\u533a\uff09 </p> </li> <li> <p>\\(N\\geq M\\) \u6bcf\u6b21 pass, \u6211\u4eec\u4e0d\u505c\u5730\u628a M-1 \u4e2a\u6bb5\u53d8\u6210\u4e86\u4e00\u4e2a\u5927\u7684\u5f52\u5e76\u6bb5\uff0c\u6b64\u65f6\u6570\u91cf\u51cf\u5c11\u4e3a\u539f\u6765\u7684 \\(\\dfrac{1}{M-1}\\). \u5982\u679c\u4ecd\u7136\u6570\u91cf\u8d85\u8fc7 M, \u7ee7\u7eed pass.  e.g. If M=11, and there are 90 runs, one pass reduces the number of runs to 9, each 10 times the size of the initial runs.  </p> </li> </ul> </li> </ul>"},{"location":"DB/db11/#cost-analysis","title":"Cost analysis","text":"<ul> <li> <p>transfer      </p> <p>\u6211\u4eec\u4e0d\u8003\u8651\u6700\u540e\u4e00\u6b21\u5199\u78c1\u76d8\u7684 cost, \u56e0\u4e3a\u53ef\u80fd\u6d41\u6c34\u7ebf\u4f1a\u76f4\u63a5\u628a\u7ed3\u679c\u4ea4\u7ed9\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002 * seek  </p> </li> </ul>"},{"location":"DB/db11/#advanced-version","title":"Advanced version","text":"<p>\u6bcf\u4e00\u6b21\u8bfb\u8fdb\u53bb\u90fd\u8981 seek, \u53ef\u4ee5\u6539\u8fdb\u3002\u4e3a\u6bcf\u4e00\u4e2a\u5f52\u5e76\u6bb5\u5206\u914d\u591a\u4e2a\u7f13\u51b2\u533a\u3002\u8fd9\u6837\u6211\u4eec\u5b9a\u4f4d\u4e00\u6b21\u4e4b\u540e\u53ef\u4ee5\u8bfb\u5165\u591a\u5757\u8fdb\u5165\u7f13\u51b2\u533a\u3002 \u51cf\u5c11\u4e86 seek \u6b21\u6570\uff0c\u4f46\u8fd9\u6837\u8f6e\u6b21\u53ef\u80fd\u4f1a\u589e\u52a0\u3002</p>"},{"location":"DB/db11/#join-operation","title":"Join Operation","text":"<p>Several different algorithms to implement joins</p> <ul> <li>Nested-loop join</li> <li>Block nested-loop join</li> <li>Indexed nested-loop join</li> <li>Merge-join</li> <li>Hash-join</li> </ul>"},{"location":"DB/db11/#nested-loop-join","title":"Nested-Loop Join","text":"<p>\u4e24\u91cd\u5faa\u73af</p> <ul> <li>\\(r\\) is called the outer relation and \\(s\\) the inner relation of the join.  </li> </ul> <p>\\(n_r * b_s + b_r\\) block transfers, plus \\(n_r + b_r\\) seeks \u5bf9\u5916\u5faa\u73af\u6bcf\u4e2a\u8bb0\u5f55\uff0c\u5185\u5faa\u73af\u7684\u6240\u6709\u5757\u90fd\u8981\u8fdb\u53bb. seek \u65f6\u6bcf\u6b21\u5916\u5faa\u73af\u90fd\u9700\u8981 seek, \u5185\u5faa\u73af\u6bcf\u8f6e\u53ea\u9700\u8981\u4e00\u6b21 seek. </p> <p>\u5982\u679c\u5185\u5b58\u80fd\u5bb9\u7eb3\u6240\u6709\u7684\u5173\u7cfb\uff0c\u90a3\u6211\u4eec\u53ea\u9700\u8981 \\(b_r  + b_s\\) block transfers and 2 seeks.  </p>"},{"location":"DB/db11/#block-nested-loop-join","title":"Block Nested-Loop Join","text":"<ul> <li>Worst case estimate:  \\(b_r * b_s + b_r\\)  block transfers + \\(2 * b_r\\) seeks Each block in the inner relation \\(s\\) is read once for each block in the outer relation</li> <li>Best case: \\(b_r + b_s\\) block transfers + 2 seeks.</li> </ul> <p>\u8981\u628a\u5c0f\u7684\u4f5c\u4e3a\u5916\u5173\u7cfb\u3002</p> <p>Improvements to block nested loop algorithms: \u5047\u8bbe\u5185\u5b58\u6709 M \u5757\uff0c\u6709\u4e00\u5757\u4f5c\u4e3a output \u7684\u7f13\u51b2\uff0c\u5269\u4e0b M-1 \u5757\u4e2d M-2 \u5757\u5747\u7ed9\u5916\u5173\u7cfb\uff0c\u5185\u5173\u7cfb\u7ed9\u4e00\u5757\u3002</p> <p>Cost = \\(\\lceil b_r  / (M-2) \\rceil * b_s + b_r\\) block transfers + \\(2 \\lceil b_r  / (M-2)\\rceil\\) seeks</p> <ul> <li>If equi-join attribute forms a key on the inner relation, stop inner loop on first match \u5982\u679c\u8fde\u63a5\u7684\u5c5e\u6027\u662f key, \u90a3\u4e48\u5f53\u6211\u4eec\u5339\u914d\u4e0a\u4e4b\u540e\u5c31\u53ef\u4ee5\u505c\u6b62\u5185\u5faa\u73af\u3002</li> <li>Scan inner loop forward and backward alternately, to make use of the blocks remaining in buffer (with LRU replacement) \u5229\u7528 LRU \u7b56\u7565\u7684\u7279\u70b9\uff0cinner \u6b63\u5411\u626b\u63cf\u540e\u518d\u53cd\u8fc7\u6765\uff0c\u8fd9\u6837\u6700\u8fd1\u7684\u5757\u5f88\u53ef\u80fd\u8fd8\u5728\u5185\u5b58\u4e2d\uff0c\u63d0\u9ad8\u7f13\u51b2\u547d\u4e2d\u7387\u3002</li> </ul>"},{"location":"DB/db11/#indexed-nested-loop-join","title":"Indexed Nested-Loop Join","text":"<p>\u5982\u679c\u5185\u5faa\u73af\u6709\u7d22\u5f15\uff0c\u6211\u4eec\u5c31\u6ca1\u5fc5\u8981\u626b\u63cf\u5185\u5faa\u73af\u6240\u6709\u5757\u4e86\u3002  </p> <p>Index lookups can replace file scans if</p> <ul> <li>join is an equi-join or natural join and</li> <li>an index is available on the inner relation\u2019s join attribute \u8fde\u63a5\u5c5e\u6027\u6709\u7d22\u5f15</li> </ul> <p>Cost of the join: \\(b_r (t_T + t_S) + n_r * c\\) \u8fd9\u91cc\u5047\u5b9a\u7ed9\u5916\u5173\u7cfb\u4e00\u5757\u5185\u5b58. \\(c\\) \u8868\u793a\u904d\u5386\u7d22\u5f15\u5e76\u53d6\u51fa\u6240\u6709\u5339\u914d\u7684\u5143\u7ec4\u7684\u65f6\u95f4\u3002</p>"},{"location":"DB/db11/#merge-join","title":"Merge Join","text":"<p>\u5047\u8bbe\u4e24\u4e2a\u5173\u7cfb\u5df2\u7ecf\u57fa\u4e8e\u8fde\u63a5\u5c5e\u6027\u6392\u597d\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5f52\u5e76\u7684\u601d\u60f3\u8fde\u63a5\u3002  </p> <ul> <li>Sort both relations on their join attribute (if not already sorted on the join attributes).  </li> <li>Merge the sorted relations to join them<ul> <li>Join step is similar to the merge stage of the sort-merge algorithm.  </li> <li>Main difference is handling of duplicate values in join attribute \u2014 every pair with same value on join attribute must be matched</li> </ul> </li> </ul> <p>\\(b_r + b_s\\) block transfers + \\(\\lceil b_r / b_b\\rceil + \\lceil b_s / b_b\\rceil\\) seeks  </p> <p>If the buffer memory size is M pages, in order to minimize the cost of merge join, how to assign M blocks to r and s respectively? </p> <p>The estimated cost is \\(b_r + b_s\\) block transfers + \\(\\lceil b_r / x_r\\rceil + \\lceil b_s / x_s\\rceil\\) seeks (\\(x_r+x_s=M\\))  </p> <p>\u5982\u679c\u4e24\u4e2a\u8868\u90fd\u65e0\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u6392\u5e8f\u518d Merge-join, \u8fd9\u65f6\u8fd8\u8981\u7b97\u4e0a\u6392\u5e8f\u7684\u4ee3\u4ef7\u3002</p>"},{"location":"DB/db11/#hash-join","title":"Hash Join","text":"<p>\u7528\u4e00\u4e2a Hash \u51fd\u6570\u628a\u4e24\u4e2a\u5173\u7cfb\u8fdb\u884c\u5206\u7247\u3002\u80fd\u591f\u8fde\u63a5\u4e0a\u7684\u8bb0\u5f55\uff0c\u4e00\u5b9a\u5904\u4e8e\u540c\u4e00\u4e2a partition \u91cc\u9762\uff08\u53cd\u4e4b\u4e0d\u4e00\u5b9a\uff09 \u8fd9\u6837\u5927\u5173\u7cfb\u53d8\u6210\u4e86\u5c0f\u5173\u7cfb\u3002 \u6211\u4eec\u8981\u6c42\u5176\u4e2d\u67d0\u4e2a\u7684\u5c0f\u5173\u7cfb\u8981\u80fd\u4e00\u6b21\u653e\u5230\u5185\u5b58\u4e2d\u3002</p> <p>Applicable for equi-joins and natural joins.   the value \\(n\\)(partition \u7684\u4e2a\u6570) and the hash function \\(h\\) is chosen such that each si should fit in memory. \\(n  \\geq  \\lceil b_s / M\\rceil\\)  \u8981\u6c42\u6bcf\u4e2a partition \u7684\u5927\u5c0f\u90fd\u8981\u5c0f\u4e8e M, \u4e0d\u7136\u4e0d\u80fd\u4e00\u6b21\u6027\u653e\u8fdb\u53bb\u3002  </p> <p>\u5982\u679c\u6211\u4eec\u7684 \\(n\\) \u5f88\u5927\uff0c\u8981\u5206\u51fa\u6765\u7684 partition \u5f88\u5927\uff0c\u4f46\u662f\u5185\u5b58\u4e0d\u591f\uff0c\u5173\u7cfb\u5206\u533a\u4e0d\u80fd\u4e00\u6b21\u751f\u6210\u6240\u6709\u7684 partition, \u8981\u7ecf\u8fc7\u591a\u6b21\u5206\u533a\u3002 \u6bcf\u6b21\u8f93\u5165\u5148\u88ab\u5212\u5206\uff0c\u968f\u540e\u8fdb\u884c\u7ec6\u5206\u3002</p> <p>\u6ce8\u610f\u5206\u7247\u7684\u65f6\u5019\uff0c\u8fd8\u8981\u5199\u51fa\u53bb\u3002 \u5339\u914d\u65f6\u6211\u4eec\u6709\u54c8\u5e0c\u7d22\u5f15\u3002</p> <p>Typically n is chosen as \\(\\lceil b_s/M\\rceil * f\\)  where \\(f\\) is a \u201cfudge factor(\u4fee\u6b63\u56e0\u5b50)\u201d, typically around 1.2 \u5206\u4e0d\u5300\uff0c\u6211\u4eec\u6709\u610f\u653e\u5927\u3002 The probe input relation partitions \\(r_i\\) need not fit in memory</p>"},{"location":"DB/db11/#recursive-partitioning","title":"Recursive partitioning","text":"<p>Recursive partitioning required if number of partitions n is greater than number of pages M of memory.</p> <p>A relation does not need recursive partitioning if \\(M &gt; n_h + 1\\), or equivalently \\(M &gt; (b_s/M) + 1\\), which simplifies (approximately) to \\(M &gt; \\sqrt{b_s}\\). </p> Example <p> </p>"},{"location":"DB/db11/#cost-of-hash-join","title":"Cost of Hash-Join","text":""},{"location":"DB/db11/#other-operations","title":"Other Operations","text":"<ul> <li>Duplicate elimination can be implemented via hashing or sorting.  On sorting duplicates will come adjacent to each other, and all but one set of duplicates can be deleted. \u5728\u6392\u5e8f\u7684\u8fc7\u7a0b\uff08\u751f\u6210\u3001\u5408\u5e76\u5f52\u5e76\u6bb5\u5c31\u8fdb\u884c\u53bb\u91cd\uff09 Hashing is similar </li> <li>Aggregation Sorting or hashing can be used to bring tuples in the same group together, and then the aggregate functions can be applied on each group.  \u751f\u6210\u5f52\u5e76\u6bb5\u7684\u65f6\u5019\uff0c\u540c\u4e00\u6bb5\u7684\u5c31\u53ef\u4ee5\u7edf\u8ba1\u7edf\u4e00\u7ed3\u679c</li> </ul>"},{"location":"DB/db12/","title":"Query Optimization","text":"Abstract <ul> <li>Introduction </li> <li>Transformation of Relational Expressions</li> <li>Statistical Information for Cost Estimation</li> <li>Cost-based Optimization</li> <li>Dynamic Programming for Choosing Evaluation Plans</li> <li>Nested Subqueries</li> <li>Materialized Views </li> <li>Advanced Topics in Query Optimization</li> </ul>"},{"location":"DB/db12/#introduction","title":"Introduction","text":"<p>Alternative ways of evaluating a given query</p> <ul> <li>Equivalent expressions \u903b\u8f91\u4f18\u5316\uff1a\u5173\u7cfb\u4ee3\u6570\u8868\u8fbe\u5f0f\uff08\u5c3d\u91cf\u5148\u505a\u9009\u62e9\uff0c\u6295\u5f71\uff09</li> <li>Different algorithms for each operation \u7269\u7406\u5c42\u9762\uff1a\u6bcf\u4e2a\u7b97\u5b50\u9009\u62e9\u4e0d\u540c\u7684\u7b97\u6cd5</li> </ul> Example <p> </p> <p>Estimation of plan cost based on:</p> <ul> <li>Statistical information about relations. Examples: number of tuples, number of distinct values for an attribute</li> <li>Statistics estimation for intermediate results\uff08Cardinality Estimation\uff09 to compute cost of complex expressions \u4f30\u8ba1\u4e2d\u95f4\u7ed3\u679c\u7684\u5927\u5c0f \u73b0\u5728\u6709\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u4f30\u8ba1\u65b9\u6cd5</li> <li>Cost formulae for algorithms, computed using statistics</li> </ul> <p>\u5173\u7cfb\u6570\u636e\u5e93\u91cc\u53ef\u4ee5\u7528\u67e5\u770b\u6267\u884c\u8ba1\u5212\u3002</p>"},{"location":"DB/db12/#generating-equivalent-expressions","title":"Generating Equivalent Expressions","text":"<p>Two relational algebra expressions are said to be equivalent if the two expressions generate the same set of tuples on every legal database instance \u5f62\u5f0f\u4e0a\u4e0d\u4e00\u6837\uff0c\u4f46\u662f\u7ed3\u679c\uff08\u8f93\u51fa\uff09\u662f\u4e00\u6837\u7684\uff0c\u4ea7\u751f\u4e86\u76f8\u540c\u7684\u96c6\u5408\u3002  </p>"},{"location":"DB/db12/#equivalence-rules","title":"Equivalence Rules","text":"<ul> <li> <p>selection      </p> <ol> <li>\u53ef\u4ee5\u628a\u7b97\u5b50\u62c6\u5206 \u5982\u679c\u67d0\u4e9b\u5c5e\u6027\u6709\u7d22\u5f15\uff0c\u90a3\u4e48\u53ef\u4ee5\u5148\u62c6\u5206\uff0c\u5728\u7d22\u5f15 select \u4e4b\u540e\u518d\u6267\u884c\u5176\u4ed6\u7b97\u5b50\uff0c\u5426\u5219\u4e0d\u5982\u4e0d\u62c6\u5206\u3002</li> <li>\u7b97\u5b50\u53ef\u4ea4\u6362 \u5148\u6267\u884c\u6709\u7d22\u5f15\u7684\u7b97\u5b50\u3002  </li> <li>\u6295\u5f71\u7684\u5c5e\u6027\u53ef\u4ee5\u53ea\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u7684  </li> <li>\u9009\u62e9\u7b97\u5b50\u53ef\u4ee5\u548c\u5408\u5e76\u7ed3\u5408  </li> </ol> </li> <li> <p>join </p> <p>\u81ea\u7136\u8fde\u63a5\u662f\u7ed3\u5408\u7684\uff08\u5148\u8fde\u63a5\u4e2d\u95f4\u7ed3\u679c\u5c0f\u7684\uff09 </p> <p>\u5982\u679c\u9009\u62e9\u7b97\u5b50\u53ea\u548c\u4e00\u4e2a\u5173\u7cfb\u6709\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u6267\u884c\u9009\u62e9\u3002\uff08\u9009\u62e9\u7b97\u5b50\u8981\u65e9\u8fdb\u884c\uff0c\u63a8\u5230\u53f6\u5b50\u4e0a\uff09  </p> </li> <li> <p>projection      </p> <p>\u540c\u7406\u6295\u5f71\u4e5f\u8981\u65e9\u505a\u3002 \u5982\u679c\u8fde\u63a5\u8981\u7528\u5230\u6295\u5f71\u540e\u4e0d\u4fdd\u7559\u7684\u5c5e\u6027\uff0c\u6211\u4eec\u5728\u7b2c\u4e00\u6b21\u6295\u5f71\u65f6\u8981\u628a\u8fde\u63a5\u7528\u7684\u5c5e\u6027\u4e5f\u4fdd\u7559\u4e0b\u6765\u3002</p> </li> <li> <p>set operation      </p> <p>\u8fd9\u91cc\u7684\u51cf\u6cd5\uff0c\u51cf\u6570\u5173\u7cfb\u5c31\u4e0d\u7528\u505a\u9009\u62e9\u4e86\uff08\u51cf\u53bb\u591a\u7684\u603b\u662f\u6ca1\u95ee\u9898\u7684\uff09\u5bf9\u4ea4\u96c6\u4e5f\u9002\u7528</p> </li> <li> <p>other      </p> </li> </ul>"},{"location":"DB/db12/#enumeration-of-equivalent-expressions","title":"Enumeration of Equivalent Expressions","text":"<ul> <li>Repeat<ul> <li>apply all applicable equivalence rules on every subexpression of every equivalent expression found so far</li> <li>add newly generated expressions to the set of equivalent expressions </li> </ul> </li> <li>Until no new equivalent expressions are generated above</li> </ul> <p>\u53ef\u4ee5\u8fd9\u6837\u627e\u5230\u6240\u6709\u7684\u7b49\u4ef7\u8868\u8fbe\u5f0f\u3002</p> <p>\u4f46\u662f\u5b9e\u9645\u4e2d\u6211\u4eec\u57fa\u4e8e\u4e00\u4e9b\u7ecf\u9a8c\u89c4\u5219\u8fdb\u884c\u542f\u53d1\u5f0f\u7684\u4f18\u5316</p>"},{"location":"DB/db12/#statistics-for-cost-estimation","title":"Statistics for Cost Estimation","text":"<p>\u4ee3\u4ef7\u4f30\u7b97\u9700\u8981\u7edf\u8ba1\u4fe1\u606f</p> <ul> <li>\\(n_r\\): number of tuples in a relation r.</li> <li>\\(b_r\\): number of blocks containing tuples of r.</li> <li>\\(l_r\\): size of a tuple of r.</li> <li>\\(f_r\\): blocking factor of r \u2014 i.e., the number of tuples of r that fit into one block. \u4e00\u4e2a\u5757\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u5143\u7ec4</li> <li>\\(V(A, r)\\): number of distinct values that appear in r for attribute A; same as the size of \\(\\Pi(r)\\).</li> <li>If tuples of r are stored together physically in a file, then: \\(b_r = \\lceil \\dfrac{n_r}{f_r}\\rceil\\)</li> <li>Histograms</li> </ul> attribute age of relation person <p> </p>"},{"location":"DB/db12/#selection-size-estimation","title":"Selection Size Estimation","text":"<p>\u4e2d\u95f4\u7ed3\u679c</p> <ul> <li>\\(\\sigma_{A=v}(r)\\) \\(n_r / V(A,r)\\) : number of records that will satisfy the selection.  \u8fd9\u6837\u7684\u4f30\u7b97\u57fa\u4e8e\u503c\u662f\u5e73\u5747\u5206\u5e03\u7684 \u5982\u679c\u8981\u627e\u7684\u662f\u4e00\u4e2a key, \u90a3\u4e48 size estimate=1</li> <li>\\(\\sigma_{A\\leq v}(r)\\) <ul> <li>Let \\(c\\) denote the estimated number of tuples satisfying the condition.   </li> <li>\\(c = 0\\) if \\(v &lt; \\min(A,r)\\) v \u6bd4\u5c5e\u6027 A \u7684\u6700\u5c0f\u503c\u8fd8\u8981\u5c0f</li> <li>\\(c = n_r\\cdot \\dfrac{v-\\min(A,r)}{\\max(A,r) - \\min A(A,r)}\\) </li> <li>In absence of statistical information c is assumed to be \\(n_r / 2\\) (\u6ca1\u6709\u6700\u5927\u3001\u6700\u5c0f\u7edf\u8ba1\u4fe1\u606f\u65f6).</li> </ul> </li> </ul> <p>\u6982\u7387\u8bba\u3002 \u6ce8\u610f\u8fd9\u4e9b\u516c\u5f0f\u7684\u8981\u6c42\u662f\u6761\u4ef6\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002</p>"},{"location":"DB/db12/#joins","title":"Joins","text":"<p>The Cartesian product \\(r  \\times s\\) contains \\(n_r\\cdot n_s\\) tuples; each tuple occupies \\(s_r + s_s\\) bytes.</p> <ul> <li>\\(R \\cap S = \\emptyset\\) \u6ca1\u6709\u516c\u5171\u5c5e\u6027\uff0c\u7b49\u4ef7\u4e8e \\(r\\times s\\)</li> <li> <p>\\(R \\cap S\\) is a key for \\(R\\), then a tuple of \\(s\\) will join with at most one tuple from \\(r\\)</p> Example <p> </p> </li> <li> <p>If \\(R \\cap S\\) in S is a foreign key in S referencing R, then the number of tuples in \\(r\\bowtie s\\) = the number of tuples in s.</p> </li> <li> <p>If \\(R \\cap S = \\{A\\}\\) is not a key for R or S. \\(n_r * \\dfrac{n_s}{V(A,s)}, n_s * \\dfrac{n_r}{V(A,r)}\\).  \u4ee5\u7b2c\u4e8c\u4e2a\u4e3a\u4f8b\u5b50\uff0c\u7ad9\u5728 s \u7684\u89d2\u5ea6\uff0c\u6bcf\u4e00\u4e2a s \u53ef\u4ee5\u548c\u8fd9\u4e48\u591a\u4e2a\u5143\u7d20\u8fde\u63a5\u3002 \u901a\u5e38\u6211\u4eec\u53d6\u4e8c\u8005\u4e2d\u7684\u8f83\u5c0f\u503c\u3002  </p> Example <p> </p> </li> </ul>"},{"location":"DB/db12/#size-estimation-for-other-operations","title":"Size Estimation for Other Operations","text":"<p>\u5916\u90e8\u8fde\u63a5 r, s \u8ba4\u4e3a\u662f r s \u81ea\u7136\u8fde\u63a5\u7684\u7ed3\u679c\u52a0\u4e0a r \u7684\u5927\u5c0f\u3002</p>"},{"location":"DB/db12/#estimation-of-number-of-distinct-values","title":"Estimation of Number of Distinct Values","text":"<p>\u4f30\u7b97 V(A,r).  </p> <p>Selections \\(\\sigma_\\theta(r)\\), estimate \\(V(A,\\sigma_\\theta(r))\\)</p> <ul> <li>If \\(\\theta\\) forces A to take a specified value, \\(V(A,\\sigma_\\theta(r))=1\\) e.g., A = 3</li> <li>If \\(\\theta\\) forces A to take on one of a specified set of values: \\(V(A,\\sigma_\\theta(r))=\\) number of specified values e.g., (A = 1 V A = 3 V A = 4)</li> <li>If the selection condition \\(\\theta\\) is of the form A op v, \\(V(A,\\sigma_\\theta(r))=V(A,r)*s\\) \u5229\u7528\u9009\u62e9\u7387 s \u8ba1\u7b97</li> <li>In all the other cases, use approx1imate estimate: \\(V(A,\\sigma_\\theta(r))=\\min(V(A,r), \\n_{\\sigma_\\theta(r)})\\)</li> </ul> <p>joins \\(r\\bowtie s\\), estimate \\(V(A,r\\bowtie s)\\)</p> <ul> <li>If all attributes in A are from r, the estimated \\(V(A,r\\bowtie s)=\\min(V(A,r), n_{r\\bowtie s})\\)</li> <li>If A contains attributes A1 from r and A2 from s, then estimated \\(V(A,r\\bowtie s)=\\min(V(A1,r)*V(A2-A1,s), V(A1-A2,r)*V(A2,s), n_{r\\bowtie s})\\)</li> </ul>"},{"location":"DB/db12/#choice-of-evaluation-plans","title":"Choice of Evaluation Plans","text":"<p>Must consider the interaction of evaluation techniques when choosing evaluation plans</p> <p>choosing the cheapest algorithm for each operation independently may not yield best overall algorithm   e.g. merge-join may be costlier than hash-join, but may provide a sorted output which reduces the cost for an outer level aggregation. Mergejoin \u4ee3\u4ef7\u9ad8\uff0c\u4f46\u662f\u6709\u4e2a\u597d\u5904\u662f join \u540e\u662f\u6709\u6b21\u5e8f\u7684\uff0c\u5bf9\u4e0a\u5c42\u64cd\u4f5c\u6709\u5229\u3002</p> <p>\u5982\u679c\u8981\u627e\u6700\u4f18\u7684\u6267\u884c\u8ba1\u5212\uff0c\u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\u901a\u5e38\u6309\u7167\u7ecf\u9a8c\u89c4\u5219\u3002 \u6211\u4eec\u4e3b\u8981\u8003\u8651\u8fde\u63a5\u64cd\u4f5c\u7684\u4f18\u5316\u3002</p>"},{"location":"DB/db12/#cost-based-join-order-selection","title":"Cost-Based Join-Order Selection","text":"<p>Consider finding the best join-order for \\(r_1\\bowtie    r_2\\bowtie  \\ldots r_n\\). There are \\((2(n \u2013 1))!/(n \u2013 1)!\\) different join orders for above expression.</p> Example <p> </p> <p>Using dynamic programming, the least-cost join order for any subset of \\(\\{r_1, r_2, \\ldots r_n\\}\\) is computed only once and stored for future use. </p> <p>Join Order Optimization Algorithm</p> <p>\u5148\u5206\u89e3\u6210\u4e24\u4e2a\u5c0f\u7684\u96c6\u5408 \\(S_1, S-S_1\\). \u9012\u5f52\u5730\u7ec6\u5206\u3002 \u9012\u5f52\u5230\u6700\u5e95\u5c42\u5c31\u53d8\u4e3a\u4e86\u5bf9\u5355\u4e2a\u8868\u7684\u9009\u62e9\u65b9\u6cd5\u3002</p>"},{"location":"DB/db12/#left-deep-join-trees","title":"Left Deep Join Trees","text":"<p>In left-deep join trees, the right-hand-side input for each join is a relation, not the result of an intermediate join.</p> <p>\u5de6\u8fb9\u53ef\u4ee5\u662f\u4e2d\u95f4\u7ed3\u679c\uff0c\u53f3\u8fb9\u5fc5\u987b\u662f\u4e00\u4e2a\u5173\u7cfb\u3002</p>"},{"location":"DB/db12/#cost-of-optimization","title":"Cost of Optimization","text":"<ul> <li>With dynamic programming <ul> <li>time complexity of optimization with bushy trees is \\(O(3^n)\\).  </li> <li>Space complexity is \\(O(2^n)\\) </li> </ul> </li> <li>left-deep join tree <ul> <li>Time complexity of finding best join order is \\(O(n 2^n)\\)</li> <li>Space complexity remains at \\(O(2^n)\\) </li> </ul> </li> </ul>"},{"location":"DB/db12/#heuristic-optimization","title":"Heuristic Optimization","text":"<p>Cost-based optimization is expensive. \u53ef\u4ee5\u7528\u542f\u53d1\u5f0f\u4f18\u5316</p> <p>Heuristic optimization transforms the query-tree by using a set of rules that typically (but not in all cases) improve execution performance:</p> <ul> <li>Perform selection early (reduces the number of tuples)</li> <li>Perform projection early (reduces the number of attributes)</li> <li>Perform most restrictive selection and join operations (i.e. with smallest result size) before other similar operations.</li> <li>Perform left-deep join order</li> </ul>"},{"location":"DB/db12/#additional-optimization-techniques","title":"Additional Optimization Techniques","text":""},{"location":"DB/db12/#nested-subqueries","title":"Nested Subqueries","text":"<p>Nested query example: <pre><code>select name from instructor where exists (select * from teaches\nwhere instructor.ID = teaches.ID and teaches.year = 2022)\n</code></pre> \u627e\u51fa 2022 \u5f00\u8bfe\u7684\u8001\u5e08\u7684\u540d\u5b57\u3002</p> <p>\u4e24\u91cd\u5faa\u73af\uff0c\u4f46\u662f\u4f4e\u6548\u3002</p> <p>Parameters are variables from outer level query that are used in the  nested subquery; such variables are called correlation variables\uff08\u76f8\u5173\u53d8\u91cf\uff09 \u5373\u6765\u81ea\u5916\u5faa\u73af\u7684\u53d8\u91cf\u3002\u5982\u679c\u6ca1\u6709\u76f8\u5173\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u6267\u884c\u5185\u90e8\uff0c\u7136\u540e\u518d\u6267\u884c\u5916\u90e8\u3002</p> <p>\u628a\u521a\u521a\u90a3\u4e2a\u4f8b\u5b50\u6539\u4e3a\u4e00\u4e2a select \u8bed\u53e5\uff0c\u90a3\u4e48\u4e00\u4e2a\u8001\u5e08\u5982\u679c\u5f00\u4e86\u5f88\u591a\u95e8\u8bfe\u5c31\u4f1a\u51fa\u73b0\u5f88\u591a\u4e2a\u540d\u5b57\u3002\u4f46\u662f\u52a0\u4e0a <code>distinct</code> \u5173\u952e\u8bcd\u540e\u53c8\u65e0\u6cd5\u533a\u5206\u540c\u540d\u60c5\u51b5\u3002</p> <p>\u534a\u8fde\u63a5 \\(\u22c9\\)_\\theta s$\uff0c\u68c0\u9a8c r \u662f\u5426\u6ee1\u8db3\u67d0\u4e2a\u5173\u7cfb\u3002 If a tuple \\(r_i\\) appears n times in r, it appears n times in  the result of \\(r \\(\u22c9\\)_\\theta s\\) , if there is at least one tuple \\(s_i\\) in s matching with \\(r_i\\).</p> Example <p> </p> <p>The process of replacing a nested query by a query with a join/semijoin (possibly with a temporary relation) is called decorrelation(\u53bb\u9664\u76f8\u5173)</p> <p>Decorrelation of scalar aggregate subqueries can be done using groupby/aggregation in some cases</p> Example <p> </p>"},{"location":"DB/db12/#materialized-views","title":"Materialized Views","text":"<p>A materialized view is a view whose contents are computed and stored.  </p> <p>\u6709\u4e9b\u6570\u636e\u5e93\u91cc\u628a view \u5b9e\u4f8b\u5316\u4e86\uff0c\u771f\u6b63\u5b58\u50a8\u5728\u5185\u90e8\u7684\u4e34\u65f6\u8868\u3002</p> <pre><code>create view department_total_salary(dept_name, total_salary) as select dept_name, sum(salary) from instructor group by dept_name\n</code></pre> <p>Saves the effort of finding multiple tuples and adding up their amounts. \u4f46\u662f\u9700\u8981\u65f6\u523b\u4fdd\u6301\u8fd9\u4e2a\u89c6\u56fe\u548c\u539f\u8868\u4e00\u81f4\u3002</p> <p>use incremental view maintenance(\u589e\u91cf\u89c6\u56fe\u7ef4\u62a4) The changes (inserts and deletes) to a relation or expressions are referred to as its differential(\u5dee\u5206)</p> <ul> <li> <p>join: \\(V^{new}=V^{old}\\cup (i_r\\bowtie s), V^{new} = V^{old}-(d_r\\bowtie s)\\)</p> join <p> </p> </li> <li> <p>select: \\(V^{new}=V^{old}\\cup \\sigma_\\theta(i_r), V^{new} = V^{old}-\\sigma_\\theta(d_r)\\)</p> </li> <li> <p>projection: For each tuple in a projection \\(\\Pi_A(r)\\), we will keep a count of how many times it was derived.  </p> <ul> <li>On insert of a tuple to r, if the resultant tuple is already in \\(\\Pi_A(r)\\) we increment its count, else we add a new tuple with count = 1</li> <li>On delete of a tuple from r, we decrement the count of the corresponding tuple in \\(\\Pi_A(r)\\)  if the count becomes 0, we delete the tuple from \\(\\Pi_A(r)\\)</li> </ul> Projection <p> </p> </li> <li> <p>count \\(v= _Ag_{count(B)}\\)</p> <ul> <li>insert: For each tuple r in \\(i_r\\), if the corresponding group is already present in v, we increment its count, else we add a new tuple with count = 1</li> <li>delete: for each tuple t in \\(i_r\\).we look for the group t.A in v, and subtract 1 from the count for the group.  If the count becomes 0, we delete from v the tuple for the group t.A</li> </ul> </li> <li> <p>sum \\(v= _Ag_{sum(B)}\\)</p> </li> <li>min, max</li> </ul> <p>\u600e\u4e48\u5229\u7528\u8fd9\u4e9b view? </p> <ul> <li> <p>Rewriting queries to use materialized views:</p> Example <p> </p> </li> <li> <p>Replacing a use of a materialized view by the view definition</p> </li> </ul> <p>Materialized View Selection \u6709\u54ea\u4e9b\u67e5\u8be2\uff1f\u5404\u79cd\u67e5\u8be2\u7684\u6bd4\u4f8b\uff1f</p>"},{"location":"DB/db13/","title":"Transactions","text":"Abstract <ul> <li>Transaction Concept</li> <li>A Simple Transaction Model</li> <li>Concurrent Executions</li> <li>Serializability</li> <li>Recoverability</li> <li>Transaction Isolation Levels </li> <li>Transaction Definition in SQL</li> </ul>"},{"location":"DB/db13/#transaction-concept","title":"Transaction Concept","text":"<p>A transaction is a unit of program execution that accesses and  possibly updates various data items. \u4e00\u6bb5\u539f\u5b50\u6027\u7684\u64cd\u4f5c  </p> <p>e.g. transaction to transfer $50 from account A to account B <pre><code>update  account  set  balance=balance-50  where account_number=A;\nupdate  account  set  balance=balance+50  where account_number=B;\ncommit;\n</code></pre></p>"},{"location":"DB/db13/#acid-properties","title":"ACID Properties","text":"<ul> <li>Atomicity\uff08\u539f\u5b50\u6027\uff09 \u5168\u6709\u6216\u5168\u65e0 \u7531\u6570\u636e\u5e93\u6062\u590d\u529f\u80fd\u4fdd\u8bc1</li> <li>Consistency\uff08\u4e00\u81f4\u6027\uff09 \u4fdd\u8bc1\u6570\u636e\u5e93\u5185\u7684\u5185\u5bb9\u6b63\u786e\u6027\uff0c\u4e0e\u5b9e\u9645\u4e1a\u52a1\u76f8\u7b26\u3002\u5982\u8f6c\u8d26\u662f\u4e00\u4e2a\u4eba\u4f59\u989d\u51cf\u5c11\u4e00\u4e2a\u4eba\u589e\u52a0\u3002 consistency \u4e0e\u5f00\u53d1\u4eba\u5458\u6709\u5173\u7cfb\uff08\u4e8b\u52a1\u8bbe\u8ba1\u662f\u5426\u5408\u7406\uff09</li> <li>Isolation\uff08\u9694\u79bb\u6027\uff09 \u4e8b\u52a1\u5e76\u53d1\u6267\u884c\uff0c\u4f46\u662f\u76f8\u4e92\u9694\u79bb\uff0c\u597d\u50cf\u662f\u4e32\u884c\u6267\u884c\u4e00\u6837\u3002 \u7531\u6570\u636e\u5e93\u7684\u5e76\u53d1\u6267\u884c\u6765\u5b9e\u73b0</li> <li>Durability\uff08\u6301\u4e45\u6027\uff09 \u4e8b\u52a1\u63d0\u4ea4\u540e\u88ab\u7f13\u5b58\uff0c\u6389\u7535\u4e0d\u80fd\u5931\u53bb buffer \u91cc\u7684\u5185\u5bb9\u3002  </li> </ul>"},{"location":"DB/db13/#a-simple-transaction-model","title":"A Simple Transaction Model","text":"<p>\u8fd9\u4e2a\u6a21\u578b\u4e2d\uff0c\u628a\u4e8b\u52a1\u5bf9\u6570\u636e\u5e93\u7684\u4fee\u6539\u7b80\u5316\u4e3a\u8bfb\u5199\u4e24\u79cd\u64cd\u4f5c\u3002 Transactions access data using two operations:  </p> <ul> <li> <p>read(X), which transfers the data item X from the database to a variable, also called X\uff0c in  a work area  in  main  memory  belonging to the transaction that  executed the read  operation.  </p> </li> <li> <p>write(X), which transfers the value in the variable X  in the main memory work area of the transaction that executed the write operation to the datat item X in database.   </p> </li> </ul> <p>\u5728\u8fd9\u4e2a\u7b80\u5355\u7684\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u4e0d\u8003\u8651\u6570\u636e\u8bfb\u5230\u5de5\u4f5c\u533a\u57df\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\u64cd\u4f5c\uff0c\u53ea\u8003\u8651\u8bfb\u5199\u3002</p> <p>Example of Fund Transfer</p> <p> </p> <ul> <li>Atomicity requirement  \u5982\u679c\u6267\u884c\u7ed3\u675f\u4e4b\u540e\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u6570\u636e\u5e93\u5e94\u8be5\u8981\u64a4\u9500\u4e4b\u524d\u7684\u64cd\u4f5c</li> <li>Durability requirement \u5982\u679c\u4e8b\u52a1\u7ed3\u675f\u4e86\uff0c\u6211\u4eec\u5c31\u628a\u66f4\u65b0\u540c\u6b65</li> <li>Consistency requirement  <ul> <li>Explicitly\uff08\u663e\u5f0f\uff09 specified integrity constraints e.g. primary keys , foreign keys \u6570\u636e\u5e93\u628a\u8fd9\u4e2a\u5b9a\u4e49\u653e\u5728\u5185\u90e8\uff0c\u4f1a\u81ea\u5df1\u7ef4\u62a4</li> <li>Implicit \uff08\u9690\u5f0f\uff09 integrity constraints e.g. sum of balances of all accounts minus sum of loan amounts must equal value of cash-in-hand</li> </ul> </li> <li>Isolation requirement \u5728 step 3 6 \u4e4b\u95f4\uff0c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u88ab\u90e8\u5206\u66f4\u65b0\u7684\u6570\u636e\u5e93\uff0cA+B \u4f1a\u5c0f\u4e8e\u6b63\u786e\u7b54\u6848\u3002\u8fd9\u662f\u56e0\u4e3a\u7834\u574f\u4e86\u9694\u79bb\u6027\u3002</li> </ul>"},{"location":"DB/db13/#transaction-state","title":"Transaction State","text":"<ul> <li>Active \u2013 the initial state; the transaction stays in this state while it is executing</li> <li>Partially committed \u2013 after the final statement has been executed. \u8bed\u53e5\u6267\u884c\u5b8c\u4e86\uff0c\u51c6\u5907\u63d0\u4ea4\u3002\u80fd\u5426\u63d0\u4ea4\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u6267\u884c\u3002</li> <li>Failed -- after the discovery that normal execution can no longer proceed. \u4e0d\u80fd\u6b63\u5e38\u63d0\u4ea4\u3002\u6216\u8005\u662f\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u95ee\u9898\u3002</li> <li>Aborted \u2013 after the transaction has been rolled back and the database restored to its state prior to the start of the transaction.  Two options after it has been aborted:<ul> <li>restart the transaction</li> <li>kill the transaction</li> </ul> </li> <li>Committed \u2013 after successful completion.</li> </ul>"},{"location":"DB/db13/#concurrent-executions","title":"Concurrent Executions","text":"<ul> <li>increased processor and disk utilization</li> <li>reduced average response time </li> </ul> <p>\u4e8b\u52a1\u662f\u5e76\u53d1\u6267\u884c\u7684\uff0c\u5982\u679c\u4e0d\u52a0\u4ee5\u63a7\u5236\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898 Anomalies in Concurrent Executions</p> <ul> <li> <p>Lost Update\uff08\u4e22\u5931\u4fee\u6539\uff09 </p> Lost Update Example <p> </p> <p>\u4e00\u4e2a\u4eba\u8ba2\u7968\u540e\uff0c\u53e6\u4e00\u4e2a\u4eba\u8bfb\u5230\u8fd9\u91cc\u7b2c\u4e00\u4e2a\u4eba\u8fd8\u6ca1\u6709\u4fee\u6539\u7684\u4f59\u91cf\u3002\u5bfc\u81f4\u4e22\u5931\u4e86\u4e00\u6b21\u4fee\u6539\u3002</p> </li> <li> <p>Dirty Read\uff08\u8bfb\u810f\u6570\u636e\uff09</p> Dirty Read <p> </p> <p>\u4e00\u4e2a\u4eba\u8ba2\u7968\u540e\uff0c\u53e6\u4e00\u4e2a\u4eba\u8bfb\u6570\u636e\u540e\uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u4eba\u653e\u5f03\u4e86\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u4eba\u4ecd\u7136\u662f\u7528\u7684\u810f\u6570\u636e\u3002</p> </li> <li> <p>Unrepeatable Read \uff08\u4e0d\u53ef\u91cd\u590d\u8bfb\uff09</p> Unrepeatable Read <p> </p> <p>Isolation \u8981\u6c42\u6211\u4eec\u8bfb\u5230\u7684\u6570\u636e\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002</p> </li> <li> <p>Phantom Problem\uff08\u5e7d\u7075\u95ee\u9898\uff09</p> Phantom Problem <p> </p> <p>unrepeatable \u662f\u9488\u5bf9\u5df2\u7ecf\u5b58\u5728\u7684\u6570\u636e\uff0c\u4f46\u662f\u6570\u636e\u7684\u503c\u4e0d\u540c. Phantom \u662f\u6307\u6570\u636e\u6570\u91cf\u4f1a\u53d8\u591a/\u51cf\u5c11\u3002</p> </li> </ul>"},{"location":"DB/db13/#schedules","title":"Schedules","text":"<p>Schedule \u2013 a sequences of instructions that specify the chronological order in which instructions of concurrent transactions are executed. \u4e8b\u52a1\u7684\u6267\u987a\u5e8f\uff0c\u53ef\u4ee5\u662f\u4ea4\u53c9\u6267\u884c\u3002</p> Schedule Example <ul> <li> <p>\u4e32\u884c\u8c03\u5ea6 \u4e32\u884c\u8c03\u5ea6\u4e00\u5b9a\u662f\u6ee1\u8db3\u9694\u79bb\u6027\u7684      </p> </li> <li> <p>\u975e\u4e32\u884c\u8c03\u5ea6\uff0c\u4f46\u7b49\u4ef7\u4e8e\u4e0a\u9762\u7684\u4e32\u884c\u8c03\u5ea6      </p> <p>\u8fd9\u91cc T2 \u7684 readA \u548c T1 \u7684 readB \u53ef\u4ee5\u8c03\u6362\u65f6\u95f4\u6b21\u5e8f\uff0c\u5c31\u5f97\u5230\u4e86\u521a\u521a\u7684\u4e32\u884c\u8c03\u5ea6\u3002 \u4e0b\u9762\u8fd9\u6837\u7684\u8c03\u5ea6\u5c31\u4e0d\u7b49\u4ef7\uff0c\u7834\u574f\u4e86\u9694\u79bb\u6027\u3002  </p> </li> </ul>"},{"location":"DB/db13/#serializability","title":"Serializability","text":"<p>A (possibly concurrent) schedule is serializable if it is equivalent to a serial schedule.   </p> <ul> <li>conflict serializability(\u51b2\u7a81\u53ef\u4e32\u884c\u5316)</li> <li>view serializability(\u89c6\u56fe\u53ef\u4e32\u884c\u5316)</li> </ul> <p>\u4e32\u884c\u8c03\u5ea6\u4e00\u5b9a\u662f\u53ef\u4e32\u884c\u5316\u7684\uff0c\u4ea4\u9519\u6267\u884c\u4e0d\u4e00\u5b9a\u3002</p>"},{"location":"DB/db13/#conflict-serializability","title":"Conflict Serializability","text":"<p>\u6ce8\u610f\u8fd9\u91cc\u9488\u5bf9\u7684\u662f\u540c\u4e00\u4e2a\u6570\u636e\u9879 Q. </p> <p>a conflict between \\(l_i\\) and \\(l_j\\) forces a (logical) temporal order between them.   </p> <p>If a schedule S can be transformed into a schedule S\u00b4  by a series of swaps of non-conflicting instructions, we say that S and S\u00b4 are conflict equivalent. \u4ea4\u6362\u4e0d\u51b2\u7a81\u7684\u6307\u4ee4\uff0c\u5f97\u5230\u7684\u662f\u51b2\u7a81\u7b49\u4ef7\u7684\u8c03\u5ea6\u3002 We say that a schedule S is conflict serializable if it is conflict equivalent to a serial schedule. \u51b2\u7a81\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u4e32\u884c\u8c03\u5ea6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8c03\u5ea6\u662f\u53ef\u4e32\u884c\u7684\u3002</p>"},{"location":"DB/db13/#testing-for-serializability","title":"Testing for Serializability","text":"<p>Consider some schedule of a set of transactions \\(T_1, T_2, \\ldots, T_n\\) Precedence graph\uff08\u524d\u9a71\u56fe\uff09 \u2014 a directed graph where the vertices are the transactions (names).  </p> <p>\u5982\u679c T1 \u8981\u5728 T2 \u524d\u9762\uff08\u5373\u627e\u5230\u4e00\u6761 T1 \u7684\u6307\u4ee4\u8981\u6c42\u6bd4 T2 \u4e2d\u7684\u4e00\u6761\u6307\u4ee4\u5148\u6267\u884c\uff09\uff0c\u90a3\u6211\u4eec\u753b\u4e00\u6761\u4ece T1-&gt;T2 \u7684\u8fb9\u3002 \u5982\u679c\u627e\u5230\u73af\uff0c\u8bf4\u660e\u662f\u4e0d\u53ef\u4e32\u884c\u5316\u7684\u3002\u5426\u5219\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u3002</p> <p>Example</p> <p> </p> <p>T1 \u7684 readY \u548c T2 \u7684 writeY \u51b2\u7a81\uff0c\u6240\u4ee5\u8981\u753b\u4e00\u6761\u8fb9\uff0c\u5982\u6b64\u3002 \u6700\u540e\u6709 10 \u79cd\u8c03\u5ea6\u65b9\u5f0f\u3002</p> <p>\u53ea\u7528\u4e8e\u7406\u8bba\u7814\u7a76\uff0c\u6570\u636e\u5e93\u5185\u4e0d\u4f1a\u8fd9\u6837\u5b9e\u73b0\u3002</p>"},{"location":"DB/db13/#view-serializability","title":"View Serializability","text":"<p>Example</p> <p> </p> <p>\u521d\u59cb\u503c\u7531\u540c\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u5230\u3002\u4e2d\u95f4\u7ed3\u679c\u662f\u7531\u540c\u4e00\u4e2a\u4e8b\u52a1\u5f97\u5230\u518d\u7531\u53e6\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u51fa\u3002\u6700\u7ec8\u5199\u56de\u6570\u636e\u5e93\u4e5f\u662f\u7531\u540c\u4e00\u4e2a\u4e8b\u52a1\u5199\u3002</p> <p>A schedule S is view serializable if it is view equivalent to a serial schedule. Every conflict serializable schedule is also view serializable.  Below is a schedule which is view-serializable but not conflict serializable.  \u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\u90fd\u662f\u89c6\u56fe\u53ef\u4e32\u884c\u5316\u7684\uff0c\u53cd\u4e4b\u4e0d\u4e00\u5b9a\u3002</p> Example <p> </p> <p>\u7b49\u4ef7\u4e8e T27-28-29. (\u90fd\u662f 27 \u8bfb\u521d\u503c\uff0c\u4e2d\u95f4\u6ca1\u6709\u5176\u4ed6\u8bfb\uff0c\u6700\u540e\u662f 29 \u5199)</p>"},{"location":"DB/db13/#other-notions-of-serializability","title":"Other Notions of Serializability","text":"<p>\u6709\u7684\u8c03\u5ea6\u65e2\u4e0d\u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u53c8\u4e0d\u662f\u89c6\u56fe\u53ef\u4e32\u884c\u5316\uff0c\u4f46\u5b83\u662f\u53ef\u4e32\u884c\u5316\u7684\u3002</p> <p>Example</p> <p> </p> <p>\u7b49\u4ef7\u4e8e T1-T5. \u52a0\u51cf\u64cd\u4f5c\u662f\u53ef\u7ed3\u5408\u7684\uff0c\u8fd9\u91cc\u9700\u8981\u4e86\u89e3\u4e8b\u52a1\u91cc\u5177\u4f53\u662f\u4ec0\u4e48\u64cd\u4f5c\u3002\u4f46\u6211\u4eec\u7684\u7b80\u5355\u6a21\u578b\u5bf9\u6b64\u4e0d\u52a0\u4ee5\u533a\u5206\u3002</p>"},{"location":"DB/db13/#recoverable-schedules","title":"Recoverable Schedules","text":"<p>Recoverable schedule(\u53ef\u6062\u590d\u8c03\u5ea6) \u2014 if a transaction \\(T_j\\) reads a data item previously written by a transaction \\(T_i\\) , then the commit operation of \\(T_i\\)  appears before the commit operation of \\(T_j\\).</p> <p>Example</p> <p>The following schedule (Schedule 11) is not recoverable if T9 commits immediately after the read. \u53ef\u80fd\u4f1a\u8bfb\u810f\u6570\u636e  </p> <p>\u5982\u679c T8 \u540e\u7eed\u56de\u6eda, \u4f46 T9 \u5df2\u7ecf\u57fa\u4e8e\u810f\u6570\u636e\u505a\u4e86\u540e\u7eed\u64cd\u4f5c\uff0c\u800c\u4e14\u5df2\u7ecf\u63d0\u4ea4\u4e86\uff0c\u4e0d\u53ef\u6062\u590d\u3002  </p> <p>\u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u4e86\u53e6\u4e00\u4e2a\u4e8b\u52a1\u7684\u810f\u6570\u636e\uff0c\u63d0\u4ea4\u6b21\u5e8f\u9700\u8981\u6709\u7ea6\u675f\uff0c\u8981\u5728\u88ab\u8bfb\u4e8b\u52a1\u7684\u540e\u9762\u63d0\u4ea4\u3002</p>"},{"location":"DB/db13/#cascading-rollbacks","title":"Cascading Rollbacks","text":"<p>Cascading rollback \u2013 a single transaction failure leads to a series of transaction rollbacks.  Consider the following schedule where none of the transactions has yet committed (so the schedule is recoverable)</p> <p>Example</p> <p>If T10 fails, T11 and T12 must also be rolled back.  </p> <p>\u8981\u6709\u7ea7\u8054\u56de\u6eda\u7684\u6062\u590d\u3002 Can lead to the undoing of a significant amount of work. \u6211\u4eec\u66f4\u5e0c\u671b\u7528\u975e\u7ea7\u8054\u7684\u6062\u590d\uff0c\u5426\u5219\u5f00\u9500\u592a\u5927\u3002</p>"},{"location":"DB/db13/#transaction-isolation-levels","title":"Transaction Isolation Levels","text":"<p>A database must provide a mechanism that will ensure that all possible schedules are </p> <ul> <li>either conflict or view serializable, and  \u4fdd\u8bc1\u53ef\u4e32\u884c\u7684</li> <li>are recoverable and preferably cascadeless \u4fdd\u8bc1\u53ef\u6062\u590d\u7684\uff08\u6700\u597d\u662f\u975e\u7ea7\u8054\uff09</li> </ul> <p>\u6570\u636e\u5e93\u91cc\u63d0\u4f9b\u4e00\u79cd\u534f\u8bae\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u8981\u9075\u4ece\u534f\u8bae\uff0c\u9075\u4ece\u534f\u8bae\u4e0b\u4ea7\u751f\u7684\u8c03\u5ea6\u4e00\u5b9a\u662f\u53ef\u4e32\u884c\u3001\u53ef\u6062\u590d\u7684\u3002 \u8fd9\u662f\u5b8c\u5168\u7684\u9694\u79bb\uff0c\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\u3002</p> <p>In SQL <code>set transaction isolation level serializable</code> \u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u6570\u636e\u5e93\u7684\u9694\u79bb\u7ea7\u522b\u3002</p> <ul> <li>Serializable \u2014 default \u56db\u79cd\u95ee\u9898\u90fd\u8981\u907f\u514d\uff0c\u4ee3\u4ef7\u6700\u9ad8\u3002</li> <li>Repeatable read \u2014 only committed records to be read, repeated reads of same record must return same value.  However, a transaction may not be serializable \u2013 it may find some records inserted by a transaction but not find others. \u4e0d\u7ba1\u5e7d\u7075\u95ee\u9898\u3002</li> <li>Read committed \u2014 only committed records can be read, but successive reads of record may return different (but committed) values. \u4fdd\u8bc1\u4e0d\u8bfb\u810f\u6570\u636e\u3002</li> <li>Read uncommitted \u2014 even uncommitted records may be read. \u6700\u4f4e\u7684\u9694\u79bb\u7ea7\u522b\uff0c\u6709\u4e9b\u6570\u636e\u5e93\u53ea\u662f\u505a\u7edf\u8ba1\u4efb\u52a1\u3002</li> </ul> <p>Lower degrees of consistency useful for gathering approximate information about the database </p>"},{"location":"DB/db13/#concurrency-control-protocols","title":"Concurrency Control Protocols","text":"<ul> <li>Lock-Based Protocols<ul> <li>Lock on whole database vs lock on items \u8bfb\u4e4b\u524d\u8981\u8bbf\u95ee\u4e00\u4e2a\u5171\u4eab\u9501\uff0c\u5199\u4e4b\u524d\u8981\u8bbf\u95ee\u4e00\u4e2a\u6392\u4ed6\u9501\uff0c\u51b2\u7a81\u4e86\u5c31\u8981\u7b49\u5f85\u3002\u901a\u8fc7\u9501\u5c31\u89c4\u5b9a\u4e86\u4e00\u4e2a\u6267\u884c\u7684\u6b21\u5e8f\u3002</li> <li>How long to hold lock?</li> <li>Shared vs exclusive locks</li> </ul> </li> <li>Timestamp-Based  Protocols<ul> <li>Transaction timestamp assigned e.g. when a transaction begins  \u4e8b\u52a1\u6267\u884c\u65f6\u5206\u914d\u4e00\u4e2a\u65f6\u95f4\u6233\u3002\u6267\u884c\u6b21\u5e8f\u6309\u7167\u65f6\u95f4\u6233\u6392\u5e8f\u3002</li> <li>Data items store two timestamps<ul> <li>Read timestamp</li> <li>Write timestamp</li> </ul> </li> <li>Timestamps are used to detect out of order accesses</li> </ul> </li> <li>Validation-Based  Protocols<ul> <li>Optimistic concurrency control </li> <li>Low rate of conflicts among transactions</li> <li>Each transaction must go through 3 phases: Read phase -&gt; Validation phase -&gt; Write phase \u4e8b\u52a1\u63d0\u4ea4\u7684\u65f6\u5019\u5148\u53bb\u9a8c\u8bc1\u662f\u5426\u6709\u51b2\u7a81\uff0c\u5982\u679c\u6ca1\u6709\u51b2\u7a81\u5c31\u63d0\u4ea4\uff0c\u5982\u679c\u51b2\u7a81\u5c31\u8003\u8651\u653e\u5f03\u67d0\u4e2a\u3002</li> </ul> </li> </ul>"},{"location":"DB/db14/","title":"Concurrency Control","text":"Abstract <ul> <li>Lock-Based Protocols\uff08\u57fa\u4e8e\u9501\u7684\u534f\u8bae\uff09</li> <li>Deadlock Handling \uff08\u6b7b\u9501\u5904\u7406\uff09</li> <li>Multiple Granularity \uff08\u591a\u7c92\u5ea6\uff09</li> <li>Insert and Delete Operations</li> <li>Multiversion Schemes \uff08\u591a\u7248\u672c\u673a\u5236\uff09</li> <li>Timestamp-Based Protocols \uff08\u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u534f\u8bae\uff09</li> <li>Validation-Based Protocols \uff08\u57fa\u4e8e\u6709\u6548\u6027\u7684\u534f\u8bae\uff09</li> </ul>"},{"location":"DB/db14/#lock-based-protocols","title":"Lock-Based Protocols","text":"<p>A lock is a mechanism to control concurrent access to a data item</p> <ul> <li>exclusive(X) Data item can be both read as well as written. X-lock is requested using lock-X instruction.</li> <li>shared(X) Data item can only be read. S-lock is requested using lock-S instruction.</li> </ul> <p>\u8981\u5199\u4e00\u4e2a\u6570\u636e\uff0c\u5148\u7533\u8bf7\u83b7\u5f97 X \u9501\uff1b\u8981\u8bfb\u4e00\u4e2a\u6570\u636e\uff0c\u5148\u7533\u8bf7\u83b7\u5f97 S \u9501\u3002 \u8bbf\u95ee\u7ed3\u675f\u540e\u91ca\u653e\u8fd9\u4e2a\u9501\u3002</p> <p>\u8bbf\u95ee\u6570\u636e\u4e4b\u524d\u5fc5\u987b\u83b7\u5f97\u5bf9\u5e94\u7684\u9501\uff0c\u5426\u5219\u9700\u8981\u7b49\u5f85\u3002</p>"},{"location":"DB/db14/#the-two-phase-locking-protocol","title":"The Two-Phase Locking Protocol","text":"<p>\u4e8b\u52a1\u7684\u52a0\u9501\u548c\u51cf\u9501\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\u3002  </p> <ul> <li>Phase 1: Growing Phase (\u589e\u957f\u9636\u6bb5)<ul> <li>transaction may obtain locks </li> <li>transaction may not release locks</li> </ul> </li> <li>Phase 2: Shrinking Phase(\u7f29\u51cf\u9636\u6bb5)<ul> <li>transaction may release locks</li> <li>transaction may not obtain locks \u4e00\u4e2a\u4e8b\u52a1\u4e00\u65e6\u5f00\u59cb\u91ca\u653e\u9501\uff0c\u5c31\u4e0d\u80fd\u518d\u52a0\u9501\u4e86\u3002</li> </ul> </li> </ul> <p>\u4e8b\u52a1\u4e24\u4e2a\u9636\u6bb5\u7684\u5206\u754c\u7ebf(lock point), \u5373\u83b7\u5f97\u4e86\u6700\u540e\u4e00\u4e2a\u9501\uff08\u5b8c\u6210\u83b7\u5f97\u8fd9\u4e2a\u52a8\u4f5c\uff09\u7684\u65f6\u95f4\u70b9\u3002 \u8fd9\u6837\u6bcf\u4e2a\u4e8b\u52a1\u90fd\u6709\u4e00\u4e2a lock point, \u6309\u7167\u8fd9\u4e2a\u65f6\u95f4\u6392\u5e8f\u5373\u53ef\u5f97\u5230\u4e32\u884c\u5316\u7684\u6267\u884c\u987a\u5e8f\u3002</p> Example <p> </p> <p>Two-Phase Locking Protocol assures serializability. </p> <p>It can be proved that the transactions can be serialized in the order of their lock points. \u53ef\u4ee5\u6309 lock points \u4e32\u884c\u5316\uff0c\u4f46\u4e0d\u662f\u53ea\u80fd\u6309\u7167\u8fd9\u4e48\u4e32\u884c\u5316\u3002</p> <p>\u4e0a\u9762\u57fa\u672c\u7684\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u65e0\u6cd5\u4fdd\u8bc1\u4e8b\u52a1\u7684\u53ef\u6062\u590d\u6027\u3002</p> <p>Extensions to basic two-phase locking\uff08\u57fa\u672c\u4e24\u9636\u6bb5\u5c01\u9501\uff09 needed to ensure recoverability of freedom from cascading roll-back</p> <ul> <li>Strict two-phase locking\uff08\u4e25\u683c\u4e24\u9636\u6bb5\u5c01\u9501\uff09: a transaction must hold all its exclusive locks till it commits/aborts. Ensures recoverability and avoids cascading roll-backs. S \u9501\u53ef\u4ee5\u7528\u5b8c\u5c31\u653e\uff0c\u4f46 X \u9501\u5fc5\u987b\u5230\u63d0\u4ea4\u7684\u65f6\u5019\u624d\u80fd\u91ca\u653e\uff08\u8fd9\u6837\u522b\u4eba\u5c31\u4e0d\u80fd\u8bbf\u95ee\u4e86\uff0c\u65e0\u6cd5\u8bfb\u810f\u6570\u636e\uff09\u3002\u4ee3\u4ef7\u662f\u964d\u4f4e\u5e76\u53d1\u5ea6\u3002</li> <li>Rigorous two-phase locking\uff08\u5f3a\u4e24\u9636\u6bb5\u5c01\u9501\uff09: a transaction must hold all locks till commit/abort.  Transactions can be serialized in the order in which they commit.  </li> </ul> <p>Two-phase locking is not a necessary condition for serializability. </p> Example <p> </p> <p>\u8fd9\u91cc\u653e\u9501\u4e86\u4e4b\u540e\u8fd8\u83b7\u5f97\u9501\u4e86\uff0c\u8fdd\u80cc\u4e86\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u3002 \u6240\u4ee5\u4e0d\u9075\u4ece\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff0c\u4e5f\u53ef\u4ee5\u83b7\u5f97\u51b2\u7a81\u53ef\u4e32\u884c\u7684\u8c03\u5ea6\u3002</p>"},{"location":"DB/db14/#2pl-proof","title":"2PL - Proof","text":"<ul> <li>Proof by Contradiction \u5982\u679c\u6709 Ti-&gt;Tj \u7684\u6709\u5411\u8fb9\uff0c\u90a3 Ti \u7684 lockpoint \u4e00\u5b9a\u5c0f\u4e8e Tj. Ti-&gt;Tj \u80af\u5b9a\u6709\u4e00\u4e2a\u51b2\u7a81\u7684\u8bbf\u95ee\uff08\u5bf9\u540c\u4e00\u4e2a\u6570\u636e\uff09\u90a3 Tj \u5728\u83b7\u5f97\u9501\u7684\u65f6\u5019 Ti \u5df2\u7ecf\u653e\u9501\u4e86\uff0c\u5f97\u8bc1\u3002</li> </ul> <ul> <li>Proof by Induction \u53ea\u9700\u8bc1\u660e: Lock point \u6700\u5c0f\u7684\u4e8b\u52a1\uff0c\u53ef\u4ee5\u65e0\u969c\u788d\u5730\u4ea4\u6362\u5230\u8c03\u5ea6\u6700\u524d\u3002 \u5047\u5982\u6709\u4e8b\u52a1\u62e6\u4f4f\u4ed6\u4e86\uff0c\u8bc1\u660e\u8fd9\u662f\u4e0d\u53ef\u80fd\u53d1\u751f\u7684\u3002\uff08\u4e0e lockpoint \u6700\u5c0f\u77db\u76fe\uff09</li> </ul>"},{"location":"DB/db14/#lock-conversions","title":"Lock Conversions","text":"<p>\u901a\u5e38\u662f\u5148\u8bfb\u540e\u4fee\u6539\u3002\u4f46\u6211\u4eec\u4e0d\u80fd\u5148\u5f97 S \u9501\u518d\u91ca\u653e\u540e\u5f97 X \u9501\uff08\u8fdd\u80cc\u4e86\u4e24\u9636\u6bb5\u534f\u8bae\uff09\uff0c\u4e5f\u4e0d\u80fd\u76f4\u63a5\u7528 X \u9501\uff08\u964d\u4f4e\u5e76\u53d1\u5ea6\uff09\u3002</p> <p>Two-phase locking with lock conversions:</p> <ul> <li>First Phase:        <ul> <li>can acquire a lock-S or lock-X on a data item</li> <li>can convert a lock-S to a lock-X (lock-upgrade)</li> </ul> </li> <li>Second Phase:<ul> <li>can release a lock-S or lock-X</li> <li>can convert a lock-X to a lock-S (lock-downgrade)</li> </ul> </li> </ul> <p>This protocol assures serializability.</p> <p>\u7533\u8bf7\u54ea\u4e2a\u9501\u662f\u7531\u6570\u636e\u5e93\u5185\u90e8\u7ba1\u7406\u51b3\u5b9a\uff0c\u4e0d\u662f\u7531\u7a0b\u5e8f\u5458\u663e\u793a\u8c03\u7528\u3002\uff08\u81ea\u52a8\u52a0\u9501\uff09</p> <p>\u5982\u679c\u5df2\u7ecf\u6709\u9501\u4e86\uff0c\u76f4\u63a5\u8bfb\uff1b\u5426\u5219\u7533\u8bf7\u8bfb\u9501\u3002</p>"},{"location":"DB/db14/#implementation-of-locking","title":"Implementation of Locking","text":"<p>A lock manager can be implemented as a separate process to which transactions send lock and unlock requests.  </p>"},{"location":"DB/db14/#lock-table","title":"Lock Table","text":"<p>Lock table records granted locks and waiting requests.  </p> <p>\u6bcf\u4e2a\u8bb0\u5f55\u7684 id \u53ef\u4ee5\u653e\u8fdb\u54c8\u5e0c\u8868\u3002 \u5982\u8fd9\u91cc\u8bb0\u5f55 123, T1\u3001T8 \u83b7\u5f97\u4e86 S \u9501\uff0c\u4f46 T2 \u5728\u7b49\u5f85\u83b7\u5f97 X \u9501\u3002  </p> <p>T1: lock-X(D) \u901a\u8fc7 D \u7684 id \u627e\u5230\u54c8\u5e0c\u8868\u4e0a\u7684\u9879\uff0c\u5728\u5bf9\u5e94\u9879\u4e0a\u589e\u52a0\u3002\u6839\u636e\u662f\u5426\u76f8\u5bb9\u51b3\u5b9a\u662f\u83b7\u5f97\u9501\u8fd8\u662f\u7b49\u5f85\u3002 unlock \u7c7b\u4f3c\uff0c\u5148\u627e\u5230\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u62ff\u6389\u5bf9\u5e94\u7684\u9879\u3002\u540c\u65f6\u770b\u540e\u7eed\u7684\u9879\u662f\u5426\u53ef\u4ee5\u83b7\u5f97\u9501\u3002</p> <p>\u5982\u679c\u4e00\u4e2a\u4e8b\u52a1 commit, \u9700\u8981\u653e\u6389\u6240\u6709\u7684\u9501\uff0c\u6211\u4eec\u9700\u8981\u53bb\u627e\u3002\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u4e8b\u52a1\u7684\u8868\uff0c\u6807\u660e\u6bcf\u4e2a\u4e8b\u52a1\u6240\u7528\u7684\u9501\u3002</p>"},{"location":"DB/db14/#deadlock-handling","title":"Deadlock Handling","text":"<p>System is deadlocked if there is a set of transactions such that every transaction in the set is waiting for another transaction in the set.</p> <p>Two-phase locking does not ensure freedom from deadlocks.</p> <p>Deadlock prevention protocols ensure that the system will never enter into a deadlock state. Some prevention strategies:</p> <ul> <li>Require that each transaction locks all its data items before it begins execution (predeclaration). \u6267\u884c\u524d\u4e00\u6b21\u6027\u83b7\u5f97\u6240\u6709\u9501\u3002</li> <li>Impose partial ordering of all data items and require that a transaction can lock data items only in the order specified by the partial order (graph-based protocol). \u5bf9\u6570\u636e\u8bbf\u95ee\u89c4\u5b9a\u4e00\u79cd\u6b21\u5e8f\u3002\u6bd4\u5982\u89c4\u5b9a\u5fc5\u987b\u5148\u62ff\u5496\u5561\u518d\u62ff\u5496\u5561\u4f34\u4fa3\u3002 e.g. T1: A-50, B+50. T2: B-10, A+10. \u6211\u4eec\u53ef\u4ee5\u628a\u7b2c\u4e8c\u4e2a\u4e8b\u52a1\u8c03\u6362\u987a\u5e8f\uff0c\u53d8\u4e3a A+10, B-10. \u8fd9\u6837\u6309\u7167 partial order \u80fd\u964d\u4f4e\u6b7b\u9501\u6982\u7387\u3002</li> <li>Timeout-Based Schemes:  <ul> <li>a transaction waits for a lock only for a specified amount of time. After that, the wait times out and the transaction is rolled back.  \u7b49\u5f85\u4e00\u4f1a\uff0c\u5982\u679c\u8fd8\u662f\u7b49\u4e0d\u5230\u5c31\u653e\u5f03\u3002</li> <li>thus deadlocks are not possible.  </li> <li>simple to implement; but starvation is possible. Also difficult to determine good value of the timeout interval. \u65f6\u957f\u4e0d\u597d\u89c4\u5b9a\u3002\u4f46\u53ef\u80fd\u6709\u4e8b\u52a1\u8001\u662f\u7533\u8bf7\u4e0d\u5230\u81ea\u5df1\u7684\u9501\u3002</li> </ul> </li> </ul>"},{"location":"DB/db14/#deadlock-detection","title":"Deadlock Detection","text":"<p>\u5b9a\u671f\u68c0\u67e5\u6570\u636e\u5e93\u5185\u662f\u5426\u6709\u6b7b\u9501\uff0c\u5982\u679c\u6709\u5c31\u9009\u62e9\u4e00\u4e2a\u4e8b\u52a1\u5c06\u5176\u56de\u6eda\u3002  </p> <p>wait-for graph</p> <p>\u8fd9\u91cc\u7684\u7bad\u5934\u8868\u793a\u5728\u7b49\u5f85\u9501\u3002\u5982 T17-&gt;T18 \u8868\u793a T17 \u5728\u7b49\u5f85 T18 \u7684\u9501\u3002 \u5982\u679c\u5f62\u6210\u4e86\u73af\uff0c\u5c31\u8bf4\u660e\u51fa\u73b0\u4e86\u6b7b\u9501\u3002</p> <p>\u901a\u8fc7\u521a\u521a\u7684 Lock Table, \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7b49\u5f85\u5173\u7cfb\u3002\uff08\u540e\u9762\u7684 waited \u7b49\u5f85\u524d\u9762\u7684 granted\uff09</p> <p>When deadlock is  detected :</p> <ul> <li> <p>Some transaction will have to rolled back (made a victim) to break deadlock.  Select that transaction as victim that will incur minimum cost.  </p> </li> <li> <p>Rollback -- determine how far to roll back transaction</p> <ul> <li>Total rollback: Abort the transaction and then restart it.</li> <li>More effective to roll back transaction only as far as necessary to break deadlock. Starvation happens if same transaction is always chosen as victim. Include the number of rollbacks in the cost factor to avoid starvation</li> </ul> </li> </ul> Example <p> </p> <p>T1 \u7b49 T2, T2 \u7b49 T6, T6 \u7b49 T1.(\u6ce8\u610f\u8fd9\u91cc T5 \u662f\u7b49\u5f85 T6 \u800c\u4e0d\u662f T2)</p>"},{"location":"DB/db14/#graph-based-protocols","title":"Graph-Based Protocols","text":"<p>\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u6570\u636e\u662f\u6309\u504f\u5e8f\u8bbf\u95ee\u7684\uff0c\u53ef\u4ee5\u6709\u66f4\u9ad8\u7ea7\u7684\u534f\u8bae\u3002 \u6570\u636e\u6309\u7167\u67d0\u79cd\u504f\u5e8f\u5173\u7cfb\u8bbf\u95ee\u3002</p> <p>The tree-protocol is a simple kind of graph protocol. </p> <ul> <li>Only exclusive locks are allowed. \u53ea\u6709\u8fd9\u79cd\u9501\u3002</li> <li>The first lock by Ti may be on any data item. Subsequently, a data Q can be locked by Ti only if the parent of Q is currently locked by Ti. \u7b2c\u4e00\u4e2a\u9501\u53ef\u4ee5\u653e\u4efb\u610f\u5730\u65b9\uff0c\u540e\u9762\u7684\u9501\u53ea\u80fd\u5728\u7236\u8282\u70b9\u9501\u4f4f\u65f6\u624d\u80fd\u5f80\u4e0b\u9501\u3002</li> <li>Data items may be unlocked at any time.  </li> <li>A data item that has been locked and unlocked by Ti  cannot subsequently be relocked by Ti  \u653e\u4e86\u4e4b\u540e\u4e0d\u80fd\u518d\u52a0\u9501\u4e86\u3002  </li> </ul> Example <p> </p> <p>\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u5148\u9501 D, \u968f\u540e\u9501 G, \u653e\u6389, \u9501 H, \u8fd9\u65f6 D \u5df2\u7ecf\u6ca1\u7528\u4e86\u53ef\u4ee5\u653e\u6389\u3002\u968f\u540e\u6211\u4eec\u9501 J, H \u4e5f\u5c31\u6ca1\u7528\u4e86\u4e5f\u53ef\u4ee5\u653e\u6389\u3002\u6700\u540e\u653e\u6389  J. </p> <p>The tree protocol ensures conflict serializability as well as freedom from deadlock. </p> <ul> <li>Advantages<ul> <li>Unlocking may occur earlier in the tree-locking protocol than in the two-phase locking protocol. shorter waiting times, and increase in concurrency \u9501\u53ef\u4ee5\u66f4\u65e9\u91ca\u653e\uff0c\u4e0d\u7528\u7b49\u5f85\u7b2c\u4e8c\u9636\u6bb5\u3002\u7528\u5b8c\u5c31\u53ef\u4ee5\u653e\uff0c\u63d0\u9ad8\u4e86\u5e76\u53d1\u5ea6\u3002</li> <li>protocol is deadlock-free no rollbacks are required</li> </ul> </li> <li>Disadvantages<ul> <li>Protocol does not guarantee recoverability or cascade freedom Need to introduce commit dependencies to ensure recoverability \u65e9\u653e\u9501\uff0c\u610f\u5473\u7740\u53ef\u80fd\u4f1a\u8bfb\u810f\u6570\u636e\uff0c\u4e0d\u53ef\u6062\u590d\u3002\u8fd9\u5c31\u5bf9 commit \u987a\u5e8f\u6709\u8981\u6c42\u3002</li> <li>Transactions may have to lock more data items than needed.<ul> <li>increased locking overhead, and additional waiting time \u6bd4\u5982\u521a\u521a\u7684\u56fe\u4e2d\uff0c\u6211\u4eec\u8bbf\u95ee G, J, \u9700\u8981\u4ece D \u5f00\u59cb\u8bbf\u95ee\u3002\u4f1a\u9501\u4e0a\u66f4\u591a\u6570\u636e\u3002  </li> <li>potential decrease in concurrency</li> </ul> </li> </ul> </li> </ul>"},{"location":"DB/db14/#multiple-granularity","title":"Multiple Granularity","text":"<p>\u53ef\u4ee5\u9501\u5728\u8bb0\u5f55\u4e0a(\u5982 <code>update table set ...;</code>)\uff0c\u4e5f\u53ef\u4ee5\u9501\u5728\u6574\u4e2a\u8868\u4e0a(\u5982 <code>select * from table;</code>)\u3002  </p> <p>Granularity of locking (level in tree where locking is done):</p> <ul> <li>fine granularity\uff08\u7ec6\u7c92\u5ea6\uff09 (lower in tree): high concurrency, high locking overhead</li> <li>coarse granularity\uff08\u7c97\u7c92\u5ea6\uff09 (higher in tree): low locking overhead, low concurrency</li> </ul> Example of Granularity Hierarchy <p> </p> <p>The levels, starting from the coarsest (top) level are</p> <ul> <li>database</li> <li>area </li> <li>File(table)</li> <li>record   </li> </ul>"},{"location":"DB/db14/#intention-lock-modes","title":"Intention Lock Modes","text":"<p>\u8bb0\u5f55\u548c\u8868\u4e0a\u90fd\u53ef\u4ee5\u52a0 S/X \u9501\u3002\u4f46\u662f\u5f53\u4e8b\u52a1\u6d89\u53ca\u5230\u591a\u4e2a\u7c92\u5ea6\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u51b2\u7a81\uff0c\u5982\u4e00\u4e2a\u8868\u7684 S \u9501\u548c\u4e00\u4e2a\u8bb0\u5f55\u7684 X \u9501\u662f\u51b2\u7a81\u7684\u3002 \u6211\u4eec\u5f15\u5165\u4e86\u5176\u4ed6\u9501\uff0c\u610f\u5411\u9501(IS, IX, SIX)</p> <ul> <li>\u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8981\u7ed9\u4e00\u4e2a\u8bb0\u5f55\u52a0 S \u9501\uff0c\u90a3\u4e5f\u8981\u5728\u8868\u4e0a\u52a0 IS \u9501\u3002\uff08\u610f\u5411\u5171\u4eab\u9501\uff09</li> <li>\u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8981\u7ed9\u4e00\u4e2a\u8bb0\u5f55\u52a0 X \u9501\uff0c\u90a3\u4e5f\u8981\u5728\u8868\u4e0a\u52a0 IX \u9501\u3002\uff08\u610f\u5411\u6392\u4ed6\u9501\uff09</li> <li>SIX \u9501\u662f S \u548c IX \u9501\u7684\u7ed3\u5408\u3002\u8981\u8bfb\u6574\u4e2a\u8868\uff0c\u4f46\u53ef\u80fd\u5bf9\u5176\u4e2d\u67d0\u4e9b\u8bb0\u5f55\u8fdb\u884c\u4fee\u6539\u3002\uff08\u5171\u4eab\u610f\u5411\u6392\u4ed6\uff09  </li> </ul> <p>\u8fd9\u6837\u5f53\u6211\u4eec\u60f3\u5411\u4e00\u4e2a\u8868\u4e0a S \u9501\u65f6\uff0c\u53d1\u73b0\u8868\u4e0a\u6709 IX \u9501\uff0c\u8fd9\u6837\u6211\u4eec\u5f88\u5feb\u5c31\u53d1\u73b0\u4e86\u51b2\u7a81\uff0c\u9700\u8981\u7b49\u5f85\u3002 IS \u548c IX \u662f\u4e0d\u51b2\u7a81\u7684\u3002\u5728\u8868\u4e0a\u662f\u4e0d\u51b2\u7a81\u7684\uff0c\u53ef\u80fd\u5728\u8bb0\u5f55\u4e0a\u51b2\u7a81\uff08\u5373\u5bf9\u4e00\u4e2a\u8bb0\u5f55\u53c8\u8bfb\u53c8\u5199\uff0c\u51b2\u7a81\u53d1\u751f\u5728\u8bb0\u5f55\u5c42\u9762\u800c\u975e\u8868\uff09\u3002</p> <ul> <li>intention-shared (IS): indicates explicit locking at a lower level of the tree but only with shared locks. \u5728\u4e0b\u9762\u4f1a\u52a0 S \u9501\u3002</li> <li>intention-exclusive (IX): indicates explicit locking at a lower level with exclusive or shared locks \u5728\u4e0b\u9762\u4f1a\u52a0 X \u9501\u3002</li> <li>shared and intention-exclusive (SIX): the subtree rooted by that node is locked explicitly in shared mode and explicit locking is being done at a lower level with exclusive-mode locks.</li> </ul> <p>\u8981\u7b26\u5408\u76f8\u5bb9\u77e9\u9635\u3002\u4ece\u6700\u7c97\u7684\u7c92\u5ea6\u5f00\u59cb\u8bbf\u95ee\u3002\u8981\u52a0\u9501\u7684\u65f6\u5019\u6ce8\u610f\uff0c\u5bf9\u7236\u4eb2\u7684\u9501\u6709\u8981\u6c42\u3002</p> Example <p> </p> <p>\u52a0\u9501\u662f\u4ece\u4e0a\u5f80\u4e0b\uff0c\u653e\u9501\u662f\u4ece\u4e0b\u5f80\u4e0a\u3002 \u5148\u5bf9 DB \u52a0 IX, \u5bf9 A1 \u52a0 IX, \u5bf9 Fa \u52a0 SIX, \u5bf9\u67d0\u4e9b\u8bb0\u5f55\u52a0 X. \u5176\u4ed6\u8bb0\u5f55\u5c31\u4e0d\u7528\u518d\u52a0 S \u9501\u4e86(\u56e0\u4e3a\u8868\u662f SIX).  </p>"},{"location":"DB/db14/#insert-and-delete-operations","title":"Insert and Delete Operations","text":"<p>\u6570\u636e\u5e93\u91cc\u9664\u4e86 R/W \u8fd8\u6709\u63d2\u5165\u3001\u5220\u9664\u7b49\u64cd\u4f5c\u3002 \u9700\u8981\u5b9a\u4e49 R/W \u548c\u63d2\u5165/\u5220\u9664\u662f\u5426\u51b2\u7a81\u3002</p> <p>If two-phase locking is used :</p> <ul> <li>A delete operation may be performed only if the transaction deleting the tuple has an exclusive lock on the tuple to be deleted. \u5220\u9664\u524d\u9700\u8981\u52a0 X \u9501\u3002</li> <li>A transaction that inserts a new tuple into the database is given an X-mode lock on the tuple \u63d2\u5165\u4e4b\u524d\u662f\u6ca1\u6709\u8fd9\u4e2a\u6570\u636e\u7684\uff0c\u65e0\u6cd5\u5148\u52a0\u9501\u3002\u5e94\u8be5\u63d2\u5165\u4e4b\u540e\u9a6c\u4e0a\u52a0\u4e0a X \u9501\u3002</li> </ul> <p>Insertions and deletions can lead to the phantom phenomenon. \u56e0\u6b64\u53ea\u662f\u52a0\u9501\u4e0d\u80fd\u4fdd\u8bc1\u4e32\u884c\u5316\u3002  </p>"},{"location":"DB/db14/#index-locking-protocol","title":"Index Locking Protocol","text":"<p>\u5176\u5b9e\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\u9690\u542b\u5730\u4fee\u6539\u4e86\u4fe1\u606f\uff0c\u53ea\u662f\u6ca1\u6709\u88ab\u8868\u793a\u51fa\u6765\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e2a\u4fe1\u606f\u663e\u793a\u5316\uff0c\u52a0\u9501\u3002 \u5982\u679c\u8868\u4e0a\u6709\u7d22\u5f15\uff0c\u6211\u4eec\u5728\u626b\u63cf\u7d22\u5f15\u7684\u65f6\u5019\u4f1a\u5728\u53f6\u5b50\u4fee\u6539\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u8fdb\u884c\u68c0\u6d4b\u3002</p> Index Locking on a B+ -Tree <p> </p> <p>\u5148\u5728\u53f6\u5b50\u9875\u52a0\u9501\uff0c\u518d\u5728\u8bb0\u5f55\u4e0a\u52a0\u9501\u3002 \u5982\u679c\u6211\u4eec\u8981\u63d2\u5165\uff0c\u6bd4\u5982 18. \u8fd9\u65f6\u63d2\u5165\u5230\u4e86 10 \u8fd9\u9875\uff0c\u53d1\u73b0\u8fd9\u9875\u88ab\u9501\u4f4f\u4e86\uff0c\u65e0\u6cd5\u63d2\u5165\uff0c\u8fd9\u6837\u5c31\u786e\u4fdd\u4e86\u8fd9\u4e2a\u8303\u56f4\u5185\u65e0\u6cd5\u88ab\u63d2\u5165\uff0c\u4e0d\u4f1a\u6709\u5e7d\u7075\u95ee\u9898\u3002  </p> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8c13\u8bcd\u9501\u3002\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u9501\u4e0a\uff08\u6bd4\u5982\u521a\u521a 11 \u5230 50 \u8fd9\u4e2a\u533a\u95f4\uff09\uff0c\u540e\u7eed\u5982\u679c\u8981\u63d2\u5165 18 \u843d\u5165\u8fd9\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u5c31\u80fd\u68c0\u67e5\u51fa\u6765\u3002\u4f46\u8fd9\u6837\u5b9e\u73b0\u662f\u6bd4\u8f83\u590d\u6742\u7684\u3002</p>"},{"location":"DB/db14/#next-key-locking-to-prevent-phantoms","title":"Next-Key Locking To Prevent Phantoms","text":"<p>\u521a\u521a\u7684\u4f8b\u5b50\u4e2d, 10 \u4e0d\u5728\u8303\u56f4\u5185\uff0c\u4f46\u6211\u4eec\u628a\u8fd9\u9875\u90fd\u9501\u4f4f\u4e86\uff0c\u4ecd\u7136\u63d2\u4e0d\u8fdb\u53bb\uff0c\u5f71\u54cd\u4e86\u5e76\u53d1\u5ea6\u3002 </p> <p>Next-key locking protocol: provides higher concurrency</p> <ul> <li>Lock all values that satisfy index lookup (match lookup value, or fall in lookup range)</li> <li>Also lock next key value in index even for inserts/deletes</li> <li>Lock mode: S for lookups, X for insert/delete/update</li> </ul> <p>Next-Key Locking</p> <p> </p> <p>\u67e5\u8be2 7 \u5230 16, \u6211\u4eec\u628a\u7d22\u5f15\u9879\u9501\u8d77\u6765\uff0c\u628a\u4e0b\u4e00\u4e2a\u7d22\u5f15\u503c 18 \u4e5f\u9501\u8d77\u6765\u3002\u63d2\u5165\u7684\u65f6\u5019\u8981\u7533\u8bf7\u8fd9\u4e2a\u9501\u548c\u6bd4\u63d2\u5165\u503c\u5927\u7684\u4e0b\u4e00\u4e2a\u503c\u7684\u9501\uff0c\u8fd9\u91cc\u63d2\u5165 15 \u65f6\u5c31\u8981\u7533\u8bf7 15 \u548c 18 \u7684\u9501\uff0c\u51b2\u7a81\u65e0\u6cd5\u63d2\u5165\u3002\u63d2\u5165 7 \u540c\u7406\u3002</p>"},{"location":"DB/db15/","title":"Recovery System","text":""},{"location":"DB/db15/#failure-classification","title":"Failure Classification","text":"<ul> <li>Database application \u903b\u8f91\u9519\u8bef\uff1a\u6bd4\u5982\u4e0d\u6ee1\u8db3\u6570\u636e\u5e93\u7ea6\u675f\u6761\u4ef6\uff08\u4e3b\u952e\uff09 \u7cfb\u7edf\u9519\u8bef\uff1a\u6b7b\u9501\u3002 \u5e38\u7528\u65b9\u6cd5\u662f\u64a4\u9500 undo, \u628a\u8fd9\u4e2a\u4e8b\u4ef6\u62b9\u6389\u3002\uff08\u57fa\u4e8e\u65e5\u5fd7\uff0c\u5728\u4ea7\u751f\u4fee\u6539\u4e4b\u524d\u5148\u8bb0\u65e5\u5fd7\uff0c\u6545\u969c\u540e\u53ef\u4ee5\u6839\u636e\u65e5\u5fd7\u8fdb\u884c\u64a4\u9500\uff09 \u8bb0\u65e5\u5fd7\u6bd4\u8f83\u5feb\uff08\u987a\u5e8f\u8bbf\u95ee\uff09</li> <li>DBMS \u6389\u7535\u3001\u786c\u4ef6\u6545\u969c\u3001\u8f6f\u4ef6\u6545\u969c system crash \u662f\u5168\u5c40\u6027\u7684\uff0c\u6240\u6709\u8fd0\u884c\u7684\u7a0b\u5e8f\u90fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e00\u7c7b\u662f\u4e8b\u52a1\u5df2\u7ecf\u63d0\u4ea4\uff08\u4f46\u662f\u6570\u636e\u8fd8\u5728\u7f13\u51b2\u533a\uff09\uff0c\u53e6\u4e00\u7c7b\u662f\u6b63\u5728\u6267\u884c\u7684\u4e8b\u52a1\uff08\u8fd8\u6ca1\u6709\u63d0\u4ea4\uff09\u3002 \u5df2\u7ecf\u63d0\u4ea4\u7684\u4e8b\u52a1\u8981 redo(\u6570\u636e\u53ef\u80fd\u6ca1\u5199\u56de\u53bb), \u6ca1\u6709\u5b8c\u6210\u7684\u4e8b\u52a1\u8981 undo.  \u5148\u8bb0\u65e5\u5fd7\uff0c\u73b0\u5728\u7684\u6570\u636e\u5e93\u91c7\u7528 repeating history \u7684\u65b9\u6cd5\u3002</li> <li>Database \u4ecb\u8d28\u6545\u969c  \u8981\u9632\u6b62\u4ecb\u8d28\u6545\u969c\uff0c\u9700\u8981\u505a\u5907\u4efd\uff08\u62f7\u8d1d\u6216\u8005\u8fdc\u7a0b\uff09  </li> </ul>"},{"location":"DB/db15/#storage-structure","title":"Storage Structure","text":"<p>\u65e5\u5fd7\u53ef\u80fd\u4e5f\u4f1a\u51fa\u6545\u969c\uff1f\u6211\u4eec\u5047\u8bbe\u65e5\u5fd7\u5b58\u50a8\u5728 Stable storage \u91cc\u3002</p> <ul> <li>Volatile storage  </li> <li>Nonvolatile storage survives system crashes</li> <li>Stable storage:<ul> <li>a mythical(\u865a\u62df\u7684) form of storage that survives all failures</li> <li>approximated by maintaining multiple copies on distinct nonvolatile media \u53ef\u4ee5\u8fd1\u4f3c\u5b9e\u73b0</li> </ul> </li> </ul>"},{"location":"DB/db15/#implementation","title":"Implementation","text":"<ul> <li>Maintain multiple copies of each block on separate disks</li> <li>Failure during data transfer can still result in inconsistent copies \u4fee\u6539\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u53d1\u751f\u6545\u969c</li> <li>Protecting storage media from failure during data transfer </li> </ul>"},{"location":"DB/db15/#database-recovery","title":"Database Recovery","text":"<p>Recovery algorithms are techniques to ensure database consistency and transaction atomicity and durability despite failures.  </p> <p>Recovery algorithms have two parts</p> <ul> <li>Actions taken during normal transaction processing to ensure enough information exists to recover from failures \u5148\u8bb0\u65e5\u5fd7</li> <li>Actions taken after a failure to recover the database contents to a state that ensures atomicity, consistency and durability  </li> </ul> <p>\u7406\u60f3\u7684\u7b97\u6cd5\uff1a\u6062\u590d\u5f97\u5f88\u5feb\uff0c\u5bf9\u4e8b\u52a1\u6b63\u5e38\u64cd\u4f5c\u6ca1\u6709\u5f71\u54cd\uff08\u8bb0\u5f55\u4fe1\u606f\u7684\u65f6\u5019\u4e0d\u80fd\u6d88\u8017\u592a\u591a\u6027\u80fd\uff09\uff0c\u5373\u517c\u987e\u4e0a\u9762\u4e24\u4e2a\u90e8\u5206\u3002\u6062\u590d\u7684\u8fc7\u7a0b\u548c\u5e76\u884c\u63a7\u5236\u662f\u76f8\u5173\u7684\u3002</p> <p>We assume that strict two-phase locking ensures no dirty read. \u4f7f\u7528\u4e25\u683c\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u4fdd\u8bc1\u6ca1\u6709\u810f\u6570\u636e\u3002</p> <p>Idempotent(\u5e42\u7b49\u6027): An recovery algorithm is said to be idempotent if executing it several times gives the same result as executing it once. \u7b97\u6cd5\u6062\u590d\u591a\u6b21\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\u3002\uff08\u6062\u590d\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4e5f\u53d1\u751f crash\uff09</p>"},{"location":"DB/db15/#log-based-recovery","title":"Log-Based Recovery","text":""},{"location":"DB/db15/#log-records","title":"Log Records","text":"<p>A log is kept on stable storage(\u7a33\u5b9a\u5b58\u50a8\u5668).  The log is a sequence of log records, and maintains a record of update activities on the database.</p> <ul> <li>When transaction Ti starts, it registers itself by writing a \u201cstart\u201d log record: \\(&lt;T_i\\  start&gt;\\) \u4e8b\u52a1\u5f00\u59cb. Ti \u8868\u793a\u4e8b\u52a1\u7684 id. </li> <li>Before Ti executes write(X), writing \u201cupdate\u201d log record \\(&lt;T_i, X,  V_1,  V_2&gt;\\)  \u4e8b\u52a1\u628a X \u6570\u636e\u9879\u7684\u503c\u4ece V1(old value) \u6539\u4e3a V2(new value). \u8fd9\u4e2a\u5c31\u662f\u6062\u590d\u7684\u57fa\u7840. undo \u5c31\u7528 old value, redo \u7528 new value. Insert \u5c31\u662f old \u4e3a\u7a7a, Delete \u5c31\u662f new \u4e3a\u7a7a\u3002</li> <li>When Ti finishes it last statement, writing \u201ccommit\u201d log record: \\(&lt;T_i\\  commit&gt;\\) </li> <li>When Ti  complete rollback, writing \u201cabort\u201d log record: \\(&lt;T_i\\  abort&gt;\\) </li> </ul> <p>Log Example</p> <p> </p> <p>\u8fd9\u91cc\u5f53\u6267\u884c\u5230 T2 \u56de\u6eda\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u8fdb\u884c\u6062\u590d\uff08\u7eff\u8272\u7684\u884c\u8868\u793a\u8865\u507f\u65e5\u5fd7\uff09\u6bd4\u5982 T2 \u628a C \u6062\u590d\u4e3a 500, T3 \u628a B \u6062\u590d\u4e3a 300, \u6700\u540e T2 abort. (undo \u64cd\u4f5c\u4e5f\u4f1a\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d) \u53d1\u751f crash \u7684\u65f6\u5019 repeat history(undo \u6b63\u5e38\u7684\u64cd\u4f5c\u4e5f\u4f1a\u91cd\u590d), \u968f\u540e\u5f97\u5230\u5e76\u6267\u884c undo list.(\u4e8b\u52a1\u5f00\u59cb\u540e\u5148\u628a\u4e8b\u52a1\u653e\u8fdb\u53bb\uff0c\u5982\u679c\u63d0\u4ea4\u6216\u8005\u56de\u6eda\u4e86\u5c31\u628a\u4e8b\u52a1\u79fb\u9664) \u53ea\u9700\u8981\u628a T4 undo.(\u5047\u8bbe\u6545\u969c\u524d\u53ea\u6267\u884c\u5230 15 \u884c) </p>"},{"location":"DB/db15/#write-ahead-logging","title":"Write-Ahead Logging","text":"<p>Before a data in main memory is output to the database, the log records pertaining to data must have been output to stable storage. \u5148\u5199\u65e5\u5fd7\u539f\u5219\u3002 \u6570\u636e\u4fee\u6539\u4e4b\u524d\uff0c\u548c\u6570\u636e\u6709\u5173\u7684\u8bb0\u5f55\u8981\u5148\u5199\u5165\u65e5\u5fd7\u3002</p>"},{"location":"DB/db15/#transaction-commit","title":"Transaction Commit","text":"<p>A transaction is said to have committed when its commit log record is output to stable storage \u65e5\u5fd7\u5df2\u7ecf\u8bb0\u5f55 commit, \u8bf4\u660e\u4e8b\u52a1\u5df2\u7ecf\u63d0\u4ea4\u3002\uff08\u56e0\u4e3a\u540e\u7eed\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6062\u590d\u72b6\u6001\u4e86\uff09 \u4f46\u6b64\u65f6\u6570\u636e\u4e0d\u4e00\u5b9a\u5df2\u7ecf\u5199\u56de\u5230\u6570\u636e\u5e93\u91cc\uff08\u4e0d\u4e00\u5b9a\u9ad8\u6821\uff09 all previous log records of the transaction must have been output already </p> <p>Writes performed by a transaction may still be in the buffer when the transaction commits, and may be output later.   \u4e0d\u4e00\u5b9a\u5728\u78c1\u76d8\u3002\u5982\u679c\u7acb\u523b\u5c06 block \u5199\u56de\u78c1\u76d8\u53ef\u80fd\u5f15\u8d77\u5927\u91cf I/O \u64cd\u4f5c</p>"},{"location":"DB/db15/#undo-and-redo-operations","title":"Undo(\u64a4\u9500) and Redo\uff08\u91cd\u505a\uff09 Operations","text":""},{"location":"DB/db15/#checkpoints","title":"Checkpoints","text":"<p>Redoing/undoing all transactions recorded in the log can be very slow. Streamline recovery procedure by periodically performing checkpointing. \u91cd\u6f14\u5386\u53f2\u53ef\u80fd\u5f88\u957f\u3002checkpoint \u662f\u786e\u8ba4\u4e4b\u524d\u7684\u64cd\u4f5c\u90fd\u5df2\u7ecf\u53cd\u6620\u5230\u6570\u636e\u5e93\u91cc\u53bb\u4e86\uff0c\u8fd9\u6837\u91cd\u6f14\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece checkpoint \u5f00\u59cb\u3002</p> <ul> <li>Output all log records currently residing in main memory onto stable storage. \u65e5\u5fd7\u4e0d\u662f\u751f\u6210\u5c31\u5f80\u5185\u5b58\u5199\uff0c\u800c\u662f\u6709\u4e00\u4e2a\u65e5\u5fd7\u7f13\u51b2\u533a\u3002 \u786e\u4fdd\u628a\u65e5\u5fd7\u9879\u5199\u5230\u65e5\u5fd7\u4e2d\u53bb\u4e86\u3002</li> <li>Output all modified buffer blocks to the disk. \u628a buffer \u91cc\u6240\u6709\u6570\u636e\u90fd\u5237\u5199\u4e00\u904d\u3002</li> <li>Write a log record \\(&lt;checkpoint\\ L&gt;\\) onto stable storage where L is a list of all transactions active at the time of checkpoint.  \u5199\u4e00\u4e2a\u65e5\u5fd7\u7684\u6807\u8bb0\uff08\u65b0\u7684\u65e5\u5fd7\u7c7b\u578b\uff09. L \u662f\u5f53\u524d\u6b63\u5728\u5de5\u4f5c\u7684\u4e8b\u52a1\u7684\u8868\u3002\uff08\u7528\u6765\u505a undo list \u7684\u521d\u59cb\u5316\u5217\u8868\uff09</li> <li>All updates are stopped while doing checkpointing!!! \u505a checkpoint \u7684\u65f6\u5019\u5176\u4ed6\u6d3b\u8dc3\u4e8b\u52a1\u90fd\u8981\u505c\u4e0b\u6765\u3002</li> </ul> <p>Log File with Checkpoint : Example</p> <p> </p> <p>\u91cd\u6f14\u5386\u53f2\u4ece\u6700\u8fd1\u7684 checkpoint \u91cd\u6f14. {T2 T4} \u4f5c\u4e3a undo list \u7684\u521d\u59cb\u5316\u503c\u3002  </p> <p>checkpoint \u4e4b\u95f4\u7684\u95f4\u9694\u5e94\u8be5\u5982\u4f55\u786e\u5b9a\uff1f \u6839\u636e\u65e5\u5fd7\u91cf\u3002</p> Example of Recovery <p> </p>"},{"location":"DB/db15/#log-record-buffering","title":"Log Record Buffering","text":"<p>\u6211\u4eec\u5728\u628a\u6570\u636e buffer \u4e2d\u7684\u5757\u5199\u5230\u6570\u636e\u5e93\u65f6\uff0c\u8981\u5148\u628a\u5757\u5bf9\u5e94\u7684\u65e5\u5fd7\u5148\u5199\u5230\u65e5\u5fd7\u6587\u4ef6\uff08\u76f4\u63a5\u628a\u65e5\u5fd7\u5168\u90e8\u5237\u5199\u4e00\u904d\uff09\u3002 \u4e8b\u52a1\u63d0\u4ea4\u4e4b\u540e\u6709\u4e00\u4e2a\u5bf9\u65e5\u5fd7\u7684\u5f3a\u5236\u5237\u5199\u3002</p> <p>Group commit: several log records can be output using a single output operation, reducing the I/O cost.  commit \u53ef\u80fd\u5728\u65e5\u5fd7\u91cc\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4, \u7b49\u5230 buffer \u91cc\u6709\u8db3\u591f\u591a\u7684\u65e5\u5fd7\u8bb0\u5f55\u518d\u5199\u51fa\u53bb\u3002 </p> <ul> <li>The recovery algorithm supports the no-force policy(\u975e\u5f3a\u5236): i.e., updated blocks need not be written to disk when transaction commits. \u597d\u7684\u6062\u590d\u7b97\u6cd5\uff1a\u6211\u4e8b\u52a1 commit \u4e86\u4f46\u4e0d\u5f3a\u5236\u65e5\u5fd7\u5237\u5199\u51fa\u53bb\u3002</li> <li>The recovery algorithm supports the steal policy(\u7a83\u53d6\u7b56\u7565):i.e., blocks containing updates of uncommitted transactions can be written to disk, even before the transaction commits.  \u4e8b\u52a1\u63d0\u4ea4\u4e4b\u524d\u810f\u6570\u636e\u80fd\u4e0d\u80fd\u88ab\u5199\u5230\u78c1\u76d8\u91cc\u53bb\uff1f\uff08\u540c\u6837\u5730\u9700\u8981\u5148\u628a\u65e5\u5fd7\u5199\u51fa\u53bb\uff09</li> </ul>"},{"location":"DB/db15/#fuzzy-checkpointing","title":"Fuzzy Checkpointing","text":"<p>Fuzzy \u6a21\u7cca</p> <p>\u505a checkpoint \u7684\u65f6\u5019\u6211\u4eec\u5982\u679c\u8981\u6c42\u5176\u4ed6\u6d3b\u8dc3\u4e8b\u52a1\u90fd\u505c\u4e0b\u6765\uff0c\u4e00\u6b21\u6027\u628a\u810f\u6570\u636e\u90fd\u5237\u5199\u51fa\u53bb\uff0c\u541e\u5410\u7387\u4f1a\u5ffd\u9ad8\u5ffd\u4f4e\uff0c\u7cfb\u7edf\u7684\u53ef\u7528\u6027\u5c31\u6bd4\u8f83\u5dee\u3002 \u8bb0\u5f55\u810f\u6570\u636e\uff0c\u5728\u540e\u9762\u4e0d check \u7684\u65f6\u5019\u6162\u6162\u5199\u3002</p> <ul> <li>Temporarily stop all updates by transactions</li> <li>Write a \\(&lt;checkpoint\\ L&gt;\\) log record and force log to stable storage</li> <li>Note list M of modified buffer blocks</li> <li>Now permit transactions to proceed with their actions</li> <li>Output to disk all modified buffer blocks in list M</li> </ul> <p>\u5728\u628a\u6240\u6709\u810f\u6570\u636e\u90fd\u5199\u56de\u78c1\u76d8\u540e\uff0c\u6211\u4eec\u4f1a\u8ba4\u5b9a\u8fd9\u4e2a checkpoint. \u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u6700\u8fd1\u4e00\u6b21\u6210\u529f\u7684 checkpoint. \u8fd9\u6837 checkpoint \u7684\u65f6\u5019\u5c31\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\uff0c\u4e0d\u7528\u4e00\u4e0b\u5b50\u5199\u810f\u6570\u636e\u4e86\u3002</p>"},{"location":"DB/db15/#failure-with-loss-of-nonvolatile-storage","title":"Failure with Loss of Nonvolatile Storage","text":"<p>Can be extended to allow transactions to be active during dump; known as fuzzy dump or online dump. \u7c7b\u4f3c\u4e8e checkpoint, \u4e0d\u662f\u5b8c\u5168\u5907\u4efd\uff0c\u800c\u662f\u8bb0\u5f55\u4e00\u4e0b\uff0c\u968f\u540e\u6162\u6162\u5907\u4efd\u3002</p>"},{"location":"DB/db15/#recovery-with-early-lock-release-and-logical-undo-operations","title":"Recovery with Early Lock Release and Logical Undo Operations","text":""},{"location":"DB/db15/#logical-undo-logging","title":"Logical Undo Logging","text":"<p>\u5982\u679c\u65e9\u653e\u9501\uff0c\u540e\u7eed\u6062\u590d\u4e3a old value \u53ef\u80fd\u6ca1\u6709\u610f\u4e49\u3002\u6bd4\u5982\u5b58\u6b3e 100, \u8f6c\u5165 100. \u90a3\u4e48\u6211\u4eec\u6062\u590d\u4e3a 100(\u7269\u7406\u64a4\u9500) \u5c31\u6ca1\u6709\u610f\u4e49\u3002\u8fd9\u4e2a\u65f6\u5019\u5e94\u8be5\u91c7\u7528\u903b\u8f91\u64a4\u9500\uff0c\u5373\u5982\u679c <code>a+=100</code>, \u6062\u590d\u65f6\u5c31\u5e94\u8be5 <code>a-=100</code>. </p> <p>\u5982 B+ \u6811\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002 \u6211\u4eec\u9700\u8981\u5bf9\u903b\u8f91\u64cd\u4f5c\u8bb0\u65e5\u5fd7\u3002</p> <p>Transaction Rollback with Logical Undo</p> <p> </p> <p>\u9700\u8981\u628a\u6bcf\u4e2a\u64cd\u4f5c\u7684\u65e5\u5fd7\u9879\u8bb0\u5f55\u4e0b\u6765\uff08\u5f00\u59cb\u548c\u7ed3\u675f\uff09. C \u8868\u793a\u81ea\u52a0\u64cd\u4f5c\u3002\u8fd9\u91cc\u5728 end \u65f6\u4f1a\u8bb0\u5f55 logical undo \u7684\u64cd\u4f5c(\u51cf\u6cd5\u64a4\u9500\u5bf9\u5e94\u52a0\u6cd5) \u6ce8\u610f\u6211\u4eec\u662f\u5728 end \u7684\u65f6\u5019\u8bb0\u5f55\u903b\u8f91\u64a4\u9500\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u8fd9\u4e2a\u64cd\u4f5c\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u7269\u7406\u64a4\u9500\u3002 \u8fd9\u91cc\u6211\u4eec\u65e9\u653e\u9501\u4e86\uff0c\u6ca1\u6709\u9075\u5faa\u4e25\u683c\u4e24\u9636\u6bb5\u653e\u9501\u534f\u8bae\u3002\u5728 T0 \u8fd8\u6ca1\u6709\u63d0\u4ea4\u7684\u65f6\u5019 T1 \u5c31\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u4fee\u6539. \u6062\u590d\u4e2d\u505a\u7684\u662f\u7269\u7406\u64a4\u9500(old+new), begin/end \u8fd9\u4e9b\u65e5\u5fd7\u5c31\u4e0d\u9700\u8981\u8bb0\u5f55\u4e86\u3002</p> <p>Failure Recovery with Logical Undo</p> <p> </p> <p>\u8fd9\u91cc\u8fd8\u6ca1\u6709 T2 end, \u56e0\u6b64\u7269\u7406\u64a4\u9500\u3002</p>"},{"location":"DB/db15/#aries-recovery-algorithm","title":"ARIES Recovery Algorithm","text":"<p>ARIES is a state of the art recovery method. </p> <p>\u6bcf\u4e2a\u65e5\u5fd7\u90fd\u6709\u4e00\u4e2a\u65e5\u5fd7\u7f16\u53f7 log sequence number (LSN) \u6bcf\u4e2a\u6570\u636e\u5757\u91cc\u90fd\u4f1a\u8bb0\u4e00\u4e2a LSN, \u8868\u793a\u8fd9\u4e2a\u5757\u53cd\u5e94\u4e86\u6700\u8fd1\u54ea\u4e2a\u65e5\u5fd7\u7684\u64cd\u4f5c\u3002</p>"},{"location":"DB/db15/#aries-data-structures","title":"ARIES Data Structures","text":"<ul> <li>Log sequence number (LSN) identifies each log record  <ul> <li>Must be sequentially increasing</li> </ul> </li> <li>Page LSN \u6bcf\u4e2a\u9875(\u5757\u7684 LSN)</li> <li>Log records of several different types</li> <li>Dirty page table \u810f\u9875\u8868\u8981\u8bb0\u5f55\u5728\u65e5\u5fd7\u4e2d\u3002</li> </ul> <p>Log Record</p> <p>\u65e5\u5fd7\u8bb0\u5f55\u901a\u8fc7 UndoNextLSN \u4e32\u8d77\u6765\uff0c\u63d0\u9ad8\u6062\u590d\u6548\u7387\u3002</p> <p>DirtyPage Table  </p> <ul> <li>PageLSN of the page</li> <li>RecLSN is an LSN such that log records before this LSN have already been applied to the page version on disk \u6bcf\u4e00\u9875\u90fd\u6709 PageLSN \u548c RecLSN, Rec \u53cd\u5e94\u7684\u662f\u6700\u8fd1\u7684\u88ab\u53cd\u6620\u5230\u6570\u636e\u5e93\u7684\u65e5\u5fd7\u3002</li> </ul> <p>ARIES Data Structures</p> <p> </p> <p>\u8fd9\u91cc 4894.1 \u8868\u793a\u8fd9\u4e2a\u5757\u91cc\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u3002 RecLSN \u8868\u793a 7564 \u5f00\u59cb\u6570\u636e\u5c31\u6ca1\u6709\u53cd\u6620\u5230\u6570\u636e\u5e93\u4e2d\u53bb\u4e86\u3002</p> <ul> <li>Checkpoint log record<ul> <li>Contains: <ul> <li>DirtyPageTable and list of active transactions  </li> <li>For each active transaction, LastLSN, the LSN of the last log record written by the transaction \u8981\u8bb0\u6700\u8fd1\u7684\u4e8b\u52a1\u9879\uff08\u4ece\u54ea\u91cc\u5f00\u59cb\u6062\u590d\uff09</li> </ul> </li> <li>Fixed position on disk notes LSN of last completed checkpoint log record</li> </ul> </li> <li>Dirty pages are not written out at checkpoint time Instead, they are flushed out continuously, in the background \u810f\u9875\u4e0d\u4f1a\u5728 check \u7684\u65f6\u5019\u5199\u51fa\u53bb\u3002</li> <li>Checkpoint is thus very low overhead can be done frequently</li> </ul>"},{"location":"DB/db15/#aries-recovery-algorithm_1","title":"ARIES Recovery Algorithm","text":"<ul> <li>Analysis pass  <ul> <li>Which transactions to undo (undo-list)  </li> <li>Which pages were dirty (disk version not up to date) at time of crash \u5f97\u5230 dirty page table. </li> <li>RedoLSN: LSN from which redo should start \u771f\u6b63\u7684 redo \u8981\u4ece\u54ea\u91cc\u5f00\u59cb(RecLSN \u7684\u6700\u5c0f\u503c\u5c31\u662f redo \u7684\u8d77\u70b9)</li> </ul> </li> <li>Redo pass \u4ece RedoLSN \u5f00\u59cb\u91cd\u6f14 RecLSN and PageLSNs are used to avoid redoing actions already reflected on page. \u7528\u6765\u4f18\u5316\uff0c\u6709\u4e9b\u65e5\u5fd7\u4e0d\u7528 redo(\u6ca1\u6709\u610f\u4e49)</li> <li>Undo pass \u628a undolist \u8fdb\u884c\u64a4\u9500\u64cd\u4f5c\u3002</li> </ul> <p>Example</p> <p> </p> <p>crash \u4e4b\u540e\uff0c\u5f97\u5230\u4e0a\u9875\u7684 Dirty Page Table \u548c Active TXN Table \u4ee5\u53ca\u78c1\u76d8\u91cc\u7684\u65e5\u5fd7\u3002</p> <p>Example</p> <p> </p> <p>\u8981\u628a 2390 \u52a0\u5230\u8868\u91cc\u53bb\u3002</p>"},{"location":"DB/db2/","title":"Relational Model","text":""},{"location":"DB/db2/#structure-of-relational-databases","title":"Structure of Relational Databases","text":""},{"location":"DB/db2/#concepts","title":"Concepts","text":"<p>Formally, given set \\(D_1, D_2, \\ldots, D_n\\) a relation \\(r\\) is a subset of \\(D_1\\times D_2\\times \\ldots D_n\\). Thus a relation is a set of n-tuple \\((a_1,a_2,\\ldots,a_n)\\) where each \\(a_i\\in D_i\\).  </p> <p>\\(A_1,A_2,\\ldots,A_n\\) are attributes. \\(R=(A_1,A_2,\\ldots,A_n)\\) is a relation schema. e.g. instructor = (ID, name, dept_name, salary).  </p> <p>A relation instance \\(r\\) defined over schema R is denoted by \\(r(R)\\). </p> <p>\u56e0\u4e3a\u5173\u7cfb\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u5173\u7cfb\u90fd\u662f\u65e0\u5e8f\u7684\u3002</p>"},{"location":"DB/db2/#attributes","title":"Attributes","text":"<ul> <li>The set of allowed values for each attribute is called the domain (\u57df)of the attribute</li> <li>Attribute values are (normally) required to be atomic (\u539f\u5b50\u7684); that is, indivisible</li> <li>The special value null (\u7a7a\u503c) is a member of every domain</li> </ul>"},{"location":"DB/db2/#database-schema","title":"Database Schema","text":"<ul> <li>Database schema -- is the logical structure of the database.</li> <li>Database instance -- is a snapshot of the data in the database at a given instant in time. </li> </ul> <p>Example</p> <p> </p> <p>schema \u662f\u62bd\u8c61\u7684\u5b9a\u4e49, instance \u662f\u5177\u4f53\u7684\u5b9e\u4f8b\u3002  </p>"},{"location":"DB/db2/#keys","title":"Keys","text":"<p>Let \\(K\\subsetneqq R\\) </p> <ul> <li>\\(K\\) is a superkey (\u8d85\u952e) of \\(R\\) if values for K are sufficient to identify (\u552f\u4e00\u786e\u5b9a) a unique tuple of each possible relation \\(r(R)\\) e.g. \\(\\{ID\\}\\) or \\(\\{ID, name\\}\\)</li> <li>Superkey \\(K\\) is a candidate key (\u5019\u9009\u952e) if \\(K\\) is minimal. \u5373 \\(K\\) \u4e2d\u6ca1\u6709\u5197\u4f59\u5c5e\u6027  </li> <li>One of the candidate keys is selected to be the primary key (\u4e3b\u952e).</li> <li> <p>Foreign key (\u5916\u952e) Relation \\(r_1\\) may include among its attributes the primary key of another relation \\(r_2\\). This attribute is called a foreign key from \\(r_1\\), referencing \\(r_2\\). \u7c7b\u4f3c\u4e8e\u6307\u9488\uff0c\u5916\u952e\u9650\u5236\u5c31\u662f\u5173\u7cfb \\(r_1\\) \u5f15\u7528\u7684\u4e3b\u952e\u5fc5\u987b\u5728\u5173\u7cfb \\(r_2\\) \u4e2d\u51fa\u73b0\u3002</p> Example <p> </p> <p>\u5de6\u4fa7\u8868\u7684\u8001\u5e08 ID \u5fc5\u987b\u51fa\u73b0\u5728\u53f3\u4fa7\u8868\u4e2d\u3002</p> Why we need foreign key constraint? <p>\u6570\u636e\u5e93\u662f\u652f\u6301\u7531\u5b8c\u6574\u7ea6\u675f\u6761\u4ef6\u5b9a\u4e49\u51fa\u6765\u7684\uff0c\u5e76\u7ef4\u62a4\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\u3002\u5219\u5f53\u6211\u4eec\u5b9a\u4e49\u5916\u952e\u540e\uff0c\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u9ec4\u8272\u6761\u76ee\u662f\u4e0d\u4f1a\u51fa\u73b0\u7684\u3002</p> </li> <li> <p>Referential integrity (\u53c2\u7167\u5b8c\u6574\u6027) \u7c7b\u4f3c\u4e8e\u5916\u952e\u9650\u5236\uff0c\u4f46\u4e0d\u5c40\u9650\u4e8e\u4e3b\u952e\u3002  </p> Example <p> </p> <p>\u8fd9\u91cc \\(time_slot_id\\) \u5e76\u4e0d\u662f\u5173\u7cfb \\(r_2\\) \u7684\u4e3b\u952e\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u662f\u5916\u952e\u9650\u5236\u3002</p> </li> </ul> <p>Example</p> <p> </p> <ul> <li>course \u6307\u8bfe\u7a0b\u4fe1\u606f\uff0c\u65e0\u8bba\u662f\u5426\u5f00\u8bfe\uff0c\u90fd\u4f1a\u6709\u5176\u5b9a\u4e49\u3002</li> <li>section \u8868\u793a\u6559\u5b66\u73ed\uff0c\u771f\u6b63\u5f00\u8bfe\u65f6\u5c31\u6709\u76f8\u5e94\u7684\u5b9e\u4f8b\u3002\uff08\u7c7b\u6bd4\u4e8e\u9ad8\u94c1\u7684\u5217\u8f66\u53f7\uff0c\u548c\u6bcf\u5929\u5bf9\u5e94\u7684\u73ed\u6b21\uff09</li> <li>teachers \u5177\u4f53\u6559\u54ea\u4e2a\u6559\u5b66\u73ed\u7684\u8001\u5e08</li> <li>takes \u8868\u793a\u5b66\u751f\u6ce8\u518c\u8bfe\u7a0b</li> <li>time_slot \u8868\u793a\u4e00\u95e8\u8bfe\u7684\u5177\u4f53\u4e0a\u8bfe\u65f6\u95f4\u6bb5\uff0c\u5982\u6570\u636e\u5e93\u5728\u5468\u4e00 3, 4, 5 \u8282; \u5468\u4e00 7, 8 \u8282\u3002</li> <li>\u4e0a\u56fe\u4e2d\u7ea2\u7ebf\u8868\u793a\u5f15\u7528\u5b8c\u6574\u6027\u7684\u7ea6\u675f\uff1b\u9ed1\u7ebf\u8868\u793a\u5916\u952e\u7ea6\u675f\u3002</li> </ul>"},{"location":"DB/db2/#relational-algebra","title":"Relational Algebra","text":"<p>Six basic operators</p> <ul> <li>select: \\(\\sigma\\) </li> <li>project: \\(\\Pi\\)</li> <li>union: \\(\\cup\\)</li> <li>set difference: \\(-\\) </li> <li>Cartesian product(\u7b1b\u5361\u5c14\u79ef): \\(\\times\\)</li> <li>rename: \\(\\rho\\)</li> </ul>"},{"location":"DB/db2/#select","title":"Select","text":"<p>\\(\\sigma_p(r)=\\{t|t\\in r\\ and\\ p(t)\\}\\)  , where \\(p\\) is called selection predicate.  </p> Select Example <p> </p>"},{"location":"DB/db2/#project","title":"Project","text":"<p>The project operation is a unary operation that returns its argument relation, with certain attributes left out.   \\(\\prod_{A_1,A_2,\\ldots, A_k}(r)\\) where \\(A_i\\) are attribute names and \\(r\\) is a relation name.   </p> <p>The result is defined as the relation of k columns obtained by erasing the columns that are not listed. \u4f1a\u5bf9\u7ed3\u679c\u8fdb\u884c\u53bb\u91cd\u3002  </p> Projection Example <p> </p>"},{"location":"DB/db2/#union","title":"Union","text":"<p>The union operation allows us to combine two relations. \\(r\\cup s = \\{t| t\\in r \\ or \\ t\\in s\\}\\) </p> <ul> <li>\\(r\\) and \\(s\\) must have the same arity (\u5143\u6570) (same number f attributes)  </li> <li>The attribute domains must be compatible  \u5f53\u5c5e\u6027\u6709\u5173\u8054\u7c7b\u578b\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8f93\u5165 \\(i\\), \u4e24\u4e2a\u8f93\u5165\u5173\u7cfb\u7684\u7b2c \\(i\\) \u4e2a\u5c5e\u6027\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\u3002  </li> </ul> Projection Example <p> </p>"},{"location":"DB/db2/#set-difference","title":"Set Difference","text":"<p>The set-difference operation allows us to find tuples that are in one relation but are not in another.  \\(r-s=\\{t|t\\in r\\ and\\ t\\notin s\\}\\) </p> <p>Set differences must be taken between compatible relations.</p> Projection Example <p> </p>"},{"location":"DB/db2/#cartesian-product","title":"Cartesian-Product","text":"<p>The Cartesian-product operation (denoted by \\(\\times\\))  allows us to combine information from any two relations.   \\(r\\times s  =\\{t\\ q|t\\in r\\ and\\ q\\in s\\}\\) </p> Projection Example <p> </p>"},{"location":"DB/db2/#renamen","title":"Rename=n","text":"<p>Allows us to refer to a relation by more than one name. \\(\\rho_X(E)\\)</p> Composition of Operations 1 <p>Find the names of all instructors in the Physics department, along with the course_id of all courses they have taught.  </p> <p> </p> <p>\u8fd9\u4e24\u6761\u8bed\u53e5\u542b\u4e49\u4e00\u6837\uff0c\u4f46\u7b2c\u4e8c\u6761\u6211\u4eec\u5148\u8fdb\u884c\u4e86\u4e00\u6b21 select, \u6761\u76ee\u5c11\u4e86\u66f4\u9ad8\u6548\u3002  </p> Composition of Operations 2 <p>Find the largest salary in the university.  </p> <ul> <li>find instructor salaries that are less than some other instructor salary (i.e. not maximum) using a copy of instructor under a new name \\(d\\).  \\(\\prod_{instructor.salary}(\\sigma_{instructor.salary&lt;d.salary}(instructor \\times \\rho_d(instructor)))\\) </li> <li>find the largest salary \\(\\prod_{instructor}-\\prod_{instructor.salary}(\\sigma_{instructor.salary}&lt;d.salary(instructor\\times \\rho_d(instructor)))\\) </li> </ul> <p>\u6211\u4eec\u7b2c\u4e00\u6b65\u5c06\u4e24\u4e2a\u5173\u7cfb\u62fc\u8d77\u6765\u4e4b\u540e\uff0c\u9650\u5b9a instructor \u7684\u5de5\u8d44\u5c0f\u4e8e d, \u968f\u540e\u6295\u5f71\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u4e0d\u662f\u6700\u5927\u503c\u7684\u85aa\u6c34\u3002\uff08\u56e0\u4e3a\u4efb\u4f55\u4e0d\u662f\u6700\u5927\u503c\u7684\u85aa\u6c34\u90fd\u4f1a\u5728\u7b1b\u5361\u5c14\u79ef select \u540e\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd9\u6837\u6295\u5f71\u4e4b\u540e\u4ecd\u4f1a\u5b58\u5728\u3002\u4f46\u6700\u5927\u503c\u5c31\u4e0d\u4f1a\u6709\u5143\u7ec4\u5b58\u5728\uff09\uff0c\u6700\u540e\u7528\u5168\u96c6\u51cf\u6389\u5373\u53ef\u3002</p>"},{"location":"DB/db2/#additional-operations","title":"Additional Operations","text":"<ul> <li>Set intersection: \\(r \\cap s\\) </li> <li>Natural join:  \\(r\\bowtie s\\)</li> <li>Assignment: \\(\\leftarrow\\)</li> <li>Outer join : \\(r \\rtimes       s\\),  \\(r  \\ltimes    s\\), \\(r\\)\u27d7\\(s\\)</li> <li>Division Operator: \\(r \\div s\\) </li> </ul>"},{"location":"DB/db2/#set-intersection","title":"Set-Intersection","text":"<p>The set-intersection operation allows us to find tuples that are in both the input relations. \\(r\\cap s=\\{t| t\\in r\\ and\\ t\\in s\\}\\) </p> <ul> <li>\\(r, s\\) have the same arity </li> <li>attributes of \\(r\\) and s are compatible</li> </ul> Set-Intersection Operation Example <p> </p>"},{"location":"DB/db2/#natural-join-operation","title":"Natural-Join Operation","text":"<p>Let r and s be relations on schemas R and S respectively.  Then,  \\(r\\bowtie     s\\) is a relation on schema \\(R \\cup S\\) obtained as follows:</p> <ul> <li>Consider each pair of tuples \\(t_r\\) from \\(r\\) and \\(t_s\\) from \\(s\\).  </li> <li>If \\(t_r\\) and \\(t_s\\) have the same value on each of the attributes in \\(R \\cap S\\), add a tuple $t $ to the result, where<ul> <li>\\(t\\) has the same value as \\(t_r\\) on \\(r\\)</li> <li>\\(t\\) has the same value as \\(t_s\\) on \\(s\\)</li> </ul> </li> </ul> <p>\u5373\u5171\u540c\u5c5e\u6027\u8981\u6709\u76f8\u540c\u7684\u503c\uff0c\u624d\u80fd\u5728\u62fc\u63a5\u540e\u7684\u7ed3\u679c\u4e2d\u4fdd\u7559\u3002 \u5bf9\u4e58\u6cd5\u7684\u6269\u5c55\uff0c\u76f8\u5f53\u4e8e\u5148 \\(\\times\\) \u518d select, \u6700\u540e project.  </p> Natural Join Example <p> </p> <ul> <li>Theta Join \\(r\\bowtie_\\theta s=\\sigma_\\theta (r\\times s)\\) \u6761\u4ef6\u8fde\u63a5</li> </ul>"},{"location":"DB/db2/#outer-join","title":"Outer Join","text":"<p>Computes the join and then adds tuples form one relation that does not match tuples in the other relation to the result of the join.   </p> <p>Uses null values:  </p> <ul> <li>null signifies that the value is unknown or does not exist </li> <li>All comparisons involving null are (roughly speaking) false by definition</li> </ul> <p>Outer join can be expressed using basic operations.  </p> <ul> <li>\\(r\\rtimes s=(r\\bowtie s)\\cup (r-\\cap_R(r\\bowtie s)\\times \\{null,\\ldots,null\\})\\)</li> <li>\\(r\\ltimes s=(r\\bowtie s)\\cup \\{null,\\ldots,null\\}\\times (s-\\cap_R(r\\bowtie s))\\)</li> <li>\\(r\\)\u27d7\\(s\\) \\(=(r\\bowtie s)\\cup (r-\\cap_R(r\\bowtie  s))\\times \\{(null, \\ldots)\\}\\cup\\{(null,\\ldots,null)\\}\\times (s-\\cap_s(r\\bowtie s))\\)</li> </ul> Outer Join Example <p> </p>"},{"location":"DB/db2/#semijoin","title":"Semijoin","text":"<p>\\(r\\ltimes_\\theta s\\) \u4fdd\u7559 \\(r\\) \u4e2d\u80fd\u4e0e \\(s\\) \u76f8\u8fde\u7684\u5143\u7ec4\u3002</p> Semijoin Example <p> </p>"},{"location":"DB/db2/#division","title":"Division","text":"<p>Given relations \\(r(R)\\) and \\(s(S)\\), such that \\(S \\subset R\\), \\(r\\div s\\) is the largest relation \\(t(R-S)\\) such that \\(t\\times s \\subsetneqq  r\\) </p> <p>We can write \\(r\\div s\\) as  </p> \\[ \\begin{align*}     temp1 &amp; \\leftarrow \\Pi_{R-S}(r)\\\\     temp2 &amp; \\leftarrow \\Pi_{R-S}((temp1 \\times s)- \\Pi_{R-S,S}(r))\\\\     result &amp; = temp1 - temp2 \\end{align*} \\] Division Example <p> </p>"},{"location":"DB/db2/#aggregate-functions-and-operations","title":"Aggregate Functions and Operations","text":"<ul> <li> <p>Aggregation function\uff08\u805a\u5408\u51fd\u6570\uff09takes a collection of values and returns a single value as a result.  </p> <ul> <li>avg: average value</li> <li>min: minimum value</li> <li>max: maximum value</li> <li>sum: sum of values</li> <li>count: number of values</li> </ul> </li> <li> <p>Aggregate operation in relational algebra \\(G_1,G_2,\\ldots,G_n \\mathcal{G}_{F_1(A_1),\\ldots F_n(A_n)}(E)\\) </p> </li> </ul> <p>Aggregate Operation Example</p> <p> </p> <p>\u5206\u7ec4\u7ed3\u679c\u6ca1\u6709\u540d\u5b57\uff0c\u53ef\u4ee5\u7528 rename \u6216\u8005 as \u8fdb\u884c\u6539\u540d\u3002 e.g. <code>dept_name G avg(salary) as avg_sal (instructor)</code></p>"},{"location":"DB/db2/#multiset-relational-algebra","title":"Multiset Relational Algebra","text":"<p>\u5173\u7cfb\u4ee3\u6570\u4e2d\uff0c\u6211\u4eec\u8981\u6c42\u5173\u7cfb\u8981\u662f\u4e00\u4e2a\u4e25\u683c\u7684\u96c6\u5408\u3002 \u4f46\u5b9e\u9645\u6570\u636e\u5e93\u4e2d\u5e76\u4e0d\u662f\uff0c\u800c\u662f\u4e00\u4e2a\u591a\u91cd\u96c6\uff0c\u5141\u8bb8\u6709\u91cd\u590d\u5143\u7d20\u5b58\u5728\u3002 \u56e0\u4e3a\u4e00\u4e9b\u64cd\u4f5c\u7684\u4e2d\u95f4\u7ed3\u679c\u4f1a\u5e26\u6765\u91cd\u590d\u5143\u7d20\uff0c\u8981\u4fdd\u6301\u96c6\u5408\u7279\u6027\u5f00\u9500\u5f88\u5927\uff0c\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e2d\u4e0d\u4f1a\u53bb\u91cd \u3002 </p>"},{"location":"DB/db2/#sql-and-relational-algebra","title":"SQL and Relational Algebra","text":"<ul> <li><code>select A1, A2, ... An from r1, r2, ... rm where P</code> is equivalent to \\(\\Pi_{A_1,\\ldots, A_n}(\\sigma_P(r_1\\times r_2\\ldots r_m))\\) </li> <li><code>select A1, A2, sum(A3) from r1, r2, ... rm where P group by A1, A2</code> is equivalent to \\(A_1, A_2 \\mathcal{G} sum(A_3)(\\sigma_P(r_1\\times r_2\\times\\ldots r_m))\\) \u8fd9\u91cc\u6309 \\(A_1,A_2\\) \u5206\u7ec4\uff0c\u90a3\u4e48\u7ed3\u679c\u7684\u8868\u4e2d\u4f1a\u6709 \\(A_1,A_2,sum(A_3)\\) \u4e09\u5217\uff08\u5206\u7ec4\u4f9d\u636e+\u5206\u7ec4\u540e\u7684\u805a\u5408\u7ed3\u679c\uff09\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7684\u5c31\u662f\u8fd9\u4e09\u5217\uff0c\u6240\u4ee5\u5206\u7ec4\u5373\u53ef\u3002\u4f46\u662f\u5047\u8bbe\u6211\u4eec\u53ea\u9700\u8981 \\(A_1, sumA3\\) \u90a3\u4e48\u6700\u540e\u8fd8\u9700\u8981\u6295\u5f71\u3002</li> </ul>"},{"location":"DB/db3/","title":"Introduction to SQL","text":"Abstract <ul> <li>Data Definition</li> <li>Basic Query Structure</li> <li>Additional Basic Operations</li> <li>Set Operations</li> <li>Null Values</li> <li>Aggregate Functions</li> <li>Nested Subqueries</li> <li>Modification of the Database </li> </ul>"},{"location":"DB/db3/#data-definition","title":"Data Definition","text":""},{"location":"DB/db3/#domain-types-in-sql","title":"Domain Types in SQL","text":"<ul> <li><code>char(n).</code> Fixed length character string, with user-specified length n.  \u5b9a\u957f\u5b57\u7b26\u4e32. C \u8bed\u8a00\u91cc\u5b57\u7b26\u4e32\u7ed3\u5c3e\u6709 <code>\\0</code>, \u4f46\u6570\u636e\u5e93\u91cc\u6ca1\u6709\uff0c\u957f\u5ea6\u7531\u5b9a\u4e49\u800c\u5f97\u3002  </li> <li><code>varchar(n).</code> Variable length character strings, with user-specified maximum length n. \u4e0d\u5b9a\u957f\u5b57\u7b26\u4e32\u3002\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u6bd4\u8f83\u53ef\u80fd\u6709\u95ee\u9898\uff08\u6bd4\u5982\u5b9a\u957f\u548c\u4e0d\u5b9a\u957f\u7684\u5b57\u7b26\u4e32\uff09</li> <li><code>int.</code> Integer (a finite subset of the integers that is machine-dependent).</li> <li><code>smallint.</code> Small integer (a machine-dependent subset of the integer domain type).</li> <li><code>numeric(p,d).</code> Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point.    p \u8868\u793a\u6709\u6548\u6570\u5b57\u4f4d\u6570, d \u8868\u793a\u5c0f\u6570\u70b9\u540e\u591a\u5c11\u4f4d\u3002 e.g. <code>number(3,1)</code> allows 44.5 to be store exactly,  but neither 444.5 or 0.32</li> <li>real, double precision.  Floating point and double-precision floating point numbers, with machine-dependent precision.</li> <li><code>float(n).</code> Floating point number, with user-specified precision of at least n digits.</li> </ul>"},{"location":"DB/db3/#built-in-data-types-in-sql","title":"Built-in Data Types in SQL","text":"<ul> <li>date: Dates, containing a (4 digit) year, month and date e.g. date \u20182005-7-27\u2019</li> <li>time: Time of day, in hours, minutes and seconds. e.g. time \u201809:00:30\u2019         time \u201809:00:30.75\u2019</li> <li>timestamp: date plus time of day e.g. timestamp  \u20182005-7-27 09:00:30.75\u2019</li> <li>interval: period of time e.g. interval  \u20181\u2019 day  <ul> <li>Subtracting a date/time/timestamp value from another gives an interval value.  </li> <li>Interval values can be added to date/time/timestamp values</li> <li>built-in date, time functions: <code>current_date(), current_time(), year(x), month(x), day(x), hour(x), minute(x), second(x)</code></li> </ul> </li> </ul>"},{"location":"DB/db3/#create-table-construct","title":"Create Table Construct","text":"<p>An SQL relation is defined using the create table command: <pre><code>create table r (A1 D1, A2 D2, ..., An Dn,           (integrity-constraint1),            ..,         (integrity-constraintk))\n</code></pre></p> <ul> <li>\\(r\\) is the name of the relation</li> <li>each \\(Ai\\) is an attribute name in the schema of relation \\(r\\)</li> <li>\\(Di\\) is the data type of values in the domain of attribute \\(Ai\\) </li> </ul> <p>Integrity Constraints in Create Table</p> <ul> <li><code>not null</code></li> <li>primary key \\((A_1,\\ldots,A_n)\\) \u4e0d\u80fd\u4e3a\u7a7a; \u8868\u5185\u4e0d\u80fd\u6709\u76f8\u540c\u7684 keys. \u5426\u5219\u8fd9\u6837\u7684\u6570\u636e\u662f\u63d2\u5165\u4e0d\u8fdb\u53bb\u7684\u3002</li> <li>foreign key \\((A_m,\\ldots,A_n)\\) references r \u9690\u542b\uff1a\u5f15\u7528\u5bf9\u5e94\u8868\u7684\u4e3b\u952e\u3002    </li> </ul> <p>\u5982\u679c\u4e0d\u7b26\u5408\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\uff0c\u63d2\u5165\u53ef\u80fd\u4f1a\u5931\u8d25\u3002</p> Example <p> </p> <p>\u53ef\u4ee5\u7ed9\u4e00\u4e2a\u7f3a\u7701\u503c e.g. <code>default 0</code></p> Example <p> </p> <p><code>sec_id</code> can be dropped from primary key above, to ensure a student cannot be registered for two sections of the same course in the same semester</p> <p>\u5982\u679c\u5f15\u7528\u7684\u8868\u4e2d\u6709\u6761\u76ee\u88ab\u5220\u9664\uff0c\u53ef\u80fd\u4f1a\u7834\u574f\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\u3002\u6709\u4e0b\u9762\u7684\u65b9\u6cd5\uff1a  </p> <ul> <li>restrict: \u5982\u679c\u6709\u6761\u76ee\u662f\u88ab\u5f15\u7528\u7684\uff0c\u90a3\u4e48\u4e0d\u5141\u8bb8\u5220\u9664\u3002</li> <li>cascade: \u5f15\u7528\u7684\u6761\u76ee\u88ab\u5220\u4e86\u4e4b\u540e\uff0c\u5f15\u7528\u8005\u4e5f\u4e00\u5e76\u5220\u9664</li> <li>set null: \u5f15\u7528\u8005\u7684\u6307\u9488\u8bbe\u4e3a <code>null</code>. </li> <li>set default </li> </ul> <p>\u5982\u679c\u5f15\u7528\u7684\u8868\u4e2d\u6709\u66f4\u65b0\uff0c\u4e5f\u6709\u7c7b\u4f3c\u4e0a\u9762\u7684\u56db\u79cd\u65b9\u6cd5\u3002 \u5728 <code>create table</code> \u4e2d\u5b9a\u4e49  </p> <ul> <li><code>on delete cascade  |set null |restrict |set default</code></li> <li><code>on update cascade  |set null |restrict |set default</code></li> </ul>"},{"location":"DB/db3/#drop-and-alter-table-constructs","title":"Drop and Alter Table Constructs","text":"<ul> <li>drop table student Deletes the table and its contents  \u628a\u5185\u5bb9\u548c\u8868\u5168\u5220\u4e86\uff0c\u4e4b\u540e\u4e0d\u80fd\u518d\u5f80\u8868\u91cc\u63d2\u5165\u3002</li> <li>delete from student Deletes all contents of table, but retains table</li> <li>alter table  \u53ef\u4ee5\u52a8\u6001\u4fee\u6539\u8868\u7684\u5b9a\u4e49 <ul> <li><code>alter table r add A D</code><ul> <li>where A is the name of the attribute to be added to relation r  and D is the domain of A.</li> <li>All tuples in the relation are assigned null as the value for the new attribute. e.g. <code>alter table student add resume varchar(256);</code></li> <li>\u8fd8\u53ef\u4ee5\u589e\u52a0\u5916\u952e\u7ea6\u675f\u6761\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u5220\u6389</li> </ul> </li> <li><code>alter table r drop A</code> <ul> <li>where A is the name of an attribute of relation r</li> <li>Dropping of attributes not supported by many databases  \u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u8868\uff0c\u7136\u540e\u628a\u9664\u4e86\u8981\u5220\u7684\u5217\u4ee5\u5916\u7684\u5217\u642c\u79fb\u8fc7\u53bb\u3002  </li> </ul> </li> </ul> </li> </ul> \u5173\u7cfb\u6570\u636e\u5e93\u7684\u4e09\u5c42\u62bd\u8c61 <ul> <li>\u7528\u6237\u5c42\uff1a\u7531 DML \u5b9a\u4e49\u64cd\u4f5c, \u5982 <code>select</code> \u8bed\u53e5\u3002</li> <li>\u903b\u8f91\u5c42\uff1a\u7531 <code>create table</code> \u51b3\u5b9a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u8868\u7684\u5143\u7d20\uff0c\u4ee5\u53ca\u5404\u79cd\u952e\uff0c\u6784\u6210\u4e86\u6a21\u5f0f\u56fe\u3002</li> </ul>"},{"location":"DB/db3/#basic-query-structure","title":"Basic Query Structure","text":""},{"location":"DB/db3/#the-select-clause","title":"The <code>select</code> Clause","text":"<p>The <code>select</code> clause list the attributes desired in the result of a query.  </p> <p>SQL names are case insensitive  \u5927\u5c0f\u5199\u4e0d\u654f\u611f\u3002\uff08\u5c5e\u6027\u540d\u5b57\u3001\u8868\u7684\u540d\u5b57\u7b49\uff09</p> <ul> <li>To force the elimination of duplicates, insert the keyword <code>distinct</code> after select. e.g. <code>select distinct dept_name from instructor</code> \u53ef\u4ee5\u52a0 all \u8868\u793a\u4e0d\u53bb\u91cd\uff0c\u52a0\u4e0d\u52a0\u65e0\u6240\u8c13</li> <li>An asterisk in the select clause denotes \u201call attributes\u201d e.g. <code>select * from instructor</code></li> <li>The select clause can contain arithmetic expressions involving the operation, +, \u2013, \\(\\div\\), and /, and operating on constants or attributes of tuples. \u53ef\u4ee5\u6709\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97 e.g. <code>select ID, name, salary/12 from instructor</code></li> </ul>"},{"location":"DB/db3/#the-where-clause","title":"The <code>where</code> Clause","text":"<p>The <code>where</code> clause specifies conditions that the result must satisfy.  Corresponds to the selection predicate of the relational algebra.  </p> <ul> <li>SQL includes a <code>between</code> comparison operator e.g. <code>select name from instructor where salary between 90000 and 100000</code></li> <li>Tuple comparison \u5143\u7ec4\u76f8\u7b49\u7b49\u4ef7\u4e8e\u5404\u4e2a\u5143\u7d20\u90fd\u76f8\u7b49\u3002 e.g. <code>select name, course_id from instructor, teaches where (instructor.ID, dept_name) = (teaches.ID, \u2019Biology\u2019);</code> </li> </ul>"},{"location":"DB/db3/#the-from-clause","title":"The <code>from</code> clause","text":"<p>The <code>from</code> clause lists the relations involved in the query. Corresponds to the Cartesian product operation of the relational algebra.  </p>"},{"location":"DB/db3/#natural-join","title":"Natural Join","text":"<p>e.g. <code>select * from instructor natural join teaches;</code></p> <p>e.g. <code>select name, course_id from instructor, teaches where instructor.ID = teaches.ID;</code> <code>select name, course_id from instructor natural join teaches;</code>  \u4e0a\u9762\u4e24\u6761\u8bed\u53e5\u662f\u7b49\u4ef7\u7684\u3002</p> <p>Unrelated attributes with same name which get equated incorrectly! </p> <p>Example</p> <p><code>course(course_id,title, dept_name,credits\uff09</code>, <code>teaches(ID, course_id,sec_id,semester, year)</code>, <code>instructor(ID, name, dept_name,salary\uff09</code> \u8fd9\u91cc\u7684 department \u542b\u4e49\u5404\u6709\u4e0d\u540c\uff0c\u4e0d\u80fd\u76f4\u63a5\u81ea\u7136\u8fde\u63a5\u3002 \u53ef\u4ee5\u5199\u6210 <code>select name, title from (instructor natural join teaches\uff09join course using(course_id);</code> \u5373\u89c4\u5b9a\u8fde\u63a5\u7684\u5c5e\u6027\uff0c\u5bf9\u5e94\u4e8e \\(\\sigma_\\theta\\) </p> <p>Find students who takes courses across his/her department. \u53ef\u5199\u4f5c </p> <pre><code>select distinct student.id\nfrom (student natural join takes) join course using (course_id\uff09 where student.dept_name &lt;&gt; course.dept_name\n</code></pre>"},{"location":"DB/db3/#the-rename-operation","title":"The Rename Operation","text":"<p>The SQL allows renaming relations and attributes using the <code>as</code> clause. <code>old-name as new-name</code></p> <p>e.g. <code>select distinct T. name from instructor as T, instructor as S where T.salary &gt; S.salary and S.dept_name = \u2018Comp. Sci.\u2019</code></p> <ul> <li>Keyword <code>as</code> is optional and may be omitted.  </li> </ul>"},{"location":"DB/db3/#string-operations","title":"String Operations","text":"<p>SQL includes a string-matching operator for comparisons on character strings.  The operator <code>like</code> uses patterns that are described using two special characters. </p> <p>\u6ce8\u610f\u5355\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\u3002</p> <ul> <li>percent (%).  The % character matches any substring. e.g. <code>select name from instructor where name like '%dar%';</code> \u627e\u540d\u5b57\u91cc\u9762\u542b\u6709 <code>dar</code> \u7684\u5b57\u7b26\u4e32\u3002 </li> <li>underscore (_).  The _ character matches any character.  </li> </ul> <p>Match the string</p> <p>\u5339\u914d\u5b57\u7b26\u4e32 <code>'100 %'</code> \u4f46\u662f <code>%</code> \u7b26\u53f7\u88ab\u6211\u4eec\u4f5c\u4e3a\u4e86\u901a\u914d\u7b26\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7528\u5230\u8f6c\u4e49\u7b26 <code>\\</code>. <code>\\%</code> \u5373\u5c06 <code>%</code> \u4f5c\u4e3a\u6b63\u5e38\u5b57\u7b26\u5339\u914d\u3002 <code>\\</code> \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u57fa\u672c\u7b26\u53f7\uff0c\u6211\u4eec\u9700\u8981\u5728\u540e\u9762\u5199\u51fa <code>escape</code> \u8868\u793a\u5176\u5728\u8fd9\u91cc\u4f5c\u4e3a\u8f6c\u4e49\u7b26\u3002\u7c7b\u4f3c\u5730\u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u8f6c\u4e49\u7b26\u5b9a\u4e49\u4e3a <code>#</code>.  <pre><code>like \u2018100 \\%'  escape  '\\' \nlike \u2018100 \\%'  like \u2018100  #%'  escape  \u2018#' </code></pre></p> <p>SQL supports a variety of string operations such as</p> <ul> <li>concatenation (using <code>||</code>)</li> <li>converting from upper to lower case (and vice versa)</li> <li>finding string length, extracting substrings, etc.  </li> </ul>"},{"location":"DB/db3/#ordering-the-display-of-tuples","title":"Ordering the Display of Tuples","text":"<p>\u5173\u7cfb\u662f\u65e0\u5e8f\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u80fd\u89c4\u5b9a\u663e\u793a\u51fa\u6765\u7684\u987a\u5e8f\u3002</p> <ul> <li>We may specify desc for descending order or asc for ascending order, for each attribute; ascending order is the default. e.g. <code>order by name desc</code> \u53ef\u4ee5\u6392\u5e8f\u7684\u7c7b\u578b\uff0c\u5982\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3002</li> <li>Can sort on multiple attributes e.g. <code>order by  dept_name, name</code> \u5148\u6309\u7b2c\u4e00\u4e2a\u6392\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\u518d\u6309\u7b2c\u4e8c\u4e2a\u6392\u3002</li> </ul>"},{"location":"DB/db3/#the-limit-clause","title":"The <code>limit</code> Clause","text":"<p>The <code>limit</code> clause can be used to constrain the number of rows returned by the select statement.  limit clause takes one or two numeric arguments, which must both be nonnegative integer constants: </p> <ul> <li><code>limit offset, row_count</code></li> <li><code>limit row_count == limit 0, row_count</code></li> </ul> <p>e.g. <code>select  name from instructor order by salary desc limit 3\uff1b   //  limit 0,3</code></p>"},{"location":"DB/db3/#set-operations","title":"Set Operations","text":"<ul> <li><code>union, intersect, except</code> \u662f\u4e25\u683c\u7684\u96c6\u5408\u64cd\u4f5c\uff0c\u4f1a\u5bf9\u7ed3\u679c\u53bb\u91cd.</li> <li><code>union all</code>, <code>intersect all</code> and <code>except all</code>. \u4fdd\u6301\u591a\u91cd\u96c6\u3002</li> </ul> Example"},{"location":"DB/db3/#null-values","title":"Null Values","text":"<p>null signifies an unknown value or that a value does not exist.</p> <ul> <li>The result of any arithmetic expression involving null is null. e.g. <code>5 + null</code> returns null</li> <li>The predicate is null can be used to check for null values. e.g. Find all instructors whose salary is null.  <code>select name from instructor where salary is null</code></li> <li>Comparisons with null values return the special truth value: unknown.  </li> </ul> <ul> <li>Result of select predicate is treated as false if it evaluates to unknown</li> </ul>"},{"location":"DB/db3/#aggregate-functions","title":"Aggregate Functions","text":"Example <p>\u6ce8\u610f\u5728 <code>select</code> \u91cc\u51fa\u73b0\u7684\u5c5e\u6027\uff0c\u9664\u4e86\u7edf\u8ba1\u51fd\u6570\u4ee5\u5916\uff0c\u4e00\u5b9a\u8981\u662f\u5206\u7ec4\u5c5e\u6027\u91cc\u51fa\u73b0\u8fc7\u7684\u3002</p>"},{"location":"DB/db3/#having-clause","title":"Having Clause","text":"<p>\u5bf9\u5206\u7ec4\u540e\u7684\u7ec4\u8fdb\u884c\u7b5b\u9009\u3002  </p> <p>e.g. <pre><code>select dept_name, count (*) as cnt\nfrom instructor\nwhere  salary &gt;=100000\ngroup by dept_name\nhaving  count (*) &gt; 10\norder by cnt;\n</code></pre></p> <p>predicates in the <code>having</code> clause are applied after the formation of groups whereas predicates in the <code>where</code> clause are applied before forming groups.  </p>"},{"location":"DB/db3/#null-values-and-aggregates","title":"Null Values and Aggregates","text":"<p><code>select sum (salary) from instructor</code> </p> <ul> <li>Above statement ignores null amounts</li> <li>Result is null if there is no non-null amount</li> <li>All aggregate operations except <code>count(*)</code> ignore tuples with null values on the aggregated attributes</li> </ul> Arithmetric expression with Aggregate functions <p> </p> <p>\u7b2c\u4e8c\u4e2a\u8868\u793a\u91cd\u540d\u7387\u5c0f\u4e8e\u5343\u5206\u4e4b\u4e00\u7684\u7cfb\u3002</p>"},{"location":"DB/db3/#nested-subqueries","title":"Nested Subqueries","text":"<p>A subquery is a select-from-where expression that is nested within another query.</p>"},{"location":"DB/db3/#set-membership","title":"Set Membership","text":"<p><code>in, not in</code></p> Example <p> </p> <p>\u9664\u4e86\u5355\u4e2a\u5143\u7d20\u5916\uff0c\u5143\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>in, not in</code> </p>"},{"location":"DB/db3/#set-comparison","title":"Set Comparison","text":"<ul> <li><code>some</code> \u67d0\u4e9b\u6210\u5458   </li> <li><code>all</code> \u6240\u6709\u6210\u5458</li> </ul> <p>Example</p> <p>\u5de5\u8d44\u5927\u4e8e\u751f\u7269\u7cfb\u4e2d\u7684\u67d0\u4e9b\u8001\u5e08\u7684\u8001\u5e08. <pre><code>select name\nfrom instructor\nwhere salary &gt; some (select salary\nfrom instructor\nwhere dept_name = \u2019Biology\u2019);\n</code></pre></p>"},{"location":"DB/db3/#scalar-subquery","title":"Scalar Subquery","text":"<p>Scalar (\u6807\u91cf) subquery is one which is used where a single value is expected.  </p> <p>Example</p> <pre><code>select name\nfrom instructor\nwhere  salary * 10 &gt; (select budget  from department where department.dept_name = instructor.dept_name)\n</code></pre> <p>\u8fd9\u91cc <code>dept_name</code> \u662f\u8fd9\u4e2a\u8868\u7684\u4e3b\u952e\uff0c\u53ea\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u4e0d\u7528 <code>some, all</code> \u7684\u3002</p> <p>Runtime error if subquery returns more than one result tuple.  </p>"},{"location":"DB/db3/#test-for-empty-relations","title":"Test for Empty Relations","text":"<p>The exists construct returns the value true if the argument subquery is nonempty.</p> <ul> <li><code>exists r</code> \\(\\Leftrightarrow r \\neq \\emptyset\\)</li> <li><code>not exists r</code> \\(\\Leftrightarrow r = \\emptyset\\)</li> </ul> <p>Example</p> <p>09FALL \u5f00\u7684\u8bfe\uff0c\u800c\u4e14 10SPRING \u4e5f\u5f00\u4e86\u8bfe\u3002 <pre><code>select course_id\nfrom section as S\nwhere semester = \u2019Fall\u2019 and year= 2009 and                exists (select *                            from section as T                      where semester = \u2019Spring\u2019 and year= 2010 and S.course_id= T.course_id);\n</code></pre></p> <p>Example</p> <p>Find all students who have taken all courses offered in the Biology department. SQL \u8bed\u53e5\u5f80\u5f80\u9700\u8981\u9006\u5411\u8003\u8651\uff0c\u5373\u627e\u5230\u8fd9\u6837\u7684\u5b66\u751f\uff0c\u4e0d\u5b58\u5728\u4ed6\u6ca1\u9009\u8fc7\u7684\u751f\u7269\u7cfb\u7684\u8bfe\u3002 <pre><code>select distinct S.ID, S.name\nfrom student as S\nwhere not exists ( (select course_id\nfrom course\nwhere dept_name = \u2019Biology\u2019)\nexcept\n(select T.course_id\nfrom takes as T\nwhere S.ID = T.ID));\n</code></pre></p>"},{"location":"DB/db3/#test-for-absence-of-duplicate-tuples","title":"Test for Absence of Duplicate Tuples","text":"<p>The <code>unique</code> construct tests whether a subquery has any duplicate tuples in its result. \u9a8c\u8bc1\u662f\u5426\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u800c\u975e\u591a\u91cd\u96c6\u3002  </p> <ul> <li>Evaluates to \u201ctrue\u201d on an empty set.  \u53ef\u4ee5\u5c06 unique \u7406\u89e3\u4e3a at most once. </li> </ul> <p>Example</p> <p> </p> <p>\u5982\u679c\u4e0d\u52a0 exist, \u53ef\u80fd\u6709\u6ca1\u5f00\u8fc7\u7684\u8bfe\u4e5f\u88ab\u7b97\u8fdb\u53bb\u3002\u6211\u4eec\u8fd9\u91cc\u6c42\u5f97\u662f\u6070\u597d\u53ea\u5f00\u8fc7\u4e00\u6b21\u7684\u3002</p> Example <p> </p> <p>\u4e5f\u53ef\u4ee5\u7528 <code>group by count(*) &gt; 1</code> \u5b9e\u73b0\u3002</p>"},{"location":"DB/db3/#with-clause","title":"With Clause","text":"<p>The <code>with</code> clause provides a way of defining a temporary view whose definition is available only to the query in which the with clause occurs. \u6784\u9020\u4e00\u4e2a\u4e34\u65f6\u8868  </p> <p>Example</p> <p>Find all departments with the maximum budget. <pre><code>with max_budget (value) as (select max(budget)\nfrom department)\nselect dept_name\nfrom department, max_budget\nwhere department.budget = max_budget.value;\n</code></pre></p> Complex Queries using With Clause <p> </p>"},{"location":"DB/db3/#modification-of-the-database","title":"Modification of the Database","text":""},{"location":"DB/db3/#deletion","title":"Deletion","text":"Example"},{"location":"DB/db3/#insertion","title":"Insertion","text":"Example <p>\u7b2c\u4e8c\u79cd\u5199\u6cd5\uff0c\u53ef\u4ee5\u4e0d\u7528\u4e25\u683c\u6309\u7167\u5b9a\u4e49\u7684\u5143\u7d20\u987a\u5e8f\uff0c\u53ea\u8981\u548c\u81ea\u5df1\u5199\u7684\u5bf9\u5e94\u5373\u53ef\u3002</p> <p>\u9664\u4e86\u57fa\u672c\u5199\u6cd5\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728 <code>insert</code> \u540e\u8ddf\u67e5\u8be2\u8bed\u53e5\uff0c\u628a\u67e5\u8be2\u7ed3\u679c\u63d2\u5165\u5230\u8868\u91cc\u53bb\u3002</p> Example <p> </p>"},{"location":"DB/db3/#updates","title":"Updates","text":"<p><code>update ... set ...</code></p> <p>The order is important. So it can be done better using the <code>case</code> statement.  </p> Example <p> </p>"},{"location":"DB/db4/","title":"Intermediate SQL","text":"Abstract <ul> <li>Joined Relation</li> <li>SQL Data Types and Schemas</li> <li>Integrity Constraints</li> <li>Views</li> <li>Indexes</li> <li>Transactions</li> <li>Authorization</li> </ul>"},{"location":"DB/db4/#joined-relations","title":"Joined Relations","text":"<ul> <li>Join operations take two relations and return as a result another relation.</li> <li>Join operations are typically used as subquery expressions in the from clause</li> <li>Join condition \u2013 defines which tuples in the two relations match, and what attributes are present in the result of the join.</li> <li>Join type \u2013 defines how tuples in each relation that do not match any tuple in the other relation (based on the join condition) are treated.  </li> </ul> <ul> <li>using \u662f\u4e00\u4e2a\u7b49\u503c\u8fde\u63a5\uff0c\u7c7b\u4f3c\u4e8e\u81ea\u7136\u8fde\u63a5\uff0c\u8fd9\u4e9b\u5c5e\u6027\u76f8\u540c\u624d\u80fd\u8fde\u63a5</li> </ul>"},{"location":"DB/db4/#sql-data-types-and-schemas","title":"SQL Data Types and Schemas","text":""},{"location":"DB/db4/#user-defined-types","title":"User-Defined Types","text":"<p><code>create type</code> construct in SQL creates user-defined type.  </p> <p>Example</p> <p><code>create type Dollars as numeric (12,2) final</code> \u5b9a\u4e49\u4e86 <code>Dollars</code> \u8fd9\u4e2a\u7c7b\u578b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5b83\u5f53\u4f5c\u5143\u7c7b\u578b\u4f7f\u7528\u3002 <pre><code>create table department\n(dept_name varchar (20),\nbuilding varchar (15),\nbudget Dollars);\n</code></pre></p> <p>\u8fd9\u6837\u53ef\u4ee5\u652f\u6301\u5f3a\u7c7b\u578b\u68c0\u67e5\uff0c\u53ef\u4ee5\u9632\u6b62\u5982 200 \u7f8e\u5143 + 300 RMB \u5f97\u5230 500 \u5143\u7684\u9519\u8bef\u3002</p>"},{"location":"DB/db4/#domains","title":"Domains","text":"<p><code>create domain</code> construct in SQL-92 creates user-defined domain types.  </p> <p>Domains can have constraints, such as <code>not null</code>, specified on them.</p> <p>Example</p> <p><code>create domain person_name char(20) not null</code> <pre><code>create domain degree_level varchar(10)\nconstraint degree_level_test\ncheck (value in (\u2019Bachelors\u2019, \u2019Masters\u2019, \u2019Doctorate\u2019));\n</code></pre> \u8fd9\u91cc\u7684 constraint \u53ef\u4ee5\u5bf9 domain \u7684\u53d6\u503c\u8fdb\u884c\u9650\u5236\u3002</p> <p>\u4e0d\u540c type \u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u5b9a\u4e49\u76f8\u540c\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u884c\u8fd0\u7b97\u3002\u4e0d\u540c domain \u7684\u53d8\u91cf\uff08\u57fa\u7840\u7c7b\u578b\u76f8\u540c\uff09\u53ef\u4ee5\u8fd0\u7b97\u3002</p>"},{"location":"DB/db4/#large-object-types","title":"Large-Object Types","text":"<p>Large objects (photos, videos, CAD files, etc.) are stored as a large object:  </p> <ul> <li> <p>blob: binary large object -- object is a large collection of uninterpreted binary data (whose interpretation is left to an application outside of the database system) \u5b58\u50a8\u5927\u5bf9\u8c61\u6570\u636e\u7c7b\u578b\uff0c\u5b9e\u9645\u4e0a\u53ea\u662f\u5b58\u653e\u6307\u9488\u3002</p> BLOB in MySQL <ul> <li>TinyBlob \uff1a  0 ~ 255 bytes.</li> <li>Blob\uff1a 0 ~ 64K bytes.</li> <li>MediumBlob \uff1a 0 ~ 16M bytes.</li> <li>LargeBlob : 0 ~ 4G  bytes.</li> </ul> </li> <li> <p>clob: character large object -- object is a large collection of character data \u6587\u672c\u5927\u5bf9\u8c61  </p> </li> </ul>"},{"location":"DB/db4/#integrity-constraints","title":"Integrity Constraints","text":"<ul> <li><code>not null</code></li> <li><code>primary key</code></li> <li><code>unique</code> <code>unique(A1, A2, ..., Am)</code> The unique specification states that the attributes <code>A1, A2, ..., Am</code> form a super key \uff08\u4e0d\u4e00\u5b9a\u662f candidate key) \u6bd4\u5982\u5b66\u751f\u4e2a\u4eba\u4fe1\u606f\uff0c\u6211\u4eec\u77e5\u9053 ID \u662f\u4e3b\u952e\uff0c\u4f46\u5b9e\u9645\u4e0a\u90ae\u7bb1\u3001\u7535\u8bdd\u53f7\u7801\u7b49\u4e5f\u4e0d\u80fd\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u901a\u8fc7\u8bed\u53e5\u544a\u8bc9\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u4f1a\u4e3a\u6211\u4eec\u7ef4\u62a4\u8fd9\u4e9b\u7ea6\u675f\u6761\u4ef6\u3002   Candidate keys are permitted to be null (in contrast to primary keys).  </li> <li> <p><code>check (P)</code>, where P is a predicate  </p> Example <p> </p> <p>\u53ef\u4ee5\u6709\u590d\u6742\u67e5\u8be2\uff0c\u4f46\u8bb8\u591a\u6570\u636e\u5e93\u4e0d\u652f\u6301\u3002e.g. <code>check ((course_id, sec_id, semester, year)  in (select course_id, sec_id, semester, year from teaches))</code> * <code>foreign key</code></p> <p>Integrity Constraint Violation During Transactions</p> <p> </p> <p>\u5728\u4e00\u4e2a\u4eba\u7684\u7236\u6bcd\u8fd8\u6ca1\u63d2\u5165\u7684\u65f6\u5019\uff0c\u65e0\u6cd5\u63d2\u5165\u8fd9\u4e2a\u4eba\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002 \u53ef\u4ee5\u89c4\u5b9a\uff0c\u5728\u8fd9\u4e2a\u4e8b\u52a1\u7ed3\u675f\u65f6\u518d\u68c0\u67e5\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\uff0c\u4e2d\u95f4\u72b6\u6001\u53ef\u4ee5\u4e0d\u6ee1\u8db3\u3002</p> </li> <li> <p><code>assertion</code> <code>create assertion &lt;assertion-name&gt; check &lt;predicate&gt;;</code> </p> Example <p>\u9a8c\u8bc1\u4e00\u4e2a\u5b66\u751f\u83b7\u5f97\u7684\u603b\u5b66\u5206\uff0c\u8981\u7b49\u4e8e\u83b7\u5f97\u7684\u6bcf\u95e8\u8bfe\u7684\u5b66\u5206\u7684\u603b\u548c\u3002  </p> <p>\u4f46\u4f7f\u7528 <code>assert</code> \u540e\uff0c\u6bcf\u4e2a\u5143\u7ec4\u7684\u6bcf\u6b21\u72b6\u6001\u66f4\u65b0\u65f6\u90fd\u8981\u8fdb\u884c\u68c0\u67e5\uff0c\u5f00\u9500\u8fc7\u5927\uff0c\u6570\u636e\u5e93\u4e00\u822c\u4e0d\u652f\u6301\u3002</p> </li> </ul>"},{"location":"DB/db4/#views","title":"Views","text":"<p>A view provides a mechanism to hide certain data from the view of certain users.   </p>"},{"location":"DB/db4/#view-definition","title":"View Definition","text":"<p>A view is defined using the create view statement which has the form <code>create view v as &lt; query expression &gt;</code> </p> Example <p> </p> <p>view \u53ef\u4ee5\u9690\u6389\u4e00\u4e9b\u7ec6\u8282\uff0c\u6216\u8005\u52a0\u4e0a\u4e00\u4e9b\u7edf\u8ba1\u6570\u636e\u3002\u53ef\u4ee5\u628a view \u5f53\u4f5c\u8868\u8fdb\u884c\u67e5\u8be2\u3002</p> <ul> <li>\u9690\u85cf\u4e0d\u5fc5\u8981\u7684\u7ec6\u8282\uff0c\u7b80\u5316\u7528\u6237\u89c6\u91ce</li> <li>\u65b9\u4fbf\u67e5\u8be2\u4e66\u5199</li> <li>\u6709\u5229\u4e8e\u6743\u9650\u63a7\u5236\uff08\u5982\u7528\u6237\u53ef\u4ee5\u770b\u5230\u5de5\u8d44\u603b\u548c\uff0c\u4f46\u4e0d\u80fd\u770b\u5230\u6bcf\u4e2a\u4eba\u7684\u5de5\u8d44\uff09</li> <li>\u6709\u72ec\u7acb\u6027\uff0c\u4f7f\u5f97\u6570\u636e\u5e93\u5e94\u7528\u5177\u6709\u8f83\u5f3a\u7684\u9002\u5e94\u6027\u3002</li> </ul> <p>\u53ef\u4ee5\u57fa\u4e8e\u89c6\u56fe\u518d\u5b9a\u4e49\u89c6\u56fe\u3002</p> Views Defined Using Other Views <p> </p>"},{"location":"DB/db4/#update-of-a-view","title":"Update of a View","text":"<p>\u5bf9\u4e00\u4e2a view \u8fdb\u884c\u4fee\u6539\uff0c\u76f8\u5f53\u4e8e\u901a\u8fc7\u8fd9\u4e2a\u7a97\u53e3\u5bf9\u539f\u8868\u7ee7\u7eed\u4fee\u6539\u3002  </p> <p>Example</p> <p> </p> <p>\u63d2\u5165\u540e\uff0c\u539f\u8868\u4e5f\u4f1a\u6709\u8fd9\u6761\u6570\u636e\uff0c\u5bf9\u4e8e\u5176\u7f3a\u5c11\u7684 <code>salary</code> \u5c5e\u6027\uff0c\u6211\u4eec\u8bbe\u5b9a\u4e3a <code>NULL</code>. \u5982\u679c\u8fd9\u4e2a\u5c5e\u6027\u7684\u7ea6\u675f\u662f <code>not NULL</code> \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u65e0\u6cd5\u6267\u884c\u8fd9\u6b21\u63d2\u5165\u3002</p> <p>\u5982\u679c\u89c6\u56fe\u4e2d\u6709\u7edf\u8ba1\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\u662f\u4e0d\u53ef\u4fee\u6539\u7684\u3002 \u6d89\u53ca\u5230\u5355\u4e2a\u8868\uff0c\u53ea\u662f\u9009\u51fa\u4e86\u90e8\u5206\u5c5e\u6027\uff08\u53bb\u6389\u975e\u4e3b\u5c5e\u6027\uff09\u7684\u884c\u5217\u89c6\u56fe\u662f\u53ef\u66f4\u65b0\u7684\u3002</p>"},{"location":"DB/db4/#view-and-logical-data-indepencence","title":"View and Logical Data Indepencence","text":"<p>If relation \\(S(a, b, c)\\) is split into two sub relations \\(S1(a,b)\\) and \\(S2(a,c)\\) How to realize the logical data independence?   </p> <ol> <li><code>create table S1...;</code> <code>create table S2...;</code></li> <li><code>insert into S1 select a, b from S;</code> <code>insert into S2 select a, c from S;</code></li> <li><code>drop table S;</code></li> <li><code>create view S(a, b, c) as select a, b, c from S1 natural join S2;</code> </li> </ol> <p><code>select * from S where...</code> \u5b9e\u9645\u4e0a\u662f\u5728\u505a <code>select * from S1 natural join S2 where ...</code> \uff08\u7cfb\u7edf\u4f1a\u5e2e\u6211\u8fd9\u6837\u505a\uff0c\u7a0b\u5e8f\u4e0d\u7528\u6539\uff0c\u53ea\u662f\u6267\u884c\u6539\u53d8\u4e86\uff09 <code>insert into S values (1,2,3)</code> \u5b9e\u9645\u4e0a\u662f\u5728\u505a <code>insert into S1 values (1,2)</code> \u548c <code>insert into S2 values (1,3)</code> </p>"},{"location":"DB/db4/#materialized-views","title":"*Materialized Views","text":"<p>\u7269\u5316\u89c6\u56fe</p> <p>Materializing a view: create a physical table containing all the tuples in the result of the query defining the view. \u672c\u6765\u7684\u89c6\u56fe\u662f\u4e00\u4e2a\u865a\u7684\u8868\uff0c\u4e3a\u4e86\u67e5\u8be2\u6267\u884c\u6548\u7387\uff0c\u6211\u4eec\u53ef\u4ee5\u628a view \u5b9a\u4e49\u4e3a Materializing view, \u5373\u751f\u6210\u4e00\u5f20\u4e34\u65f6\u8868\u4e0e\u5176\u5bf9\u5e94\u3002  </p> <p>If relations used in the query are updated, the materialized view result becomes out of date.     * Need to maintain the view, by updating the view whenever the underlying relations are updated.   </p>"},{"location":"DB/db4/#indexes","title":"Indexes","text":"<p>Indices are data structures used to speed up access to records with specified values for index attributes.  </p> <p>Index \u76f8\u5f53\u4e8e\u5728\u6570\u636e\u4e0a\u5efa\u7acb\u4e86 B+ \u6811\u7d22\u5f15\u3002\uff08\u7269\u7406\u5c42\u9762\uff09</p> Example <p><pre><code>create table student    (   ID varchar (5),\nname varchar (20) not null,\ndept_name varchar (20),\ntot_cred numeric (3,0) default 0,\nprimary key (ID) )\ncreate index studentID_index on student(ID)\n</code></pre> <code>select * from student where ID = \u201812345\u2019</code> \u5728\u6570\u636e\u5e93\u5185\u4e0d\u540c\u7684\u7269\u7406\u5b9e\u73b0\u6709\u4e0d\u540c\u7684\u67e5\u627e\u65b9\u6cd5\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u7d22\u5f15\uff0c\u53ea\u80fd\u987a\u5e8f\u67e5\u627e\u3002\u5982\u679c\u6709\u7d22\u5f15\uff0c\u7cfb\u7edf\u5185\u4f1a\u5229\u7528\u7d22\u5f15\u67e5\u627e\u3002  </p>"},{"location":"DB/db4/#transactions","title":"Transactions","text":"<ul> <li>Transactions begin implicitly Ended by commit work or rollback work  </li> <li>By default on most databases: each SQL statement commits automatically  <ul> <li>Can turn off auto commit for a session e.g. in MySQL, <code>SET AUTOCOMMIT=0;</code> </li> </ul> </li> </ul> Transaction examplex <pre><code>SET AUTOCOMMIT=0\nUPDATE account SET balance=balance-100 WHERE ano=\u20181001\u2019;\nUPDATE account SETbalance=balance+100 WHERE ano=\u20181002\u2019;\nCOMMIT;\nUPDATE account SET balance=balance -200 WHERE ano=\u20181003\u2019;\nUPDATE account SET balance=balance+200 WHERE ano=\u20181004\u2019;      COMMIT;\nUPDATE account SET balance=balance+balance*2.5%;\nCOMMIT;\n</code></pre>"},{"location":"DB/db4/#acid-properties","title":"ACID Properties","text":"<p>A  transaction  is a unit of program execution that accesses and possibly updates various data items.To preserve the integrity of data the database system must ensure: (\u539f\u5b50\u6027\u3001\u4e00\u81f4\u6027\u3001\u72ec\u7acb\u6027\u3001\u6301\u7eed\u6027)</p> <ul> <li>Atomicity. Either all operations of the transaction are properly reflected in the database or none are.</li> <li>Consistency. Execution of a transaction in isolation preserves the consistency of the database. \u6570\u636e\u5e93\u6267\u884c\u4e8b\u52a1\u524d\u540e\u90fd\u662f\u4e00\u81f4\u7684\u3002</li> <li>Isolation. Although multiple transactions may execute concurrently, each transaction must be unaware of other concurrently executing transactions.  Intermediate transaction results must be hidden from other concurrently executed transactions.   \u5f88\u591a\u4e8b\u60c5\u5171\u540c\u6267\u884c\uff0c\u4ed6\u4eec\u4e0d\u80fd\u4e92\u76f8\u5f71\u54cd\u3002<ul> <li>That is, for every pair of transactions \\(T_i\\) and \\(T_j\\), it appears to \\(T_i\\) that either \\(T_j\\), finished execution before \\(T_i\\) started, or \\(T_j\\) started execution after \\(T_i\\) finished.</li> </ul> </li> <li>Durability. After a transaction completes successfully, the changes it has made to the database persist, even if there are system failures.  \u6570\u636e\u5e93\u7684\u4e8b\u52a1\u4e00\u65e6\u63d0\u4ea4\uff0c\u8fd9\u4e2a\u4fee\u6539\u5c31\u8981\u6301\u7eed\u5730\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u53bb\uff0c\u4e0d\u80fd\u4e22\u5931\u3002\u5982\u78c1\u76d8\u51fa\u95ee\u9898\u4e86\uff0c\u65ad\u7535\u4e86\u7b49\u4f1a\u5f15\u53d1\u8fd9\u4e2a\u95ee\u9898\u3002 \u901a\u5e38\u4f7f\u7528\u65e5\u5fd7\u3002</li> </ul>"},{"location":"DB/db4/#authorization","title":"Authorization","text":"<ul> <li>Forms of authorization on parts of the database \u6570\u636e\u5c42\u9762\uff0c\u5373\u8868\u5df2\u7ecf\u5b58\u5728\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u7684\u64cd\u4f5c  <ul> <li>Select - allows reading, but not modification of data.</li> <li>Insert - allows insertion of new data, but not modification of existing data.</li> <li>Update - allows modification, but not deletion of data.</li> <li>Delete - allows deletion of data.</li> </ul> </li> <li>Forms of authorization to modify the database schema \u80fd\u5426\u5b9a\u4e49\u8868\uff0c\u7d22\u5f15\u7b49  <ul> <li>Index - allows creation and deletion of indices.</li> <li>Resources - allows creation of new relations.</li> <li>Alteration - allows addition or deletion of attributes in a relation.</li> <li>Drop - allows deletion of relations.</li> </ul> </li> </ul>"},{"location":"DB/db4/#authorization-specification-in-sql","title":"Authorization Specification in SQL","text":"<p><code>grant &lt;privilege list&gt; on &lt;relation name or view name&gt; to &lt;user list&gt;</code> \u628a\u67d0\u4e2a\u8868\u6216\u8005\u89c6\u56fe\u4e0a\u7684\u6743\u9650\u6388\u6743\u7ed9\u7528\u6237  </p> <p><code>&lt;user list&gt;</code> is:  </p> <ul> <li>a user-id</li> <li><code>public</code>, which allows all valid users the privilege granted</li> <li>A role (more on this later)</li> </ul> Example <p> </p> <p>update \u53ef\u4ee5\u7ec6\u5316\u5230\u5177\u4f53\u53ef\u4ee5\u5bf9\u54ea\u5217\u8fdb\u884c\u4fee\u6539\u3002  </p>"},{"location":"DB/db4/#revoking-authorization-in-sql","title":"Revoking Authorization in SQL","text":"<p>The revoke statement is used to revoke authorization. <code>revoke &lt;privilege list&gt; on &lt;relation name or view name&gt; from &lt;user list&gt;</code> </p>"},{"location":"DB/db4/#roles","title":"Roles","text":"<p>Privileges can be granted to roles. \u89d2\u8272\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u7ec4\u6743\u9650\u7684\u96c6\u5408\uff0c\u5982\u5b66\u6821\u7684\u6559\u52a1\u7ba1\u7406\u5458\u3001\u8001\u5e08\u3002  </p> <p><code>create role &lt;role-name&gt;</code> \u521b\u9020\u89d2\u8272\uff0c\u968f\u540e\u53ef\u4ee5\u628a\u6743\u9650\u6388\u4e88\u7ed9\u4ed6\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u628a\u89d2\u8272\u7684\u6743\u9650\u6388\u4e88\u7ed9\u7528\u6237/\u5176\u4ed6\u89d2\u8272\u3002  </p> Example <pre><code>create role instructor;\ngrant select on takes to instructor;  // \u6388\u4e88\u6743\u9650\u7ed9\u89d2\u8272\ngrant instructor to Amit;   //\u5c06\u89d2\u8272\u7684\u6743\u9650\u6388\u4e88\u7ed9\u7528\u6237\ncreate role teaching_assistant;\ngrant teaching_assistant to instructor;  // \u53ef\u4ee5\u5c06\u89d2\u8272\u7684\u6743\u9650\u6388\u4e88\u7ed9\u5176\u4ed6\u89d2\u8272   </code></pre>"},{"location":"DB/db4/#other-authorization-features","title":"Other Authorization Features","text":"<p>\u5f15\u7528\u7684\u6743\u9650\u6bd4\u8f83\u7279\u6b8a</p> <p><code>references privilege to create foreign key</code></p> <p>Example</p> <p><code>grant reference (dept_name) on department to Mariano;</code> </p> <p>\u5982\u679c\u4e0d\u4f5c\u4e3a\u6743\u9650\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u95f4\u63a5\u7684\u5916\u952e\u7ea6\u675f\u548c cascade \u5220\u6389\u88ab\u5f15\u7528\u7684\u6570\u636e\u3002\uff08\u5220\u6389\u996e\u7528\u8005\uff0c\u5219\u88ab\u5f15\u7528\u8005\u4e5f\u8981\u88ab\u5220\u9664\uff09\u56e0\u6b64\u8fd9\u4e5f\u662f\u4e2a\u6743\u9650</p> <ul> <li>transfer of privileges<ul> <li><code>grant select on department to Amit with grant option;</code>  \u52a0\u4e0a <code>with grant option</code> \u540e\uff0c\u7528\u6237\u53ef\u4ee5\u628a\u83b7\u5f97\u7684\u6743\u9650\u4f20\u9012\u4e0b\u53bb\u3002  </li> <li><code>revoke select on department from Amit, Satoshi cascade;</code> <code>cascade</code> \u628a\u8be5\u7528\u6237\u53ca\u5176\u6388\u4e88\u7684\u6743\u9650\u5168\u90e8\u6536\u56de\uff0c\u7ea7\u8054\u53cd\u5e94\u3002  </li> <li><code>revoke select on department from Amit, Satoshi restrict;</code> <code>restrict</code> \u53ea\u6536\u56de\u8be5\u7528\u6237\u7684\u6743\u9650\u3002  </li> <li><code>revoke grant option  for select on department from Amit;</code> \u6536\u56de\u7528\u6237\u8f6c\u6388\u7684\u6743\u529b\u3002  </li> </ul> </li> </ul>"},{"location":"DB/db5/","title":"Advanced SQL","text":""},{"location":"DB/db5/#accessing-sql-from-a-programming-language","title":"Accessing SQL from a Programming Language","text":"<ul> <li>Not all queries can be expressed in SQL, since SQL does not provide the full expressive power of a general-purpose language. \u4e0d\u662f\u6240\u6709\u7684\u67e5\u8be2\u90fd\u80fd\u7528 SQL \u8bed\u8a00\u8868\u8fbe\u3002</li> <li>Non-declarative actions -- such as printing a report, interacting with a user, or sending the results of a query to a graphical user interface -- cannot be done from within SQL. \u7528\u6237\u4ea4\u4e92\u662f\u56fe\u5f62\u754c\u9762\uff0c\u8bed\u97f3\u3001\u56fe\u50cf\uff0c\u6570\u636e\u5e93\u4e0d\u5177\u5907\u8fd9\u65b9\u9762\u7684\u529f\u80fd\u3002</li> </ul> <p>\u4ece\u9ad8\u7ea7\u8bed\u8a00\uff08\u5982 C\uff09\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u4e3b\u8981\u662f\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\uff1a</p> <ul> <li>API(Application Program Interface) -- A general-purpose program can connect to and communicate with a database server using a collection of functions. \u51fd\u6570\u5e93</li> <li>Embedded SQL -- provides a means by which a program can interact with a database server.  \u628a SQL \u8bed\u53e5\u5d4c\u5165\u5230\u8bed\u8a00\u5185<ul> <li>The SQL statements are translated at compile time into function calls.   </li> <li>At runtime,  these function calls connect to the database  using an API that provides dynamic SQL facilities.  </li> </ul> </li> </ul>"},{"location":"DB/db5/#jdbc-and-odbc","title":"JDBC and ODBC","text":"<p>API (application-program interface) for a program to interact with a database server Application makes calls to</p> <ul> <li>Connect with the database server \u5efa\u7acb\u8fde\u63a5</li> <li>Send SQL commands to the database server \u6307\u4ee4\u53d1\u9001\u5230\u670d\u52a1\u5668</li> <li>Fetch tuples of result one-by-one into program variables \u62ff\u56de\u7ed3\u679c</li> </ul> <p>SQL \u4e0e C \u8bed\u8a00\u5b58\u5728\u9e3f\u6c9f\uff08\u5982 select \u5f97\u5230\u7684\u662f\u96c6\u5408\uff0c\u4f46\u662f C \u8bed\u8a00\u6ca1\u6709\u8fd9\u79cd\u7c7b\u578b\uff09\u4f1a\u8fd4\u56de\u6307\u9488/\u8fed\u4ee3\u5668</p> <ul> <li>ODBC (Open Database Connectivity) works with C, C++, C#</li> <li>JDBC (Java Database Connectivity) works with Java \u901a\u8fc7\u7c7b\u5b9a\u4e49\uff0c\u5c06\u6570\u636e\u5e93\u64cd\u4f5c\u5c01\u88c5\u5230 Java \u5185</li> <li>Embedded SQL in C</li> <li>SQLJ - embedded SQL in Java</li> <li>JPA(Java Persistence API)  - OR mapping of Java  </li> </ul>"},{"location":"DB/db5/#jdbc","title":"JDBC","text":"<p>JDBC is a Java API for communicating with database systems supporting SQL.  </p> <pre><code>public static void JDBCexample(String dbid, String userid, String passwd) { try { Connection conn = DriverManager.getConnection(\"jdbc:oracle:thin:@db.yale.edu:2000:univdb\", userid, passwd); Statement stmt = conn.createStatement(); ... Do Actual Work ...\nstmt.close(); conn.close(); }      catch (SQLException sqle) {        System.out.println(\"SQLException : \" + sqle);     }      }\n</code></pre> <ul> <li>Open a connection</li> <li>Create a \u201cstatement\u201d object</li> <li>Execute queries using the Statement object to send queries and fetch results</li> <li>Exception mechanism to handle errors</li> </ul> Example <ul> <li>Update to database <pre><code>Update to database try {\nstmt.executeUpdate(\n\"insert into instructor values(\u201977987\u2019, \u2019Kim\u2019, \u2019Physics\u2019, 98000)\");\n} catch (SQLException sqle)\n{\nSystem.out.println(\"Could not insert tuple. \" + sqle);\n}\n</code></pre></li> <li>Execute query and fetch and print results <pre><code>ResultSet rset = stmt.executeQuery(\n\"select dept_name, avg (salary)\n        from instructor\n        group by dept_name\");\nwhile (rset.next()) {\nSystem.out.println(rset.getString(\"dept_name\") + \" \" + rset.getFloat(2));\n}\n</code></pre></li> <li>Getting result fields: <pre><code>rset.getString(\u201cdept_name\u201d) and rset.getString(1) equivalent if dept_name is the first argument of select result.\n</code></pre></li> <li>Dealing with Null values <pre><code>int a = rset.getInt(\u201ca\u201d);\nif (rset.wasNull()) Systems.out.println(\u201cGot null value\u201d);\n</code></pre></li> </ul> <p>Prepared Statement </p> Prepared Statement <p><pre><code>PreparedStatement pStmt = conn.prepareStatement(\n\"insert into instructor values(?,?,?,?)\");\npStmt.setString(1, \"88877\");      pStmt.setString(2, \"Perry\");\npStmt.setString(3, \"Finance\");   pStmt.setInt(4, 125000);\npStmt.executeUpdate();    pStmt.setString(1, \"88878\");\npStmt.executeUpdate();\n</code></pre> \u8fd9\u91cc\u7a7a\u683c\u662f\u5360\u4f4d\u7b26\uff0c\u8868\u793a\u6267\u884c\u65f6\u9700\u8981\u63d0\u4f9b\u56db\u4e2a\u53c2\u6570\u3002 <code>setString, setInt</code> \u5c31\u662f\u628a\u7b2c\u51e0\u4e2a\u5360\u4f4d\u7b26\u8bbe\u7f6e\u4e3a\u53c2\u6570\uff0c\u5e76 <code>executeUpdate</code> \u8fdb\u884c\u63d2\u5165\u3002</p> <p>SQL Injection</p> <p>Always use prepared statements when taking an input from the user and adding it to a query. NEVER create a query by concatenating strings which you get as inputs. SQL \u6ce8\u5165\u653b\u51fb\u3002</p> <p>Suppose query is constructed using <code>select * from instructor where name = \u2019\" + name + \u201c \u2019</code> Suppose the user, instead of entering a name, enters: <code>X\u2019 or \u2019Y\u2019 = \u2019Y</code> then the resulting string of the statement becomes: <code>select * from instructor where name = \u2019\" + \"X\u2019 or \u2019Y\u2019 = \u2019Y\" + \u201c\u2019</code> which is: <code>select * from instructor where name = \u2019X\u2019 or \u2019Y\u2019 = \u2019Y\u2019</code>  User could have even used <code>X\u2019; update instructor set salary = salary + 10000;</code> then <code>select * from instructor where name = \u2019X\u2019; update instructor set salary = salary + 10000;</code> Always use prepared statements, with user inputs as parameters</p> <p>Metadata Features </p> <ul> <li> <p>ResultSet metadata </p> Example <p>after executing query to get a ResultSet rs: <pre><code>ResultSetMetaData rsmd = rs.getMetaData();\nfor(int i = 1; i &lt;= rsmd.getColumnCount(); i++) {\nSystem.out.println(rsmd.getColumnName(i));\nSystem.out.println(rsmd.getColumnTypeName(i));\n}\n</code></pre></p> </li> <li> <p>Database metadata</p> Example <pre><code>DatabaseMetaData dbmd = conn.getMetaData();\nResultSet rs = dbmd.getColumns(null, \"univdb\", \"department\", \"%\");\n// Arguments to getColumns: Catalog, Schema-pattern, Table-pattern,\n// and Column-Pattern\n// Returns: One row for each column; row has a number of attributes\n// such as COLUMN_NAME, TYPE_NAME\nwhile( rs.next()) {\nSystem.out.println(rs.getString(\"COLUMN_NAME\"),\nrs.getString(\"TYPE_NAME\");\n</code></pre> </li> </ul> <p>Transaction Control in JDBC </p> <ul> <li>Can turn off automatic commit on a connection <code>conn.setAutoCommit(false);</code></li> <li>Transactions must then be committed or rolled back explicitly <code>conn.commit();</code> or <code>conn.rollback();</code></li> <li><code>conn.setAutoCommit(true)</code> turns on automatic commit.</li> </ul> <p>\u6240\u6709\u7684\u6570\u636e\u5e93\u529f\u80fd\u90fd\u662f\u901a\u8fc7 Java \u5c01\u88c5\u597d\u7684\u7c7b\u6765\u5b9e\u73b0\u7684\u3002</p>"},{"location":"DB/db5/#sqlj","title":"SQLJ","text":"<p>SQLJ: embedded SQL in Java <pre><code>#sql iterator deptInfoIter ( String dept name, int avgSal);\ndeptInfoIter iter = null;\n#sql iter = { select dept_name, avg(salary) as avgSal from instructor\ngroup by dept name };\nwhile (iter.next()) {\nString deptName = iter.dept_name();\nint avgSal = iter.avgSal();\nSystem.out.println(deptName + \" \" + avgSal);\n}\niter.close();\n</code></pre> \u5d4c\u5165\u90fd\u8981 <code>#sql</code> \u6807\u8bc6\uff0c\u6700\u540e\u4f1a\u88ab\u7f16\u8bd1\u5668\u8f6c\u5316\u4e3a Java \u7684\u7c7b\u3002</p>"},{"location":"DB/db5/#odbc","title":"ODBC","text":"<p>Each database system supporting ODBC provides a \"driver\" library that must be linked with the client program.</p> Example <pre><code>int ODBCexample()\n{\nRETCODE error;\nHENV    env;     /* environment */ HDBC    conn;  /* database connection */ SQLAllocEnv(&amp;env);\nSQLAllocConnect(env, &amp;conn);\nSQLConnect(conn, \u201cdb.yale.edu\", SQL_NTS, \"avi\", SQL_NTS, \"avipasswd\", SQL_NTS); \n{ ... Do actual work ... }\nSQLDisconnect(conn); SQLFreeConnect(conn); SQLFreeEnv(env); }\n</code></pre> <p>\u540c\u4e00\u4e2a\u6570\u636e\u5e93\u53ef\u80fd\u670d\u52a1\u4e8e\u591a\u4e2a\u7528\u6237\uff0c\u800c\u4e14\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u53ef\u80fd\u4e0d\u540c\uff0c\u5982\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u6807\u5fd7\u53ef\u80fd\u4e5f\u4e0d\u540c\uff0c\u56e0\u6b64\u9700\u8981\u7528 <code>SQL_NTS</code> \u6807\u8bc6\u3002</p> <ul> <li>Program sends SQL commands to database by using <code>SQLExecDirect</code></li> <li>Result tuples are fetched using <code>SQLFetch()</code></li> <li><code>SQLBindCol()</code> binds C language variables to attributes of the query result <ul> <li>When a tuple is fetched, its attribute values are automatically stored in corresponding C variables.  </li> <li>Arguments to SQLBindCol()<ul> <li>ODBC stmt variable, attribute position in query result</li> <li>The type conversion from SQL to C.  </li> <li>The address of the variable. </li> <li>For variable-length types like character arrays,   <ul> <li>The maximum length of the variable  </li> <li>Location to store actual length when a tuple is fetched.</li> <li>Note: A negative value returned for the length field indicates null value</li> </ul> </li> </ul> </li> </ul> </li> </ul> Example <p><pre><code>Main body of program\nchar deptname[80];\nfloat salary;\nint lenOut1, lenOut2;\nHSTMT stmt;\nchar * sqlquery = \"select dept_name, sum (salary) from instructor group by dept_name\";\nSQLAllocStmt(conn, &amp;stmt);\nerror = SQLExecDirect(stmt, sqlquery, SQL_NTS);\nif (error == SQL SUCCESS) {\nSQLBindCol(stmt, 1, SQL_C_CHAR, deptname , 80, &amp;lenOut1);\nSQLBindCol(stmt, 2, SQL_C_FLOAT, &amp;salary, 0 , &amp;lenOut2);\nwhile (SQLFetch(stmt) == SQL_SUCCESS) {\nprintf (\" %s %g\\n\", deptname, salary);\n}\n}\nSQLFreeStmt(stmt, SQL_DROP);\n</code></pre> \u5b9a\u4e49\u6570\u7ec4\u9700\u8981\u591a\u4e00\u4e2a\uff0c\u5426\u5219\u4f1a\u6709\u622a\u65ad\u3002\u5982 <code>char deptname[11];</code> \u624d\u80fd\u5b9a\u4e49\u5341\u4e2a\u5143\u7ec4\u3002 \u5982\u679c\u7ed3\u679c\u4e3a\u7a7a\uff0c\u5219 <code>lenOut</code> \u4e3a -1. </p> <p>ODBC Prepared Statements</p> <ul> <li>SQL statement prepared: compiled at the database<ul> <li>To prepare a statement <code>SQLPrepare(stmt, &lt;SQL String&gt;);</code> </li> <li>To bind parameters <code>SQLBindParameter(stmt, &lt;parameter#&gt;,  ... type information and value omitted for simplicity..)</code></li> <li>To execute the statement <code>retcode = SQLExecute(stmt);</code></li> </ul> </li> <li>Can have placeholders: e.g. <code>insert into account values(?,?,?)</code></li> <li>Repeatedly executed with actual values for the placeholders</li> </ul> <p>More ODBC Features </p> <ul> <li>Metadata features  <ul> <li>finding all the relations in the database and</li> <li>finding the names and types of columns of a query result or a relation in the database.</li> </ul> </li> <li>By default, each SQL statement is treated as a separate transaction that is committed automatically.<ul> <li>Can turn off automatic commit on a connection <code>SQLSetConnectOption(conn, SQL_AUTOCOMMIT, 0)}</code></li> <li>Transactions must then be committed or rolled back explicitly by <code>SQLTransact(conn, SQL_COMMIT)</code> or <code>SQLTransact(conn, SQL_ROLLBACK)</code></li> </ul> </li> </ul>"},{"location":"DB/db5/#embedded-sql","title":"Embedded SQL","text":"<p>A language to which SQL queries are embedded is referred to as a host language, and the SQL structures permitted in the host language comprise embedded SQL. \u5982\u628a SQL \u5d4c\u5165\u5230 C \u8bed\u8a00\uff0c\u90a3\u4e48 C \u8bed\u8a00\u662f host.  </p> <p>\u5728\u7f16\u8bd1\u524d\uff0c\u6709\u4e00\u4e2a\u9884\u7f16\u8bd1\u5668\uff0c\u5c06 SQL \u8bed\u53e5\u7ffb\u8bd1\u3002</p> <p>EXEC SQL statement is used in the host language to identify embedded SQL request to the preprocessor (in Java, <code># SQL { ... };</code>)</p> <p>Issues with Embedded SQL</p> <ul> <li>Mark the start point and end point of Embedded SQL <code>EXEC  SQL  &lt;statement&gt;\uff1b  //C</code></li> <li>Communication between database and programming language e.g. SQLCA\u3001SQLDA</li> <li>Address the mismatching issue between SQL and host lanugage. Handle result (set) with cursor Mapping of basic data types e.g. SQL:  Date \\(\\rightarrow\\) C: char(12)</li> </ul> Example <p><pre><code>insert\u3001delete\u3001update\u3001select(single record)\nmain( )\n{  EXEC SQL INCLUDE SQLCA; //\u58f0\u660e\u6bb5\u5f00\u59cb\nEXEC SQL BEGIN DECLARE SECTION;\nchar account_no [11];    //host variables(\u5bbf\u4e3b\u53d8\u91cf)\u58f0\u660e\nchar branch_name [16];\nint  balance;  EXEC SQL END DECLARE SECTION;//\u58f0\u660e\u6bb5\u7ed3\u675f\nEXEC SQL CONNECT  TO  bank_db  USER Adam Using Eve; scanf (\u201c%s  %s  %d\u201d, account_no, branch_name, balance);\nEXEC SQL insert into account values (:account_no, :branch_name, :balance);\nIf (SQLCA.sqlcode ! = 0)    printf ( \u201cError!\\n\u201d);\nelse       printf (\u201cSuccess!\\n\u201d);\n}\n</code></pre> \u6700\u5f00\u59cb\u58f0\u660e\u6bb5\u4e2d\u7684 host \u8bed\u53e5\uff0c\u53ef\u4ee5\u7528\u5728 SQL \u8bed\u53e5\u91cc\u3002</p> <p>\u4e24\u70b9\u4e0d\u5e73\u8861\uff1a\u6ca1\u6709\u96c6\u5408\uff1b\u6ca1\u6709 NULL\uff1b\u6ca1\u6709\u65e5\u671f\u7c7b\u578b</p> <p>\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u4f46 ODBC \u53ea\u6709\u5728\u8fd0\u884c\u65f6\u624d\u6709\u3002</p> <ul> <li>Static\uff1a Embedded SQL statements( include relation names and attribute names) are hard coded in program.</li> <li>Dynamic\uff1aEmbedded SQL statements are built at run time</li> </ul>"},{"location":"DB/db5/#procedural-constructs-in-sql","title":"Procedural Constructs in SQL","text":"<p>SQL provides a module language  Permits definition of procedures in SQL, with if-then-else statements, for and while loops, etc.</p> <p>Stored Procedures  </p> <ul> <li>Can store procedures in the database </li> <li>then execute them using the call statement</li> <li>permit external applications to operate on the database without knowing about internal details</li> </ul>"},{"location":"DB/db5/#sql-functions","title":"SQL Functions","text":"Example <p>SQL \u51fd\u6570\u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a table. </p> Example <p> </p>"},{"location":"DB/db5/#sql-procedures","title":"SQL Procedures","text":"<p>\u6709\u8f93\u5165\u53c2\u6570(<code>in</code>)\u548c\u8f93\u51fa\u53c2\u6570(<code>out</code>)</p> Example <p> </p>"},{"location":"DB/db5/#procedural-constructs","title":"Procedural Constructs","text":"<p>Compound statement: <code>begin ... end</code>, </p> <ul> <li>May contain multiple SQL statements between <code>begin</code> and <code>end</code>.</li> <li> <p>Local variables can be declared within a compound statements</p> </li> <li> <p><code>While</code> and <code>repeat</code> statements e.g. <pre><code>declare n integer default 0;\nwhile n &lt; 10 do\nset n = n + 1\nend while                           repeat\nset n = n  \u2013 1\nuntil n = 0\nend repeat\n</code></pre></p> </li> <li><code>For</code> loop Permits iteration over all results of a query     e.g. <pre><code>declare n  integer default 0;\nfor r as\nselect budget from department where dept_name = \u2018Music\u2019 do set n = n - r.budget end for\n</code></pre>     r \u8868\u793a\u8fd4\u56de\u7684\u6bcf\u4e00\u884c</li> </ul> Example procedure <p> </p>"},{"location":"DB/db5/#external-language-functionsprocedures","title":"External Language Functions/Procedures","text":"<p>SQL \u53ef\u4ee5\u8bbf\u95ee\u7531 C \u8bed\u8a00\u5b9a\u4e49\u7684\u51fd\u6570\uff08\u8fc7\u7a0b\uff09</p> Example <pre><code>create procedure dept_count_proc(in dept_name varchar(20),  count integer)\nlanguage C external name \u2019 /usr/avi/bin/dept_count_proc\u2019 create function dept_count(dept_name varchar(20))\nreturns integer\nlanguage C\nexternal name \u2018/usr/avi/bin/dept_count\u2019\n</code></pre> <p>\u53ef\u80fd\u6bd4\u8f83\u5371\u9669\uff0c\u653e\u5728\u865a\u62df\u673a\uff08Java\uff09\u6216\u8005\u72ec\u7acb\u7684\u7ebf\u7a0b</p>"},{"location":"DB/db5/#triggers","title":"Triggers","text":"<p>A <code>trigger</code> is a statement that is executed automatically by the system as a side effect of a modification to the database.  </p> <p>Trigger -  ECA rule</p> <ul> <li>E: Event \uff08 insert, delete \uff0cupdate\uff09</li> <li>C: Condition  </li> <li>A: Action</li> </ul> <p>To design a trigger mechanism, we must: </p> <ul> <li>Specify the conditions under which the trigger is to be executed.</li> <li>Specify the actions to be taken when the trigger executes.</li> </ul> Example <p> </p> time_slot_id Example <p> </p> <p>\u8fd9\u91cc time_slot_id \u4e0d\u662f\u4e3b\u952e\uff0c\u56e0\u6b64\u5220\u9664\u4e0d\u4f1a\u5f15\u8d77\u5176\u4ed6\u5f71\u54cd\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e2a\u89e6\u53d1\u5668\uff0c\u7528\u6765\u68c0\u67e5\u5f53\u524d\u8bfe\u7a0b\u7684 time_slot_id \u662f\u5426\u5728\u8868\u5185\u3002 \u7b2c\u4e8c\u4e2a\u89e6\u53d1\u5668\u8868\u793a\uff0ctime_slot_id \u5df2\u7ecf\u88ab\u5220\u5b8c\u4e86\uff0c\u4f46\u4f9d\u7136\u6709\u8bfe\u7a0b\u5728\u5f15\u7528\uff0c\u5c31\u8981 rollback.  </p> <ul> <li>Triggering event can be insert, delete or update</li> <li>Triggers on update can be restricted to specific attributes e.g. after(before) update of  takes on grade</li> <li>Values of attributes before and after an update can be referenced<ul> <li>referencing old row as:  for deletes and updates</li> <li>referencing new row as: for inserts and updates</li> </ul> </li> </ul> Trigger to Maintain credits_earned value <p> </p> <p>\u5982\u679c\u672c\u6765\u6302\u79d1\uff0c\u6216\u8005\u6ca1\u6709\u6210\u7ee9\uff0c\u66f4\u65b0\u540e\u4e0d\u518d\u6302\u79d1\u800c\u4e14\u6709\u6210\u7ee9\uff0c\u5c31\u628a\u5b66\u5206\u52a0\u4e0a\u53bb\u3002</p> <p>\u8981\u614e\u7528\u89e6\u53d1\u5668\uff0c\u7528\u5728\u5200\u5203\u4e0a\uff0c\u53ef\u80fd\u4f1a\u5f15\u53d1\u8fde\u9501\u53cd\u5e94\u3002</p> <p>Instead of executing a separate action for each affected row, a single action can be executed for all rows affected by a transaction</p> <ul> <li>Use <code>for each statement</code>  instead of <code>for each row</code></li> <li>Use <code>referencing old table</code> or <code>referencing new table</code> to refer to temporary tables (called transition tables) containing the affected rows</li> <li>Can be more efficient when dealing with SQL statements that update a large number of rows</li> </ul> Example <p> </p>"},{"location":"DB/db6/","title":"Entity-Relationship Model","text":""},{"location":"DB/db6/#example","title":"Example","text":"<ul> <li>\u4e00\u4e2a\u65b9\u5f62\u6846\u5c31\u662f\u4e00\u4e2a\u5b9e\u4f53\u7684\u96c6\u5408\uff0c\u4e0b\u9762\u5217\u51fa\u5176\u5c5e\u6027\u3002</li> <li>\u5b9e\u4f53\u4e0e\u5b9e\u4f53\u4e4b\u95f4\u6709\u5173\u7cfb\uff0c\u4e00\u4e2a\u83f1\u5f62\u6846\u8868\u793a\u5173\u7cfb\u3002 \u4e00\u5bf9\u4e00(\\(\\leftrightarrow\\))/\u4e00\u5bf9\u591a/\u591a\u5bf9\u4e00(\\(\\leftarrow, \\rightarrow\\))\u3002 \u8fd9\u91cc instructor \u5b9e\u4f53\u91cc\u4e0d\u9700\u8981 <code>dept</code> \u5c5e\u6027\uff0c\u56e0\u4e3a\u5728 department \u5b9e\u4f53\u91cc\u6709\u4e86\uff0c\u5426\u5219\u4f1a\u5197\u4f59\u3002</li> </ul> <p>\u6bcf\u4e2a\u5b9e\u4f53\u76f4\u63a5\u8f6c\u6362\u4e3a\u5173\u7cfb\u6a21\u5f0f\u3002 \u5173\u7cfb\u8f6c\u6362\u4e3a\u5143\u7ec4\uff0c\u5143\u7d20\u4e3a\u4e24\u4e2a\u8868\u7684 primary key. \u5bf9\u4e8e\u4e00\u5bf9\u591a\u7684\u60c5\u51b5\uff08\u5982 <code>instructor</code> \u548c <code>department\uff09\u8f6c\u6362\u540e</code> primary key \u4ecd\u4e3a ID. \u4e3a\u4e86\u51cf\u5c11\u8868\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u628a primary key \u76f8\u540c\u7684\u8868\u5408\u5e76\u3002</p> <p>\u53cc\u6a2a\u7ebf\u4e0e\u5355\u6a2a\u7ebf\u4e0d\u540c \u53cc\u6a2a\u7ebf\u8868\u793a\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5fc5\u987b\u53c2\u4e0e\u5173\u7cfb\uff0c\u800c\u5355\u6a2a\u7ebf\u5219\u8868\u793a\u5bf9\u8c61\u53ef\u4ee5\u4e0d\u53c2\u4e0e\u5173\u7cfb\u3002\u5982 <code>inst_dept</code> \u4e2d\u5982\u679c <code>department</code>-<code>inst_dep</code> \u4e3a\u53cc\u6a2a\u7ebf\uff0c\u5219\u8868\u793a\u6bcf\u4e00\u4e2a\u7cfb\u90fd\u8981\u6709\u8001\u5e08\u3002 \u6709\u4e9b\u8054\u7cfb\u662f\u9690\u542b\u7684\uff0c\u5982\u6388\u8bfe\u8001\u5e08\u548c\u542c\u8bfe\u7684\u5b66\u751f\u3002</p> <p><code>section</code> \u4e0d\u8db3\u4ee5\u552f\u4e00\u786e\u5b9a\u5143\u7ec4\uff0c\u79f0\u4e3a\u5f31\u5b9e\u4f53\uff0c\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u5b9e\u4f53\uff08\u5982 OOP\u3001DB \u90fd\u53ef\u4ee5\u6709\u540c\u6837\u5e74\u4efd\u5b66\u671f\u7684 1 \u73ed\uff09\u3002\u56e0\u4e3a\u8bfe\u7a0b\u53f7 <code>course_id</code> \u653e\u5728 <code>section</code> \u4f1a\u6709\u5197\u4f59\uff0c\u56e0\u6b64\u6ca1\u6709\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5bfc\u81f4\u5f62\u6210\u4e86\u4e00\u4e2a\u5f31\u5b9e\u4f53\u3002 <code>sec_course</code> \u8868\u793a\u8054\u7cfb\u7684\u662f\u5f31\u5b9e\u4f53\uff08\u53cc\u6846\uff09\uff0c<code>section</code> \u4e0d\u80fd\u79bb\u5f00 <code>course</code> \u5b58\u5728\u3002</p> <p>relationship \u4e0a\u4e5f\u53ef\u4ee5\u5e26\u5c5e\u6027\uff0c\u5982 <code>takes</code> \u4e0a\u7684 <code>grade</code>. </p> <p>\u5173\u7cfb\u53cc\u65b9\u53ef\u4ee5\u662f\u76f8\u540c\u7684\u5b9e\u4f53\u96c6\u5408\uff0c<code>course</code> \u8fd9\u91cc\u7684 <code>prereq</code> \u662f\u591a\u5bf9\u591a\uff0c\u8868\u793a\u4e00\u95e8\u8bfe\u53ef\u4ee5\u6709\u591a\u95e8\u9884\u4fee\u8bfe\uff0c\u4e00\u95e8\u8bfe\u4e5f\u53ef\u4ee5\u662f\u591a\u95e8\u8bfe\u7684\u9884\u4fee\u8bfe\u3002<code>{}</code> \u91cc\u9762\u662f\u591a\u4e2a\u503c\uff0c\u8868\u793a\u590d\u5408\u5c5e\u6027\u3002\u8fd9\u91cc\u8868\u793a <code>time_slot_id</code> \u5b9e\u9645\u4e0a\u53ef\u4ee5\u7531\u8fd9\u4e09\u4e2a\u5c5e\u6027\u590d\u5408\u800c\u6210\u3002</p>"},{"location":"DB/db6/#database-modeling","title":"Database Modeling","text":"<p>A database can be modeled as:</p> <ul> <li>a collection of entities,</li> <li>relationship among entities.</li> </ul>"},{"location":"DB/db6/#entities","title":"Entities","text":"<p>An entity is an object that exists and is distinguishable from other objects.  e.g. specific person, company, event, plant * Entities have attributes e.g. people have names and addresses    An entity set is a set of entities of the same type that share the same properties. e.g.* set of all persons, companies, trees, holidays</p> <p>Entity sets can be represented graphically as follows:</p> <ul> <li>Rectangles represent entity sets.</li> <li>Attributes listed inside entity rectangle</li> <li>Underline indicates primary key attributes</li> </ul> Example <p> </p>"},{"location":"DB/db6/#relationship-sets","title":"Relationship Sets","text":"<p>A relationship is an association among several entities. A relationship set is a mathematical relation among n \uf0b3 2 entities, each taken from entity  \\(\\{(e_1, e_2, ... e_n) | e_1 \\in E_1, e_2 \\in  E_2, ..., e_n \\in  E_n\\}\\) where \\((e_1, e_2, ..., e_n)\\) is a relationship.  </p> <p>\u672c\u8d28\u4e5f\u662f\u4e00\u4e2a\u96c6\u5408\u3002\u6700\u5f00\u59cb\u7684\u4f8b\u5b50\u4e2d\u5747\u4e3a\u662f\u4e8c\u5143\u8054\u7cfb\uff0c\u5373\u662f\u4e24\u4e2a\u5b9e\u4f53\u96c6\u5408\u7684\u5173\u7cfb\uff0c\u4f46\u662f\u5173\u7cfb\u53ef\u4ee5\u662f\u591a\u5143\u7684\uff0c\u5373\u591a\u4e2a\u5b9e\u4f53\u3002\u5982\u8001\u5e08\uff0c\u540c\u5b66\uff0cSRTP \u9879\u76ee\u53ef\u4ee5\u5171\u540c\u5f62\u6210\u4e00\u4e2a\u5173\u7cfb\u3002</p> Example <p> </p>"},{"location":"DB/db6/#relationship-sets-with-attributes","title":"Relationship Sets with Attributes","text":"<p>An attribute can also be property of a relationship set.</p> <p>e.g. The advisor relationship set between entity sets instructor and student may have the attribute date which tracks when the student started being associated with the advisor.</p> Example <p> </p>"},{"location":"DB/db6/#roles","title":"Roles","text":"<p>Entity sets of a relationship need not be distinct. Each occurrence of an entity set plays a \u201crole\u201d in the relationship The labels <code>course_id</code> and <code>prereq_id</code> are called roles.</p> Example <p> </p>"},{"location":"DB/db6/#degree-of-a-relationship-set","title":"Degree(\u5ea6) of a Relationship Set","text":"<p>binary relationship\uff08\u4e8c\u5143\u8054\u7cfb\uff09</p> <ul> <li>involve two entity sets (or degree two). </li> <li>most relationship sets in a database system are binary.</li> </ul> <p>\u5c3d\u91cf\u4e0d\u7528\u591a\u5143\u8054\u7cfb\uff0c\u56e0\u4e3a\u4e8c\u5143\u8054\u7cfb\u6bd4\u8f83\u6e05\u6670\u3002\u800c\u4e14\u4efb\u4f55\u7684\u591a\u5143\u8054\u7cfb\u90fd\u53ef\u4ee5\u901a\u8fc7\u5f15\u5165\u4e2d\u4ecb\u5b9e\u4f53\u8f6c\u5316\u4e3a\u4e8c\u5143\u8054\u7cfb\u3002</p> Example <p> </p> <p>\u8f6c\u5316\u4e3a\u4e8c\u5143\u8054\u7cfb\uff1a\u628a\u591a\u5143\u8054\u7cfb\u5b9e\u4f53\u5316\u3002\u5982 <code>proj_guide</code> \u91cc\u6709\u8001\u5e08\u3001\u5b66\u751f\u3001\u5de5\u7a0b\u7684 id. \u968f\u540e\u8fd9\u4e2a\u5b9e\u4f53\u53c8\u548c\u53e6\u5916\u4e09\u4e2a\u5b9e\u4f53\u5404\u6709\u4e00\u4e2a\u4e8c\u5143\u8054\u7cfb\u3002</p>"},{"location":"DB/db6/#attributes","title":"Attributes","text":"<p>An entity is represented by a set of attributes, that is descriptive properties possessed by all members of an entity set.</p> <p>Attribute types:</p> <ul> <li>Simple\uff08\u7b80\u5355\uff09 and composite\uff08\u590d\u5408\uff09 attributes.  </li> <li>Single-valued\uff08\u5355\u503c\uff09 and multivalued\uff08\u591a\u503c\uff09 attributes e.g. multivalued attribute: <code>phone_numbers</code> </li> <li>Derived\uff08\u6d3e\u751f\uff09 attributes<ul> <li>Can be computed from other attributes e.g. <code>age</code>, given <code>date_of_birth</code></li> </ul> </li> </ul> Example <p> </p>"},{"location":"DB/db6/#mapping-cardinality-constraints","title":"Mapping Cardinality Constraints","text":"<p>\u6620\u5c04\u57fa\u6570\u7ea6\u675f</p> <p>Express the number of entities to which another entity can be associated via a relationship set.</p> <ul> <li>One to one</li> <li>One to many</li> <li>Many to one</li> <li>Many to many </li> </ul> <p>We express cardinality constraints by drawing either a directed line (\\(\\rightarrow\\)), signifying \u201cone,\u201d or an undirected line (\\(\u2014\\)), signifying \u201cmany,\u201d between the relationship set and the entity set.</p>"},{"location":"DB/db6/#total-and-partial-participation","title":"Total and Partial Participation","text":"<ul> <li>Total participation (indicated by double line): every entity in the entity set participates in at least one relationship in the relationship set \u6240\u6709\u5143\u7d20\u90fd\u8981\u53c2\u4e0e\u5173\u7cfb</li> <li>Partial participation: some entities may not participate in any relationship in the relationship set</li> </ul>"},{"location":"DB/db6/#notation-for-expressing-more-complex-constraints","title":"Notation for Expressing More Complex Constraints","text":"<p>A line may have an associated minimum and maximum cardinality, shown in the form l..h, where l is the minimum and h the maximum cardinality</p> <ul> <li>A minimum value of 1 indicates total participation.</li> <li>A maximum value of 1 indicates that the entity participates  in at most one relationship</li> <li>A maximum value of * indicates no limit.</li> </ul> Example <p> </p> <p>\u591a\u5143\u5173\u7cfb\u91cc\uff0c\u6211\u4eec\u53ea\u5141\u8bb8\u6700\u591a\u6709\u4e00\u4e2a\u7bad\u5934\u3002</p>"},{"location":"DB/db6/#primary-key","title":"Primary Key","text":"<p>Primary Key for Relationship Sets</p> <p>\u591a\u5143\u8054\u7cfb\u7684 primary key \u662f\u4e24\u7aef key \u7684\u7ec4\u5408\u3002\u5982\u679c\u662f\u4e00\u5bf9\u4e00\u7684\u8054\u7cfb\uff0c\u90a3\u4e48\u5355\u4e2a\u5b9e\u4f53\u7684 key \u4e5f\u53ef\u4ee5\u4f5c\u4e3a primary key. \u4e00\u5bf9\u591a\u7684\u8054\u7cfb\uff08\u5982\u5bfc\u5e08\u548c\u5b66\u751f\u5c31\u662f\u4e00\u5bf9\u591a\uff0c\u90a3\u4e48\u4e3b\u952e\u5e94\u8be5\u4e3a\u5b66\u751f\uff09</p>"},{"location":"DB/db6/#weak-entity-sets","title":"Weak Entity Sets","text":"<p>An entity set that does not have a primary key is referred to as a weak entity set.</p> <p>The existence of a weak entity set depends on the existence of a identifying entity set\uff08\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\uff09</p> <ul> <li>It must relate to the identifying entity set via a total, one-to-many relationship set from the identifying to the weak entity set</li> <li>Identifying relationship\uff08\u6807\u8bc6\u6027\u8054\u7cfb\uff09 depicted using a double diamond</li> </ul> <p>The discriminator(\u5206\u8fa8\u7b26\uff0cor partial key) of a weak entity set is the set of attributes that distinguishes among all the entities of a weak entity set  when the identifying entity  they depend is known.</p> <p>We underline the discriminator of a weak entity set  with a dashed line. \uff08\u865a\u7ebf\uff09 We put the identifying relationship of a weak entity in a double diamond. \uff08\u53cc\u6846\uff09</p> Example <p> </p> <p>Redundant Attributes</p> <p> </p>"},{"location":"DB/db6/#reduction-to-relational-schemas","title":"Reduction to Relational Schemas","text":"<p>\u4e00\u4e2a ER \u56fe\u53ef\u4ee5\u8f6c\u6362\u6210\u591a\u79cd\u6a21\u5f0f\uff08\u56fe\u6570\u636e\u5e93\u3001\u9762\u5411\u5bf9\u8c61\u3001\u5173\u7cfb\u6a21\u5f0f\u7b49\uff09</p> <ul> <li>A strong entity set reduces to a schema with the same attributes <code>course(course_id, title, credits)</code></li> <li>A weak entity set becomes a table that includes a column for the primary key of the identifying strong entity set.   Primary key of the table is the union of the discriminator of the\u00a0weak entity set and\u00a0 the\u00a0primary key of the identifying strong entity set.\u00a0 \u6807\u8bc6\u96c6\u5408\u7684\u4e3b\u952e\u52a0\u4e0a\u5f31\u5b9e\u4f53\u96c6\u7684\u5206\u8fa8\u7b26\u3002 <code>section(course_id, sec_id, semester, year)</code></li> <li> <p>A many-to-many relationship set is represented as a schema with attributes for the primary keys of the two participating entity sets, and any descriptive attributes of the relationship set.  \u5373\u4e24\u4e2a\u96c6\u5408\u7684\u4e3b\u952e\u62fc\u8d77\u6765\uff0c\u52a0\u4e0a\u5173\u7cfb\u7684\u9644\u5e26\u5c5e\u6027\u3002  </p> Example <p> </p> <p><code>advisor = (s_id, i_id)</code></p> \u4e3a\u4ec0\u4e48\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u4e00\u5b9a\u8981\u8f6c\u5316\u6210\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f </li> <li> <p>Many-to-one and one-to-many relationship sets that are total on the many-side can be represented by adding an extra attribute to the \u201cmany\u201d side, containing the primary key of the \u201cone\u201d side. \u591a\u5bf9\u4e00\u53ef\u4ee5\u4e0d\u8f6c\u6362\u4e3a\u5355\u72ec\u7684\u5173\u7cfb\u6a21\u5f0f\uff0c\u76f4\u63a5\u5728\u201c\u591a\u201c\u90a3\u4e2a\u8868\u4e0a\u6dfb\u52a0\u201d\u4e00\u201c\u7684\u4e3b\u952e\u5373\u53ef\u3002</p> Example <p> </p> <p><code>inst_dept</code> \u672c\u8d28\u5c31\u662f\u5c06 <code>instructor</code> \u548c <code>department</code> \u5408\u5e76\uff0c\u5728 <code>instrutor</code> \u7684\u5c5e\u6027\u4e0a\u6dfb\u52a0 <code>dept_name</code>.  <pre><code>department(dept_name, building, budget)\ninstructor(ID,name,salary)\ninst_dept(ID, dept_name)\n// \u8f6c\u6362\u540e\uff08\u5373\u5408\u5e76\uff09\ndepartment(dept_name, building, budget)\ninstructor(ID, name, salary, dept_name)\n</code></pre></p> <p>\u5404\u6709\u5229\u5f0a\uff0c\u7b2c\u4e00\u79cd\u5199\u6cd5\u8868\u53ef\u80fd\u4f1a\u592a\u591a\uff0c\u7b2c\u4e8c\u79cd\u5199\u6cd5\u5408\u5728\u4e00\u8d77\u8868\u53ef\u80fd\u592a\u5927\uff0c\u4e0d\u5229\u4e8e\u7ba1\u7406\u3002</p> </li> </ul>"},{"location":"DB/db6/#composite-and-multivalued-attributes","title":"Composite and Multivalued Attributes","text":"<p>Composite attributes are flattened out by creating a separate attribute for each component attribute.  </p> <p>\u5c31\u50cf\u5728 C \u8bed\u8a00\u91cc\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u3002\u4f46\u662f\u5173\u7cfb\u6570\u636e\u5e93\u91cc\u6bcf\u4e2a\u5c5e\u6027\u90fd\u5fc5\u987b\u662f\u7b80\u5355\u6570\u636e\u7c7b\u578b\uff0c\u5c31\u5fc5\u987b\u628a\u8fd9\u4e9b\u590d\u5408\u5c5e\u6027\u94fa\u5e73\u3002</p> <p>e.g. <pre><code>instructor(ID, first_name, middle_initial, last_name,      street_number, street_name, apt_number, city, state, zip_code, date_of_birth, age)\n</code></pre></p> <p>A multivalued attribute M of an entity E is represented by a separate schema EM.  </p> <p>Schema EM has attributes corresponding to the primary key of E and an attribute corresponding to multivalued attribute M.  </p> Example <p> </p> <p>Special Case</p> <p> </p>"},{"location":"DB/db6/#design-issues","title":"Design Issues","text":""},{"location":"DB/db6/#common-mistakes-in-e-r-diagrams","title":"Common Mistakes in E-R Diagrams","text":"<ul> <li> <p>\u4fe1\u606f\u5197\u4f59 student \u7684 <code>dept_name</code> \u5e94\u8be5\u53bb\u6389      </p> </li> <li> <p>\u5173\u7cfb\u5c5e\u6027\u4f7f\u7528\u4e0d\u5f53 \u8fd9\u91cc\u4e00\u95e8\u8bfe\u53ef\u80fd\u6709\u5f88\u591a\u6b21\u4f5c\u4e1a\uff0c\u4e0d\u80fd\u53ea\u7528\u4e00\u4e2a\u5b9e\u4f53\u3002      </p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a  </p> </li> </ul>"},{"location":"DB/db6/#use-of-entity-sets-vs-attributes","title":"Use of entity sets vs. attributes","text":"<ul> <li>\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u660e\u786e\u653e\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\u3002</li> <li>\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u7535\u8bdd\u53f7\u7801\u53ef\u4ee5\u9644\u5c5e\u66f4\u591a\u5c5e\u6027\uff0c\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\u53ef\u4ee5\u7531\u591a\u4eba\u5171\u4eab\u3002\uff08\u5982\u529e\u516c\u5ba4\u7684\u516c\u5171\u7535\u8bdd\uff09</li> </ul>"},{"location":"DB/db6/#use-of-entity-sets-vs-relationship-sets","title":"Use of entity sets vs. relationship sets","text":"<p>Possible guideline is to designate a relationship set to describe an action that occurs between entities.</p> <p>\u5b9e\u4f53\u53ef\u4ee5\u4fbf\u4e8e\u4e0e\u5176\u4ed6\u5b9e\u4f53\u5efa\u7acb\u8054\u7cfb\u3002</p> <p>\u5982\u7535\u5546\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u5ba2\u6237\u548c\u5546\u54c1\u7528 <code>buy</code> \u8054\u7cfb\u8d77\u6765\uff0c\u4f46\u540e\u7eed\u8fd8\u4f1a\u6709\u4ed8\u6b3e\u3001\u7269\u6d41\u7b49\u60c5\u51b5\uff0c\u6211\u4eec\u6700\u597d\u628a <code>buy</code> \u5b9e\u4f53\u5316\u4e3a\u8ba2\u5355\u3002</p>"},{"location":"DB/db6/#placement-of-relationship-attributes","title":"Placement of relationship attributes","text":"<ul> <li>\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u6b21\u8bbf\u95ee\u7684\u8bbf\u95ee\u65e5\u671f\u3002</li> <li>\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u53ea\u80fd\u8bb0\u5f55\u7528\u6237\u6700\u8fd1\u4e00\u6b21\u8bbf\u95ee\u65e5\u671f\uff0c\u4e0d\u5b8c\u6574\u3002</li> </ul>"},{"location":"DB/db6/#binary-vs-non-binary-relationships","title":"Binary Vs. Non-Binary Relationships","text":"<ul> <li> <p>Binary versus n-ary relationship sets  Although it is possible to replace any nonbinary (n-ary, for \\(n &gt;2\\)) relationship set by a number of distinct binary relationship sets, a n-ary relationship set shows more clearly that several entities participate in a single relationship.</p> </li> <li> <p>Some relationships that appear to be non-binary may be better represented using binary relationships e.g. A ternary relationship parents, relating a child to his/her father and mother, is best replaced by two binary relationships,  father and mother Using two binary relationships allows partial information (e.g. , only mother being know) But there are some relationships that are naturally non-binary e.g. : <code>proj_guide</code></p> </li> </ul> Converting Non-Binary Relationships  <p> </p>"},{"location":"DB/db6/#extended-er-features","title":"Extended ER Features","text":"<ul> <li>Specialization\uff08\u7279\u5316\uff09 <ul> <li>Top-down design process; we designate subgroupings within an entity set that are distinctive from other entities in the set.</li> <li>Attribute inheritance \u2013 a lower-level entity set inherits all the attributes and relationship participation of the higher-level entity set to which it is linked.</li> </ul> </li> <li>Generalization\uff08\u6982\u5316\uff09 A bottom-up design process \u2013 combine a number of entity sets that share the same features into a higher-level entity set.</li> </ul>"},{"location":"DB/db7/","title":"\u5173\u7cfb\u6570\u636e\u5e93\u8bbe\u8ba1","text":""},{"location":"DB/db7/#relational-database-design","title":"Relational Database Design","text":""},{"location":"DB/db7/#introduction","title":"Introduction","text":"<p>Example</p> <p> </p> <p>What about combining instructor and department?  </p> <p>Pitfalls of the \u201cbad\u201d relations</p> <ul> <li>Information repetition (\u4fe1\u606f\u91cd\u590d)</li> <li>Insertion anomalies (\u63d2\u5165\u5f02\u5e38)</li> <li>Update difficulty (\u66f4\u65b0\u56f0\u96be)</li> </ul> <p>\u6570\u636e\u4e4b\u95f4\u5b58\u5728\u7740\u9690\u542b\u7684\u51fd\u6570\u7ea6\u675f\u5173\u7cfb\uff0c\u77e5\u9053\u4e86 id \u5c31\u53ef\u4ee5\u51b3\u5b9a\u5176\u4ed6\u5143\u7d20\u3002 e.g.  id \\(\\rightarrow\\) name, salary, dept_name; dept_name \\(\\rightarrow\\) building, budget \u4ea7\u751f\u5197\u4f59\u7684\u539f\u56e0\u662f dept_name \u51b3\u5b9a\u4e86\u90e8\u5206\u5c5e\u6027\uff0c\u4f46\u4ed6\u5374\u4e0d\u662f\u8fd9\u4e2a\u8868\u7684 primary key. \u597d\u7684\u5173\u7cfb\uff1a\u53ea\u6709 candidate key \u80fd\u51b3\u5b9a\u5176\u4ed6\u5c5e\u6027\u3002 \u62c6\u8868\u540e\u8981\u6709\u91cd\u53e0\u7684\u5c5e\u6027\uff0c\u5426\u5219\u65e0\u6cd5\u62fc\u63a5\u56de\u53bb\u3002\u8fd9\u91cc\u7684\u516c\u5171\u5c5e\u6027\u5fc5\u987b\u662f\u5206\u62c6\u51fa\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f\u7684 primary key, \u8fd9\u662f\u65e0\u635f\uff08\u6ca1\u6709\u4fe1\u606f\u635f\u5931\uff09\u8fde\u63a5\u3002</p> <p>lossy decomposition</p> <p><code>employee(ID, name, street, city, salary)</code> \\(\\rightarrow\\) <code>employee1 (ID, name)</code> and <code>employee2 (name, street, city, salary)</code> </p> Example of Lossless-Join Decomposition  <p> </p>"},{"location":"DB/db7/#lossless-join-decomposition","title":"Lossless-join Decomposition","text":"<p>Let \\(R\\) be a relation schema and let \\(R_1\\) and \\(R_2\\) form a decomposition of \\(R\\). That is \\(R = R_1  \\cup R_2\\). </p> <p>We say that the decomposition is a lossless decomposition if there is no loss of information by replacing  R with the two relation schemas \\(R = R_1  \\cup R_2\\).  Formally,   \\(r = \\prod_{R_1}(r)  \\bowtie \\prod_{R_2}(r)\\).  </p> <p>And,  conversely a decomposition is lossy if \\(r\\subset \\prod_{R_1}(r)  \\bowtie \\prod_{R_2}(r)\\) Note: more tuples implies more uncertainty (less information).</p> <p>A decomposition of \\(R\\) into \\(R_1\\) and \\(R_2\\) is lossless join if at least one of the following dependencies holds: (\u5145\u5206\u6761\u4ef6)</p> <ul> <li>\\(R_1\\cap R_2\\rightarrow R_1\\)</li> <li>\\(R_1\\cap R_2 \\rightarrow R_2\\) \u5373\u516c\u5171\u5c5e\u6027\u662f\u5176\u4e2d\u4e00\u4e2a\u5173\u7cfb\u7684 Key.   </li> </ul>"},{"location":"DB/db7/#devise-a-theory-for-the-following","title":"Devise a Theory for the Following","text":"<ul> <li>Decide whether a particular relation R is in \u201cgood\u201d form.  </li> <li>In the case that a relation R is not in \u201cgood\u201d form, decompose it into a set of relations \\(\\{R_1, R_2, \\ldots, R_n\\}\\) such that <ul> <li>each relation is in good form </li> <li>the decomposition is a lossless-join decomposition  \u5982\u679c\u5173\u7cfb\u662f\u4e0d\u597d\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u628a\u5b83\u65e0\u635f\u5206\u89e3\u6210\u597d\u7684\u5173\u7cfb\u3002</li> </ul> </li> <li>Our theory is based on:<ul> <li>functional dependencies</li> <li>multivalued dependencies</li> </ul> </li> <li>Normal  Forms(NF): \\(1NF \\rightarrow 2NF \\rightarrow 3NF \\rightarrow **BCNF** \\rightarrow 4NF\\) \u6709\u4e9b\u51fd\u6570\u4f9d\u8d56\uff0c\u4e0d\u80fd\u5728 BCNF \u4e2d\u5f97\u5230\u4f53\u73b0\uff0c\u9700\u8981\u628a\u51e0\u4e2a\u8868\u62fc\u5728\u4e00\u8d77\u624d\u80fd\u4f53\u73b0\uff0c\u53eb\u4f9d\u8d56\u4fdd\u6301\u3002\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u4ece BCNF \u56de\u5230 3NF.  </li> </ul>"},{"location":"DB/db7/#functional-dependencies","title":"Functional Dependencies","text":"<p>Functional Dependencies  are constraints on the set of legal relations. (\u6765\u81ea\u4e8e\u5e94\u7528\u5c42\u9762\u7684\u89c4\u5b9a) Require that the value for a certain set of attributes determines uniquely the value for another set of attributes.   e.g. dept_name \\(\\rightarrow\\) building A functional dependency is a generalization of the notion of a key.</p> <p>Let \\(R\\) be a relation schema \\(\\alpha\\subseteq R\\) and \\(\\beta\\subseteq R\\) (\\(\\alpha, \\beta\\) \u662f\u5c5e\u6027\u7684\u96c6\u5408) The functional dependency \\(\\alpha\\rightarrow \\beta\\) holds on \\(R\\) if and only if for any legal relations \\(r(R)\\), whenever any two tuples \\(t_1\\) and \\(t_2\\) of \\(r\\) agree on the attributes \\(\\alpha\\), they also agree on the attributes \\(\\beta\\).  That is,   </p> \\[ t_1[\\alpha] = t2 [\\alpha]   \\Rightarrow   t_1[\\beta ]  = t_2 [\\beta ]  \\] <p>\u901a\u8fc7\u6570\u636e\u5e93\u5b9e\u4f8b\u53ef\u4ee5\u8bc1\u4f2a\u51fd\u6570\u4f9d\u8d56\uff0c\u4f46\u4e0d\u80fd\u8bc1\u5b9e\u3002\uff08\u4f9d\u8d56\u662f\u6765\u81ea\u5e94\u7528\u5c42\u9762\u7684\u89c4\u5b9a\uff0c\u5148\u6709\u51fd\u6570\u4f9d\u8d56\uff0c\u518d\u6709\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff09</p> Example <p> </p> <p>\\(A\\rightarrow B\\) \u53ef\u4ee5\u8bc1\u4f2a\uff0c\u4f46\u4e5f\u4e0d\u80fd\u56e0\u6b64\u5c31\u8bf4 \\(B\\rightarrow A\\)</p> <ul> <li>K is a superkey for relation schema \\(R\\) if and only if \\(K\\rightarrow R\\)</li> <li>K is a candidate key for \\(R\\) if and only if <ul> <li>\\(K\\rightarrow R\\), and</li> <li>for no \\(\\alpha\\subset K\\), \\(\\alpha\\rightarrow R\\)</li> </ul> </li> </ul> <p>A functional dependency is trivial if it is satisfied by all relations. \u5168\u96c6\u53ef\u4ee5\u51b3\u5b9a\u5b50\u96c6\u3002 In general, \\(\\alpha\\rightarrow \\beta\\) is trivial if \\(\\beta\\subseteq \\alpha\\)</p>"},{"location":"DB/db7/#closure","title":"Closure(\u95ed\u5305)","text":""},{"location":"DB/db7/#closure-of-a-set-of-functional-dependencies","title":"Closure of a Set of Functional Dependencies","text":"<p>Given a set \\(F\\) of functional dependencies, there are certain other functional dependencies that are logically implied by \\(F\\). The set of all functional dependencies logically implied by \\(F\\) is the closure of \\(F\\). We denote the closure of \\(F\\) by \\(F^+\\).  </p> <p>e.g. \\(F=\\{A\\rightarrow B,B\\rightarrow C\\}\\) then \\(F^+=\\{A\\rightarrow B, B\\rightarrow C, A\\rightarrow C, AB\\rightarrow B, AB\\rightarrow C,\\ldots\\}\\)</p> <p>We can find \\(F^+\\), the closure of \\(F\\), by repeatedly applying Armstrong\u2019s Axioms:</p> <ul> <li>if \\(\\beta\\subseteq \\alpha\\) then \\(\\alpha \\rightarrow \\beta\\) (reflexivity, \u81ea\u53cd\u5f8b)</li> <li>if \\(\\alpha\\rightarrow \\beta\\) then \\(\\gamma \\alpha \\rightarrow \\gamma \\beta\\) (augmentation, \u589e\u8865\u5f8b)</li> <li>if \\(\\alpha\\rightarrow \\beta\\) and \\(\\beta \\rightarrow \\gamma\\) then \\(\\alpha\\rightarrow \\gamma\\) (transitivity, \u4f20\u9012\u5f8b)</li> </ul> <p>These rules are </p> <ul> <li>Sound\uff08\u6b63\u786e\u6709\u6548\u7684\uff09 generate only functional dependencies that actually hold</li> <li>Complete\uff08\u5b8c\u5907\u7684\uff09 generate all functional dependencies that hold</li> </ul> Example <p> </p> <p>Additional rules:</p> <ul> <li>If \\(\\alpha\\rightarrow \\beta\\) holds and \\(\\alpha\\rightarrow \\gamma\\) holds,  then \\(\\alpha\\rightarrow \\beta\\gamma\\) holds (union, \u5408\u5e76)</li> <li>If \\(\\alpha\\rightarrow \\beta\\gamma\\) holds, then \\(\\alpha\\rightarrow \\beta\\) holds and \\(\\alpha\\rightarrow \\gamma\\) holds (decomposition, \u5206\u89e3)</li> <li>If \\(\\alpha\\rightarrow \\beta\\) holds and \\(\\gamma \\beta\\rightarrow \\delta\\) holds, then \\(\\alpha \\gamma\\rightarrow \\delta\\) holds (pseudotransitivity\uff0c\u4f2a\u4f20\u9012)</li> </ul> Example <p> </p> <p>\u51fd\u6570\u4f9d\u8d56\uff0c\u53f3\u8fb9\u7684\u516c\u5171\u5c5e\u6027\u53ef\u4ee5\u53bb\u6389\uff0c\u4f7f\u5f97\u51fd\u6570\u53cc\u65b9\u6ca1\u6709\u4ea4\u96c6\u3002</p>"},{"location":"DB/db7/#closure-of-attribute-sets","title":"Closure of Attribute Sets","text":"<p>Given a set of attributes \\(a\\), define the closure of a under \\(F\\) (denoted by \\(a+\\)) as the set of attributes that are functionally determined by \\(a\\) under \\(F\\) </p> Example <p> </p>"},{"location":"DB/db7/#uses-of-attribute-closure","title":"Uses of Attribute Closure","text":"<ul> <li>Testing for superkey: To test if \\(\\alpha\\) is a superkey, we compute \\(\\alpha+\\), and check if \\(\\alpha+\\) contains all attributes of \\(R\\).</li> <li>Testing functional dependencies<ul> <li>To check if a functional dependency \\(\\alpha\\rightarrow \\beta\\) holds (or, in other words, is in \\(F+\\)), just check if \\(\\beta\\subseteq\\alpha+\\). </li> <li>That is, we compute \\(\\alpha+\\) by using attribute closure, and then check if it contains \\(\\beta\\). </li> <li>Is a simple and cheap test, and very useful</li> </ul> </li> <li>Computing closure of F For each \\(\\gamma\\subseteq R\\), we find the closure \\(\\gamma+\\), and for each \\(S \\subseteq \\gamma+\\), we output a functional dependency \\(\\gamma\\rightarrow  S\\).  </li> </ul> Example"},{"location":"DB/db7/#canonical-cover","title":"Canonical Cover\uff08\u6b63\u5219\u8986\u76d6\uff09","text":"<p>\u51fd\u6570\u4f9d\u8d56\u662f\u6700\u7b80\u5355\u7684\u5f62\u5f0f\uff0c\u4e0d\u5b58\u5728\u5197\u4f59\u7684\u51fd\u6570\u4f9d\u8d56\u3002</p> <p>a canonical cover of F is a \u201cminimal\u201d set of functional dependencies equivalent to F, having no redundant dependencies or redundant parts of dependencies.  </p> Example <p> </p> <p>A canonical cover for \\(F\\) is a set of dependencies Fc such that </p> <ul> <li>\\(F\\) logically implies all dependencies in \\(F_c\\)</li> <li>\\(F_c\\) logically implies all dependencies in \\(F\\)</li> <li>No functional dependency in \\(F_c\\) contains an extraneous attribute</li> <li>Each left side of functional dependency in \\(F_c\\) is unique.</li> </ul> Computing a Canonical Cover <p> </p>"},{"location":"DB/db7/#boyce-codd-normal-formazsx","title":"Boyce-Codd Normal FormAZSX","text":"<p>A relation schema \\(R\\) is in BCNF with respect to a set \\(F\\) of functional  dependencies if for all functional dependencies in \\(F^+\\) of the form where \\(\\alpha \\subseteq R\\) and \\(\\beta \\subseteq R\\), at least one of the following holds  </p> <ul> <li>\\(\\alpha \\rightarrow \\beta\\) is trivial</li> <li>\\(\\alpha\\) is a superkey for \\(R\\).  </li> </ul> <p>\u4efb\u4f55\u975e\u5e73\u51e1\u7684\u51fd\u6570\u4f9d\u8d56\u7684\u5de6\u8fb9\u90fd\u662f\u4e00\u4e2a key.  </p>"},{"location":"DB/db7/#decomposing-a-schema-into-bcnf","title":"Decomposing a Schema into BCNF","text":"<p>\u5bf9\u4e8e\u4e0d\u662f key \u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u5c31\u628a\u5b83\u5206\u89e3\u51fa\u6765\u4f5c\u4e3a\u5355\u72ec\u7684\u5173\u7cfb\u6a21\u5f0f\u3002 Suppose we have a schema \\(R\\) and a non-trivial dependency \\(\\alpha\\rightarrow \\beta\\) causes a violation of BCNF. We decompose \\(R\\) into: \\((\\alpha \\cup \\beta)\\) and \\((R-(\\beta-\\alpha))\\) \\(\\alpha\\) \u4f5c\u4e3a\u4e24\u4e2a\u5173\u7cfb\u6a21\u5f0f\u7684\u516c\u5171\u5c5e\u6027\uff0c\u4e5f\u662f\u4e00\u4e2a\u5173\u7cfb\u7684 key, \u8fd9\u6837\u624d\u662f\u65e0\u635f\u5206\u89e3\u3002</p> Example <p> </p>"},{"location":"DB/db7/#dependency-preservation","title":"Dependency Preservation","text":"<p>\u4f9d\u8d56\u4fdd\u6301\uff1a\u539f\u6765\u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u90fd\u53ef\u4ee5\u5728\u5206\u89e3\u540e\u7684\u51fd\u6570\u4f9d\u8d56\u4e2d\u5f97\u5230\u5355\u72ec\u68c0\u9a8c\u3002\u5426\u5219\u9700\u8981\u628a\u51e0\u4e2a\u5173\u7cfb\u8fde\u63a5\u5728\u4e00\u8d77\u624d\u80fd\u68c0\u9a8c\u4f9d\u8d56\u7684\uff0c\u79f0\u4e3a\u4f9d\u8d56\u4e0d\u4fdd\u6301\u3002</p> <p>Constraints, including functional dependencies, are costly to check in practice unless they pertain to only one relation.  </p> <p>If it is sufficient to test only those dependencies on each individual relation of a decomposition in order to ensure that all functional dependencies hold, then that decomposition is dependency preserving (\u4fdd\u6301\u4f9d\u8d56). \uff08\u5982\u679c\u901a\u8fc7\u68c0\u9a8c\u5355\u4e00\u5173\u7cfb\u4e0a\u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u5c31\u80fd\u786e\u4fdd\u6240\u6709\u7684\u51fd\u6570\u4f9d\u8d56\u6210\u7acb\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u5206\u89e3\u662f\u4f9d\u8d56\u4fdd\u6301\u7684\uff09 \uff08\u6216\u8005\uff0c\u539f\u6765\u5173\u7cfbR\u4e0a\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u90fd\u53ef\u4ee5\u5728\u5206\u89e3\u540e\u7684\u5355\u4e00\u5173\u7cfb\u4e0a\u5f97\u5230\u68c0\u9a8c\u6216\u8005\u63a8\u5bfc\u5f97\u5230\u3002\uff09 Because it is not always possible to achieve both BCNF and dependency preservation, we consider a weaker normal form, known as third normal form.</p> <p>Let \\(F_i\\) be the set of all functional dependencies in \\(F^+\\) that include only attributes in \\(R_i\\). (\\(F_i\\):  the restriction of \\(F\\) on \\(R_i\\))</p> <ul> <li>A decomposition is dependency preserving, if \\((F_1\\cup F_2 \\cup \\ldots \\cup F_n )^+ = F^+\\)</li> <li>If it is not, then checking updates for violation of functional dependencies may require computing joins, which is expensive.</li> </ul> Example <p> </p> Example <p> </p>"},{"location":"DB/db7/#third-normal-form","title":"Third Normal Form","text":"<p>\u4efb\u4f55\u4e00\u4e2a\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56\uff0c\u5982\u679c\u5de6\u8fb9\u4e0d\u662f\u4e00\u4e2a super key, \u90a3\u4e48\u53f3\u8fb9\u5fc5\u987b\u5305\u542b\u5728\u4e00\u4e2a candidate key \u91cc\u9762\u3002</p> <p>A relation schema \\(R\\) is in third normal form (3NF) if for all: $\\alpha\\rightarrow \\beta $ in \\(F^+\\) at least one of the following holds:</p> <ul> <li>\\(\\alpha\\rightarrow \\beta\\) is trivial (i.e., \\(\\beta \\in \\alpha\\))</li> <li>\\(\\alpha\\) is a superkey for R</li> <li>Each attribute A in \\(\\beta-\\alpha\\) is contained in a candidate key for \\(R\\). \u5019\u9009\u7801\u6709\u5f88\u591a\u4e2a\uff0c\u5305\u542b\u5728\u67d0\u4e00\u4e2a\u5019\u9009\u7801\u5373\u53ef\u3002  </li> </ul> Example <p> </p> <p>Goals of Normalization</p> <p>In the case that a relation scheme R is not in \u201cgood\u201d form, decompose it into a set of relation scheme  \\(\\{R_1, R_2, \\ldots, R_n\\}\\) such that </p> <ul> <li>each relation scheme is in good form (i.e., BCNF or 3NF)</li> <li>the decomposition is a lossless-join decomposition</li> <li>Preferably, the decomposition should be dependency preserving</li> </ul> E-R Modeling and Normal Forms <p> </p> <p>\u8fd9\u91cc\u7684\u65e0\u635f\u5206\u89e3\uff0c\u5148\u6307\u5b9a\u4e00\u4e2a\u8def\u5f84\uff0c\u8003\u8651\u6bcf\u4e24\u4e2a\u5173\u7cfb\u76f4\u63a5\u662f\u5426\u65e0\u635f\uff08\u516c\u5171\u5c5e\u6027\u662f\u5426\u4e3a\u5176\u4e2d\u4e00\u4e2a\u5173\u7cfb\u7684 key\uff09\u3002</p>"},{"location":"DB/db7/#multivalued-dependencies","title":"Multivalued Dependencies","text":"<p>There are database schemas in BCNF that do not seem to be sufficiently normalized.  </p> <p>Example</p> <p> </p> <p>\u5b58\u5728\u4e24\u79cd\u4e0d\u76f8\u5173\u7684\u591a\u503c\u4f9d\u8d56\u3002\u8001\u5e08 id \u53ef\u4ee5\u591a\u503c\u51b3\u5b9a child_name, \u53c8\u53ef\u4ee5\u591a\u503c\u51b3\u5b9a phone, \u4f46\u8fd9\u4e24\u4e2a\u5c5e\u6027\u662f\u4e0d\u76f8\u5173\u7684\uff0c\u653e\u5728\u4e00\u4e2a\u8868\u91cc\u5c31\u4f1a\u7ec4\u5408\u3002 \u7b2c\u4e8c\u5f20\u56fe\u7684\u4e3a Fourth Normal Form (4NF).</p> <p>\u56db\u8303\u5f0f\uff1a\u4e0d\u5b58\u5728\u975e\u5e73\u51e1\u7684\u591a\u503c\u4f9d\u8d56\u3002</p> <p>Let R be a relation schema and let \\(\\alpha\\subset R\\) and \\(\\beta\\subset R\\). The multivalued dependency \\(\\alpha\\rightarrow\\rightarrow\\beta\\) holds on \\(R\\) if in any legal relation \\(r(R)\\), for all pairs for tuples \\(t_1\\) and \\(t_2\\) in \\(r\\) such that \\(t_1[\\alpha] = t_2 [\\alpha]\\), there exist tuples \\(t_3\\) and \\(t_4\\) in \\(r\\) such that: </p> \\[ t_3[\\alpha] = t_4[\\alpha] = t_1[\\alpha]=t_2[\\alpha]\\\\ t_3[\\beta]=t_1[\\beta]\\\\ t_3[R-\\beta]=t_2[R-\\beta]\\\\ t_4[\\beta]=t_2[\\beta]\\\\ t_4[R-\\beta]=t_1[R-\\beta] \\] <p>A relation schema \\(R\\) is in 4NF with respect to a set \\(D\\) of functional and multivalued dependencies if for all multivalued dependencies in \\(D^+\\) of the form \\(\\alpha\\rightarrow \\rightarrow \\beta\\), where \\(\\alpha\\subset R\\) and \\(\\beta\\subset R\\), at least one of the following hold:</p> <ul> <li>\\(\\alpha\\rightarrow \\rightarrow \\beta\\) is trivial (i.e., \\(\\beta \\subset \\alpha\\) or \\(\\alpha \\cup \\beta= R\\))   \u5373\u9664\u4e86 \\(\\alpha,\\beta\\) \u4e3a\u6ca1\u6709\u5176\u4ed6\u5c5e\u6027\u3002</li> <li>\\(\\alpha\\) is a superkey for schema \\(R\\)</li> </ul> <p>\u4efb\u4f55\u4e00\u4e2a\u591a\u503c\u4f9d\u8d56\uff0c\u8981\u4e48\u5de6\u8fb9\u5c31\u662f\u4e2a key, \u8981\u4e48\u8fd9\u4e2a\u4f9d\u8d56\u662f\u5e73\u51e1\u7684\u3002</p> E-R Modeling and Normal Forms <p> </p> <p>\u4e0d\u662f BCNF, \u56e0\u6b64\u4e5f\u4e0d\u662f 4NF. </p>"},{"location":"DB/db7/#overall-database-design-process","title":"Overall Database Design Process","text":"<p>Denormalization for Performance</p> <p>Some aspects of database design are not caught by normalization. \u6709\u65f6\u5019\u6211\u4eec\u9700\u8981\u5f15\u5165\u5197\u4f59\uff0c\u6765\u4fdd\u6301\u6027\u80fd\u3002</p> <p>Example</p> <p> </p>"},{"location":"DB/db8/","title":"Physical Storage Systems","text":"Abstract <ul> <li>Classification of Physical Storage Media</li> <li>Storage Hierarchy </li> <li>Magnetic Disks</li> <li>Disk Interface Standards</li> <li>Performance Measures of Disks</li> <li>Optimization of Disk-Block Access</li> <li>Flash Storage &amp; SSD</li> <li>Storage Class Memory(NVM)</li> </ul>"},{"location":"DB/db8/#storage-hierarchy","title":"Storage Hierarchy","text":"<ul> <li>volatile storage(\u6613\u5931\u5b58\u50a8) loses contents when power is switched off.  </li> <li>non-volatile storage\uff08\u975e\u6613\u5931\u5b58\u50a8\uff09 Contents persist even when power is switched off.  </li> </ul> <p>\u4e3b\u8981\u4ece speed, cost, reliability \u8861\u91cf</p> <p>\u4ece\u9ad8\u5c42\u5f80\u4f4e\u5c42\u8d70\uff0c\u5b58\u50a8\u8bbe\u5907\u53d8\u5f97\u66f4\u6162\uff0c\u66f4\u4fbf\u5b9c\u548c\u66f4\u5927\u3002</p> <ul> <li>primary storage: Fastest media but volatile (cache, main memory).</li> <li>secondary storage: next level in hierarchy, non-volatile, moderately fast access time also called on-line storage </li> <li>tertiary storage: lowest level in hierarchy, non-volatile, slow access time also called off-line storage  \u5e38\u7528\u6765\u5907\u4efd</li> </ul> <p>NVM (non-volatile memory) \u8bbf\u95ee\u548c\u5185\u5b58\u4e00\u6837\uff0c\u4ee5\u5b57\u8282\u5bfb\u5740\uff0c\u800c\u4e14\u6389\u7535\u80fd\u4fdd\u6301\u6570\u636e\u3002 </p>"},{"location":"DB/db8/#magnetic-disks","title":"Magnetic Disks","text":"<p>\u4e00\u4e2a\u78c1\u76d8\u6709\u4e0a\u5341\u4e07\u4e2a track(\u78c1\u9053), \u4e00\u4e2a\u78c1\u9053\u53c8\u6709\u4e0a\u5343\u4e2a sector(\u6247\u533a\uff0c\u662f\u8ba1\u7b97\u673a\u548c\u78c1\u76d8\u4ea4\u6362\u6570\u636e\u7684\u6700\u5c0f\u5355\u4f4d). arm assemly \u7528\u6765\u5bfb\u9053\uff0c\u8bfb\u5199\u5934\u5171\u8fdb\u9000\uff0c\u5bfb\u627e\u6570\u636e\u5728\u54ea\u4e2a\u78c1\u9053\u4e0a\u3002 \u7b49\u5bf9\u5e94\u6247\u533a\u65cb\u8f6c\u5230\u8bfb\u5199\u5934\uff0c\u624d\u5f00\u59cb\u4f20\u8f93\u6570\u636e\u3002 \u540c\u6837\u78c1\u9053\u7ec4\u6210\u7684\u67f1\u9762\u3002\u5bf9\u4e8e\u5927\u6587\u4ef6\uff0c\u6700\u597d\u5b58\u5728\u540c\u4e00\u4e2a\u67f1\u9762\u4e0a\uff0c\u8fd9\u6837\u53ef\u4ee5\u5e76\u884c\u8bfb\u5199\u3002</p> <ul> <li>Read-write head</li> <li>Surface of platter divided into circular tracks\uff08\u78c1\u9053\uff09</li> <li>Each track is divided into sectors\uff08\u6247\u533a\uff09</li> <li>To read/write a sector<ul> <li>disk arm swings to position head on right track</li> <li>platter spins continually; data is read/written as sector passes under head</li> </ul> </li> <li>Cylinder\uff08\u67f1\u9762\uff09 i consists of ith track of all the platters </li> <li>Disk controller(\u78c1\u76d8\u63a7\u5236\u5668)\u2013 interfaces between the computer system and the disk drive hardware.</li> </ul>"},{"location":"DB/db8/#performance-measures-of-disks","title":"Performance Measures of Disks","text":"<ul> <li>Access time(\u8bbf\u95ee\u65f6\u95f4) \u2013 the time it takes from when a read or write request is issued to when data transfer begins.    Consists of: <ul> <li>Seek time\uff08\u5bfb\u9053\u65f6\u95f4\uff09\u2013 time it takes to reposition the arm over the correct track. <ul> <li>Average seek time is \u00bd the worst case seek time.  </li> <li>4 to 10 milliseconds on typical disks</li> </ul> </li> <li>Rotational latency\uff08\u65cb\u8f6c\u5ef6\u8fdf\uff09 \u2013 time it takes for the sector to be accessed to appear under the head. <ul> <li>Average latency is \u00bd of the worst case latency.  </li> <li>4 to 11 milliseconds on typical disks (5400 to 15000 r.p.m.)</li> </ul> </li> </ul> </li> <li>Data-transfer rate\uff08\u6570\u636e\u4f20\u8f93\u7387\uff09 \u2013 the rate at which data can be retrieved from or stored to the disk.</li> </ul> <p>\u5185\u5b58\u4f20\u8f93\u662f\u4ee5\u5757\u4e3a\u5355\u4f4d\u7684\u3002\u5373\u4f7f\u662f\u60f3\u8981\u8bbf\u95ee\u4e00\u4e2a byte, \u4e5f\u9700\u8981\u628a\u8fd9\u4e2a byte \u6240\u5728\u7684 4k \u5185\u5b58\u8bfb\u8fdb\u6765\u3002</p> <ul> <li> <p>Disk block is a logical unit for storage allocation and retrieval  </p> <ul> <li>Smaller blocks: more transfers from disk</li> <li>Larger blocks:  more space wasted due to partially filled blocks</li> </ul> </li> <li> <p>Sequential access pattern(\u987a\u5e8f\u8bbf\u95ee\u6a21\u5f0f) \u8fde\u7eed\u7684\u8bfb\u5199\u8bf7\u6c42\u53ea\u9700\u8981\u7b2c\u4e00\u6b21\u8bbf\u95ee\u78c1\u76d8  </p> </li> <li> <p>Random access pattern\uff08\u968f\u673a\u8bbf\u95ee\u6a21\u5f0f\uff09 \u6162\uff0c\u5e0c\u671b\u5c3d\u91cf\u591a\u4e00\u4e9b\u987a\u5e8f\u8bbf\u95ee\u3002 \u53ef\u4ee5\u7528\u4e00\u4e2a\u65e5\u5fd7\u628a\u8981\u4fee\u6539\u7684\u6570\u636e\u8bb0\u5f55\u4e0b\u6765\uff0c\u540e\u9762\u518d\u8fdb\u884c\u4fee\u6539\uff0c\u5c3d\u91cf\u7528\u987a\u5e8f\u8bbf\u95ee\u66ff\u6362\u968f\u673a\u8bbf\u95ee\u3002  </p> </li> <li> <p>I/O operations per second (IOPS \uff0c\u6bcf\u79d2I/O\u64cd\u4f5c\u6570) Number of random block reads that a disk can support per second. \u6bcf\u79d2\u53ef\u4ee5\u652f\u6301\u968f\u673a\u8bfb\u7684\u6b21\u6570\u3002  </p> </li> <li>Mean time to failure (MTTF\uff0c\u5e73\u5747\u6545\u969c\u65f6\u95f4)  the average time the disk is expected to run continuously without any failure.</li> </ul>"},{"location":"DB/db8/#optimization-of-disk-block-access","title":"Optimization of Disk-Block Access","text":"<ul> <li>Buffering: in-memory buffer to cache disk blocks \u6570\u636e\u8bfb\u8fdb\u6765\u5c31\u4e22\uff0c\u6bd4\u8f83\u53ef\u60dc\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5b83\u653e\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u4e07\u4e00\u540e\u9762\u9700\u8981\u4f7f\u7528\u53ef\u4ee5\u4e0d\u7528\u518d\u8bfb\u3002</li> <li>Read-ahead(Prefetch): Read extra blocks from a track in anticipation that they will be requested soon  \u9884\u53d6\uff0c\u8bfb\u67d0\u5757\u65f6\u9884\u6d4b\u90bb\u8fd1\u51e0\u5757\u4e5f\u4f1a\u88ab\u8bbf\u95ee\uff0c\u4e8e\u662f\u5c31\u4e00\u8d77\u53d6\u5230\u5185\u5b58\u4e2d\u3002\u8981\u6709\u4f9d\u636e\u5730\u9884\u53d6\uff0c\u4e0d\u7136\u65e0\u7528\u7684\u6570\u636e\u4f1a\u5360\u7528\u7f13\u5b58\u3002  </li> <li> <p>Disk-arm-scheduling algorithms re-order block requests so that disk arm movement is minimized  elevator algorithm </p> </li> <li> <p>File organization</p> <ul> <li>Allocate blocks of a file in as contiguous a manner as possible \u9884\u5148\u5206\u914d\u5f97\u5230\u7684\u5185\u5b58\u662f\u8fde\u7eed\u7684  </li> <li>Files may get fragmented <ul> <li>Sequential access to a fragmented file results in increased disk arm movement  </li> <li>Some systems have utilities to defragment the file system, in order to speed up file access</li> </ul> </li> </ul> </li> <li>Nonvolatile write buffers\uff08\u975e\u6613\u5931\u6027\u5199\u7f13\u5b58\uff09 speed up disk writes by writing blocks to a non-volatile RAM buffer immediately \u628a\u8981\u5199\u7684\u6570\u636e\u5148\u5199\u5230\u4e00\u4e2a\u5feb\u901f\u7684\u975e\u6613\u5931\u7684\u7f13\u5b58\u91cc\uff0c\u5982 NVM. \u8fd9\u65f6\u4e0a\u9762\u7684\u7a0b\u5e8f\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u4e86, NVM \u518d\u62e9\u673a\u5c06\u6570\u636e\u5199\u56de\u5230\u78c1\u76d8\u3002</li> <li>Log disk\uff08\u65e5\u5fd7\u78c1\u76d8\uff09 a disk devoted to writing a sequential log of block updates  </li> </ul>"},{"location":"DB/db8/#flash-storage","title":"Flash Storage","text":"<ul> <li>NAND flas<ul> <li>requires page-at-a-time read (page: 512 bytes to 4 KB) \u987a\u5e8f\u8bfb\u5199\u548c\u968f\u673a\u8bfb\u5199\u5dee\u4e0d\u591a  </li> <li>Page can only be written once \u50cf\u9ed1\u677f\uff0c\u5199\u4e86\u6570\u636e\u5982\u679c\u8981\u518d\u5199\u9700\u8981\u628a\u4e4b\u524d\u7684\u64e6\u6389\u3002  </li> </ul> </li> <li>SSD(Solid State Disks) Use standard block-oriented disk interfaces, but store data on multiple flash storage devices internally</li> </ul> <p>\u53ef\u80fd\u6709\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u6211\u4eec\u53cd\u590d\u8bfb\u5199\u3001\u64e6\u53bb\u67d0\u51e0\u4e2a\u5757\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u5b83\u4eec\u574f\u7684\u5f88\u5feb\u3002</p> <ul> <li>Remapping of logical page addresses to physical page addresses avoids waiting for erase</li> <li> <p>Flash translation table tracks mapping</p> <ul> <li>also stored in a label field of flash page</li> <li>remapping carried out by flash translation layer </li> </ul> </li> <li> <p>wear leveling(\u78e8\u635f\u5747\u8861) evenly distributed erase operators across physical blocks</p> </li> </ul> <p>Persistence \u5373\u6389\u7535\u662f\u5426\u80fd\u4fdd\u6301\u539f\u6570\u636e\u3002</p>"},{"location":"DB/db9/","title":"Data Storage Structures","text":"Abstract <ul> <li>File Organization<ul> <li>Fixed-Length Records</li> <li>Variable-Length Records</li> </ul> </li> <li>Organization of Records in Files<ul> <li>Heap File Organization</li> <li>Sequential File Organization</li> <li>Multitable Clustering File Organization</li> <li>Table Partition</li> </ul> </li> <li>Data-Dictionary Storage</li> <li>Storage Access &amp; Buffer manager<ul> <li>LRU strategy</li> <li>Clock algorithm</li> </ul> </li> <li>Columnar Representation</li> </ul>"},{"location":"DB/db9/#file-organization","title":"File Organization","text":"<ul> <li>The database is stored as a collection of files.  </li> <li>Each file is a sequence of records.  </li> <li>A record is a sequence of fields.  </li> </ul> <p>One approach:</p> <ul> <li>assume record size is fixed</li> <li>each file has records of one particular type only </li> <li>different files are used for different relations</li> </ul>"},{"location":"DB/db9/#fixed-length-records","title":"Fixed-Length Records","text":"<p>Store record i starting from byte \\(n \\times (i \u2013 1)\\), where n is the size of each record.  </p> <p>Record access is simple but records may cross blocks Modification: do not allow records to cross block boundaries  </p> <p>Deletion of record i:  alternatives:</p> <ul> <li>move records \\(i + 1,\\ldots , n\\) to \\(i, \\ldots. , n \u2013 1\\)</li> <li>move record n  to i</li> <li>do not move records, but link all free records on a free list \u8981\u5220\u9664\u7684\u6761\u6253\u4e0a\u6807\u8bb0\uff0c\u5f62\u6210\u4e00\u4e2a\u7a7a\u8bb0\u5f55\u7684\u94fe\u8868\u3002 \u4ee5\u540e\u5982\u679c\u8981\u5f80\u8fd9\u4e2a\u5757\u91cc\u63d2\u5165\uff0c\u76f4\u63a5\u901a\u8fc7\u6307\u9488\u627e\u5230\u7a7a\u8bb0\u5f55\u63d2\u5165\u5373\u53ef\uff0c\u968f\u540e\u66f4\u65b0\u6307\u9488\u3002 </li> </ul>"},{"location":"DB/db9/#variable-length-records","title":"Variable-Length Records","text":"<p>Variable-length records arise in database systems in several ways:</p> <ul> <li>Storage of multiple record types in a file. </li> <li>Record types that allow variable lengths for one or more fields such as strings (<code>varchar</code>)</li> <li>Record types that allow repeating fields (used in some older data models).</li> </ul> <p>Variable length attributes represented by fixed size (offset, length), with actual data stored after all fixed length attributes Null values represented by null-value bitmap\uff08\u7a7a\u4f4d\u56fe\uff09</p> <p>Example</p> <p>\u4e0d\u5b9a\u957f\u7684\u4fdd\u5b58\u5728\u540e\u9762\uff0c\u5b9a\u957f\u7684 (offset, length) \u4fdd\u5b58\u5728\u524d\u9762\u3002 </p> <p>\u8fd9\u91cc\u4f4d\u7f6e 12 \u653e\u7684 65000 \u662f\u5b9a\u957f\u7684 salary. \u4f4d\u7f6e 20 \u653e\u7684 0000, \u8868\u793a\u524d\u9762\u56db\u4e2a\u5c5e\u6027\u5747\u662f\u975e\u7a7a\u7684, 1 \u8868\u793a\u7a7a\u3002\uff08\u653e\u5728\u524d\u9762\u4e5f\u53ef\u4ee5\uff0c\u53ea\u8981\u5728\u4e00\u4e2a\u56fa\u5b9a\u4f4d\u7f6e\u80fd\u627e\u5230\u5373\u53ef\uff09 \u524d\u63d0\uff1a\u6bcf\u4e00\u4e2a\u8bb0\u5f55\u90fd\u662f\u88ab\u653e\u5728\u4e00\u8d77\u7684\u3002\uff08\u6709\u6309\u5217\u5b58\u50a8\u7684\u65b9\u5f0f\uff09</p>"},{"location":"DB/db9/#slotted-page-structure","title":"Slotted Page Structure","text":"<p>Slotted page\uff08\u5206\u69fd\u9875\uff09 header contains:</p> <ul> <li>number of record entries</li> <li>end of free space in the block \u4e00\u4e2a\u6307\u9488\u6307\u5411 free space \u672b\u5c3e\uff0c\u7528\u6765\u5206\u914d\u5185\u5b58</li> <li>location and size of each record</li> </ul> <p>\u5f53\u5220\u9664\u7684\u65f6\u5019\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u628a\u540e\u9762\u7684\u8bb0\u5f55\u632a\u8fc7\u53bb\uff0c\u8ba9\u81ea\u7531\u7a7a\u95f4\u66f4\u7d27\u51d1\uff0c\u8fd9\u6837\u9700\u8981\u4fee\u6539 entries, free space \u7684\u6307\u9488, \u504f\u79fb\u91cf\u4e5f\u8981\u8c03\u6574\u3002\u4e5f\u53ef\u4ee5\u6682\u65f6\u4e0d\u8c03\u6574\uff0c\u7b49\u540e\u9762\u5982\u679c\u9700\u8981\u5206\u914d\u5185\u5b58\u4f46\u4e0d\u591f\u7528\u65f6\uff0c\u518d\u4e00\u6b21\u6027\u91cd\u6574\u4e4b\u524d\u7684\u7a7a\u95f4\u3002</p>"},{"location":"DB/db9/#organization-of-records-in-files","title":"Organization of Records in Files","text":"<p>\u63d2\u5165\u5230\u54ea\u4e2a\u6587\u4ef6\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff1f</p> <ul> <li>Heap \u2013 record can be placed anywhere in the file where there is space \u6709\u4f4d\u7f6e\u6211\u5c31\u63d2\u8fdb\u53bb</li> <li>Sequential \u2013 store records in sequential order, based on the value of the search key of each record \u63d2\u5165\u7684\u5143\u7d20\u7ef4\u62a4\u4e00\u4e2a\u6b21\u5e8f</li> <li>In a multitable clustering file organization records of several different relations can be stored in the same file Motivation: store related records on the same block to minimize I/O</li> <li>B+-tree file organization - Ordered storage even with inserts/deletes  </li> <li>Hashing \u2013 a hash function computed on search key; the result specifies in which block of the file the record should be placed</li> </ul>"},{"location":"DB/db9/#heap-file-organization","title":"Heap File Organization","text":"<p>Array with 1 entry per block.  Each entry is a few bits to a byte, and records fraction of block that is free Free-space map \u7ef4\u62a4\u4e00\u4e2a\u7a7a\u95f2\u5757\u7684\u5730\u56fe\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u5757\u7684\u7a7a\u95f2\u7a0b\u5ea6\u3002</p> <p>Example</p> <p>3 bits per block, value divided by 8 indicates   </p> <p>\u5982 4 \u8868\u793a 4/8 \u7a7a\u95f2\u3002 \u987a\u5e8f\u8bbf\u95ee\u6bd4\u8f83\u4f4e\u6548\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u7b2c\u4e8c\u5c42\u6765\u8868\u793a\u5176\u4e2d\u7684\u6700\u5927\u7a7a\u95f2\u5757\u3002</p>"},{"location":"DB/db9/#sequential-file-organization","title":"Sequential File Organization","text":"<p>Suitable for applications that require sequential processing of the entire file  The records in the file are ordered by a search-key   </p> <ul> <li>Deletion \u2013 use pointer chains</li> <li>Insertion \u2013 locate the position where the record is to be inserted  \u8981\u66f4\u65b0 pointer chain \u6548\u7387\u4f4e\u3002\u6211\u4eec\u628a\u63d2\u5165\u7684\u653e\u5728\u672b\u5c3e\uff0c\u901a\u8fc7\u6307\u9488\u7ef4\u62a4\u79e9\u5e8f\u3002</li> </ul> <p>Need to reorganize the file from time to time to restore sequential order.  </p>"},{"location":"DB/db9/#multitable-clustering-file-organization","title":"Multitable Clustering File Organization","text":"<p>Store several relations in one file using a multitable clustering file organization.  </p> <p>Example</p> <p>\u5bf9\u4e8e\u8001\u5e08\u548c\u90e8\u5206\u7ecf\u5e38\u4e00\u8d77\u8bbf\u95ee\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u4fe1\u606f\u653e\u5728\u4e00\u8d77\u3002\uff08\u5982\u679c\u4e24\u4e2a\u8868\u7ecf\u5e38\u8fde\u63a5\uff0c\u8fd9\u6837\u6bd4\u8f83\u9ad8\u6548\uff09 \u4f46\u8fd9\u6837\u5bf9\u4e8e\u5355\u72ec\u67e5\u627e\u67d0\u4e2a\u4fe1\u606f\u5c31\u4e0d\u592a\u65b9\u4fbf\u3002  </p>"},{"location":"DB/db9/#table-partitioning","title":"Table Partitioning","text":"<p>Table partitioning: Records in a relation can be partitioned into smaller relations that are stored separately \u4e00\u4e2a\u8868\u592a\u5927\uff0c\u5bf9\u4e8e\u5e76\u884c\u8bbf\u95ee\u53ef\u80fd\u5f15\u53d1\u51b2\u7a81\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u8868\u5206\u5f00\uff0c\u5982\u5bf9\u4e8e\u6240\u6709\u8001\u5e08\u7684\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8ba1\u7b97\u673a\u7cfb\u7684\u8001\u5e08\u5206\u51fa\u6765\uff0c\u6570\u5b66\u7cfb\u7684\u8001\u5e08\u5206\u51fa\u6765\u3002\uff08\u6c34\u5e73\u5206\u5272\uff09\u4e5f\u53ef\u4ee5\u6309\u5217\u5b58\u50a8\u3002  </p>"},{"location":"DB/db9/#data-dictionary-storage","title":"Data Dictionary Storage","text":"<p>The Data dictionary (also called system catalog) stores metadata; that is, data about data, such as   \u5b9a\u4e49\u7684\u6570\u636e\u4e5f\u662f\u6570\u636e (metadata) \u6211\u4eec\u4e5f\u9700\u8981\u628a\u5b83\u4eec\u5b58\u50a8\u4e0b\u6765\u3002</p> <ul> <li>Information about relations</li> <li>User and accounting information, including passwords</li> <li>Statistical and descriptive data</li> <li>Physical file organization information</li> <li>Information about indices </li> </ul>"},{"location":"DB/db9/#storage-access-buffer-manager","title":"Storage Access &amp; Buffer manager","text":"<p>Blocks are units of both storage allocation and data transfer. Buffer \u2013 portion of main memory available to store copies of disk blocks. Buffer manager \u2013 subsystem responsible for allocating buffer space in main memory.</p> <p>\u5982\u6211\u4eec\u8981\u627e\u67d0\u5757\uff0c\u5148\u5728 buffer \u4e2d\u627e\uff0c\u5982\u679c\u6ca1\u627e\u5230\u5c31\u4ece\u78c1\u76d8\u4e2d\u8bfb\u51fa\u6765\u653e\u5230 buffer \u4e2d\u3002\u5f53 buffer \u5b8c\u4e86\u5c31\u9700\u8981\u8003\u8651\u5982\u4f55\u66ff\u6362\uff0c\u66ff\u6362\u54ea\u4e00\u5757\u3002</p> LRU Example <p> </p> <p>\u5982\u679c 4 \u88ab\u4fee\u6539\u8fc7\u4e86\uff0c\u90a3\u4e48\u66ff\u6362\u65f6\u9700\u8981\u5148\u628a\u8fd9\u5757\u5199\u56de\u5230\u78c1\u76d8\u4e2d\u3002\u5199\u56de\u65f6\u4e5f\u8981\u6ce8\u610f\u6389\u7535\u7b49\u95ee\u9898\u3002</p> <p>Programs call on the buffer manager when they need a block from disk.</p> <ul> <li>If the block is already in the buffer, buffer manager returns the address of the block in main memory</li> <li>If the block is not in the buffer, the buffer manager<ul> <li>Allocates space in the buffer for the block \u5728 buffer \u91cc\u66ff\u6362\u7a7a\u95f4\uff0c\u5982\u679c\u6709\u7a7a\u4f4d\u53ef\u4ee5\u76f4\u63a5\u5206\u914d\uff0c\u5426\u5219\u9700\u8981\u66ff\u6362\u3002<ul> <li>Replacing (throwing out) some other block, if required, to make space for the new block. \u6709\u4e0d\u540c\u7684\u7b56\u7565\u8fdb\u884c\u9009\u62e9\u8981\u4e22\u5f03\u7684\u5757\u3002</li> <li>Replaced block written back to disk only if it was modified since the most recent time that it was written to/fetched from the disk.</li> </ul> </li> <li>Reads the block from the disk to the buffer, and returns the address of the block in main memory to requester. </li> </ul> </li> </ul> <p>Pinned block </p> <p>memory block that is not allowed to be written back to disk \u6b63\u5728\u8bbf\u95ee\u8fd9\u4e00\u5757\uff0c\u90a3\u4e48\u8fd9\u4e00\u5757\u4e0d\u80fd\u88ab\u66ff\u6362\u51fa\u53bb  </p> <ul> <li>Pin done before reading/writing data from a block</li> <li>Unpin done when read /write is complete</li> <li>Multiple concurrent pin/unpin operations possible Keep a pin count, buffer block can be evicted only if pin <code>count = 0</code></li> </ul> <p>Shared and exclusive locks on buffer </p> <p>Readers get shared lock, updates to a block require exclusive lock Locking rules:</p> <ul> <li>Only one process can get exclusive lock at a time</li> <li>Shared lock cannot be concurrently with exclusive lock</li> <li>Multiple processes may be given shared lock concurrently</li> </ul>"},{"location":"DB/db9/#buffer-replacement-policies","title":"Buffer-Replacement Policies","text":"<ul> <li> <p>LRU strategy - replace the block least recently used.  </p> <ul> <li>Idea behind LRU \u2013 use past pattern of block references as a predictor of future references \u7528\u8fc7\u53bb\u7684\u8bbf\u95ee\u6a21\u5f0f\u63a8\u65ad\u8bb2\u6765\u7684\u8bbf\u95ee\u6a21\u5f0f</li> </ul> <p>LRU can be a bad strategy</p> <p> </p> </li> <li> <p>Toss-immediate strategy \u2013 frees the space occupied by a block as soon as the final tuple of that block has been processed</p> </li> <li>Most recently used (MRU) strategy \u2013  system must pin the block currently being processed.  After the final tuple of that block has been processed, the block is unpinned, and it becomes the most recently used block.</li> <li>Buffer managers also support forced output of blocks for the purpose of recovery </li> </ul> <p>\u6700\u597d\u7684\u7b56\u7565\u662f\u57fa\u4e8e\u9884\u6d4b\u7684\uff0c\u4f46\u662f\u9884\u6d4b\u672c\u8eab\u662f\u5f88\u96be\u7684\uff0c\u9700\u8981\u5229\u7528\u4eba\u5de5\u667a\u80fd\u7684\u65b9\u6cd5\u3002  </p>"},{"location":"DB/db9/#clock-an-approximation-of-lru","title":"Clock: An approximation of LRU","text":"<p>Arrange block into a cycle, store one <code>reference_bit</code> per block   When <code>pin_count</code> reduces to 0, set <code>reference_bit =1</code> <code>reference_bit</code> as the 2<sup>nd</sup> chance bit  </p> <pre><code>do for each block in cycle {\nif (reference_bit ==1)\nset reference_bit=0;\nelse if (reference_bit ==0)\nchoose this block for replacement;\n} until a page is chosen;\n</code></pre>"},{"location":"ICS/","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662f\u6d59\u6c5f\u5927\u5b66 \u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba \u8bfe\u7a0b\u7b14\u8bb0\u53ca\u76f8\u5173\u77e5\u8bc6 \u8001\u5e08: Yale Patt and Jiang Xiaohong \u53c2\u8003:</p> <ul> <li>Introduction to Computing Systems: From Bits and Gates to C and Beyond 3<sup>rd</sup>(\u6559\u6750)  </li> <li>Patt\u4e0a\u8bfe\u65f6\u8bb0\u7684\u7b14\u8bb0\u548c\u52a9\u6559TSjj\u590d\u4e60\u8bfe\u7b14\u8bb0\u3002</li> </ul> <p>\u5185\u5bb9:</p> <ul> <li> <p>Chapter 1: Introduction</p> </li> <li> <p>Chapter 2: Bits, Data Types and Operations</p> </li> <li>Chapter 3: Digital Logic Structures</li> <li>Chapter 4: The von Neumann Model</li> <li>Chapter 5: LC-3</li> <li>Chapter 6: Programming</li> <li>Chapter 7: Assembly Language</li> <li>Chapter 8: Data Structures</li> <li>Chapter 9: I/0</li> </ul>"},{"location":"ICS/ICS-1/","title":"Chapter 1 Introduction","text":"<p>Abstract</p> <p>Covered in Lecture 1 2022.7.11 Topics:   1. Two major themes: Abstraction and Hardware vs Software  2. A computer system  3. Level of Transfomation  </p>"},{"location":"ICS/ICS-1/#two-major-themes","title":"Two major themes","text":""},{"location":"ICS/ICS-1/#abstraction","title":"Abstraction","text":"<p>Too much or too tedious low-level details are abstracted into high-level interfaces that are easy to understand and use, thereby improving efficiency.</p> <p>Example</p> <p>You get in a taxi and you tell the driver to go to the airport. By contrast you can tell the driver each step like making a right turn, going down this street ten blocks and so on, which is not efficienct at all. However if you just tell him to go to the airport, then things are done.</p> <p>There is an underlying assumption, when everything about the detail is just fine. If we want to combine multiple components into a larger system, we should be careful about the components below the abstractions.  </p>"},{"location":"ICS/ICS-1/#hardware-vs-software","title":"Hardware vs Software","text":"<p>Both are important.</p>"},{"location":"ICS/ICS-1/#a-computer-system","title":"A computer system","text":"<ul> <li>CPU : operating data  </li> <li>MEM : storage or memory  </li> <li>Input &amp; output devices \uff08I/O)  </li> <li>Input: By typing input informations to CPU(keyboard)  </li> <li>Output: Show the outcome done by CPU on monitor  </li> </ul>"},{"location":"ICS/ICS-1/#level-of-transfomation","title":"Level of Transfomation","text":"<p>problem(in natural languages)-&gt;electrons by a sequence of transformation called level of transformation  </p> Problem (Natural language) Algorithm (eliminate ambiguity) Program (Python, C++, ...) Instruction set architecture(ISA) Micro-architecture Logic circuit Electronic circuit Electrons"},{"location":"ICS/ICS-1/#problem","title":"problem","text":"<p>Natural languages may have ambiguity.  </p> <p>Example</p> <p>\"\u5b89\" can mean peace(a woman in a house.), safety(\u516c\u5b89 police), contentment while it can also mean inexpensive, cheap in Japenese. \u201c\u4e1c\u897f\u201d means direction east and west, while it also means item, which may cause ambiguity.</p> <p>However, The statement of the problem should have No Ambiguity.  </p>"},{"location":"ICS/ICS-1/#algorithm","title":"Algorithm","text":"<p>Algorithm is a procedure step by step.</p> <ul> <li>definite, means no ambiguity.  </li> <li>effective computability(\u53ef\u884c\u7684), means every step can be successfully carried out.  </li> <li>finiteness, means the procedure will terminate.  </li> </ul>"},{"location":"ICS/ICS-1/#programs","title":"programs","text":"<p>Transform the algorithm into a computer program in one of the programming languages precisely.  </p> <ul> <li>high-level languages: they are independent of the computer on which the programs will execute. We say the language is\u201cmachine independent.(Python, C++,...)  </li> <li>low-level languages: they are tied to the computer on which the programs will execute. There is generally one such low-level language for each computer. That language is called the assembly language for that computer.(x86)</li> </ul>"},{"location":"ICS/ICS-1/#instruction-set-architectureisa","title":"Instruction Set Architecture(ISA)","text":"<p>ISA is the interface between software(program) and hardware.  </p> <p>Example</p> <p>\u6c7d\u8f66\u7684 ISA \u5c31\u662f\u4eba\u9700\u8981\u77e5\u9053\u4ed6\u80fd\u8ba9\u8f66\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u8f66\u9700\u8981\u505a\u5230\u4eba\u6307\u5b9a\u7684\u4efb\u52a1\u7684\u89c4\u8303\u3002 \u5bf9\u4e8e\u4e00\u8f86\u8f66\u7684\u8e0f\u677f\uff0c\u4eba\u77e5\u9053\u5982\u679c\u4ed6\u8e29\u4e0b\u53bb\uff0c\u90a3\u4e48\u8fd9\u8f86\u8f66\u4f1a\u5239\u8f66\u3002\u8f66\u77e5\u9053\u5982\u679c\u8e0f\u677f\u53d7\u5230\u4e86\u538b\u529b\uff0c\u8f66\u7684\u786c\u4ef6\u4f1a\u8ba9\u8f66\u505c\u4e0b\u3002ISA \u7684\u4f5c\u7528\u5c31\u662f\u5c06\u4eba\u8e29\u5239\u8f66\u548c\u8f66\u505c\u4e0b\u5bf9\u5e94\u8d77\u6765\u3002</p> <p>e.g. x86(1979 8086, 286, 386, 486), Power-PC, Sparc ISA contains:</p> <ul> <li>opcode: is used to describe operation  </li> <li>data type: a representation of operand.  </li> <li>addressing mode: mechanism that computer can use to find the address of the operands.(\u5bfb\u5740\u6a21\u5f0f)  </li> <li>Address ability: how many bytes per memory-slot</li> </ul>"},{"location":"ICS/ICS-1/#microarchitecture","title":"Microarchitecture","text":"<p>Example</p> <p>\u6240\u6709\u7684\u6c7d\u8f66\u90fd\u6709\u76f8\u540c\u7684 ISA\uff0c\u4f8b\u5982\u6240\u6709\u7684\u6c7d\u8f66\u4e2d\u4e09\u4e2a\u8e0f\u677f\u7684\u5b9a\u4e49\u5b8c\u5168\u76f8\u540c\uff0c\u5373\u4e2d\u95f4\u7684\u662f\u5239\u8f66\u3001\u53f3\u8fb9\u7684\u662f\u6cb9\u95e8\u3001\u5de6\u8fb9\u7684\u662f\u79bb\u5408\u5668\u3002 \u800c\u5c06 ISA \u5b9e\u73b0\u7684\u5177\u4f53\u7ec4\u7ec7\uff08\u5fae\u7ed3\u6784\uff09\u662f\u6307\u8f66\u76d6\u677f\u4e0b\u7684\u201c\u5185\u5bb9\u201d\u3002\u6240\u6709\u7684\u6c7d\u8f66\uff0c\u5176\u5236\u9020\u548c\u6a21\u578b\u90fd\u4e0d\u5c3d\u76f8\u540c\uff0c\u8fd9\u53d6\u51b3\u4e8e\u8bbe\u8ba1\u8005\u5728\u5236\u9020\u4e4b\u524d\u6240\u505a\u7684\u6743\u8861\u51b3\u7b56\uff0c\u5982\u6709\u7684\u5236\u52a8\u7cfb\u7edf\u91c7\u7528\u5239\u8f66\u7247\uff0c\u6709\u7684\u91c7\u7528\u5236\u52a8\u9f13\uff1b\u6709\u7684\u662f\u516b\u7f38\u53d1\u52a8\u673a\uff0c\u6709\u7684\u662f\u516d\u7f38\uff0c\u8fd8\u6709\u7684\u662f\u56db\u7f38\uff1b\u6709\u7684\u6709\u6da1\u8f6e\u589e\u538b\uff0c\u6709\u7684\u6ca1\u6709\u3002\u6211\u4eec\u79f0\u8fd9\u4e9b\u5dee\u5f02\u6027\u7684\u7ec6\u8282\u4e3a\u4e00\u4e2a\u7279\u5b9a\u6c7d\u8f66\u7684\u201c\u5fae\u7ed3\u6784\u201d\uff0c\u5b83\u4eec\u53cd\u6620\u4e86\u8bbe\u8ba1\u8005\u5728\u6210\u672c\u548c\u6027\u80fd\u4e4b\u95f4\u6240\u505a\u7684\u6743\u8861\u51b3\u7b56\u3002</p> <p>e.g. \u5bf9\u540c\u6837\u6307\u4ee4\u96c6 x86, \u4ed6\u7684\u5fae\u7ed3\u6784\u4ece 8086, 80286, 80386, 80486...\u76f4\u5230\u5982\u4eca\u7684\u7684 Skylake.</p> <p>Note</p> <p>ISA \u5c06\u6211\u4eec\u7684\u7a0b\u5e8f(language)\u8f6c\u5316\u4e3a 01 \u5b57\u7b26\u4e32(\u7c7b\u4f3c\u4e8e\u6c47\u7f16\u4e2d\u7684\u673a\u5668\u7801 \u5982E8 01\u4ee3\u8868jmp)\uff0c\u800c\u5fae\u7ed3\u6784\u662f\u5176\u5bf9\u5e94\u7684\u7269\u7406\u5b9e\u73b0(\u7535\u8def)\u3002 \u56e0\u6b64\u5bf9\u4e8e\u540c\u6837\u7684 01 \u5b57\u7b26\u4e32\uff0c\u5176\u5b9e\u73b0\u7684\u529f\u80fd\u76f8\u540c\uff0c\u4f46\u53ef\u4ee5\u6709\u5404\u79cd\u4e0d\u540c\u7684\u7269\u7406\u5b9e\u73b0\uff1b\u4f46\u4e00\u5957\u5fae\u7ed3\u6784\u53ea\u80fd\u5b9e\u73b0\u4e00\u7c7b ISA. \u2014\u2014by tsjj</p> <p>Logic Circuit and devices will be discussed later.</p>"},{"location":"ICS/ICS-10/","title":"Chapter 10 Calculator","text":"<p>Abstract</p> <p>Covered in Lecture 10, 2022.7.21  Topics:   </p>"},{"location":"ICS/ICS-2/","title":"Chapter 2 Bits, Data Types and Operations","text":"<p>Abstract</p> <p>Covered in Lecture 1 2022.7.11 and Lecture 2 2022.7.12   Topics:   1. the bit binary digit codes   2. data type(unsigned integer, signed integer, logical variable, float number, ASCII)  </p> <p>n bits, can represent \\(2^n\\) numbers, ranging from 0 to \\(2^{n-1}\\)</p>"},{"location":"ICS/ICS-2/#bits-bytes","title":"Bits, Bytes","text":"<ul> <li>bit: only 1/0  </li> <li>byte: 1 byte = 8 bits</li> </ul>"},{"location":"ICS/ICS-2/#data-type","title":"Data Type","text":""},{"location":"ICS/ICS-2/#integer","title":"Integer","text":""},{"location":"ICS/ICS-2/#unsigned-integer","title":"Unsigned Integer","text":"<p>n bits, can represent \\(2^n\\) numbers. range: \\([0,2^{n-1}]\\)</p>"},{"location":"ICS/ICS-2/#signed-integer","title":"Signed Integer","text":"<ul> <li> <p>signed-magnitude(\u539f\u7801): a leading 0 signifies a positive integer, a leading 1 signify a negative integer. In a 4-bit example,\\(0110=6,\\ 1110=-6\\),can represent \\([-7, 7]\\). It has the problem of \"positive zero\" and \"negative zero\".  </p> </li> <li> <p>1's Complement(\u53cd\u7801): For a non-negative number, its opposite number is obtained after bitwise inversion. In a 4-bit example, \\(0110=6,\\ 1001=-6\\), can represent [-7, 7], also has the problem of \"positive zero\" and \"negative zero\". It has also the problem above.</p> </li> <li> <p>2's Complement(\u8865\u7801): The highest bit of the 2's complement is the sign bit. The sign bit is 0 for non-negative numbers, and 1 for negative numbers. For an n-bit signed number, the weight of the sign bit is \\(-2^{n-1}\\). range: \\([-2^{n-1},2^{n-1}-1]\\). Obtain 2's Complement: \u6309\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00</p> </li> <li> <p>Extension</p> </li> <li> <p>sign extension: Fill sign bit when extending.(\u4e0d\u4f1a\u6539\u53d8\u6570\u5b57\u5927\u5c0f)  </p> </li> <li> <p>zero extension: Fill 0 when extending.  </p> <p>Example</p> <p>\u4e24\u4e2a\u6570 0100 1100 \u548c 1011. 0100 1100(76) + 1011(-5) = 11111011 \u4f46 11111011 != 71 \u56e0\u4e3a\u4e24\u4e2a\u6570\u5b57\u957f\u5ea6\u4e0d\u540c\uff0c\u8981\u5bf91011\u7b26\u53f7\u6269\u5145\u4e3a 1111 1011(-5)\uff0c\u518d\u76f8\u52a0\u5373\u53ef\u3002</p> </li> <li> <p>Overflow The only possible overflow situations:  </p> </li> <li> <p>positive + positive == negative, that is, carry to the sign bit, and the sign bit becomes 1 after adding</p> </li> <li> <p>negative + negative == positive\uff0cthe sign bit becomes 0     after adding.</p> </li> <li> <p>Conversion between binary and decimal \u75282\u4e58\u5341\u8fdb\u5236\u5c0f\u6570\uff0c\u5c06\u79ef\u7684\u6574\u6570\u90e8\u5206\u53d6\u51fa\uff0c\u518d\u7528 2 \u4e58\u4f59\u4e0b\u7684\u5c0f\u6570\u90e8\u5206\uff0c\u518d\u5c06\u79ef\u7684\u6574\u6570\u90e8\u5206\u53d6\u51fa\uff0c\u5982\u6b64\u76f4\u5230\u79ef\u4e2d\u7684\u6574\u6570\u90e8\u5206\u4e3a 0/1\uff0c\u6b64\u65f6 0/1 \u4e3a\u4e8c\u8fdb\u5236\u7684\u6700\u540e\u4e00\u4f4d\u3002\u6216\u8005\u8fbe\u5230\u6240\u8981\u6c42\u7684\u7cbe\u5ea6\u4e3a\u6b62\u3002 \u7136\u540e\u628a\u53d6\u51fa\u7684\u6574\u6570\u90e8\u5206\u6309\u987a\u5e8f\u6392\u5217\u8d77\u6765\uff0c\u5148\u53d6\u7684\u6574\u6570\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u5c0f\u6570\u7684\u9ad8\u4f4d\u6709\u6548\u4f4d\uff0c\u540e\u53d6\u7684\u6574\u6570\u4f5c\u4e3a\u4f4e\u4f4d\u6709\u6548\u4f4d\u3002  </p> </li> </ul>"},{"location":"ICS/ICS-2/#logical-variables","title":"Logical Variables","text":"<ul> <li>bit vector: number string of 0 or 1.  </li> <li> <p>functions: AND, OR, Exclusive-OR (XOR), Equivalence, NAND, NOR</p> <p>Info</p> <p>\\(X\\cdot Y\\Leftrightarrow X\\ AND\\ Y\\) \\(X+Y\\Leftrightarrow X\\ OR\\ Y\\) \\(X\\oplus Y\\Leftrightarrow X\\ XOR\\ Y\\) \\(\\overline X \\Leftrightarrow NOT\\ X\\) Be careful of the diffrence of +(AND) and +(plus).</p> </li> </ul>"},{"location":"ICS/ICS-2/#floating-point","title":"Floating Point","text":"S exp frac Float 1 8 23 Double 1 11 52 <p>Normalized form: \\(N=(-1)^S\\times M\\times 2^E\\) </p> <ul> <li>S: sign. \\(S=1\\) indicates the number is negative.</li> <li>M: \u5c3e\u6570. Normally, \\(M=1.frac\\).</li> <li>E: \u9636\u7801. Normally, \\(E=exp-Bias\\) where \\(Bias=127\\) for floating point numbers. \\(Bias = 1023\\) for double.  </li> </ul> <p>Note</p> <ul> <li>\u5f53 \\(exp=0\\) \u65f6, \u89c4\u5b9a \\(M=0.frac\\). \u5176\u4e2d \\(frac=0\\) \u65f6, \u8868\u793a\u7684\u6570\u5b57\u4e3a 0.(\u53ef\u80fd\u6709 +0/-0)  </li> <li>\u5f53 \\(exp=1111\\ 1111\\)\u65f6  <ul> <li>\u82e5 \\(frac=0\\), \u5219\u8868\u793a \\(+\\inf /\\) \\(-\\inf\\).  </li> <li>\u82e5 \\(frac\\neq 0\\), \u5219\u8868\u793a NaN(Not a number). e.g. \\(1/0, \\inf/\\inf\\).  </li> </ul> </li> </ul> <p>How to represent decimal number in the floating point type?  </p> <ul> <li>Convert decimal to binary.</li> <li>Convert binary to floating point.</li> </ul>"},{"location":"ICS/ICS-2/#ascii-code","title":"ASCII Code","text":"<p>Ameican Standard Code for Informationo Interchange.</p>"},{"location":"ICS/ICS-2/#hexadecimal-notation","title":"Hexadecimal Notation","text":"<p>convert 4(resp. 3) binary bits to 1 hexadecimal(resp. octal) bits. \\(A=1010,\\ B=1011,\\ C=1100,\\ D=1101,\\ E=1110,\\ F=1111\\)</p>"},{"location":"ICS/ICS-3/","title":"Chapter 3 Digital Logic Structures","text":"<p>Abstract</p> <p>Covered in Lecture 2, 2022.7.12 and Lecture 3, 2022.7.13  Topics:   1. Transistors  2.</p>"},{"location":"ICS/ICS-3/#transistors","title":"Transistors","text":"<ul> <li>N-type  </li> </ul> <p>Gate \u901a 1.2V \u7684\u65f6\u5019\u5bfc\u7ebf\u63a5\u901a(short circuit), \u901a 0V \u65f6\u5bfc\u7ebf\u65ad\u5f00(open circuit). \u5176\u4e2d Gate \u79f0\u4f5c\u6805\u6781, Drain \u79f0\u4f5c\u6f0f\u6781, Source \u79f0\u4f5c\u6e90\u6781.</p> <ul> <li>P-type  </li> </ul> <p> </p> <p>Gate \u901a 0V \u7684\u65f6\u5019\u5bfc\u7ebf\u63a5\u901a, \u901a 1.2V \u65f6\u5bfc\u7ebf\u65ad\u5f00.</p> <p>Note</p> <p>P-type: P\u65adN\u901a N-type: N\u65adP\u901a \u5176\u4e2d P \u6307 Positive(1.2V/\u63a5\u7535\u6e90\u6b63\u6781) \u5176\u4e2d N \u6307 Negtive(0V/\u63a5\u5730/\u63a5\u7535\u6e90\u8d1f\u6781)  </p>"},{"location":"ICS/ICS-3/#logical-gates","title":"Logical Gates","text":"<p>\u5176\u4e2d\u53ef\u4ee5\u76f4\u63a5\u7528\u5c0f\u7a7a\u5fc3\u5706\u8868\u793a\"\u975e\".</p>"},{"location":"ICS/ICS-3/#the-not-gateinverter","title":"The Not Gate(Inverter)","text":"In Out 0 1 1 0"},{"location":"ICS/ICS-3/#or-and-nor-gates","title":"OR and NOR Gates","text":""},{"location":"ICS/ICS-3/#nor-gate","title":"NOR Gate","text":"<p>\u4e3a\u4ec0\u4e48\u4e0d\u53ef\u4ee5\u76f4\u63a5\u5c06 P-type \u76f4\u63a5\u63a5\u5730?</p> <p>\u8fd9\u6837 C \u59cb\u7ec8\u548c\u5730\u63a5\u89e6, \u5f53 A, B \u7684\u503c\u5747\u4e3a 0 \u65f6, \u4e0a\u65b9\u4e5f\u4f1a\u63a5\u901a. \u8fd9\u6837 C \u4f1a\u540c\u65f6\u548c\u9ad8\u4f4e\u7535\u538b\u63a5\u901a. may burn the house!(by Patt)</p>"},{"location":"ICS/ICS-3/#or-gate","title":"OR Gate","text":"A(in) B(in) C(NOR) D(OR) 0 0 1 0 0 1 0 1 1 0 0 1 1 1 0 1 <p>Question</p> <p> </p> <p>\u4f46 P \u578b mos \u6676\u4f53\u7ba1\u7684\u6e90\u6781\u5fc5\u987b\u63a5\u6b63\u6781, \u6f0f\u6781\u5fc5\u987b\u63a5\u8d1f\u6781. \u5426\u5219\u4f1a\u6709\u4f20\u8f93\u7535\u538b\u635f\u5931.</p>"},{"location":"ICS/ICS-3/#and-and-nand-gates","title":"AND and NAND Gates","text":"A B C(NAND) D(AND) 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 1"},{"location":"ICS/ICS-3/#combinational-logic-circuits","title":"Combinational Logic Circuits","text":"<p>property: only about Right now, means their result is independent on the any past information stored in memory.</p>"},{"location":"ICS/ICS-3/#decoder","title":"Decoder(\u8bd1\u7801\u5668)","text":"<p>n input, \\(2^n\\) outputs, only one output is logically 1 correspounding to the input pattern.</p>"},{"location":"ICS/ICS-3/#muxmultiplexer","title":"Mux(Multiplexer \u6570\u636e\u9009\u62e9\u5668)","text":"<p>The funtion of a mux is to select only one of the input and connect it to the output.</p> <p>Example</p> <p> </p> <p>\\(S=0\\), C \u8f93\u51fa A \u7684\u503c; \\(S=1\\), C \u8f93\u51fa B \u7684\u503c. \u7b80\u5199\u4e3a: </p> <p>In general, a mux consist of \\(2^n\\) inputs and n select lines. \\(2^n\\) \u4e2a\u8f93\u5165\u5bf9\u5e94\u5404\u4e0d\u76f8\u540c\u7684\u9009\u62e9\u7ebf\u7684\u7ec4\u5408(n \u6761\u7ebf\u6709 \\(2^n\\) \u79cd\u7ec4\u5408), \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u4e2a S(n bits), \u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u8f93\u5165\u88ab\u9009\u4e2d.  </p> <p>Info</p> <p> </p> <p>\u7ebf\u4e0a\u7684\u4e00\u6487\u52a0\u6570\u5b57\u8868\u793a\u4fe1\u53f7\u7684\u4f4d\u6570. e.g. \u56fe\u4e2d ABCD \u90fd\u662f\u4e00\u4f4d\u7684\u8f93\u5165\u4fe1\u53f7, \u4f46\u9009\u62e9\u4fe1\u53f7 S \u4e3a\u4e24\u4f4d.  </p>"},{"location":"ICS/ICS-3/#one-bit-adderfull-adder","title":"One-Bit Adder(Full Adder)","text":"\\(A_i\\) \\(B_i\\) \\(C_i\\) \\(C_{i+1}\\) \\(S_i\\) 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 1 1 0 1 0 0 0 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1 <p>\u5176\u4e2d \\(A_i, B_i\\) \u8868\u793a A/B \u7684\u7b2c i \u4f4d, \\(S_i\\) \u8868\u793a\u6267\u884c\u52a0\u6cd5\u4e4b\u540e\u7b2c i \u4f4d\u7684\u503c, \\(C_{i+1}\\) \u8868\u793a\u662f\u5426\u6709\u8fdb\u4f4d.  </p> <p></p> <p>A circuit for adding two 4-bit binary numbers using block above.</p> <p></p> <p>\u5176\u4e2d,\u6700\u53f3\u8fb9\u7684\u4e00\u4e2a\u7535\u8def\u76f8\u5f53\u4e8e\u662f\u534a\u52a0\u5668(half adder), \u56e0\u4e3a\u4ed6\u76f8\u5f53\u4e8e\u6ca1\u6709\u8fdb\u4f4d(carry=0), \u53e6\u5916\u4e09\u4e2a\u7535\u8def\u662f\u5168\u52a0\u5668.</p>"},{"location":"ICS/ICS-3/#plathe-programmable-logic-array","title":"PLA(the Programmable Logic Array)","text":"<p>\u5176\u4e2d \\(2^n\\) \u4e2a\u8f93\u5165, \u7ecf\u8fc7 Decoder \u5f97\u5230\u8f93\u5165\u7684\u7ec4\u5408. \u6700\u540e\u5f97\u5230\u6211\u4eec\u5e0c\u671b\u751f\u6210\u7684\u51fd\u6570.  </p>"},{"location":"ICS/ICS-3/#logic-completeness","title":"Logic Completeness","text":"<p>{AND, OR, NOT} is logically complete because we can buile a circuit to carry out the specification of any truth table without other kind of gate(by PLA).  </p> <p>!!! Question Is NAND logically completeness?     Yes. \\(P\\ NAND\\ Q=NOT (P\\ AND\\ Q)\\)     so \\(P\\ NAND\\ P=NOT\\ P\\), \\(P\\ AND\\ Q=NOT(P\\ NAND\\ Q)\\), \\(P\\ OR\\ Q=(NOT\\ P)\\ NAND (NOT\\ Q)\\) </p>"},{"location":"ICS/ICS-3/#basic-storage-elements","title":"Basic Storage Elements","text":""},{"location":"ICS/ICS-3/#the-r-s-latchrs","title":"The R-S Latch(RS \u9501\u5b58\u5668)","text":"<p>\u5176\u4e2d a \u65e2\u662f\u6211\u4eec\u5b58\u50a8\u7684\u503c, \u4e5f\u662f\u6211\u4eec\u8981\u8f93\u51fa\u7684\u503c(a \u8f93\u51fa Q, b \u8f93\u51fa\u975e Q). \u5de5\u4f5c\u8fc7\u7a0b:  </p> <ul> <li>\u8d77\u521d\\(S=R=1\\), \u5904\u4e8e\u6df7\u6c8c\u72b6\u6001, \u4e0d\u77e5 a/b \u7684\u503c.</li> <li>\u4f7f\u7528\u65f6:  </li> <li>\u628a S(set) \u62e8\u4e00\u4e0b\u5230 0, \u5219 a-&gt;1, \u6210\u529f\u5c06 1 \u5b58\u5165.     \u518d\u628a S-&gt;1, \u6b64\u65f6 \\(S=R=1\\) \u5904\u4e8e\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001, \u53ea\u8981 S/R \u4e0d\u6539\u53d8, \u5b58\u50a8\u7684\u503c\u5c31\u4e0d\u4f1a\u6539\u53d8.  </li> <li>\u628a R(reset) \u628a 0, \u5219 a-&gt;0, \u6210\u529f\u5c06 0 \u5b58\u5165.     \u518d\u628a R-&gt;1, \u56de\u5230\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001.  </li> <li>\u975e\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001: \\(S=R=0\\), \u6df7\u6c8c\u72b6\u6001, \u800c\u4e14\u6b64\u65f6 \\(a=b=1\\), \u4e0d\u6ee1\u8db3 Q \u4e0e\u975e Q \u7684\u5b9a\u4e49, \u6b64\u65f6\u7535\u8def\u7684\u8f93\u51fa\u53d6\u51b3\u7535\u8def\u7684\u6027\u8d28.  </li> </ul> R S Q \u975eQ 1 1 ? ? Unknown 0 1 1 0 Set 1 1 1 0 The latch \"remenber\" the value 1 0 0 1 Reset 1 1 0 1 The latch \"remenber\" the value 0 0 1 1 Both go to high 1 1 ? ? Unknown"},{"location":"ICS/ICS-3/#the-gated-d-latchd","title":"The Gated D Latch(D \u9501\u5b58\u5668)","text":"<p>WE: Write Enable.  </p> <ul> <li>WE is asserted(WE=1, can write): D-&gt;1, S=1 R=0, 1 is stored. D-&gt;0, S=0 R=1, 0 is stored. Thus, we can think that the Gated D Latch store the value of D.  </li> <li>WE is not asserted(WE=0, only read): R=1 S=1, so whether D is 0 or 1 it cannot change the stored value.</li> </ul>"},{"location":"ICS/ICS-3/#the-concept-of-memory","title":"The Concept of Memory","text":""},{"location":"ICS/ICS-3/#address-space","title":"Address Space","text":"<p>We refer to the unique identifier associated with each memory location as its address.  </p> <p>We refer to the total number of uniquely identifiable locations as the memory\u2019s address space.</p>"},{"location":"ICS/ICS-3/#addressability","title":"Addressability","text":"<p>We refer to the number of bits of information stored in each location as its addressability.</p> <p>For \\(2^n\\)-by-m-bit memory, its address space is \\(2^n\\) while its addressability is m.</p> <p>Example</p> <p>\u5047\u8bbe\u7389\u6e56\u4e03\u5e62 6 \u697c\u4e3a\u4e00\u5757\u5185\u5b58, \u5176\u4e2d\u8fd9\u4e00\u697c\u4e00\u5171\u6709 20 \u95f4\u5bdd\u5ba4, \u8fd9\u5c31\u662f\u5185\u5b58\u7a7a\u95f4.(\u56e0\u4e3a\u6bcf\u95f4\u5bdd\u5ba4\u90fd\u6709\u72ec\u4e00\u65e0\u4e8c\u7684\u5bdd\u5ba4\u53f7) \u800c\u6bcf\u95f4\u5bdd\u5ba4\u90fd\u662f\u56db\u4eba\u95f4, \u56e0\u6b64\u53ef\u5bfb\u5740\u80fd\u529b\u662f 4, \u8868\u793a\u6700\u5c0f\u7684\u5bfb\u5740\u5355\u5143.</p> <p>A \\(2^2\\)-by-3-Bit Memory</p> <p> </p> <p>\u5176\u4e2d A[] \u8868\u793a\u5730\u5740, D[] \u8868\u793a\u6570\u636e.(A[1:0] \u53ef\u4ee5\u7406\u89e3\u4e3a Python \u91cc\u7684 list)  </p> <ul> <li>\u4ece A[1:0] \u4e2d\u8f93\u5165\u5730\u5740, \u901a\u8fc7 Decoder \u5bf9\u5e94\u67d0\u4e00\u884c. \u5176\u4e2d\u6bcf\u4e00\u884c\u4e3a 3 bits, \u56e0\u6b64\u6709\u4e09\u4e2a\u5b58\u50a8\u5668.  </li> <li>WE=0 \u65f6\u8bfb\u53d6\u6570\u636e, \u6b64\u65f6\u6bcf\u4e2a bit \u4e2d\u7684\u5b58\u50a8\u5668(R=S=1, \u53ea\u80fd\u8bfb)\u5c06\u5176\u4e2d\u7684\u503c\u8bfb\u51fa, \u901a\u8fc7 mux \u6700\u540e\u8f93\u51fa\u51fa\u6765\u5f97\u5230 D[2:0].  </li> <li>WE=1 \u65f6\u5199\u5165\u6570\u636e, \u6b64\u65f6\u6bcf\u4e2a bit \u4e2d\u4e3a D\u9501\u5b58\u5668, \u7531\u4e0a\u6587\u53ef\u77e5\u4f1a\u76f4\u63a5\u5199\u5165 D \u7684\u503c, \u5373 \\(D_i[2:0]\\). \u6b64\u65f6\u4e5f\u4f1a\u6709\u8f93\u51fa.  </li> </ul>"},{"location":"ICS/ICS-3/#sequential-logic-circuits","title":"Sequential Logic Circuits","text":"<p>property: they contain store elements to keep track of prior history information.</p>"},{"location":"ICS/ICS-3/#state","title":"State","text":"<p>The state of a system is a snapshot of all the relevant elements of the system at the moment the snapshot is taken.  </p>"},{"location":"ICS/ICS-3/#finite-state-machine","title":"Finite State Machine","text":"<p>A finite state machine contains:</p> <ul> <li>A finite number of states.  </li> <li>A finite number of external inputs.  </li> <li>A finite number of external outpus.  </li> <li>An explicit specification of all state transitions.  </li> <li>An explicit specification of what determines each external output value.  </li> </ul> <p>Combination lock</p> <p>\u6211\u4eec\u9700\u8981\u4f9d\u6b21\u62e8\u5230 R3-L22-R13(L/R \u4ee3\u8868\u62e8\u7684\u65b9\u5411), \u9501\u624d\u80fd\u6253\u5f00. \u5426\u5219\u5982R13-L2-R\u4e5f\u662f\u4e0d\u80fd\u6253\u5f00\u9501\u7684. state machine:  </p> <p> </p>"},{"location":"ICS/ICS-3/#the-synchronous-finite-state-machine","title":"The Synchronous Finite State Machine","text":"<p>In the example above, there is no fixed amount of time between successive inputs to the finite state machine, which means we can dial R3 and wait for a day then dail L22. (asynchoronous) However, computers work in synchronous way because the state transistions take place, one after the other, at identical fixed units of time.</p> <p></p> <p>Example:A Danger Sign</p> <p> </p> <p>\u8d77\u521d, 1-5 \u53f7\u706f\u5904\u4e8e\u5173\u95ed. \u5f53\u5f00\u5173\u5904\u4e8e ON \u72b6\u6001\u65f6, \u7b2c\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u540e 1, 2 \u706f\u4eae; \u7b2c\u4e8c\u4e2a\u5355\u4f4d\u65f6\u95f4\u540e 3, 4 \u706f\u4eae; \u7b2c\u4e09\u4e2a\u5355\u4f4d\u65f6\u95f4\u540e, 5 \u706f\u4eae. \u72b6\u6001\u673a: </p> <p>\u5176\u5bf9\u5e94\u7684\u7535\u8def: </p> <p>\u5176\u4e2d store element 1 \u5b58\u50a8\u4f4e\u4f4d, element 2 \u5b58\u50a8\u9ad8\u4f4d.</p> <p>\u7531\u6b64\u5f97\u5230\u7684\u7ec4\u5408\u7535\u8def:(\u53ef\u901a\u8fc7\u771f\u503c\u8868\u5f97\u5230)</p> <p> </p> <p>But in the previous example, there is a question: The process is so fast that the input of next cyle will be the output of the last cycle almost immediately. So we have no idea what the state of the finite state machine woule be for the next clock cycle.</p>"},{"location":"ICS/ICS-3/#master-slave-flip-flop","title":"Master-Slave Flip-flop","text":"<p>process:  </p> <ul> <li>In the first half A(WE=1), the slave read the value from the master and update the value by combinational circuits(Q) while the master remain the same.</li> <li>In the second half B(WE=0), the value updated by combinational circuit is stored in master while the slave remain the same.</li> <li> <p>Timing diagram</p> <ol> <li> <p>the slave load the value from the master.  </p> </li> <li> <p>the combinational logic finishes its update/calculation(proper delay). So it enters the next cycle.  </p> </li> <li> <p>the master load the updated value, so it also enters the next value.  </p> </li> <li> <p>repeat 1  </p> </li> </ol> </li> </ul>"},{"location":"ICS/ICS-4/","title":"Chapter 4 The von Neumann Model","text":"<p>Abstract</p> <p>Covered in Lecture 3, 2022.7.13 and Lecture 4, 2022.7.14 Topics:   1. The von Neumann Model 2. Brief introduction to the instruction in LC-3</p>"},{"location":"ICS/ICS-4/#basic-components","title":"Basic Components","text":"<p>An important idea missing in Chapter 1: All computers containing the five parts are capable of computing exactly the same things given enough time and enough memory. The only difference is the time and memory.</p> <p>Note that CPU = Control and Processing Unit.</p> <p>Abstract</p> <p>PC \u6307\u5411\u8981\u6267\u884c\u7684\u547d\u4ee4(\u5730\u5740), IP \u5b58\u50a8\u5f53\u524d\u6267\u884c\u7684\u547d\u4ee4. Control Unit \u5411 Processing Unit \u53d1\u51fa\u4fe1\u53f7(\u5982\u6267\u884c\u52a0\u6cd5). Processing Unit \u8d1f\u8d23\u6267\u884c\u547d\u4ee4, \u5176\u4e2d TEMP \u4e3a\u5bc4\u5b58\u5668, \u901f\u5ea6\u76f8\u6bd4\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\u5feb\u5f88\u591a(\u56e0\u4e3a\u5185\u5b58\u5c5e\u4e8e CPU \u5916\u7684\u4e8b\u7269)  </p>"},{"location":"ICS/ICS-4/#memory","title":"Memory","text":"<p>Memory is used to store information. Every memory location has an address asscoiated, and store a value in that location.  </p> Address Stored Value 0 .. 1 .. 2 4 3 .. 4 2 <p>location 2 is called pointer variable.</p>"},{"location":"ICS/ICS-4/#address-space-and-addressability","title":"Address Space and Addressability","text":"<p>just for review.</p> <ul> <li>Address space: The number of uniquely identifiable memory locations.  </li> <li>Addressability: The number of bits stored in each memory location.  </li> </ul>"},{"location":"ICS/ICS-4/#read-from-the-memory","title":"Read from the memory","text":"<ul> <li>Load the address you want read to MAR(Memory's Address Register), then interrogate the memory.  </li> <li>The information stored in the location having that address will be placed in the MDR(Memory's Data Register).(automatically?)</li> </ul>"},{"location":"ICS/ICS-4/#write-to-the-memory","title":"Write to the memory","text":"<ul> <li>Load the address you want write to MAR, and the value to be stored in the MDR, then interrogate the memory.  </li> <li>The information contained in the MDR will be written into the memory location whose address is in the MAR.</li> </ul>"},{"location":"ICS/ICS-4/#processing-unit","title":"Processing Unit","text":"<p>Processing unit is the actual unit that carries out the processing of information in the computer. Processing unit can be complex, but now we only focus on the simple case.</p>"},{"location":"ICS/ICS-4/#aluarithmetic-and-logic-unit","title":"ALU(Arithmetic and Logic Unit)","text":"<p>ALU normally proccess data element of a fixed size referred to as the word length of the computer. The data elements are called words.</p> <p>In LC-3, ALU can perform ADD, AND and NOT operations. And it process 16-bits words, which means it has a word length of 16 bits.</p>"},{"location":"ICS/ICS-4/#temp","title":"TEMP","text":"<p>usually refer to register to store information temporarily.</p> <p>Why we need register?</p> <p>\u5185\u5b58\u4e0d\u5c5e\u4e8e CPU, \u56e0\u6b64\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e\u4f1a\u5f88\u6162. \u56e0\u6b64\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u5bc4\u5b58\u5668\u6765\u6682\u65f6\u5b58\u50a8\u6570\u636e, \u4ee5\u4fbf\u8fd0\u7b97.</p> <p>Typically, the size of each register is identical to the size of values processed by the ALU. In LC-3, we have 8 registers(R0, R1, ... R7), each containing 16 bits.  </p>"},{"location":"ICS/ICS-4/#input-and-output","title":"Input and Output","text":"<p>Some devices that get input from users, and some display the result to users.</p>"},{"location":"ICS/ICS-4/#control-unit","title":"Control unit","text":"<p>It is in charge of making all the other parts of the computer play together. When we describe the step-by-step process of executing a computer program, it is the control unit that keeps track of both where we are within the process of executing the program and where we are in the process of executing each instruction. Control unit in LC-3 consists of program counter(PC) and instruction register (IR). PC contains the address of the next instruction, IR contains the current instruction.</p>"},{"location":"ICS/ICS-4/#instruction-processing","title":"Instruction Processing","text":"<ul> <li>Operation instructions: operate on date. e.g. ADD, AND, NOT</li> <li>data movement: move information from the processing unit to and from memory and to and from input/output devices. e.g. load, store</li> <li>control: altering the sequential processing of instructions. e.g. BR</li> </ul>"},{"location":"ICS/ICS-4/#the-instruction","title":"The Instruction","text":""},{"location":"ICS/ICS-4/#add","title":"ADD","text":"<p><code>reg + imm5 -&gt; reg</code> / <code>reg + reg -&gt; reg</code></p> <ul> <li>bits[15:12]: opcode, 0001&lt;-&gt;ADD</li> <li>bits[11:9]: DR(Destination Register)</li> <li>bits[8:6]: SR1(Source Register 1)</li> <li> <p>bits[5]:</p> </li> <li> <p>bits[5]=0, the form is <code>SR1 + SR2 -&gt; DR</code>     then bits[5:3] is just used to fill the space.     bits[3:0]: SR2</p> </li> <li>bits[5]=1, then form is <code>SR1 + imm5 -&gt; DR</code>     then bits[5:0] will be sign-extended to 16 bits as the second operand.</li> </ul>"},{"location":"ICS/ICS-4/#and","title":"AND","text":"<p>reg AND imm5 -&gt; reg / reg AND reg -&gt; reg (the same as ADD except the opcode 0101)</p> <p>Trick</p> <p>We can set bit[5]=1 and set bit[4:0]=0, and let SR1=DR. Then the instruction becomes <code>Reg AND 0 -&gt; Reg</code>, we refer to this technique as initializeing reg to 0.</p>"},{"location":"ICS/ICS-4/#ld","title":"LD","text":"<p>LD represent load, which means go to a particular memory location, read the value and store it in one of the registers.</p> <p>LD takes PC+offset as its addressing mode, which we will introduce in detail later.  </p> <ul> <li>bits[15:12]: opcode, 0010&lt;-&gt;LD</li> <li>bits[11:9]: DR, stored the value that will be read from the memory.</li> <li>bits[8:0]: offset, and it also will be sign-extended to 16 bits. Then PC+offset will be the source address. Eventually, <code>M[PC+offset] -&gt; DR</code>.</li> </ul>"},{"location":"ICS/ICS-4/#the-instruction-cycle","title":"The Instruction Cycle","text":"<p>Instructions are processed under the direction of the control unit in a very systematic, step-by-step manner. It consists of 6 sequential phases.</p> <p>Note that the instruction cycle is not the clock cycle rather made up by it and not all instructions need all 6 phases.</p>"},{"location":"ICS/ICS-4/#fetch","title":"Fetch","text":"<p>Obtain the next instruction from memory and load it into IR.(Instruction Register)  </p> <p>IP!=IR</p> <p>IP(Instruction Pointer) is a pointer to the the instruction while IR is the value of the instruction(contain opcode, register bits and sth). IP-&gt;IR(IP = the address of IR)</p> <ul> <li>Load the MAR with the contents of the PC, and simultaneously increment the PC. (in one clock cycle)  </li> <li>Interrogate memory, resulting in the instructio being placed int the MDR. (in at least one clock cycle)  </li> <li>Load the IR with the contents of the MDR. (in one clock cycle)  </li> </ul>"},{"location":"ICS/ICS-4/#decode","title":"Decode","text":"<p>Examine the instruction in order to figure out what the microarchitecture is being asked to do.(by decoders)  </p> <p>In LC-3, IR[15:12] will be decoded.</p>"},{"location":"ICS/ICS-4/#evaluate-address","title":"Evaluate address","text":"<p>Computes the address of the memory location that is needed to process the instruction, and this phase only happens when we go to memory to specify where we will store in or where we will read from. e.g. LD has this phase.</p>"},{"location":"ICS/ICS-4/#fetch-operand","title":"Fetch Operand","text":"<p>Obtain the source operands needed to process the instruction. e.g. In the LD example, loading MAR with the address calculated in the EVALUATE ADDRESS phase and reading that memory that resulted in the source operand being placed in MDR.  </p>"},{"location":"ICS/ICS-4/#execute","title":"Execute","text":"<p>Carries out the execution of the instruction. e.g. add two values.</p>"},{"location":"ICS/ICS-4/#store-result","title":"Store Result","text":"<p>Writes the result to its designated destinations.</p> <p>ADD in LC-3</p> <p>An ADD instruction can fetch its source operands, perform the ADD in ALU and store the result all in a single clock cycle.</p>"},{"location":"ICS/ICS-4/#changing-the-sequence-of-execution","title":"Changing the Sequence of Execution","text":""},{"location":"ICS/ICS-4/#br","title":"BR","text":"<p>BR(Conditional Branch) may change the contents of the PC.</p> <p>BR also uses PC+offset as its addressing mode.</p> <ul> <li>bits[15:12]: opcode 0000&lt;-&gt;BR  </li> <li>bits[11:9]: condition, is used to decide whehter it will change PC or not, the detail will be cover later.  </li> <li>bits[8:0]: offset, how to calculate the address is the same as that in LD instruction.</li> </ul> <p>Condition Code</p> <p>Condition code(CC): three single-bit registers.(N for Negative, Z for Zero, P for Positive) Individually set or cleared each time one of the eight GPR is written into as a result of execution of one of the operate instructions or one of the load instructions.  </p> <p>Which instructions will modify the value of CC? See instruction set table where there is a '+' for those instructions or find the answer from the FSM.</p> <p>During the EXECUTE phase of the BR instruction cycle, the processor examines the condition codes whose associated bits in the instruction, bits[11:9], are 1. If any of the condition codes that are examined are set, the jump!</p> <p></p>"},{"location":"ICS/ICS-5/","title":"Chapter 5 LC-3","text":"<p>Abstract</p> <p>Covered in Lecture 4, 2022.7.14  and Lecture 5, 2022.7.15   Topics:   1. ISA of LC-3.   2. Microarchitecture of LC-3.    </p>"},{"location":"ICS/ICS-5/#isa","title":"ISA","text":""},{"location":"ICS/ICS-5/#memory-organization","title":"Memory Organization","text":"<ul> <li>address space: \\(2^{16}\\)(i.e.65536) locations.     Not all 65536 addresses are actually used for memory locations.  </li> <li>addressability: 16 bits. It's also called word-addressable.</li> </ul>"},{"location":"ICS/ICS-5/#registers","title":"Registers","text":"<p>Each register is called a GPR(General Purpose Register). They are referred to as R0, R1, ... R7.</p>"},{"location":"ICS/ICS-5/#instruction-set","title":"Instruction Set","text":"<p>An instruction is made up of two things, opcode and oprands. The instruction set is defined by its set of opcdeos, data types and addressing modes.</p> <ul> <li>opcode: 3 different kinds. Operates, data movement and control.  </li> </ul>"},{"location":"ICS/ICS-5/#data-types","title":"Data Types","text":"<p>Every opcode will interpret the bit patterns of its operands according to the data type it's designed to support.</p>"},{"location":"ICS/ICS-5/#addressing-modes","title":"Addressing Modes","text":"<p>Addressing mode is a mechanism for specifying where the operand is located. 5 modes in LC-3: immediate(or literal), register and 3 memory addressing modes: PC-relative, indirect and Base+offset.</p>"},{"location":"ICS/ICS-5/#operate-instructions","title":"Operate Instructions","text":"<p>Operation instructions process data.</p>"},{"location":"ICS/ICS-5/#add-and-and-not","title":"ADD, AND and NOT","text":"<ul> <li> <p>NOT  Its opcode is 1001, and bits[11:9] is DR, bits[8:6] is SR, and bits[5:0] are set to 1. its datapath:  </p> </li> <li> <p>ADD Note that no all 2's complement intergers can be immediate operands. its datapath:  \u6ce8: AND \u4e0e ADD \u7684 datapath \u76f8\u540c</p> </li> </ul> <p>\u5b9e\u73b0 SUB</p> <p> </p> <p>`A - B = A + (-B)' \u6240\u4ee5\u6211\u4eec\u5c06 B \u6309\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00.</p>"},{"location":"ICS/ICS-5/#lea","title":"LEA","text":"<p>LEA(opcode=1110) loads the register specified by bits[11:9] of the instruction with the value formed by adding the incremented PC to the sign-extended bits[8:0] of the instruction. LEA is useful to initiallize a register with an address. Note that the values to be loaded into the register does not involve any access to memory.</p> <p> </p> <p>Note that LEA does not effect on CC.</p>"},{"location":"ICS/ICS-5/#data-movement-instructions","title":"Data Movement Instructions","text":"<p>Data movement instructions between GPR and memory or between registers and input/output devices. The LC-3 contains 6 instructions that move formation:\u3000LD, LDR, LDI, ST, STR, STI. The format: </p> <ul> <li>bits[8:0]: address generation bits.</li> </ul>"},{"location":"ICS/ICS-5/#pc-relative-mode","title":"PC-Relative Mode","text":"<p> LD(opcode=0010) and ST(opcode=0011) specify the PC-relative addressing mode. The memory address is computed by signed-extending bits[8:0] to 16 bits and adding the result to the incremented PC(incremented during FETCH phase). Note that CC will be set depending on whether the value loaded or stored. Note that the address of the memory opearand is limited to a small range.(\\([-255, +256]\\))  </p> <p></p>"},{"location":"ICS/ICS-5/#indirect-mode","title":"Indirect Mode","text":"<p> LDI(opcode=1010) and STI(opcode=1011) specify the indirect addressing mode. An address is first formed exactly the same way as with LD, however, the result is the address of the address of the operand. So we need to interrogate memory first to obtain the address of the operand(like LD). Note that the address of the operand can be anywhere.</p> <p></p>"},{"location":"ICS/ICS-5/#baseoffset-mode","title":"Base+offset Mode","text":"<p>LDR(opcode=0110) and STR(opcode=0111) specify the Base+offset addressing mode. The address is obtained by adding a signed-extended 6-bit(bits[5:0]) offset to a base register(bits[8:6]). Note that the address of the operand can also be anywhere.</p> <p></p>"},{"location":"ICS/ICS-5/#control-instructions","title":"Control Instructions","text":"<p>The LC-3 has 5 opcodes that enable the sequential execution flow to be broken: conditional branch, unconditional jump, subroutine call(funtion), TRAP(service call) and RTI.</p>"},{"location":"ICS/ICS-5/#conditional-branches","title":"Conditional Branches","text":"<p>Note that if all bits[11:9] are 1, then it equals an unconditional branch. If all bits[11:9] are 0, then it equals <code>nop</code>.</p> <p>Two methods of Loop Control</p> <ul> <li> <p>loop control with a counter  </p> </li> <li> <p>loop control with a sentinel If we don't know ahead of time how many iterations we will want to perform. </p> </li> </ul>"},{"location":"ICS/ICS-5/#jmp","title":"JMP","text":"<p>The JMP instruction(opcode=1100) loads the PC with the contents of the register specified by bits[8:6] of the instruction. (its addressing mode is by register)</p>"},{"location":"ICS/ICS-5/#trap","title":"TRAP","text":"<p>The TRAP instruction(opcode=1111) changes the PC to a memory address that is part of the operating system so that the OS will perform some task on behalf of the program. Once the service call ends, the PC is set to be the address of the instruction following the TRAP instruction.</p> <ul> <li>Input a character from the keyboard(trapvector = x23)</li> <li>Output a character to the monitor(trapvector = x21)</li> <li>Halt the program(trapvector = x25)</li> </ul>"},{"location":"ICS/ICS-5/#datapath","title":"Datapath","text":""},{"location":"ICS/ICS-5/#the-global-bus","title":"The Global Bus","text":"<p>The heavy black structure with arrowheads at both ends represents the data path's global bus.</p> <ul> <li>The LC-3 global bus consists of 16 wires to allow one structure to transfer up to 16 bits of information.</li> <li>Exactly one value can be transferred on the bus at one time.** So you can see everywhere can transfer value to the global bus has a gate to ensure there is only one value transferred on the global bus.</li> <li>The structure wishing to obtain the value being supplied can do by asserting its LD.x(Load Enable) signal.</li> </ul> <p>Note that not all computers have a single global bus.</p>"},{"location":"ICS/ICS-5/#memory","title":"Memory","text":"<p>Note that there is a MEM.EN,R.W to decide whether the memory is read from or written to.</p>"},{"location":"ICS/ICS-5/#the-alu-and-the-register-file","title":"the ALU and the Register File","text":"<p>Don't forget the value may input to logic to set CC or not.</p>"},{"location":"ICS/ICS-5/#the-pc-and-the-pcmux","title":"the PC and the PCMUX","text":""},{"location":"ICS/ICS-5/#the-marmux","title":"the MARMUX","text":""},{"location":"ICS/ICS-6/","title":"Chapter 6 Programming","text":"<p>Abstract</p> <p>Covered in Lecture 6, 2022.7.16 Topics:   1. Structured Programming   2. Debugging</p>"},{"location":"ICS/ICS-6/#structured-programming","title":"Structured Programming","text":"<p>The larger tasks are systematically broken down into smaller ones, which is called systematic decomposition. There are basically 3 constructs for doing this.  </p> <ul> <li>sequential construct: carry out the first subtask completey, then go to the second. Never go back.</li> <li>conditional construct: the task consists of doing one of 2 subtasks but not both, depending on some condition.</li> <li>iterative construct: the task consists of doing a subtask a number of times as long as some condition is true.</li> </ul> <p> </p> <p></p>"},{"location":"ICS/ICS-6/#debugging","title":"Debugging","text":"<p>The debugging program should be able to</p> <ul> <li>Write values into memory locations and registers.  </li> <li>Execute instruction sequences in a program.  </li> <li>Stop execution when desired.  </li> <li>Examine what is in memory and registers at any point in the program.  </li> </ul> <p>common errors:</p> <ul> <li>incorrectly setting the loop times.  </li> <li>confusing LDI and LD.  </li> <li>forgetting the CC so BR tests the wrong condition.  </li> <li>corner cases.</li> </ul>"},{"location":"ICS/ICS-7/","title":"Chapter 7 Assembly Language","text":"<p>Abstract</p> <p>Covered in Lecture 5, 2022.7.16 Topics:   1. Assembler 2. Assembly Language</p>"},{"location":"ICS/ICS-7/#assembly-language","title":"Assembly Language","text":"<p>From ISA to language. Assembly language is a low-level language. High-level languages tend to be ISA independent. Low-level languages are very much ISA dependent. In fact, it is usually the case that each ISA has only one assembly language. The translation program is called an assembler and the translation process is called assembly.</p> <p>Warning</p> <p>\u6c47\u7f16\u8bed\u8a00\u8f6c\u4e3a\u673a\u5668\u7801\u7684\u8fc7\u7a0b\u53eb\u6c47\u7f16, \u800c\u4e0d\u662f\u7f16\u8bd1. \u7f16\u8bd1\u662f\u5bf9\u9ad8\u7ea7\u8bed\u8a00(\u5982 C)\u800c\u8a00.</p>"},{"location":"ICS/ICS-7/#instructions","title":"Instructions","text":"<p>An instrution in assembly language consists of 4 parts, and two of it(Label and Comment) are optional. <code>Label Opcode Opearnds  ; Comment</code> </p>"},{"location":"ICS/ICS-7/#opcodes","title":"Opcodes","text":"<p>The Opcode is a symbolic name for the opcode of the correspounding LC-3 instruction so we can memorize the instruction easier. e.g. <code>ADD</code>, <code>AND</code>, or <code>LDR</code> rather than 0001, 0101 or 0110.</p>"},{"location":"ICS/ICS-7/#operands","title":"Operands","text":"<ul> <li>The number of operands depends on the operation being performed. e.g. ADD requires 3 operands.  </li> <li>A literal value must contain a symbol identifying the representation base of the number. We use # for decimal, x for hexadecimal, and b for binary. (must)</li> </ul>"},{"location":"ICS/ICS-7/#labels","title":"Labels","text":"<p>Labels are symbolic names used to identify memory locations that are referred explicitly in the program. In LC-3, a label consists of from 1 to 20 alphanumeric characters starting with a letter of the alphabet.(reserved words excluded) There are 2 reasons for explicitly referring to a memory location.  </p> <ul> <li>The location is the target of a branch instruction.  </li> <li>The location contains a value that is loaded or stored.</li> </ul>"},{"location":"ICS/ICS-7/#comments","title":"Comments","text":"<p>Comments are messages intened only for human consumption. They have no effect on the translation process and indeed are not acted on by the LC-3 assembler. They are identified by semicolons. A semicolon signifies the rest of the line is a commment and is to be ignored by the assembler.  </p>"},{"location":"ICS/ICS-7/#pseudo-ops","title":"Pseudo-Ops","text":"<p>Pseudo-op is also called assembler directive, and it dose no t refer to an operation that will be performed by the program during execution.</p>"},{"location":"ICS/ICS-7/#orig","title":".ORIG","text":"<p><code>.OGIR</code> tells the assembler where in memory to place the LC-3 program.(to specify the start address)</p>"},{"location":"ICS/ICS-7/#fill","title":".FILL","text":"<p><code>.FILL</code> tells the assembler to set aside the next location in the program and initiallize it with the value of the operand. The value can be either a number or a label. e.g. x3006: <code>.FILL x0030</code> then x0030 will be stored in the location x3006.</p>"},{"location":"ICS/ICS-7/#blkw","title":".BLKW","text":"<p><code>.BLKW</code> tells the assembler to set aside some number of sequential memory locations.(i.e. a BLocK of Words) e.g. x3007: <code>.BLKW 1</code> then the location x3007 will be set aside.</p>"},{"location":"ICS/ICS-7/#stringz","title":".STRINGZ","text":"<p><code>.STRINGZ</code> tells the assembler to initiallize a sequence of n+1 memory locations. The argument is asquence of n characters inside double quotation marks. The first n words of memroy are initiallize with the zero-extended ASCII codes of the correspounding characters in the string. The final word is 0.(<code>\\0</code>)</p>"},{"location":"ICS/ICS-7/#end","title":".END","text":"<p><code>.END</code> tells the assembler it has reached the end of the program.</p> <p>Note</p> <p>Note does not stop the program during execution. In fact, <code>.END</code> does not even exist at the time of execution.</p>"},{"location":"ICS/ICS-7/#the-assembly-process","title":"The Assembly Process","text":"<p>It's the job of the LC-3 assembler to perform the translation from the LC-3 assembly language into a machine language program. We use the command <code>assemble</code> and it requires the filename of your assembly language program as an argument, and it produces the file outfile, which is in the ISA of LC-3. <code>assemble soutiona1.asm outfile</code></p>"},{"location":"ICS/ICS-7/#a-two-pass-process","title":"A Two-Pass Process","text":""},{"location":"ICS/ICS-7/#the-first-pass-creating-the-symbol-table","title":"The First Pass: Creating the Symbol Table","text":"<p>The symbol table is simply a correspoundence of symbolic names with their 16-bit memory addresses. In the first pass we identify each label with the memory address of its assigned entry.</p> <p>e.g. </p>"},{"location":"ICS/ICS-7/#the-second-pass-generating-the-machine-language-program","title":"The Second Pass: Generating the Machine Language Program","text":"<p>The second pass consists of going through the assembly language line by line, with the help of the symbol table. At each line, the assembly language instruction is translated into an LC-3 machine language instruction.</p> <p>LD</p> <p>The only part of the LD instruction left to do is the PCoffset. So it's necessary that the address of the source is no more than +256 or -255 memory locations from the LD instruction. Otherwise, assembly error.</p>"},{"location":"ICS/ICS-7/#beyond-the-assembly-of-a-single-assembly-language-program","title":"Beyond the Assembly of a Single Assembly Language Program","text":""},{"location":"ICS/ICS-7/#the-executable-image","title":"The Executable Image","text":"<p>When a computer begins execution of a program, the entity being executed is called a executable image. The executable image is created from modules often created independently by several different programmers(also different object files).  </p> <p>Example</p> <p>we write <code>PTR .FILL STARTofFILE</code> in the program but there is no such a label in our program while the label is in another module by different programmer. We can use <code>.EXTERNAL STARTofFILE</code>, then at link time when all modules are combined, the linker will find the symbol table entry.</p>"},{"location":"ICS/ICS-8/","title":"Chapter 8 Data Structures","text":"<p>Abstract</p> <p>Covered in Lecture 6, 2022.7.16 and Lecture 7, 2022.7.18   Topics:   1. Stack 2. Subroutine 3. Linked-List 4. Queue(self-learning) 5. Character Strings   6. Recursion</p>"},{"location":"ICS/ICS-8/#the-stack","title":"The Stack","text":"<p>We say the stack is an abstract data type. The concept of a stack has nothing to do with how it is implemented. The concept of a stack is the specification of how it is to be accessed: Last In, First Out, or LIFO.</p>"},{"location":"ICS/ICS-8/#implementaions","title":"Implementaions","text":"<p>Stack pointer: keeps track of the top of the stack. We use R6 to contain the address of the top of the stack.</p> <p>Note that elements that were popped are still present in memory. However, those values cannot be accessed from memory, as long as every access to memory is controlled by the stack mechanism. When values are pushed and popped to and from a stack implemented in sequential memory locations, the data already stored on the stack does not physically move.  </p>"},{"location":"ICS/ICS-8/#push","title":"Push","text":"<p>We say we push an element onto the stack when we insert it.</p> <pre><code>PUSH    ADD R6, R6, #-1\n        STR R0, R6, #0\n</code></pre> <p>Overflow</p> <p>If we run out of available space, we cannot store the value, which is called overflow situation. <pre><code>PUSH    LD R1, MAX  ;MAX &lt;-- negative of the top of the stack.\n        ADD R2, R6, R1\n        BRz OVERFLOW\n        ;\n        ADD R6, R6, #-1\n        STR R0, R6, #0\n        RET\n</code></pre></p>"},{"location":"ICS/ICS-8/#pop","title":"Pop","text":"<p>We say we pop an element from the stack when we remove it.</p> <pre><code>POP     LDR R0, R6, #0\n        ADD R6, R6, #1\n</code></pre> <p>Underflow</p> <p>Poping items that have not been previously pushed results is called underflow situation. <pre><code>POP     LD R1, EMPTY  ;EMPTY &lt;-- negative of the bottom of the stack.\n        ADD R2, R6, R1\n        BRz OVERFLOW\n        ;\n        LDR R0, R6, #0\n        ADD R6, R6, #1\n        RET\n</code></pre></p>"},{"location":"ICS/ICS-8/#subroutine","title":"Subroutine","text":"<p>It is often useful to be able to invoke a program fragment multiple times within the same program without having to specify its details in the source program each time it is needed. Such program fragments are called subroutines, or alternatively, procedures, or in C terminology, functions.</p>"},{"location":"ICS/ICS-8/#jsr-jsrr","title":"JSR &amp; JSRR","text":"<p>The instruction <code>JSR</code> and <code>JSRR</code> loads the PC by the addressing mode, then it will save the return address in R7(incremented PC).</p> <p></p> <ul> <li>opcode: bit[15:12], 0100 for both <code>JSR</code> and <code>JSRR</code>.</li> <li>Addressing mode: it depends on bit[11].</li> <li>JSR: bit[11]=1, it uses PCoffset11.     bit[10:0] will be signed extension</li> <li>JSRR: bit[11]=0, it uses BaseR. bits[8:6] identifies the Base Register and the the other bits is 0(offset is set to 0).</li> </ul>"},{"location":"ICS/ICS-8/#the-callreturn-mechanism","title":"The Call/Return Mechanism","text":"<ul> <li>caller: The program contains the call(i.e. <code>JSR(R)</code>).</li> <li>callee: The subroutine that contians the return(i.e. <code>JMP R7</code>).</li> </ul>"},{"location":"ICS/ICS-8/#saveing-and-restoring-registers","title":"Saveing and Restoring Registers","text":"<ul> <li>caller save: the calling program saves the restores the registers.  </li> <li>callee save: the subroutine saves and restores the registers.</li> </ul>"},{"location":"ICS/ICS-8/#character-strings","title":"Character Strings","text":"<p>ZEXT the characters in ASCII and place them in sequential memory. End with x0000.</p> <p></p>"},{"location":"ICS/ICS-8/#linked-lists","title":"Linked-Lists","text":""},{"location":"ICS/ICS-9/","title":"Chapter 9 I/0","text":"<p>Abstract</p> <p>Covered in Lecture 8, 2022.7.19  and Lecture 9, 2022.7.20   Topics:   1. Input &amp; Output   2. Trap   3. Interrupt    </p>"},{"location":"ICS/ICS-9/#privilege-priority-and-the-memory-address-space","title":"Privilege, Priority and the Memory Address Space","text":""},{"location":"ICS/ICS-9/#privilege-and-priority","title":"Privilege and Priority","text":"<ul> <li>Privilege: the right to do something. It contains Supervisor mode and User mode.</li> <li>Priority: the urgency of a program to execute.</li> </ul> <p>PSR(Process Status Register) </p> <ul> <li> <p>bit[15] is the privilege bit(0 for having privilege, 1 for not)  </p> </li> <li> <p>bit[10:8] is the priority. priority level 0-7(PL0 ~PL7). The PL of a program is always the same as the PL of the request to run the program.  </p> </li> </ul>"},{"location":"ICS/ICS-9/#organization-of-memory","title":"Organization of Memory","text":"<p>Addresses xFE00 to xFFFF do not correspond to memory locations at all. Addresses xFE00 to xFFFF are used to identify registers that take part in input and output functions and some special registers associated with the processor.</p> <p>Address space != Memory location</p> <p>In LC-3, our address space is \\(2^{16}\\) while not all addresses are for memory. xFE00-xFFFF actually doesn't belong to memory location.</p> <p>Each stack has a stack pointer, SSP(Supervisor Stack Pointer) and USP(User Stack Pointer), and only one of the 2 stacks is active at any one time. R6 is generally used as SP for the active stack, and we have 2 registers Saved_SSP and Saved_USP to save the SP not in use. e.g. When from Supervisor mode to User mode, SP is stored in Saved_SSP and is loaded from Saved_USP.</p>"},{"location":"ICS/ICS-9/#inputoutput","title":"Input/Output","text":""},{"location":"ICS/ICS-9/#some-basic-characteristics-of-io","title":"Some Basic Characteristics of I/O","text":"<p>All I/O activity is controlled by instructions in the computer\u2019s ISA.  </p> <ul> <li>Does the ISA need special instructions for dealing with I/O?</li> <li>Does the I/O device execute at the same speed as the computer, and if not, what manages the difference in speeds?</li> <li>Is the transfer of information between the computer and the I/O device initiated by a program executing in the computer, or is it initiated by the I/O device?</li> </ul>"},{"location":"ICS/ICS-9/#memory-mapped-io-vs-special-io-instructions","title":"Memory-Mapped I/O vs. Special I/O Instructions","text":"<p>Some computers use special input and output instructions while most computers prefer to use the same data movement instructions that are used to move data in and out of memory.</p> <p>Memory-Mapped I/O: the I/O device registers are mapped to a set of addresses that are allocated to I/O device registerds. Address xFE00 to xFFFF are reserved for I/O device registers.  </p> <p>Note</p> <p>By memory-mapped I/O, we can regard the device registers as the memory locations so we can use the same instructions.</p>"},{"location":"ICS/ICS-9/#asynchronous-vs-synchronous","title":"Asynchronous vs. Synchronous","text":"<p>I/O devices usually operate at speeds very different from that of a microprocessor, and not in lockstep. We call this latter characteristic asynchronous. Need protocol or handshaking mechanism. =&gt; Synchronization A single flag, called the ready bit, is enough to synchronize. When the ready bit is 1, it means we need to read a value or write a value.</p>"},{"location":"ICS/ICS-9/#interrupt-driven-vs-polling","title":"Interrupt-Driven vs. Polling","text":"<p>Interrupt-Driven I/O is that the keyboard controls the interaction. The processor does it own thing untill being interrupted by an announcement from the keyboard. Polling is that that the processor controls the interaction. The processor interrogates the ready bit untill it detects it's set.</p>"},{"location":"ICS/ICS-9/#input-from-the-keyboard","title":"Input from the Keyboard","text":"<ul> <li>KBSR(KeyBoard Status Register)</li> <li>address xFE00 is assgned to KBSR.</li> <li> <p>bit[15] is the ready bit.</p> </li> <li> <p>KBDR(KeyBoard Data Register)</p> </li> <li>address xFE02 is assgned to KBDR.</li> <li>bit[7:0] are used for the data, bit[15:8] contain x00.</li> </ul> <p></p>"},{"location":"ICS/ICS-9/#output-to-the-monitor","title":"Output to the Monitor","text":"<p>The figure is almost the same as Figure 9.3</p> <ul> <li>DSR(Display Status Register)</li> <li>address xFE04 is assgned to DSR.</li> <li> <p>bit[15] is the ready bit.</p> </li> <li> <p>DDR(Display Data Register)</p> </li> <li>address xFE06 is assgned to DDR.</li> <li>bit[7:0] are used for the data, bit[15:8] contain x00</li> </ul> <p></p> <p>Datapath: </p>"},{"location":"ICS/ICS-9/#operating-system-service-routineslc-3-trap-routines","title":"Operating System Service Routines(LC-3 Trap Routines)","text":""},{"location":"ICS/ICS-9/#the-trap-mechanism","title":"The Trap Mechanism","text":"<ul> <li> <p>A set of service routines</p> </li> <li> <p>A table of the starting addresses: Trap Vector Table is stored in memory locations x0000 to x00FF. What is stored here is the starting address of trap.</p> </li> <li> <p>The TRAP instruction</p> </li> <li> <p>A linkage back to the user program</p> </li> </ul>"},{"location":"ICS/ICS-9/#the-trap-instruction","title":"The TRAP Instruction","text":"<p>Its opcode is 1111, bit[11:8] must be 0, and bit[7:0] is the trap vector. During the EXECUTE phase we do 3 things:  </p> <ul> <li>PSR and PC are both pushed onto the system stack.cThe return linkage is automatically save in the PC(+1).</li> <li>PSR[15] will be set to 0 and [10:8] remains unchanged. Note that the trap service doesn't need the privilege.(but when executing we should be Super) So if we are User Mode, we will turn to Super Mode. Save R6 in Saved_USP and load R6 from Saved_SSP.</li> <li>The 8-bit trap-vector is zero-extended to 16 bits to form an address that correspounds to a location in the Trap Vector Table.</li> </ul>"},{"location":"ICS/ICS-9/#the-rti-instruction","title":"The RTI Instruction","text":"<p> RTI(Return from Trap or Interrupt) Its opcode is 1000, with no operands, bits[11:0] must be zero. It pops the top two values on the system stack into the PC and the PSR. Then PSR[15] is restored.</p>"},{"location":"ICS/ICS-9/#interrupt","title":"Interrupt","text":"<p>Is the transfer of information between the computer and the I/O device initiated by a program executing in the computer, or is it initiated by the I/O device?</p> <ul> <li>computer: polling</li> <li>I/O device: interrupt</li> </ul>"},{"location":"ICS/ICS-9/#what-is-interrupt-driven-io","title":"What Is Interrupt-Driven I/O?","text":"<p>The I/O device can:</p> <ul> <li>force the running program to stop,</li> <li>have the processor execute a program that carries out the needs of the I/O device,</li> <li>have the stopped program resume execution as if nothing had happened.</li> </ul> <p>Since polling requires the processor to waste a lot of time, we have interrupt-driven I/O.</p>"},{"location":"ICS/ICS-9/#how-to-achieve-interrupt-driven-io","title":"How to achieve Interrupt-Driven I/O?","text":"<p>There are 2 parts to interrupt-driven I/O:</p> <ul> <li>the mechanism that enables an I/O devices to interrupt the processor</li> <li>the mechanism that handles the interrupt request</li> </ul>"},{"location":"ICS/ICS-9/#parti-causing-the-interrupt-to-occur","title":"Part\u2160: Causing the Interrupt to Occur","text":"<ul> <li>The I/O device must want service.   The ready bit of the KBSR or the DSR is set to be 1.</li> <li>The device must have the right to request the service.   In most I/O devices, the interrupt enable(IE) bit is part of the DSR/KDSR.(IE bit:bit[14])</li> </ul> <p>   The interrupt request signal from the I/O device is the logical AND of the IE bit and the ready bit.</p> <ul> <li>The device must be more urgent than what the processor is currently doing.   To interrupt the running program, the device must have a higher priority than the program that is currently running.    If the INT signal is asserted, we can trigger our interrupt.</li> </ul> <p>!!! Note   Although interrupts can happen at any time, but we assume the interrupt only happens between the instruction. It will not interrupt the instruction executing. So when INT signal is asserted, we will test whether we can enable the processor to stop.</p>"},{"location":"ICS/ICS-9/#partii-handling-the-interrupt-request","title":"Part\u2161: Handling the Interrupt Request","text":"<ul> <li>Initiate the interrupt</li> <li>Save the state of the interrupted program   PC, PSR, USP, GPR, memory locations. (in LC-3, only PC and PSR are stored in the stack and USP is stored by Save_USP)   (push PSR first then push PC)</li> <li>Load the state of the interrupt rouinte<ul> <li>Most processors use the mechanism of vectored interrupts interrupt vector provided by the device -&gt; choose -&gt; INTV; Interrupt Vector Table at x0100 to x01FF</li> </ul> </li> <li>Service the interrupt</li> <li>Return from the interrupt   by <code>RTI</code>(pop PC and PSR, and may adjust SP)</li> </ul> <p>Not Just I/O Devices</p> <p>\u4e0d\u53ea\u6709 I/O \u4f1a\u5e26\u6765\u4e2d\u65ad. \u4e2d\u65ad\u5411\u91cf\u8868\u4e2d 0100~0</p>"},{"location":"Logic/","title":"\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0  </p> <ul> <li>\u6559\u6750: Logic and Computer Design Fundamental, M. Morris R. Mano, Charles R. Kime, Tom Martin </li> <li>\u8001\u5e08: \u8463\u4e9a\u6ce2/TA: \u53f6\u5fd7\u8c6a</li> </ul>"},{"location":"Logic/logic01/","title":"Digital Systems and Information","text":"Abstract <ol> <li>\u6570\u5b57\u7cfb\u7edf\uff1a\u6570\u5b57\u4fe1\u53f7\uff0c\u5178\u578b\u6570\u5b57\u7cfb\u7edf\u3002   Digital Systems: Digital signal, typical digital systems</li> <li>\u8ba1\u7b97\u673a\u5185\u4fe1\u606f\u8868\u793a\u6cd5   Information Representation</li> <li> <p>\u6570\u5236    Number systems   </p> <ul> <li>\u8fdb\u4f4d\u8ba1\u6570\u5236\u7684\u6982\u5ff5\u548c\u5341\u3001\u4e8c\u3001\u5341\u516d\u3001\u516b\u5236\u6570\u7684\u8868\u793a Positive radix, positional number systems, decimal, binary, octal and hexadecimal  </li> <li>\u4e0d\u540c\u8fdb\u4f4d\u6570\u5236\u4e4b\u95f4\u7684\u8f6c\u6362 Conversion Between Bases</li> </ul> </li> <li> <p>\u7f16\u7801\u7684\u6982\u5ff5\u53ca\u5e26\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u7684\u7f16\u7801\u3002 Representation for unsigned and signed binary numbers  </p> <ul> <li>\u771f\u503c\u3001\u6307\u5b9a\u957f\u5ea6\u7684\u673a\u5668\u6570\uff1a\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801\u3002 Magnitude, Signed-Magnitude, Signed-1\u2019s Complement, Signed-2\u2019s Complement    </li> <li>\u5341\u8fdb\u5236\u6570\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\uff1aBCD \u7801 Binary coded decimal (BCD)  </li> <li>\u5b57\u7b26\u7f16\u7801\uff1aASCII ASCII Character Codes</li> </ul> </li> <li> <p>\u5404\u79cd\u4fe1\u606f\u7684\u7f16\u7801 Non-numeric Binary Codes</p> </li> </ol>"},{"location":"Logic/logic01/#digital-systems","title":"Digital Systems","text":""},{"location":"Logic/logic01/#types-of-digital-systems","title":"Types of Digital Systems","text":"<ul> <li>no state presen: Combinational Logic System(output = Function(Input)).  </li> <li> <p>state present: Sequential System  </p> <ul> <li>state updated at discrete time(\u7cfb\u7edf\u91cc\u6709\u7edf\u4e00\u7684\u65f6\u949f, \u6bcf\u4e00\u79d2\u949f\u51b3\u5b9a\u8981\u4e0d\u8981\u66f4\u65b0, \u8fd9\u4e2a\u66f4\u65b0\u53ea\u4f1a\u5728\u6bcf\u79d2\u949f\u7684\u8fb9\u754c\u4ea7\u751f)/any time -&gt; Synchronous /asynchronous Sequential System  </li> <li>State = Function(State, Input)  </li> <li>Output = Function(State) or Function(State, Input)  </li> </ul> <p>state \u4e0d\u80fd\u53ea\u548c input \u6709\u5173\u5417?</p> <p>-- \u4e0d\u80fd, \u8fd9\u6837 state \u7684\u5b58\u5728\u5c31\u6ca1\u6709\u5fc5\u8981\u4e86(\u6bcf\u6b21\u7684 state \u53ea\u662f\u4f5c\u4e3a\u4e86 input \u5230 output \u7684\u4e2d\u95f4\u91cf.) </p> </li> </ul> <p>Example</p> <p>\u6c7d\u8f66\u4e0a\u7684\u91cc\u7a0b\u8868, \u8f93\u5165 count up \u548c reset \u4fe1\u53f7. \u5982\u679c count up \u5c31\u628a\u91cc\u7a0b\u52a0\u4e00. \u8f93\u51fa\u5c31\u662f\u53ef\u89c6\u5316\u7684\u663e\u5f0f\u91cc\u7a0b. \u72b6\u6001\u5c31\u662f\u91cc\u7a0b\u8868\u7684\u503c. \u8fd9\u662f\u975e\u540c\u6b65\u7684, \u56e0\u4e3a\u66f4\u65b0\u4fe1\u53f7\u7684\u65f6\u95f4\u4e0d\u4f9d\u8d56\u7edf\u4e00\u65f6\u949f, \u5728\u4efb\u610f\u65f6\u523b\u90fd\u53ef\u4ee5\u53d1\u751f.  </p>"},{"location":"Logic/logic01/#embedded-systems","title":"Embedded Systems","text":"<p>analog input(\u6a21\u62df\u8f93\u5165):  </p> <ul> <li>A-to-D: \u628a\u6a21\u62df\u4fe1\u53f7\u8f6c\u5316\u4e3a\u6570\u5b57\u4fe1\u53f7(\u5904\u7406\u5668\u4e0d\u80fd\u5904\u7406\u6a21\u62df\u4fe1\u53f7)  </li> <li>D-to-A: \u5904\u7406\u540e\u628a\u6570\u5b57\u4fe1\u53f7\u8f6c\u5316\u4e3a\u6a21\u62df\u4fe1\u53f7</li> <li>\u4e5f\u6709\u5176\u4ed6\u7684\u6570\u5b57\u8f93\u5165\u8f93\u51fa(\u5982\u6309\u952e)</li> </ul> <p>\u6838\u5fc3: AD &amp; DA, \u5d4c\u5165\u5f0f\u7cfb\u7edf\u533a\u522b\u4e8e\u65e5\u5e38\u8ba1\u7b97\u673a</p> <p>Example</p> <p>\u5bf9\u7a7a\u8c03, input \u662f\u6e29\u5ea6\u4f20\u611f\u5668(\u7535\u963b). \u8f93\u5165\u662f\u4e00\u4e2a\u7535\u538b\u503c, \u7a7a\u8c03\u5982\u4f55\u7406\u89e3\u7535\u538b\u53d8\u5316? </p> <ul> <li>\u5468\u671f\u6027\u91c7\u6837: \u91c7\u6837\u7684\u5468\u671f\u662f\u7531\u8f93\u5165\u4fe1\u53f7\u7684\u4fe1\u53f7\u9891\u7387\u51b3\u5b9a.(\u9999\u519c\u5b9a\u7406)  </li> <li>\u91cf\u5316: (\u5e26\u8bef\u5dee) \u79bb\u6563\u5316\u6570\u636e  </li> </ul>"},{"location":"Logic/logic01/#information-representation","title":"Information Representation","text":"<p>Binary values are represented abstractly by:  </p> <ul> <li>digits 0 and 1</li> <li>words (symbols) False (F) and True (T)</li> <li>words (symbols) Low (L) and High (H) </li> <li>and words On and Off.</li> </ul> <p>Binary values are represented by values or ranges of values of physical quantities</p> <p>\u4fe1\u53f7\u7684\u5206\u7c7b: </p> <p>\u4e3a\u4ec0\u4e48\u9009\u62e9\u4e8c\u8fdb\u5236\u6570\u503c\u8868\u793a? ---\u66f4\u597d\u5bf9\u6297\u6570\u636e\u4f20\u8f93\u4e2d\u7684\u5e72\u6270 </p> <p>\u566a\u58f0\u5bb9\u9650 0.3V(0.6-0.9 0.1-0.4\u4e4b\u95f4\u53ef\u4ee5\u7ee7\u7eed\u4fdd\u7559\u4fe1\u606f\u7684\u6b63\u786e\u6027)  </p>"},{"location":"Logic/logic01/#number-systems-representation","title":"Number Systems - Representation","text":"<p>A number with radix(\u57fa\u6570) r is represented by a string of digits: \\(A_{n-1}A_{n-2}\\cdots A_1A_0.A_{-1}A_{-2}\\dots A_{-m}\\). \\(Number_r = (\\sum\\limits_{i=0}^{i=n-1}A_i\\times r^i)+(\\sum\\limits_{j=-m}^{j=-1}A_j\\times r^j)\\)</p> <ul> <li>\\(2^{10} = 1024\\) is Kilo, denoted \"K\".  </li> <li>\\(2^{20}\\) is Mega, denoted \"M\".  </li> <li>\\(2^{30}\\) is Giga, denoted \"G\".  </li> <li>\\(2^{40}\\) is Tera, denoted \"T\".  </li> </ul>"},{"location":"Logic/logic01/#binary-arithmetic","title":"Binary Arithmetic","text":"<p>\u4e8c\u8fdb\u5236\u4e58\u6cd5: \u6839\u636e\u4e58\u6570\u5bf9\u5e94\u4f4d\u662f 1 \u8fd8\u662f 0, \u5982\u679c\u662f 1 \u5c31\u79fb\u4f4d\u5e76\u52a0\u8d77\u6765.  </p> <p>Convert between Bases </p> <ul> <li>Integral Part Repeatedly divide the number by the new radix and save the remainders. The digits for the new radix are the remainders in reverse order of their computation. If the new radix is &gt; 10, then convert all remainders &gt; 10 to digits A, B, ...  </li> <li>Fractional Part Repeatedly multiply the fraction by the new radix and save the integer digits that result.  The digits for the new radix are the integer digits in order of their computation.If the new radix is &gt; 10, then convert all integers &gt; 10 to digits A, B, ... </li> </ul> <p>Warning</p> <p>\u6ce8\u610f\u5c0f\u6570\u90e8\u5206\u8865 0 \u662f\u5728\u53f3\u4fa7(\u6700\u540e)  (11 111 101. 010 011 110)<sub>2</sub> != (375.233)<sub>8</sub>  \u6700\u540e\u8981\u8865 0, \u5e94\u4e3a (375.236)<sub>8</sub> </p>"},{"location":"Logic/logic01/#binary-coding","title":"Binary Coding","text":"<p>\u4e8c\u8fdb\u5236\u7f16\u7801</p> <ul> <li>Numeric  <ul> <li>Must represent range of data needed</li> <li>Very desirable to represent data such that simple, straightforward computation for common arithmetic operations permitted</li> <li>Tight relation to binary numbers</li> </ul> </li> <li>Non-numeric  <ul> <li>Greater flexibility since arithmetic operations not applied.</li> <li>Not tied to binary numbers</li> </ul> </li> </ul> <p>Given M elements to be reprented by a binary code, the minimum number of bits, n satisfies \\(2^n&gt;=M&gt;2^{n-1}\\) so \\(n=\\lceil{log_2{M}}\\rceil\\).  </p> <p>\u53ef\u4ee5 r = 2 \u8868\u793a 4 \u4e2a\u5143\u7d20(00, 01, 10, 11), \u4e5f\u53ef\u4ee5 r = 4(0001, 0010, 0100, 1000).  The second code is called \"one hot\" code(\u72ec\u70ed\u7f16\u7801).  </p> <p>\u5e38\u89c1\u5bf9\u5341\u8fdb\u5236\u7684\u5341\u4e2a\u6570\u5b57\u8fdb\u884c\u7f16\u7801:  </p> <ul> <li>8421: Binary Code Decimal(BCD \u7801) \u6709\u6743\u7f16\u7801, \u6bcf\u4e2a\u7801\u90fd\u6709\u4f4d\u6743</li> <li>Excess3(\u4f593\u7801): 8421 + 3 \u5f97\u5230 Excess3 \u7684\u503c. \u7f16\u7801\u6210\u5bf9\u51fa\u73b0, i \u548c 9 - i \u4e92\u53cd. \u5728\u901a\u4fe1\u65f6\u5f88\u6709\u7528\u5904.  </li> <li>84-2-1: \u7c7b\u4f3c 8421 \u7801, \u4e5f\u662f\u6210\u5bf9\u51fa\u73b0.   </li> <li>Gray \u683c\u96f7\u7801:  \u76f8\u90bb\u4e24\u4e2a\u7801\u4e4b\u95f4\u53ea\u6709\u4e00\u4f4d\u4e0d\u540c.  </li> </ul> <p>\u6ce8: 13 = D = 1101(\u8fdb\u5236\u8f6c\u5316), \u4f46\u5728\u4ee5\u4e0a\u65b9\u5f0f\u4e2d\u4f1a\u88ab\u8868\u793a\u6210 0001 0011(BCD\u7801), \u6211\u4eec\u5e94\u8be5\u5206\u522b\u7f16\u7801\u6bcf\u4e2a\u6570\u5b57.   </p>"},{"location":"Logic/logic01/#bcd-codes","title":"BCD Codes","text":"<p>\u53ef\u4ee5\u8ba1\u7b97\uff0c\u4f46\u8981\u4fee\u6b63\u3002\uff08\u8d85\u8fc7 9 \u8981\u52a0 6\uff09</p> <p>Example</p> <p> </p> <p>\u4e3a\u4ec0\u4e48\u9700\u8981 BCD \u7f16\u7801</p> <p>\u7535\u5b50\u8868\u4e2d\u6709\u65f6\u9488\u79d2, \u6211\u4eec\u5982\u679c\u7528\u4e8c\u8fdb\u5236\u4fdd\u5b58\u65f6\u9488\u79d2, \u90a3\u4e48 \u52a0\u52309\u4ee5\u4e0a\u5f97\u5230 ABCD..., \u5f53\u6211\u4eec\u60f3\u8981\u663e\u793a\u8fd9\u4e9b\u503c\u65f6, \u6211\u4eec\u8981\u5148\u505a\u8fdb\u5236\u8f6c\u6362, \u518d\u663e\u793a(\u5982 A \u8f6c\u4e3a 10) \u8fd9\u5176\u4e2d\u8981\u505a\u9664\u6cd5, \u6210\u672c\u9ad8. \u4f46\u6211\u4eec\u7528\u4e24\u4f4d BCD \u7801\u8868\u793a, \u5c31\u53ef\u4ee5\u76f4\u63a5\u663e\u793a\u7ed3\u679c\u4e86.  </p>"},{"location":"Logic/logic01/#ascii-codes","title":"ASCII Codes","text":"<p>\u5e38\u7528\u7684 ASCII Code:  </p> <ul> <li><code>0</code> &lt;-&gt; 30<sub>16</sub> </li> <li><code>A</code> &lt;-&gt; 41<sub>16</sub> </li> <li><code>a</code> &lt;-&gt; 61<sub>16</sub></li> <li>Delete (DEL) is all bits set.  </li> </ul>"},{"location":"Logic/logic01/#parity-bit-error-detection-codes","title":"Parity Bit Error-Detection Codes","text":"<p>\u7528\u6765\u68c0\u6d4b\u6570\u636e\u4f20\u8f93\u4e2d\u662f\u5426\u53d1\u751f\u9519\u8bef</p> <p>A code word has even parity if the number of 1\u2019s in the code word is even. A code word has odd parity if the number of 1\u2019s in the code word is odd.</p> <p>\u6dfb\u52a0\u4e00\u4f4d\uff0c\u8868\u793a\u7f16\u7801\u7684\u5947\u5076\u6027\u3002\u5bf9\u5076\u6821\u9a8c\u6765\u8bf4\uff0c\u5f53 1 \u7684\u4e2a\u6570\u4e3a\u5076\u6570\u65f6\u6821\u9a8c\u4f4d\u4e3a 0; \u5bf9\u5947\u6821\u9a8c\u6765\u8bf4\uff0c\u5f53 1 \u7684\u4e2a\u6570\u4e3a\u5947\u6570\u65f6\u6821\u9a8c\u4f4d\u4e3a 0.  </p>"},{"location":"Logic/logic01/#gray-codes","title":"Gray Codes","text":"<p>\u5e94\u7528: \u5149\u5b66\u4f20\u611f\u5668</p> <p>\u7f16\u7801\u5668\u76d8\u5305\u542b\u4e0d\u900f\u660e\u533a\u57df\u548c\u900f\u660e\u533a\u57df\u3002 Opaque\u8868\u793a0 ,clear\u8868\u793a1\u3002\u5149\u901a\u8fc7\u7f16\u7801\u5668\u7684\u6bcf\u4e00\u4e2a\u73af\uff0c\u4e0e\u7f16\u7801\u7684\u4e00\u4e2a\u4f4d\u76f8\u5bf9\u5e94\uff0c\u7167\u5c04\u5728\u4f20\u611f\u5668\u4e0a\uff0c\u4ea7\u751f\u4e00\u4e2a0\u62161 </p> <p>\u89d2\u7f16\u7801\u5668, \u6d4b\u91cf\u8f6c\u8f74\u8f6c\u5411\u7684\u89d2\u5ea6. \u4e09\u4e2a\u4f20\u611f\u5668\u4e0d\u4f1a\u5728\u540c\u4e00\u6761\u76f4\u7ebf(\u5b89\u88c5\u8bef\u5dee), \u5b58\u5728\u4e2d\u95f4\u72b6\u51b5. \u4f46\u683c\u96f7\u7f16\u7801\u76d8, \u76f8\u90bb\u7f16\u7801\u53ea\u5dee\u4e00\u4f4d, \u5bf9\u7ed3\u679c\u4e0d\u4f1a\u5e26\u6765\u5f71\u54cd.  </p> <p>\u4f8b\u5982\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u7f16\u7801 011 \u548c 100 \u6765\u8bf4\uff0c\u8fd8\u6709\u53ef\u80fd\u51fa\u73b0 000, 001, 010, 110, 101, 111; \u4f46\u5bf9\u4e8e\u683c\u96f7\u7f16\u7801\uff0c\u4efb\u4f55\u65f6\u5019\u4ed6\u90fd\u80fd\u4ea7\u751f\u6b63\u786e\u7684\u7f16\u53f7\u3002</p>"},{"location":"Logic/logic01/#unicode","title":"Unicode","text":"<p>Unicode extends ASCII to 65536(ASCII \u6700\u591a\u53ea\u6709 7 \u4e2a\u4e8c\u8fdb\u5236\u4f4d, \u540e\u6269\u5c55\u4e3a 8 \u4e2a)</p> <ul> <li>2 bytes(16 bits) code words  </li> <li>\u53ef\u4ee5\u7528\u6765\u7f16\u7801\u4e2d\u6587/\u97e9\u6587...\u7b49\u5b57\u7b26(ASCII \u53ea\u80fd\u5904\u7406\u82f1\u6587\u5b57\u6bcd)</li> </ul>"},{"location":"Logic/logic02/","title":"Combinational Logic Circuits","text":"Abstract <ol> <li> <p>\u5e03\u5c14\u4ee3\u6570(Boolean)\u7684\u6982\u5ff5 Boolean Algebra   </p> <ul> <li>\u53d8\u91cf\u4e0e\u771f\u503c\u7684\u5173\u7cfb Binary Variables  </li> <li>\u4e8c\u503c\u903b\u8f91\u548c\u95e8 Binary Logic and Gates</li> <li>\u4e09\u79cd\u57fa\u672c\u8fd0\u7b97 Three basic logic operations</li> </ul> </li> <li> <p>\u57fa\u672c\u8fd0\u7b97\u6cd5\u5219\u4e0e\u7535\u8def\u7b26\u53f7 Operation Definitions and Logic Gate Symbols</p> </li> <li>\u57fa\u672c\u8fd0\u7b97\u516c\u5f0f\u3001\u89c4\u5219\u3001\u53cd\u6f14\uff0c\u5bf9\u5076\u89c4\u5219 basic identities, DeMorgan\u2019s Theorem, Dual Theorem</li> <li>\u57fa\u672c\u903b\u8f91\u7535\u8def\u4e0e\u5176\u903b\u8f91\u7279\u6027\u3002\u4e0e\uff0c\u6216\u7684\u5f00\u3001\u5173\u95e8\u7279\u70b9\uff0c\u5f02\u6216\u7684\u540c\u76f8\u3001\u53cd\u76f8\u6027\u8d28   Logic Gates and implementation, AND, OR gates used to control gate open or close,  XOR gates used as a controllable invertor</li> <li> <p>\u903b\u8f91\u51fd\u6570\u7684\u5316\u7b80 Simplification</p> <ul> <li>\u5316\u7b80\u7684\u6807\u51c6\u3001\u516c\u5f0f\u5316\u5316\u7b80\u3001\u6700\u5c0f\u9879\uff0c\u6700\u5927\u9879\u53ca\u5176\u76f8\u4e92\u5173\u7cfb\u3001\u5361\u8bfa\u56fe\u5316\u7b80\u3001\u8d28\u8574\u6db5\u9879\u3001\u5fc5\u8981\u8d28\u8574\u6db5\u9879\uff0c\u95e8\u8f93\u5165\u6210\u672c Boolean Algebraic Proof, Boolean Function Optimization, Canonical Forms,  Minterms, Maxterms and their relationship, K-map simplification, Prime  Implicants, Gate input Cotes</li> <li>\u542b\u4efb\u610f\u9879\u51fd\u6570\u5316\u7b80 Don't Cares in K-Maps</li> </ul> </li> <li> <p>\u4e0d\u540c\u51fd\u6570\u5f62\u5f0f\u7684\u53d8\u6362\u53ca\u4e0e\u6700\u5c0f\u9879\u7684\u5173\u7cfb   SOM form, POM form, Standard forms, SOP form, POS form, Conversion between  forms</p> </li> <li>\u51fd\u6570\u7684\u4e94\u79cd\u8868\u793a\u5f62\u5f0f\uff1a\u771f\u503c\u8868\u3001\u903b\u8f91\u89e3\u6790\u5f0f\u3001\u6ce2\u5f62\u56fe\u3001\u5361\u8bfa\u56fe\u3001\u903b\u8f91\u7535\u8def\u56fe Truth Table, Boolean Equations, Wave form, K-map, Logic Diagram</li> <li>\u9ad8\u963b\u8f93\u51fa(\u4e09\u6001\u95e8) Hi-Impedance Outputs, Three state buffer</li> </ol>"},{"location":"Logic/logic02/#gate-circuits-and-boolen-equations","title":"Gate Circuits and Boolen Equations","text":""},{"location":"Logic/logic02/#binary-logic-and-gates","title":"Binary Logic and Gates","text":""},{"location":"Logic/logic02/#binary-logic","title":"Binary Logic","text":"<p>Binary variables take one of two values. e.g. True/False, On/Off, Yes/No, 1/0...  </p> <p>Logical variables operate on binary variables and binary values.  </p> <ul> <li><code>AND</code> denoted by a dot(\\(\\cdot\\) or \\(\\cap\\))  </li> <li><code>OR</code> denoted by a plus(+ or \\(\\cup\\))  </li> <li><code>NOT</code> denoted by \\(\\overline{a}\\) ' or ~  </li> </ul> <p>Truth tables a tabular listing of the values of a function for all possible combinations of values on its arguments.  </p> <p>Logical Function Implementation:  </p>"},{"location":"Logic/logic02/#logical-gates","title":"Logical Gates","text":"<ul> <li>PMOS / NMOS     \u4e0a\u9762\u7684\u662f PMOS, \u4e0b\u9762\u662f NMOS.  PMOS \u662f P \u65ad N \u901a, NMOS \u662f N \u65ad P \u901a.  </li> </ul> <p> \u8be6\u89c1 ICS notes </p> <p>NAND/NOR \u624d\u662f\u6700\u57fa\u672c\u7684, \u4ed6\u4eec\u53ef\u4ee5\u72ec\u7acb\u5b9e\u73b0 OR AND NOT. </p> <p>Question</p> <ul> <li>\u80fd\u4e0d\u80fd\u628a\u4e24\u4e2a\u903b\u8f91\u95e8\u7684\u8f93\u51fa\u63a5\u5728\u4e00\u8d77?(\u5982 NAND \u548c NOT \u7684\u8f93\u51fa)?  -&gt; \u53ef\u80fd\u4e00\u4e2a\u8f93\u51fa\u662f 1, \u4e00\u4e2a\u8f93\u51fa\u662f 0. \u77ed\u8def, \u82af\u7247\u70e7\u6389, \u5192\u70df.  </li> <li>\u80fd\u4e0d\u80fd\u628a NOT \u95e8\u4e2d\u53d8\u4e3a X \u548c Y \u4e24\u4e2a\u8f93\u5165\u5206\u522b\u5bf9\u5e94 CMOS \u548c NMOS? -&gt;\u4e0d\u80fd. \u5f53 X,Y=1,0 \u65f6\u4e0a\u4e0b\u90fd\u63a5\u901a, \u77ed\u8def. \u5f53 X,Y=0,1 \u65f6\u8f93\u51fa\u89d2\u5904\u4e8e HZ(\u9ad8\u963b\u6001).  \u4e09\u6001\u95e8\u5141\u8bb8\u5668\u4ef6\u8f93\u51fa\u8fd9\u6837\u7684\u7ed3\u679c.  </li> </ul> <p>Logical Gate Symbols and Behavior </p> <p></p> <p>waveform behavior in time: </p> <p>Note</p> <p>\u6ce8\u610f\u7ad6\u5411\u5173\u7cfb. \u7ed3\u679c\u5728\u8f93\u5165\u6539\u53d8\u7684\u65f6\u5019\u6539\u53d8. \u6700\u597d\u7528\u76f4\u5c3a\u94c5\u7b14\u753b\u51fa\u7ad6\u5411\u865a\u7ebf.  </p> <p>Gate Delay In actual physical gates, if one or more input changes causes the output to change, the output change does not occur instantaneously.   The delay between an input change(s) and the resulting output change is the gate delay denoted by tG.  \u5f88\u591a\u65f6\u5019\u6211\u4eec\u4f1a\u505a tradeoff, \u4f7f\u7528\u66f4\u6602\u8d35\u7684\u5668\u6750\u6765\u83b7\u5f97\u66f4\u5c0f\u7684 delay.  </p> <p>Note</p> <p>\u53ea\u6709\u771f\u503c\u8868\u662f\u552f\u4e00, \u786e\u5b9a\u7684. \u4f46\u516c\u5f0f, \u539f\u7406\u56fe\u53ef\u4ee5\u6709\u591a\u79cd\u5f62\u5f0f.  </p>"},{"location":"Logic/logic02/#boolen-algebra","title":"Boolen Algebra","text":"<p>(\u5de6\u53f3\u516c\u5f0f\u662f\u5bf9\u5076\u7684)</p> <p>precedence: parentheses &gt; NOT &gt; AND &gt; OR   </p> <p>The dual of an algebraic expression is obtained by interchanging + and \u00b7 and interchanging 0\u2019s and 1\u2019s.  \u5bf9\u5076\u5f0f\u53ef\u4ee5\u7528\u4e8e\u51fd\u6570\u5316\u7b80. \u6ce8: \u975e\u4e0d\u53d8! self-dual: the dual expression = the original expression.  </p> Boolean Algebraic Proofs 1 <p>AB + A'C + BC = AB + A'C (Consensus Theorem) Justification 1:            1 . X = X Justification 2:            X + X\u2019 = 1 \u539f\u5f0f = AB + A\u2019C + ABC + A\u2019BC  X(Y + Z) = XY + XZ (Distributive Law)  = AB + ABC + A\u2019C + A\u2019BC     X + Y = Y + X (Commutative Law) = AB . 1 + ABC + A\u2019C . 1 + A\u2019C . B X . 1 = X, X . Y = Y  . X (Commutative Law) = AB (1 + C) + A\u2019C (1 + B)  X(Y + Z) = XY +XZ (Distributive Law) = AB . 1 + A\u2019C . 1 = AB + A\u2019C   X . 1 = X     \u6700\u597d\u5c06\u6bcf\u4e00\u6b65\u7528\u7684\u516c\u5f0f\u5199\u51fa\u6765    </p> Boolean Algebraic Proofs 2 <p>(X+Y)'Z + XY' = Y'(X+Z) \u539f\u5f0f = X\u2019 Y\u2019 Z + X Y\u2019 (A + B)\u2019 = A\u2019 . B\u2019 (DeMorgan\u2019s Law) = Y\u2019 X\u2019 Z + Y\u2019 X A . B = B . A (Commutative Law) = Y\u2019 (X\u2019 Z + X)  A(B + C) = AB + AC (Distributive Law) = Y\u2019 (X\u2019 + X)(Z + X) A + BC = (A + B)(A + C) (Distributive Law) = Y\u2019 . 1 . (Z + X)        A + A\u2019 = 1 = Y\u2019 (X + Z)        1 . A = A, A + B = B + A (Commutative Law) \u7559\u610f\u5b9a\u7406 15</p> Boolean Algebraic Proofs 3 <p> </p> <p>Complementing Functions Use Demorgan's Theroem  </p> <ul> <li>interchange AND and OR operators.  </li> <li>complement each constant value and literal.  </li> </ul> <p>Note</p> <p>\u5bf9\u6bd4\u53cd\u51fd\u6570\u548c\u5bf9\u5076\u51fd\u6570.  </p>"},{"location":"Logic/logic02/#canonical-forms","title":"Canonical Forms","text":"<p>\u4efb\u4f55\u903b\u8f91\u51fd\u6570, \u53ef\u4ee5\u5199\u4e3a Sum of Minterms(SOM) or Product of Maxterms(POM).   </p>"},{"location":"Logic/logic02/#maxterm-and-minterm","title":"Maxterm and Minterm","text":"<ul> <li> <p>Minterms  Minterms are AND terms with each variable present in either true or complemented form.(\u6bcf\u4e2a\u53d8\u91cf\u90fd\u4f1a\u51fa\u73b0\u4e14\u53ea\u51fa\u73b0\u4e00\u6b21) n variables -&gt; \\(2^n\\) minterms  </p> </li> <li> <p>Maxterms Maxterms are OR terms with each variable present in either true or complemented form.(\u6bcf\u4e2a\u53d8\u91cf\u90fd\u4f1a\u51fa\u73b0\u4e14\u53ea\u51fa\u73b0\u4e00\u6b21) n variables -&gt; \\(2^n\\) maxterms   </p> </li> </ul> <p>Example</p> Index Minterm Maxterm 0 \\(\\overline x\\ \\overline y\\) \\(x+y\\) 1 \\(\\overline x\\ y\\) \\(x+\\overline y\\) 2 \\(x\\ \\overline y\\) \\(\\overline x+y\\) 3 \\(x\\ y\\) \\(\\overline x+\\overline y\\) <p>The index is important for describing which variables in the terms are true and which are complemented. index \u5c31\u662f\u5bf9\u5e94\u4f7f\u5f97 minterm = 1 \u7684\u552f\u4e00\u7684\u53d6\u503c. e.g. index = 1 means only when x = 0, y = 1 then \\(\\overline{x} y = 1\\) maxterm \u4e0e minterm \u5bf9\u5076, \u6240\u4ee5 index \u662f\u4f7f\u5f97 maxterm = 0 \u7684\u552f\u4e00\u7684\u53d6\u503c. \u5982 index = 1, \u5219 minterm \u91cc\u5bf9\u5e94\u7684\u5b57\u6bcd\u5e94\u4e3a\u539f\u53d8\u91cf, maxterm \u91cc\u7684\u5b57\u6bcd\u5e94\u4e3a\u53cd\u53d8\u91cf. Note that the Standard Order of variables: usually alphabetically.  </p> <p>We find that \\(m_i = \\overline{M_i}\\).   </p> <ul> <li> <p>We can implement any function by \"ORing\" the minterms corresponding to \"1\" entries in the function table. These are called the minterms of the function.   </p> <p>Minterm Function Example</p> <p>  it can also be written as \\(\\sum m(1,4,7) = \\sum(1,4,7)\\). </p> <ul> <li>We can implement any function by \"ANDing\" the maxterms corresponding to \"0\" entries in the function table. These are called the maxterms of the function.   </li> </ul> <p>Maxterm Function Example</p> <p>   it can also be written as \\(\\prod M(0, 2, 3, 5, 7) = \\prod(0, 2, 3, 5, 7)\\)</p> </li> </ul>"},{"location":"Logic/logic02/#canonical-forms_1","title":"Canonical Forms","text":"<ul> <li> <p>Canonical Sum of Minterms  Boolen function -&gt; Sum of Minterms: expand all terms first to explicitly list all minterms. Do this by \"ANDing\" any term missing a variable v with a term \\((v+\\overline{v})\\).   </p> <p>\\(F=A+\\overline{B} C\\)</p> <p>F = A(B + B\u2019)(C + C\u2019) + (A + A\u2019) B\u2019 C  = ABC + ABC\u2019 + AB\u2019C + AB\u2019C\u2019 + AB\u2019C + A\u2019B\u2019C = ABC + ABC\u2019 + AB\u2019C + AB\u2019C\u2019 + A\u2019B\u2019C = m7 + m6 + m5 + m4 + m1 = m1 + m4 + m5 + m6 + m7   </p> </li> <li> <p>Canonical Product of Maxterms The method for Maxterms is similar, just \"ORing\" terms missing variables v with a term equal \\(v\\cdot \\overline{v}\\) then applying the distributive law.  </p> <p>\\(f(A,B,C)=A\\overline C + BC+\\overline A \\overline B\\)</p> <p> </p> </li> </ul> <p>Function Complements The complement of a function expressed as a sum of minterms is constructed by selecting the minterms missing in the sum-of-minterms canonical forms.  \u6bcf\u4e00\u4e2a minterm \u8981\u4e48\u5728\u51fd\u6570\u91cc, \u8981\u4e48\u5728\u5176\u53cd\u51fd\u6570\u91cc. \u6c42\u51fd\u6570\u7684\u53cd\u51fd\u6570, \u53ea\u9700\u8981\u6240\u6709minterms \u53bb\u6389\u539f\u51fd\u6570\u4e2d\u5b58\u5728\u7684 minterms \u5373\u53ef.  </p> <p>e.g. \\(F(x,y,z)=\\sum_m(1,3,5,7)\\) then \\(\\overline F(x,y,z) = \\sum_m(0,2,4,6)\\) It also can be writed as \\(\\overline F= \\overline m_1 \\cdot \\overline m_3 \\cdot \\overline m_5 \\cdot \\overline m_7 = M_1 \\cdot M_3 \\cdot M_5 \\cdot M_7=\\prod _M(1,3,5,7)\\) </p> <p>Conversion between Forms</p> <p>Idea: \\(F=\\sum_m m_i\\) while \\(\\overline{F} = \\sum_M M_i\\) Maxterms \u7684\u6c42\u6cd5\u4e0d\u662f\u5f88\u81ea\u7136, \u4e00\u822c\u5148\u6c42\u53cd\u51fd\u6570\u7684 Minterms \u518d\u5c06\u4ed6\u4eec\u53d6\u53cd\u8f6c\u4e3a Minterms.    </p> <ul> <li>Find the function complement by swapping terms in the list with terms not in the list.  </li> <li>Change from products to sums, or vice versa.  </li> </ul> <p>\u5982\u4e0a\u6587\u7684\u4f8b\u5b50\u4e2d  \\(F(x,y,z)=\\sum_m(1,3,5,7), \\overline{F}=\\sum_m(0,2,4,6)\\) \u6545 \\(F = \\prod_M(0,2,4,6)\\)</p> <p>Standard Forms </p> <ul> <li>Standard Sum-of-Products (SOP) form: equations are written as an OR of AND terms.  </li> <li>Standard Product-of-Sums (POS) form: equations are written as an AND of OR terms</li> </ul> <p>SOP and POS are two-level network of gates.  </p> <ul> <li> <p>SOP </p> <ul> <li>The first level consists of n-input AND gates  </li> <li>The second level is a single OR gate (with fewer than \\(2^n\\) inputs)</li> </ul> </li> </ul> <p>Info</p> <p>Standard Forms \u7528\u6765\u505a\u7535\u8def\u5b9e\u73b0, \u4e00\u822c\u4f1a\u8fdb\u884c SOM POM \u5316\u7b80, \u4f46\u4f1a\u7701\u7565\u4e00\u4e9b\u4e1c\u897f. \u4f9d\u7136\u6309\u7167 Standard Order, \u4f46\u6bcf\u4e00\u9879\u4e2d\u4e0d\u4e00\u5b9a\u9700\u8981\u6240\u6709\u53d8\u91cf. SOP POS \u4e5f\u88ab\u79f0\u4e3a\u4e24\u6781\u51fd\u6570. \u5982 SOP: \\(ABD+\\overline A \\overline B C +B\\), POS: \\((A+B)\\cdot  (A+\\overline B+\\overline C)\\cdot  C\\) \u4ed6\u4eec\u8def\u5f84\u4e0a\u6700\u591a\u53ea\u9700\u8981\u7ecf\u8fc7\u4e24\u4e2a\u7535\u8def\u95e8, \u8fd9\u79f0\u4e3a\u4e8c\u7ea7\u7535\u8def. \u53cd\u89c2 \\((AB+C)(A+C), AB\\overline C+AC(A+B)\\) \u6700\u591a\u5c31\u9700\u8981\u7ecf\u8fc7\u4e09\u4e2a\u7535\u8def\u95e8.</p> <ul> <li>\u4e3a\u4ec0\u4e48\u9700\u8981\u964d\u4f4e\u7535\u8def\u95e8\u7684\u7ea7\u6570?  \u7535\u8def\u95e8\u6709\u5ef6\u8fdf, \u7ecf\u8fc7\u7684\u7535\u8def\u95e8\u8d8a\u591a\u5ef6\u8fdf\u8d8a\u5927, \u610f\u5473\u7740\u6700\u540e\u7535\u8def\u505a\u51fa\u6765\u7684\u8ba1\u7b97\u673a\u4e0d\u6613\u63d0\u9ad8\u529f\u7387.  </li> </ul> <p>\\(F = \\overline A\\overline  B C + A \\overline B\\overline  C + A\\overline  B C + AB\\overline C + ABC\\)</p> <p>F = A\u2019 B\u2019 C + A (B\u2019 C\u2019 + B C\u2019 + B\u2019 C + B C)   = A\u2019 B\u2019 C + A (B\u2019 + B) (C\u2019 + C)   = A\u2019 B\u2019 C + A.1.1   = A\u2019 B\u2019 C + A    = B\u2019C + A</p>"},{"location":"Logic/logic02/#circuit-optimization","title":"Circuit Optimization","text":"<p>Goal: To obtain the simplest implementation for a given function.  </p> <p>Distinct cost criteria we will use:  </p> <ul> <li>Literal cost (L)</li> <li>Gate input cost (G)</li> <li>Gate input cost with NOTs (GN)</li> </ul>"},{"location":"Logic/logic02/#two-level-optimization","title":"Two-Level Optimization","text":""},{"location":"Logic/logic02/#literal-cost","title":"Literal Cost","text":"<p>literal is a variable or its complement literal cost is the number of literal appearances in a Boolean expression corresponding to the logic circuit diagram.  </p> <p>e.g. </p> <ul> <li>\\(F=BD+A\\overline BC+ A\\overline C\\overline D\\) its L=8  </li> <li>\\(F=BD+A\\overline BC+ A\\overline B\\overline D + AB\\overline C\\) its L=11  </li> </ul>"},{"location":"Logic/logic02/#gate-input-cost","title":"Gate Input Cost","text":"<p>Gate input costs is the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations. (G - inverters not counted, GN - inverters counted)   </p> <p>For SOP and POS equations: </p> <ul> <li>all literal appearances(L)  </li> <li>the number of terms excluding single literal terms, (G). e.g. for A+BC its L=3 while G=1</li> <li>optionally, the number of distinct complemented single literals(GN).</li> </ul> <p>e.g. </p> <ul> <li>\\(F=BD +A\\overline BC+A\\overline C\\overline D\\)  G=8(L)+3=11, GN=11+3=14.   </li> <li>\\(F=BD+A\\overline BC+A\\overline B\\overline D+AB\\overline C\\) G=11+4=15, GN=15+3(only BCD)=18.  </li> </ul> <p>Cost Criteria</p> <p> </p> <p>When do we stop trying to reduce the cost?   Do we know when we have a minimum cost?  </p>"},{"location":"Logic/logic02/#map-manipulation","title":"Map Manipulation","text":"<p>Karnaugh maps(K-map) </p> <ul> <li>A K-map is a collection of squares Each square represents a minterm</li> <li>The collection of squares is a graphical representation of a Boolean function</li> <li>Adjacent squares differ in the value of one variable</li> <li>Alternative algebraic expressions for the same function are derived by recognizing patterns of squares</li> </ul> <p>The K-map can be viewed as</p> <ul> <li>A reorganized version of the truth table</li> <li>A topologically-warped Venn diagram as used to visualize sets in algebra of sets</li> </ul>"},{"location":"Logic/logic02/#two-variable-maps","title":"Two-Variable Maps","text":"<p>Example</p> F=x+y y=0 y=1 x=0 0 1 x=1 1 1 <p>For function F(x,y), the two adjacent cells containing 1\u2019s can be combined using the Minimization Theorem: \\(F(x,y)=(x \\ \\overline y + x\\ y ) + (x\\ y + \\overline x \\ y) = x + y\\)</p>"},{"location":"Logic/logic02/#three-variable-maps","title":"Three-Variable Maps","text":"<p>Note</p> <p>\u6ce8\u610f\u5217, \u8981\u6309\u7167Gray codes\u7684\u987a\u5e8f\u6392\u5217, \u5373\u76f8\u90bb\u4e24\u5217\u53ea\u76f8\u5dee\u4e00\u4f4d.  \u56e0\u6b64\u5217\u6807\u53f7\u4e3a  00 01 11 10. \u76f8\u90bb\u4e24\u4e2a\u5c0f\u65b9\u683c\u90fd\u53ea\u6709\u4e00\u4e2a\u53d8\u91cf\u4e0d\u540c. \u53ef\u4ee5\u5377\u8d77\u6765, \u5373\u6700\u5de6\u8fb9\u4e00\u5217\u548c\u6700\u53f3\u8fb9\u4e00\u5217</p> <p>Alternatie Map Labeling </p> <p>Example</p> <p> </p> <ul> <li>\u6ce8\u610f\u5230 3 2 \u683c\u90fd\u662f 1, \u56e0\u6b64 \\(\\bar xy\\bar z + \\bar x y z = \\bar xy\\), \u6ca1\u6709\u53d8\u5316\u7684\u53d8\u91cf\u53ef\u4ee5\u4fdd\u7559, \u53d8\u5316\u4e86\u7684\u53d8\u91cf\u53ef\u4ee5\u6d88\u6389. \u540c\u7406 4 5 \u683c\u53ef\u5316\u4e3a \\(x \\bar y\\) </li> <li>3 7 \u683c: \\(yz\\); 6 7\u683c: \\(x y\\); 4 6 \u683c\\(: x\\bar z\\)</li> </ul> <p>Combining Squares</p> <p>\u53ef\u4ee5\u753b \\(2^n\\) \u5927\u5c0f\u7684\u65b9\u5f62\u683c(\u5373\u4e00\u6b21\u8981\u5305\u62ec \\(2^n\\) \u4e2a\u5c0f\u65b9\u683c) For 3-variable K-Map:  </p> <ul> <li>One square represents a minterm with three variables  </li> <li>Two adjacent squares represent a product term with two variables  </li> <li>Four \u201cadjacent\u201d terms represent a product term with one variable  </li> <li>Eight \u201cadjacent\u201d terms is the function of all ones (no variables) = 1.  </li> </ul> <p>Example</p> <p> </p> <p>Warning</p> <ul> <li>\u683c\u96f7\u7801!  </li> <li>\u4e24\u4fa7\u53ef\u4ee5\u5377\u8d77\u6765 </li> </ul> <p>\u5316\u7b80\u601d\u8def: \u7528\u6700\u5927\u7684\u6700\u5c11\u7684\u5708\u628a\u6240\u6709\u7684 1 \u5708\u5b8c.(\u5708\u4e0e\u5708\u4e4b\u95f4\u53ef\u4ee5\u6709\u4ea4\u53c9) \u4e00\u5b9a\u662f SOP</p> <p>Example</p> <p> </p>"},{"location":"Logic/logic02/#four-variable-maps","title":"Four Variable Maps","text":"<p>Note</p> <p>\u6ce8\u610f\u56db\u4e2a\u89d2\u4e5f\u53ef\u4ee5\u5377(0 2 8 10 -&gt; \\(\\overline X \\ \\overline Z\\))</p> <p>Example</p> <p>   F = XZ + X'Z' \u5316\u7b80\u7ed3\u679c\u4e0d\u552f\u4e00</p>"},{"location":"Logic/logic02/#dont-cares-in-k-maps","title":"Don't Cares(\u65e0\u5173\u9879) in K-Maps","text":"<p>By placing \u201cdon't cares\u201d (an \u201cx\u201d entry) in the function table or map, the cost of the logic circuit may be lowered. \u5982\u6211\u4eec\u628a BCD \u7801\u4f5c\u4e3a\u8f93\u5165, \u6709\u6548\u6570\u5b57 0 - 9, \u5982\u679c\u90a3\u4e48 9 \u4ee5\u4e0a\u7684\u8f93\u5165\u7ec4\u5408\u6211\u4eec\u4e0d\u5728\u4e4e\u8f93\u51fa\u7ed3\u679c, \u79f0\u4e3a\u65e0\u5173\u9879, \u5728\u5361\u8bfa\u56fe\u4e0a\u753b x.    </p> <p>BCD 5 or More</p> <p> X \u53ef\u5708\u53ef\u4e0d\u5708!  </p> <p>Example</p> <p>Find the optimum POS solution: \\(F(A,B,C,D)=\\sum\\limits_m(3,9,11,12,13,14,15)+\\sum d(1,4,6)\\) Hint: Use \\(\\overline F\\) and complement it to get the result. ans: F' = B' D' + A' B   (\u6c42 F' \u65f6\u5728\u5361\u8bfa\u56fe\u4e2d\u5708\u7a7a\u683c\uff0c\u800c\u4e0d\u662f 1) F = (B + D)(A + B')  </p>"},{"location":"Logic/logic02/#systematic-simplification","title":"Systematic Simplification","text":"<ul> <li>A Prime Implicant(\u8d28\u8574\u542b\u9879) is a product term obtained by combining the maximum possible number of adjacent squares in the map into a rectangle with the number of squares a power of 2.  </li> <li>A prime implicant is called an Essential Prime Implicant(\u5fc5\u8981\u8d28\u8574\u6db5\u9879) if it is the only prime implicant that covers (includes) one or more minterms.  </li> </ul> <p>\u8d28\u8574\u6db5\u9879\u662f\u5bf9\u67d0\u4e2a \"1\" \u800c\u8a00\u5305\u62ec\u5b83\u7684\u6700\u5927\u65b9\u5f62\u3002\u5bf9\u67d0\u4e2a \"1\" \u800c\u8a00\u5982\u679c\u5b83\u7684\u8d28\u8574\u6db5\u9879\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u5b83\u662f\u5fc5\u8981\u7684\u3002</p> <ol> <li>Find All Prime Implicants</li> <li>Find Essential ones</li> <li>\u5904\u7406\u5269\u4e0b\u7684 1 </li> </ol> <p>Example</p> <p>  \u54ea\u4e9b 1 \u53ea\u88ab\u4e00\u4e2a\u8d28\u8574\u542b\u5708\u5305\u56f4\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u5fc5\u8981\u8d28\u8574\u6db5\u9879 </p> <p>Example</p> <p>Find all prime implicants for: \\(G(A,B,C,D)=\\sum\\limits_m(0,2,3,4,7,12,13,14,15)\\) Hint: There are seven prime implicants!  </p> <p>Prime Implicants are AB, B C' D', A' C' D', A' B' D', A' B' C, A' C D, B C D. ony AB Essential.   </p>"},{"location":"Logic/logic02/#multi-level-circuit-optimization","title":"Multi-Level Circuit Optimization","text":"<p>\u4e24\u7ea7\u95e8\u7684\u5ef6\u8fdf\u4f4e\uff0c\u4f46 cost \u9ad8\u3002</p> <p>Transformation Examples</p> <p> </p>"},{"location":"Logic/logic02/#integrated-circuits","title":"Integrated Circuits","text":"<p>\u96c6\u6210\u7535\u8def</p> <ul> <li>Integrated circuit (informally, a \u201cchip\u201d) is a semiconductor crystal (most often silicon) containing the electronic components for the digital gates and storage elements which are interconnected on the chip.   </li> <li> <p>Terminology - Levels of chip integration</p> <ul> <li>SSI (small-scale integrated) - fewer than 10 gates</li> <li>MSI (medium-scale integrated) - 10 to 100 gates</li> <li>LSI (large-scale  integrated) - 100 to  thousands of gates</li> <li>VLSI (very large-scale integrated) - thousands to 100s of millions of gates</li> </ul> </li> <li> <p>Technology Parameters</p> <ul> <li>Fan-in \u6247\u5165\u7cfb\u6570 \u2013 the number of inputs available on a gate \u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u7aef\u7684\u4e0a\u9650 \u7406\u60f3\u60c5\u51b5\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u53ef\u4ee5\u63a5\u65e0\u6570\u4e2a\u95e8\u7684\u8f93\u5165\uff0c\u4f46\u5b9e\u9645\u4e0a\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u7aef\u90fd\u4f1a\u82b1\u8d39\u4e00\u4e9b\u7535\u6d41\uff0c\u800c\u95e8\u8f93\u51fa\u7684\u7535\u6d41\u662f\u6709\u9650\u7684\uff0c\u4ece\u96c6\u6210\u7535\u8def\u672c\u8eab\u4f1a\u8981\u6c42\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u6700\u591a\u80fd\u62c9\u591a\u5c11\u95e8\u7684\u8f93\u5165\u3002</li> <li> <p>Fan-out \u6247\u51fa\u7cfb\u6570 \u2013 the number of standard loads driven by a gate output     \u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u5e26\u4e86\u5f88\u591a\u95e8\u7684\u8f93\u5165\uff1f\uff08\u50cf\u706b\u8f66\u5934\u5e26\u4e86\u5f88\u591a\u8f66\u53a2\uff09     \u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u4e0d\u80fd\u63a5\u5230\u592a\u591a\u95e8\u7684\u8f93\u5165\u4e0a\u53bb\uff0c\u4e00\u822c\u4f1a\u7528 buffer \u505a\u7f13\u51b2  </p> <ul> <li>e.g. 1 standard load equals the load contributed by the input of 1 inverter.  </li> <li>Transition time - the time required for the gate output to change from H to L, \\(t_{HL}\\), or from L to H, \\(t_{LH}\\) \u5e26\u7684\u95e8\u8d8a\u591a\uff0c\u4e0a\u5347\u65f6\u95f4\u5c31\u8d8a\u591a\u3002 \u6211\u4eec\u4f1a\u9650\u5236\u8fc7\u6e21\u65f6\u95f4\uff0c\u8bbe\u7f6e maximum fan-out <ul> <li>Logic Levels \u2013 the signal value ranges for 1 and 0 on the inputs and 1 and 0 on the outputs (see Figure 1-1)</li> <li>Noise Margin \u2013 the maximum external noise voltage superimposed on a normal input value that will not cause an undesirable change in the circuit output</li> <li>Cost for a gate - a measure of the contribution by the gate to the cost of the integrated circuit Ignoring the wiring area, the gate area is roughly proportional to the gate input count.  </li> <li>Propagation Delay \u2013 The time required for a change in the value of a signal to propagate from an input to an output</li> <li>Power Dissipation \u2013 the amount of power drawn from the power supply and consumed by the gate</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Logic/logic02/#propagation-delay","title":"Propagation Delay","text":"<p>Delay is usually measured at the 50% point with respect to the H and L output voltage levels. High-to-low (\\(t_{PHL}\\)) and low-to-high (\\(t_{PLH}\\)) output signal changes may have different propagation delays. \u6ce8\u610f HL/PL \u6307\u7684\u662f\u8f93\u51fa\u7aef\u7684\u65f6\u95f4\u53d8\u5316\u3002</p> <p>Info</p> <p>\u5982\u679c\u8fd9\u91cc\u6709 n \u4e2a\u975e\u95e8\u4e32\u8054  </p> <p>\u8ba1\u7b97 \\(t_{PHL}\\) \u9700\u8981 \\(t_{3PHL} + t_{2PLH} + t_{1PHL}\\) \u4ece\u7ed3\u679c\u5012\u63a8 \u5982\u679c\u53ea\u6c42 \\(t_{pd}\\) \u53ea\u9700\u8981\u628a\u6bcf\u7ea7\u7684 \\(t_{pd}\\) \u76f8\u52a0\u5373\u53ef\u3002</p> <ul> <li> <p>Delay Mode </p> <ul> <li>Transport delay - a change in the output in response to a change on the inputs occurs after a fixed specified delay \u8f93\u51fa\u6574\u4f53\u5f80\u540e\u79fb</li> <li> <p>Inertial delay - similar to transport delay, except that if the input changes such that the output is to change twice in a time interval less than the rejection time, the output changes do not occur. Models typical electronic circuit behavior, namely, rejects narrow \u201cpulses\u201d on the outputs \u9664\u4e86\u8f93\u51fa\u5f80\u540e\u79fb\uff0c\u5728\u60ef\u6027\u5ef6\u8fdf\u4e0b\uff0c\u5f88\u7a84\u7684\u8109\u51b2\uff08\u5c0f\u4e8e rejection time\uff09\u4f1a\u88ab\u6d88\u9664\u6389\u3002    </p> <p>Example</p> <p>  \u84dd\u7ebf\u8868\u660e propagation time, \u9ed1\u7ebf\u8868\u660e rejection time. \u56e0\u6b64 ab de \u8fd9\u4e2a\u8109\u51b2\u88ab\u5403\u6389</p> </li> </ul> </li> <li> <p>Circuit Delay</p> <p>Example</p> <p> </p> <ul> <li>\u6700\u5f00\u59cb S \u7531 0-&gt;1 \u540e 0.9s Y \u4ece 0-&gt;1 </li> <li>S \u4ece 1-&gt;0 \u540e\u4e0b\u65b9\u7684\u4e0e\u95e8 0.4s \u540e\u4f1a\u4ece 1-&gt;0, \u4f46\u4e0a\u65b9\u7684\u4e0e\u95e8 0.6s \u540e\u624d\u4f1a\u4ece 0-&gt;1. \u4f46 0.9s \u540e Y \u624d\u4f1a 1-&gt;0, \u6b64\u540e\u518d\u8fc7 0.2s(\u5171 1.1s) \u540e Y \u4ece 0-&gt; 1. \u8fd9\u91cc Y \u51fa\u73b0\u4e86\u4e00\u4e2a\u5c0f\u5c16\u5cf0\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u7535\u8def\u4ea7\u751f\u7684\u5192\u9669\u3002 S \u7684\u4e24\u6761\u8def\u5f84\u6211\u4eec\u53d1\u73b0\u5ef6\u8fdf\u4e0d\u540c\uff0c\u8fd9\u79cd\u6211\u4eec\u79f0\u4e4b\u4e3a\u7535\u8def\u4e2d\u7684\u7ade\u4e89\u3002</li> </ul> </li> <li> <p>Fan-out and Delay The fan-out loading a gate\u2019s output affects the gate\u2019s propagation delay\u3002 SL(Standard Load): \u4ee5\u975e\u95e8\u4e3a\u6807\u51c6\u3002\u5e26\u4e00\u4e2a\u975e\u95e8\u9700\u8981...\u7684\u8d1f\u8f7d</p> <p>Example</p> <p>One realistic equation for tpd  for a NAND gate with 4 inputs is: \\(t_{pd} = 0.07 + 0.021 SL\\) ns SL is the number of standard loads the gate is driving, i. e., its fan-out in standard loads For SL = 4.5, tpd = 0.165 ns \u7531\u5de5\u827a\u7a0b\u5ea6+\u8d1f\u8f7d\u60c5\u51b5\u51b3\u5b9a  </p> </li> <li> <p>Cost/Performance Tradeoffs  </p> <p>Example</p> <p>NAND gate G with 20 standard loads on its output has a delay of 0.45 ns and has a normalized cost of 2.0. A buffer H has a normalized cost of 1.5. The NAND gate driving the buffer with 20 standard loads gives a total delay of 0.33 ns 1. The cost of this portion of the circuit cannot be more than 2.5 2. The delay of this portion of the circuit cannot be more than 0.40 ns 3. The delay of this portion of the circuit must be less than 0.40 ns and the cost less than 3.0</p> <p>ans: 1. No buffer 2. Use buffer 3. Irrelevant - buffer needed to satisfy delay constraint, but cannot satisfy cost constraint.</p> </li> </ul>"},{"location":"Logic/logic02/#additional-gates-and-circuits","title":"Additional Gates and Circuits","text":""},{"location":"Logic/logic02/#other-gate-types","title":"Other Gate Types","text":"<p>Why?</p> <ul> <li>Implementation feasibility and low cost</li> <li>Power in implementing Boolean functions</li> <li>Convenient conceptual representation</li> </ul> <p>Gate classifications</p> <ul> <li>Primitive gate - a gate that can be described using a single primitive operation type (AND or OR) plus an optional inversion(s).</li> <li>Complex gate - a gate that requires more than one primitive operation type for its description</li> </ul>"},{"location":"Logic/logic02/#primitive-gate","title":"Primitive gate","text":""},{"location":"Logic/logic02/#buffer","title":"Buffer","text":"<p>\u6ca1\u6709\u903b\u8f91\u529f\u80fd\uff0c\u4f46\u6709\u5f88\u5f3a\u7684\u5e26\u8d1f\u8f7d\u7684\u80fd\u529b\uff0c\u80fd\u591f\u62c9\u9ad8\u7535\u5e73\uff0c\u964d\u4f4e\u4f20\u8f93\u5ef6\u8fdf\u3002</p>"},{"location":"Logic/logic02/#nand","title":"NAND","text":"<p>\u4e0e\u975e\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5148\u975e\u540e\u6216 \\(F=\\overline{X} + \\overline{Y} + \\overline{Z}\\) A NAND gate with one input degenerates to an inverter. Universal gate - a gate type that can implement any Boolean function.  \u6700\u9ad8\u6548</p> <p>\u6211\u4eec\u4e00\u822c\u4e0d\u4f7f\u7528\u4e0e\u975e\u95e8\u505a\u903b\u8f91\u8fd0\u7b97\uff0c\u56e0\u4e3a\u4ed6\u4e0d\u6ee1\u8db3\u4ea4\u6362\u3001\u7ed3\u5408\u5f8b\u3002\u4e00\u822c\u5728\u6700\u540e\u628a\u4e0e\u6216\u975e\u8f6c\u4e3a\u7528\u4e0e\u975e\u5b9e\u73b0\u3002</p>"},{"location":"Logic/logic02/#nor","title":"NOR","text":"<p>\u4e5f\u53ef\u4ee5\u5229\u7528 De Morgan \u53d8\u4e3a \u5148\u975e\u540e\u4e0e\uff0c\u5176\u4ed6\u540c\u4e0e\u975e\u3002</p>"},{"location":"Logic/logic02/#complex-gate","title":"Complex gate","text":""},{"location":"Logic/logic02/#exclusive-or-exclusive-nor","title":"Exclusive OR/ Exclusive NOR","text":"<p>eXclusive OR(XOR) and XNORs gate  </p> <ul> <li> <p>Definitions:  </p> <ul> <li>\\(X\\oplus Y = X\\ \\overline Y +\\overline X \\ Y\\) </li> <li>\\(\\overline {X\\oplus Y} = X\\ \\overline Y +\\overline X \\ Y\\) </li> <li>the XNOR function also known as the equivalence function, denoted by the operator '\\(\\equiv\\)'.  </li> <li>\u91cd\u8981\u516c\u5f0f\uff08\u8981\u8bb0\uff09</li> </ul> </li> </ul> (\u7b2c\u4e00\u884c &amp; \u6700\u540e\u4e00\u884c\u5f88\u91cd\u8981) <ul> <li> <p>\u4e25\u683c\u6765\u8bf4\uff0c\u53ea\u6709\u4e24\u53d8\u91cf\u7684\u5f02\u6216\u3002\u5bf9\u4e8e\u591a\u4e8e\u4e24\u4e2a\u8f93\u5165\u7684\uff0c\u6211\u4eec\u7528\u5947\u51fd\u6570/\u5076\u51fd\u6570\u4ee3\u66ff\u3002 \u5bf9\u4e8e\u4e09\u53d8\u91cf\u7684\u5f02\u6216 \\(X\\oplus Y = \\overline X \\ \\overline Y \\ Z + \\overline X \\ Y \\overline Z + X \\ \\overline Y \\ \\overline Z + X\\ Y\\ Z\\) \u5361\u8bfa\u56fe\u65e0\u6cd5\u518d\u5316\u7b80</p> 1 1 1 1 <p>\u6211\u4eec\u79f0\u5b83\u4e3a\u5947\u51fd\u6570\uff0c\u56e0\u4e3a minterm \u91cc 1 \u7684\u4e2a\u6570(\\(=\\sum m(1(001),2(010),4(100),7(111))\\))\u4e3a\u5947\u6570\u3002\u5176\u53cd\u51fd\u6570\u4e3a\u5076\u51fd\u6570\u3002</p> </li> <li> <p>Symbol \u6ce8\u610f bubble \u6ce1\u6ce1(\u8868\u793a inverter)  </p> </li> </ul> <ul> <li>Implementation  </li> </ul> <p>\u4e0b\u9762\u7684\u5b9e\u73b0\u9700\u8981 \\(4\\times 4=16\\) \u4e2a\u6676\u4f53\u7ba1\u3002\u4f46\u5b9e\u9645\u4e2d\u6700\u7b80\u5355\u53ea\u9700\u8981 10 \u4e2a\u6676\u4f53\u7ba1\uff0c\u5c31\u53ef\u4ee5\u6784\u9020\u51fa XOR \u95e8\u3002</p>"},{"location":"Logic/logic02/#odd-and-even-functions","title":"Odd and Even Functions","text":"<ul> <li>The 1s of an odd function correspond to minterms having an index with an odd number of 1s.  </li> <li>The 1s of an even function correspond to minterms having an index with an even number of 1s.  </li> </ul> <p>Example</p> <p>xor \u90fd\u662f\u5947\u51fd\u6570. \u5982 \\(F=(X\\oplus Y)\\oplus Z \\\\ F=(W\\oplus X)\\oplus (Y\\oplus Z)\\) </p> <ul> <li> <p>Parity Generators and Checkers \u5947\u5076\u6821\u9a8c\uff1a\u4f20\u8f93\u82e5\u5e72\u4e2a\u6570\u636e\u4f4d\uff0c\u589e\u52a0\u4e00\u4e2a\u6570\u636e\u4f4d\uff0c\u7528\u6765\u8868\u793a\u6570\u636e\u4f4d\u7684\u5947\u5076\u6027\u3002\u8f93\u5165\u548c\u8f93\u51fa\u7aef\u7684\u5947\u5076\u4f4d\u5e94\u8be5\u76f8\u540c\u3002  </p> <p>Example</p> <p> </p> </li> </ul>"},{"location":"Logic/logic02/#hi-impedance-outputs","title":"Hi-Impedance Outputs","text":"<p>\u9ad8\u963b\u8f93\u51fa  </p> <p>Three-state logic adds a third logic value, Hi-Impedance (Hi-Z), giving three states: 0, 1, and Hi-Z on the outputs.  \u6709\u6761\u4ef6\u60c5\u51b5\u4e0b\u5141\u8bb8\u95e8\u7684\u8f93\u51fa\u63a5\u5728\u4e00\u8d77\u3002  </p> <ul> <li>3-State Buffer</li> </ul> <ul> <li>Resolving 3-State Values on a  Connection \u628a\u4e24\u4e2a\u4e09\u6001\u95e8\u7684\u8f93\u51fa\u63a5\u5728\u4e00\u8d77\uff1a Resolution Table </li> </ul> B1 B0 OUT 0 Hi-Z 0 1 Hi-Z 1 Hi-Z 0 0 Hi-Z 1 1 Hi-Z Hi-Z Hi-Z <p>Info</p> <p>\u4e0d\u5141\u8bb8\u540c\u65f6\u4e24\u4e2a\u95e8\u540c\u65f6\u8f93\u51fa\u6709\u6548\u8f93\u51fa\uff01\u5426\u5219\u53ef\u80fd\u4ea7\u751f\u5927\u7535\u6d41\u635f\u574f\u7535\u8def\u3002 \u56e0\u6b64\u5bf9\u4e8e n \u4e2a\u4e09\u6001\u95e8\uff0c\u5171 2n+1 \u79cd\u6709\u6548\u7ec4\u5408\u3002</p> <ul> <li>3-State Logic Circuit   </li> </ul> \u6b64\u65f6\uff0c\u4e24\u4e2a\u4e09\u6001\u95e8\u4e0d\u4f1a\u540c\u65f6\u8f93\u51fa\u6709\u6548\u8f93\u51fa\u3002"},{"location":"Logic/logic02/#more-complex-gates","title":"More Complex Gates","text":"<p>The remaining complex gates are SOP or POS structures with and without an output inverter.  </p> <ul> <li>A - AND</li> <li>O - OR</li> <li>I  - Inverter Numbers of inputs on first-level \u201cgates\u201d or directly to second-level \u201cgates\u201d  </li> </ul> <p>e.g. AOI(AND-OR-Invert), 2-2-1 AO means 2-input ANDS driving an OR with one additional OR input.  </p>"},{"location":"Logic/logic03/","title":"Combinational Logic Design","text":"Abstract <ol> <li>\u7ec4\u5408\u7535\u8def\u5b9a\u4e49\uff08\u903b\u8f91\u7535\u8def\u7684\u4e24\u5927\u7c7b\u578b\uff1a\u7ec4\u5408\u903b\u8f91\u7535\u8def\u3001\u65f6\u5e8f\u903b\u8f91\u7535\u8def\uff09 Definition of Combinational Circuits  </li> <li>\u6a21\u5757\u4e0e\u5c42\u6b21\u8bbe\u8ba1 Hierarchical Design  </li> <li>\u903b\u8f91\u4e8b\u4ef6\u7684\u63cf\u8ff0\u65b9\u6cd5* Description of logic events  </li> <li>\u903b\u8f91\u95e8\u7684\u4e3b\u8981\u53c2\u6570 Technology Parameters \u6247\u5165\uff08Fan-in\uff09\u3001\u6247\u51fa\uff08Fan-out\uff09\u3001\u566a\u97f3\u5bb9\u9650\uff08Noise Margin\uff09\u3001\u95e8\u7684\u6210\u672c\uff08Cost for a gate\uff09\u3001\u4f20\u8f93\u5ef6\u8fdf\uff08Propagation Delay\uff09  </li> <li>\u5668\u4ef6\u72b6\u6001\u503c\u6216\u72b6\u6001\u8868\u4e0e\u6b63\u903b\u8f91\uff0c\u8d1f\u903b\u8f91\u7684\u6982\u5ff5 Positive and Negative Logic  </li> <li>\u4e09\u6001\u95e8\u4f7f\u7528\u539f\u5219\u4e0e\u603b\u7ebf\uff08BUS\uff09 BUS  </li> <li>\u4fe1\u53f7\u7cfb\u7edf\u5ef6\u65f6\u3001\u5ef6\u65f6\u6a21\u578b\u3001\u4e0a\u5347\u548c\u4e0b\u964d\u65f6\u95f4\u3001\u65f6\u949f\u4e0a\u5347\u548c\u4e0b\u964d\u6cbf\u6982\u5ff5\u3002 Delay Models, Positive and Negative Edge  </li> <li>\u7ec4\u5408\u903b\u8f91\u7535\u8def\u5206\u6790\u65b9\u6cd5 Analysis of Combinational Circuits  </li> <li>\u7ec4\u5408\u903b\u8f91\u7535\u8def\u7684\u8bbe\u8ba1\u65b9\u6cd5 Design of Combinational Circuits  </li> <li>\u51fd\u6570\u4e0e\u51fd\u6570\u6a21\u5757\uff0c\u57fa\u672c\u903b\u8f91\u529f\u80fd Functions and functional blocks  </li> <li>\u8ba1\u7b97\u673a\u4e2d\u7684\u5e38\u7528\u7ec4\u5408\u903b\u8f91\u7535\u8def\uff08\u529f\u80fd\u82af\u7247\uff09 Frequently used Combinational Circuit in Computer Design \u8bd1\u7801\u5668\u3001\u7f16\u7801\u5668\u3001\u6570\u636e\u9009\u62e9\u5668\uff08\u591a\u8def\u590d\u7528\u9009\u62e9\u5668\uff09\u3001\u6570\u636e\u5206\u914d\u5668\u3002  </li> <li>\u7ec4\u5408\u51fd\u6570\u7684\u5b9e\u73b0\u6280\u672f Implementing Combinational Functions Using: \u8bd1\u7801\u5668\u548c\u6216\u95e8 Decoders and OR gates \u591a\u8def\u590d\u7528\u5668\uff08\u52a0\u53cd\u76f8\u5668\uff09 Multiplexers (and inverter)  </li> <li>\u4f7f\u80fd\u4fe1\u53f7\uff08EN\uff0cOE\uff09\u7684\u4f5c\u7528   Function of Enable Signal  </li> <li>\u7ec4\u5408\u7535\u8def\u7684\u8fed\u4ee3\u7ed3\u6784 Iterative combinational circuits  </li> <li>\u7b97\u672f\u51fd\u6570\uff1a\u4e86\u89e3\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\u3001\u589e\u91cf\u51fd\u6570\u53ca\u8fd0\u7b97 Arithmetic function: Add, subtraction, multiplication, division, increment  </li> <li>\u8865\u7801\u8fd0\u7b97 2\u2019s complement  </li> <li>\u534a\u52a0\u5668\u53ca\u5168\u52a0\u5668\u51fd\u6570\u53ca\u7535\u8def\u8bbe\u8ba1 Equations and Circuit implementation of 1 bit Half Adder and Full Adder  </li> <li>\u591a\u4f4d\u5168\u52a0\u5668\u3001\u5168\u51cf\u5668\u53ca\u8bbe\u8ba1 Design of multiple-bit Full Adder/ Subtracter  </li> <li>\u8d85\u524d\u8fdb\u4f4d\uff1a\u8fdb\u4f4d\u4f20\u9012\u4e0e\u5ef6\u8fdf\uff0c\u8fdb\u4f4d\u51fd\u6570\uff1agenerate, Gi\u3001propagate, Pi Carry Lookahead: carry propagation and delay  </li> </ol>"},{"location":"Logic/logic03/#design-procedure","title":"Design Procedure","text":"<p>A combinational logic circuit has:  </p> <ul> <li>A set of m Boolean inputs,</li> <li>A set of n Boolean outputs, and</li> <li>n switching functions, each mapping the \\(2^m\\) input combinations to an output such that the current output depends only on the current input values</li> </ul> <p>no state</p>"},{"location":"Logic/logic03/#hierarchical-design","title":"Hierarchical Design","text":"<ul> <li>Decompose the function into smaller pieces called blocks</li> <li>Decompose each block\u2019s function into smaller blocks, repeating as necessary until all blocks are small enough</li> <li>Any block not decomposed is called a primitive block</li> <li>The collection of all blocks including the decomposed ones is a hierarchy</li> </ul> <p>e.g. </p> <p>\u5b9e\u4f8b\u5316\u6a21\u5757\u548c\u51fd\u6570\u8c03\u7528\u7684\u533a\u522b</p> <p>\u7535\u8def\u4e0a\u5b9e\u4f8b\u5316\u6a21\u5757\uff1a\u590d\u5236\u4e00\u5757\u5e76\u5d4c\u5165\u5230\u7535\u8def\u4e2d\u3002\u4e14\u540c\u65f6\u5b9e\u4f8b\u7684\u6a21\u5757\u662f\u540c\u65f6\u5728\u8fd0\u884c\uff0c\u5982\u4e0a\u56fe\u4e2d\u56db\u4e2a\u5b9e\u4f8b\u5316\u7684\u5947\u51fd\u6570\u6a21\u5757\u3002\uff08\u5b9e\u9645\u4e0a\u786c\u4ef6\u91cc\u505a\u4e32\u884c\u662f\u975e\u5e38\u9ebb\u70e6\u7684\uff0c\u9700\u8981\u72b6\u6001\u673a\u6765\u7ea6\u675f\u884c\u4e3a\u903b\u8f91\uff09  \u4f46 C \u8bed\u8a00\u51fd\u6570\u4f53\u53ea\u6709\u4e00\u4efd\u4ee3\u7801\uff0c\u53ea\u662f PC \u8df3\u5230\u51fd\u6570\u90e8\u5206\u3002  </p> <p>Reusable Functions:  \u628a\u5e38\u7528\u7684\u64cd\u4f5c\u62bd\u8c61\u6210\u6a21\u5757\uff0c\u5e76\u63d0\u524d\u5b9a\u4e49\u597d\u5ef6\u8fdf\u7b49\u7b49\u7279\u6027\u3002\u5f53\u9700\u8981\u4f7f\u7528\u65f6\uff0c\u6211\u4eec\u628a\u7535\u8def\u5f15\u811a\u63a5\u5165\u5373\u53ef\u3002  </p> <p>Top-Down versus Bottom-Up</p> <ul> <li>A top-down design proceeds from an abstract, high-level specification to a more and more detailed design by decomposition and successive refinement   </li> <li>A bottom-up design starts with detailed primitive blocks and combines them into larger and more complex functional blocks</li> </ul>"},{"location":"Logic/logic03/#design-procedure_1","title":"Design Procedure","text":"<ol> <li>Specification  Write a specification for the circuit if one is not already available</li> <li> <p>Formulation </p> <ul> <li>Derive a truth table or initial Boolean equations that define the required relationships between the inputs and outputs, if not in the specification  </li> <li> <p>Apply hierarchical design if appropriate 3. Optimization </p> </li> <li> <p>Apply 2-level and multiple-level optimization</p> </li> <li>Draw a logic diagram or provide a netlist for the resulting circuit using ANDs, ORs, and inverters</li> </ul> </li> <li> <p>Technology Mapping Map the logic diagram or netlist to the implementation  \u4e3a\u4ec0\u4e48\u9700\u8981\u8fd9\u6b65\uff1f \u5f88\u591a\u65f6\u5019\u9700\u8981\u7528\u9884\u5148\u5b9a\u4e49\u597d\u7684\u4e0e\u975e\u95e8\uff0c\u6216\u8005\u5176\u4ed6\u57fa\u672c\u6a21\u5757\uff08\u5982 XOR\uff09\u76f4\u63a5\u5957\u5165\u7535\u8def\u4e2d\u53bb\uff0c\u53ef\u4ee5\u964d\u4f4e\u7535\u8def\u7684\u6210\u672c\u548c\u5ef6\u8fdf\u3002 technology selected  </p> </li> <li>Verification Verify the correctness of the final design manually or using simulation.(\u4eff\u771f)</li> </ol> <p>BCD to Excess-3 code converter</p> <ol> <li> <p>Specification </p> <ul> <li>Transforms BCD code  for the decimal digits to Excess-3 code for the decimal digits</li> <li>BCD code words for digits 0 through 9: 4-bit patterns 0000 to 1001, respectively \u5176\u4ed6\u8f93\u5165\u8ba4\u4e3a\u662f\u65e0\u5173\u9879\u3002  </li> <li>Excess-3 code words for digits 0 through 9: 4-bit patterns consisting of 3 (binary 0011) added to each BCD code word</li> <li>Implementation:<ul> <li>multiple-level circuit.</li> <li>NAND gates(including inverters)</li> </ul> </li> </ul> </li> <li> <p>Formulation </p> </li> <li> <p>Optimization</p> <ul> <li>two-level W X Y Z \u8f93\u51fa\u4e5f\u9700\u8981\u56db\u4e2a\u903b\u8f91\u51fd\u6570\u3002 \u5355\u72ec ABCD \u56db\u8f93\u5165 \u5bf9\u5e94\u4e00\u4e2a\u8f93\u51fa W, \u7528\u5361\u8bfa\u56fe\u5316\u7b80\u3002  </li> </ul> <p>\u5f97\u5230 \\(W=A+BC+BD, X=\\overline B C+\\overline B D+B \\overline C\\overline D, Y=CD+\\overline C\\overline D, Z=\\overline D\\) * multiple-level \\(G=7+10+6+0=23\\). \u4f18\u5316\u540e: \\(T_1=C+D, W=A+BT_1, X=\\overline B T_1B \\overline C\\overline D, Y=CD+\\overline C\\overline D, Z=\\overline D\\) \\(G=2+4+7+6+0=19\\), \u6700\u591a\u662f\u4e09\u7ea7\u7535\u8def\u3002 \\(\\overline C\\overline D=\\overline{C+D}=\\overline{T_1},T_1=C+D, W=A+BT_1, X=\\overline B T_1B \\overline C\\overline D, Y=CD+\\overline C\\overline D, Z=\\overline D\\) \\(G = 2 +1 + 4 + 6 + 4 + 0 = 17\\)\uff0c\u6700\u591a\u662f\u56db\u7ea7\u7535\u8def\u3002 \u4e3a\u4ec0\u4e48\u8981\u7b97 T1 \u975e\uff1aABCD \u662f\u5916\u90e8\u8f93\u5165\u7684\u5f15\u811a\uff0c\u4e00\u822c\u540c\u65f6\u6709\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\u3002\u4f46 T1 \u662f\u5185\u90e8\u4ea7\u751f\u7684\u4fe1\u53f7\uff0c\u5bf9\u8fd9\u4e2a\u4fe1\u53f7\u7684\u975e\u8981\u81ea\u5df1\u8ba1\u7b97\u5f97\u5230\u3002</p> </li> <li> <p>Technology Mapping Mapping with a library containing  inverters and 2-input NAND, 2-input NOR, and 2-2 AOI(\u4e0e\u6216\u975e) gates   </p> </li> <li> <p>Verification</p> </li> </ol> <p>(\u4e3a\u4ec0\u4e48\u6709\u7684\u65f6\u5019\u7b97 G, \u6709\u7684\u65f6\u5019\u7b97 GN. \u56e0\u4e3a\u89e6\u53d1\u5668\u540c\u65f6\u6709\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\uff0c\u6240\u4ee5\u5f88\u591a\u65f6\u5019\u4e0d\u9700\u8981\u5355\u72ec\u7b97 GN.\uff09  </p>"},{"location":"Logic/logic03/#chip-design-styles","title":"Chip Design Styles","text":"<ul> <li>Full custom: \u5168\u90e8\u81ea\u5df1\u5b9a\u5236\u5316\uff0c\u4e0d\u7528\u5148\u5b9a\u4e49\u597d\u7684\u6a21\u578b\u3002\uff08\u56e0\u4e3a\u5e93\u4f1a\u8003\u8651\u901a\u7528\u6027\uff0c\u5b8c\u6574\uff0c\u5e26\u6765\u6210\u672c\u5f00\u9500\u6bd4\u8f83\u9ad8\uff0c\u5ef6\u8fdf\u4e5f\u76f8\u5bf9\u5927\uff09 \u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u7814\u53d1\u6210\u672c\u9ad8\uff0c\u4f46\u751f\u4ea7\u6210\u672c\u6700\u4f4e\u3002  \u7528\u4e8e\u9ad8\u6027\u80fd\uff0c\u6216\u8005\u751f\u4ea7\u91cf\u975e\u5e38\u5927\u7684\u65f6\u5019\u3002 Justifiable only for dense, fast chips with high sales volume.  </li> <li>Standard cell: \u4f7f\u7528\u9884\u5148\u89c4\u5b9a\u597d\u7684\u6807\u51c6\u5e93(\u5982\u51e0\u8f93\u5165\u7684\u4e0e\u95e8)</li> <li>Gate array: \u7814\u53d1\u6210\u672c\u4f4e\u3002\u4e70\u73b0\u6210\u7684\u82af\u7247\uff0c\u5199\u8fdb\u4ee3\u7801\u5373\u53ef\u6267\u884c\u3002\u6210\u672c\u6700\u4f4e\uff08\u4e0d\u7528\u6d41\u7247\uff09</li> </ul> <p>Cell Libraries</p> <ul> <li>Cell - a pre-designed primitive block</li> <li>Cell library - a collection of cells available for design using a particular implementation technology</li> <li>Cell characterization - a detailed specification of a cell for use by a designer - often based on actual cell design and fabrication and measured values \u5305\u62ec\u539f\u7406\u56fe\uff0c\u82af\u7247\u9762\u79ef\uff0c\u8f93\u5165\u8d1f\u8f7d\uff0c\u5ef6\u8fdf\uff0c\u5de5\u827a\u6620\u5c04\u7684\u6a21\u677f\u5e93\uff0c\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\u5982\u4f55\u5b9e\u73b0\u3002</li> </ul> <p>e.g. </p>"},{"location":"Logic/logic03/#mapping-to-nand-gates","title":"Mapping to NAND gates","text":"<p>\u5982\u4f55\u53ea\u7528 NAND/NOR \u505a\u5de5\u827a\u6620\u5c04 \u5047\u8bbe\uff1a\u4e0d\u8003\u8651 gate loading \u548c delay. \u53ef\u4ee5\u6709\u4efb\u610f\u8f93\u5165\u7684\u4e0e\u975e/\u6216\u975e\u95e8\u3002 The mapping is accomplished by:</p> <ul> <li>Replacing AND and OR symbols  </li> </ul> <ul> <li>Pushing inverters through circuit fan-out points  </li> </ul> <ul> <li>Canceling inverter pairs</li> </ul> Example <p> </p> <p>b -&gt; c \u5c31\u662f\u628a 5 \u63a8\u51fa\u6563\u51fa\u70b9\uff0c\u968f\u540e\u548c\u5176\u4ed6\u975e\u95e8\u76f8\u6d88\u3002</p> <p>NONR \u4e0e NAND \u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86 replace \u8fd9\u6b65\u3002</p>"},{"location":"Logic/logic03/#verification","title":"Verification","text":"<p>\u9a8c\u8bc1\u65b9\u6cd5\uff1a\u771f\u503c\u8868/\u4eff\u771f/\u903b\u8f91\u51fd\u6570</p> <p>\u5c0f\u7ec6\u8282\uff1a\u4eff\u771f\u8f93\u51fa\u4e2d\u6709\u5c0f\u8109\u51b2\uff0c\u56e0\u4e3a\u5ef6\u8fdf\u4ea7\u751f\u3002\u5982\u679c\u6ca1\u6709\u60ef\u6027\u5ef6\u8fdf\uff0c\u6211\u4eec\u8981\u8003\u8651\u628a\u5b83\u5438\u6536\u6389\u3002 Behaviour Simulation \u770b\u4e0d\u5230\uff0c\u56e0\u4e3a\u4ed6\u4e0d\u8003\u8651\u4f20\u8f93\u5ef6\u8fdf\u3002\u591a\u8003\u8651\u4f7f\u7528\u6709\u5ef6\u8fdf\u7684\u4eff\u771f</p>"},{"location":"Logic/logic03/#combinational-logic","title":"Combinational Logic","text":"<p>functional block: \u504f\u9ad8\u5c42\u903b\u8f91\u5e94\u7528\uff0c\u5982\u8bd1\u7801\u5668\uff0c\u9009\u62e9\u5668\u3002</p>"},{"location":"Logic/logic03/#rudimentary-logic-functions","title":"Rudimentary Logic Functions","text":"<p>b \u4e2d\u8868\u793a\u63a5\u5730\u548c\u63a5\u7535\u6e90\u3002</p>"},{"location":"Logic/logic03/#multiple-bit-rudimentary-functions","title":"Multiple-bit Rudimentary Functions","text":"<p>A wide line is used to represent a bus which is a vector signal.   </p> <p>b \u4e2d 4 \u8868\u793a\u4f4d\u5bbd\uff0c4 \u4f4d\u4fe1\u53f7\u3002</p> <ul> <li>Sets of bits can be split from the bus as shown in \u00a9 for bits 2 and 1 of F. </li> <li>The sets of bits need not be continuous as shown in (d) for bits 3, 1, and 0 of F.</li> </ul>"},{"location":"Logic/logic03/#enabling-function","title":"Enabling Function","text":"<ul> <li>Enabling permits an input signal to pass through to an output</li> <li>Disabling blocks an input signal from passing through to an output, replacing it with a fixed value</li> </ul> <p>The value on the output when it is disable can be Hi-Z (as for three-state buffers and transmission gates), 0 , or 1</p> <p>Example</p> <p> </p> <p>(a) when disabled, 0 output (b) when disabled, 1 output. \u5176\u4e2d\u4e5f\u53ef\u4ee5\u5199 \\(\\overline {EN}\\) \u7136\u540e\u76f4\u63a5\u63a5\u6216\u95e8\uff0c\u4e0d\u7528\u6807 inverter.  </p>"},{"location":"Logic/logic03/#decoding","title":"Decoding","text":"<ul> <li>Decoding - the conversion of an n-bit input code to an m-bit output code with \\(n \\leq m\\leq  2^n\\) such that each valid code word produces a unique output code.  </li> <li>Circuits that perform decoding are called decoders.  </li> </ul> <p>3-8 \u8bd1\u7801\u5668</p> <p>\u5176\u771f\u503c\u8868\uff1a</p> <p>Example</p> <p>  \u6734\u7d20\u5b9e\u73b0 n-to-m \u7684\u8bd1\u7801\u5668\u6709 \\(n\\times m\\) \u95e8\u8f93\u5165\u6210\u672c.(\\(2\\times 2^n\\))  </p> <p>\u8bd1\u7801\u5668\u5e38\u7528\u4e8e\u5185\u5b58\uff0c\u63a5\u5728\u5730\u5740\u603b\u7ebf\u3002 \\(32-2^{32}\\) \u8bd1\u7801. \u6210\u672c \\(32\\times 2^{32}\\) \u5982\u4f55\u51cf\u5c11\u5b9e\u73b0\u6210\u672c\uff1f</p>"},{"location":"Logic/logic03/#decode-expansion","title":"Decode Expansion","text":"<p>3-8 \u8bd1\u7801\u5668\uff0c\u8f93\u5165\u5206\u6210\u4e24\u90e8\u5206\uff0cA \u7528 1-2 \u8bd1\u7801\u5668, B C \u7528 2-4 \u8bd1\u7801\u5668  </p> <p>\u62bd\u8c61\u4e3a\u884c\u5217\u8bd1\u7801\uff1a\u4e00\u7ec4\u662f\u884c\u8bd1\u7801\uff0c\u4e00\u7ec4\u662f\u5217\u8bd1\u7801\u3002 \u5bf9\u4e8e \\(n - 2^n\\) \u8bbe\u8ba1\u4e24\u4e2a\u8bd1\u7801\u5668\uff0c\u4e00\u4e2a \\(\\dfrac{n}{2}\\) \u8f93\u5165 \\(2^{\\frac{n}{2}}\\) \u7684\u884c\u8bd1\u7801\u5668\uff0c\u4e00\u4e2a \\(\\dfrac{n}{2}\\) \u8f93\u5165 \\(2^{\\frac{n}{2}}\\) \u8f93\u51fa\u7684\u5217\u8bd1\u7801\u5668\u3002  </p> <p>\u8fd9\u6837\u518d\u628a\u884c\u5217\u7684\u8f93\u51fa\u7528 2-AND \u8fde\u63a5\uff0c\u6211\u4eec\u53ea\u9700\u8981 \\(2^{\\frac{n}{2}}\\times 2^{\\frac{n}{2}}=2^n\\) \u4e2a AND \u95e8, \u4e2d\u95f4\u4e0e\u95e8\u9635\u5217\u7684\u6210\u672c\u662f \\(2^n\\times 2 =2^{n+1}\\).   </p> <p>\u8bd1\u7801\u5ef6\u8fdf\u52a0\u5927\uff0c\u4f46\u964d\u4f4e\u6210\u672c\u3002  </p>"},{"location":"Logic/logic03/#decoder-with-enable","title":"Decoder with Enable","text":"<p>Note</p> <p>Alternatively, (b) can be viewed as distributing value of signal EN to 1 of 4 outputs In this case, called demultiplexer(\u5206\u914d\u5668). \u628a D1 \u770b\u4f5c D1=EN. \u5373 \\(A_1, A_0\\) \u51b3\u5b9a\u628a EN \u7684\u4fe1\u53f7\u5206\u914d\u5230\u54ea\u4e2a\u5f15\u811a\u3002  </p>"},{"location":"Logic/logic03/#combinational-logic-implementation-decoder-and-or-gates","title":"Combinational Logic Implementation - Decoder and OR Gates","text":"<p>Implement m functions of n variables with:</p> <ul> <li>Sum-of-minterms expressions</li> <li>One n-to-2n-line decoder</li> <li>m OR gates, one for each output</li> </ul> <p>\u628a\u6700\u5c0f\u9879\u6216\u8d77\u6765\uff0c\u5f97\u5230\u4efb\u610f\u7684\u903b\u8f91\u51fd\u6570</p> Binary Adder <p> </p> <p>BCD-to-Segment Decoder</p> <p>  \u4e03\u6bb5\u6570\u7801\u7ba1\u91cc\uff0c\u4eae\u4e0d\u540c\u7684\u6bb5\u5373\u53ef\u8868\u793a\u4e0d\u540c\u7684\u6570\u5b57   \u4e0a\u4e3a\u5171\u9633\u6781\uff08\u8f93\u51fa 0 \u624d\u80fd\u4eae\uff0c\u9634\u6781\u76f8\u53cd\uff09\u4e0b\u4e3a\u5171\u9634\u6781 \u8f93\u5165\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u4eae\u5bf9\u5e94\u7684\u6570\u7801\u7ba1\uff0c\u4f7f\u5176\u53ef\u4ee5\u663e\u793a\u5728\u6570\u7801\u7ba1\u4e0a  </p>"},{"location":"Logic/logic03/#encoding","title":"Encoding","text":"<p>Encoding - the opposite of decoding - the conversion of an m-bit input code to a n-bit output code with \\(n &lt;=m &lt;= 2^n\\)  such that each valid code word produces a unique output code \u4e00\u4e2a\u8bd1\u7801\u5668 \\(2^n\\) \u8f93\u5165\uff0cn \u4e2a\u8f93\u51fa\u3002\u5e38\u7528\u4e8e\u4e2d\u65ad\u4fe1\u53f7\uff0c\u8ba1\u7b97\u673a\u54cd\u5e94\uff0c\u544a\u8bc9 CPU \u54ea\u4e00\u53f7\u7684\u4e2d\u65ad\u53d1\u751f\u4e86\uff08\u8fd9\u91cc\u5c31\u8981\u8fdb\u884c\u7f16\u7801\uff09</p> <p>decimal-BCD encoder</p> <ul> <li>Inputs: 10 bits corresponding to decimal digits 0 through 9, (D0, \u2026, D9)</li> <li>Outputs: 4 bits with BCD codes</li> <li>Function: If input bit Di is a 1, then the output (A3, A2, A1, A0) is the BCD code for i. A3 = D8 + D9; A2 = D4 + D5 + D6 + D7; A1 = D2 + D3 + D6 + D7; A0 = D1 + D3 + D5 + D7 + D9</li> </ul> <p>\u5982\u679c\u8f93\u5165\u7684 10 \u6839\u7ebf\u91cc\uff0c\u6709\u4e24\u4e2a\u8f93\u5165\u90fd\u4e3a 1, \u53ef\u80fd\u4f1a\u5f97\u5230\u6ca1\u6709\u610f\u4e49\u7684\u8f93\u51fa\uff0c\u9700\u8981\u4f18\u5148\u7ea7\u3002</p>"},{"location":"Logic/logic03/#priority-encoder","title":"Priority Encoder","text":"<p>\u5982\u679c\u8fd9\u91cc\u6709\u591a\u4e2a\u8f93\u5165\u4e3a 1, encoder \u4f1a\u5c06\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u503c\u7f16\u7801\u3002</p> <p>Example</p> <p>  V \u8868\u793a\u662f\u662f\u5426\u6709\u6709\u6548\u4fe1\u53f7\u8fdb\u5165 \\(A2 = D4\\) \\(A1 = \\overline{D4} D3 +     \\overline{D4}      D2 =       \\overline{D4}F1,  F1 = (D3 + D2)\\) \\(A0 =  \\overline{D4}    D3 +  \\overline{D4}\\overline{D3}\\overline{D2}              D1 = \\overline{D4}     (D3 + \\overline{D2}     D1)\\) \\(V  = D4 + F1 + D1 + D0\\)</p>"},{"location":"Logic/logic03/#multiplexers","title":"Multiplexers","text":"<p>Circuits that perform selecting have:    </p> <ul> <li>A set of information inputs from which the selection is made</li> <li>A single output</li> <li>A set of control lines for making the selection</li> </ul> <p>Logic circuits that perform selecting are called multiplexers.   </p> <p>A typical multiplexer has n control inputs \\((S{n - 1},... S_0)\\) called selection inputs, \\(2^n\\) information inputs \\((I_{2^n - 1}, \u2026 I_0)\\), and one output Y. \u5982\u679c\u8f93\u5165 \\(m&lt;2^n\\) \u4e5f\u53ef\u4ee5\u8bbe\u8ba1\u4e3a n select lines \u7684 multiplexers.  </p> <p>2-to-1-Line Multiplexer</p> <p> </p> <p>S = 0 \u65f6\u9009\u62e9 \\(I_0\\); S = 1 \u65f6\u9009\u62e9 \\(I_1\\).  Equation: \\(Y=\\overline S I_0+SI_1\\) \u753b\u7535\u8def\u56fe\u65f6\uff0c\u8981\u5206\u6210\u4e24\u5757\uff1a\u7b2c\u4e00\u90e8\u5206 1-2 \u8bd1\u7801\u5668\uff0c\u540e\u4e00\u90e8\u5206\u662f 2-2 \u4e0e\u6216\u7ed3\u6784\u3002\uff08\u7ed3\u6784\u590d\u6742\u540e\uff0c\u5176\u5b9e\u5c31\u662f\u5c06\u8fd9\u4e24\u90e8\u5206\u6269\u5c55\uff09</p> <p>In general, \\(2^n\\)-to-1-line multiplexers:</p> <ul> <li>n-to-\\(2^n\\)-line decoder</li> <li>\\(2^n \\times 2\\) AND-OR</li> </ul> <p>Example</p> <p> </p> <p>\u4efb\u4f55\u65f6\u523b\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u662f 1, \u76f8\u5f53\u4e8e\u53ea\u6709\u4e00\u4e2a\u4e0e\u95e8\u88ab enable, \u5176\u4f59\u90fd disable. \u8fd9\u6837\u5c31\u80fd\u9009\u62e9\u51fa enable \u7684\u4fe1\u53f7\u3002  </p> <p>\u591a\u4f4d\u7684\u6570\u636e\u9009\u62e9\u3002\u8fd9\u91cc\u6709\u56db\u7ec4\u4fe1\u53f7\uff0c\u6bcf\u7ec4\u4fe1\u53f7\u90fd\u662f\u56db\u4e2a\u8f93\u5165\u7684\u4e00\u4f4d\uff0c\u4f46\u9009\u62e9\u903b\u8f91\u5bf9\u4e8e\u56db\u7ec4\u4fe1\u53f7\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u6700\u540e\u9009\u51fa\u6765\u7684\u90fd\u662f\u540c\u4e00\u7ec4\u4fe1\u53f7\u3002\u5373\u6700\u540e\u8f93\u51fa\u7684\u56db\u4f4d\u4fe1\u53f7\u90fd\u6765\u81ea\u540c\u4e00\u6839\u603b\u7ebf\uff0c</p> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u7528\u4e0e\u6216\u7ed3\u6784\uff0c\u4f7f\u7528\u4e09\u6001\u95e8\u5b9e\u73b0 mux.  </p> <p>\u4e09\u6001\u95e8\u6539\u8fdb Mux</p> <p> </p> <p>(\u5229\u7528\u4e09\u6001\u95e8\u53ef\u4ee5\u5c06\u8f93\u51fa\u5e76\u5728\u4e00\u8d77\uff0c\u540c\u65f6\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u6709\u6709\u6548\u8f93\u51fa\u3002\u6211\u4eec\u8fd9\u91cc\u8bd1\u7801\u5668\u53ea\u4f1a\u6709\u4e00\u4e2a\u8f93\u51fa\u4e3a 1, \u4fdd\u8bc1\u4e86\u7535\u8def\u5b89\u5168\uff1b\u8fd9\u6837\u8fd8\u53ef\u4ee5\u964d\u4f4e\u6210\u672c) \u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u8bd1\u7801\u5668\u4e5f\u4f7f\u7528\u4e09\u6001\u95e8\uff1a  </p> <p>\u8fd9\u91cc\u6211\u4eec\u662f\u4e24\u5c42\u9009\u62e9\u7684\u903b\u8f91\uff0cS0 = 0 \u65f6\u5148\u9009\u51fa I0(00) \u548c I2(10), S1 \u518d\u8fdb\u884c\u7b2c\u4e8c\u5c42\u7684\u9009\u62e9\u3002</p>"},{"location":"Logic/logic03/#combinational-logic-implementation-multiplexer-approach","title":"Combinational Logic Implementation- Multiplexer Approach","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a n \u53d8\u91cf\u7684\u903b\u8f91\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u62bd\u8c61\u4e3a n \u4e2a\u8f93\u5165\u5bf9\u5e94\u4e00\u4e2a\u8f93\u51fa\u3002\u6211\u4eec\u53ef\u4ee5\u7528 Mux \u5bf9\u5e94\u771f\u503c\u8868\u4e2d\u7684 \\(2^n\\) \u884c\u7684\u7ed3\u679c\uff0c\u7528 n \u8f93\u5165\u4f5c\u4e3a\u9009\u62e9\u7ebf\u6765\u67e5\u8868\u3002</p> <p>Gray to Binary Code</p> <p> </p> <p>\u76f8\u5f53\u4e8e\u5229\u7528 ABC \u67e5\u8868\uff0c\u5982\u679c mux \u9009\u62e9\u51fa\u4e00\u4f4d\uff08\u6839\u636e\u771f\u503c\u8868\u5f97\u5230\uff09 \u6ce8\u610f\u5f15\u811a\u987a\u5e8f\uff01</p> <p>\u6211\u4eec\u53ef\u4ee5\u505a\u8fdb\u4e00\u6b65\u6539\u8fdb\uff0c\\(n+1\\) \u53d8\u91cf\u7528 \\(2^n-1\\) mux</p> <p>\u5bf9\u4e8e \\(F(A,B,C)\\) \u5f53 A B \u786e\u5b9a\u65f6\uff0c\u6700\u540e\u53ef\u80fd\u8f93\u51fa\u53ea\u53ef\u80fd\u4e3a \\(1,0,C,\\overline C\\) \u5229\u7528\u8fd9\u70b9\u6211\u4eec\u53ef\u4ee5\u6539\u9020\u771f\u503c\u8868\uff0c</p> <p>\u7406\u8bba\u4e0a\u8fd8\u53ef\u4ee5\u653e\u66f4\u591a\u53d8\u91cf\u5230\u53e6\u4e00\u8fb9</p>"},{"location":"Logic/logic03/#arithmetic-functions","title":"Arithmetic Functions","text":"<p>Cell - subfunction block \u5355\u5143\u6a21\u5757\uff0c\u5904\u7406\u6bcf\u4f4d</p>"},{"location":"Logic/logic03/#functional-blocks-addition","title":"Functional Blocks: Addition","text":"<p>Addition Development:  </p> <ul> <li>Half-Adder (HA), a 2-input bit-wise addition functional block.(no carry input)</li> <li>Full-Adder (FA), a 3-input bit-wise addition functional block.  </li> <li>Ripple Carry Adder, an iterative array to perform binary addition.  </li> <li>Carry-Look-Ahead Adder (CLA), a hierarchical structure to improve performance. </li> </ul>"},{"location":"Logic/logic03/#half-adder","title":"Half-Adder","text":"<p>\\(S=X\\oplus Y, C=XY\\).</p>"},{"location":"Logic/logic03/#full-adder","title":"Full Adder","text":"<p>S \u65e0\u6cd5\u5316\u7b80\uff0c\u4f46\u53ef\u4ee5\u8868\u793a\u4e3a\u5947\u51fd\u6570\uff08\u5f02\u6216\uff09</p> <p>\\(S=X\\overline Y\\overline Z+\\overline X Y \\overline Z + \\overline X\\overline YZ+XYZ=X\\oplus Y\\oplus Z\\) \\(C=XY+XZ+YZ=XY+(X\\oplus Y)Z\\).   The term \\(XY\\) is carry generate.(\\(XY=1\\) \u65f6\u4e00\u5b9a\u4f1a\u6709\u8fdb\u4f4d) The term \\(X\\oplus Y\\) is carry propagate.(\\(X\\oplus Y=1\\) \u65f6 X,Y\u6709\u4e00\u4e2a\u662f 0, \u4e00\u5b9a\u4f1a\u628a\u8fdb\u4f4d\u4f20\u4e0b\u53bb\uff0c\u5373 \\(C=Z\\))</p> <p>Note</p> <p>\u6ce8\u610f C \u7684\u6539\u5199\uff0c\u8fd9\u91cc\u6539\u4e3a\u5f02\u6216\u4e0d\u6539\u53d8\u7ed3\u679c\uff0c\u540c\u65f6\u56e0\u4e3a\u5df2\u7ecf\u6709 xor \u4e86\uff0c\u53ef\u4ee5\u8282\u7ea6\u4e00\u4e2a\u95e8\u3002</p> <p>Implementation: </p>"},{"location":"Logic/logic03/#binary-adders","title":"Binary Adders","text":"<p>\u5b9e\u73b0\u4e8c\u8fdb\u5236\u591a\u4f4d\u52a0\u6cd5</p>"},{"location":"Logic/logic03/#4-bit-ripple-carry-binary-adder","title":"4-bit Ripple-Carry Binary Adder","text":"<p>\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u968f\u7740\u52a0\u6cd5\u5668\u4f4d\u6570\u7684\u589e\u52a0\uff0c\u5ef6\u8fdf\u4f1a\u8d8a\u6765\u8d8a\u5927\u3002 \u5982\u4e0b\u56fe\u4e2d\uff0c\u6700\u957f\u7684\u8def\u5f84\u662f\u4ece A0 \u6216 B0 \u5230 S3.  </p>"},{"location":"Logic/logic03/#carry-lookahead","title":"Carry Lookahead","text":"<p>\u5bf9\u4e8e\u72b6\u6001 i, \u6211\u4eec\u79f0 \\(G_i\\) \u4e3a generate, \\(P_i\\) \u4e3a propagate.    </p> <ul> <li>\\(G_i\\), \\(P_i\\), and \\(S_i\\) are local to each cell of the adder</li> <li>\\(C_i\\) is also local each cell</li> </ul> <p>\u5168\u52a0\u5668\u7684\u66f4\u65b0\u53ef\u4ee5\u5b9a\u4e49\u4e3a  </p> \\[   \\begin{align*}     P_i &amp; =A_i\\oplus B_i, \\ G_i    = A_iB_i\\\\     S_i &amp; =P_i\\oplus C_i,\\ C_{i+1} = G_i+P_iC_i \\end{align*}   \\] <p>\u8fd9\u6837 \\(C_{i+1}\\) \u53ef\u4ee5\u4ece cells \u4e2d\u53bb\u6389\uff0c\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u5f97\u5230\u4e00\u7ec4\u8de8\u8d8a\u591a\u4e2a\u5355\u5143\u7684\u8fdb\u4f4d\u65b9\u7a0b\uff1a</p> <p>\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e0b\u9762\u7684 Carry Look-ahead Adder:</p> <p>\u8fd9\u6837\u7684\u8d85\u524d\u8fdb\u4f4d\u5168\u52a0\u5668\uff0c\u907f\u514d\u4e86\u56e0\u4e3a\u4f4d\u8fc7\u591a\u800c\u9020\u6210\u5ef6\u8fdf\u8fc7\u5927\u3002\u9ad8\u4f4d\u7684\u7ed3\u679c\u76f4\u63a5\u7531\u4f4e\u4f4d\u7684\u7ed3\u679c\u5f97\u5230\u3002</p> <p>This could be extended to more than four bits; in practice, due to limited gate fan-in, such extension is not feasible.  </p> <p>The concept is extended another level by considering group generate(\\(G_{0-3}\\)) and group propagate(\\(P_{0-3}\\)) functions:</p> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86 16-bits adder</p> <p>Exactly the same structure. So CLA could be used to generate Group Carry.  \u7c7b\u4f3c\u601d\u8def\u53ef\u5f97\u5230 64 \u4f4d\u7684\u52a0\u6cd5\u5668\u3002</p> <p>Example</p> <p> </p>"},{"location":"Logic/logic03/#unsigned-subtraction","title":"Unsigned Subtraction","text":"<ul> <li>Subtract the subtrahend(\u51cf\u6570) N from the minuend(\u88ab\u51cf\u6570) M</li> <li>If no end borrow occurs, then \\(M\\geq N\\), and the result is a non-negative number and correct.</li> <li>If an end borrow occurs, the \\(N &gt; M\\) and the difference \\(M - N + 2^n\\) is subtracted from \\(2^n\\), and a minus sign is appended to the result.</li> </ul> <p>To do both unsigned addition and unsigned subtraction requires:</p> <p>\u590d\u6742\uff0c\u6210\u672c\u9ad8</p>"},{"location":"Logic/logic03/#complements","title":"Complements","text":"<ul> <li>Diminished Radix Complement of N \u53cd\u7801   defined as \\(r^n-1-N\\)(\\(r^n-1\\) \u662f bits[n-1:0] \u5168\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u7528\u5b83\u51cf\u53bb N \u5373\u53ef\u5f97\u5230 N \u6309\u4f4d\u53d6\u53cd\u7684\u7ed3\u679c\uff0c\u5373\u53cd\u7801) The 1's complement is obtained by complementing each individual bit (bitwise NOT).  </li> <li>2\u2019s complement \u8865\u7801  defined as \\(r^n-N\\)<ul> <li>\u53cd\u7801\u6309\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00</li> <li>\u4e5f\u53ef\u4ee5\u8fd9\u6837\u6c42\u8865\u7801\uff1a\u4ece\u53f3\u5f80\u5de6\u7b2c\u4e00\u4e2a 1 \u4e4b\u524d\u4e0d\u53d8\uff0c\u6b64\u540e\u5176\u4ed6\u4f4d\u5168\u90e8\u6c42\u53cd</li> </ul> </li> </ul> <p>Subtraction is done by adding the complement of the subtrahend.  </p> <ul> <li>Subtraction with 2\u2019s Complement<ul> <li>Add the 2's complement of the subtrahend N  to the minuend M: \\(M + (2^n -N) = M - N + 2^n\\)</li> <li>if \\(M\\geq N\\), the sum produces end carry \\(r^n\\) which is discarded; from above, \\(M - N\\) remains.  </li> <li>If \\(M &lt; N\\), the sum does not produce an end carry and, from above, is equal to \\(2^n - ( N - M )\\), the 2's complement of \\(( N - M )\\).   To obtain the result \\((N \u2013 M)\\), take the 2's complement of the sum and place a \\(-\\) to its left.</li> </ul> </li> </ul> <p>Example</p> <ul> <li>  \u8fdb\u4f4d\u662f 1 \u8868\u660e\u7ed3\u679c\u4e3a\u6b63\uff0c\u4e0d\u9700\u5bf9\u7ed3\u679c\u4fee\u6b63</li> <li>  \u8fdb\u4f4d\u662f 0 \u8868\u660e\u7ed3\u679c\u4e3a\u8d1f\uff0c\u9700\u5bf9\u7ed3\u679c\u4fee\u6b63</li> </ul>"},{"location":"Logic/logic03/#signed-integers","title":"Signed Integers","text":"<ul> <li>Signed Integer Representations: \u7b2c n-1 \u4f4d\u8868\u793a\u6b63\u8d1f\uff0c\u540e\u9762 bits[n-2:0] \u8868\u793a\u7edd\u5bf9\u503c\u5927\u5c0f</li> <li>Signed-Complement<ul> <li>Signed 1's Complement</li> <li>Signed 2's Complement</li> </ul> </li> </ul> <p>\u8be6\u89c1 ICS notes</p>"},{"location":"Logic/logic03/#signed-magnitude-arithmetic","title":"Signed-Magnitude Arithmetic","text":"<ul> <li>\u68c0\u67e5\u4e09\u4e2a\u7b26\u53f7\u4f4d\u7684\u5947\u5076\u6027\uff08\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u7b26\u53f7\u4f4d\u548c\u52a0\u51cf\u6cd5\u7684\u7b26\u53f7\u4f4d\uff0c\u6211\u4eec\u4e00\u822c\u8ba4\u4e3a\u52a0\u6cd5\u662f 0, \u51cf\u6cd5\u662f 1\uff09\u7528\u4e8e\u5224\u65ad\u6ea2\u51fa \u53ef\u80fd\u6ea2\u51fa\u7684\u60c5\u51b5\uff1a\u6b63\u52a0\u6b63(000), \u6b63\u51cf\u8d1f(011), \u8d1f\u51cf\u6b63(101), \u8d1f\u52a0\u8d1f(110)</li> <li>If the parity of the three signs is 0:(overflow may happen)<ul> <li>Add the magnitudes.</li> <li>Check for overflow (a carry out of the MSB) </li> <li>The sign of the result is the same as the sign of the first operand.</li> </ul> </li> <li>If the parity of the three signs is 1:<ul> <li>Subtract the second magnitude from the first.</li> <li>If a borrow occurs: take the two\u2019s complement of result and make the result sign the complement of the sign of the first operand.</li> <li>Overflow will never occur.</li> </ul> </li> </ul>"},{"location":"Logic/logic03/#signed-complement-arithmetic","title":"Signed-Complement Arithmetic","text":"<ul> <li>Addition:  <ul> <li>Add the numbers including the sign bits,  discarding a carry out of the sign bits (2's Complement), or using an end-around carry (1's Complement).</li> <li>If the sign bits were the same for both numbers and the sign of the result is different, an overflow has occurred.</li> <li>The sign of the result is computed in step 1.</li> </ul> </li> <li>Subtraction:    Form the complement of the number you are subtracting and follow the rules for addition.</li> </ul> <p>Signed 2\u2019s Complement Examples</p> <ul> <li>1101 + 0011 Result is  0000. The carry out of the MSB is discarded.</li> <li>1101 - 0011 Complement 0011 to 1101 and add. Result is 1010. The carry out of the MSB is discarded.</li> </ul> <ul> <li>2\u2019s Complement Adder/Subtractor  </li> </ul> <p>\u5229\u7528\u5f02\u6216\u95e8\uff0c\u5f53 S=0 \u65f6\u5f02\u6216\u95e8\u76f8\u5f53\u4e8e\u4fdd\u6301\u53e6\u4e00\u4e2a\u4fe1\u53f7\uff0c\u5f53 S=1 \u65f6\u5f02\u6216\u95e8\u76f8\u5f53\u4e8e\u5bf9\u53e6\u4e00\u4e2a\u4fe1\u53f7\u53d6\u53cd\u3002</p> <ul> <li>Overflow Detection Overflow occurs if n + 1 bits are required to contain the result from an n-bit addition or subtraction  </li> </ul> <p>Example</p> <p> </p> <p>Simplest way to implement overflow \\(V = C_n \\oplus C_{n - 1}\\) \\(C_n\\) \u662f\u6ea2\u51fa\u53bb\u7684\u4f4d\uff0c\\(C_{n-1}\\) \u662f\u8fd0\u7b97\u540e\u7684\u7b26\u53f7\u4f4d\u3002 \u622a\u65ad</p>"},{"location":"Logic/logic03/#arithmetic-logic-unit-alu","title":"Arithmetic Logic Unit (ALU)","text":"<p>Decompose the arithmetic circuit into:  </p> <ul> <li>An n-bit parallel adder</li> <li>A block of logic that selects four choices for the B input to the adder </li> </ul> <p>Example</p> <p> </p> <p>\u5176\u4e2d \\(Y_i=B_iS_0+\\overline B_iS_1\\) S0 S1 \u7684\u53d8\u5316\u53ef\u4ee5\u7ed9\u52a0\u6cd5\u5668\u63d0\u4f9b\u4e0d\u540c\u7684\u8f93\u5165\uff0c\u5305\u62ec -1(\u4e8c\u8fdb\u5236\u6bcf\u4e00\u4f4d\u90fd\u662f 1) 0 \\(B\\) \\(\\overline B\\) </p>"},{"location":"Logic/logic04/","title":"Sequential Circuits","text":"Abstract <ol> <li>\u65f6\u5e8f\u7535\u8def\u6982\u5ff5\u548c\u7ec4\u6210 Introduction to Sequential Circuits  </li> <li>\u8f93\u51fa\u65b9\u7a0b\u3001\u6fc0\u52b1\u51fd\u6570\u3001\u6b21\u6001\u65b9\u7a0b\u3001\u8f93\u51fa\u65b9\u7a0b\u7c7b\u578b  Output function, Excitationfunction, Next state function, type of output functions  </li> <li>\u65f6\u5e8f\u7535\u8def\u7c7b\u578b Types of sequential circuits  </li> <li>\u7535\u8def\u5ef6\u8fdf\u6a21\u578b Circuit delay model  </li> <li> <p>\u9501\u5b58\u5668\u4e0e\u89e6\u53d1\u5668  Latch and Flip-Flop</p> <ul> <li>S-R\u9501\u5b58\u5668\u7684\u539f\u7406\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b\uff0c\u5185\u90e8\u7535\u8def\u5206\u6790\uff0c\u4e0d\u786e\u5b9a\u72b6\u6001\u7684\u539f\u56e0\u53ca\u51fa\u73b0\u6761\u4ef6 Analysis of Basic S-R Latch, Characteristic Table, Characteristic Equation, reason of unstable state  </li> <li>D\u9501\u5b58\u5668\u3001D\u89e6\u53d1\u5668\u7684\u539f\u7406\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b\uff0c\u5185\u90e8\u7535\u8def\u5206\u6790  Theory of D Latch and D Flip-Flop, Characteristic Table, Characteristic Equation  </li> <li>JK\u89e6\u53d1\u5668\u3001T\u89e6\u53d1\u5668\u7684\u884c\u4e3a\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b Behavior of JK Flip-Flop, TFlip-Flop, Characteristic Table, Characteristic Equation  </li> <li>\u8109\u51b2\u89e6\u53d1\u548c\u8fb9\u6cbf\u89e6\u53d1\u7684\u6982\u5ff5\uff0c\u8109\u51b2\u89e6\u53d1\u7684\u4e00\u6b21\u6027\u91c7\u6837\u884c\u4e3a\u539f\u56e0 Concept  of  Master-slave and edge-triggered flip-flop, 1s catching of Mast-slave flip-flop  </li> <li>\u9501\u5b58\u5668\u548c\u89e6\u53d1\u5668\u7684\u65f6\u5e8f\uff0c\u5efa\u7acb\u65f6\u95f4\u3001\u4fdd\u6301\u65f6\u95f4\u3001\u4f20\u8f93\u5ef6\u8fdf\u7b49\u5404\u79cd\u65f6\u5e8f\u6210\u5206 Flip-Flop Timing Parameters, setup time, hold time, propagation delay  </li> <li>\u5404\u79cd\u89e6\u53d1\u5668\u7684\u56fe\u5f62\u7b26\u53f7 Symbols of Flip-Flops  </li> </ul> </li> <li> <p>\u72b6\u6001\u8868\u3001\u72b6\u6001\u56fe State Table, State Diagram  </p> </li> <li> <p>\u540c\u6b65\u65f6\u5e8f\u7535\u8def\u5206\u6790 Sequential Circuit Analysis  </p> <ul> <li>\u6839\u636e\u7ed9\u5b9a\u7535\u8def\uff0c\u5199\u51fa\u8f93\u51fa\u65b9\u7a0b\u548c\u6fc0\u52b1\u51fd\u6570/\u6b21\u6001\u65b9\u7a0b   Derive output functions and excitationfunction/Next state function  </li> <li>\u5217\u51fa\u72b6\u6001\u771f\u503c\u8868 ObtainState truth table  </li> <li>\u5217\u51fa\u65f6\u5e8f\u7535\u8def\u7684\u6b21\u6001 List next state of sequential circuit  </li> <li>\u4f5c\u72b6\u6001\u8868\u548c\u72b6\u6001\u56fe ObtainState Table and State Diagram  </li> <li>\u5206\u6790\u65f6\u5e8f\u7535\u8def\u7684\u5916\u90e8\u6027\u80fd Analysis the behavior of sequential circuit  </li> <li>\u5bf9\u7535\u8def\u8fdb\u884c\u8bc4\u8ff0\uff0c\u901a\u5e38\u9700\u68c0\u67e5\u81ea\u6062\u590d\u529f\u80fd\u53ca\u753b\u51fa\u65f6\u5e8f\u6ce2\u5f62\u56fe Evaluate the circuit, validate the self-recovery ability  </li> </ul> </li> <li> <p>\u7535\u8def\u548c\u7cfb\u7edf\u7ea7\u65f6\u5e8f\u5206\u6790\uff0c\u65f6\u5e8f\u7535\u8def\u5404\u8def\u5f84\u7684\u65f6\u5e8f\u6210\u5206\u5206\u6790\u8ba1\u7b97 Circuit and System Level Timing, analyze and compute time component along any path of the sequential circuit   9\uff0e\u7c73\u5229\u578b\u548c\u7a46\u5c14\u578b\u7535\u8def\u5206\u6790 analyze Mealy and Moore type circuit 10\uff0e\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1 Sequential Circuit Design  </p> <ul> <li>\u5199\u51fa\u89c4\u683c\u8bf4\u660e\u4e66 Specification  </li> <li>\u7cfb\u7edf\u63cf\u8ff0\u2013\u4ece\u95ee\u9898\u9648\u8ff0\u4e2d\u5f97\u51fa\u72b6\u6001\u56fe\u548c\u72b6\u6001\u8868 Formulation -Obtain a state diagram or state table  </li> <li>\u72b6\u6001\u8d4b\u503c\u2013\u4e3a\u72b6\u6001\u8868\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u8d4b\u4e8c\u8fdb\u5236\u4ee3\u7801 State Assignment -Assign binary codes to the states  </li> <li>\u5f97\u5230\u89e6\u53d1\u5668\u7684\u8f93\u5165\u65b9\u7a0b-\u9009\u62e9\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u4ece\u72b6\u6001\u8868\u7684\u6b21\u6001\u680f\u5f97\u5230\u89e6\u53d1\u5668\u7684\u8f93\u5165\u65b9\u7a0b Flip-Flop Input Equation Determination-Select flip-flop types and derive flip-flop equations from next state entries in the table  </li> <li>\u786e\u5b9a\u8f93\u51fa\u65b9\u7a0b-\u4ece\u72b6\u6001\u8868\u7684\u8f93\u51fa\u680f\u5f97\u5230\u8f93\u51fa\u65b9\u7a0b Output Equation Determination-Derive output equations from output entries in the table  </li> <li>\u4f18\u5316\u2013\u4f18\u5316\u89e6\u53d1\u5668\u7684\u8f93\u5165\u65b9\u7a0b\u548c\u8f93\u51fa\u65b9\u7a0b  Optimization-Optimize the equations  </li> <li>\u5de5\u827a\u6620\u5c04\u2013\u6839\u636e\u65b9\u7a0b\u753b\u51fa\u7535\u8def\u56fe\uff0c\u5e76\u6620\u5c04\u5230\u89e6\u53d1\u5668\u548c\u95e8\u5de5\u827a Technology Mapping-Find  circuit from equations and map to flip-flops and gate technology  </li> <li>\u9a8c\u8bc1\u2013\u9a8c\u8bc1\u6700\u7ec8\u8bbe\u8ba1\u7684\u6b63\u786e\u6027 Verification-Verify correctness of final design</li> </ul> </li> </ol>"},{"location":"Logic/logic04/#storage-elements-and-analysis","title":"Storage Elements and Analysis","text":"<p>\u65f6\u5e8f\u7535\u8def\u5305\u62ec\uff1a\u7ec4\u5408\u903b\u8f91\u7535\u8def+\u5b58\u50a8\u5143\u4ef6</p> <p>Combinatorial Logic  </p> <ul> <li>Next state function Next State = f(Inputs, State)  \u6b21\u6001\u65b9\u7a0b  </li> <li>Output function (Mealy) Outputs = g(Inputs, State)</li> <li>Output function (Moore) Outputs = h(State) \u8f93\u5165\u4e0d\u4f1a\u76f4\u63a5\u6539\u53d8\u8f93\u51fa\uff0c\u800c\u662f\u901a\u8fc7\u72b6\u6001\u6765\u95f4\u63a5\u6539\u53d8\u8f93\u51fa  </li> </ul> <p>Types of Sequential Circuits </p> <ul> <li>Depends on the times at which:<ul> <li>storage elements observe their inputs, and </li> <li>storage elements change their state </li> </ul> </li> <li>Synchronous \u72b6\u6001\u66f4\u65b0\u4e00\u5b9a\u53d1\u751f\u5728\u65f6\u949f\u5468\u671f\u7684\u6574\u5468\u671f\u4e0a</li> <li>Asynchronous \u72b6\u6001\u66f4\u65b0\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u95f4\u53d1\u751f   \u5982\u679c\u65f6\u949f\u4e5f\u88ab\u770b\u505a\u4e00\u4e2a\u8f93\u5165\uff0c\u90a3\u4e48\u6240\u6709\u7535\u8def\u90fd\u662f Asynchronous       Asynchronous \u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u6709\u9700\u8981\u7684\u65f6\u5019\u66f4\u65b0\u7535\u8def\uff0c\u964d\u4f4e\u7535\u8def\u7684\u529f\u8017   </li> </ul> <p>Discrete Event Simulation \u79bb\u6563\u4e8b\u4ef6\u4eff\u771f</p>"},{"location":"Logic/logic04/#latch","title":"Latch","text":"<p>Example</p> <p> </p> <p>The simple combinational circuit has now become a sequential circuit because its output is a function of a time sequence of input signals! </p>"},{"location":"Logic/logic04/#basic-nand-overline-s-overline-r-latch","title":"Basic (NAND)  \\(\\overline S\\) \u2013  \\(\\overline R\\) Latch","text":"\\(R\\) \\(S\\) \\(Q\\) \\(\\overline Q\\) Comment 1 1 ? ? Stored state unknown 1 0 1 0 Set Q to 1 1 1 1 0 Now Q remembers 1 0 1 0 1 Reset Q to 0 1 1 0 1 Now Q remembers 0 0 0 1 1 Both go high 1 1 ? ? Unstable! <p>\u6700\u540e\u4e00\u6b65\uff0c\u4e24\u4e2a\u5f15\u811a\u540c\u65f6\u4ece 0 -&gt; 1, \u90a3\u4e48\u4e24\u4e2a\u4e0e\u975e\u95e8\u7684\u8f93\u51fa\u90fd\u671f\u671b\u53d8\u6210 0, \u4f46\u53ea\u8981\u6709\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u53d8\u4e3a 0 \u53e6\u4e00\u4e2a\u95e8\u5c31\u88ab\u9501\u4f4f\u53d8\u6210 1, \u56e0\u6b64\u4e24\u4e2a\u95e8\u4e0d\u53ef\u80fd\u540c\u65f6\u53d8\u5316\u3002\u4f46\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u662f\u54ea\u4e2a\u95e8\u4f1a\u53d8\u6210 1. \\(S=0,R=0\\) is forbidden as input pattern.   </p>"},{"location":"Logic/logic04/#basic-nor-s-r-latch","title":"Basic (NOR)  \\(S\\) \u2013 \\(R\\) Latch","text":"\\(R\\) \\(S\\) \\(Q\\) \\(\\overline Q\\) Comment 0 0 ? ? Stored state unknown 0 1 1 0 Set Q to 1 0 0 1 0 Now Q remembers 1 1 0 0 1 Reset Q to 0 0 0 0 1 Now Q remembers 0 1 1 1 1 Both go high 0 0 ? ? Unstable!"},{"location":"Logic/logic04/#clocked-s-r-latch","title":"Clocked \\(S\\) - \\(R\\) Latch","text":"<p>\\(C\\) \u4f5c\u4e3a\u4e00\u4e2a ENABLE \u7684\u529f\u80fd\u3002\u5f53 \\(C=0\\) \u65f6\uff0c\\(Q\\) \u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u5f53 \\(C=1\\) \u65f6\uff0c\u4e0a\u9762\u76f8\u5f53\u4e8e \\(\\overline S\\), \u4e0b\u9762\u76f8\u5f53\u4e8e \\(\\overline R\\), \u53d8\u6210\u4e00\u4e2a\u949f\u63a7\u7684 SR \u9501\u5b58\u5668\u3002  </p> \\(C\\) \\(S\\) \\(R\\) \\(Q(t+1)\\) 0 X X No change 1 0 0 No change 1 0 1 0: Clear Q 1 1 0 1: Set Q 1 1 1 Indeterminate <p>\\(Q(t+1)\\) based on current state \\(Q(t)\\) and current inputs \\((S,R,C)\\)</p>"},{"location":"Logic/logic04/#d-latch","title":"\\(D\\) Latch","text":"<p>\\(S\\ R\\) \u4e0d\u4f1a\u540c\u65f6\u4e3a 0.  </p> \\(C\\) \\(D\\) \\(Q(t+1)\\) 0 X No change 1 0 0: Clear Q 0 1 1: Set Q <p>\u5373\u5f53 \\(C=1\\) \u65f6 \\(Q=D\\)</p> <p>The graphic symbol for a \\(D\\) latch:  </p> <p>Info</p> <p>\u5728\u7b97\u95e8\u8f93\u5165\u6210\u672c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u5206\u5f00\u7b97 G \u548c GN. \u56e0\u4e3a\u9501\u5b58\u5668\u540c\u65f6\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 \\(Q\\) \u548c \\(\\overline Q\\), \u9501\u5b58\u5668\u53ef\u4ee5\u4e3a\u540e\u9762\u7684\u7ec4\u5408\u7535\u8def\u63d0\u4f9b\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\u3002</p>"},{"location":"Logic/logic04/#flip-flop","title":"Flip-flop","text":"<p>\u9501\u5b58\u5668\u4e0d\u9002\u5408\u4f7f\u7528\u5728\u7535\u8def\u4e2d\uff1a\u4e0d\u80fd\u505a\u5230\u4e00\u4e2a\u5468\u671f\uff0c\u72b6\u6001\u53ea\u66f4\u65b0\u4e00\u6b21\u3002\u5177\u4f53\u539f\u56e0\u89c1 ICS Notes </p>"},{"location":"Logic/logic04/#s-r-master-slave-flip-flop","title":"S-R Master-Slave Flip-Flop","text":"<p>\u524d\u9762\u79f0\u4e3a master(\u4e3b\u9501\u5b58\u5668), \u540e\u9762\u79f0\u4e3a slave(\u4ece\u9501\u5b58\u5668)   \u5f53 \\(C=0\\) \u65f6\uff0c\u4e3b\u9501\u5b58\u5668\u4e0d\u53d8\u3002   \\(C\\) \u4ece 0 \u53d8\u4e3a 1 \u65f6\uff0c\u4e3b\u9501\u5b58\u5668\u88ab\u4f7f\u80fd\uff0cQ \u6539\u53d8\uff0c\u4f46\u4ece\u9501\u5b58\u5668\u4e0d\u53d8\u3002</p> <p>\u5468\u671f\u53d8\u957f\u4e00\u500d \u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898(1s catching)\uff1a\u5f53 S R \u5747\u4e3a 0 \u65f6\u5982\u679c\u6709\u5c0f\u6270\u52a8\uff0c\u65e0\u6cd5\u590d\u539f \u8981\u6c42\u4e3b\u4ece\u89e6\u53d1\u5668\u907f\u514d S R \u7684\u6270\u52a8</p>"},{"location":"Logic/logic04/#edge-triggered-d-flip-flop","title":"Edge-Triggered D Flip-Flop","text":"<p>An edge-triggered flip-flop ignores the pulse while it is at a constant level and triggers only during a transition of the clock signal. A master-slave D flip-flop which also exhibits edge-triggered behavior can be used.</p> <p>The delay of the S-R master-slave flip-flop can be avoided since the 1s-catching behavior is not present with D replacing S and R inputs. (D \u9501\u5b58\u5668\u4e0d\u4f1a\u51fa\u73b0 S R \u540c\u65f6\u4e3a 0 \u7684\u60c5\u51b5)</p> <p>Positive-Edge Triggered D Flip-Flop is Formed by adding inverter to clock input. (\u4e0a\u5347\u6cbf\u89e6\u53d1\u5668)   Q changes to the value on D applied at the positive clock edge within timing constraints to be specified</p> <p>Actual Circuit of Edge-Triggered D Flip-Flop: </p> <p>(\u548c D-Latch Flip-flop \u6709\u6240\u4e0d\u540c)</p> <p>Standard Symbols for Storage Elements: </p> <ul> <li>Direct Inputs  Direct \\(R\\) and/or \\(S\\) inputs that control the state of the latches within the flip-flops are used for this initialization.   </li> </ul>"},{"location":"Logic/logic04/#analysis","title":"Analysis","text":"<p>General Model </p> <p>\u540c\u6b65\u65f6\u5e8f\u7535\u8def\u91cc D \u89e6\u53d1\u5668\u7684\u65f6\u949f\u8f93\u5165\u7aef\uff0c\u7edf\u4e00\u63a5\u5728\u4e00\u4e2a\u7cfb\u7edf\u65f6\u949f\u8f93\u5165 CLK \u4fe1\u53f7\u4e0a\u3002\uff08\u89c4\u5b9a\u6240\u6709\u89e6\u53d1\u5668\u4f55\u65f6\u8fdb\u884c\u72b6\u6001\u6539\u53d8\uff0c\u662f\u989d\u5916\u63d0\u4f9b\u7684\u5f15\u811a\uff0c\u4e0d\u5c5e\u4e8e\u6574\u4e2a\u7cfb\u7edf\u7684\u4fe1\u53f7\u8f93\u5165\uff09</p> <ul> <li>Current State at time (t) is stored in an array of flip-flops.</li> <li>Next State at time (t+1) is a Boolean function of State and Inputs.  </li> <li>Outputs at time (t) are a Boolean function of State (t) and (sometimes) Inputs (t).</li> </ul> Example <p> </p> <p>\u53ef\u4ee5\u770b\u5230\uff0ccp \u662f\u65f6\u949f\u8f93\u5165\u4fe1\u53f7  </p> <ul> <li>input: \\(x(t)\\) </li> <li>output: \\(y(t)\\) </li> <li> <p>state: \\((A(t),B(t))\\)</p> </li> <li> <p>Boolean equations for the functions \\(D_A(t) = A(t)x(t)+ B(t)x(t), A(t+1)=A(t)x(t)+ B(t)x(t)\\),  \\(D_B(t) = A(t)x(t),B(t+1) = A(t)x(t), y(t) = x(t)(B(t) + A(t))\\) </p> </li> </ul>"},{"location":"Logic/logic04/#state-table","title":"State table","text":"<ul> <li>Present State \u2013 the values of the state variables for each allowed state.</li> <li>Input \u2013 the input combinations allowed.</li> <li>Next-state \u2013 the value of the state at time \\((t+1)\\) based on the present state and the input.</li> <li>Output \u2013 the value of the output as a function of the present state and (sometimes) the input.</li> </ul> Example <p>\u4ee3\u5165\u521a\u521a\u5199\u51fa\u7684\u5f0f\u5b50\u5373\u53ef  \u4e5f\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u79cd\u753b\u6cd5\uff1a(\u4e8c\u7ef4\u72b6\u6001\u8868\uff0c\u6309\u7167\u683c\u96f7\u7801\u7684\u987a\u5e8f\u6392\u5217)  </p> <p> </p> <p>Note</p> <p>\u5728\u753b\u72b6\u6001\u8868\u65f6\uff0c\u65e0\u6cd5\u8fbe\u5230\u7684\u72b6\u6001\u4e5f\u8981\u753b\u51fa\u6765\u3002\u56e0\u4e3a\u53ef\u80fd\u7a0b\u5e8f\u53d7\u5230\u67d0\u79cd\u6270\u52a8\u6216\u8005\u5f02\u5e38\uff0c\u53ef\u80fd\u4f1a\u8df3\u5230\u539f\u5148\u65e0\u6cd5\u5230\u8fbe\u7684\u72b6\u6001\u3002</p>"},{"location":"Logic/logic04/#state-diagrams","title":"State Diagrams","text":"<p>The sequential circuit function can be represented in graphical form as a state diagram with the following components:</p> <ul> <li>A circle with the state name in it for each state</li> <li>A directed arc from the Present State to the Next State for each state transition</li> <li>A label on each directed arc with the Input values which causes the state transition, and A label:      \u8f93\u51fa\u548c\u8f93\u5165\u662f\u5426\u6709\u5173\uff0c\u65e0\u5173\u6807\u5728\u5708\u91cc\u9762\uff0c\u6709\u5173\u6807\u5728\u5916\u9762<ul> <li>On each circle with the output value produced, or</li> <li>On each directed arc with the output value produced.</li> </ul> </li> </ul> <p>Moore type output depends only on state(\u8f93\u51fa\u753b\u5728\u5708\u91cc\u9762)   Mealy type output depends on state and input(\u8f93\u51fa\u753b\u5728\u6709\u5411\u5f27\u4e0a)</p> Example <p> </p> <p>\uff08\u659c\u6760\u5de6\u8fb9\u8868\u793a\u5916\u90e8\u8f93\u5165\uff0c\u53f3\u8fb9\u8868\u793a\u8f93\u51fa\uff09  </p> <p>Sequential Circuits or Sequential Machines are also called Finite State Machines (FSMs).   </p> <ul> <li> <p>Equivalent State Definitions \u4e24\u4e2a\u72b6\u6001\uff0c\u65e0\u8bba\u8f93\u5165\u662f\u4ec0\u4e48\uff0c\u90fd\u4f1a\u4f7f\u8fd9\u4e24\u4e2a\u72b6\u6001\u8f93\u51fa\u76f8\u540c\uff0c\u6b21\u6001\u4e5f\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u72b6\u6001\u662f\u7b49\u6548\u72b6\u6001\u3002</p> Example <p> </p> <p>\u5728\u8fd9\u4e2a\u56fe\u91cc\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 S2, S3 \u662f\u7b49\u6548\u72b6\u6001\u3002 \u5408\u5e76 S2, S3 \u540e\uff1a  </p> <p>\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53d1\u73b0 S1 \u548c S2 \u53c8\u662f\u7b49\u6548\u72b6\u6001\uff0c\u518d\u6b21\u5408\u5e76\uff0c\u6700\u540e\u5f97\u5230\uff1a  </p> </li> </ul> <p>\u4e3a\u4ec0\u4e48\u8981\u5408\u5e76\u7b49\u6548\u72b6\u6001</p> <p>\u51cf\u5c11\u8868\u793a\u72b6\u6001\u6240\u9700\u8981\u7684\u4e8c\u8fdb\u5236\u4f4d</p> Moore and Mealy Example Diagrams <p> </p>"},{"location":"Logic/logic04/#flip-flop-timing-parameters","title":"Flip-Flop Timing Parameters","text":"<ul> <li>\\(t_s\\) - setup time. \u5728\u4e0b\u964d\u4e4b\u524d\u8981\u5148\u51c6\u5907\u597d\u3002</li> <li>\\(t_h\\) - hold time  </li> <li>\\(t_w\\) - clock pulse width  </li> <li>\\(t_{px}\\) - propagation delay. Measured from clock edge that triggers the output change to the output change.  </li> </ul> \u4e3b\u4ece\u89e6\u53d1\u5668\u548c\u8fb9\u7f18\u89e6\u53d1\u5668\u7684 \\(t_s\\) <p>\u6839\u636e\u5b9a\u4e49, \\(t_s\\) \u6307\u5728\u91c7\u6837\u524d\u89e6\u53d1\u5668\u9700\u8981\u7684\u51c6\u5907\u65f6\u95f4\u3002\u5bf9\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\uff0c\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u7684\u65f6\u5019 S \u90e8\u5206\u7684\u8f93\u5165\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u5426\u5219\u53ef\u80fd\u6709\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u90fd\u662f\u89e6\u53d1\u5668\u7684\u51c6\u5907\u65f6\u95f4\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u6211\u4eec\u666e\u904d\u4f7f\u7528\u8fb9\u7f18\u89e6\u53d1\u5668\u7684\u539f\u56e0\u3002  \u5bf9\u4e8e D \u89e6\u53d1\u5668\u800c\u8a00\uff0c\u4e0d\u8981\u5361\u5728\u65f6\u949f\u8fb9\u6cbf\u6539\u53d8 D \u7684\u8f93\u5165\uff0c\u800c\u662f\u5728\u65f6\u949f\u6539\u53d8\u4e4b\u524d\u5c31\u8fdb\u884c\uff0c\u8fd9\u6837 D \u89e6\u53d1\u5668\u624d\u80fd\u6709\u8db3\u591f\u7684\u51c6\u5907\u65f6\u95f4\u3002 </p> <ul> <li>\\(t_p\\) - clock period   </li> <li>\\(t_{pd,COMB}\\) - total delay of combinational logic along the path from flip-flop output to flip-flop input  </li> <li>\\(t_{slack}\\) - extra time in the clock period in addition to the sum of the delays and setup time on a path. \u677e\u5f1b\u65f6\u95f4\uff08\u4f11\u606f\uff09\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e 0. </li> </ul> <p>Time equation: \\(t_p \\geq \\max (t_{pd,FF} + t_{pd,COMB} + t_s)\\) for all paths from flip-flop output to flip-flop input.  </p> Example <p>Compare the allowable combinational delay for a specific circuit: Using edge-triggered flip-flops; Using master-slave flip-flops.   </p> <ul> <li>Parameters: clock frequency = 250 Mhz; \\(t_{pd,FF}(max)=1.0ns\\); \\(t_s(max)=0.3ns\\) for edge-triggered flip-flops; \\(t_s = t_{wH} = 2.0 ns\\) for master-slave flip-flops  </li> <li>Calculation: \\(t_p = \\dfrac{1}{clock\\ frequency} = 4.0 ns\\)<ul> <li>Edge-triggered: \\(4.0 \\geq 1.0 + t_{pd,COMB} + 0.3, t_{pd,COMB} \\leq 2.7 ns\\)</li> <li>Master-slave: \\(4.0 \\geq 1.0 + t_{pd,COMB} + 2.0, t_{pd,COMB} \\leq 1.0 ns\\)</li> </ul> </li> </ul>"},{"location":"Logic/logic04/#sequential-circuit-design","title":"Sequential Circuit Design","text":"<p>The Design procedure  </p> <ul> <li>Specification \u9700\u6c42\u548c\u529f\u80fd\u7684\u63cf\u8ff0\uff0c\u4e00\u822c\u4ee5\u6587\u5b57\u5f62\u5f0f  </li> <li>Formulation - Obtain a state diagram or state table</li> <li>State Assignment - Assign binary codes to the states</li> <li>Flip-Flop Input Equation Determination - Select flip-flop types and derive flip-flop equations from next state entries in the table</li> <li>Output Equation Determination - Derive output equations from output entries in the table</li> <li>Optimization - Optimize the equations</li> <li>Technology Mapping - Find circuit from equations and map to flip-flops and gate technology</li> <li>Verification - Verify correctness of final design</li> </ul>"},{"location":"Logic/logic04/#formulation","title":"Formulation","text":"<p>A state is an abstraction of the history of the past applied inputs to the circuit (including  power-up reset or system reset).   </p> <p>\u5c06\u6587\u672c\u5316\u7684\u9700\u6c42\u53d8\u4e3a\u7528\u72b6\u6001\u673a\u63cf\u8ff0\uff08\u6574\u4e2a\u7535\u8def\u7ecf\u8fc7\u54ea\u4e9b\u72b6\u6001\uff1f\u6bcf\u4e2a\u72b6\u6001\u4e4b\u95f4\u7531\u54ea\u4e2a\u8f93\u5165\u8fdb\u884c\u9a71\u52a8\uff1f\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\uff09</p> <p>\u8fd9\u91cc\u6211\u4eec\u4ee5 Sequence Recognizers \u4e3a\u4f8b\uff0c\u4ecb\u7ecd Formulation \u7684\u8fc7\u7a0b\u3002</p> Sequence Recognizers <p>A sequence recognizer is a sequential circuit that produces a distinct output value whenever a prescribed pattern of input symbols occur in sequence, i.e, recognizes an input sequence occurence.  To develop a sequence recognizer state diagram:</p> <ul> <li>Begin in an initial state in which NONE of the initial portion of the sequence has occurred (typically \u201creset\u201d state).</li> <li>Add a state that recognizes that the first symbol has occurred.</li> <li>Add states that recognize each successive symbol occurring.</li> <li>The final state represents the input sequence (possibly  less the final input value) occurence.</li> <li>Add state transition arcs which specify what happens when a symbol not in the proper sequence has occurred.</li> <li>Add other arcs on non-sequence inputs which transition to states that represent the input subsequence that has occurred.  </li> </ul> Example <p>\u8fd9\u91cc\u6211\u4eec\u4ee5\u8bc6\u522b 1101 \u4e3a\u4f8b.(Mealy \u6a21\u578b)   after 110 and a 1, we have: </p> <p>\u6ce8\u610f\u5728 D \u72b6\u6001\u4e4b\u540e\uff0c\u5e94\u8be5\u4e0e B \u72b6\u6001\u76f8\u8fde(\u56e0\u4e3a 1101101)\u4e2d\u7684\u7b2c\u4e09\u4e2a 1 \u65e2\u53ef\u4ee5\u662f\u524d\u4e00\u4e2a\u5e8f\u5217\u7684\u672b\u5c3e 1, \u4e5f\u53ef\u4ee5\u662f\u4e0b\u4e00\u4e2a\u5e8f\u5217\u7684\u8d77\u59cb 1.  \u6211\u4eec\u8865\u8db3\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb: </p> <p>\u901a\u8fc7\u72b6\u6001\u56fe\u5f97\u5230\u72b6\u6001\u8868:   </p> <p>\u5982\u679c\u5c06\u521a\u521a\u7684\u72b6\u6001\u56fe \u8f6c\u4e3aMoore \u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u518d\u52a0\u4e00\u4e2a\u72b6\u6001 E, \u5f53\u5230\u8fbe E \u72b6\u6001\u65f6\u8868\u660e\u6211\u4eec\u5f97\u5230\u4e86\u5e8f\u5217 1101.  </p> <p>\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0, B \u548c E \u5bf9\u540c\u6837\u7684\u8f93\u5165\uff0c\u6b21\u6001\u90fd\u662f\u4e00\u6837\u7684\u3002\u4f46\u662f\u5e76\u4e0d\u662f\u7b49\u6548\u72b6\u6001\uff0c\u56e0\u4e3a\u4e8c\u8005\u7684\u8f93\u51fa\u4e0d\u540c\u3002 </p> <p>The Moore model for a sequence recognizer usually has more states than the Mealy model.</p>"},{"location":"Logic/logic04/#simplification-for-state-tables","title":"Simplification for State Tables","text":"<p>\u6240\u8c13\u72b6\u6001\u7b80\u5316\uff0c\u5c31\u662f\u8981\u83b7\u5f97\u4e00\u4e2a\u6700\u5c0f\u5316\u7684\u72b6\u6001\u8868\u3002\u8fd9\u4e2a\u8868\u4e0d\u4ec5\u80fd\u6b63\u786e\u5730\u53cd\u6620\u8bbe\u8ba1\u7684\u5168\u90e8\u8981\u6c42\uff0c\u800c\u4e14\u72b6\u6001\u7684\u6570\u76ee\u6700\u5c11\u3002</p> <p>\u201c\u72b6\u6001\u7b49\u6548\u201d \u7684\u4e09\u79cd\u60c5\u51b5\uff1a\uff08\u5728\u6240\u6709\u8f93\u5165\u60c5\u51b5\u4e0b\uff09</p> <ul> <li>\u9996\u5148\uff0c\u8f93\u51fa\u76f8\u540c</li> <li> <p>\u540c\u65f6\uff0c\u6b21\u6001\u76f8\u540c/\u6b21\u6001\u4ea4\u9519/\u6b21\u6001\u5faa\u73af</p> <p>\u7b49\u6548</p> <ul> <li> <p>\u6b21\u6001\u76f8\u540c </p> </li> <li> <p>\u6b21\u6001\u76f8\u540c\u6216\u4ea4\u9519  </p> </li> <li> <p>\u6b21\u6001\u4ea4\u9519\u6216\u7b49\u6548 </p> </li> <li> <p>\u6b21\u6001\u4ea4\u9519\u6216\u76f8\u540c\u6216\u5faa\u73af  </p> </li> </ul> </li> </ul> <p>\u72b6\u6001\u7b80\u5316\u65b9\u6cd5\uff1a  </p> <ul> <li> <p>\u89c2\u5bdf\u6cd5 </p> <p>Example</p> <p> </p> <ul> <li>\\(A\\)\u548c\\(B\\)\uff0c\\(C\\)\u548c\\(D\\)\u7684\u8f93\u51fa\u5b8c\u5168\u76f8\u7b49\uff1b</li> <li>\\(C\\)\u548c\\(D\\)\u5728\u8f93\u5165\u7684\u5404\u79cd\u53d6\u503c\u7ec4\u5408\u4e0b\uff0c\u6b21\u6001\u76f8\u540c\uff0c\u56e0\u6b64\\(C\\)\u548c\\(D\\)\u7b49\u6548\uff1b</li> <li>\\(A\\)\u548c\\(B\\)\u5728\\(X=1\\)\u65f6\u7684\u6b21\u6001\u4e0d\u6ee1\u8db3\u56db\u6761\u4ef6\u4e4b\u4e00\uff0c\u56e0\u6b64\\(A\\)\u548c\\(B\\)\u4e0d\u7b49\u6548;</li> <li>\u6700\u5927\u7b49\u6548\u7c7b\u4e3a \\(\\{A\\}\uff0c\\{B\\}\uff0c\\{C,D\\}\\),\u5206\u522b\u7528 \\(A', B', C'\\) \u8868\u793a\uff1b </li> </ul> </li> <li> <p>\u9690\u542b\u8868\u6cd5\u5316\u7b80 </p> <ul> <li>\u4f5c\u9690\u542b\u8868</li> <li>\u987a\u5e8f\u6bd4\u8f83\uff0c\u5bfb\u7b49\u6548\u72b6\u6001\u5bf9<ul> <li>\u72b6\u6001\u5bf9\u7b49\u6548\uff0c\u6253\u201c\u221a\u201d\uff1b</li> <li>\u72b6\u6001\u5bf9\u4e0d\u7b49\u6548\uff0c\u6253\u201c\u00d7\u201d\uff1b</li> <li>\u72b6\u6001\u5bf9\u662f\u5426\u7b49\u6548\u9700\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5219\u6807\u8bb0\u6b21\u6001\u5bf9\u3002</li> </ul> </li> <li>\u8fdb\u884c\u5173\u8fde\u6bd4\u8f83\uff0c\u786e\u5b9a\u7b49\u6548\u72b6\u6001\u5bf9</li> <li>\u786e\u5b9a\u6700\u5927\u7b49\u6548\u7c7b\uff0c\u4f5c\u6700\u5c0f\u5316\u72b6\u6001\u8868</li> </ul> <p>Example</p> <p> </p> <p> </p> <p>\u7531\u4e8e\\(CD\\)\u3001\\(DE\\)\u4e0d\u7b49\u6548\uff0c\u6240\u4ee5\\(DG\\)\u4e0d\u7b49\u6548\uff0c\u753b\u659c\u7ebf\u6807\u5fd7\u3002\u6700\u540e\u6211\u4eec\u6709 \\(AB\\rightarrow CF\\) \\(AE\u2192BE\u2192CF\\). \u5904\u4e8e\u5faa\u73af\u94fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u72b6\u6001\u5bf9\u90fd\u662f\u7b49\u6548\u72b6\u6001\u5bf9\u3002 \u6700\u540e\u6211\u4eec\u6709  </p> <ul> <li>\u56db\u4e2a\u7b49\u6548\u5bf9 \\((A,B), (A,E), (B,E), (C,F)\\)</li> <li>\u6700\u5927\u7b49\u6548\u7c7b \\((A,B,E)\\)</li> <li>\u56db\u4e2a\u72b6\u6001 \\((A,B,E), (C,F), (D), (G)\\)</li> <li>\u4ee4\u4ee5\u4e0a\u56db\u4e2a\u72b6\u6001\u4f9d\u6b21\u4e3a \\(a, b, c, d\\)</li> </ul> </li> </ul>"},{"location":"Logic/logic04/#state-assignment","title":"State Assignment","text":"<p>Each of the \\(m\\) states must be assigned a unique code Minimum number of bits required is \\(n\\) such that \\(n\\geq \\lceil \\log_2 m\\rceil\\) </p> <p>There are \\(2^n - m\\) unused states. (\u4e0d\u80fd\u7701\u7565\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f02\u5e38\u9677\u5165 unused states)</p> Different State Assignment <p> </p> <ul> <li> <p>Counting Order Assignment: \\(A = 0 0, B = 0 1, C = 1 0, D = 1 1\\) </p> </li> <li> <p>Gray Code Assignment: \\(A = 0 0, B = 0 1, C = 1 1, D = 1 0\\) </p> </li> </ul> <p>\u72b6\u6001\u5206\u914d\u7684\u65b9\u6848\u4e0d\u4e00\u6837\uff0c\u6240\u5f97\u5230\u7684\u8f93\u51fa\u51fd\u6570\u548c\u6fc0\u52b1\u51fd\u6570\u7684\u8868\u8fbe\u5f0f\u4e5f\u4e0d\u540c\uff0c\u7531\u6b64\u800c\u8bbe\u8ba1\u51fa\u6765\u7684\u7535\u8def\u590d\u6742\u5ea6\u4e5f\u4e0d\u540c\u3002\u72b6\u6001\u5206\u914d\u7684\u4efb\u52a1\u662f\uff1a</p> <ul> <li>\u51b3\u5b9a\u7f16\u7801\u7684\u957f\u5ea6</li> <li>\u5bfb\u627e\u4e00\u79cd\u6700\u4f73\uff08\u5f88\u96be\u627e\u5230\uff09\u7684\u6216\u63a5\u8fd1\u6700\u4f73\u7684\u72b6\u6001\u5206\u914d\u65b9\u6848</li> </ul> <p>\u5206\u914d\u7684\u57fa\u672c\u539f\u5219: </p> <ul> <li>\u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f91 0  </li> <li>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6761\u539f\u5219\u8f83\u4e3a\u91cd\u8981\uff0c\u9700\u4f18\u5148\u8003\u8651\uff0c\u5176\u6b21\u8981\u8003\u8651\u7531\u524d\u4e09\u6761\u539f\u5219\u5f97\u5230\u7684\u5e94\u5206\u914d\u76f8\u90bb\u4ee3\u7801\u7684\u72b6\u6001\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b21\u6570\u591a\u7684\u72b6\u6001\u5bf9\u5e94\u4f18\u5148\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002</li> </ul> <p>Example</p> <p> </p> <ul> <li>\u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1aA\u548cB\uff0cA\u548cC\u5e94\u76f8\u90bb</li> <li>\u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1aC\u548cD\uff0cC\u548cA\uff0cB\u548cD\uff0cA\u548cB\u5e94\u76f8\u90bb\uff1b</li> <li>\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1a A\uff0cB\uff0cC \u4e09\u8005\u5e94\u76f8\u90bb\uff0c\u5373A\u548cB\uff0cA\u548cC\uff0cB\u548cC\u5e94\u76f8\u90bb\uff1b</li> <li>\u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f910\uff1aA\u5206\u914d\u4e3a\u903b\u8f910</li> </ul> <p>\u6700\u540e\u5f97\u5230:   </p>"},{"location":"Logic/logic04/#technology-mapping","title":"Technology Mapping","text":"<p>Library: D flip-flops with Reset(not inverted), NAND gates with up to 4 inputs and inverters. </p> <p>\u65b9\u6cd5\u540c\u4e4b\u524d\uff0c\u5148\u5c06\u4e0e\u95e8\u6216\u95e8\u7b49\u95e8\u8f6c\u5316\u4e3a NAND, \u968f\u540e\u5c06 inverter \u63a8\u51fa\u6563\u51fa\u70b9\u3002</p>"},{"location":"Logic/logic04/#other-flip-flop-types","title":"Other Flip-Flop Types","text":""},{"location":"Logic/logic04/#j-k-flip-flop","title":"J-K Flip-flop","text":"<ul> <li>Behavior<ul> <li>\u7c7b\u4f3c SR \u89e6\u53d1\u5668, \\(J\\) \u76f8\u5f53\u4e8e \\(S\\), \\(K\\) \u76f8\u5f53\u4e8e \\(R\\).  </li> <li>\u4f46 \\(J=K=1\\) \u65f6\uff0c\u89e6\u53d1\u5668\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u6c42\u53cd\u7684\u529f\u80fd</li> <li>\u4e5f\u6709\u4e00\u6b21\u6027\u91c7\u6837\u7684\u95ee\u9898</li> </ul> </li> <li> <p>Implementation</p> <p> </p> </li> <li> <p>Symbol</p> <p>  \uff08\u4e09\u89d2\u8868\u660e\u662f\u4e0a\u5347\u6cbf\u89e6\u53d1\uff0c\u82e5\u4e3a\u5706\u5708\u5219\u662f\u4e0b\u964d\u6cbf\u89e6\u53d1\uff09 </p> </li> </ul>"},{"location":"Logic/logic04/#t-flip-flop","title":"T Flip-flop","text":"<ul> <li>Behavior<ul> <li>\u7c7b\u4f3c JK \u89e6\u53d1\u5668, \u76f8\u5f53\u4e8e \\(J=K=T\\). \u5f53 \\(T = 0\\), \u72b6\u6001\u4e0d\u53d8; \u5f53 \\(T = 1\\), \u72b6\u6001\u6c42\u53cd</li> <li>\u5b58\u5728\u4e00\u6b21\u6027\u91c7\u6837\u7684\u95ee\u9898</li> <li>\u65e0\u6cd5\u9884\u7f6e\u72b6\u6001\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a Reset \u4fe1\u53f7</li> </ul> </li> <li> <p>Implementation</p> <p> </p> </li> <li> <p>Symbol</p> <p> </p> </li> </ul>"},{"location":"Logic/logic04/#basic-flip-flop-descriptors","title":"Basic Flip-Flop Descriptors","text":"<ul> <li>Used in analysis     \u5df2\u77e5\u89e6\u53d1\u5668\u7684\u8f93\u5165\u548c\u73b0\u6001\uff0c\u9884\u6d4b\u89e6\u53d1\u5668\u7684\u8f93\u51fa\u548c\u6b21\u6001  <ul> <li>Characteristic table - defines the next state of the flip-flop in terms of flip-flop inputs and current state </li> <li>Characteristic equation - defines the next state of the flip-flop as a Boolean function of the flip-flop inputs and the current state</li> </ul> </li> <li>Used in design     \u5df2\u77e5\u73b0\u6001\u548c\u6b21\u6001\uff0c\u9884\u6d4b\u6211\u4eec\u8981\u63d0\u4f9b\u600e\u6837\u7684\u8f93\u5165  <ul> <li>Excitation table(\u6fc0\u52b1\u8868) - defines the flip-flop input variable values as function of the current state and next state  </li> </ul> </li> </ul> D Flip-Flop Descriptors T Flip-Flop Descriptors S-R Flip-Flop Descriptors  (\u6ce8\u610f\u8fd9\u91cc\u6709\u4e2a\u6761\u4ef6 S R \u4e0d\u80fd\u540c\u65f6\u4e3a 1.)  J-K Flip-Flop Descriptors"},{"location":"Logic/logic05/","title":"Digital Hardware Implementation","text":"<p>Abstract</p> <ol> <li>\u53ef\u7f16\u7a0b\u6280\u672f Programmable TechnologyROM\u3001PAL\u3001PLA\uff0c\u4f7f\u7528ROM\u3001PAL\u548cPLA\u6765\u5b9e\u73b0\u903b\u8f91\u7535\u8def  </li> <li>ROMReadOnly Memory \u7ed3\u6784\u3001\u7f16\u7a0b\u65b9\u6cd5\u3001\u4f5c\u4e3a\u5b58\u50a8\u5668\u7684\u4f7f\u7528  </li> <li>PALProgrammable Array Logic \u7ed3\u6784\u3001\u7f16\u7a0b\u65b9\u6cd5\u3001\u4f7f\u7528\u65f6\u7684\u4e3b\u8981\u7ea6\u675f\u3001\u8f93\u51fa\u53cd\u9988\u7684\u4f5c\u7528\u3001\u591a\u51fd\u6570\u5b9e\u73b0\u3001\u7f16\u7a0b\u8868  </li> <li>PLAProgrammable Logic Array \u7ed3\u6784\u3001\u7f16\u7a0b\u65b9\u6cd5\u3001\u4f7f\u7528\u65f6\u7684\u4e3b\u8981\u7ea6\u675f\u3001\u8f93\u51fa\u53cd\u5411\u7684\u4f5c\u7528\u3001\u591a\u51fd\u6570\u5b9e\u73b0\u3001\u7f16\u7a0b\u8868</li> </ol>"},{"location":"Logic/logic05/#why-programmable-logic","title":"Why Programmable Logic?","text":"<ul> <li>Facts:<ul> <li>It is most economical to produce an IC in large volumes</li> <li>Many designs required only small volumes of ICs</li> </ul> </li> <li>Need an IC that can be:<ul> <li>Produced in large volumes</li> <li>Handle many designs required in small volumes</li> </ul> </li> <li>A programmable logic part can be:<ul> <li>made in large volumes</li> <li>programmed to implement large numbers of different low-volume designs</li> </ul> </li> <li> <p>Many programmable logic devices are field-programmable, i. e., can be programmed outside of the manufacturing environment</p> </li> <li> <p>Most programmable logic devices are erasable and reprogrammable.</p> <ul> <li>Allows \u201cupdating\u201d a device or correction of errors</li> <li>Allows reuse the device for a different design - the ultimate in re-usability!</li> <li>Ideal for course laboratories</li> </ul> </li> <li>Programmable logic devices can be used to prototype design that will be implemented for sale in regular ICs.<ul> <li>Complete Intel Pentium designs were actually prototyped with specialized systems based on large numbers of VLSI programmable devices! </li> </ul> </li> </ul>"},{"location":"Logic/logic05/#programming-technologies","title":"Programming Technologies","text":""},{"location":"Logic/logic05/#classifications","title":"Classifications","text":"<p>Programming Technologies are used to  </p> <ul> <li>Control connections  \u628a\u4e24\u4e2a\u811a\u8fde\u63a5\u8d77\u6765\uff0c\u5e38\u89c1\u7684\u8fde\u63a5\u65b9\u6cd5\u6709\uff1a<ul> <li>Mask programming \u4e00\u6b21\u6027\u7f16\u7a0b\uff0c\u5de5\u5382\u91cc\u82af\u7247\u5236\u9020\u65f6\u4f7f\u7528\uff0c\u5382\u5bb6\u5728\u751f\u4ea7\u65f6\u7f16\u7a0b\u5230\u82af\u7247\u5185   </li> <li>Fuse(\u7194\u4e1d) \u5728\u82af\u7247\u8bbe\u8ba1\u65f6\uff0c\u5728\u5f88\u591a\u82af\u7247\u5f15\u811a\u8fde\u63a5\u4e4b\u95f4\u6709 fuse, \u8bbe\u8ba1\u7535\u8def\u65f6\u4e0d\u9700\u8981\u4fdd\u7559\u8fde\u63a5\u7684\u7528\u9ad8\u7535\u538b\u4ea7\u751f\u9ad8\u7535\u6d41\uff0c\u7194\u65ad fuse.  </li> <li>Antifuse  \u6700\u5f00\u59cb\u65ad\u5f00\uff0c\u51fb\u7a7f\u540e\u7535\u8def\u8fde\u63a5\u597d  </li> <li>Single-bit storage element  \u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8fd9\u4e2a\u4f4d\u7684\u8f93\u51fa\u63a7\u5236\u4e00\u4e2a\u6676\u4f53\u7ba1\uff0c\u8fdb\u800c\u63a7\u5236\u4e24\u4e2a\u5f15\u811a\u8fde\u63a5/\u65ad\u5f00  </li> </ul> </li> <li>Build lookup tables(LUT)  \u5982 16 \u4f4d\u5bc4\u5b58\u5668\uff08\u5b58\u771f\u503c\u8868\u7684\u503c\uff09 +16-1 Mux \u53ef\u6784\u6210\u56db\u8f93\u5165\u4e4b\u5185\u7684\u903b\u8f91\u6a21\u5757\uff0c\u53ea\u9700\u8981\u5c06 16\u4f4d\u5bc4\u5b58\u5668\u586b\u4e0a\u4e0d\u540c\u7684\u503c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u903b\u8f91\u51fd\u6570</li> <li>Control transistor switching  \u7528\u6676\u4f53\u7ba1\u63a7\u5236\u5f00\u5173\uff0c\u7c7b\u4f3c\u8fde\u63a5\u63a7\u5236  \u6d6e\u52a8\u6805\u6781  <ul> <li>Stored charge on a floating transistor gate<ul> <li>Erasable </li> <li>Electrically erasable</li> <li>Flash (as in Flash Memory)</li> </ul> </li> <li>Storage elements  </li> </ul> </li> </ul>"},{"location":"Logic/logic05/#characteristics","title":"Characteristics","text":"<ul> <li>Permanent - Cannot be erased and reprogrammed<ul> <li>Mask programming</li> <li>Fuse</li> <li>Antifuse</li> </ul> </li> <li>Reprogrammable<ul> <li>Volatile(\u6613\u5931\u7684) - Programming lost if chip power lost <ul> <li>Single-bit storage element</li> </ul> </li> <li>Non-Volatile<ul> <li>Erasable </li> <li>Electrically erasable</li> <li>Flash (as in Flash Memory)</li> </ul> </li> </ul> </li> </ul>"},{"location":"Logic/logic05/#configurations","title":"Configurations","text":"<ul> <li>Read Only Memory (ROM) - a fixed array of AND gates and a programmable array of OR gates</li> <li>Programmable Array Logic (PAL) - a programmable array of AND gates feeding a fixed array of OR gates.</li> <li>Programmable Logic Array (PLA) - a programmable array of AND gates feeding a programmable array of OR gates.</li> <li>Complex Programmable Logic Device (CPLD) /Field- Programmable Gate Array (FPGA) - complex enough to be called \u201carchitectures\u201d - See VLSI Programmable Logic Devices reading supplement </li> </ul> <p>\u57fa\u672c\u601d\u60f3\u7c7b\u4f3c\uff1a\u4e00\u4e2a AND \u9635\u5217\u52a0\u4e0a\u4e00\u4e2a\u4e00\u4e2a OR \u9635\u5217\uff0c\u533a\u522b\u5728\u4e8e\u54ea\u4e2a\u9635\u5217\u662f\u53ef\u7f16\u7a0b\u7684\u3002  </p> <ul> <li>ROM: OR</li> <li>PAL: AND</li> <li>PLA: OR+AND</li> </ul>"},{"location":"Logic/logic05/#read-only-memory","title":"Read Only Memory","text":"<p>Read Only Memories (ROM) or Programmable Read Only Memories (PROM) have: * N input lines,  * M output lines, and  * \\(2^N\\) decoded minterms.  </p> <ul> <li>Fixed AND array with \\(2^N\\) outputs implementing all N-literal minterms.  </li> <li> <p>Programmable OR Array with \\(M\\) outputs lines to form up to M sum of minterm expressions. \u6709 M \u4e2a\u6216\u95e8\uff0c\u56e0\u6b64\u6700\u591a\u53ef\u4ee5\u5b9e\u73b0 M \u4e2a\u903b\u8f91\u51fd\u6570\uff08\u6bcf\u4e2a\u51fd\u6570\u6700\u591a N \u4e2a\u8f93\u5165\uff09  </p> </li> <li> <p>A program for a ROM or PROM is simply a multiple-output truth table</p> <ul> <li>If a 1 entry, a connection is made to the corresponding minterm for the corresponding output</li> <li>If a 0, no connection is made</li> </ul> <p>\u4e8c\u7ef4\u9635\u5217\uff1aAND \u9635\u5217\u4ea7\u751f \\(2^n\\) minterms, OR \u9635\u5217\u6709 M \u4e2a\u8f93\u51fa\uff0c\u6bcf\u4e2a\u8f93\u51fa\u5bf9\u5e94\u6700\u591a \\(2^n\\) minterms.   </p> </li> <li> <p>Can be viewed as a memory with the inputs as addresses of data (output values), hence ROM or PROM names!</p> </li> </ul> <p>A 8 X 4 ROM(N = 3 input lines,  M= 4 output lines)</p> <p> </p> <p>\u4e00\u4e2a\u6216\u95e8\u7684\u7ebf\u8868\u793a\u4e00\u6839\u603b\u7ebf\uff0c\u4e00\u4e2a \"X\" \u8868\u793a\u4e0e\u95e8\u9635\u5217\u548c\u6216\u95e8\u9635\u5217\u8fde\u63a5\u3002 \u5b9e\u73b0\u903b\u8f91\u51fd\u6570\u5c31\u662f\u5c06\u8bd1\u7801\u5668\u7684\u6700\u5c0f\u9879\u4e0e\u6216\u95e8\u8fde\u63a5</p> <p>\u4e5f\u53ef\u4ee5\u5c06\u8f93\u5165\u770b\u4f5c addr, \u8f93\u51fa\u770b\u4f5c data.  </p>"},{"location":"Logic/logic05/#programmable-array-logic-pal","title":"Programmable Array Logic (PAL)","text":"<p>The PAL is the opposite of the ROM, having a programmable set of ANDs combined with fixed ORs.</p> <ul> <li>Disadvantage  ROM guaranteed to implement any M functions of N inputs.  PAL may have too few inputs to the OR gates. </li> <li>Advantages  <ul> <li>For given internal complexity, a PAL can have larger N and M</li> <li>Some PALs have outputs that can be complemented, adding POS functions</li> <li>No multilevel circuit implementations in ROM (without external connections from output to input).  PAL has outputs from OR terms as internal inputs to all AND terms, making implementation of multi-level circuits easier.</li> </ul> </li> </ul> <p>Example</p> <p> </p> <p>\u4e0a\u65b9 0~9 \u6bcf\u6839\u7ebf\uff0c\u6bcf\u6839\u5206\u522b\u4ee3\u8868\u4e00\u4e2a\u8f93\u5165\u6216\u8005\u8f93\u5165\u7684\u53cd\u53d8\u91cf(\"*\")  \u8fd9\u91cc F1 \u8fd8\u6709\u8fde\u5230 8, 9 \u7ebf\uff0c\u7528\u6765\u5b9e\u73b0\u7ea7\u8054\u3002 \\(F1=\\overline A\\overline B+\\overline C\\) \\(F2=\\overline AB\\overline C+AC+A\\overline B\\) \\(F3=AD+BD+\\overline A\\overline B+\\overline C\\) \\(F4=AB+CD+AC+BC(\\overline{F1})\\)</p>"},{"location":"Logic/logic05/#programmable-logic-array-pla","title":"Programmable Logic Array (PLA)","text":"<p>Compared to a ROM and a PAL, a PLA is the most flexible having a programmable set of ANDs combined with a programmable set of  ORs.</p> <ul> <li>Advantages<ul> <li>A PLA can have large N and M permitting implementation of  equations that are impractical for a ROM (because of the number of inputs, N, required)</li> <li>A PLA has all of  its product terms connectable to all outputs, overcoming the problem of  the limited inputs to the PAL Ors</li> <li>Some PLAs have outputs that can be complemented, adding POS functions</li> </ul> </li> <li>Disadvantages<ul> <li>Often, the product term count limits the application of a PLA.</li> <li>Two-level multiple-output optimization is required to reduce  the number of product terms in an implementation, helping to fit it into a PLA.</li> <li>Multi-level circuit capability available in PAL not available in PLA.  PLA requires external connections to do multi-level circuits.</li> </ul> </li> </ul> <p>Example</p> <p> </p> <p>\\(F1 = AB +BC + AC\\) \\(F2 = (AB + A\u2019B\u2019)\u2019 =  (A\u2019 + B\u2019) (A + B) = A\u2019B + AB\u2019\\) \u8fd9\u91cc F2 \u6211\u4eec\u6c42\u7684\u662f\u53cd\u53d8\u91cf\uff0c\u56e0\u6b64\u5728\u6700\u540e\u8981\u6c42\u53cd\uff0c\u8fd9\u6837\u505a\u53ef\u4ee5\u8282\u7701\u91cd\u590d\u5229\u7528\u4e4b\u524d\u7684 AND \u9879\u3002</p> <p>\u5408\u7406\u5229\u7528 AND \u9879\u8d44\u6e90\uff0c\u5c3d\u53ef\u80fd\u590d\u7528\uff0c\u53ef\u4ee5\u6c42\u53cd\u53d8\u91cf\u3002</p>"},{"location":"Logic/logic06/","title":"Register and Register Transfers","text":"Abstract <ol> <li> <p>\u5bc4\u5b58\u5668\u7684\u6982\u5ff5\u3001\u8bbe\u8ba1\u6a21\u578b\u548c\u7ed3\u6784 Register, Register Design Models  </p> <ul> <li>\u95e8\u63a7\u65f6\u949f\u3001\u5e76\u884c\u52a0\u8f7d\u63a7\u5236 Registers with Clock Gating, Registers with Load-Controlled Feedback  </li> </ul> </li> <li> <p>\u5bc4\u5b58\u5668\u4f20\u8f93\u64cd\u4f5c\u57fa\u672c\u6982\u5ff5 Register transfer operations  </p> <ul> <li>\u5bc4\u5b58\u5668\u4f20\u8f93\u8bed\u8a00\u3001\u57fa\u672c\u5fae\u64cd\u4f5c\u3001\u6761\u4ef6\u4f20\u8f93\u539f\u7406\u3001\u591a\u5bc4\u5b58\u5668\u4f20\u8f93\u7684\u4e09\u79cd\u57fa\u672c\u7ed3\u6784\u3001\u539f\u7406\u548c\u4f18\u7f3a\u70b9 Register Transfer Language (RTL), Microoperations, conditional transfer, three types of Register Transfer Structures: Multiplexer-Based Transfers, Bus-Based Transfers, Three-State Bus  </li> <li>RTL\u4e0e\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\u7684\u5173\u7cfb Relationship of RTL and Verilog, implementation of conditional operations</li> </ul> </li> <li> <p>\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u6982\u5ff5\u3001\u7ed3\u6784 Shift Registers  </p> <ul> <li>\u4e32\u884c\u8f93\u5165\u3001\u5de6\u79fb\u3001\u53f3\u79fb\u3001\u5e76\u884c\u52a0\u8f7d serial input, shift left, shift right, parallel load  </li> </ul> </li> <li> <p>\u8ba1\u6570\u5668\u7684\u529f\u80fd\u3001\u7c7b\u578b Function and type of counters  </p> <ul> <li>\u7eb9\u6ce2\u8ba1\u6570\u5668\u7684\u7ed3\u6784\u3001\u5de5\u4f5c\u539f\u7406\u3001\u4f18\u7f3a\u70b9 Structure, theory, characteristic of ripple counter  </li> <li>\u540c\u6b65\u8ba1\u6570\u5668\u7684\u7ed3\u6784\u3001\u5de5\u4f5c\u539f\u7406\u3001\u4f18\u7f3a\u70b9 Structure, theory, characteristic of synchronous counter  </li> <li>\u8fdb\u4f4d\u94fe\u3001\u5e76\u884c\u8fdb\u4f4d\u3001\u5e76\u884c\u52a0\u8f7d carry chain, parallel carry, parallel load</li> </ul> </li> <li> <p>\u91c7\u7528\u540c\u6b65\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1\u65b9\u6cd5\u8bbe\u8ba1\u6a21n\u8ba1\u6570\u5668 Use the sequential logic model to designmodulo n counters  </p> </li> <li>\u91c7\u7528\u8f93\u51fa\u7ed3\u679c\u53cd\u9988\u7684\u65b9\u6cd5\u8bbe\u8ba1\u6a21n\u8ba1\u6570\u5668 Use output feedback model to design modulo n counters  </li> <li> <p>\u5bc4\u5b58\u5668\u8bbe\u8ba1 RegisterDesign   </p> <ul> <li>\u57fa\u4e8e\u5bc4\u5b58\u5668\u5355\u5143\u7684\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u91c7\u7528\u591a\u8def\u590d\u7528\u5668\u8bbe\u8ba1 RegisterCellDesign,Multiplexer Approach  </li> <li>\u57fa\u4e8e\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1\u65b9\u6cd5\u7684\u5bc4\u5b58\u5668\u8bbe\u8ba1 Sequential Circuit Design Approach</li> </ul> </li> <li> <p>\u4e32\u884c\u4f20\u8f93\u548c\u5fae\u64cd\u4f5c Serial Transfers and Microoperations</p> </li> </ol>"},{"location":"Logic/logic06/#registers","title":"Registers","text":"<p>Register \u2013 a collection of binary storage elements </p> <p>In theory, a register is a sequential logic which can be defined by a state table. More often, think of a register as storing a vector of binary values.  </p> <p>Example</p> <p> </p> <p>\u5982\u679c\u6709 \\(n\\) \u4f4d\u5bc4\u5b58\u5668\uff0c\u9700\u8981 \\(2^n\\) \u72b6\u6001. \\(n\\) \u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u5bfc\u81f4\u9700\u8981\u7684\u72b6\u6001\uff0c\u53ef\u80fd\u7684\u8f93\u5165\u7ec4\u5408\u3001\u8f93\u51fa\u51fd\u6570\u4f1a\u5f88\u5927\u3002</p> <p>Due to the large numbers of states and input combinations as n becomes large, the state diagram/state table model is not feasible!</p> <ul> <li>Add predefined combinational circuits to registers(e.g. To count up, connect the register flip-flops to an incrementer)</li> <li>Design individual cells using the state diagram/state table model and combine them into a register  \u628a\u5bc4\u5b58\u5668\u62c6\u6210\u5355\u4f4d\u7684\u6765\u8bbe\u8ba1\uff0c\u518d\u8003\u8651\u591a\u4f4d\u7684\u62fc\u63a5\uff0c\u6700\u540e\u7ec4\u6210\u591a\u4f4d\u5bc4\u5b58\u5668\u3002</li> </ul>"},{"location":"Logic/logic06/#register-storage-and-load-enable","title":"Register Storage and Load Enable","text":"<p>Expectations:  </p> <ul> <li>A register can store information for multiple clock cycles</li> <li>To \u201cstore\u201d or \u201cload\u201d information should be controlled by a signal</li> </ul> <p>\u4f46\u5728\u521a\u521a\u7684\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e2a\u5468\u671f\u90fd\u4f1a\u4fdd\u5b58\u65b0\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u505a\u5230\u5728\u591a\u4e2a\u5468\u671f\u4fdd\u7559\u6570\u636e\uff0c\u56e0\u6b64\u662f\u4e0d\u884c\u7684\u3002</p> <p>Realizing expectations:</p> <ul> <li>Use a signal to block the clock to the register</li> <li>Use a signal to control feedback of the output of the register back to its inputs</li> <li>Use other SR or JK flip-flops, that for (0,0) applied, store their state</li> </ul> <p>Load is a frequent name for  the signal that controls   register storage and loading</p> <ul> <li><code>Load = 1</code>: Load the values on the data inputs(\u52a0\u8f7d\u5916\u90e8\u65b0\u6570\u636e) </li> <li><code>Load = 0</code>: Store the values in the register(\u4fdd\u6301\u539f\u6709\u7684\u6570\u636e)</li> </ul> <p>Solution </p> <ul> <li> <p>Registers with Clock Gating     The \\(\\overline{Load}\\)(bar \u8868\u793a\u4f4e\u7535\u5e73\u6709\u6548) signal enables the clock signal to pass through if 0 and prevents the clock signal from passing through if 1. (\u4e0e \\(Load\\) \u76f8\u53cd)</p> <p>Example</p> <p>For Positive Edge-Triggered  or Negative Pulse Master-Slave Flip-flop: </p> <p>\\(Gated\\ Clock = Clock + \\overline{Load}\\) \u5f53 \\(\\overline{Load}\\) \u4fe1\u53f7\u4e3a 1 \u65f6\uff0c\u65f6\u949f\u4fe1\u53f7\u4e0d\u518d\u968f\u7740\u5916\u90e8\u65f6\u949f\u6539\u53d8\uff0c\u8fd9\u65f6\u5c31\u662f\u4fdd\u6301\u539f\u6709\u7684\u6570\u636e\u3002</p> <p>Clock Skew  \u95ee\u9898\u5728\u4e8e\u6211\u4eec\u662f\u540c\u6b65\u65f6\u5e8f\u7535\u8def\u5b9e\u73b0\uff0c\u8981\u6c42\u65f6\u949f\u7edf\u4e00\u63d0\u4f9b\uff0c\u8fd9\u6837\u6240\u6709\u7684\u89e6\u53d1\u5668\u4f1a\u5728\u540c\u4e00\u65f6\u95f4\u5b8c\u6210\u64cd\u4f5c\u3002\u4f7f\u7528\u95e8\u63a7\u65f6\u949f\u7684\u65b9\u5f0f\u4f1a\u5e26\u6765\u66f4\u591a\u7684\u89e6\u53d1\u65f6\u95f4\uff0c\u65f6\u5e8f\u7535\u8def\u4ece\u540c\u6b65\u53d8\u4e3a\u4e86\u5f02\u6b65\u7684\u65f6\u5e8f\u7535\u8def\uff08\u89e6\u53d1\u6709\u524d\u6709\u540e\uff09  </p> </li> <li> <p>Registers with Load-Controlled Feedback      Run the clock continuously, and  Selectively use a load control to change the register contents. </p> <p>Example</p> <p> </p> </li> </ul>"},{"location":"Logic/logic06/#register-transfer-operations","title":"Register Transfer Operations","text":"<ul> <li> <p>Register Transfer Operations \u2013 The movement and processing of data stored in registers</p> </li> <li> <p>Three basic components:</p> <ul> <li>set of registers(\u6e90\u5bc4\u5b58\u5668\uff0c\u76ee\u6807\u5bc4\u5b58\u5668)</li> <li>operations</li> <li>control of operations</li> </ul> </li> <li>Elementary Operations -- load, count, shift, add, bitwise \"OR\", etc. Elementary operations called microoperations </li> </ul> <p>Register Notation </p> <ul> <li>Letters and numbers  \u2013 denotes a register (e.g. \\(R2, PC, IR\\))</li> <li>Parentheses \\((\\ )\\) \u2013 denotes a range of register bits (e.g. \\(R1(1), PC(7:0), PC(L)\\))</li> <li>Arrow \\((\\leftarrow)\\) \u2013 denotes data transfer (e.g. \\(R1 \\leftarrow R2, PC(L) \\leftarrow R0\\)) H \u4ee3\u8868\u9ad8\u4f4d, L \u4ee3\u8868\u4f4e\u4f4d(\u5982 \\(PC(L),PC(H)\\) \u5206\u522b\u4ee3\u8868 \\(PC\\) \u7684\u9ad8\u516b\u4f4d\u548c\u4f4e\u516b\u4f4d)</li> <li>Comma \u2013 separates parallel operations</li> <li>Brackets \\([\\ ]\\) \u2013 Specifies a memory address (e.g. \\(R0 \\leftarrow  M[AR],   R3 \\leftarrow M[PC]\\)) \u5bfb\u5740</li> </ul> Conditional Transfer <p> </p> <p>\u5982\u679c \\(K1=1\\) \u90a3\u4e48\u5c06 \\(R1\\) \u7684\u4fe1\u53f7\u4f20\u7ed9 \\(R2\\), \u6211\u4eec\u53ef\u4ee5\u5199\u4e3a \\(K1:(R2\\leftarrow R1)\\), \u5176\u4e2d \\(R1\\) \u662f\u4e00\u4e2a\u63a7\u5236\u53d8\u91cf\uff0c\u8868\u660e\u6761\u4ef6\u6267\u884c\u7684\u53d1\u751f\u662f\u5426\u53d1\u751f\u3002</p>"},{"location":"Logic/logic06/#register-cell-design","title":"Register Cell Design","text":"<p>Assume that a register consists of identical cells.(\u6bcf\u4e2a\u4f4d\u6267\u884c\u76f8\u540c\u64cd\u4f5c)  </p> <ul> <li>Design representative cell for the register </li> <li>Connect copies of the cell together to form the register</li> <li>Applying appropriate \"boundary conditions\" to cells that need to be different and contract if appropriate</li> </ul>"},{"location":"Logic/logic06/#specifications","title":"Specifications","text":"<ul> <li>A register</li> <li>Data inputs to the register</li> <li>Control input combinations to the register e.g. \u63a7\u5236\u8f93\u5165: Load, Shift, Add. \u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u4e2a\u5f15\u811a\u5206\u522b\u8868\u793a\u63a7\u5236\u8f93\u5165(not encoded, one-hot code)\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u5f15\u811a S0 S1 \u7684\u7ec4\u5408\u6765\u8868\u793a\u63a7\u5236\u8f93\u5165(encoded)  </li> <li>A set of register functions (typically specified as register transfers) \u5373\u89c4\u5b9a\u63a7\u5236\u8f93\u5165\u7684\u51fd\u6570\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c</li> <li>A hold state specification(e.g. If all control inputs are 0, hold the current register state)  </li> </ul>"},{"location":"Logic/logic06/#design","title":"Design","text":"<p>\u8bbe\u8ba1\u65f6\uff0c\u9664\u4e86 Multiplexer Approach \u8fd8\u6709 Sequential Circuit Design Approach</p> <ul> <li>Find a state diagram or state table  </li> <li>Use the design procedure in Chapter 4 to complete the cell design  </li> <li>For optimization:<ul> <li>Use K-maps for up to 4 to 6 variables</li> <li>Otherwise, use computer-aided or manual optimization</li> </ul> </li> </ul>"},{"location":"Logic/logic06/#microoperations","title":"Microoperations","text":"<p>Logical Groupings:  </p> <ul> <li>Transfer - move data from one register to another</li> <li>Arithmetic - perform arithmetic on data in registers \\(+-\\times /\\)</li> <li>Logic - manipulate data or use bitwise logical operations \\(\\wedge \\vee \\oplus \\ \\overline{x}\\)</li> <li>Shift - shift data in registers</li> </ul> + <p>\"+\" \u5728\u903b\u8f91\u8868\u8fbe\u5f0f\u4e2d\u8868\u793a\u6216\uff0c\u5728\u7b97\u672f\u8868\u8fbe\u5f0f\u4e2d\u8868\u793a\u52a0\u6cd5\u3002 \u5982 \\((K1 + K2):  R1 \\leftarrow R1 +R3\\), \u5de6\u8fb9\u4e3a\u6216\uff0c\u53f3\u8fb9\u4e3a\u52a0\u3002</p> RTL, VHDL, Verilog Symbols for Register Transfers <p> </p>"},{"location":"Logic/logic06/#arithmetic-microoperations","title":"Arithmetic Microoperations","text":"<ul> <li>Note that any register may be specified for source 1, source 2, or destination.</li> <li>These simple microoperations operate on the whole word</li> </ul>"},{"location":"Logic/logic06/#logical-microoperations","title":"Logical Microoperations","text":""},{"location":"Logic/logic06/#shift-microoperations","title":"Shift Microoperations","text":"<p>These shifts \"zero fill\". Sometimes a separate flip-flop is used to provide the data shifted in, or to \u201ccatch\u201d the data shifted out.</p> <p>Other shifts are possible (rotates, arithmetic).</p> Example <p>\u5047\u8bbe \\(R2=1100\\ 1001\\) </p> <ul> <li>\\(R1 \\leftarrow sl\\ R2\\) \u4e4b\u540e \\(R2=1001\\ 0010\\)</li> <li>\\(R1 \\leftarrow sr\\ R2\\) \u4e4b\u540e \\(R2=0110\\ 0100\\) </li> </ul>"},{"location":"Logic/logic06/#register-transfer-structures","title":"Register Transfer Structures","text":"<ul> <li>Multiplexer-Based Transfers - Multiple inputs are selected by a multiplexer dedicated to the register</li> <li>Bus-Based Transfers - Multiple inputs are selected by a shared multiplexer driving a bus that feeds inputs to multiple registers</li> <li>Three-State Bus  - Multiple inputs are selected by 3-state drivers with outputs connected to a bus that feeds multiple registers</li> <li>Other Transfer Structures -  Use multiple multiplexers, multiple buses, and combinations of all the above</li> </ul>"},{"location":"Logic/logic06/#multiplexer-based-transfers","title":"Multiplexer-Based Transfers","text":"<p>Multiplexers connected to register inputs produce flexible transfer structures (Note: Clocks are omitted for clarity)</p> <p>Example</p> <p>\\(K1:R0\\leftarrow R1\\quad K2\\overline{K1}:R0\\leftarrow R2\\)  \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5316\u7b80: \\(K1+K2\\overline{K1}=K1+K2\\) \u5c31\u662f \\(R0\\) \u5bc4\u5b58\u5668\u4f1a\u88ab\u66f4\u65b0\u65f6\u7684\u63a7\u5236\u903b\u8f91. \u5e76\u7528 \\(K1\\) \u4f5c\u4e3a Mux \u7684\u9009\u62e9\u4fe1\u53f7\u3002 </p> <p>\u5b8c\u6574\u7535\u8def\uff08\u5047\u8bbe\u5bc4\u5b58\u5668\u5747\u4e3a 4 \u4f4d\uff09  </p>"},{"location":"Logic/logic06/#multiplexer-and-bus-based-transfers-for-multiple-registers","title":"Multiplexer and Bus-Based Transfers for Multiple Registers","text":"<ul> <li> <p>Multiplexer dedicated to each register  </p> <p>There can be three distinct registers as source, so can simultaneously do any three register transfers. (totally flexible) \u5982\u6211\u4eec\u53ef\u4ee5\u65e2\u53ef\u4ee5\u5b9e\u73b0 \\(R0\\leftarrow R1\\) \u4e5f\u53ef\u4ee5\u5b9e\u73b0 \\(R0\\leftrightarrow R1\\) \u7535\u8def\u6210\u672c\u592a\u9ad8\uff01</p> </li> <li> <p>Shared transfer paths for registers      A shared transfer object is a called a bus(\u603b\u7ebf)    </p> <p>A single bus driven by a multiplexer lowers cost, but limits the available transfers  \u4e0d\u80fd\u540c\u65f6 \\(R0\\leftarrow R1\\) \\(R1\\leftarrow R0\\)(\u7c7b\u6bd4\uff1a\u4ea4\u6362\u51fd\u6570\u9700\u8981\u4e00\u4e2a\u7b2c\u4e09\u65b9\u53d8\u91cf)</p> </li> </ul>"},{"location":"Logic/logic06/#three-state-bus","title":"Three-State Bus","text":"<p>Same simultaneous transfer capability as multiplexer bus \u6211\u4eec\u5c06\u5bc4\u5b58\u5668\u548c\u4e09\u6001\u95e8\u5c01\u88c5\u5728\u4e00\u8d77\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5916\u90e8\u5f15\u811a(n bits), \u4f46\u591a\u8def\u590d\u7528\u5668\u7684\u65b9\u6cd5\u9700\u8981\u4e24\u6839\u4f4d\u5bbd\u662f n \u7684\u5f15\u811a\uff08\u56e0\u4e3a\u4e09\u6001\u95e8\u7684\u5916\u90e8\u5f15\u811a\u662f\u53ef\u4ee5\u53cc\u5411\u4f20\u8f93\u6570\u636e\u7684\uff09</p>"},{"location":"Logic/logic06/#shift-registers","title":"Shift Registers","text":"<p>Shift Registers move data laterally within the register toward its MSB or LSB position</p> <p>In the simplest case, the shift register is simply a set of D flip-flops connected in a row like this:</p> <ul> <li>Data input, In, is called a serial input or the shift right input.</li> <li>Data output, Out, is often called the serial output.</li> <li> <p>The vector (A, B, C, Out) is called the parallel output.</p> </li> <li> <p>Parallel Load Shift Registers By adding a mux between each shift register stage, data can be shifted or loaded      </p> <p>If SHIFT is low,\\(D_A\\) and \\(D_B\\) are replaced by the data on DA and DB lines, else data shifts right on each clock. \u7f3a\u70b9: \u6ca1\u6709\u6570\u636e\u4fdd\u6301\u64cd\u4f5c\uff0c\u9700\u8981\u591a\u6dfb\u52a0\u4e00\u4e2a\u9009\u62e9\u9879(3-1 \u9009\u62e9)  </p> </li> </ul>"},{"location":"Logic/logic06/#counters","title":"Counters","text":"<p>Counters are sequential circuits which \"count\" through a specific state sequence.  They can count up, count down, or count through other fixed sequences.  Two distinct types are in common usage:</p> <ul> <li>Ripple Counters <ul> <li>Clock connected to the flip-flop clock input on the LSB bit flip-flop</li> <li>For all other bits, a flip-flop output is connected to the clock input, thus circuit is not truly synchronous!</li> <li>Output change is delayed more for each bit toward the MSB.</li> <li>Resurgent because of low power consumption</li> </ul> </li> <li>Synchronous Counters<ul> <li>Clock is directly connected to the flip-flop clock inputs</li> <li>Logic is used to implement the desired state sequencing</li> </ul> </li> </ul>"},{"location":"Logic/logic06/#ripple-counter","title":"Ripple Counter","text":"<p>\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\uff0cA \u8ba1\u6570\u5668\u7ffb\u8f6c\u4e00\u6b21\u3002\u5f53 A \u5904\u4e8e\u4e0b\u964d\u6cbf\u7684\u65f6\u5019 B \u4f1a\u8fdb\u884c\u4e00\u6b21\u6c42\u53cd\u3002</p> <p>\u6bcf\u4e2a\u89e6\u53d1\u5668\u7684\u65f6\u949f\uff0c\u6ca1\u6709\u63a5\u5728\u540c\u4e00\u4e2a\u7cfb\u7edf\u65f6\u949f\u4e0a\uff0c\u662f\u4e00\u4e2a\u5f02\u6b65\u65f6\u5e8f\u7535\u8def\u3002</p> <p>Question</p> <p>\u8003\u8651 3 \u4f4d\u89e6\u53d1\u5668\uff0c\u7406\u60f3\u4e0a \\(C=B=A=1\\) \u540e\u4ece\u5168 1 \u7acb\u5373\u53d8\u6210\u5168 0. \u4f46\u56e0\u4e3a\u95e8\u5ef6\u8fdf\uff0c\u5b9e\u9645\u53d8\u5316\u8fc7\u7a0b\u4e3a\\(111-110-100-000\\) </p> <p>\u6b64\u5916\u5bf9\u4e8e \\(n\\) bits, \u6700\u574f\u65f6\u95f4\u5ef6\u8fdf\u662f \\(n\\cdot t_{PHL}\\), \u901f\u5ea6\u4f1a\u975e\u5e38\u6162</p>"},{"location":"Logic/logic06/#synchronous-counters","title":"Synchronous Counters","text":"<p>up-counter: incrementer \\(S=A+1\\) </p> <p>\u5f53\u4f4d\u6570\u589e\u52a0\uff0c\u4e0d\u5229\u4e8e\u5316\u7b80\u8bbe\u8ba1\u3002\u89c2\u5bdf \\(Q_2\\), \u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u7ffb\u8f6c\u7684\u65f6\u5019 \\(Q_1,Q_0\\) \u5747\u4e3a 1. \u7c7b\u4f3c\u5728\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u4e2d \\(Q_n\\) \u53ea\u6709\u5728\u4f4e \\(n-1\\) \u4f4d\u5747\u4e3a 1 \u65f6\u624d\u4f1a\u53d6\u53cd\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u5f02\u6216\u95e8\uff0c\u63a5\u5728\u63a7\u5236\u5f15\u811a\u548c\u672c\u4f4d\u8f93\u51fa\u4e0a\uff0c\u5229\u7528\u63a7\u5236\u5f15\u811a\u6765\u5b9e\u73b0\u5bf9\u672c\u4f4d\u8f93\u51fa\u7684\u4fdd\u6301/\u53d6\u53cd\u3002</p> <p>\u8fd9\u91cc\u7684\u63a7\u5236\u4fe1\u53f7\u662f\u4e00\u4e2a\u4e0e\u95e8\u94fe\uff0c<code>Count Enable</code> \u662f\u4e0e\u95e8\u94fe\u7684\u4f7f\u80fd\u3002\uff08\u82e5 <code>Enable</code> \u4e3a 0, \u6240\u6709\u7684\u4e0e\u95e8\u94fe\u5747\u4e3a 0, \u8fd9\u65f6\u7535\u8def\u76f8\u5f53\u4e8e\u662f\u4fdd\u6301\u529f\u80fd\uff09 \u6700\u540e\u4e0e\u95e8\u94fe\u8f93\u51fa\u4e00\u4e2a <code>Carry Output</code>, \u8868\u793a\u6240\u6709\u4f4d\u4e3a 1 \u4e14 <code>Enable=1</code>. CO \u662f\u7528\u4e8e\u505a\u7ea7\u8054\uff08\u5982\u4e24\u4e2a\u56db\u4f4d\u8ba1\u6570\u5668\u62fc\u6210\u4e00\u4e2a\u516b\u4f4d\u8ba1\u6570\u5668\uff09\u63a5\u5728\u540e\u7eed\u8ba1\u6570\u5668\u7684 <code>Enable</code> \u4e0a\u3002  </p> <p>\u5b58\u5728\u95ee\u9898\uff1a\u4e0e\u95e8\u94fe\u662f\u4e32\u63a5\u7684\uff0c\u5f53\u8ba1\u6570\u5668\u4f4d\u6570\u5927\u65f6\uff0c\u4e0e\u95e8\u94fe\u7684\u4f20\u8f93\u5ef6\u8fdf\u53ef\u80fd\u4f1a\u5f71\u54cd\u8ba1\u6570\u5668\u3002  parallel gating:  </p> <p>Symbol for Synchronous Counter </p>"},{"location":"Logic/logic06/#other-counters-counter-with-parallel-load","title":"Other Counters - Counter with Parallel Load","text":"<p>\u5728 D \u8f93\u5165\u89e6\u53d1\u5668\u524d\u52a0\u4e0a 2-1 Mux(<code>Load</code> \u662f\u9009\u62e9\u4fe1\u53f7), \u9009\u62e9\u4e0e\u95e8\u94fe\u7684\u7ed3\u679c(<code>Load=0</code>) or \u5916\u90e8\u8f93\u5165(<code>Load=1</code>)\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5e76\u884c\u52a0\u8f7d\u548c\u8ba1\u6570\u7684\u9009\u62e9\u63a7\u5236</p> Load Count Action 0 0 Hold Stored Value 0 1 Count Up Stored Value 1 X Load D Design Example:  Synchronous BCD <p>\u5229\u7528\u65f6\u5e8f\u7535\u8def\u5b9e\u73b0\u540c\u6b65 BCD \u8ba1\u6570\u5668  </p> <ul> <li> <p>\u72b6\u6001\u8868\u5982\u4e0b:(1010-1111 don't cares)   </p> </li> <li> <p>\u57fa\u4e8e\u4e0a\u9762\u7684\u72b6\u6001\u8868\uff0c\u5206\u522b\u5bf9 \\(Q8,Q4,Q2,Q1\\) \u753b\u5361\u8bfa\u56fe \u5229\u7528\u5361\u8bfa\u56fe\u4e24\u7ea7\u4f18\u5316  </p> </li> </ul> \\[ \\begin{align*} D1 &amp; = \\overline {Q1}\\\\  D2 &amp; = Q2 \\oplus Q1\\overline{Q8}\\\\ D4 &amp; = Q4 \\oplus Q1Q2\\\\ D8 &amp; = Q8 \\oplus (Q1Q8 + Q1Q2Q4) \\end{align*} \\] <ul> <li>\u753b\u51fa\u7535\u8def\u56fe\uff0c\u6dfb\u52a0\u590d\u4f4d\u5f15\u811a(reset)  \u53ef\u4ee5\u589e\u52a0\u5728\u89e6\u53d1\u5668\u8f93\u5165\u7aef(synchronous); \u6216\u8005\u76f4\u63a5\u63a5\u5728 D \u89e6\u53d1\u5668\u7684\u5f02\u6b65\u590d\u4f4d R \u4e00\u7aef(asynchronous)</li> <li>\u5982\u679c\u7535\u8def\u56e0\u4e3a\u5e72\u6270\uff0c\u8df3\u5230\u4e86\u65e0\u5173\u6001\uff0c\u80fd\u5426\u6062\u590d ?   \u753b\u51fa\u65e0\u5173\u6001\u7684\u6b21\u6001  </li> </ul> <p>\u53ef\u4ee5\u770b\u5230\u4e0d\u4f1a\u8df3\u5230\u5f02\u5e38\u72b6\u6001\u540e\u8fdb\u5165\u6b7b\u9501\uff0c\u753b\u51fa\u72b6\u6001\u56fe\u5982\u4e0b  </p>"},{"location":"Logic/logic06/#other-counters-counting-modulo-n","title":"Other Counters - Counting Modulo N","text":"<p>BCD \u7801\u8ba1\u6570\u5668\u5c31\u662f\u6a21 10 \u8ba1\u6570\u5668\u3002 \u5e38\u7528\u505a\u6cd5\u662f\u5c06\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u8fdb\u884c\u529f\u80fd\u8f6c\u6362\uff0c\u5229\u7528\u540c\u6b65/\u5f02\u6b65\u6e05\u96f6\uff0c\u52a0\u8f7d\u529f\u80fd\uff0c\u8fbe\u5230 \\(N\\) \u65f6\u4e2d\u6b62\u8ba1\u6570\u7ed3\u679c </p> <ul> <li> <p>\u68c0\u6d4b\u503c\u5230\u8fbe N \u540e\u76f4\u63a5\u7528\u5f02\u6b65\u6e05\u96f6\u5f15\u811a\u5c06\u8ba1\u6570\u5668\u6e05\u96f6</p> <p>Counting Modulo 7: Detect 7 and Asynchronously Clear</p> <p> </p> <ul> <li>A synchronous 4-bit binary counter with an asynchronous \\(Clear\\)(\u5f02\u6b65\u590d\u4f4d\u811a\uff0c\u540e\u540c) is used to make a Modulo 7 counter.   </li> <li>Use the \\(\\overline{Clear}\\) feature to detect the count 7 and clear the count to 0. This gives a count of 0, 1, 2, 3, 4, 5, 6, 7(short)0, 1, 2, 3, 4, 5, 6, 7(short)0, etc.  \u4f46\u4f1a\u77ed\u6682\u51fa\u73b0 7 \u8fd9\u4e2a\u72b6\u6001\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u5e72\u6270  </li> </ul> <ul> <li>\u68c0\u6d4b\u503c\u8fbe\u5230 \\(N-1\\) \u65f6\u5229\u7528\u540c\u6b65\u6e05\u96f6\u7684\u65b9\u5f0f\u5728\u4e0b\u4e2a\u5468\u671f\u4e0a\u5347\u6cbf\u5c06\u8ba1\u6570\u5668\u6e05\u96f6</li> </ul> <p>Counting Modulo 7: Synchronously Load on Terminal Count of 6</p> <p> </p> <ul> <li>A synchronous 4-bit binary counter with a synchronous load and an asynchronous \\(Clear\\) is used to make a Modulo 7 counter </li> <li>Use the Load feature to detect the count \"6\" and load in \"zero\".  This gives a count of 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, ... \u4e0d\u4f1a\u76f4\u63a5\u6e05\u96f6\uff0c\u800c\u662f\u5728\u5230\u8fbe \\(N-1\\) \u7684\u65f6\u5019\uff0c\u5728\u4e0b\u4e2a\u65f6\u949f\u4e0a\u5347\u6cbf\u5c06\u5176\u6e05\u96f6  </li> </ul> <p>\u5982\u679c\u9700\u8981\u8bbe\u8ba1\u4ece\u67d0\u4e2a\u4e2d\u95f4\u503c(\u975e\u96f6)\u5f00\u59cb\u8ba1\u6570\u7684\u8ba1\u6570\u5668\uff0c\u53ea\u9700\u8981\u5c06\u6bcf\u6b21\u590d\u4f4d\u8d4b\u7684\u5916\u90e8\u8f93\u5165\u53d8\u4e3a\u8be5\u6570\u5b57\u5373\u53ef(\u5982\u679c\u662f mod 15, \u53ef\u4ee5\u4e0d\u9700\u8981\u7528\u4e0e\u95e8\uff0c\u76f4\u63a5\u5229\u7528\u4e4b\u524d\u7684 <code>Carry Output</code> \u5373\u53ef)  </p> </li> </ul> \u591a\u4f4d\u8ba1\u6570\u5668 <p>\u591a\u4f4d\u5bc4\u5b58\u5668\uff0c\u5206\u5f00\u8bbe\u8ba1\uff0c\u5982\u8bbe\u8ba1\u65f6\u95f4\uff0c\u4f4e\u4f4d\u4e3a\u6a21 10 \u8ba1\u6570\u5668\uff0c\u9ad8\u4f4d\u4e3a\u6a21 6 \u8ba1\u65f6\u5668\uff0c\u4f4e\u4f4d\u7684 <code>Carry Output</code> \u65e2\u4f5c\u4e3a\u4f4e\u4f4d\u7684\u540c\u6b65\u6e05\u96f6\u4fe1\u53f7\uff0c\u53c8\u662f\u9ad8\u4f4d\u7684 <code>Enable</code> \u4fe1\u53f7.  </p>"},{"location":"Logic/logic06/#serial-operations","title":"Serial Operations","text":"<p>\u4e32\u884c\uff1a \u5bc4\u5b58\u5668\u4e00\u6b21\u53ea\u63a5\u53d7\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u4f20\u8f93 n \u4f4d\u9700\u8981 n \u4e2a\u65f6\u949f\u5468\u671f\u3002</p> <p>\u9700\u8981\u7684\u5f15\u7ebf\u6570\u91cf\u5c11\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e4b\u95f4\u53ea\u9700\u8981\u4e00\u6761\u7ebf\u548c\u4e00\u6761\u5730\u7ebf\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u4e14\u56e0\u4e3a\u5f15\u7ebf\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5176\u65f6\u949f\u9891\u7387\u8fbe\u5230\u975e\u5e38\u9ad8\u3002</p> <p>e.g. \u8bbe\u5907\u4e0e\u8bbe\u5907\u4e4b\u95f4\u5e38\u4f7f\u7528\u4e32\u884c(\u5916\u8bbe), USB, \u4ee5\u592a\u7f51\u7ebf   </p> <p>By using two shift registers for operands, a full adder, and a flip flop (for the carry), we can add two numbers serially, starting at the least significant bit.</p> <p>Serial addition is a low cost way to add large numbers of operands, since a \u201ctree\u201d of full adder cells can be made to any depth, and each new level doubles the number of operands.</p> <p>Other operations can be performed serially as well, such as parity generation/checking or more complex error-check codes.</p> <p>Serial Adder </p>"},{"location":"Logic/logic07/","title":"Memory Basis","text":"Abstract <ol> <li> <p>\u5b58\u50a8\u5668\u57fa\u672c\u6982\u5ff5 Basic concepts of memory  </p> <ul> <li>\u5b58\u50a8\u5668\u5b9a\u4e49\u3001RAM\u7684\u5b9a\u4e49\u3001\u5b58\u50a8\u5668\u5730\u5740\u6982\u5ff5\u5b9a\u4e49\u3001\u5b58\u50a8\u5668\u57fa\u672c\u6570\u636e\u5355\u5143\u548c\u64cd\u4f5c Memory definitions, RAM, memory address, RAM cell, basic memory operations  </li> </ul> </li> <li> <p>\u5b58\u50a8\u5668\u7684\u7ec4\u7ec7 memory organization  </p> <ul> <li>\u5730\u5740\u3001\u5b57\u957f\u548c\u5b58\u50a8\u5355\u5143\u4e2a\u6570\u4e4b\u95f4\u5173\u7cfb Relationship between address, word width and storage cells  </li> </ul> </li> <li> <p>\u5b58\u50a8\u5668\u7684\u57fa\u672c\u7ed3\u6784\u6846\u56fe Memory block diagram    </p> <ul> <li>\u5730\u5740\u7ebf\u3001\u6570\u636e\u7ebf\u3001\u63a7\u5236\u7ebf   Address lines, Data lines, Control lines  </li> </ul> </li> <li> <p>\u8bfb\u3001\u5199\u8fc7\u7a0b\u4e2d\u5404\u4fe1\u53f7\u7684\u65f6\u5e8f\u3001DRAM\u7684\u8bbf\u95ee\u65f6\u5e8f Memory Read or Write Operation Timing, DRAM Read Timing  </p> </li> <li> <p>\u9759\u6001RAM\u548c\u52a8\u6001RAM\u7684\u57fa\u672c\u6982\u5ff5 Basic concepts of Static RAM and Dynamic RAM  </p> <ul> <li>\u9759\u6001\u5b58\u50a8\u5668SRAM\u7ed3\u6784\u3001\u52a8\u6001\u5b58\u50a8\u5668DRAM\u7ed3\u6784\u3001\u533a\u522b Structure and difference of SRAM and DRAM   </li> </ul> </li> <li> <p>DRAM\u63a7\u5236\u7535\u8def\u4e0e\u5237\u65b0 DRAM block diagram and refresh  </p> </li> <li>\u4e24\u6b21\uff08\u5206\u65f6\uff09\u5730\u5740\u52a0\u8f7d\uff0c\u5148\u52a0\u8f7d\u884c\u5730\u5740\u540e\u52a0\u8f7d\u5217\u5730\u5740 Row Address and Column Address  </li> <li>\u5b58\u50a8\u5668\u7684\u5b57\u6269\u5c55\u548c\u4f4d\u6269\u5c55\u65b9\u6cd5 Memory word expansion and width expansion  </li> <li>\u540c\u6b65SDRAM\u7684\u731d\u53d1\u8bfb\u7684\u57fa\u672c\u6982\u5ff5 Burst read in SDRAM  </li> </ol>"},{"location":"Logic/logic07/#memory-concepts","title":"Memory Concepts","text":"<ul> <li>Memory \u2500 A collection of storage cells together with the necessary circuits to transfer information to and from them.  \u4e00\u7ec4\u5b58\u50a8\u5355\u5143\u7684\u96c6\u5408\uff0c\u53ef\u4ee5\u8bfb\u3001\u5199\u3002</li> <li>Memory Organization \u2500 the basic architectural structure of a memory in terms of how data is accessed.  \u5185\u5b58\u7684\u67b6\u6784\uff0c\u5185\u5b58\u80fd\u5b58\u653e\u591a\u5c11\u6570\u636e\uff0c\u4e00\u4e2a\u5b57\u591a\u5c11\u4f4d\uff0c\u5982\u4f55\u8bbf\u95ee\u5185\u5b58\u7b49\u3002  </li> <li>Random Access Memory (RAM) \u2500 a memory organized such that data can be transferred to or from any cell (or collection of cells) in a time that is not dependent upon the particular cell selected.   </li> <li>Memory Address \u2500 A vector of bits that identifies a particular memory element (or collection of elements). \u5185\u5b58\u5730\u5740\uff0c\u4e00\u4e2a\u5217\u8868\u7684\u7f16\u53f7\uff0c\u901a\u8fc7\u7f16\u53f7\u53ef\u4ee5\u8bfb\u5199\u5185\u5b58\u7684\u6570\u636e\u3002 </li> </ul> <p>Typical data elements are:  </p> <ul> <li>bit </li> <li>byte \u2500 8 bits</li> <li> <p>word  \u2500 a collection of binary bits whose size is a typical unit of access for the memory.   It is typically a power of two multiple of bytes (e.g. 1 byte, 2 bytes, 4 bytes, 8 bytes, etc. ) \u4e0d\u540c\u8ba1\u7b97\u673a\u7684\u5b57\u957f\u53ef\u80fd\u4e0d\u540c\u3002  </p> </li> <li> <p>Memory Data \u2500 a bit or a collection of bits to be stored into or accessed from memory cells.  </p> </li> <li>Memory Operations \u2500 operations on memory data supported by the memory unit.  Typically, read and write operations over some data element (bit, byte, word, etc ).</li> </ul>"},{"location":"Logic/logic07/#memory-organization","title":"Memory Organization","text":"<p>Organized as an indexed array of words. Value of the index for each word is the memory address.</p> <p>\u5386\u53f2\u4e0a\u4e0d\u540c\u4ee3\u7684\u4ea7\u54c1\u90fd\u6709\u7740\u4e0d\u540c\u7684\u5185\u5b58\u67b6\u6784 e.g. PDP-8, IBM360, Intel 8080...  </p> <p>Memory Block Diagram </p> <ul> <li>\\(k\\) address lines -&gt;(decoded) address \\(2^k\\) words of memory.  </li> <li>Each word is \\(n\\) bits.  </li> <li>Read and Write are single control lines by 1 bit.</li> </ul> Memory Organization Example <p> </p> <p>3 \u4e2a\u5730\u5740\u4f4d\uff0c\\(0~7\\), \u6bcf\u4e2a\u5730\u5740\u5b58\u4e86 8 \u4f4d\u6570\u636e\uff0c\u56e0\u6b64\u5b57\u957f\u662f 8. </p>"},{"location":"Logic/logic07/#basic-memory-operations","title":"Basic Memory Operations","text":"<p>Memory operations require the following:  </p> <ul> <li>Data \u2500 data written to, or read from, memory as required by the operation.</li> <li>Address \u2500 specifies the memory location to operate on.   The address lines carry this information into the memory. Typically:  \\(n\\) bits specify locations of \\(2^n\\) words.</li> <li>An operation \u2500 Information sent to the memory and interpreted as control information which specifies the type of operation to be performed.  Typical operations are READ and WRITE.  Others are READ followed by WRITE and a variety of operations associated with delivering blocks of data. Operation signals may also specify timing info.  <ul> <li>Read Memory \u2500 an operation that reads a data value stored in memory:<ul> <li>Place a valid address on the address lines.</li> <li>Toggle(\u5207\u6362) the memory read control line.</li> <li>Wait for the read data to become stable.</li> </ul> </li> <li>Write Memory \u2500 an operation that writes a data value to memory:<ul> <li>Place a valid address on the address lines and valid data on the data lines.</li> <li>Toggle the memory write control line.</li> </ul> </li> </ul> </li> </ul> <p>Memory Operation Timing </p> <ul> <li>Most basic memories are asynchronous </li> <li>Controlled by control inputs and address</li> <li>Timing of signal changes and data observation is critical to the operation</li> <li> <p>Read timing      </p> <p>data valid \u662f\u7b49\u5f85\u7684\u65f6\u95f4\uff0c\u968f\u7740\u6570\u636e\u5927\u5c0f\u3001\u5185\u5b58\u5de5\u827a\u4e0d\u540c\uff0c\u4f1a\u82b1\u8d39\u4e0d\u540c\u7684\u65f6\u95f4   </p> </li> <li> <p>Write timing      </p> <p>\u5728 R/W \u4fe1\u53f7\u4e0b\u964d\u65f6\u8981\u5c06 addr \u9501\u5b58\u8d77\u6765\uff0c\u4e0a\u5347\u65f6\u8981\u9884\u5148\u628a\u6570\u636e\u51c6\u5907\u597d\u3002</p> </li> </ul>"},{"location":"Logic/logic07/#ram","title":"RAM","text":"<p>Types of random access memory  </p> <ul> <li>Static \u2013 information stored in latches</li> <li>Dynamic \u2013 information stored as electrical charges on capacitors   \u5bc6\u5ea6\u53ef\u4ee5\u505a\u7684\u5f88\u9ad8<ul> <li>Charge \u201cleaks\u201d off </li> <li>Periodic refresh  of charge required </li> </ul> </li> </ul> <p>Dependence on Power Supply  </p> <ul> <li>Volatile \u2013 loses stored information when power turned off</li> <li>Non-volatile \u2013 retains information when power turned off</li> </ul>"},{"location":"Logic/logic07/#static-ram-sram","title":"Static RAM (SRAM)","text":""},{"location":"Logic/logic07/#cell-and-slices","title":"Cell and Slices","text":"<ul> <li>SR Latch</li> <li>Select input for control 1  </li> <li>Dual Rail Data Inputs \\(B\\) and \\(\\overline B\\)</li> <li>Dual Rail Data Outputs \\(C\\) and \\(\\overline C\\)</li> </ul> <p>\u8fd9\u91cc Bit Select \u7684\u4fe1\u53f7\uff08\u6bcf\u4e00\u4e2a Cell \u90fd\u6709\uff09\uff0c\u4e3a 0 \u65f6\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u88ab Disable \u4e86\uff0c\u4e3a 1 \u65f6\u624d\u53ef\u4ee5\u5199\u5165\u8bfb\u51fa\uff08\u53d6\u51b3\u4e8e \\(Read/\\overline{Write}\\) \u4fe1\u53f7\uff09  </p>"},{"location":"Logic/logic07/#cell-arrays-and-coincident-selection","title":"Cell Arrays and Coincident Selection","text":"<ul> <li>Decoder \uff0d decodes the \\(n\\) address lines to \\(2^n\\) word select lines \u5c06\u5bf9\u5e94\u5730\u5740\u4e0a\u7684 Cells \u7684 Bit Select \u4fe1\u53f7\u7f6e\u4e3a 1 \u5176\u4f59\u4e3a 0.  </li> <li>A 3-state buffer on the data output permits RAM ICs to be combined into a RAM with \\(c \\times 2^n\\) words</li> </ul> <p>\u884c\u5217\u8bd1\u7801  </p> <ul> <li>Word select becomes Row select</li> <li>Bit select becomes Column select</li> </ul> <p>\\(8\\times 2\\) RAM</p> <p> </p>"},{"location":"Logic/logic07/#making-larger-memories","title":"Making Larger Memories","text":"<p>\u5229\u7528 CS \u5f15\u811a\uff0c\u53ef\u4ee5\u5c06 RAM \u82af\u7247\u62fc\u8d77\u6765\u3002\uff08\u81ea\u6269\u5c55\uff0c\u5373\u8f93\u51fa\u7684\u5b57\u5bbd\u6ca1\u53d8\uff09  </p> <p>\u9ad8\u4f4d\u8f93\u5165\u7528\u6765\u9009\u62e9 RAM \u82af\u7247\uff08\u8f93\u51fa\u662f\u9ad8\u963b\u6001\uff09\uff0c\u4f4e\u4f4d\u8f93\u5165\u7528\u6765\u9009\u62e9\u5bf9\u5e94\u82af\u7247\u7684 Cell. </p>"},{"location":"Logic/logic07/#making-wider-memories","title":"Making Wider Memories","text":"<p>\u589e\u52a0\u4f4d\u5bbd\uff0c\u6bcf\u5757 RAM \u82af\u7247\u5c31\u4ee3\u8868\u6700\u540e\u8f93\u51fa\u7684\u67d0\u4e00\u4f4d\u3002</p>"},{"location":"Logic/logic07/#dynamic-ram-dram","title":"Dynamic RAM (DRAM)","text":"<p>Basic Principle: Storage of information on capacitors.  </p> <p>Charge and discharge of capacitor to change stored value Use of transistor as \u201cswitch\u201d to:</p> <ul> <li>Store charge</li> <li>Charge or discharge</li> </ul> <p>\u6210\u672c\u4f4e\uff0c\u56e0\u6b64\u82af\u7247\u91cc\u53ef\u4ee5\u9ad8\u5bc6\u5ea6\u4f7f\u7528\u3002 \u5199\u6570\u636e\u65f6\u76f4\u63a5\u5145\u653e\u7535\u5373\u53ef\uff1b\u8bfb\u53d6\u65f6\uff0c\u9700\u8981\u6709\u7535\u8def\u5224\u65ad\u7535\u538b\u9ad8\u4f4e\uff0c\u8fd9\u65f6\u4f1a\u6d88\u8017\u7535\u8377,\u8981\u5c06\u7834\u574f\u6027\u8bfb\u8f6c\u4e3a\u975e\u7834\u574f\u6027\uff08\u5c06\u503c\u5199\u56de\u53bb\uff09</p>"},{"location":"Logic/logic07/#cell-and-slices_1","title":"Cell and Slices","text":"<p>\u5c06\u6240\u6709\u7684 DRAM \u8f93\u51fa\u63a5\u5230 Sense Amplifier \u4e0a\uff0c\u53ef\u4ee5\u8ba9\u7834\u574f\u6027\u8bfb\u5165\u53d8\u4e3a\u975e\u7834\u574f\u6027\u8bfb\u5165\u3002</p> <p>\u9700\u8981\u505a\u5b9a\u65f6\u5237\u65b0\uff08\u7535\u5bb9\u4f1a\u81ea\u5df1\u653e\u7535\uff09  - Refresh Controller and Refresh Counter   </p> <p>\u5206\u522b\u8f93\u5165\u884c\u5730\u5740\u3001\u5217\u5730\u5740\uff08\u5b9e\u9645\u4e0a\u662f\u4e00\u7ec4\u5f15\u811a\uff0c\u53ea\u662f\u88ab DRAM \u5206\u5f00\u8f93\u5165\uff09\uff0c\u5bf9\u5e94 \\(\\overline{RAS},\\overline{CAS}\\)\uff08\u63a7\u5236\u5f15\u811a\uff0c\u544a\u8bc9\u82af\u7247\u73b0\u5728\u8f93\u5165\u7684\u662f\u884c/\u5217\u5730\u5740\uff09</p> <p>DRAM \u662f\u540c\u6b65\u7684\uff0c\u4f9d\u8d56\u65f6\u949f\uff08SRAM \u662f\u5f02\u6b65\uff09</p> <ul> <li>Read timing</li> </ul> <ul> <li>Write timing</li> </ul>"},{"location":"Logic/logic07/#dram-types","title":"DRAM Types","text":"<ul> <li>Synchronous DRAM (SDRAM)</li> <li>Double Data Rate SDRAM (DDR SDRAM)</li> <li>RAMBUS\u00ae DRAM (RDRAM)</li> </ul> <p>DRAM \u5b58\u50a8\u91cf\u5927\uff0c\u4f46\u76f8\u5bf9 SRAM \u64cd\u4f5c\u4f1a\u6162\u5f88\u591a\uff08\u8fd8\u8981\u5206\u4e24\u4e2a\u5468\u671f\u5206\u522b\u63d0\u4f9b\u884c\u5730\u5740\u548c\u5217\u5730\u5740\uff09</p> <ul> <li> <p>Synchronous DRAM  Transfers to and from the DRAM are synchronize with a clock Column address counter  </p> <ul> <li>for addressing internal data to be transferred on each clock cycle</li> <li>beginning with the column address counts up to column address + burst size \u2013 1 \u4e00\u6b21\u53ef\u4ee5\u8bfb\u51fa\u591a\u4e2a\u6570\u636e  </li> </ul> Synchronous DRAM - burst size=4 <p> </p> <p>\u548c SRAM \u914d\u5408\u5f62\u6210 cache</p> </li> <li> <p>Double Data Rate Synchronous DRAM Transfers data on both edges of the clock  Provides a transfer rate of 2 data words per clock cycle</p> </li> <li>RAMBUS DRAM (RDRAM) Uses a packet-based bus for interaction between the RDRAM ICs and the memory bus to the processor The bus consists of:<ul> <li>A 3-bit row address bus</li> <li>A 5-bit column address bus</li> <li>A 16 or 18-bit (for error correction) data bus</li> </ul> </li> </ul>"},{"location":"MLT/mlt2/","title":"\u611f\u77e5\u673a","text":"<p>\u611f\u77e5\u673a\u662f\u4e8c\u7c7b\u5206\u7c7b\u7684\u7ebf\u6027\u5206\u7c7b\u6a21\u578b\u3002\u5c06\u8f93\u5165\u5411\u91cf\u5212\u5206\u4e3a\u6b63\u8d1f\u4e24\u7c7b\u7684\u5206\u79bb\u8d85\u5e73\u9762\uff0c\u5c5e\u4e8e\u5224\u522b\u6a21\u578b\u3002</p>"},{"location":"MLT/mlt2/#_2","title":"\u611f\u77e5\u673a\u6a21\u578b","text":"<p>\u5b9a\u4e49\uff08\u611f\u77e5\u673a\uff09\uff1a\u5047\u8bbe\u8f93\u5165\u7a7a\u95f4\uff08\u7279\u5f81\u7a7a\u95f4\uff09\u662f \\(\\mathcal{X}\\subseteq \\mathbf{R}^n\\), \u8f93\u51fa\u7a7a\u95f4\u662f \\(\\mathcal{Y}=\\{+1,-1\\}.\\) \u8f93\u5165 \\(x\\in \\mathcal{X}\\) \u8868\u793a\u5b9e\u4f8b\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u4e8e\u8f93\u5165\u7a7a\u95f4\uff08\u7279\u5f81\u7a7a\u95f4\uff09\u7684\u70b9\uff0c\u8f93\u51fa \\(y\\in \\mathcal{Y}\\) \u8868\u793a\u5b9e\u4f8b\u7684\u7c7b\u522b\u3002\u7531\u8f93\u5165\u7a7a\u95f4\u5230\u8f93\u51fa\u7a7a\u95f4\u7684\u51fd\u6570 \\(f(x)=sign(w\\cdot x+b)\\) \u79f0\u4e3a\u611f\u77e5\u673a\u3002 \u5176\u4e2d \\(w,b\\) \u79f0\u4e3a\u611f\u77e5\u673a\u6a21\u578b\u53c2\u6570, \\(w\\in \\mathbf{R}^n\\) \u79f0\u4e3a\u6743\u503c\u6216\u8005\u6743\u503c\u5411\u91cf, \\(b\\in \\mathbf{R}\\) \u53eb\u505a\u504f\u7f6e. \\(w\\cdot x\\) \u8868\u793a\u5185\u79ef, \\(sign(x)=\\left\\{\\begin{matrix}+1,x\\geq 0\\\\ -1, x&lt;0\\end{matrix}\\right.\\) </p> <p>\u51e0\u4f55\u89e3\u91ca: </p> <ul> <li>\u7ebf\u6027\u65b9\u7a0b \\(w\\cdot x + b=0\\) \u5bf9\u5e94\u7279\u5f81\u7a7a\u95f4 \\(\\mathbf{R}^n\\) \u4e2d\u7684\u4e00\u4e2a\u8d85\u5e73\u9762 \\(S\\), \u5176\u4e2d \\(w\\) \u662f\u8d85\u5e73\u9762\u7684\u6cd5\u5411\u91cf, \\(b\\) \u662f\u8d85\u5e73\u9762\u7684\u622a\u8ddd\u3002  </li> <li>\u611f\u77e5\u673a\u6a21\u578b\u5c31\u662f\u8981\u6c42\u8fd9\u6837\u7684\u8d85\u5e73\u9762, \u5373\u6c42 \\(\\vec w, \\vec b\\).  </li> </ul>"},{"location":"MLT/mlt2/#_3","title":"\u611f\u77e5\u673a\u5b66\u4e60\u7b56\u7565","text":"<p>\u5b9a\u4e49\uff1a\uff08\u6570\u636e\u96c6\u7684\u7ebf\u6027\u53ef\u5206\u6027\uff09\u7ed9\u5b9a\u4e00\u4e2a\u6570\u636e\u96c6 \\(T=\\{(x_1,y_1),(x_2,y_2),\\ldots,(x_N, y_N)\\}\\) \u5176\u4e2d \\(x_i\\in \\mathcal{X}=\\mathcal{R}^n, y_i\\in \\mathcal{Y}=\\{+1,-1\\},i =1,2,\\cdots,N\\) \u5982\u679c\u5b58\u5728\u67d0\u4e2a\u8d85\u5e73\u9762 \\(S\\) \u80fd\u591f\u5c06\u6570\u636e\u96c6\u7684\u6b63\u5b9e\u4f8b\u70b9\u548c\u8d1f\u5b9e\u4f8b\u70b9\u5b8c\u5168\u6b63\u786e\u5730\u5206\u5230\u8d85\u5e73\u9762\u7684\u4e24\u4fa7\uff0c\u5373\u5bf9\u6240\u6709 \\(y_i=+1\\) \u7684\u5b9e\u4f8b \\(i\\) \u6709 \\(w\\cdot x_i + b &gt;0\\)\uff0c\u5bf9\u6240\u6709 \\(y_i=-1\\) \u7684\u5b9e\u4f8b \\(i\\) \u6709 \\(w\\cdot x_i + b &lt;0\\), \u5219\u79f0\u6570\u636e\u96c6 \\(T\\) \u4e3a\u7ebf\u6027\u53ef\u5206\u6570\u636e\u96c6\u3002   </p> <p>Note</p> <p>\u6ce8\u610f\u8fd9\u91cc\u662f\u5206\u5230\u8d85\u5e73\u9762\u7684\u4e24\u4fa7\uff0c\u6ca1\u6709\u70b9\u5728\u5e73\u9762\u4e0a\u3002\u8fd9\u4e0e\u524d\u9762 \\(sign(x)\\) \u7684\u5b9a\u4e49\u7565\u6709\u4e0d\u540c\u3002 \\((x_i,y_i)\\) \u8fd9\u91cc \\(x_i\\) \u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u5750\u6807; \\(y_i\\) \u8868\u793a\u8fd9\u4e2a\u5411\u91cf\u7684\u6807\u7b7e\u3002</p> <p>\u635f\u5931\u51fd\u6570</p> <ul> <li>\u81ea\u7136\u9009\u62e9\uff1a\u8bef\u5206\u7c7b\u70b9\u7684\u6570\u76ee\uff0c\u4f46\u8fd9\u6837\u7684\u635f\u5931\u51fd\u6570\u4e0d\u662f\u53c2\u6570 \\(w,b\\) \u7684\u8fde\u7eed\u53ef\u5bfc\u51fd\u6570\uff0c\u4e0d\u6613\u4f18\u5316\u3002</li> <li>\u53e6\u4e00\u9009\u62e9\uff1a\u8bef\u5206\u7c7b\u70b9\u5230\u8d85\u5e73\u9762 \\(S\\) \u7684\u603b\u8ddd\u79bb   <ul> <li>\u70b9 \\((x_0,y_0)\\) \u5230\u8d85\u5e73\u9762 \\(\\vec w\\cdot \\vec x+b=0\\) \u7684\u8ddd\u79bb: \\(\\dfrac{1}{||w||}|\\vec w\\cdot \\vec x_0+b|\\) </li> <li>\u8bef\u5206\u7c7b\u70b9: \\(-y_i(\\vec w\\cdot \\vec x_i+b) &gt;0\\) </li> <li>\u8bef\u5206\u7c7b\u70b9\u5230\u8d85\u5e73\u9762\u7684\u8ddd\u79bb: \\(-\\dfrac{1}{||w||}y_i(\\vec w\\cdot \\vec x_i+b)\\)</li> <li>\u8bbe\u8d85\u5e73\u9762 \\(S\\) \u7684\u8bef\u5206\u7c7b\u70b9\u96c6\u5408\u4e3a \\(M\\), \u5219\u8bef\u5206\u7c7b\u70b9\u5230\u8d85\u5e73\u9762 \\(S\\) \u7684\u603b\u8ddd\u79bb: \\(-\\dfrac{1}{||w||}\\sum\\limits_{x_i\\in M}y_i(\\vec w\\cdot \\vec x_i +b)\\)  \u4e0d\u8003\u8651 \\(\\dfrac{1}{||w||}\\) \u5c31\u5f97\u5230\u4e86\u611f\u77e5\u673a\u5b66\u4e60\u7684\u635f\u5931\u51fd\u6570\u3002 \u5373 \\(L(\\vec w,b)=-\\sum\\limits_{x_i\\in M}y_i(\\vec w\\cdot \\vec x_i+b)\\) </li> </ul> </li> <li>\u635f\u5931\u51fd\u6570 \\(L(\\vec w,b)\\) \u662f\u975e\u8d1f\u7684\uff0c\u5982\u679c\u6ca1\u6709\u8bef\u5206\u7c7b\u70b9\uff0c\u635f\u5931\u51fd\u6570\u503c\u4e3a \\(0\\). \u8bef\u5206\u7c7b\u70b9\u8d8a\u5c11\uff0c\u8bef\u5206\u7c7b\u70b9\u79bb\u8d85\u5e73\u9762\u8d8a\u8fd1\uff0c\u635f\u5931\u51fd\u6570\u503c\u8d8a\u5c0f\u3002\u7ed9\u5b9a\u8bad\u7ec3\u6570\u636e\u96c6 \\(T\\), \\(L(\\vec w,b)\\) \u662f \\(\\vec w, b\\) \u7684\u8fde\u7eed\u53ef\u5bfc\u51fd\u6570\u3002</li> </ul>"},{"location":"MLT/mlt2/#_4","title":"\u611f\u77e5\u673a\u5b66\u4e60\u7b97\u6cd5","text":""},{"location":"MLT/mlt2/#_5","title":"\u539f\u59cb\u5f62\u5f0f","text":"<p>\u6c42\u89e3\u6700\u4f18\u5316\u95ee\u9898 \\(\\min\\limits_{\\vec w,b} L(\\vec w,b) = -\\sum\\limits_{x_i\\in M}y_i(\\vec w\\cdot \\vec x_i +b)\\) </p> <p>\u91c7\u7528\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (Stochastic Gradient Descent, SGD) \u4f18\u5316  </p> <ul> <li>\u9996\u5148\u9009\u62e9\u4e00\u4e2a\u8d85\u5e73\u9762 \\(\\vec w_0,b_0\\) \u7136\u540e\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\u4e0d\u65ad\u5730\u6781\u5c0f\u5316\u76ee\u6807\u51fd\u6570\u3002 \u5047\u8bbe\u8bef\u5206\u7c7b\u70b9\u96c6\u5408 \\(M\\) \u662f\u56fa\u5b9a\u7684\uff0c\u5219\u635f\u5931\u51fd\u6570 \\(L(\\vec w,b)\\) \u7684\u68af\u5ea6\u6709 </li> </ul> \\[ \\begin{align*} \\nabla_w L(\\vec w,b) &amp;= -\\sum\\limits_{\\vec x_i\\in M} y_i\\vec x_i\\\\ \\nabla_b L(\\vec w,b) &amp;= -\\sum\\limits_{\\vec x_i\\in M}y_i \\end{align*} \\] <ul> <li>\u968f\u673a\u9009\u4e00\u4e2a\u8bef\u5206\u7c7b\u70b9 \\((\\vec x_i,y_i)\\), \u5bf9 \\(\\vec w,b\\) \u8fdb\u884c\u66f4\u65b0 \u5176\u4e2d \\(0&lt;\\eta\\leq 1\\) \u662f\u6b65\u957f\uff0c\u53c8\u79f0\u4e3a\u5b66\u4e60\u7387\u3002</li> </ul> \\[ \\begin{align*} \\vec w &amp; \\leftarrow \\vec w + \\eta y_x\\vec x_i\\\\ b &amp; \\leftarrow b + \\eta y_i \\end{align*} \\] <ul> <li>\u901a\u8fc7\u8fd9\u6837\u8fed\u4ee3\uff0c\u671f\u5f85\u635f\u5931\u51fd\u6570 \\(L(\\vec w,b)\\) \u4e0d\u65ad\u51cf\u5c0f\uff0c\u76f4\u5230\u4e3a \\(0\\).  </li> </ul> <p>\u968f\u673a\u68af\u5ea6\u4e0b\u964d \\(VS\\) \u68af\u5ea6\u4e0b\u964d\u6cd5</p> <p>\\(\\min\\dfrac{1}{2m}\\sum\\limits_{i=1}^m(&lt;\\vec w,\\vec x_i&gt;-y_i)^2\\ \\stackrel{\\Delta}{=} F(\\vec w)\\) \\(\\nabla_w F(w)=\\dfrac{1}{m}\\sum\\limits_{i=1}^m(&lt;\\vec w,\\vec x_i&gt;-b)\\cdot x_i\\) </p> <ul> <li>GD: \\(w_{t+1}=w_t-\\eta_t\\nabla_w F(w_t)\\) </li> <li>SGD: \\(w_{t-1}=w_t-\\eta_t(&lt;\\vec w_t,\\vec x_{it}&gt;-y_{it})\\cdot \\vec x_{it}\\) </li> </ul> <p>\u68af\u5ea6\u4e0b\u964d\u6cd5\u8981\u6c42\u6837\u672c\u68af\u5ea6\u7684\u5e73\u5747\u503c\uff0c\u800c\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\u53ea\u9700\u8981\u4efb\u4e00\u53d6\u4e00\u4e2a\u6837\u672c\u68af\u5ea6\u5373\u53ef\u3002\u540c\u65f6\u5e73\u5747\u503c\u7684\u671f\u671b\u548c\u548c\u5355\u4e2a\u6837\u672c\u7684\u671f\u671b\u76f8\u540c\u3002 \u5728\u8fd9\u4e2a\u7b97\u6cd5\u6211\u4eec\u5e94\u7528\u4e86\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\uff0c\u4e3a\u4e86\u7b80\u5316\uff0c\u6211\u4eec\u76f4\u63a5\u7528\u7b2c\u4e00\u4e2a\u8bef\u5206\u7c7b\u7684\u70b9\u4f5c\u4e3a\u968f\u673a\u9009\u62e9\u7684\u70b9\uff0c\u5e76\u7531\u6b64\u66f4\u65b0 \\(\\vec w, b\\).  </p> <p>\u7b97\u6cd5\uff1a\uff08\u611f\u77e5\u673a\u5b66\u4e60\u7b97\u6cd5\u7684\u539f\u59cb\u5f62\u5f0f\uff09   </p> <ul> <li>\u8f93\u5165\uff1a\u8bad\u7ec3\u6570\u636e\u96c6 \\(T=\\{(x_1,y_1),(x_2,y_2),\\ldots,(x_N, y_N)\\}\\) \u5176\u4e2d \\(x_i\\in \\mathcal{X}=\\mathcal{R}^n, y_i\\in \\mathcal{Y}=\\{+1,-1\\},i =1,2,\\cdots,N\\). \u5b66\u4e60\u7387 \\(0&lt;\\eta\\leq 1\\).   </li> <li>\u8f93\u51fa: \\(\\vec w, b\\); \u611f\u77e5\u673a\u6a21\u578b \\(f(x)=sign(\\vec w\\cdot \\vec x + b)\\)</li> </ul> <ol> <li>\u9009\u53d6\u521d\u503c \\(\\vec w_0,b_0\\)</li> <li>\u5728\u8bad\u7ec3\u96c6\u4e2d\u9009\u53d6\u6570\u636e \\((\\vec x_i,y_i)\\)</li> <li>\u5982\u679c \\(y_i(\\vec w\\cdot \\vec x_i + b)\\leq 0\\), \u5219 </li> </ol> \\[ \\begin{align*} \\vec w &amp; \\leftarrow \\vec w + \\eta y_x\\vec x_i\\\\ b &amp; \\leftarrow b + \\eta y_i \\end{align*} \\] <ol> <li>\u8f6c\u81f3 2, \u76f4\u81f3\u8bad\u7ec3\u96c6\u4e2d\u6ca1\u6709\u8bef\u5206\u7c7b\u70b9\u3002</li> </ol> Example <p>\u6b63\u4f8b \\(x_1=(3,3)^\\top, x_2=(4,3)^\\top\\) \u8d1f\u4f8b \\(x_3=(1,1)^\\top\\).  </p>"},{"location":"MLT/mlt2/#_6","title":"\u7b97\u6cd5\u7684\u6536\u655b\u6027","text":"<p>\u4e3a\u4fbf\u4e8e\u63a8\u5bfc\uff0c\u5c06\u504f\u7f6e \\(b\\) \u5e76\u5165\u6743\u503c\u5411\u91cf \\(\\vec w\\), \u8bb0\u4f5c \\(\\hat w=(w^\\top, b)^\\top\\), \u8f93\u5165\u5411\u91cf\u4e5f\u505a\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5373 \\(\\hat x=(x^\\top,1)^\\top\\). \u8fd9\u6837 \\(\\hat w, \\hat x\\in \\mathcal{R}^n, \\hat w\\cdot \\hat x = w\\cdot x + b\\).  </p> <p>\u5b9a\u7406\uff1a\u5bf9\u4e8e\u8bad\u7ec3\u6570\u636e\u96c6 \\(T\\) \uff08\u5b9a\u4e49\u540c\u524d\uff09 </p> <ul> <li>\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6 \\(||\\hat w_{opt}|| = 1\\) \u7684\u8d85\u5e73\u9762\u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u5b8c\u5168\u6b63\u786e\u5206\u5f00\uff1b\u4e14\u5b58\u5728 \\(\\gamma&gt;0\\) \u5bf9\u6240\u6709 \\(i=1,2,\\cdots, N\\) \u4f7f\u5f97 $y_i(\\hat w_{opt} \\cdot \\hat x_i)=y_i(w_{opt} \\cdot x_i + b_{opt}) \\geq \\gamma $</li> <li>\u4ee4 \\(R=\\max\\limits_{1\\leq i\\leq N}||\\hat x_i||\\), \u5219\u611f\u77e5\u673a\u7b97\u6cd5\u5728\u8bad\u7ec3\u6570\u636e\u96c6\u4e0a\u7684\u8bef\u5206\u7c7b\u6b21\u6570 \\(k\\) \u6ee1\u8db3 \\(k\\leq \\left(\\dfrac{R}{\\gamma}\\right)^2\\) </li> </ul> <ul> <li>\u8bef\u5206\u7c7b\u6b21\u6570 \\(k\\) \u662f\u6709\u4e0a\u754c\u7684\uff0c\u5f53\u8bad\u7ec3\u96c6\u7ebf\u6027\u53ef\u5206\u65f6\uff0c\u7b97\u6cd5\u539f\u59cb\u5f62\u5f0f\u662f\u6536\u655b\u7684\u3002</li> <li>\u7b97\u6cd5\u89e3\u4e0d\u552f\u4e00\uff0c\u65e2\u4f9d\u8d56\u4e8e\u521d\u503c\uff0c\u4e5f\u4f9d\u8d56\u4e8e\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u9009\u62e9\u8bef\u5206\u7c7b\u70b9\u7684\u9009\u62e9\u987a\u5e8f\u3002</li> <li>\u82e5\u9700\u8981\u552f\u4e00\u5206\u79bb\u8d85\u5e73\u9762\uff0c\u9700\u8981\u589e\u52a0\u7ea6\u675f\uff0c\u5982 SVM (\u652f\u6301\u5411\u91cf\u673a)</li> <li>\u7ebf\u6027\u4e0d\u53ef\u5206\u6570\u636e\u96c6\u4e0a\uff0c\u7ed3\u679c\u4e0d\u6536\u655b\uff0c\u8fed\u4ee3\u9707\u52a8\u3002</li> </ul>"},{"location":"MLT/mlt2/#_7","title":"\u5bf9\u5076\u5f62\u5f0f","text":"<p>\u57fa\u672c\u60f3\u6cd5\uff1a\u5c06 \\(\\vec w, b\\) \u8868\u793a\u4e3a\u5b9e\u4f8b \\(\\vec x_i\\) \u548c\u6807\u8bb0 \\(y_i\\) \u7684\u7ebf\u6027\u7ec4\u5408\u5f62\u5f0f\uff0c\u901a\u8fc7\u6c42\u89e3\u5176\u7cfb\u6570\u800c\u6c42\u5f97 \\(\\vec w\\) \u548c \\(b\\).  \u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe \\(\\vec w,b\\) \u5173\u4e8e \\((\\vec x_i,y_i)\\) \u7684\u589e\u91cf\u662f \\(\\alpha_i y_i \\vec x_i\\) \u548c \\(\\alpha_i y_i\\), \u90a3\u4e48\u6700\u540e\u5b66\u4e60\u5230\u7684 \\(\\vec w=\\sum\\limits_{i=1}^N\\alpha_i y_i \\vec x_i, b=\\sum\\limits_{i=1}^N \\alpha_i y_i\\). \u8fd9\u91cc \\(\\alpha_i\\geq 0\\), \u5f53 \\(\\eta= 1\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u5b9e\u4f8b\u70b9\u7531\u4e8e\u8bef\u5206\u800c\u8fdb\u884c\u66f4\u65b0\u7684\u6b21\u6570\u3002  </p> <p>\u7b97\u6cd5\uff1a\uff08\u611f\u77e5\u673a\u5b66\u4e60\u7b97\u6cd5\u7684\u5bf9\u5076\u5f62\u5f0f\uff09  </p> <ul> <li>\u8f93\u5165\uff1a\u8bad\u7ec3\u6570\u636e\u96c6 \\(T=\\{(x_1,y_1),(x_2,y_2),\\ldots,(x_N, y_N)\\}\\) \u5176\u4e2d \\(x_i\\in \\mathcal{X}=\\mathcal{R}^n, y_i\\in \\mathcal{Y}=\\{+1,-1\\},i =1,2,\\cdots,N\\). \u5b66\u4e60\u7387 \\(0&lt;\\eta\\leq 1\\).    </li> <li>\u8f93\u51fa: \\(\\vec alpha, b\\); \u611f\u77e5\u673a\u6a21\u578b \\(f(x)=sign\\left(\\sum\\limits_{j=1}^N \\alpha_j y_j \\vec x_j\\cdot \\vec x + b\\right)\\), \u5176\u4e2d \\(\\alpha=(\\alpha_1,\\alpha_2,\\cdots,\\alpha_N)^\\top\\). </li> </ul> <ol> <li>\\(\\vec \\alpha \\leftarrow 0 ,b \\leftarrow 0\\)</li> <li>\u5728\u8bad\u7ec3\u96c6\u4e2d\u9009\u53d6\u6570\u636e \\((\\vec x_i,y_i)\\)</li> <li>\u5982\u679c \\(y_i\\left(\\sum\\limits_{j=1}^N \\alpha_j y_j \\vec x_j\\cdot \\vec x_i + b\\right)\\leq 0\\), \u5219 </li> </ol> \\[ \\begin{align*} \\alpha_i &amp; \\leftarrow \\alpha_i + \\eta \\\\ b &amp; \\leftarrow b + \\eta y_i \\end{align*} \\] <ol> <li>\u8f6c\u81f3 2, \u76f4\u81f3\u8bad\u7ec3\u96c6\u4e2d\u6ca1\u6709\u8bef\u5206\u7c7b\u70b9\u3002 </li> </ol> <p>\u8fd9\u91cc\u5bf9\u5076\u5f62\u5f0f\u7684\u8bad\u7ec3\u5b9e\u4f8b\u53ea\u4ee5\u5185\u79ef\u5f62\u5f0f\u51fa\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5148\u5c06\u8bad\u7ec3\u96c6\u4e2d\u7684\u5b9e\u4f8b\u95f4\u7684\u5185\u79ef\u8ba1\u7b97\u51fa\u6765\u5e76\u4ee5\u77e9\u9635\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u5373 Gram \u77e9\u9635 \\(\\mathbf{G}=[x_i\\cdot x_j]_{N\\times N}\\) </p> Example <p> </p>"},{"location":"MLT/report/","title":"Distance Metric Learning for Large MarginNearest Neighbor Classification \u8bfb\u4e66\u62a5\u544a","text":""},{"location":"MLT/report/#_1","title":"\u7814\u7a76\u80cc\u666f","text":""},{"location":"MLT/report/#_2","title":"\u95ee\u9898\u4ecb\u7ecd","text":"<p>\u6211\u4eec\u5728\u8bfe\u4e0a\u5df2\u7ecf\u5b66\u8fc7\u4e86 kNN(k-Nearest Neighbors, k\u8fd1\u90bb) \u7b97\u6cd5\u3002kNN \u7b97\u6cd5\u5bf9\u4e8e\u65b0\u7684\u8f93\u5165\u5b9e\u4f8b\uff0c\u5728\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u627e\u5230\u4e0e\u8be5\u5b9e\u4f8b\u6700\u90bb\u8fd1\u7684 k \u4e2a\u5b9e\u4f8b\uff0c\u5e76\u901a\u8fc7\u591a\u6570\u8868\u51b3\u7684\u89c4\u5219\uff0c\u7531\u8fd9 k \u4e2a\u5b9e\u4f8b\u4e2d\u7684\u591a\u6570\u7c7b\u51b3\u5b9a\u8f93\u5165\u5b9e\u4f8b\u7684\u7c7b\u3002 \u5176\u4e2d\u8ddd\u79bb\u5ea6\u91cf\u662f k \u8fd1\u90bb\u6cd5\u7684\u4e09\u8981\u7d20\u4e4b\u4e00\uff0c\u800c\u4e0d\u540c\u7684\u8ddd\u79bb\u5ea6\u91cf\u4e5f\u53ef\u80fd\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u5b9e\u9645\u4e0a kNN \u5206\u7c7b\u7684\u51c6\u786e\u6027\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u7528\u4e8e\u8ba1\u7b97\u4e0d\u540c\u793a\u4f8b\u4e4b\u95f4\u8ddd\u79bb\u7684\u5ea6\u91cf\u6807\u51c6\u3002  \u5e38\u89c4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f46\u5927\u591a\u6570\u7684\u5b9e\u73b0\u90fd\u4f1a\u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u8ba1\u7b97\u7b80\u5355\u8ddd\u79bb\u3002\u4f46\u8fd9\u5374\u5ffd\u7565\u4e86\u53ef\u4ee5\u4ece\u5927\u578b\u5e26\u6807\u7b7e\u793a\u4f8b\u8bad\u7ec3\u96c6\u4e2d\u4f30\u8ba1\u51fa\u6765\u7684\u4efb\u4f55\u7edf\u8ba1\u6b63\u6001\u5206\u5e03\u3002\u4e8e\u662f\u6211\u4eec\u60f3\u5f97\u5230\u4e00\u79cd\u5ea6\u91cf\uff0c\u80fd\u591f\u7ed3\u5408\u8bad\u7ec3\u96c6\u672c\u8eab\u7684\u7edf\u8ba1\u7279\u5f81\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u5730\u505a\u9884\u6d4b\u5206\u7c7b\u3002  </p> <p>\u8bba\u6587\u7684\u65b9\u6cd5\u662f\u57fa\u4e8e Mahalanobis \u8ddd\u79bb\u5ea6\u91cf\u8fdb\u884c\u8ddd\u79bb\u5ea6\u91cf\u5b66\u4e60\uff0c\u5176\u76ee\u6807\u662f \u4f7f k \u4e2a\u6700\u8fd1\u90bb\u7684\u5b9e\u4f8b\u603b\u662f\u5c5e\u4e8e\u540c\u4e00\u7c7b\uff0c\u800c\u6765\u81ea\u4e0d\u540c\u7c7b\u522b\u7684\u793a\u4f8b\u5219\u88ab\u5206\u9694\u5f00\u3002</p>"},{"location":"MLT/report/#_3","title":"\u76f8\u5173\u5de5\u4f5c","text":"<p>\u5f53 \\(M=L^\\top L\\) \u65f6\u6211\u4eec\u5b9a\u4e49\u9a6c\u6c0f\u5ea6\u91cf\u4e3a \\(D_M(x_i,x_j)=(x_i-x_j)^\\top M(x_i-x_j)\\). \u8fd9\u76f8\u5f53\u4e8e\u901a\u8fc7\u7ebf\u6027\u53d8\u6362 \\(\\vec x' =L\\vec x\\) \u540e\u8ba1\u7b97\u6b27\u6c0f\u8ddd\u79bb\u3002\u800c\u8ddd\u79bb\u5ea6\u91cf\u5b66\u4e60\u7684\u76ee\u6807\u53ef\u4ee5\u4ece\u4e24\u65b9\u9762\u6765\u770b\uff1a\u5b66\u4e60\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362 \\(\\vec x' = L\\vec x\\); \u5b66\u4e60\u9a6c\u6c0f\u5ea6\u91cf \\(M=L^\\top L\\).  </p> <ul> <li>\u5b66\u4e60\u7ebf\u6027\u53d8\u6362 \\(L\\) \u65f6\uff0c\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u662f\u7279\u5f81\u5411\u91cf\u65b9\u6cd5\u3002 \u8fd9\u91cc \\(L\\) \u53ef\u4ee5\u770b\u4f5c \\(M\\) \u7684\u8bf1\u56e0\u3002 \u5e38\u7528\u7684\u65b9\u6cd5\u6709 PCA(\u4e3b\u6210\u5206\u5206\u6790)\uff0cLDA(\u7ebf\u6027\u5224\u522b\u5206\u6790)\uff0cRCA(\u76f8\u5173\u6210\u5206\u5206\u6790).  </li> <li> <p>\u5b66\u4e60\u9a6c\u6c0f\u5ea6\u91cf \\(M\\) \u65f6\uff0c\u5e38\u7528\u51f8\u4f18\u5316\u7684\u65b9\u6cd5\u3002  </p> <ul> <li>MMC(MAHALANOBIS METRIC FOR CLUSTERING, \u9a6c\u6c0f\u8ddd\u79bb\u805a\u7c7b) \u5373\u6700\u5c0f\u5316\u7c7b\u522b\u76f8\u4f3c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u540c\u65f6\u6700\u5927\u5316\u7c7b\u522b\u4e0d\u540c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5e76\u5c06\u5176\u8868\u793a\u4e3a\u4e00\u4e2a\u51f8\u4f18\u5316\u95ee\u9898\u3002  </li> </ul> \\[ \\begin{align*} Maximize\\  &amp; \\sum_{i,j}(1-y_{ij})\\sqrt{\\mathcal{D}_M(\\vec x_i,\\vec x_j)} \\\\ subject\\ to &amp; \\ (1) \\sum_{ij}y_{ij}\\sqrt{\\mathcal{D}_M(\\vec x_i,\\vec x_j)} \\leq 1\\\\ &amp; \\ (2)\\mathbf{M}\\succeq 0 \\end{align*} \\] <ul> <li>POLA(The Pseudometric Online Learning Algorithm, \u4f2a\u5ea6\u91cf\u5728\u7ebf\u5b66\u4e60\u7b97\u6cd5) POLA \u4e0e MMA \u7c7b\u4f3c\uff0c\u8bd5\u56fe\u5b66\u4e60\u4e00\u79cd\u5ea6\u91cf\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u7f29\u77ed\u6807\u8bb0\u76f8\u4f3c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5e76\u6269\u5c55\u6807\u8bb0\u4e0d\u540c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u660e\u786e\u5730\u9f13\u52b1\u4f7f\u7528\u6709\u9650\u7684\u8fb9\u754c\u6765\u5206\u9694\u4e0d\u540c\u7684\u6807\u8bb0\u8f93\u5165\u3002</li> <li>NCA(Neighborhood Component Analysis, \u90bb\u57df\u6210\u5206\u5206\u6790)  NCA \u4e2d\u7684\u968f\u673a\u5206\u7c7b\u5668\u662f\u901a\u8fc7\u9644\u8fd1\u8bad\u7ec3\u5b9e\u4f8b\u7684\u591a\u6570\u6295\u7968\u6765\u6807\u8bb0\u67e5\u8be2\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f k \u4e2a\u6700\u8fd1\u90bb\u3002NCA \u5bf9\u4e8e\u4e0d\u540c\u6837\u672c\u4e4b\u95f4\u5b9a\u4e49\u4e86\u4e00\u4e2a softmax \u6982\u7387\uff1a</li> </ul> \\[ p_{ij}=\\begin{cases} \\dfrac{exp(-||\\mathbf{L}x_i-\\mathbf{L}x_j||^2)}{\\sum_{k\\neq i}(exp(-||\\mathbf{L}x_i-\\mathbf{L}x_k||^2))} \\quad &amp; if\\ i\\neq j \\\\ \\quad \\quad \\quad \\quad \\quad \\quad 0   \\quad &amp; if\\ i=j  \\end{cases} \\] <p>\u800c\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u4e3a \\(\\epsilon_{NCA}=1-\\dfrac{1}{n}\\sum_{ij}p_{ij}y_{ij}\\) * \u4e0a\u8ff0\u4e09\u4e2a\u65b9\u6cd5\u4e2d, POLA \u548c MMC \u6709\u7740\u76f8\u540c\u7684\u4f18\u52bf\u548c\u52a3\u52bf\u3002\u8fd9\u4e24\u79cd\u7b97\u6cd5\u90fd\u57fa\u4e8e\u51f8\u4f18\u5316\uff0c\u4e0d\u5b58\u5728\u4f2a\u5c40\u90e8\u6781\u5c0f\u503c\u3002\u4f46\u5bf9\u8f93\u5165\u548c\u7c7b\u6807\u7b7e\u7684\u5206\u5e03\u505a\u4e86\u9690\u542b\u7684\u5047\u8bbe\uff08\u5355\u5cf0\u6216\u8005\u6b63\u6001\u5206\u5e03\uff09\uff0c\u4f46 kNN \u5e76\u6ca1\u6709\u9690\u542b\u5730\u5bf9\u8f93\u5165\u5206\u5e03\u505a\u51fa\u53c2\u6570\u5047\u8bbe\u3002\u800c\u5bf9\u4e8e NCA \u6765\u8bf4\uff0c\u867d\u7136\u8ddd\u79bb\u5ea6\u91cf\u7684\u53c2\u6570\u662f\u8fde\u7eed\u53ef\u5fae\u7684\uff0c\u4f46\u4e0a\u5f0f\u4e0d\u662f\u51f8\u7684\uff0c\u4e5f\u4e0d\u80fd\u7528\u7279\u5f81\u5411\u91cf\u65b9\u6cd5\u6700\u5c0f\u5316, \u5373 NCA \u4e2d\u7684\u4f18\u5316\u53ef\u80fd\u5b58\u5728\u4f2a\u5c40\u90e8\u6781\u5c0f\u503c\u3002</p> </li> </ul>"},{"location":"MLT/report/#_4","title":"\u4e3b\u8981\u601d\u8def","text":"<p>\u8bba\u6587\u63d0\u51fa\u7684\u8ddd\u79bb\u5ea6\u91cf\u5b66\u4e60\u57fa\u4e8e\u4e0a\u8ff0\u7b97\u6cd5\u3002 \u8be5\u6a21\u578b\u57fa\u4e8e\u4e24\u4e2a\u76f4\u89c9</p> <ul> <li>\u6bcf\u4e2a\u8bad\u7ec3\u8f93\u5165 \\(\\vec x_i\\) \u5e94\u4e0e\u5176 k \u4e2a\u6700\u8fd1\u90bb\u5c45\u5171\u4eab\u76f8\u540c\u7684\u6807\u7b7e \\(y_i\\)</li> <li>\u5176\u6b21\uff0c\u5177\u6709\u4e0d\u540c\u6807\u7b7e\u7684\u8bad\u7ec3\u8f93\u5165\u5e94\u88ab\u5e7f\u6cdb\u5206\u79bb\u3002</li> </ul> <p>\u8fd9\u91cc\u8bba\u6587\u63d0\u51fa\u4e86\u4e24\u4e2a\u6982\u5ff5, target neighors(\u76ee\u6807\u90bb\u5c45) \u548c impostors(\u4f2a\u88c5\u8005) </p> <ul> <li>\u76ee\u6807\u90bb\u5c45 \u5b66\u4e60\u5f00\u59cb\u65f6\u6211\u4eec\u5c31\u6307\u5b9a\u6bcf\u4e2a\u8f93\u5165 \\(\\vec x_i\\) \u7684\u76ee\u6807\u90bb\u5c45\uff0c\u5373\u6211\u4eec\u6700\u5e0c\u671b \\(\\vec x_i\\) \u63a5\u8fd1\u7684\u70b9\u3002\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u5b66\u4e60\u8f93\u5165\u7a7a\u95f4\u7684\u7ebf\u6027\u53d8\u6362\uff0c\u8ba9 \\(\\vec x_i\\) \u7684\u76ee\u6807\u90bb\u5c45\u6210\u4e3a\u5176 k \u8fd1\u90bb\u90bb\u5c45\u3002 \u6211\u4eec\u7528 \\(i\\leadsto j\\) \u8868\u793a \\(i\\) \u662f \\(j\\) \u7684\u76ee\u6807\u90bb\u5c45\uff0c\u6ce8\u610f\u5230\u8fd9\u4e2a\u5173\u7cfb\u4e0d\u662f\u5bf9\u79f0\u7684\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u6709\u9884\u5907\u77e5\u8bc6\u3001\u8f85\u52a9\u4fe1\u606f\u6307\u5b9a\u76ee\u6807\u90bb\u5c45\u3002\u5982\u679c\u6ca1\u6709\u53ef\u4ee5\u6839\u636e\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u8ba1\u7b97\u5177\u6709\u76f8\u540c\u7c7b\u522b\u6807\u7b7e\u7684 k \u4e2a\u6700\u8fd1\u90bb\u5c45\u3002</li> <li>\u4f2a\u88c5\u8005 \u5468\u754c\u662f\u6bcf\u4e2a\u8f93\u5165\u7684\u76ee\u6807\u90bb\u5c45\u6784\u6210\u7684\u8303\u56f4\u3002\u6211\u4eec\u628a\u4fb5\u5165\u5468\u754c\u7684\u5f02\u7c7b\u6807\u7b7e\u70b9\u79f0\u4e3a\u4f2a\u88c5\u8005\u3002 \u4e3a\u4e86\u589e\u5f3a\u7b97\u6cd5\u7684\u9c81\u68d2\u6027\uff0c\u6211\u4eec\u5728\u5468\u754c\u4e0e\u5f02\u7c7b\u70b9\u4fdd\u6301\u4e00\u4e2a\u5206\u7c7b\u88d5\u5ea6\u3002\u6ee1\u8db3 \\(||\\mathbf{L}(\\vec x_i-\\vec x_l)||^2 \\leq ||\\mathbf{L}(\\vec x_i - \\vec x_j)||^2 + 1\\) (\u8fd9\u91cc \\(x_i, x_j\\) \u6807\u7b7e\u76f8\u540c, \\(x_j\\) \u662f \\(x_i\\) \u7684\u76ee\u6807\u90bb\u5c45) \u7684\u70b9 \\(x_l\\) \u4e3a\u4f2a\u88c5\u70b9\u3002 \u8bba\u6587\u4e2d\u4e5f\u7ed9\u51fa\u4e86\u56fe\u89e3\u91ca </li> </ul> <p>\u57fa\u4e8e\u4e0a\u9762\u7684\u4e24\u4e2a\u76f4\u89c9\uff0c\u8bba\u6587\u7684\u6a21\u578b\u4e2d\u635f\u5931\u51fd\u6570\u5b58\u5728\u4e24\u4e2a\u7ade\u4e89\u9879</p> <ul> <li>\u4e00\u4e2a\u9879\u60e9\u7f5a\u76f8\u540c\u6807\u7b7e\u4f46\u8ddd\u79bb\u8f83\u8fdc\u7684\u9644\u8fd1\u8f93\u5165\u4e4b\u95f4\u7684\u5927\u8ddd\u79bb \\(\\epsilon_{pull}(\\mathbf{L})=\\sum\\limits_{j\\leadsto i}||\\mathbf{L}(\\vec x_i - \\vec x_j)||^2\\)  \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u4ec5\u60e9\u7f5a\u8f93\u5165\u548c\u5176\u76ee\u6807\u90bb\u5c45\u4e4b\u95f4\u7684\u5927\u8ddd\u79bb\u800c\u5e76\u4e0d\u60e9\u7f5a\u6240\u6709\u540c\u7c7b\u6807\u8bb0\u8f93\u5165\u4e4b\u95f4\u7684\u5927\u8ddd\u79bb\u3002\u8fd9\u662f\u56e0\u4e3a\u51c6\u786e\u7684 kNN \u5206\u7c7b\u5e76\u4e0d\u8981\u6c42\u6240\u6709\u540c\u7c7b\u6807\u8bb0\u8f93\u5165\u90fd\u7d27\u5bc6\u805a\u96c6\u5728\u4e00\u8d77\u3002</li> <li>\u4e00\u4e2a\u9879\u60e9\u7f5a\u4e0d\u540c\u6807\u7b7e\u4e4b\u95f4\u8ddd\u79bb\u8fc7\u5c0f\u7684\u8f93\u5165  \\(\\epsilon_{push}(\\mathbf{L})=\\sum\\limits_{i,j\\leadsto i}\\sum\\limits_l (1-y_{il})\\left[1+||\\mathbf{L}(\\vec x_i-\\vec x_j)^2-||\\mathbf{L}(\\vec x_i -\\vec x_l)||^2\\right]_{+}\\) </li> <li>\u6700\u540e\u6211\u4eec\u5f97\u5230\u5408\u9875\u635f\u5931\u51fd\u6570 \\(\\epsilon(\\mathbf{L})=(1-\\mu)\\epsilon_{pull}(\\mathbf{L})+\\mu \\epsilon_{pull}(\\mathbf{L})\\)  \u8bba\u6587\u4e2d\u63d0\u5230\u5408\u9875\u635f\u5931\u51fd\u6570\u5bf9 \\(\\mu\\) \u7684\u53d6\u503c\u5e76\u4e0d\u654f\u611f\uff0c\u4e00\u822c\u53d6 0.5 \u5373\u53ef\u3002</li> </ul>"},{"location":"MLT/report/#_5","title":"\u51f8\u4f18\u5316","text":"<p>\u6211\u4eec\u5bf9\u635f\u5931\u51fd\u6570\u7684\u7ebf\u6027\u53d8\u6362\u7684\u8ddd\u79bb\u7528\u9a6c\u6c0f\u8ddd\u79bb\u8868\u793a \\(\\epsilon(\\mathbf{M})=(1-\\mu)\\sum\\limits_{i,j\\leadsto i}\\mathcal{D}_\\mathbf{M}(\\vec x_i, \\vec x_j)+\\mu\\sum\\limits_{i,j\\leadsto i}\\sum\\limits_l(1-y_{il})\\left[1+\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_j)-\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_l)\\right]_+\\) \u8fd9\u6837\u7684\u635f\u5931\u51fd\u6570\u635f\u5931\u662f\u4e00\u4e2a\u57fa\u4e8e\u534a\u6b63\u5b9a\u77e9\u9635\u9650\u5236\u6761\u4ef6\u7684\u51f8\u4f18\u5316\u95ee\u9898\u3002 </p> <p>\u6709\u65f6\u5019\u5468\u754c\u7684\u6761\u4ef6\u4e0d\u4e00\u5b9a\u80fd\u4e25\u683c\u6ee1\u8db3\uff0c\u56e0\u6b64\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u975e\u8d1f\u677e\u5f1b\u53d8\u91cf \\(\\xi_{ijl}\\). \u5f97\u5230\u4e0b\u9762\u7684\u51f8\u4f18\u5316\u95ee\u9898</p> \\[ \\begin{align*} Minimize &amp; \\ (1-\\mu)\\sum_{i,j\\leadsto i}(\\vec x_i-\\vec x_j)^\\top \\mathbf{M}(\\vec x_i- \\vec x_j)+\\mu \\sum_{i, j\\leadsto i,l}(1-y_{il})\\xi_{ijl} \\\\ subject\\ to \\ &amp; (1) \\ (\\vec x_i-\\vec x_l)^\\top \\mathbf{M}(\\vec x_i-\\vec x_l) - (\\vec x_i-\\vec x_j)^\\top \\mathbf{M} (\\vec x_i-\\vec x_j) \\geq 1-\\xi_{ijl}\\\\ &amp; (2) \\ \\xi_{ijl}\\geq 0\\\\ &amp; (3) \\ \\mathbf{M}\\succeq 0 \\end{align*} \\] <p>\u6b64\u5916\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5927\u90e8\u5206\u7684\u677e\u5f1b\u53d8\u91cf \\(\\xi_{ijl}=0\\) \u800c\u975e\u6b63\u503c\uff0c\u53ef\u4ee5\u5f97\u5230\u7279\u6b8a\u76ee\u7684\u7684\u6c42\u89e3\u5668\u3002\u8be5\u6c42\u89e3\u5668\u57fa\u4e8e\u5b50\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u548c\u4ea4\u66ff\u6295\u5f71\u7b97\u6cd5\uff0c\u53ef\u4ee5\u52a0\u901f\u6c42\u89e3\u7684\u8fc7\u7a0b\u3002</p>"},{"location":"MLT/report/#_6","title":"\u57fa\u4e8e\u80fd\u91cf\u5206\u7c7b","text":"<p>\u57fa\u4e8e Mahalabonis Metric \u7684\u77e9\u9635 \\(M\\) \u53ef\u7528\u4e8e kNN \u7b97\u6cd5\u6765\u89e3\u51b3\u5206\u7c7b\u95ee\u9898\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u635f\u8017\u51fd\u6570\u4f5c\u4e3a\u6240\u8c13\u7684\u201c\u57fa\u4e8e\u80fd\u91cf\u7684\u201d\u5206\u7c7b\u5668\u3002  \u5bf9\u4e8e\u4e00\u4e2a\u6d4b\u8bd5\u6837\u672c\uff0c\u6211\u4eec\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u989d\u5916\u7684\u8bad\u7ec3\u6837\u672c\uff0c\u5bf9\u53ef\u80fd\u7684\u6807\u7b7e\u5206\u522b\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u7684\u503c\uff0c\u6700\u540e\u9009\u62e9\u635f\u5931\u51fd\u6570\u503c\u6700\u5c0f\u7684\u7c7b\u522b\u4f5c\u4e3a\u8fd9\u4e2a\u6837\u672c\u7684\u9884\u6d4b\u503c\u3002  </p> \\[ y_t = \\arg\\min\\left\\{(1-\\mu)\\sum\\limits_{j\\leadsto t}\\mathcal{D}_\\mathbf{M}(\\vec x_t,\\vec x_j) + \\mu\\sum\\limits_{j\\leadsto t,l}(1-y_{tl})\\left[1+\\mathcal{D}_\\mathbf{M}(\\vec x_t-\\vec x_j)-\\mathcal{D}_\\mathbf{M}(\\vec x_t-\\vec x_l)\\right]_+ +\\mu\\sum\\limits_{i,j\\leadsto t}(1-y_{it})\\left[1+\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_j)-\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_t)\\right] \\right\\}. \\]"},{"location":"MLT/report/#_7","title":"\u6210\u679c\u548c\u6269\u5c55","text":"<p>\u5b9e\u9a8c\u4e2d\u8bc4\u4f30\u4e86\u4e5d\u4e2a\u4e0d\u540c\u5927\u5c0f\u548c\u96be\u5ea6\u7684\u6570\u636e\u96c6\u7684 LMNN \u5206\u7c7b\u3002\u5176\u4e2d\u4e00\u4e9b\u6570\u636e\u96c6\u6765\u81ea\u4e8e\u56fe\u50cf\u3001\u8bed\u97f3\u548c\u6587\u672c\u7684\u96c6\u5408\uff0c\u4ea7\u751f\u4e86\u975e\u5e38\u9ad8\u7ef4\u7684\u8f93\u5165\uff0c\u9488\u5bf9\u8fd9\u4e9b\u4f7f\u7528\u4e86PCA\u6765\u51cf\u5c11\u8bad\u7ec3\u524d\u8f93\u5165\u7684\u7ef4\u6570\u3002\u5176\u4e2d\u6d4b\u8bd5\u96c6\u5305\u62ec\u5c0f\u6570\u636e\u96c6\u3001\u4eba\u8138\u8bc6\u522b\u4efb\u52a1\u3001\u8bed\u97f3\u8bc6\u522b\u3001\u5b57\u6bcd\u8bc6\u522b\u3001\u6587\u672c\u5206\u7c7b\u3001\u624b\u5199\u6570\u5b57\u8bc6\u522b\u3002 \u5728\u5404\u79cd\u5927\u5c0f\u548c\u96be\u6613\u7a0b\u5ea6\u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5\u540e\u53d1\u73b0\uff0c\u5728\u6b64\u65b9\u5f0f\u4e0b\u8bad\u7ec3\u51fa\u6765\u7684\u6307\u6807\u80fd\u591f\u663e\u8457\u63d0\u9ad8 kNN \u5206\u7c7b\u7ed3\u679c\uff0c\u5177\u4f53\u5982\u4e0b\uff1a</p> <ul> <li>\u4f7f\u7528\u9a6c\u6c0f\u8ddd\u79bb\u7684 LMNN \u5206\u7c7b\u65b9\u6cd5\u59cb\u7ec8\u4f18\u4e8e\u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u7684 kNN \u5206\u7c7b\u65b9\u6cd5\u3002</li> <li>\u57fa\u4e8e\u80fd\u91cf\u7684\u51b3\u7b56\u89c4\u5219\u8fdb\u4e00\u6b65\u6539\u5584\u4e86\u4f7f\u7528\u9a6c\u6c0f\u8ddd\u79bb\u8fdb\u884c kNN \u5206\u7c7b</li> <li>\u5f53\u9700\u8981\u67d0\u79cd\u5f62\u5f0f\u964d\u7ef4\u9884\u5904\u7406\u65f6, LMNN\u5206\u7c7b\u4e0e PCA \u76f8\u6bd4LDA\u6548\u679c\u66f4\u597d\u3002</li> <li>LMNN \u5206\u7c7b\u5bf9\u8f83\u5927\u6570\u636e\u96c6\u4ea7\u751f\u66f4\u5927\u7684\u6539\u8fdb\u3002 \u8bba\u6587\u8ba4\u4e3a\u968f\u7740\u6837\u672c\u5bc6\u5ea6\u589e\u52a0\uff0c\u53ef\u4ee5\u9009\u62e9\u7684\u76ee\u6807\u90bb\u5c45\u5b66\u4e60\u5230\u66f4\u53ef\u9760\u7684\u5224\u522b\u4fe1\u53f7\u3002\uff08\u9009\u62e9\u7684\u65b9\u6cd5\u662f\u57fa\u4e8e\u964d\u7ef4\u540e\u7684\u8f93\u5165\u7a7a\u95f4\u4e2d\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u9009\u62e9\u76ee\u6807\u90bb\u5c45\uff09</li> <li>\u57fa\u4e8e\u80fd\u91cf\u7684 LMNN \u7b97\u6cd5\u4e0e SVM \u6c34\u5e73\u76f8\u5f53\u3002</li> </ul> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u8bba\u6587\u8fd8\u63d0\u51fa\u4e86\u6734\u7d20 LMNN \u7b97\u6cd5\u53ef\u4ee5\u6709\u7684\u6539\u5584</p> <ul> <li>Multi-pass LMNN(\u591a\u6b21\u8fed\u4ee3 LMNN) LMNN \u5b58\u5728\u9700\u8981\u9884\u5148\u6307\u5b9a\u76ee\u6807\u90bb\u5c45\u7684\u7f3a\u70b9\u3002\u6211\u4eec\u9ed8\u8ba4\u9009\u62e9\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u4e0d\u4e00\u5b9a\u80fd\u7b26\u5408\u5b9e\u9645\u8fd0\u7528\u7684\u60c5\u51b5\u3002\u56e0\u6b64\u53ef\u4ee5\u91c7\u7528\u8fed\u4ee3\u7684\u65b9\u5f0f\uff0c\u6bcf\u8f6e\u8fed\u4ee3\u57fa\u4e8e\u4e4b\u524d\u7ed3\u679c\u91cd\u65b0\u6307\u5b9a\u76ee\u6807\u90bb\u5c45\u3002  </li> <li>Multi-metric LMNN(\u591a\u5c3a\u5ea6 LMNN) \u5728\u67d0\u4e9b\u6570\u636e\u96c6\u4e0a\uff0c\u8f93\u5165\u7a7a\u95f4\u7684\u5168\u5c40\u7ebf\u6027\u53d8\u6362\u53ef\u80fd\u4e0d\u8db3\u4ee5\u6539\u8fdbkNN\u5206\u7c7b\u3002\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u591a\u4e2a\u672c\u5730\u7ebf\u6027\u8f6c\u6362\u800c\u4e0d\u662f\u5355\u4e00\u5168\u5c40\u7ebf\u6027\u8f6c\u6362\u3002 \u5177\u4f53\u53ef\u4ee5\u4f7f\u7528 K-means \u7b49\u805a\u7c7b\u7b97\u6cd5\u5148\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u5272\u805a\u7c7b\uff0c\u968f\u540e\u5bf9\u6bcf\u4e00\u4e2a\u805a\u7c7b\u8bad\u7ec3\u4e00\u4e2a\u5c40\u90e8\u7684\u9a6c\u6c0f\u8ddd\u79bb\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u7ec4\u5408\u3002</li> <li>Kernel Version \u548c\u4e0a\u8bfe\u6240\u8bb2\u7684 SVM \u4e2d\u7684\u6838\u65b9\u6cd5\u7c7b\u4f3c, LMNN \u4e5f\u53ef\u4ee5\u5229\u7528\u6838\u65b9\u6cd5\u6269\u5c55\u5230\u4e00\u4e2a\u975e\u7ebf\u6027\u7279\u5f81\u7a7a\u95f4\u3002  </li> <li>Dimensionality Reduction(\u7ef4\u6570\u5f52\u7ea6) \u6839\u636e\u8bad\u7ec3\u51fa\u6765\u7684\u7ebf\u6027\u53d8\u6362\u77e9\u9635 \\(L\\), \u53d6\u4ed6\u7684\u4e3b\u7279\u5f81\uff08\u7279\u5f81\u503c\u6700\u5927\u7684\u7279\u5f81\u5411\u91cf\uff09\u6784\u5efa\u6620\u5c04\u77e9\u9635 \\(P\\), \u539f\u6570\u636e\u5c31\u53ef\u4ee5\u901a\u8fc7\u6620\u5c04\u77e9\u9635\u8fdb\u884c\u964d\u7ef4\u3002  </li> <li>Ball Tree kNN \u7684\u590d\u6742\u5ea6\u4f9d\u8d56\u4e8e\u6837\u672c\u6570\u91cf\u548c\u6837\u672c\u7684\u7ef4\u5ea6\uff0c\u5f53\u6570\u636e\u91cf\u548c\u7ef4\u5ea6\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u8ba1\u7b97\u7684\u590d\u6742\u5ea6\u4f1a\u5f88\u9ad8. Ball Tree \u7684\u6bcf\u4e2a\u5206\u5272\u70b9\u8ddd\u79bb\u7684\u8fb9\u754c\u7b49\u4e8e\u7403\u5fc3\u5230\u6d4b\u8bd5\u70b9\u8ddd\u79bb\u51cf\u53bb\u7403\u7684\u534a\u5f84\u3002\u7ecf\u8fc7\u6d4b\u8bd5\u53d1\u73b0 Ball Tree \u5bf9\u4e8e\u4e0d\u540c\u7684\u7ef4\u5ea6\u6570\u636e\u90fd\u80fd\u8fbe\u5230\u641c\u7d22\u7684\u4f18\u5316\u3002\u7ef4\u5ea6\u8d8a\u4f4e\uff0c\u8fd9\u79cd\u4f18\u5316\u6548\u7387\u8d8a\u9ad8\u3002</li> </ul>"},{"location":"MLT/report/#_8","title":"\u8ba8\u8bba","text":"<p>\u8fd9\u7bc7\u8bba\u6587\u8bb2\u89e3\u4e86\u4e00\u79cd\u57fa\u4e8e\u9a6c\u6c0f\u5ea6\u91cf\u7684\u8bad\u7ec3\u65b9\u6cd5\uff0c\u5c06\u8bad\u7ec3\u7684\u8fc7\u7a0b\u8f6c\u5316\u4e3a\u89e3\u51b3\u4e00\u4e2a SDP \u95ee\u9898\u3002\u540c\u65f6\u57fa\u4e8e\u6b64\u63d0\u51fa\u4e86\u4e0d\u4f9d\u8d56\u8d85\u53c2\u6570\u7684 LMNN \u7b97\u6cd5\uff0c\u6781\u5927\u63d0\u5347\u4e86 kNN \u5206\u7c7b\u5668\u7684\u51c6\u786e\u6027\uff1b\u540c\u65f6\u8fd8\u63d0\u51fa\u4e86\u57fa\u4e8e\u80fd\u91cf\u7684\u7b97\u6cd5\uff0c\u4ee5\u89e3\u51b3\u5206\u7c7b\u95ee\u9898\u3002</p> <p>\u56de\u987e\u8fd9\u7bc7\u8bba\u6587\uff0c\u867d\u7136\u4e3b\u8981\u6d89\u53ca\u5230\u5ea6\u91cf\u5b66\u4e60\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u4f46\u601d\u60f3\u4e0a\u548c\u6211\u4eec\u4e0a\u8bfe\u5b66\u4e60\u7684 SVM \u662f\u5f88\u63a5\u8fd1\u7684\u3002 \u652f\u6301\u5411\u91cf\u673a\u672c\u8d28\u4e0a\u4e5f\u662f\u8981\u627e\u4e00\u4e2a\u6700\u5927\u5316\u5206\u7c7b\u88d5\u5ea6\u7684\u8d85\u5e73\u9762\uff0c\u5e76\u7528\u8fd9\u4e2a\u8d85\u5e73\u9762\u5b8c\u6210\u5206\u7c7b\u4efb\u52a1\u3002\uff08\u548c\u524d\u6587\u63d0\u5230\u7684\u5468\u754c\u7c7b\u4f3c\uff09\u800c\u8fd9\u662f\u4e00\u4e2a\u51f8\u4e8c\u6b21\u89c4\u5212\u95ee\u9898\u3002\u5bf9\u4e8e\u6570\u636e\u96c6\u4e2d\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u60c5\u51b5\uff0c\u5373\u51fd\u6570\u95f4\u9694\u65e0\u6cd5\u5927\u4e8e 1 \u7684\u70b9\u6211\u4eec\u5f15\u5165\u4e86\u677e\u5f1b\u53d8\u91cf\uff0c\u6539\u5199\u540e\u7684\u4f18\u5316\u95ee\u9898\u5176\u5b9e\u5c31\u662f\u5728\u5bfb\u627e\u6700\u5927\u88d5\u5ea6\u7684\u51b3\u7b56\u8fb9\u754c\u548c\u677e\u5f1b\u56e0\u5b50\u7ec4\u5408\uff0c\u4f7f\u5f97\u8fdd\u80cc\u7ebf\u6027\u53ef\u5206\u7684\u6570\u636e\u70b9\u5f71\u54cd\u6700\u5c0f\u3002 \u800c\u8bba\u6587\u4e2d\u7684\u7b97\u6cd5\u5c31\u662f\u5c06\u4e0a\u8ff0 SVM \u7684 margin \u601d\u60f3\u5e94\u7528\u5230\u4e86 kNN \u7b97\u6cd5\u4e2d\uff0c\u5373\u6c42\u4e00\u4e2a\u8ddd\u79bb\u5ea6\u91cf\uff0c\u4f7f\u5f97\u6837\u672c\u70b9\u53ca\u5176\u76ee\u6807\u90bb\u5c45\u7ec4\u6210\u7684\u5468\u754c\u7684\u5206\u7c7b\u88d5\u5ea6\u5c3d\u53ef\u80fd\u5927\u3002 </p> <p>\u6b64\u5916\u6211\u8ba4\u4e3a\u8bba\u6587\u4e2d\u63d0\u5230\u7684\u6269\u5c55\u4e5f\u5f88\u597d\u5730\u6539\u5584\u4e86\u6734\u7d20 LMNN \u7b97\u6cd5\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u4e5f\u548c\u6211\u4eec\u4e0a\u8bfe\u6240\u5b66\u7684\u5185\u5bb9\u606f\u606f\u76f8\u5173\u3002\u8fd9\u4e9b\u4f18\u5316\u601d\u60f3\u4e5f\u5177\u6709\u76f8\u5f53\u7684\u666e\u9002\u6027\uff1a\u8fed\u4ee3\u8bad\u7ec3\uff0c\u6bcf\u6b21\u7684\u76ee\u6807\u90bb\u5c45\u662f\u57fa\u4e8e\u4e4b\u524d\u7684\u8bad\u7ec3\u7ed3\u679c\uff1b\u5148\u805a\u7c7b\u518d\u57fa\u4e8e\u6bcf\u4e2a\u7c7b\u5206\u522b\u8bad\u7ec3\u5ea6\u91cf\uff1b\u5229\u7528\u6838\u65b9\u6cd5\u6620\u5c04\u5230\u9ad8\u7ef4\u7a7a\u95f4\uff1b\u6570\u636e\u964d\u7ef4\uff1b\u4ee5\u53ca ball tree \u4f18\u5316 kNN \u8fd1\u90bb\u641c\u7d22\u3002</p> <p>\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4ec5\u9002\u7528\u4e8e kNN \u95ee\u9898\uff0c\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u5c06\u5176\u5e94\u7528\u4e8e\u4efb\u4f55\u57fa\u4e8e\u8f93\u5165\u6837\u672c\u8ddd\u79bb\u5ea6\u91cf\u7684\u76d1\u7763\u5b66\u4e60\u95ee\u9898\uff0c\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002</p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/","title":"Rings","text":""},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#definition","title":"Definition","text":"<p>A ring satisfies</p> <ul> <li>\\(R\\neq \\empty\\)</li> <li>\\(R\\times R \\rightarrow R \\quad i.e.(r,s) \\rightarrow r+s\\)</li> </ul> <p>(R,+) is an Abelian group(associativity, commutativity, inverse element, identity element).</p> <ul> <li>\\(R\\times R \\rightarrow R \\quad i.e.(r,s) \\rightarrow r\\cdot s\\)</li> </ul> <p>(R,\\(\\cdot\\)) satisfying associative law.</p> <ul> <li>\\(a(b+c)=ab+ac \\quad (b+c)a=ba+ca\\)</li> </ul> <p>e.g.</p> <ul> <li> <p>\\(F\\) is a field, which is also a ring.(\\(Q,R,C\\))</p> </li> <li> <p>\\(F[x]={\\sum\\limits_{i=0}^na_ix^i|a_i\\in F}\\) is a ring.</p> </li> <li> <p>\\(Z_n=\\{\\overline0,\\overline1,\\ldots,\\overline{n-1}\\}\\) where \\(\\overline k =\\{np+k\\mid p\\in Z\\}\\) </p> </li> </ul> <p>and it satisfies</p> <ul> <li>\\(\\overline k + \\overline l =\\{n(p+q)+k+l\\mid p,q\\in Z\\}=\\overline{k+l}\\)</li> <li>\\(\\overline k \\cdot \\overline l=\\{(np+k)(nq+l)\\mid p,q \\in Z\\}=\\overline{kl}\\)</li> <li> <p>\\(\\overline {k}(\\overline l + \\overline s)=\\overline  k \\overline l + \\overline k \\overline  s=\\overline k\\ \\overline{l+s}=\\overline{kl+ks}\\)</p> </li> <li> <p>\\(M_n(F)=F^{n\\times n}=\\{(a_{ij}\\mid a_{ij}\\in F)\\}\\) and \\((M_n(F), +, \\cdot)\\) is a ring</p> </li> <li> <p>\\(R_1\\times R_2=\\{(a,b)\\mid a\\in R_1,b\\in R_2\\}\\) and we define </p> </li> </ul> <p>\\((a_1,b_1)+(a_2,b_2)=(a_1+b_1,a_2+b_2)\\) </p> <p>\\((a_1,b_1)(a_2,b_2)=(a_1 b_1,a_2 b_2)\\)</p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#properties","title":"Properties","text":""},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#unit-identity","title":"Unit, identity(\u5355\u4f4d\u5143, \u6052\u7b49\u5143)","text":"<p>def: an element \\(a\\) is called an identity if \\(\\forall a \\in R \\quad 1\\cdot a = a\\cdot 1 =a\\)</p> <p>Not every ring has an identity.    e.g. \\(2\\Z=\\{2n\\mid n \\in \\Z\\}\\)</p> <p>suppose \\(R\\) is a ring, \\(\\Z\\times R =\\{(n,r)\\mid n\\in \\Z r\\in R\\}\\) and we define \\((n,r)+(m,s)=(n+m,r+s)\\quad (n,r)\\cdot (m,s)=(nm,rs+ns+rm)\\)</p> <p>then \\(\\Z\\times R\\) has a unit \\((1,0)\\)</p> <p>and we find \\((0,r)+(0,s)=(0,r+s)\\quad (0,r)\\cdot(0,s)=(0,rs)\\)</p> <p>Note:\u4efb\u610f\u73af\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\u6269\u5145\u4e3a\u6709\u5355\u4f4d\u5143\u7684\u73af, \u800c\u4e14\u8fd8\u4fdd\u7559\u4e86\\(R\\)\u4e0a\u7684\u8fd0\u7b97.</p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#commutative-ring","title":"Commutative Ring","text":"<p>def: A ring is called commutative if \\(\\forall a,b\\in R\\quad ab=ba\\), otherwise if \\(\\exist a,b\\in R ab\\neq ba\\) it is called noncommutative.</p> <p>e.g. \\(\\mathbb{R},\\mathbb{C}[x]\\) are commutative, while \\(M_n(R)\\) is noncommutative.</p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#domain-ring","title":"Domain Ring(\u6574\u73af)","text":"<p>def: \\(a \\in R\\) there is a nonzero element \\(b\\) such that \\(ab=0\\), \\(a\\) is called left zero-divisor(\u5de6\u96f6\u56e0\u5b50). Similarily we can define right zero-divisor.</p> <ul> <li>0 must be zero-divisor. </li> </ul> <p>proof: \\(0\\cdot a = (0+0)a=0\\cdot a + 0\\cdot a\\) </p> <p>so \\(0=0\\cdot a +(- 0\\cdot a)=0\\cdot a +0\\cdot a +(-0\\cdot a)=0\\cdot a\\)</p> <p>thus we get \\(0\\cdot a =0\\)</p> <p>def: A ring is called domain ring if   </p> <ul> <li>\\(\\lvert R \\rvert \\ge 2\\) </li> <li>\\(R\\) has no nonzero zero-divisor.  </li> </ul> <p>e.g.</p> <ul> <li> <p>\\(\\overline Z_6\\) is not a domain ring since \\(\\overline 2 \\cdot \\overline 3 = \\overline 0\\)</p> </li> <li> <p>\\(H=\\{      \\left[\\begin{matrix} a+bi &amp; c+di\\\\ -c+di &amp; a-bi \\end{matrix}  \\right]    \\mid a,b,c,d\\in R \\ and\\ i=\\sqrt{-1}            \\}\\)</p> </li> </ul> <p>\\(H\\) is noncommutative but it is a domain ring.(proof?)</p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#division-ring","title":"Division Ring(\u9664\u73af)","text":"<p>def: \\(a\\in R\\) is invertible if \\(\\exist b \\ s.t.ab=ba=1\\)</p> <p>e.g.</p> <ul> <li>in \\(M_n(R)\\), \\(A\\) is invertible $ \\Leftrightarrow\\lvert {A} \\rvert \\neq 0$</li> <li>\\(0\\) is always not invertible since \\(0 \\cdot a =1 \\Rightarrow 0\\cdot a = 0 =1\\)then \\(R=\\{0\\}\\)  where \\(\\forall r \\in R,\\ r=1\\cdot r=0\\cdot r =0\\)</li> <li>\\(H\\) is a domain ring since \\(\\left[\\begin{matrix} a+bi &amp; c+di \\\\ -c+di&amp; a-bi \\end{matrix} \\right]^{-1}=\\frac{1}{a^2+b^2+c^2+d^2}\\left[\\begin{matrix} a-bi &amp; -c+di \\\\ c+di&amp; a+bi \\end{matrix} \\right]\\)</li> </ul> <p>def: A ring is called division ring(or skew-field\u659c\u57df) if</p> <ul> <li>\\(\\lvert R \\rvert \\ge 2\\) </li> <li>nonzero element is invertible.</li> </ul> <p>e.g. Z is not division ring while Q is division ring.</p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#field","title":"Field(\u57df)","text":"<p>def: A commutative division ring is called field.</p> <p>Note: \u57df\u4e2d\u5fc5\u6709\u5355\u4f4d\u5143.</p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#subring","title":"Subring","text":"<p>def: \\(\\empty\\neq S\\subseteq (R,+,\\cdot)\\) it is called a subring of \\(R\\) if it satisfies</p> <ul> <li>\\(\\forall a,b\\in R\\quad a-b\\in S\\)</li> <li>\\(\\forall a,b\\in R\\quad ab\\in R\\)</li> </ul> <p>Note: \u4e3a\u4ec0\u4e48\u662f\\(a-b\\in S\\)\u800c\u4e0d\u662f\\(a+b\\in S\\)?    \u4e3a\u4e86\u786e\u4fdd\u4efb\u610f\u5143\u7d20\u7684\u8d1f\u5143\u4e5f\u5728\u96c6\u5408\u4e2d</p> <p>\u800c\u7ebf\u6027\u7a7a\u95f4\u4e2d\u56e0\u4e3a\u8981\u5bf9\u6570\u4e58\u5c01\u95ed, \\((-1)a=-a\\) \u6545\u8d1f\u5143\u4e00\u5b9a\u5728\u96c6\u5408\u4e2d.</p> <p>suppose \\(S_1,S_2\\) are subring of \\(R\\), then \\(S_1+S_2=\\{a_1+a_2\\mid a_1\\in S_1,a_2\\in S_2\\}\\) is not a subring of \\(R\\), \\(S_1\\cap S_2\\) is a subring, and \\(S_1\\cup S_2\\) is not a subring.</p> <p>e.g.</p> <ul> <li>\\(R=\\mathbb{Q}[\\sqrt2,\\sqrt3,\\sqrt{6}]=\\{a+b\\sqrt2+c\\sqrt3+d\\sqrt6\\mid a,b,c,d\\in \\mathbb{Q}\\}\\) and \\(R\\leq (\\R,+,\\cdot)\\)</li> </ul> <p>let \\(S_1=Q[\\sqrt2]=\\{a+b\\sqrt2\\mid a,b\\in \\mathbb{Q}\\}\\) \\(S_2=Q[\\sqrt3]=\\{a+b\\sqrt3\\mid a,b\\in \\mathbb{Q}\\}\\) and both are subrings of \\(R\\)</p> <p>but \\(S_1+S_2=\\{a+b\\sqrt2+c\\sqrt3\\mid a,b,c\\in \\mathbb{Q}\\}\\) is not a subring since \\(\\sqrt2\\cdot\\sqrt 3 =\\sqrt 6 \\notin S_1+S_2\\)</p> <ul> <li> <p>\\(Z\\) has an identity, but its subring \\(2\\Z\\) has no identiy.</p> </li> <li> <p>\\(S=\\{\\left[ \\begin{matrix}a&amp;b&amp;0\\\\c&amp;d&amp;0\\\\0&amp;0&amp;0\\end{matrix}\\right]\\mid a,b,c,d\\in\\R\\}\\leq M_n(R)\\)</p> </li> </ul> <p>their identities are not the same.(\\(S:\\left[ \\begin{matrix}1&amp;0&amp;0\\\\0&amp;1&amp;0\\\\0&amp;0&amp;0\\end{matrix}\\right]\\) abd \\(M_n(R):\\left[\\begin{matrix}1&amp;0&amp;0\\\\0&amp;1&amp;0\\\\0&amp;0&amp;1\\end{matrix}\\right]\\)) </p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#ideal","title":"Ideal","text":"<p>def: \\(\\empty\\neq S\\subseteq (R,+,\\cdot)\\) it is called a left ideal of \\(R\\) if it satisfies</p> <ul> <li>\\(\\forall a,b\\in R\\quad a-b\\in S\\)</li> <li>\\(\\forall a\\in S,b\\in R \\quad ba\\in S\\)</li> </ul> <p>and we denote it by \\(I\\lhd R\\)</p> <p>Similarily we define right ideal.</p> <p>ideal = left ideal + right ideal.</p> <p>proposition: suppose \\(I_1,I_2\\) are left ideal, then \\(I_1+I_2=\\{a+b\\mid a\\in I_1,b\\in I_2\\}, I_1\\cap I_2=\\{a\\cdot b\\mid a\\in I_1,b\\in I_2\\}\\) are also ideals.</p> <p>proof: suppose \\(\\forall a_i,b_i\\in I_i\\) where \\(i=1,2\\)</p> <ul> <li>\\((a_1+a_2)-(b_1+b_2)=(a_1-b_1)+(a_2-b_2)\\in I_1 +I_2\\)</li> <li>\\(\\forall r\\in R \\quad r(a_1+a_2)=ra_1+ra_2\\in I_1+I_2\\) </li> </ul> <p>0 always in ideal since \\(a-a=0\\)</p> <p>we can define \\((a\\rangle=\\cap \\{I\\) is a left ideal of \\(R\\) containg \\(a\\)\\(\\}\\)</p> <p>proposition: \\((a\\rangle=\\{na+ra\\mid n\\in Z, r\\in R\\}\\) this ideal containg \\(a\\) and \\(\\forall\\) ideal containing \\(a\\) \\(\\Rightarrow (a\\rangle \\sube I\\)</p> <p>proof:</p> <ul> <li> <p>\\(a\\) in this set    \\(a = 1*a+0*a\\) where \\(1\\in Z,0\\in R\\) thus \\(a\\in (a\\rangle\\)</p> </li> <li> <p>this set is an ideal</p> </li> <li>\\(\\forall n_1a+r_1a, n_2a+r_2a\\in(a\\rangle\\)  then \\((n_1a+r_1a)-(n_2a+r_2a)=(n_1-n_2)a+(r_1-r_2)a\\in (a\\rangle\\) where \\(n_1-n_2\\in \\Z,r_1-r_2\\in R\\)</li> <li> <p>\\(\\forall b\\in R, na+ra \\in (a\\rangle\\) then \\(b(na+ra)=nba+bra\\in (a\\rangle\\) where \\(nb\\) </p> </li> <li> <p>the minimum ideal containg \\(a\\)</p> </li> </ul> <p>suppose an ideal \\(I\\) containing  \\(a\\), out target is to prove \\((a\\rangle\\sube I\\)</p> <p>\\(\\forall\\ na+ra\\in (a\\rangle\\) then \\(a\\in I, r\\in R \\Rightarrow ra\\in I\\)</p> <p>and \\(na = \\left\\{ \\begin{matrix}a+a+\\ldots+a,n&gt;0 \\\\ 0,n=0 \\\\ (-a)+(-a)+\\ldots+(-a),n&lt;0\\end{matrix}\\right.\\)    so \\(na\\in I\\)</p> <p>thus \\(na+ra\\in I\\) \\(\\square\\)</p> <p>suppose \\(R\\) has an identity, \\(na =1_R\\cdot a+1_R\\cdot a+\\dots+1_R\\cdot a= (n1_R)\\cdot a\\) where \\(n1_R\\in R\\)</p> <p>so \\((a\\rangle\\) can be writed as \\(\\{ra\\mid r\\in R \\}=Ra\\)</p> <p>Similarily, \\((a)=\\{\\sum\\limits_{i=0}^nr_ias_i+ra+as+na\\mid r_i,s_i,r,s\\in R, n\\in\\N\\}\\stackrel{+1_R}=\\{\\sum\\limits_{i=0}^nr_ias_i\\mid r_i,s_i\\in R, n\\in \\N\\}=RaR\\)</p> <p>suppose \\(R\\) is commutative, then \\(\\langle a)=(a\\rangle=(a)\\)</p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#pid","title":"PID(\u4e3b\u7406\u60f3\u6574\u73af)","text":"<p>def: An ideal is called principal if it can be generated by one element.</p> <p>def: \\(R\\) is called left(resp. right) principal ring if every left(resp. right)ideal is generated by one element.</p> <p>def: A commutative principal domain is simply denoted by PID.</p> <p>e.g.</p> <ul> <li>\\((\\Z,+,\\dot)\\) is a PID.</li> </ul> <p>proof: let \\(I\\) be an ideal of \\(Z\\)</p> <ul> <li> <p>\\(I=\\{0\\}=(0)=Z\\cdot0=\\{0\\}\\) \\(0\\) ideal must be principal ideal.</p> </li> <li> <p>\\(I\\neq\\{0\\}\\) so \\(\\exist n\\in I,n\\neq0\\)</p> <p>without loss of generalization, we assume \\(n\\in I\\) and \\(n&gt;0\\) (since \\(-n=0-n\\in I\\), so both \\(n\\) and \\(-n\\) in \\(I\\))</p> <p>let \\(n\\) be the least of the set \\(\\{n\\in I,n&gt;0\\}\\) our target is to show \\(I=(n)=n\\Z\\)</p> <ul> <li>\\(n\\in I \\Rightarrow(n)\\sube I\\)</li> <li>\\(\\forall m\\in I\\quad m=qn+r(0\\le r\\leq n-1)\\) so \\(r=m-qn\\in I\\) where \\(m\\in I\\) and \\(qn\\in(n)\\sube I\\)</li> <li>by choice of n, \\(r\\) must be \\(0\\). Otherwise \\(r\\neq0, r&lt;n\\) contradicts the assumption that \\(n\\) is the least element which is gereater than \\(0\\).</li> <li>Thus, \\(m=qn\\in(n)\\) \\(\\Z\\) is a principal ideal.</li> </ul> </li> <li> <p>Apparently, \\(Z\\) is commutative and domain.</p> </li> <li> <p>By the proof above, we can similarily prove \\((F[x],+,\\cdot)\\) is a PID where \\(F\\) is a field.</p> </li> <li> <p>Every field is a PID.</p> </li> </ul> <p>proof: suppose \\(F\\) is a field, \\(I\\) is an ideal of \\(F\\). We assert that \\(I\\) can be either \\((0)\\) or \\((1)=F\\).</p> <ul> <li> <p>\\(I=\\{0\\}=(0)\\)</p> </li> <li> <p>\\(I\\neq\\{0\\}\\) we get \\(a\\in I,a\\neq0\\Rightarrow a^{-1}a=1\\in I\\) where \\(a^{-1}\\in F,a\\in I\\)</p> <p>\\(\\forall b\\in F,b=b\\cdot 1\\in I\\) where \\(b\\in F, 1\\in I\\) so we know \\(F\\sube I\\) and obviously \\(I\\sube F\\)</p> <p>thus \\(I=F=(1)\\)</p> </li> </ul> <p>Note: \u57df(\u9664\u73af)\u4e2d\u6ca1\u6709\u975e\u5e73\u51e1\u7406\u60f3.</p> <ul> <li> <p>\\(M_n(\\R)\\) is PID.</p> </li> <li> <p>\\(I=\\{0_{n\\times n}\\}=(0_{n\\times n})\\)</p> </li> <li> <p>\\(I\\neq\\{0_{n\\times n}\\}\\) then \\(\\forall A=(a_{ij})\\in I, A\\neq 0\\)    so \\(\\exist a_{kl}\\neq 0\\)</p> <p>thus \\(\\forall i,j\\in \\N,E_{ik}AE_{lj}=a_{kl}E_{ij}\\) where \\(E_{ij}\\) represent a matrix whose \\((i,j)\\) element is \\(1\\).</p> <p>so \\(a_{kl}^{-1}E_{ik}AE_{lj}=E_{ij}\\in I\\) where \\(E_{lj}\\in M_n(\\R), A\\in I\\) and \\(a_{kl}^{-1}E_{ik}=(a_{kl}^{-1}E)E_{ik}\\in M_n(\\R)\\) for the definition of ideal.</p> <p>$\\Rightarrow \\forall M=(b_{ij})\\in M_n(\\R)\\quad M=\\sum x_{ij}E_{ij}=\\sum (x_{ij}E)E_{ij}\\in I $</p> <p>Therefore, \\(M_n(\\R)\\sube I\\Rightarrow I=M_n(\\R)\\) </p> </li> </ul> <p>Note: \u975e\u4ea4\u6362, \u975e\u6574\u73af\u4e5f\u53ef\u4ee5\u53ea\u6709\u4e24\u4e2a\u7406\u60f3. </p> <p>Proposition: \\(A\\) is similar to a diagonal matrix \\(\\Leftrightarrow\\) there is a splitting polynomical \\(f(x)\\) which has no mutiplicity roots(\u91cd\u6839) \\(s.t. f(A)=0\\)</p> <p>proof </p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#quotient-ring","title":"Quotient Ring(\u5546\u73af)","text":"<p>def: suppose \\(I\\) is an ideal of \\(R\\), then \\(R/I=\\{a+I\\mid a\\in R\\}\\) is called quotient ring.</p> <p>\u200b     and we define \\((a+I)+(b+I)=(a+b)+I,(a+I)(b+I)=ab+I\\)</p> <p>Note: </p> <ul> <li>\u5546\u73af\u4e2d\u7684\u5143\u7d20\\(a+I=\\{a+b\\mid b\\in I\\}\\)\u4e5f\u662f\u4e00\u4e2a\u96c6\u5408, \u82e5\\(a\\in I\\)\u5219\\(a+I=0+I=0\\). </li> <li>\u82e5\\(R=I\\), \u5219\u89c4\u5b9a\\(R/I=0\\)</li> </ul> <p>proposition: \\(a_1+I=a_2+I\\Leftrightarrow a_1-a_2\\in I\\)</p> <p>proof:</p> <ul> <li> <p>\\(\\Rightarrow\\) \\(a_1\\in a_1+I=a_2+I\\) so \\(\\exist x\\in I\\ s.t.a_1=a_2+x\\) thus \\(a_1-a_2=x\\in I\\)</p> </li> <li> <p>\\(\\Leftarrow\\) \\(\\forall a_1+x\\in a_1+I\\) where \\(x\\in I\\) so \\(a_1+x=a_2+x+(a_1-a_2)\\in a_2+I\\) since \\(x\\in I,(a_1-a_2)\\in I\\)</p> </li> </ul> <p>therefore, \\(a_1+I\\sube a_2+I\\). Similarily, we can prove \\(a_2+I\\sube a_1+I\\) so \\(a_1+I=a_2+I\\). </p> <p>Note: \u5bf9\u4e8e\u5546\u73af\\(R/I\\) \u6211\u4eec\u9700\u8981\u9a8c\u8bc1well-defined. \u5373\u82e5\\(a+I=a'+I,b+I=b'+I\\) \u5219\u8981\u6ee1\u8db3\\(a+b+I=a'+b'+I,ab+I=a'b'+I\\) \u5373\u4e0d\u540c\u5f62\u5f0f\u540c\u4e00\u672c\u8d28\u7684\u5143\u7d20\u5e94\u8be5\u6620\u5c04\u540e\u5f97\u5230\u7684\u5143\u7d20\u5e94\u8be5\u76f8\u540c.</p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#maximal-ideal","title":"Maximal Ideal(\u6781\u5927\u7406\u60f3)","text":"<p>def: suppose \\(I\\neq R\\) is an ideal of \\(R\\), \\(I\\) is called to be maximal ideal if \\(\\forall J\\lhd R,J\\supe I \\Rightarrow \\left\\{\\begin{matrix}J=I \\\\ R\\end{matrix}\\right.\\)</p> <p>Note: \u6781\u5927\u7406\u60f3\\(I\\)\u5373\u53ea\u88ab\\(I\\)\u548c\\(R\\)\u5305\u542b.(\\(R\\)\u662f\u81ea\u8eab\u7684\u7406\u60f3.)</p> <p>Proposition: suppose \\(R\\) is commutative ring with identity, then \\(M\\) is a maximal ideal \\(\\Leftrightarrow\\) \\(R/M\\) is a field.</p> <p>proof: </p>"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#homomorphism","title":"Homomorphism(\u540c\u6001)","text":"<p>def: \\(\\phi:R_1\\rightarrow R_2\\) and it statisfies \\(\\phi(a+b)=\\phi(a)+\\phi(b),\\phi(ab)=\\phi(a)\\phi(b),\\phi(1)=1\\) then it is called a homomorphism.</p> <p>def: \\(\\phi\\) is called monomorphism(\u5355\u540c\u6001) if \\(a\\neq b \\Rightarrow\\phi(a)\\neq\\phi(b)\\)</p> <p>def: $\\phi $ is called epiomorphism(\u6ee1\u540c\u6001) if \\(r\\in R_2\\ \\exist a\\in R_1\\ s.t.\\phi(a)=r\\).</p> <p>isomorphism(\u540c\u6784) = injective + surjective</p> <p>we define \\(\\ker\\phi=\\{a\\in R_1\\mid \\phi(a)=0\\}\\) \\(Im\\phi=\\{\\phi(a)\\mid a\\in R_1\\}\\)</p> <p>e.g. \\(\\phi:\\Z\\rightarrow \\Z_n\\) and \\(a\\rightarrow \\overline{a}=\\{a+kn\\mid k\\in \\Z\\}\\) and it\u2019s easy to verify it is a homomorphism.</p> <p>\u200b       \\(\\ker\\phi={a\\in\\Z\\mid \\overline a=\\overline 0}=n\\Z=(n)\\quad Im\\phi=\\Z_n\\)</p> <p>proposition: \\(\\ker\\phi\\) is an ideal of \\(R\\).</p> <p>proof: </p> <ul> <li>\\(0\\in \\ker\\phi\\) since \\(\\phi(0)=\\phi(0+0)=\\phi(0)+\\phi(0)\\Rightarrow \\phi(0)=0\\)        thus \\(ker\\phi\\) is nonempty.</li> <li>\\(\\forall a,b\\in \\ker\\phi\\quad \\phi(a-b)=\\phi(a)-\\phi(b)=0-0=0\\Rightarrow a-b\\in \\ker\\phi\\)</li> <li>\\(\\forall a\\in \\ker\\phi,b\\in R\\quad\\phi(ba)=b\\phi(a)=b\\cdot0=0\\Rightarrow ba\\in \\ker\\phi\\)</li> </ul> <p>proposition: \\(Im\\phi\\) is a subring of \\(R\\).</p> <p>proposition: \\(\\phi\\) is injective \\(\\Leftrightarrow\\) \\(\\ker\\phi =0\\)</p>"},{"location":"NA/NA01/","title":"Mathematical Preliminaries","text":""},{"location":"NA/NA01/#roundoff-errors-and-computer-arithmetic","title":"Roundoff Errors and Computer Arithmetic","text":"<p>Example</p> <p>Approximate \\(\\int_0^1e^{-x^2}dx\\) Use Taylor expansion.  S<sub>4</sub> \u622a\u65ad\u8bef\u5dee, \u2153 \u56db\u820d\u4e94\u5165\u8bef\u5dee.  </p> <p>Info</p> <p>f(x) = \u8fd1\u4f3c\u503c + \u4f59\u9879 \u4e00\u4e2a\u8fd1\u4f3c\u503c+\u4f59\u9879\u7684\u5f62\u5f0f(\u4f59\u9879\u4ee3\u8868\u8bef\u5dee, \u4e0d\u9700\u8981\u6c42\u51fa\u786e\u5207\u7684\u503c) \u8ba8\u8bba\u4f59\u9879\u65f6, \u6211\u4eec\u4e00\u822c\u53ea\u8ba8\u8bba\u4e0a\u754c. \u5982 \\(0 &lt;= e &lt;= \\overline {e}\\). \u4e3a\u4ec0\u4e48\u4e0d\u8ba8\u8bba\u4e0b\u754c, \u56e0\u4e3a\u5982\u679c\u6211\u4eec\u77e5\u9053\u786e\u5207\u7684\u4e0b\u754c, \u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u5408\u5e76\u5230\u524d\u9762\u7684\u8fd1\u4f3c\u503c\u4e2d. \u56e0\u6b64\u6211\u4eec\u5f97\u5230\u7684\u4e00\u822c\u662f \\(f' - e &lt;= f &lt;= f' + e\\) </p> <p>Truncation Error: the error involved in using a truncated, or finite, summation to approximate the sum of an infinite series. Roundoff Error: the error produced when performing real number calculations.  It occurs because the arithmetic performed in a machine involves numbers with only a finite number of digits.  </p> <p>Given a real number \\(y=0.d_1d_2\\cdots d_k d_{k+1}d_{k+2}\\cdots \\times 10^n\\) then  \\(fl(y) = \\left\\{ \\begin{matrix}0.d_1d_2\\ldots d_k \\times 10^n\\quad  /* Chopping */  \\\\ chop(y+5\\times 10^{n-(k+1)})=0.\\delta_1\\delta_2\\ldots \\delta_k\\times 10^n \\quad /* Rouding */ \\end{matrix}\\right.\\)</p> <p>Def: if \\(p^*\\) is an approximation to p, the absolute error is \\(|p-p^*|\\) and the relative error is \\(\\frac{|p-p^*|}{|p|}\\), provided that \\(p\\neq 0\\).  </p> <p>Def: The number \\(p^*\\) is said to approximate p to t significant digits if t is the largst nonnegative integer for which \\(\\frac{|p-p^*|}{|p|} &lt; 5\\times 10^{-t}\\)</p> <p>Note</p> <p> Rounding \u53ef\u4ee5\u6709\u66f4\u9ad8\u7684\u6709\u6548\u4f4d\u6570.(\u7edf\u8ba1\u610f\u4e49\u4e0a\u662f, \u4f46\u5e76\u4e0d\u7edd\u5bf9)  </p> <p>Subtraction of nearly equal numbers will cause a cancellation of significant digits.     </p> <p>Example</p> <p>\\(a_1 = 0.12345+e_1, a_2 = 0.123456 + e_2\\) \u4ed6\u4eec\u7684\u76f8\u5bf9\u8bef\u5dee\u4e3a \\(\\frac{a}{e_1}, \\frac{a}{e_2}\\),  \u8fd9\u65f6\\(a_2-a_1=0.00001 + (e_2 - e_1)\\), \u800c\u76f8\u5bf9\u8bef\u5dee\\(\\frac{e_2-e_1}{0.00001}\\), \u8bef\u5dee\u6269\u5927\u660e\u663e    </p> <p>Dividing by a number with small magnitude (or, equivalently, multiplying by a number with large magnitude) will cause an enlargement of the error.</p> <p>Info</p> <p>\\(\\frac{a}{b} = \\frac{a^* + e_a}{b^*+e_b} = \\frac{a^*}{b^*} + e\\) \\(e = \\frac{b^*(a^*+e_a)-a^*(b^*+e_b)}{b^*(b^*+e_b)} = \\frac{b^*e_a - a^*e_b}{b^*(b^*+e_b)}= \\frac{e_a}{b^*+e_b} - \\frac{e_b}{b^*+e_b}\\times \\frac{a^*}{b^*}\\) \u5f53 \\(\\frac{a^*}{b^*}\\) \u6bd4\u8f83\u5927\u65f6, b \u7684\u76f8\u5bf9\u8bef\u5dee\u4f1a\u88ab\u653e\u5927.  \u5f53 \\(b\\) \u6bd4\u8f83\u5c0f\u65f6, a \u7684\u7edd\u5bf9\u8bef\u5dee\u4f1a\u88ab\u653e\u5927.</p> <p>Always simplify your formulae before you give them to your computer! </p> <p>Example</p> <p>Evaluate \\(f(x)= x^3-6.1x^2+3.2x+1.5\\) at \\(x=4.71\\) using 3-digit arithmetic.  \u628a\u81ea\u5df1\u5f53\u4f5c\u5c0f\u5b66\u751f, \u4e00\u6b65\u4e00\u6b65\u8ba1\u7b97. \u6bcf\u6b21\u8ba1\u7b97\u90fd\u8981 chopping/rounding \u800c\u4e0d\u662f\u8fde\u52a0\u8fde\u4e58, \u76f4\u63a5\u4ece\u6700\u540e\u7b54\u6848\u4f5c\u820d\u53bb.  \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, chopping \u6bd4 rouding \u6548\u679c\u597d! \u8bef\u5dee\u5b9e\u9645\u4e0a\u662f\u4e2a\u6982\u7387\u51fd\u6570</p>"},{"location":"NA/NA01/#algorithms-and-convergence","title":"Algorithms and Convergence","text":"<p>Def: An algorithm that satisfies that small changes in the initial data produce correspondingly small changes in the final results is called stable; otherwise it is unstable.  An algorithm is called conditionally stable if it is stable only for certain choices of initial data.</p> <p>Note</p> <p>\\(y=f(x)\\) \u5bf9\u4e8e\u4e00\u4e2a\u6270\u52a8 \\(y+\\epsilon_y = f(x+\\epsilon_x)\\) \\(|\\frac{\\epsilon_y}{\\epsilon_x}|\\) \u8861\u91cf\u53d8\u5316\u7387, stable \u5373\u8fd9\u4e2a\u53d8\u5316\u7387\u5c0f.  </p> <p>Def: Suppose that \\(E_0\\) &gt; 0 denotes an initial error and En represents the magnitude of an error after n subsequent operations.  If \\(E_n\\approx C n E_0\\), where C is a constant independent of n, then the growth of error is said to be linear.  If \\(E_n\\approx C^n E_0\\), for some C &gt; 1, then the growth of error is called exponential.</p> <p>Note</p> <p>Linear growth of error is usually unavoidable, and when C and \\(E_0\\) are small the results are generally acceptable. Exponential growth of error should be avoided since the term \\(C_n\\) becomes large for even relatively small values of n.  This leads to unacceptable inaccuracies, regardless of the size of \\(E_0\\).</p> <p>Example</p> <p>Evaluate \\(I_n=\\frac{1}{e}\\int_0^1x^ne^x dx, n=0,1,2,...\\) </p> <p>Improved method: </p>"},{"location":"NA/NA02/","title":"Solutions of Equations in One Variables","text":"<p>Find a root of \\(f(x)=0\\) </p>"},{"location":"NA/NA02/#the-bisection-method","title":"The Bisection Method","text":"<p>Therom:(Intermediate Value Therom) If \\(f\\in C[a,b]\\) and K is any number between \\(f(a)\\) and \\(f(b)\\), then there exists a number \\(p\\in (a,b)\\) for which \\(f(p)=K.\\) </p> <p>when to stop?  </p> <p>\u76f8\u5bf9\u8bef\u5dee\u6709\u4f7f\u7528\u6761\u4ef6, \u7edd\u5bf9\u8bef\u5dee\u666e\u9002. 3 \u548c 12 \u6ca1\u6709\u5fc5\u7136\u5173\u7cfb, \u56e0\u4e3a\u53d7\u659c\u7387\u5f71\u54cd. \u4e00\u4e2a\u662f\u5b9a\u4e49\u57df\u4e0a\u7684 error, \u4e00\u4e2a\u662f\u503c\u57df\u4e0a\u7684 error. \u4e0d\u63a8\u8350\u4f7f\u7528\u7b2c\u4e09\u4e2a(xww), \u56e0\u4e3a\u5b58\u5728\u8fd9\u6837\u7684\u60c5\u51b5: </p> <p>Therom: Suppose that \\(f\\in C[a,b]\\) and \\(f(a)\\cdot f(b) &lt;0\\) The Bisection method generates a sequence \\(\\{p_n\\}\\) (n=0,1,2...) approximating a zero p of f with \\(|p_n-p|&lt;=\\frac{b-a}{2^n}\\).   </p> <p>\u4e00\u5b9a\u6536\u655b!  </p> <p>Algorithm:  </p> <p>Question</p> <ul> <li>in Step3, why not \\(p=(a+b)/2\\)?  </li> <li>why not FA*FP &gt; 0?</li> </ul> <ul> <li> <p>Advantages:</p> <ul> <li>Simple, only requires a continuous f.  </li> <li>Always converges to a solution.  </li> <li>Disadvantages:</li> <li>Slow to converge and a good intermediate approximation can be inadvertently discarded.  </li> <li>Cannot find multiple roots and complex roots.  </li> </ul> </li> </ul>"},{"location":"NA/NA02/#fixed-point-iteration","title":"Fixed-Point Iteration","text":"<p>\\(f(x)=0 \\Leftrightarrow x=g(x)\\)  left: root of f(x); right: fixed-point of g(x).  </p> <p>idea: start from an initial approximation \\(p_0\\) and generate the sequence \\(\\{p_n\\}_{n=0}^{\\infty}\\) by letting \\(p_n=g(p_{n-1})\\). for eac \\(n&gt;1\\) if the sequence converges to p and g(x) is continuous then \\(p=\\lim\\limits_{n-&gt;\\infty}p_n = \\lim\\limits_{n-&gt;\\infty}g(p_{n-1})=g(\\lim\\limits_{n-&gt;\\infty} p_{n-1}) = g(p)\\).   </p> <p></p> <p>Theorem:(Fixed-Point Therom) if \\(g\\in C[a,b]\\) be such that \\(g(x)\\in[a,b]\\) for all \\(x\\in a[a,b]\\). Suppose in addition that \\(g^{'}(x)\\)s exists on \\((a,b)\\) and that a constant \\(0&lt;k&lt;1\\) exists with \\(|g^{'}(x)|&lt;=k\\) for all \\(x\\in(a,b)\\). Then for any number \\(p_0\\in [a,b]\\), the sequence defined by \\(p_n=g(p_{n-1})\\) converges to the unique fixed \\(p\\in [a,b]\\).  </p> <p>Note</p> <p>\u5176\u4e2d\u7684\u9650\u5236\u6761\u4ef6\u4e0d\u7b49\u4ef7\u4e8e \\(|g^{'}(x)|&lt;1\\) \u4e0a\u884c\u7684\u5f0f\u5b50 g'(x) \u53ef\u4ee5\u65e0\u9650\u8d8b\u8fd1 1.  </p> <p>proof: </p> <p>Corollary: If g satisfies the hypotheses of the Fixed-Point Theroem, then bounds for the error involved in using \\(p_n\\) to approximate p are given by \\(|p_n - p|&lt;=\\frac{1}{k-1}|p_{n+1}-p_n|\\) and \\(|p_n-p|&lt;=\\frac{k^n}{1-k}|p_1-p_0|\\). \u53ef\u4ee5\u7528\u6765\u63a7\u5236\u7cbe\u5ea6, \u8ba1\u7b97\u7684\u65f6\u95f4\u548c\u901f\u5ea6. k \u8d8a\u5c0f, \u6536\u655b\u8d8a\u5feb.(\u5177\u4f53\u6536\u655b\u901f\u5ea6\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5bfc\u6570\u5206\u5e03)  </p> <p>Algorithm: </p> <p>Example</p> <p>Find the unique root of equation \\(x^3+4x^2-10=0\\) in [1,2]. which following is the best equivalent fixed-point forms with \\(p_0=1.5\\).(the root is approximately 1.365230013)    </p> <ul> <li>\\(x=g_1(x)=x-x^3-4x^2+10\\) </li> <li>\\(x=g_2(x)=\\sqrt{10/x - 4x}\\) </li> <li>\\(x=g_3(x)=\\sqrt{10-x^3}/2\\) </li> <li>\\(x=g_4(x)=\\sqrt{10/(4+x)}\\) </li> <li>\\(x=g_5(x)=x-\\frac{x^3+4x^2-10}{3x^2+8x}\\) </li> </ul> <p>c is ok.(in [1,1.5] \\(k\\approx 0.66\\)) d e is also ok. \u4f46\u5b58\u5728\u4e00\u79cd\u60c5\u51b5, \u5927\u90e8\u5206\u7684\u5bfc\u6570\u90fd\u6bd4\u8f83\u5c0f, \u53ea\u6709\u4e2a\u522b\u70b9\u7684\u5bfc\u6570\u504f\u5927. </p>"},{"location":"NA/NA02/#newtons-method","title":"Newton's Method","text":"<p>idea: linearize a nonlinear function using Taylor's expansion.   </p> <p>Let \\(p_0\\in [a, b]\\) be an approximation to p such that \\(f^{'}(p_0)\\neq 0\\). Consider the first Taylor polynomial of f(x) expanded about \\(p_0\\):  \\(f(x)=f(p_0)+f^{'} (p_0)(x-p_0) + \\frac{f^{''}(\\xi_x)}{2!}(x-p_0)^2\\) where \\(\\xi_x\\) lies between \\(p_0\\) and x.  Assume that \\(|p-p_0|\\) is small, then \\((p-p_0)^2\\) is much smaller. Then \\(0=f(p)\\approx f(p_0)+f^{'} (p_0)(p-p_0) \\Rightarrow p\\approx p_0-\\frac{f(p_0)}{f^{'}(p_0)}\\).   </p> <p></p> <p>Theorem: Theorem: Let \\(f\\in C^2[a, b]\\). If \\(p\\in [a.b]\\) is such that \\(f(p)=0\\) and \\(f^{'}(p)\\neq 0\\), then there exists a \\(\\delta &gt; 0\\) such that Newton\u2019s method generates a sequence \\(\\{p_n\\}\\) (n = 1, 2,... ) converging to p for any initial approximation \\(p_0\\in [p-\\delta, p+\\delta]\\).  </p> <p>  \u8fed\u4ee3\u53ef\u8fdb\u884c; \u8fed\u4ee3\u59cb\u7ec8\u5728\u8303\u56f4\u5185; g' &lt;= 1  </p> <p>Note</p> <p>neighbourhood </p>"},{"location":"OOP/","title":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0  </p> <ul> <li>\u6559\u6750: Intruduction to Programming with C++ (Third Edition) [ \u7f8e ] Y. Daniel Liang\uff08\u6881\u52c7\uff09 </li> <li>\u8001\u5e08: \u7fc1\u607a</li> </ul>"},{"location":"OOP/oop1/","title":"Introduction","text":"<p>Abstract</p> <ul> <li>Input and output in C++ with <code>cin</code> and <code>cout</code></li> <li>The string class, the dot <code>.</code> operator</li> <li>Pointer to an object, the arrow <code>-&gt;</code> operator</li> <li>Dynamic memory allocation with <code>new</code> and <code>delet</code></li> </ul>"},{"location":"OOP/oop1/#the-first-c-program","title":"The First C++ Program","text":"<pre><code>#include&lt;iostream&gt;\nusingnamespace std;\nint main()\n{  int age;\nint sid;\ncin &gt;&gt; age &gt;&gt;sid;\ncout &lt;&lt; \"Hello, World! I am \" &lt;&lt; age &lt;&lt; Today!\" &lt;&lt; endl;  \nreturn 0;\n}\n</code></pre> <ul> <li><code>cout</code>: \u6807\u51c6\u8f93\u51fa\u6d41  </li> <li><code>&lt;&lt;</code> : \u628a\u4e1c\u897f\u63d2\u5165\u5230\u5de6\u8fb9\u53bb  </li> <li><code>cout &lt;&lt; \"\"</code> \u7684\u526f\u4f5c\u7528\u662f\u5b57\u7b26\u4e32\u88ab\u8f93\u51fa\uff0c\u4f46\u7ed3\u679c\u662f\u5b57\u7b26\u4e32\u672c\u8eab\u3002   </li> <li><code>cin &gt;&gt; age</code> \u540c\u7406\uff0c\u526f\u4f5c\u7528\u662f\u8bfb\u5165\uff0c\u7ed3\u679c\u662f <code>age</code> \u672c\u8eab\u3002(\u8bfb\u5230\u7a7a\u683c\u4e3a\u6b62)</li> </ul>"},{"location":"OOP/oop1/#string","title":"String","text":"<ul> <li><code>string</code> is a class in C++. (\u9700\u8981 <code>#include &lt;string&gt;</code>)  </li> <li>\u53ef\u4ee5\u50cf\u5b9a\u4e49\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\u5b9a\u4e49\u53d8\u91cf\u3002 e.g. <code>string str;</code></li> <li>\u53ef\u4ee5\u5bf9\u5b57\u7b26\u4e32\u521d\u59cb\u5316\uff0c\u7528 <code>cin, cout</code> \u8f93\u5165\u8f93\u51fa\u3002</li> </ul>"},{"location":"OOP/oop1/#assignment-for-string","title":"Assignment for string","text":"<pre><code>char charr1[20];\nchar charr2[20] = \"jaguar\"; string str1;\nstring str2 = \"panther\"; carr1 = char2; // illegal \nstr1 = str2; // legal\n</code></pre> <p>\u5b57\u7b26\u6570\u7ec4\u4e0d\u80fd\u8d4b\u503c\uff0c\u5b57\u7b26\u4e32\u662f\u53ef\u4ee5\u7684\u3002  \u8fd9\u91cc <code>\"panther\"</code> \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002</p>"},{"location":"OOP/oop1/#concatenation-for-string","title":"Concatenation for string","text":"<pre><code>string str3;\nstr3 = str1 + str2;\nstr1 += str2;\nstr1 += \"lalala\";\n</code></pre> <p>Warning</p> <pre><code>string name;\nname = name + \"Johnson\";\n</code></pre> <p>\u8fd9\u91cc <code>name</code> \u5df2\u7ecf\u6709\u786e\u5b9a\u503c\u4e86\uff0c\u56e0\u4e3a\u8fd9\u91cc\u662f\u4e00\u4e2a class \u6001\uff0c\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</p>"},{"location":"OOP/oop1/#length","title":"Length","text":"<p><code>s.length()</code> \u5f97\u5230\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002(C++ \u4e2d\u5b57\u7b26\u4e32\u6ca1\u6709 <code>\\0</code>.)</p> <ul> <li><code>.</code> \u7528\u6765\u68c0\u7d22\u7ed3\u6784\u91cc\u7684\u6210\u5458\u3002(in C)</li> <li>C++ \u7684\u505a\u6cd5\u662f\u5728\u7ed3\u6784\u91cc\u653e\u5165\u4e86\u51fd\u6570\uff0c\u6210\u4e86\u7c7b\u3002</li> </ul>"},{"location":"OOP/oop1/#create-a-string","title":"Create a string","text":"<p><code>string major(\"CS\");</code> \u8fd9\u6837\u4e5f\u53ef\u4ee5\u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002(\u7c7b\u4f3c\u5730\u4e5f\u53ef\u4ee5 <code>int age(18);</code>)</p>"},{"location":"OOP/oop1/#other-member-functions","title":"Other Member Functions","text":"<ul> <li>sub-string <code>substr(int pos, int len);</code> \u62f7\u8d1d\u5b57\u7b26\u4e32\u4ece <code>pos</code> \u4f4d\u7f6e\u5f00\u59cb\u7684 <code>len</code> \u4e2a\u5b57\u7b26<ul> <li>\u5982\u679c <code>pos</code> \u8d85\u51fa\u4e86\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u4f1a\u4ea7\u751f\u5f02\u5e38\uff1b</li> <li>\u5982\u679c <code>pos</code> \u7b49\u4e8e\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u4f1a\u5f97\u5230\u7a7a\u5b57\u7b26\u4e32\uff1b</li> <li>\u5982\u679c <code>pos+len</code> \u8d85\u51fa\u4e86\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u53ea\u4f1a\u62f7\u8d1d\u5230\u5b57\u7b26\u4e32\u672b\u5c3e\u3002</li> </ul> </li> <li> <p>alter string  </p> <ul> <li><code>assign</code> \u5c06\u4e00\u4e2a\u65b0\u7684\u503c\u8d4b\u7ed9\u5b57\u7b26\u4e32  <pre><code>assign (const string&amp; str);     //string\nassign (const string&amp; str, size_t subpos, size_t sublen);   //substring\nassign (const char* s);     //C-string\nassign (const char* s, size_t n);   //buffer\nassign (size_t n, char c);      //fill\n</code></pre></li> <li><code>insert</code> \u5728 <code>pos</code> \u4e4b\u524d\u63d2\u5165\u5b57\u7b26 <pre><code>insert (size_t pos, const string&amp; str);\ninsert (size_t pos, const string&amp; str, size_t subpos, size_t sublen);\ninsert (size_t pos, const char* s);\ninsert (size_t pos, const char* s, size_t n);\ninsert (size_t pos, size_t n, char c);   </code></pre></li> <li><code>erase (size_t pos = 0, size_t len = npos);</code> \u64e6\u9664\u4ece <code>pos</code> \u5f00\u59cb <code>len</code> \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff08\u5982\u679c\u8d85\u51fa\u5b57\u7b26\u4e32\u957f\u5ea6\u5219\u5230\u5b57\u7b26\u4e32\u672b\u5c3e\uff09 \u9ed8\u8ba4\u53c2\u6570\u64e6\u9664\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u7b26</li> <li><code>replace</code> \u4ee3\u66ff\u4ece <code>pos</code> \u5f00\u59cb <code>len</code> \u7684\u5b57\u7b26\u4e32\u3002     <pre><code>replace (size_t pos,  size_t len,  const string&amp; str);\nreplace (size_t pos,  size_t len,  const string&amp; str,  size_t subpos, size_t sublen);\nreplace (size_t pos,  size_t len,  const char* s);\nreplace (size_t pos,  size_t len,  const char* s, size_t n);\nreplace (size_t pos,  size_t len,  size_t n, char c);\n</code></pre></li> <li><code>find (const string&amp; str, size_t pos = 0)</code> \u4ece <code>pos</code> \u5f00\u59cb\u67e5\u627e\u5b57\u7b26\u4e32 <code>str</code>, \u8fd4\u56de\u7b2c\u4e00\u6b21\u5339\u914d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002</li> </ul> </li> </ul>"},{"location":"OOP/oop1/#dynamically-allocated-memory","title":"Dynamically Allocated Memory","text":"<p>operator(not function) \u8fd0\u7b97\u7b26\u662f\u7f16\u7a0b\u4ea7\u751f\u4ee3\u7801\u6765\u505a\u8fd9\u4ef6\u4e8b\u3002</p> <ul> <li><code>new</code> <code>new</code> \u8fd4\u56de\u6307\u5411\u5730\u5740\u7a7a\u95f4\u7684\u6307\u9488\u3002\u4f46 <code>new</code> \u77e5\u9053\u5730\u5740\u7a7a\u95f4\u7684\u7c7b\u578b\uff08\u4e0e <code>malloc</code> \u4e0d\u540c\uff09\u3002<ul> <li><code>new int;</code></li> <li><code>new Stash;</code></li> <li><code>new int[10];</code></li> </ul> </li> <li> <p><code>delete</code> \u5982\u679c\u8981\u5220\u9664\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u4f1a\u6267\u884c\u5176\u6790\u6784\u51fd\u6570  </p> <ul> <li><code>delete p;</code></li> <li><code>delete[] p;</code></li> </ul> </li> <li> <p>Dynamic Arrays    </p> <pre><code>int * psome = newint [10];\ndelete[] psome;\n</code></pre> </li> </ul> <p>\u8fd9\u91cc <code>delete[]</code> \u7684\u62ec\u53f7\u662f\u4e0d\u80fd\u5c11\u7684</p> <p><code>p1 = new int;</code> \u8fd4\u56de\u4e00\u5757\u56db\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u7684\u5730\u5740\uff0c\u540c\u65f6\u6709\u4e00\u4e2a\u8868\u8bb0\u5f55\u67d0\u4e2a\u5730\u5740\u6709\u6211\u4eec\u7533\u8bf7\u7684\u56db\u5b57\u8282\u3002\u540c\u7406 <code>p2 = new int [10];</code> \u4e5f\u4f1a\u5728\u8868\u4e2d\u8bb0\u5f55.<code>delete p1</code> \u4e0d\u4f1a\u53bb\u62b9\u6389\u5730\u5740\u7684\u6570\u636e\uff0c\u53ea\u662f\u5c06\u8868\u4e2d\u6761\u76ee\u53bb\u6389\u3002\u4f46\u5982\u679c <code>p2++;</code> \u518d <code>delete p2;</code> \u627e\u4e0d\u5230 p2, \u8fd9\u662f\u4e00\u4e2a\u5f02\u5e38\u64cd\u4f5c\u3002 <code>p1 = new Student;</code> \u90a3\u4e48 <code>delete p1;</code> \u65f6\u4f1a\u6267\u884c <code>Student</code> \u7684\u6790\u6784\u51fd\u6570. <code>delete p2;</code> \u8ba4\u4e3a <code>p2</code> \u6307\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6240\u4ee5\u53ea\u5c06\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u6790\u6784\u3002\u8fd9\u6837\u7a7a\u95f4\u662f\u53ef\u4ee5\u56de\u6536\u7684 <code>delete [] p2;</code> \u5c31\u662f\u544a\u8bc9\u7cfb\u7edf\u4e0d\u6b62\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f1a\u5e2e\u6211\u4eec\u5c06\u6240\u6709\u5bf9\u8c61\u90fd\u6790\u6784\u3002</p>"},{"location":"OOP/oop10/","title":"Templates","text":"<p>Reuse source code for generic programming.</p>"},{"location":"OOP/oop10/#function-templates","title":"Function Templates","text":"<pre><code>template &lt; class T &gt; void swap( T&amp; x, T&amp; y ) { T temp = x; x = y; y = temp; }\n</code></pre> <ul> <li>The template keyword introduces the <code>template</code> <code>template</code> \u4e0b\u9762\u7684\u5185\u5bb9\u5c31\u662f\u6a21\u677f\uff0c\u6bd4\u5982\u8fd9\u91cc\u5c31\u662f\u51fd\u6570\u6a21\u677f\u3002\u5982\u679c\u4e0b\u9762\u662f\u7c7b\u90a3\u5c31\u662f\u7c7b\u6a21\u677f\u3002</li> <li>The <code>class T</code> specifies a parameterized type name <ul> <li>class means any built-in type or user-defined type </li> <li>Inside the template, use T as a type name</li> </ul> </li> </ul> <p>Template Instantiation <pre><code>int i = 3; int j = 4; swap(i, j); // use explicit int swap \nfloat k = 4.5; float m = 3.7; swap(k, m); // instanstiate float swap \nstd::string s(\"Hello\"); std::string t(\"World\"); swap(s, t); // std::string swap \n</code></pre> \u8fd9\u91cc <code>swap(k,m)</code> \u4f1a\u8c03\u7528\u51fd\u6570\u6a21\u677f\uff0c\u968f\u540e\u751f\u6210 float swap, \u7f16\u8bd1\u5668\u4f1a\u63d2\u5165\u51fd\u6570\uff0c\u8c03\u7528\u3002 \u5728 C++ \u4e2d\u7f16\u8bd1\u540e\u91cd\u8f7d\u51fd\u6570\u7684\u540d\u5b57\u4e0d\u518d\u662f f, \u800c\u662f _f_int/_f_double/_f_void..., \u628a\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u7f16\u5165\u51fd\u6570\u7684\u540d\u5b57\u3002  </p> <ul> <li>Only exact match on types is used </li> <li>No conversion operations are applied      <pre><code>swap(int, int); // ok \nswap(double, double); // ok \nswap(int, double); // error!\n</code></pre></li> <li>Even implicit conversions are ignored </li> <li>Template functions and regular functions coexist</li> </ul> <p>\u5982\u679c\u51fd\u6570\u91cc\u6ca1\u6709\u7c7b\u578b T, \u53ef\u4ee5\u76f4\u767d\u5730\u544a\u8bc9\u7f16\u8bd1\u5668?</p>"},{"location":"OOP/oop10/#class-templates","title":"Class templates","text":"<pre><code>template &lt;class T&gt; class Vector { public: Vector(int); ~Vector(); Vector(const Vector&amp;); Vector&amp; operator=(const Vector&amp;); T&amp; operator[](int); private: T* m_elements; int m_size; };\n</code></pre> <p>\u7c7b\u6a21\u677f\u4e00\u5b9a\u662f\u663e\u5f0f\u7684(\u5982 STL \u6a21\u677f)</p> <pre><code>Vector&lt;int&gt; v1(100); Vector&lt;Complex&gt; v2(256); v1[20] = 10; v2[20] = v1[20]; // ok if int-&gt;Complex define\n</code></pre> <p>\u5728\u6210\u5458\u51fd\u6570\u5b9a\u4e49\u90fd\u8981\u52a0\u4e0a\u6a21\u677f\u3002</p> <p><pre><code>template &lt;class T&gt; Vector&lt;T&gt;::Vector(int size) : m_size(size) { m_elements = new T[m_size]; } template &lt;class T&gt; T&amp; Vector&lt;T&gt;::operator[](int indx) { if (indx &lt; m_size &amp;&amp; indx &gt; 0) { return m_elements[indx]; } else { ... } }\n</code></pre> \u6ce8\u610f <code>template &lt;class T&gt;</code>, <code>Vector&lt;T&gt;</code>.  </p> <p>\u7c7b\u6a21\u677f\u7684\u51fd\u6570\u662f\u58f0\u660e\u800c\u4e0d\u662f\u5b9a\u4e49\uff0c\u6ca1\u6709\u5206\u79bb\u7684 <code>.h</code> \u6587\u4ef6\u3002\uff08\u4e0d\u9700\u8981 <code>inline</code> \u5173\u952e\u5b57\uff09  </p> <ul> <li>Templates can use multiple types  <pre><code>template&lt; class Key, class Value&gt; class HashTable { const Value&amp; lookup(const Key&amp;) const; void install(const Key&amp;, const Value&amp;); ... }; </code></pre></li> <li>Templates nest \u2014 they\u2019re just new types!  <code>Vector&lt; Vector&lt; double *&gt; &gt; // note space &gt; &gt;</code></li> <li>Type arguments can be complicated  <code>Vector&lt; int (*)(Vector&lt;double&gt;&amp;, int)&gt;</code> </li> </ul>"},{"location":"OOP/oop11/","title":"Exceptions","text":""},{"location":"OOP/oop11/#exceptions_1","title":"Exceptions","text":"<p>Run-time Error</p> <p>The basic philosophy of C++ is that \u201cbadly formed code will not be run.  </p> <p>Exception \u6211\u4eec\u80fd\u9884\u89c1\u4ed6\u53d1\u751f\uff0c\u4f46\u4e0d\u662f\u6bcf\u6b21\u90fd\u53d1\u751f\u3002</p> <p>read a file</p> <ul> <li>open the file;</li> <li>determine its size;</li> <li>allocate that much memory;</li> <li>read the file into memory;</li> <li>close the file;</li> </ul> <p>\u53ef\u4ee5\u9884\u89c1\u7684\u9519\u8bef\uff1a\u627e\u4e0d\u5230\u6587\u4ef6\uff0c\u6587\u4ef6\u867d\u7136\u5b58\u5728\u4f46\u662f\u6253\u4e0d\u5f00\uff08\u6ca1\u6709\u6743\u9650\u3001\u88ab\u522b\u7684\u8fdb\u7a0b\u6253\u5f00\uff09\uff0c\u6587\u4ef6\u5927\u5c0f\u5224\u65ad\u5931\u8d25\uff08\u53ef\u80fd\u662f\u4e00\u4e2a\u4e32\u53e3\uff0c\u4e0d\u662f\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\uff0c\u4e32\u53e3\u662f\u6ca1\u6709\u7ed3\u675f\u7684\uff09\u53ef\u4ee5 fseek \u5230\u6587\u4ef6\u672b\u5c3e\uff0c\u518d ftell \u672b\u5c3e\u7684\u503c\u3002 <pre><code>errorCodeType readFile { initialize errorCode = 0;\nopen the file;\nif ( theFilesOpen ) { determine its size;\nif ( gotTheFileLength ) { allocate that much memory;\nif ( gotEnoughMemory ) { read the file into memory;\nif ( readFailed ) { errorCode = -1;\n} } else {\nerrorCode = -2;\n} } else {\nerrorCode = -3;\n}\nclose the file;\nif ( theFILEDidntClose &amp;&amp; errorCode == 0 ) { errorCode = -4;\n} else {\nerrorCode = errorCode and -4;\n} } else {\nerrorCode = -5;\n}\nreturn errorCode;\n}\n</code></pre> \u8fd9\u662f\u597d\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u5931\u8d25\u4f1a\u5931\u8d25\u5728\u54ea\u4e00\u6b65\u3002\u4f46\u8fd9\u6837\u7684\u53ef\u8bfb\u6027\u4e0d\u597d\uff0c\u53ef\u4ee5\u7528\u5f02\u5e38\u6539\u5199\u4e3a\u4e0b\u9762\u8fd9\u6837\u3002 <pre><code>try {\nopen the file;\ndetermine its size;\nallocate that much memory;\nread the file into memory;\nclose the file; } catch ( fileOpenFailed ) { doSomething; } catch ( sizeDeterminationFailed ) { doSomething; } catch ( memoryAllocationFailed ) { doSomething; } catch ( readFailed ) { doSomething; } catch ( fileCloseFailed ) { doSomething; }\n</code></pre> \u628a\u4e1a\u52a1\u903b\u8f91\u548c\u9519\u8bef\u5904\u7406\u5206\u5f00\u4e86\u3002</p> <p>At the point where the problem occurs, you might not know what to do with it, but you do know that you can\u2019t just continue on merrily; you must stop, and somebody, somewhere, must figure out what to do. \u8fd0\u884c\u65f6\u523b\u5f71\u54cd\u7a0b\u5e8f\u8fd0\u884c\u7684\uff0c\u80fd\u9884\u89c1\u4f1a\u53d1\u751f\u4f46\u4e0d\u662f\u6bcf\u4e00\u6b21\u53d1\u751f\u7684\u4e8b\u4ef6\u3002</p> <ul> <li>The significant benefit of exceptions is that they clean up error handling code.</li> <li>It separates the code that describes what you want to do from the code that is executed.</li> </ul> <p>Vector</p> <p><pre><code>template &lt;class T&gt; class Vector { private: T* m_elements; int m_size; public: Vector (int size = 0) : m_size(size) ... ~Vector () { delete [] m_elements; } void length(int); int length() { return m_size; } T&amp; operator[](int); };\n</code></pre> \u8fd9\u91cc [] \u64cd\u4f5c\u7b26\u53ef\u80fd\u4f1a\u51fa\u73b0\u8d8a\u754c\u7684\u60c5\u51b5\u3002\u6700\u4f73\u7684\u5904\u7406\u65b9\u5f0f\u662f\u629b\u5f02\u5e38\u3002 <pre><code>if (indx &lt; 0 || indx &gt;= m_size) { // throw is a keyword \n// exception is raised at this point \nthrow &lt;&lt;something&gt;&gt;; } </code></pre> \u629b\u5f02\u5e38\u4e4b\u540e\uff0c\u540e\u7eed\u7684\u4ee3\u7801\u90fd\u4e0d\u4f1a\u6267\u884c\uff08\u6ca1\u9047\u5230\u7684 <code>try{}</code> \u7684\u5927\u62ec\u53f7\u90fd\u53ef\u4ee5\u770b\u4f5c\u5f02\u5e38\uff09\uff0c\u7136\u540e\u5f80\u5916\u8d70\u3002\u4e0a\u9762\u8fd9\u91cc throw \u4e4b\u540e\uff0c\u5982\u679c\u5927\u62ec\u53f7\u662f\u8bed\u53e5\u5c31\u79bb\u5f00\u8bed\u53e5\uff0c\u5982\u679c\u662f\u51fd\u6570\u5c31\u79bb\u5f00\u51fd\u6570\uff0c\u5982\u679c\u662f <code>try{}</code>, \u6211\u4eec\u5c31\u5224\u65ad\u5339\u914d\u3002 \u4e00\u4e2a\u5f02\u5e38\u7c7b <pre><code>class VectorIndexError { public: VectorIndexError(int v) : m_badValue(v) { } ~VectorIndexError() { } void diagnostic() { cerr &lt;&lt; \"index \" &lt;&lt; m_ badValue &lt;&lt; \"out of range!\"; } private: int m_badValue; };\n</code></pre> \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5 <code>throw VectorIndexError(indx);</code>. \u5916\u90e8\u5c31\u4f1a\u62ff\u5230\u8fd9\u4e2a\u5bf9\u8c61\u3002\u9700\u8981\u7528 try catch \u6355\u6349\uff0c\u5426\u5219\u4f1a\u76f4\u63a5\u7ed3\u675f\u3002\u6355\u6349\u4e4b\u540e\u6574\u4e2a try catch \u5c31\u6267\u884c\u7ed3\u675f\u3002 \u53ef\u4ee5\u6355\u6349\u5230\u5f02\u5e38\u540e\u518d\u7ee7\u7eed throw.  <pre><code>void outer2() { String err(\"exception caught\"); try {\nfunc(); } catch (VectorIndexError) { cout &lt;&lt; err; throw; // propagate the exception \n} }\n</code></pre> <code>catch(...)</code> \u8868\u793a\u6355\u6349\u6240\u6709\u5f02\u5e38\uff0c\u4f46\u8fd9\u6837\u65e0\u6cd5\u83b7\u5f97\u5f02\u5e38\u7684\u5bf9\u8c61\u3002</p> <ul> <li>Is that surrounding a trye<ul> <li>NO: leave that scope<ul> <li>Is it a method body<ul> <li>YES: return to the caller, then </li> <li>NO: go to 1<sup>st</sup> line</li> </ul> </li> </ul> </li> <li>YES: try to match a catch<ul> <li>YES: do the clause and</li> <li>NO:</li> </ul> </li> </ul> </li> </ul> <p>\u53d1\u751f\u5f02\u5e38\u79bb\u5f00 fun \u7684\u65f6\u5019\u672c\u5730\u53d8\u91cf\u4f1a\u88ab\u6790\u6784\u3002 <code>throw VIEE(idx)</code> \u7684\u5bf9\u8c61\u5728\u5806\u91cc\uff0c\u4f46\u662f\u4e0d\u88ab\u6e05\u9664\uff0c\u4f1a\u4e00\u76f4\u7559\u5728\u539f\u5730. catch \u6355\u6349\u5230\u5bf9\u8c61\u4e4b\u540e\uff0c\u7ed3\u675f try catch \u4e4b\u540e\u4f1a\u628a\u5bf9\u8c61\u6e05\u9664\u3002\uff08\u8fd9\u91cc\u4e0d\u4f1a\u53d1\u751f\u62f7\u8d1d\u6784\u9020\uff0c\u4ecd\u7136\u662f\u521a\u521a\u5806\u91cc\u7684\u5bf9\u8c61\uff09  </p> <p><code>throw;</code> reraises the exception being handled. valid only within a handler</p>"},{"location":"OOP/oop11/#try-blocks","title":"Try blocks","text":"<p>try \u540e\u9762\u53ef\u4ee5\u8ddf\u4efb\u610f\u6570\u91cf\u7684 catch. </p> <p>Two forms </p> <ul> <li><code>catch (SomeType v) { // handler code }</code></li> <li><code>catch (...) { // handler code }</code></li> </ul> <p>throw \u53ef\u4ee5\u629b\u7684\u4efb\u610f\u7c7b\u578b, int/double/... \u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u4e00\u822c\u4e0d\u4f1a\u629b\u539f\u59cb\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u4e3a\u8868\u8fbe\u7684\u4fe1\u606f\u6709\u9650\u3002\u901a\u5e38\u4f1a\u505a\u4e00\u4e2a\u7c7b\uff0c\u629b\u7c7b\u7684\u5bf9\u8c61\u3002  </p> <p>Handlers are checked in order of appearance \u6309\u987a\u5e8f\u5339\u914d\uff0c\u5148\u5339\u914d\u524d\u9762\u7684\uff0c\u5339\u914d\u6210\u529f\u540e\u4e0d\u4f1a\u5bfb\u6c42\u4e0b\u4e00\u4e2a\u5339\u914d\u3002</p> <ul> <li>Check for exact match </li> <li>Apply base class conversions  Reference and pointer types, only \u5bf9\u8c61\u4f1a\u8fdb\u884c\u57fa\u7c7b\u8f6c\u6362\u3002\u4e00\u822c\u628a\u5b50\u7c7b\u653e\u5728\u524d\u9762\u3002</li> <li>Ellipses (...) match all</li> </ul>"},{"location":"OOP/oop11/#exceptions-and-new","title":"Exceptions and new","text":"<p><code>new</code> does NOT returned 0 on failure. <code>new</code> raises a <code>bad_alloc()</code> exception.  </p> <p>Standard library exceptions</p>"},{"location":"OOP/oop11/#exception-specifications","title":"Exception specifications","text":"<p>Declare which exceptions function might raise Part of function prototypes e.g. <code>void abc(int a) : throw(MathErr) {}</code> </p> <p>\u8c03\u4e86\u522b\u4eba\u7684\u51fd\u6570\uff0c\u8981\u4e3a\u4e86\u522b\u4eba\u629b\u5f02\u5e38\u505a\u51c6\u5907\u3002 \u53ef\u4ee5\u5728\u51fd\u6570\u5934\u90e8\u58f0\u660e\u4f1a\u629b\u4ec0\u4e48\u5f02\u5e38\u3002\u4e0d\u4f1a\u5728\u7f16\u8bd1\u65f6\u671f\u68c0\u67e5\u3002   \u9650\u5236 <code>abc</code> \u800c\u975e\u8c03\u7528 <code>abc</code> \u51fd\u6570\u3002\u5982\u679c\u629b\u51fa\u4e86\u6bd4\u4f60\u58f0\u660e\u66f4\u591a\u7684\u5f02\u5e38\uff0c\u5f02\u5e38\u68c0\u67e5\u673a\u5236\u4f1a\u629b\u51fa\u4e00\u4e2a\u7ec8\u6b62\u7a0b\u5e8f\u7684\u5f02\u5e38\u3002</p> <pre><code>Printer::print(Document&amp;) : throw(PrinterOffLine, BadDocument) { ... PrintManager::print(Document&amp;) : throw (BadDocument) { ... // raises or doesn\u2019t handle BadDocument \nvoid goodguy() : throw () { // handles all exceptions \nvoid average() { } // no spec, no checking,\n</code></pre> <ul> <li>\u7b2c\u4e00\u4e2a\u8868\u793a\u4f1a\u629b <code>PrinterOffLine, BadDocument</code> \u5f02\u5e38\u3002\uff08\u4e0d\u4e00\u5b9a\u629b\uff0c\u4f46\u53ef\u80fd\uff09  </li> <li>\u7b2c\u4e09\u4e2a\u8868\u793a\u4e0d\u4f1a\u629b\u4efb\u4f55\u5f02\u5e38\uff0c\u8fd9\u6837\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u9700\u8981 try catch. </li> <li>\u7b2c\u56db\u4e2a\u53ef\u80fd\u4f1a\u629b\u5f02\u5e38\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4e0d\u4f1a\u8fdb\u884c\u68c0\u67e5\u3002</li> </ul>"},{"location":"OOP/oop11/#design-considerations","title":"Design considerations","text":"<ul> <li>Exceptions should indicate errors.  exception \u4e0d\u662f routine. </li> <li>Don\u2019t use exceptions in place of good design.  </li> </ul> <p>Summary</p> <ul> <li>Error recovery is a hard design problem </li> <li>All subsystems need help from their clients to handle exceptional cases </li> <li>Exceptions provide the mechanism <ul> <li>Propagated dynamically </li> <li>Objects on stack destroyed properly </li> <li>Act to terminate the problematic function </li> </ul> </li> <li>Another big use:  Constructors that can\u2019t complete their work</li> </ul>"},{"location":"OOP/oop11/#more-exceptions","title":"More exceptions","text":""},{"location":"OOP/oop11/#exceptions-and-constructors","title":"Exceptions and constructors","text":"<p>\u5982\u679c\u5728\u6784\u9020\u7684\u65f6\u5019\u53d1\u751f\u4e86\u5f02\u5e38\u3002 \u5148\u5206\u914d\u5185\u5b58\uff0c\u518d\u6267\u884c\u6784\u9020\u3002 <pre><code>f() {\nA *p = new A();\n...\ndelete p;\n}\n</code></pre> \u5982\u679c\u6784\u9020\u7684\u65f6\u5019\u51fa\u5f02\u5e38, p \u65e0\u6cd5\u5f97\u5230\u5206\u914d\u7684\u5730\u5740\uff0c\u4f46\u662f\u5185\u5b58\u5374\u6ca1\u6709\u88ab\u6790\u6784\u3002\u5185\u5b58\u6cc4\u6f0f\uff01</p>"},{"location":"OOP/oop12/","title":"Smart Pointers","text":"<p>Reference counting  </p> <p>C++ \u6ca1\u6709\u5355\u6839\u7ed3\u6784\uff0c\u4e5f\u6ca1\u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\u3002</p> <p>Goal: Introduce the code for maintaining reference counts. </p> <ul> <li>A reference count is a count of the number of times an object is shared. \u8868\u793a\u5f53\u524d\u5bf9\u8c61\u88ab\u51e0\u4e2a\u6307\u9488\u6307\u7740\u3002</li> <li>Pointer manipulations have to maintain the count \u5728\u6307\u9488\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u4fee\u6539\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u3002\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u7684\u8ba1\u6570\u662f 0, \u6211\u4eec\u9700\u8981\u628a\u5b83\u6790\u6784\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5783\u573e\u56de\u6536\u3002</li> </ul> <p>Class <code>UCObject</code> holds the count <code>UCPointer</code> is a smart pointer to a <code>UCObject</code> </p>"},{"location":"OOP/oop12/#reference-counts","title":"Reference counts","text":"<p>Shared memory maintains a count of how many times it is shared.  </p> <p>\u4e3a\u4e86\u8282\u7ea6\u5185\u5b58\uff0c\u6211\u4eec\u8ba9\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6307\u5411\u7684 \"abcdef\" \u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002</p> <ul> <li>Each sharable object has a counter Initial value is 0</li> <li>Whenever a pointer is assigned: <code>p = q;</code> Have to do the following  <pre><code>p-&gt;decrement(); // p's count will decrease \np = q; q-&gt;increment(); // q/p's count will increase\n</code></pre></li> </ul> <p><code>StringRep</code> \u7ee7\u627f\u81ea <code>UCObject</code>, \u56e0\u6b64\u5185\u90e8\u6709\u5f15\u7528\u8ba1\u6570\u3002 <code>String</code> \u662f\u5916\u90e8\u63a5\u53e3\uff0c\u6709\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u662f <code>UCPointer</code>, \u6307\u5411 <code>StringRep</code>. </p>"},{"location":"OOP/oop12/#ucobject","title":"UCObject","text":"<p><pre><code>#include &lt;assert.h&gt; class UCObject { public: UCObject() : m_refCount(0) { } virtual ~UCObject() { assert(m_refCount == 0);};   // \u8fd9\u91cc assert, \u56e0\u4e3a\u4e0d\u662f\u5bf9\u8c61\u7684\u95ee\u9898\uff0c\u662f\u5916\u90e8\u7684\u95ee\u9898\u3002\nUCObject(const UCObject&amp;) : m_refCount(0) { }      // \u4e0d\u62f7\u8d1d refcount\nvoid incr() { m_refCount++; } void decr(); int references() { return m_refCount; } private: int m_refCount; };\ninline void UCObject::decr() { m_refCount -= 1; if (m_refCount == 0) { delete this; } } </code></pre> <code>delete this;</code> \u662f\u5408\u6cd5\u7684\uff0c\u4f46\u4e4b\u540e\u4e0d\u5e94\u8be5\u518d\u4f7f\u7528 <code>this</code> \u6307\u9488\u3002</p>"},{"location":"OOP/oop12/#ucpointer","title":"UCPointer","text":"<p><pre><code>template &lt;class T&gt; class UCPointer { private: T* m_pObj; void increment() { if (m_pObj) m_pObj-&gt;incr(); } void decrement() { if (m_pObj) m_pObj-&gt;decr(); } public: UCPointer(T* r = 0): m_pObj(r) { increment();} ~UCPointer() { decrement(); }; UCPointer(const UCPointer&lt;T&gt; &amp; p); UCPointer&amp; operator=(const UCPointer&lt;T&gt; &amp;); T* operator-&gt;() const; T&amp; operator*() const { return *m_pObj; }; }\ntemplate &lt;class T&gt; UCPointer&lt;T&gt;::UCPointer(const UCPointer&lt;T&gt; &amp; p){ m_pObj = p.m_pObj; increment(); }\ntemplate &lt;class T&gt; UCPointer&lt;T&gt;&amp; UCPointer&lt;T&gt;::operator=(const UCPointer&lt;T&gt;&amp; p){ if (m_pObj != p.m_pObj) { decrement(); m_pObj = p.m_pObj; increment(); } return *this; }\ntemplate&lt;class T&gt; T* UCPointer&lt;T&gt;::operator-&gt;() const { return m_pObj; }\n</code></pre> \u9690\u542b\u4e86 <code>T</code> \u5fc5\u987b\u7ee7\u627f\u81ea <code>UCObject</code>, \u8fd9\u6837\u624d\u6709 <code>incr</code> \u7684\u6210\u5458\u51fd\u6570\u3002   \u8fd9\u91cc\u53ea\u8981\u6784\u9020\u4e86\u5bf9\u8c61\uff0c\u5c31\u4f1a\u8c03\u7528 <code>increment</code> \u51fd\u6570\u3002 \u62f7\u8d1d\u6784\u9020\u540e\u8981\u5bf9\u8ba1\u6570\u52a0\u4e00\u3002  \u8d4b\u503c\u6211\u4eec\u8981\u5148\u68c0\u67e5\u4e8c\u8005\u6307\u5411\u7684\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002</p> Example: Shape inherits from UCObject <pre><code>Ellipse elly(200F, 300F); UCPointer&lt;Shape&gt; p(&amp;elly); p-&gt;render(); // calls Ellipse::render() on elly!\n</code></pre>"},{"location":"OOP/oop12/#stringrep","title":"StringRep","text":"<p>Envelope and Letter  </p> <p><pre><code>class StringRep : public UCObject { public: StringRep(const char *); ~StringRep(); StringRep(const StringRep&amp;); int length() const{ return strlen(m_pChars); } int equal(const StringRep&amp;) const; private: char *m_pChars; // reference semantics -- no assignment op! \nvoid operator=(const StringRep&amp;) { }    // \u79c1\u6709\uff0c\u5916\u754c\u4e0d\u80fd\u505a StringRep \u7684\u8d4b\u503c\n};\n</code></pre> \u5177\u4f53\u5b9e\u73b0 <pre><code>StringRep::StringRep(const char *s) { if (s) { int len = strlen(s) + 1; m_pChars = new char[len]; strcpy(m_pChars , s); } else { m_pChars = new char[1]; *m_pChars = '\\0'; } } StringRep::~StringRep() { delete [] m_pChars ; }\nStringRep::StringRep(const StringRep&amp; sr) { int len = sr.length(); m_pChars = new char[len + 1]; strcpy(m_pChars , sr.m_pChars ); } int StringRep::equal(const StringRep&amp; sp) const { return (strcmp(m_pChars, sp.m_pChars) == 0); }\n</code></pre> \u8865: C++ \u5185\u5b57\u7b26\u4e32\u4e0d\u662f\u901a\u8fc7 char \u7684\u65b9\u5f0f\u5b9e\u73b0(\u6ca1\u6709 <code>\\0</code>), \u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u957f\u5ea6\u53d8\u91cf\u3002 \u62f7\u8d1d\u6784\u9020\u65f6\u4f1a\u8c03\u7528 UCObject \u7684\u62f7\u8d1d\u6784\u9020\u3002</p>"},{"location":"OOP/oop12/#string","title":"String","text":"<p><pre><code>class String { public: String(const char *); ~String(); String(const String&amp;); String&amp; operator=(const String&amp;); int operator==(const String&amp;) const; String operator+(const String&amp;) const; int length() const; operator const char*() const; private: UCPointer&lt;StringRep&gt; m_rep; };\n</code></pre> \u5177\u4f53\u5b9e\u73b0 <pre><code>String::String(const char *s) : m_rep(0) { m_rep = new StringRep(s); } String::~String() {} // Again, note constructor for rep in list. \nString::String(const String&amp; s) : m_rep(s.m_rep) {  // \u505a UCPointer&lt;StringRep&gt; \u7684\u62f7\u8d1d\u6784\u9020\n} String&amp; String::operator=(const String&amp; s) { m_rep = s.m_rep; // let smart pointer do work! \nreturn *this; }\n</code></pre> \u8fd9\u91cc <code>m_rep(0)</code> \u5b9e\u9645\u4e0a\u662f\u7528 0 \u53bb\u505a UCP \u7684\u6784\u9020(\u4e5f\u53ef\u4ee5\u4e0d\u5199\uff0c\u56e0\u4e3a\u9ed8\u8ba4 0). <code>new</code> \u8fd4\u56de\u7684\u662f <code>StringRep *</code>, \u800c\u5de6\u8fb9\u662f <code>UCP&lt;StringRep&gt;</code>, \u8fd9\u91cc\u8d4b\u503c\u65f6\u5c31\u4f1a\u628a <code>StringRep *</code> \u8f6c\u5316\u4e3a <code>UCP&lt;StringRep&gt;</code>, \u518d\u8d4b\u503c\u3002</p> <pre><code>int String::operator==(const String&amp; s) const { // overloaded -&gt; forwards to StringRep \nreturn m_rep-&gt;equal(*s.m_rep); // smart ptr * \n} int String::length() const { return m_rep-&gt;length(); }\n</code></pre> <p>Summary</p> <ul> <li>UCPointer maintains reference counts </li> <li>UCObject hides the details of the count  String is very clean </li> <li>StringRep deals only with string storage and manipulation </li> <li>UCObject and UCPointer are reusable \u4ee3\u7801\u662f\u53ef\u590d\u7528\u7684\u3002</li> <li>Objects with cycles of UCPointer will never be deleted UCP \u6307\u5411\u7684\u5bf9\u8c61\u6c38\u8fdc\u4e0d\u88ab\u5220\u9664\u3002</li> </ul>"},{"location":"OOP/oop2/","title":"Class","text":"<p>Abstract</p> <ul> <li>How to decalare a class</li> <li>The declaration and definition of a class</li> <li>Constructor and Destructor</li> <li>Seperated head and code file</li> </ul>"},{"location":"OOP/oop2/#introduction","title":"Introduction","text":"<pre><code>typedef struct point {\nfloat x;\nfloat y;\n} Point;\nvoid print(const Point *p)\n{\nprintf(\"%d %d\\n\", p-&gt;x, p-&gt;y);\n}\nvoid move(Point* p,int dx, int dy)\n{\np-&gt;x += dx;\np-&gt;y += dy;\n}\nint main()\n{\nPoint a;\na.x = 1;\na.y = 2;\nprint(&amp;a);\nmove(&amp;a, 10, 20);\nprint(&amp;a);\n}\n</code></pre> <p>\u4ee5\u4e0a\u662f C \u8bed\u8a00\u80fd\u505a\u7684\uff0c\u5728 C++ \u91cc\u6211\u4eec\u53ef\u4ee5\u628a\u51fd\u6570\u4e5f\u653e\u5230\u7ed3\u6784\u91cc\u9762\u3002 <pre><code>typedef struct point {\nint x;\nint y;\nvoid print();       }Point;\n</code></pre></p> <p>\u8fd9\u91cc\u53ea\u662f\u58f0\u660e\uff0c\u5e76\u4e0d\u4f1a\u4ea7\u751f\u5b9e\u9645\u4ee3\u7801\uff08\u5305\u62ec\u7ed3\u6784\u91cc\u7684\u53d8\u91cf\u4e5f\u53ea\u662f\u58f0\u660e\uff09\u3002\u6211\u4eec\u5f80\u7ed3\u6784\u91cc\u653e\u4e86\u51fd\u6570\u539f\u578b\uff08\u5373\u51fd\u6570\u58f0\u660e\uff09  </p> <p>\u7ed3\u6784\u5916\u9762\u7684 <code>print()</code> \u79f0\u4e3a\u81ea\u7531\u51fd\u6570\uff0c\u548c\u4efb\u4f55\u7c7b\u90fd\u6ca1\u6709\u5173\u7cfb\uff0c\u5de6\u4e3a\u51fd\u6570\u81ea\u8eab\u662f\u72ec\u7acb\u7684\u3002  \u58f0\u660e\u5728\u7ed3\u6784\u5185\u7684\u51fd\u6570\u4e0d\u662f\u72ec\u7acb\u7684\uff0c\u4ece\u5c5e\u4e8e <code>Point</code> \u7ed3\u6784\u3002\u8fd8\u9700\u8981\u4e00\u4e2a body.  </p> <pre><code>struct Point {\nint x;\nint y;\nvoid print();       }Point;\nvoid Point::print()\n{\nprintf(\"%d %d\\n\", x, y);\n}\n</code></pre> <p>C++ \u4e2d\u4e0d\u9700\u8981 <code>typedef</code> \u6765\u58f0\u660e\u7ed3\u6784\u4f53\u3002 <code>a.print()</code> \u5373\u53ef\u8c03\u7528\u7ed3\u6784\u4f53\u5185\u6210\u5458\u51fd\u6570\u3002\u4f46\u662f\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\u5982\u4f55\u77e5\u9053\u6211\u4eec\u8981\u8f93\u51fa\u7684\u5c31\u662f <code>a.x a.y</code> ?  </p> <p>\u6211\u4eec\u5728\u6210\u5458\u51fd\u6570\u5185 <code>cout &lt;&lt; this &lt;&lt; endl;</code> \u53d1\u73b0 <code>this</code> \u548c <code>&amp;a</code> \u76f8\u540c\u3002  </p> <p><pre><code>void Point::init(int x, int y)\n{\nthis-&gt;x = x;\nthis-&gt;y = y;\n}\n</code></pre> \u8fd9\u91cc\u5fc5\u987b\u52a0 <code>this</code>, \u5426\u5219\u7c7b\u4f3c\u4e8e\u5c40\u90e8\u53d8\u91cf\u4f1a\u5c4f\u853d\u5168\u5c40\u53d8\u91cf\uff0c\u7f16\u8bd1\u5668\u4f1a\u8ba4\u4e3a <code>x = x</code> \u4ec0\u4e48\u4e5f\u6ca1\u505a\u3002</p>"},{"location":"OOP/oop2/#resolver","title":"<code>::</code> Resolver","text":"<p>\u9884\u89e3\u6790\u5668</p> <ul> <li><code>&lt;Class Name&gt;::&lt;function name&gt;</code></li> <li><code>::&lt;function name&gt;</code></li> </ul> <pre><code>void S::f() {\n::f(); // Would be recursive otherwise!\n::a++; // Select the global a\na--; // The a at class scope\n}\n</code></pre> <p><code>this</code>: the hidden parameter  </p> <ul> <li><code>this</code> is a hidden paramater for all member functions, with the type of the class.  e.g. <code>void Point::move(int dx, int dy);</code> can be recognized as <code>void Point::initialize(Point *this, int dx, int dy);</code> </li> <li>To call the function, you must specify a variable. e.g. <code>p.move(10,10);</code> can be recognized as <code>Point::move(&amp;p,10,10);</code></li> </ul> Info <p><code>Point</code> \u662f\u59d3, <code>init</code> \u662f\u540d\uff0c\u56e0\u6b64 <code>Point::init</code> \u5171\u540c\u6784\u6210\u4e86\u6210\u5458\u51fd\u6570\u7684\u540d\u5b57\uff0c\u56e0\u6b64 <code>void</code> \u9700\u8981\u653e\u5728\u51fd\u6570\u540d\u524d\u9762\uff0c\u5373 <code>void Point::init</code>.  </p>"},{"location":"OOP/oop2/#object","title":"Object","text":"<p>Object = Attributes + Services</p> <ul> <li>Data: the properties or status</li> <li>Operations: the functions  </li> </ul> <ul> <li>In C++, an object is just a variable, and the purest definition is \"a region of storage\".   </li> <li>The struct variables learned before are just objects in C++.</li> </ul>"},{"location":"OOP/oop2/#object-vs-class","title":"Object vs Class","text":"<ul> <li>Object (this cat)  <ul> <li>Represent things, events, or concepts \u5b9e\u4f53</li> <li>Respond to messages at runtime</li> </ul> </li> <li>Classes (the cat) <ul> <li>Define properties of instances</li> <li>Act like types in C++</li> </ul> </li> </ul>"},{"location":"OOP/oop2/#oop-characteristics","title":"OOP Characteristics","text":"<ul> <li>Everything is an object.</li> <li>A program is a bunch of objects telling each other what to do by sending messages. \u7a0b\u5e8f\u5c31\u662f\u4e00\u5806\u5bf9\u8c61\uff0c\u4e92\u76f8\u53d1\u9001\u6d88\u606f\uff0c\u544a\u8bc9\u5bf9\u65b9\u8981\u505a\u4ec0\u4e48 (what instead of how)  e.g. \u4e0a\u8bfe\u7684\u65f6\u5019\uff0c\u8001\u5e08\u5728\u8bb2\u8bfe\uff0c\u7535\u8111\u5728\u53d1\u9001\u6d88\u606f\u7ed9\u6295\u5f71\u4eea... \u8001\u5e08\u8ba9\u540c\u5b66\u7ad9\u8d77\u6765\uff0c\u8fd9\u4e2a\u6d88\u606f\u53d1\u9001\u8fc7\u540e\uff0c\u5177\u4f53\u5982\u4f55\u7ad9\u8d77\u6765\uff0c\u53ea\u7531\u540c\u5b66\u81ea\u5df1\u51b3\u5b9a\u3002</li> <li>Each object has its own memory made up of other objects.</li> <li>Every object has a type.</li> <li>All objects of a particular type can receive the same messages. \u540c\u7c7b\u7684\u5bf9\u8c61\uff0c\u90fd\u53ef\u4ee5\u63a5\u53d7\u76f8\u540c\u7684\u6d88\u606f\u3002 \u53ef\u4ee5\u63a5\u53d7\u76f8\u540c\u6d88\u606f\u7684\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u540c\u4e2a\u7c7b\u578b\u3002 </li> </ul>"},{"location":"OOP/oop2/#constructor","title":"Constructor","text":"<p>\u6211\u4eec\u9700\u8981\u6709\u673a\u5236\uff0c\u4fdd\u8bc1\u5bf9\u8c61\u88ab\u521b\u5efa\u65f6\u6709\u5408\u7406\u7684\u521d\u503c\u3002</p> <ul> <li>\u6784\u9020\u51fd\u6570\u540d\u5b57\u548c\u7ed3\u6784\u540d\u5b57\u5b8c\u5168\u76f8\u540c\uff0c\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u3002</li> <li>\u672c\u5730\u53d8\u91cf\u88ab\u521b\u5efa\u65f6\uff0c\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u3002</li> </ul> <pre><code>struct Point{\n...\nPoint();\n}\nPoint::Point()\n{\n...\n}\n</code></pre> <p>\u5f53\u6211\u4eec\u521b\u5efa\u53d8\u91cf\u65f6 <code>Point b;</code> \u5c31\u4f1a\u81ea\u52a8\u8c03\u7528\u5bf9\u5e94\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u6709\u53c2\u6570\u5c31 <code>Point a(1, 2);</code> \u5373\u53ef\u3002</p> <p>\u6784\u9020\u51fd\u6570\u662f\u53ef\u4ee5\u6709\u53c2\u6570\u7684\u3002</p> <pre><code>struct X {\nint i;\nX(int i); void prt(); }\nX::X(int i)\n{\n// i = 0;\nthis-&gt;i = i;\n}\nvoid prt()\n{ cout &lt;&lt; i &lt;&lt; endl;\n}\nint main()\n{\nX a;    // a.X() \n// X a(1);\na.prt();\n}\n</code></pre> <p>\u8fd9\u6837\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u6784\u9020\u51fd\u6570\u3002\u6539\u4e3a <code>X a(1);</code>  \u6216\u8005 <code>X a=1;</code> \u5373\u53ef\u3002 \u8fd9\u4e24\u79cd\u521d\u59cb\u5316\u7684\u65b9\u6cd5\u662f\u7b49\u4ef7\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4 <code>int m(10)</code> \u548c <code>int m=10</code> \u662f\u7b49\u4ef7\u7684\uff0c<code>X a=1</code> \u548c <code>X a(1)</code> \u4e5f\u662f\u5982\u6b64\u3002  </p> <p>\u5982\u679c\u5e0c\u671b\u7ed9\u7ed3\u6784\u91cc\u7684\u5143\u7d20\u8d4b\u521d\u503c\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u5728 <code>struct</code> \u4e2d\u5b9a\u4e49\u5199\uff0c\u5982</p> <p><pre><code>struct X {\nint i = 100;\n...\n}\n</code></pre> \u4f1a\u62a5 Warning: \u8981\u7528 C++11 \u7684\u6807\u51c6\u7f16\u8bd1\u624d\u884c\u3002</p>"},{"location":"OOP/oop2/#the-default-constructor","title":"The default constructor","text":"<ul> <li>\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002</li> <li>\u7f3a\u7701\u6784\u9020\u51fd\u6570\uff1a\u6ca1\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002</li> <li>\u5f53\u6211\u4eec\u6ca1\u6709\u5199\u6784\u9020\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6211\u4eec\u751f\u6210\u6ca1\u6709\u53c2\u6570\u7684\u81ea\u52a8\u7f3a\u7701\u6784\u9020\u51fd\u6570\u3002</li> </ul> <p>\u5982\u679c\u6211\u4eec\u6709\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u521b\u5efa\u5bf9\u8c61\u65f6\u5fc5\u987b\u63d0\u4f9b\u53c2\u6570\uff1b\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\u3002</p> <pre><code>struct Y {\nfloat f;\nint i;\nY(int a);\n};\nY y1[] = { Y(1), Y(2), Y(3) }; // OK\nY y2[2] = { Y(1) }; Y y3[7]; // Error\nY y4; // Error\n</code></pre>"},{"location":"OOP/oop2/#destructor","title":"Destructor","text":"<p>The destructor is named after the name of the class with a leading tilde (<code>~</code>).The destructor never has any arguments.  \u5982\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u9700\u8981\u5728\u7ed3\u675f\u524d\u5173\u95ed\u53e5\u67c4\u3002</p> <pre><code>struct X() {\nint i;\nX(int i);\n~X();\n}\nX::X(int i)\n{\nthis-&gt;i = i;\n}\nX::~X() {\ncout &lt;&lt; \"~X()\" &lt;&lt; i &lt;&lt; endl;\n}\nint main()\n{\nX a(7);\nX b(11);\na.prt();\nb.prt();\n}\n</code></pre> <p>\u5f97\u5230\u4e86\u5982\u4e0b\u8f93\u51fa <pre><code>7\n11\n~X()11\n~X()7\n</code></pre></p> <p>\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff0c\u6ca1\u6709\u53c2\u6570\u3002  \u5f53\u5176\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c\u6790\u6784\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002 \u56e0\u4e3a\u540e\u6784\u9020\u7684\u53ef\u80fd\u4f1a\u7528\u5230\u5148\u6784\u9020\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u5230\u662f\u9006\u5e8f\uff0c\u5148\u6790\u6784\u540e\u6784\u9020\u7684\u3002</p> <p>\u4f5c\u7528\u57df\u662f\u4ee5\u5927\u62ec\u53f7\u4e3a\u754c\u7684</p> <p><pre><code>int main()\n{\nX a(7);\n{\nX b(11);\n}\na.prt();\n}\n</code></pre> \u8fd9\u6837\u6211\u4eec\u4f1a\u5f97\u5230\u8f93\u51fa <pre><code>~X()11\n7\n~X()7\n</code></pre> \u53ef\u4ee5\u770b\u5230\u5728 7 \u8f93\u51fa\u524d <code>b</code> \u5c31\u5df2\u7ecf\u88ab\u6790\u6784\u3002</p> <p>\u8fdb\u5165\u51fd\u6570\uff0c\u51fd\u6570\u6240\u6709\u7684\u672c\u5730\u53d8\u91cf\u7684\u7a7a\u95f4\u90fd\u5df2\u7ecf\u88ab\u5206\u914d\u597d\u4e86\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u6267\u884c\u5230\u5177\u4f53\u7684\u6784\u9020\u51fd\u6570\u884c\uff0c\u662f\u4e0d\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u7684\u3002\u540c\u7406\uff0c\u5f53\u8fdb\u5165 <code>switch case</code> \u8bed\u53e5\u65f6\uff0c\u5bf9\u8c61\u7684\u7a7a\u95f4\u5df2\u7ecf\u751f\u6210\uff0c\u4f46\u6ca1\u6709\u6784\u9020\uff0c\u8fd9\u6837\u6790\u6784\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002</p> <p>Example</p> <p><pre><code>void f(int i) {\nif(i &lt; 10) {\n//! goto jump1; // Error: goto bypasses init\n}\nX x1;  // Constructor called here\njump1:\nswitch(i) {\ncase 1 :\nX x2;  // Constructor called here\nbreak;\n//! case 2 : // Error: case bypasses init\nX x3;  // Constructor called here\nbreak;\n}\n} </code></pre> \u8fd9\u91cc <code>jump</code> \u8df3\u8fc7\u4e86 <code>x1</code> \u7684\u6784\u9020\uff0c\u4f46\u5728\u8fdb\u5165\u51fd\u6570 <code>f</code> \u65f6\u7a7a\u95f4\u5df2\u7ecf\u88ab\u5206\u914d\u597d\u4e86\uff0c\u5f53\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u6790\u6784\u4ecd\u7136\u4f1a\u81ea\u52a8\u8fdb\u884c\uff0c\u5982\u679c\u6ca1\u6709\u9ed8\u8ba4\u96f6\u503c\u7684\u8bdd\u6790\u6784\u4f1a\u51fa\u95ee\u9898\u3002 <code>switch case</code> \u5e76\u4e0d\u80fd\u9694\u7edd\u53d8\u91cf\u7684\u4f5c\u7528\u57df\uff0c\u91cc\u9762\u7684 <code>x2, x3</code> \u7684\u4f5c\u7528\u57df\u5c31\u662f\u8fd9\u5bf9\u5927\u62ec\u53f7\uff0c\u5f53\u6211\u4eec\u8fdb\u5165 <code>switch case</code> \u65f6\u7a7a\u95f4\u5c31\u5df2\u7ecf\u5206\u914d\uff0c\u5f53\u79bb\u5f00\u5927\u62ec\u53f7\u65f6\u6790\u6784\u51fa\u73b0\u95ee\u9898\u3002</p>"},{"location":"OOP/oop2/#definition-of-class","title":"Definition of Class","text":"<ul> <li>In C++, separated <code>.h</code> and <code>.cpp</code> files are used to define one class.</li> <li>Class declaration and prototypes in that class are in the header file ( <code>.h</code> ).</li> <li>All the bodies of these functions are in the source file (<code>.cpp</code>)</li> </ul> <p>\u4e00\u4e2a <code>.cpp</code> \u6587\u4ef6\u662f\u4e00\u4e2a\u7f16\u8bd1\u5355\u5143\u3002\u7f16\u8bd1\u65f6\u6211\u4eec\u53ea\u770b\u4e00\u4e2a <code>.cpp</code> \u6587\u4ef6\uff0c\u5f53\u5f15\u7528\u5176\u4ed6\u51fd\u6570\u7684\u539f\u578b\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5934\u6587\u4ef6\u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u3002</p>"},{"location":"OOP/oop2/#include","title":"<code>#include</code>","text":"<p><code>#include</code> is to insert the included file into the <code>.cpp</code> file at where the <code>#include</code> statement is.  </p> <ul> <li><code>#include \"xx.h\"</code> : search in the current directory firstly, then the directories declared somewhere</li> <li><code>#include &lt;xx.h&gt;</code> : search in the specified directories</li> <li><code>#include &lt;xx&gt;</code> : same as <code>#include &lt;xx.h&gt;</code></li> </ul> <p>Tips for header</p> <ul> <li>\u4e00\u4e2a\u5934\u6587\u4ef6\u91cc\u653e\u4e00\u4e2a\u7c7b\u7684\u58f0\u660e</li> <li>\u4ee5\u76f8\u540c\u7684\u6587\u4ef6\u540d\u524d\u7f00\u4e0e\u4e00\u4e2a\u6e90\u6587\u4ef6\u5173\u8054</li> <li>\u5934\u6587\u4ef6\u7684\u5185\u5bb9\u88ab<code>#ifndef #define #endif</code>\u5305\u56f4</li> </ul>"},{"location":"OOP/oop3/","title":"Container","text":"<p>Abstraction</p> <ul> <li>Referennce</li> <li>STL Containers<ul> <li>vector</li> <li>list</li> <li>map</li> </ul> </li> <li>STL Iterator</li> </ul>"},{"location":"OOP/oop3/#declaring-references","title":"Declaring References","text":"<pre><code>char c; // a character\nchar *p = &amp;c; // a pointer to a character\nchar &amp;r = c; // a reference to a character\n</code></pre> <p><code>*\uff0c &amp;</code> \u53ef\u4ee5\u662f\u6807\u70b9\uff0c\u4e5f\u53ef\u4ee5\u662f\u8fd0\u7b97\u7b26\uff0c\u5982 <code>&amp;</code> \u5728\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5728\u7b2c\u4e09\u884c\u662f\u4e00\u4e2a\u6807\u70b9\u3002 \u5f53\u6211\u4eec\u58f0\u660e\u5f15\u7528\u65f6\uff0c\u5fc5\u987b\u6709\u5f15\u7528\u7684\u53d8\u91cf\u3002\u6b64\u540e\uff0cr \u76f8\u5f53\u4e8e\u662f c \u7684\u4e00\u4e2a\u522b\u540d\u3002</p> <p>Example</p> <p><pre><code>char c = 'A';\nchar &amp;r = c;\nr = 'B';\ncout &lt;&lt; \"c: \" &lt;&lt; c &lt;&lt; endl;\ncout &lt;&lt; \"b: \" &lt;&lt; b &lt;&lt; endl;\n</code></pre> \u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u4e24\u884c\u7684\u8f93\u51fa\u90fd\u662f B. </p> <ul> <li>Local or global variables   <ul> <li><code>type&amp; refname = name;</code></li> <li>For ordinary variables, the initial value is required.</li> </ul> </li> <li>In parameter lists and member variables<ul> <li><code>type&amp; refname</code></li> <li>Binding defined by caller or constructor    \u51fd\u6570\u53ea\u6709\u5728\u8c03\u7528\u65f6\uff0c\u53c2\u6570\u624d\u80fd\u7ed1\u5b9a\u3002  <pre><code>void f ( int&amp; x );\nf(y); // initialized when function is called\n</code></pre> \u8fd9\u6837\u53ef\u4ee5\u5b9e\u73b0\u51fd\u6570\u5bf9\u51fd\u6570\u5916\u53d8\u91cf\u7684\u503c\u7684\u4fee\u6539\u3002</li> </ul> </li> </ul> <p><code>const int&amp; z = x;</code> \u8fd9\u91cc\u7684 <code>const</code> \u662f\u5bf9\u5f15\u7528\u7684\u9650\u5236\uff0c\u8868\u793a\u6211\u4eec\u4e0d\u80fd\u5199 z, \u4f46 x \u4f9d\u7136\u662f\u53ef\u5199\u7684\u3002</p> <p><pre><code>void f(int &amp;x)\n{\nx++;\n}\nint main()\n{\nint a = 51;\ncout &lt;&lt; \"a=\" &lt;&lt; a &lt;&lt; endl;\nf(a);\ncout &lt;&lt; \"a=\" &lt;&lt; a &lt;&lt; endl;\n}\n</code></pre> \u6211\u4eec\u53ef\u4ee5\u770b\u5230 a \u7684\u503c\u7ecf\u8fc7\u51fd\u6570\u8c03\u7528\u540e\u503c\u81ea\u589e\u4e00\uff0c\u8fd9\u8868\u660e\u51fd\u6570\u53ef\u4ee5\u5bf9\u53c2\u6570\u7684\u503c\u8fdb\u884c\u4fee\u6539\u3002  </p> <p>The target of a reference must have a location!  \u5373\u53f3\u503c\u4e0d\u80fd\u7528\u4e8e\u5f15\u7528\u7ed1\u5b9a\u3002 <pre><code>void func(int &amp;);\nfunc (i * 3); // Warning or error!\n</code></pre></p> <p>Pointers vs. References</p> <ul> <li>References<ul> <li>can't be null</li> <li>are dependent on an existing variable, they are an alias for an variable</li> <li>can't change to a new \"address\" location</li> </ul> </li> <li>Pointers<ul> <li>can be set to null</li> <li>pointer is independent of existing objects</li> <li>can change to point to a different address</li> </ul> </li> </ul> <p>\u5b9e\u9645\u4e0a, C++ \u5185\u90e8\u5b9e\u73b0\u5f15\u7528\u4e5f\u662f\u901a\u8fc7\u6307\u9488\uff0c\u53ea\u662f\u9650\u5236\u8fd9\u4e2a\u6307\u9488\u53ea\u80fd\u6307\u5411\u521d\u59cb\u5316\u7684\u53d8\u91cf\u3002</p> <p>Restrictions</p> <ul> <li>No references to references</li> <li>No pointers to references</li> <li>Reference to pointer is ok</li> <li>No arrays of references</li> </ul>"},{"location":"OOP/oop3/#container_1","title":"Container","text":"<p>Collection objects are objects that can store an arbitrary number of other objects.  </p> <p>\u5728 C++ \u4e2d\uff0c\u5bb9\u5668\u5728 STL \u4e2d\u3002</p> <ul> <li>STL = Standard Template Library</li> <li>Part of the ISO Standard C++ Library</li> <li>Data Structures and algorithms for C++.</li> </ul> Why should I use STL? <ul> <li>Reduce development time. Data-structures already written and debugged.</li> <li>Code readability  <ul> <li>Fit more meaningful stuff on one page.</li> </ul> </li> <li>Robustness STL data structures grow automatically.</li> <li>Portable code.</li> <li>Maintainable code</li> <li>Easy</li> </ul> <p>Library includes</p> <ul> <li>A <code>pair</code> class (pairs of anything, int/int, int/char, etc)</li> <li>containers<ul> <li><code>vector</code> (expandable array)</li> <li><code>deque</code> (expandable array, expands at both ends)</li> <li><code>list</code> (double-linked)</li> <li><code>sets</code> and <code>maps</code></li> </ul> </li> <li>Basic Algorithms (<code>sort</code>, <code>search</code>, etc) All identifiers in library are in std namespace: using namespace std;</li> </ul>"},{"location":"OOP/oop3/#vector","title":"Vector","text":"<p>\u6bcf\u4e2a\u5bb9\u5668\u662f\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u9700\u8981 include. \u5982 <code>#include&lt;vector&gt;</code>.  </p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint main( ) {\n// Declare a vector of ints (no need to worry about size)\nvector&lt;int&gt; x;\n// Add elements\nfor (int a=0; a&lt;1000; a++)\nx.push_back(a);\n// Have a pre-defined iterator for vector class, can use it to print out the items in vector\nvector&lt;int&gt;::iterator p;\nfor (p=x.begin(); p&lt;x.end(); p++)\ncout &lt;&lt; *p &lt;&lt; \" \";\nreturn 0;\n}\n</code></pre> <ul> <li>\u8fd9\u662f\u6cdb\u578b\u5b9a\u4e49 (generic classes)\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a<code>vector</code> \u548c <code>vector</code> \u5185\u7684\u5143\u7d20\u7c7b\u578b\u3002\uff08<code>vector&lt;int&gt; x</code>\uff09</li> <li><code>vector&lt;int&gt;::iterator</code> \u662f\u4e00\u4e2a\u7c7b\u578b\u3002\u5b9e\u9645\u4e0a p \u4e0d\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u8fd9\u91cc\u5229\u7528\u4e86 C++ \u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\u3002</li> </ul> <p>\u4eca\u5929\u6709\u8bed\u6cd5\u7cd6\uff08C++11\uff09 <pre><code>for (auto i:x) {\ncout &lt;&lt; i &lt;&lt; \" \";\n}\n</code></pre> <code>auto</code> \u7684\u610f\u601d\u662f\u7c7b\u578b\u81ea\u52a8\u63a8\u65ad\u3002\u8fd9\u91cc\u4f1a\u4ece <code>x</code> \u4e2d\u4f9d\u6b21\u53d6\u51fa\u4e00\u4e2a\u503c\uff0c\u968f\u540e\u653e\u5230 <code>i</code> \u91cc\u53bb\u3002</p> <p>vector</p> <ul> <li>It is able to increase its internal capacity as required: as more items are added, it simply makes enough room for them.</li> <li>It keeps its own private count of how many items it is currently storing. Its size method returns the number of objects currently stored in it.</li> <li>It maintains the order of items you insert into it. You can later retrieve them in the same order.</li> </ul>"},{"location":"OOP/oop3/#basic-vector-operations","title":"Basic Vector Operations","text":"<ul> <li>Constructor  <ul> <li><code>vector&lt;Elem&gt;c;</code> </li> <li><code>vector&lt;Elem&gt;c1(c2);</code></li> </ul> </li> <li>Simple Methods  <ul> <li><code>V.size(); // num items</code> </li> <li><code>V.empty(); // empty?</code> </li> <li><code>==, !=, &lt;, &gt;, &lt;=, &gt;=</code> </li> <li><code>V.swap(v2); // swap</code></li> </ul> </li> <li>Iterators  <ul> <li><code>I.begin() // first position</code></li> <li><code>I.end() // last position</code></li> </ul> </li> <li>Element access<ul> <li><code>V.at(index)</code></li> <li><code>V[index]</code></li> <li><code>V.front() // first item</code></li> <li><code>V.back() // last item</code></li> </ul> </li> <li>Add/Remove/Find<ul> <li><code>V.push_back(e)</code></li> <li><code>V.pop_back()</code></li> <li><code>V.insert(pos, e)</code></li> <li><code>V.erase(pos)</code></li> <li><code>V.clear()</code></li> <li><code>V.find(first, last, item)</code></li> </ul> </li> </ul> <p>Two ways to use <code>vector</code> \u53ef\u4ee5\u9884\u5148\u5206\u914d\uff0c\u4f46\u589e\u957f\u53ea\u80fd\u7528 <code>push_back</code>.  </p>"},{"location":"OOP/oop3/#list-class","title":"List Class","text":"<p>Same basic concepts as vector </p> <ul> <li>Constructors</li> <li>Ability to compare lists <code>(==, !=, &lt; , &lt;=, &gt; , &gt;=)</code></li> <li>Ability to access front and back of list</li> </ul> <pre><code>x.push_back(item)\nx.push_front(item)\nx.pop_back()\nx.pop_front()\nx.remove(item)\n</code></pre> Sample List Application <p><pre><code>#include &lt;iostream&gt;\n#include &lt;list&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main()\n{\nlist&lt;string&gt;s;\ns.push_back(\"hello\");\ns.push_back(\"world\");\ns.push_front(\"tide\");\ns.push_front(\"crimson\");\ns.push_front(\"alabama\");\nlist&lt;string&gt;iterator:: p;\nfor (p=s.begin(); p!=s.end(); p++)\ncout &lt;&lt; *p &lt;&lt; \" \";\ncout &lt;&lt; endl;\n}\n</code></pre> \u8fd9\u91cc\u662f <code>p!=s.end()</code> \u56e0\u4e3a\u5217\u8868\u6bcf\u4e2a\u7a7a\u95f4\u662f\u52a8\u6001\u5206\u914d\u7684\uff0c\u540e\u7533\u8bf7\u7684\u7a7a\u95f4\u4e0d\u80fd\u4fdd\u8bc1\u5728\u5148\u7533\u8bf7\u7684\u7a7a\u95f4\u540e\u9762\u3002\u5bf9 <code>vector</code> \u6765\u8bf4\u7a7a\u95f4\u662f\u8fde\u7eed\u7684\u3002</p> Example <pre><code>list&lt;int&gt; L;\nfor(int i=1; i&lt;=5; ++i)\nL.push_back(i);\n//delete second item.\nL.erase( ++L.begin() );\ncopy( L.begin(), L.end(),ostream_iterator&lt;int&gt;(cout,\",\")); //Prints: 1,3,4,5,\n</code></pre>"},{"location":"OOP/oop3/#maps","title":"Maps","text":"<ul> <li>Maps are collections that contain pairs of values.</li> <li>Pairs consist of a key and a value.</li> <li>Lookup works by supplying a key, and retrieving a value.</li> </ul> <pre><code>#include &lt;map&gt;\nmap&lt;long,int&gt; root;\nroot[4] = 2;\nroot[1000000] = 1000;\nlong l;\ncin &gt;&gt; l;\nif (root.count(l))\ncout&lt;&lt;root[l]\nelse cout&lt;&lt;\u201cNot perfect square\u201d;\n</code></pre>"},{"location":"OOP/oop3/#iterators","title":"Iterators","text":"<ul> <li>Declaring  <code>list&lt;int&gt;::iterator li;</code></li> <li>Front of container <code>list&lt;int&gt;L;li = L.begin();</code></li> <li>Past the end <code>li = L.end();</code></li> <li>Can increment <pre><code>list&lt;int&gt;::iterator li; list&lt;int&gt; L;\nli=L.begin();\n++li; // Second thing;\n</code></pre></li> <li>Can be dereferenced <code>*li = 10;</code></li> </ul>"},{"location":"OOP/oop3/#for-each-loop","title":"for-each loop","text":"<p>A for-each loop iterates over the elements of arrays, vectors, or any other data sets. It assigns the value of the current element to the variable iterator declared inside the loop.  <pre><code>for(type variable_name : array/vector_name) {\nloop statements\n...\n}\n</code></pre> for-each loop \u6bcf\u8f6e\u62ff\u5230\u7684\u662f\u5bb9\u5668\u91cc\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668\u91cc\u7684\u503c\uff0c\u53ea\u80fd\u8bfb\u3002</p> Example <p><pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint arr[]={1,2,3,4,5}; //array initialization\ncout&lt;&lt;\"The elements are: \";\nfor(int i : arr) // auto\n{\ncout&lt;&lt;i&lt;&lt;\" \";\n}\nreturn 0;\n}\n</code></pre> \u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>auto</code> \u81ea\u52a8\u63a8\u65ad\u3002</p> <ul> <li>\u5199\u8d77\u6765\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u9884\u5148\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002  </li> <li>\u7f3a\u70b9\u662f\u4e0d\u80fd\u83b7\u5f97\u4e0b\u6807\uff0c\u4e5f\u4e0d\u80fd\u9006\u5e8f\u904d\u5386\uff0c\u4e5f\u4e0d\u80fd\u8df3\u8fc7\u67d0\u4e2a\u5355\u5143\uff0c\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668\u7684\u503c\u3002</li> </ul> <p>\u5982\u679c\u89c9\u5f97\u540d\u5b57\u5f88\u957f\uff0c\u53ef\u4ee5\u7528 <code>typedef</code>. e.g. <code>typedef PB map&lt;Name,list&lt;PhoneNum&gt; &gt;;</code></p> <p>Warning</p> <p>The type in containers <pre><code>vector&lt;Student&gt; v1;\nvector&lt;Student&amp;&gt; v2;\nvector&lt;Student*&gt; v3;\n</code></pre> <code>v1.push_back(x)</code> \u4f1a\u62f7\u8d1d x, \u62f7\u8d1d\u540e <code>vector</code> \u91cc\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u548c x \u76f8\u540c\uff0c\u4f46\u4e8c\u8005\u6ca1\u6709\u5173\u7cfb\u3002 <code>v2.push_back(x)</code> \u4f1a\u751f\u6210\u4e00\u4e2a x \u7684\u5f15\u7528\u3002  <pre><code>while () {\nStudent s;\ncin &gt;&gt; ...\nv.push_back(s);\n}\n</code></pre> \u5b9e\u9645\u4e0a\u8fd9\u4e2a\u5faa\u73af\u4e2d s \u4f5c\u4e3a\u672c\u5730\u53d8\u91cf\uff0c\u5730\u5740\u662f\u4e0d\u53d8\u7684\uff0c\u5982\u679c\u6211\u4eec\u91c7\u53d6\u540e\u9762\u4e24\u79cd\u5b9a\u4e49 <code>vector</code> \u7684\u65b9\u6cd5\uff0c\u6700\u540e <code>vector</code> \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u6837\u7684\u3002 \u540e\u9762\u4e24\u79cd\u5b9a\u4e49\u65b9\u6cd5\u5185\u5b58\u5f00\u9500\u5c0f\uff0c\u4f46\u6613\u51fa\u9519\u3002 </p> <p>Pitfalls</p> <ul> <li>Accessing an invalid <pre><code>vector&lt;int&gt; v;\nv[100]=1; // Whoops!\n</code></pre> Solutions<ul> <li>use <code>push_back()</code></li> <li>Preallocate with constructor.</li> <li>Reallocate with <code>reserve()</code></li> <li>Check <code>capacity()</code></li> </ul> </li> <li>Inadvertently inserting into <code>map&lt;&gt;</code> <pre><code>if (foo[\"bob\"]==1)\n//silently created entry \u201cbob\u201d\n</code></pre> Solutions: Use <code>count()</code> to check for a key without creating a new entry. <code>if ( foo.count(\"bob\") )</code></li> <li>DO not use empty() on <code>list&lt;&gt;</code> <pre><code>if ( my_list.count() == 0 ) { ... } // Slow\nif ( my_list.empty() ) {...} // Fast\n</code></pre></li> <li>Use invalid iterator <pre><code>list&lt;int&gt; L;\nlist&lt;int&gt;::iterator li;\nli = L.begin();\nL.erase(li);\n++li; // WRONG\n// Use return value of erase to advance\nli = L.erase(li); // RIGHT\n</code></pre></li> </ul>"},{"location":"OOP/oop4/","title":"Functions","text":"<p>Abstract</p> <ul> <li>Access control</li> <li>Local and member variables</li> <li>Overloaded functions</li> <li>Default arguments</li> <li>Inline functions</li> </ul>"},{"location":"OOP/oop4/#local-and-member-variables","title":"Local and member variables","text":"local global member lifecycle <code>{}</code> \u5168\u5c40 \u5bf9\u8c61 scope <code>{}</code> \u5168\u5c40 \u6210\u5458\u51fd\u6570\u5185 <ul> <li>\u6210\u5458\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u548c\u751f\u5b58\u671f\u662f\u5206\u79bb\u7684\u3002\u5982 C \u8bed\u8a00\u4e2d\u7684 <code>static</code> \u9759\u6001\u53d8\u91cf\uff0c\u548c\u5168\u5c40\u53d8\u91cf\u4e00\u6837\u6700\u5f00\u59cb\u5c31\u5b58\u5728\uff0c\u4f46\u662f\u53ea\u80fd\u4f5c\u7528\u4e8e\u8fd9\u4e2a\u51fd\u6570\u3002</li> </ul>"},{"location":"OOP/oop4/#c-access-control","title":"C++ access control","text":"<p>The members of a class can be cataloged, marked as:</p> <ul> <li><code>public</code> public means all member declarations that follow are available to everyone.  </li> <li><code>private</code> The private keyword means that no one can access that member except inside function members of that type. \u53ea\u6709\u5728\u7c7b\uff08\u4e0d\u662f\u5bf9\u8c61\uff09\u5185\u90e8\uff08\u5185\u90e8\u53d8\u91cf\u3001\u51fd\u6570\uff09\u53ef\u4ee5\u8bbf\u95ee\u3002 \u53ef\u4ee5\u5229\u7528\u6307\u9488\u8bbf\u95ee\u7c7b\u5176\u4ed6\u5bf9\u8c61\u7684\u79c1\u6709\u53d8\u91cf\u3002</li> </ul> Example <p><pre><code>struct B {\nprivate:\nint j;\npublic:\nvoid f(B *p) {\np-&gt;j = 'A';\n}\n}\nB b, bb;\nB.f(&amp;bb);\n</code></pre> \u8fd9\u6837\u662f\u6b63\u786e\u7684\u3002<code>b, bb</code> \u662f\u540c\u4e00\u4e2a\u7c7b\u7684\u4e0d\u540c\u5bf9\u8c61\u3002</p> <ul> <li><code>protected</code> \u4e0d\u8ba9\u5916\u754c\u8bbf\u95ee\uff0c\u4f46\u53ef\u4ee5\u8ba9\u7ee7\u627f\u8005\u8bbf\u95ee</li> </ul> <p>Friends \u53cb\u5143 \u5176\u4ed6\u51fd\u6570\uff0c\u7ed3\u6784\u5c31\u53ef\u4ee5\u8bbf\u95ee\u672c\u5bf9\u8c61\u7684\u53d8\u91cf\u3002\u53ea\u6709\u81ea\u5df1\u53ef\u4ee5\u51b3\u5b9a\u53cb\u5143\u3002</p> <pre><code>struct X {\nprivate:\nint i;\npublic:\nvoid initialize();\nfriend void g(X*, int i);\nfriend void Y::y();\n}\n</code></pre> <p>class vs. struct</p> <ul> <li>class defaults to private</li> <li>struct defaults to public.</li> </ul>"},{"location":"OOP/oop4/#initialization","title":"Initialization","text":""},{"location":"OOP/oop4/#initializer-list","title":"Initializer list","text":"<pre><code>class Point {\nprivate:\nconst float x, y;\npublic:\nPoint(float xa = 0.0, float ya = 0.0) : y(ya), x(xa) {}\n};\n</code></pre> <p>\u8fd9\u91cc\u7684 <code>const</code> \u53d8\u91cf\u4e0d\u80fd\u88ab\u8d4b\u503c\uff0c\u53ea\u80fd\u88ab\u521d\u59cb\u5316\u3002\u6210\u5458 <code>const</code> \u53d8\u91cf\u7684\u521d\u59cb\u5316\uff0c\u53ef\u4ee5 <code>const float x = 1.0;</code> \u4f46\u8fd9\u6837\u6240\u6709\u7c7b\u7684\u5bf9\u8c61\u7684\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\u800c\u7c7b\u91cc\u53e6\u4e00\u4e2a\u53ef\u4ee5\u521d\u59cb\u5316\u7684\u5730\u65b9\u5c31\u662f\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002</p> <ul> <li>Can initialize any type of data <code>:</code> \u540e\u662f\u521d\u59cb\u5316\u5217\u8868\uff0c\u53ea\u6709\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4f7f\u7528\u3002\u4f1a\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u4e4b\u524d\uff0c\u8c03\u7528 Initializer list \u7684\u6784\u9020</li> <li>Order of initialization is order of declaration \u2013 Not the order in the list! \u6309\u7167\u6210\u5458\u53d8\u91cf\u58f0\u660e\u7684\u987a\u5e8f\u521d\u59cb\u5316</li> </ul> <p>Initialization vs. assignment</p> <ul> <li>Initialization <pre><code>Student::Student(string s):name(s) {}\n</code></pre>     before constructor</li> <li>Assignment     <pre><code>Student::Student(string s) {name=s;}\n</code></pre>     inside constructor. string must have a default constructor.(\u5148\u6784\u9020\u51fa string \u7684\u5bf9\u8c61 name, \u518d\u8d4b\u503c)  </li> </ul> <p>\u5efa\u8bae\u5747\u4f7f\u7528 Initializer list. </p>"},{"location":"OOP/oop4/#overloaded-constructors","title":"Overloaded constructors","text":"<p>\u6211\u4eec\u53ef\u4ee5\u6709\u91cd\u540d\u7684\u51fd\u6570\uff0c\u4f46\u662f\u5fc5\u987b\u8981\u6709\u4e0d\u540c\uff0c\u4ee5\u4fbf\u7f16\u8bd1\u5668\u53ef\u4ee5\u533a\u5206\u3002\u5982\u53c2\u6570\u4e2a\u6570\uff0c\u53c2\u6570\u7c7b\u578b\u3002</p> <pre><code>void print(char * str, int width); // #1 \nvoid print(double d, int width); // #2 \nvoid print(long l, int width); // #3 \nvoid print(int i, int width); // #4 \nvoid print(char *str); // #5 \nprint(\"Pancakes\", 15); print(\"Syrup\"); print(1999.0, 10); print(1999, 12); print(1999L, 15);\n</code></pre> <p>Overload and auto-cast</p> <p><pre><code>void f(short i);\nvoid f(double d);\nf('a');\nf(2);\nf(2L);\nf(3.2);\n</code></pre> \u9664\u4e86\u6700\u540e\u4e00\u4e2a\uff0c\u5176\u4ed6\u90fd\u662f\u4e0d\u80fd\u5206\u8fa8\u7684\u3002</p>"},{"location":"OOP/oop4/#default-arguments","title":"Default arguments","text":"<p><pre><code>Stash(int size, int initQuantity = 0);\n</code></pre> A default argument is a value given in the declaration that the compiler automatically inserts if you don\u02bct provide a value in the function call.  </p> <p><pre><code>int harpo(int n, int m = 4, int j = 5);\nint chico(int n, int m = 6, int j); // illegal\nint groucho(int k = 1, int m = 2, int n = 3);\nbeeps = harpo(2);\nbeeps = harpo(1,8);\nbeeps = harpo(8,7,6);\n</code></pre> To define a function with an argument list, defaults must be added from right to left. \u9ed8\u8ba4\u503c\u5fc5\u987b\u4ece\u53f3\u5230\u5de6\u3002</p> <p>Pitfall of default arguments</p> <p><pre><code>void f(int i, int j = 10);\nint main()\n{\n...\n}\nvoid f(int i, int j = 10){\n...\n}\n</code></pre> \u8fd9\u6837\u4f1a\u62a5\u9519: redefinition of default argument. \u9ed8\u8ba4\u503c\u53ea\u80fd\u51fa\u73b0\u5728\u51fd\u6570\u539f\u578b\u3002\uff08\u58f0\u660e\u548c\u5b9a\u4e49\u4e00\u8d77\u662f\u53ef\u4ee5\u7684\uff09 \u9ed8\u8ba4\u53c2\u6570\u503c\u4e0d\u4f1a\u5728\u51fd\u6570\u4ee3\u7801\u91cc\u51fa\u73b0\uff0c\u53ea\u662f\u7f16\u8bd1\u5668\u628a\u7f16\u8bd1\u65f6\u4f1a\u628a\u9ed8\u8ba4\u503c\u653e\u8fdb\u5806\u6808\u8c03\u7528\u91cc\u3002\u56e0\u6b64\u53ef\u80fd\u4f1a\u88ab\u5176\u4ed6\u539f\u578b\u58f0\u660e\u6539\u53d8\u9ed8\u8ba4\u503c\u3002  </p>"},{"location":"OOP/oop4/#overhead-for-a-function-call","title":"Overhead for a function call","text":"<p>the processing time required by a device prior to the execution of a command</p> <ul> <li>Push parameters</li> <li>Push return address</li> <li>Prepare return values</li> <li>Pop all pushed</li> </ul>"},{"location":"OOP/oop4/#inline-function","title":"inline function","text":"<p>An inline function is expanded in place, like a preprocessor macro, so the overhead of the function call is eliminated.</p> <pre><code>inline int f(int i) {\nreturn i*2;\n}\nmain() {\nint a=4;\nint b = f(a);   // become b = a * 2;\n}\n</code></pre> <p>inline \u4e0d\u4f1a\u771f\u6b63\u7f16\u8bd1\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u628a\u51fd\u6570\u66ff\u6362\u5230\u5b9e\u9645\u4f4d\u7f6e\u3002</p> <pre><code>inline int plusOne(int x);\ninline int plusOne(int x) {return ++x; };\n</code></pre> <ul> <li>Repeat inline keyword at declaration and definition. \u539f\u578b\u58f0\u660e\u548c\u5b9a\u4e49\u90fd\u5fc5\u987b\u6709 inline.  </li> <li>An inline function definition may not generate any code in .obj file.  </li> </ul> <p>inline \u51fd\u6570\u7684 body \u4e0d\u662f\u5b9a\u4e49\uff0c\u53ea\u662f\u4e00\u4e2a\u58f0\u660e\u3002\u5373\u5982\u679c\u6709 inline \u51fd\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u5b83\u653e\u5728\u5934\u6587\u4ef6\u91cc\u3002</p>"},{"location":"OOP/oop4/#tradeoff-of-inline-functions","title":"Tradeoff of inline functions","text":"<ul> <li>Body of the called function is to be inserted into the caller. </li> <li>This may expand the code size but deduces the overhead of calling time. So it gains speed at the expenses of space. In most cases, it is worth.  \u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\u3002</li> <li>It is much better than macro in C. It checks the types of the parameters. \u5b8f\u6ca1\u6709\u7c7b\u578b\u68c0\u67e5\u3002  </li> </ul> <p>Inline may not in-line</p> <p>\u7f16\u8bd1\u5668\u53ef\u80fd\u4e3a\u6211\u4eec\u81ea\u4f5c\u4e3b\u5f20\uff0c\u51b3\u5b9a\u54ea\u4e9b\u51fd\u6570\u662f\u53ef\u4ee5 inline, \u54ea\u4e9b\u4e0d\u80fd inline. The compiler does not have to honor your request to make a function inline. It might decide the function is too large or notice that it calls itself (recursion is not allowed or indeed possible for inline functions), or the feature might not be implemented for your particular compiler.  </p> <p>\u5c06\u6210\u5458\u51fd\u6570\u7684\u5b9a\u4e49\u5199\u5728\u58f0\u660e\u5185\uff0c\u5c31\u4f1a\u81ea\u52a8 inline. \u4e5f\u53ef\u4ee5\u5728 body \u7684\u5730\u65b9\u52a0\u4e0a inline. Access functions <pre><code>class Cup {\nint color;\npublic:\nint getColor() { return color; }\nvoid setColor(int color) {\nthis-&gt;color = color;\n}\n};\n</code></pre> They are small functions that allow you to read or change part of the state of an object. that is, an internal variable or variables.</p> <p>Inline or not?</p> <ul> <li>Inline:<ul> <li>Small functions, 2 or 3 lines</li> <li>Frequently called functions, e.g. inside loops</li> </ul> </li> <li>Not inline?<ul> <li>Very large functions, more than 20 lines</li> <li>Recursive functions</li> </ul> </li> <li>A lazy way<ul> <li>Make all your functions inline, or Never make your functions inline.  </li> </ul> </li> </ul>"},{"location":"OOP/oop5/","title":"Constant and Static","text":"Abstract <ul> <li><code>const</code><ul> <li>const objects</li> <li>const member functions</li> </ul> </li> <li><code>static</code><ul> <li>static member</li> <li>static objects</li> </ul> </li> <li><code>namespace</code></li> </ul>"},{"location":"OOP/oop5/#const","title":"<code>const</code>","text":"<p>declare a variable to have a constant value.</p> <pre><code>const int x = 123;  // const, literal\nx = 27;     // illegal!\nx++;    // illegal!\nint y = x;  // ok, copy const to non-const\ny = x;  // ok, same thing\nconst int z = y;    // ok, const is safer\n</code></pre> <p>\u6211\u4eec\u901a\u8fc7\u7f16\u8bd1\u5668\u6765\u9632\u6b62\u5e38\u91cf\u88ab\u4fee\u6539</p> <ul> <li>Constants are variables<ul> <li>Observe scoping rules</li> <li>Declared with <code>const</code> type modifier</li> </ul> </li> <li> <p>A const in C++ defaults to internal linkage</p> <ul> <li>the compiler tries to avoid creating storage for a const -- holds the value in its symbol table. \u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u5c31\u5728\u5185\u90e8\uff0c\u7f16\u8bd1\u5668\u4e3b\u52a8\u628a\u5b83\u751f\u6210\uff0c\u4e0d\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u53d8\u91cf\u3002</li> <li>extern forces storage to be allocated.</li> </ul> </li> <li> <p>Compile time constants \u58f0\u660e\u7684\u65f6\u5019\u4e0d\u80fd\u7ed9\u503c(<code>extern const int ...</code>)\uff0c\u53ea\u6709\u5b9a\u4e49\u7684\u65f6\u5019\u624d\u53ef\u4ee5\u3002</p> </li> <li>Run-time constants <pre><code>const int class_size = 12;\nint finalGrade[class_size]; // ok\nint x;\ncin &gt;&gt; x;\nconst int size = x;\ndouble classAverage[size]; // error! C++11 is ok.\n</code></pre></li> <li>Aggregates <pre><code>const int i[] = { 1, 2, 3, 4 };\nfloat f[i[3]]; // Illegal(in C++98)\nstruct S { int i, j; };\nconst S s[] = { { 1, 2 }, { 3, 4 } };\ndouble d[s[1].j]; // Illegal\n</code></pre> It\u02bcs possible to use const for aggregates, but storage will be allocated. In these situations, const means. However, the value cannot be used at compile time because the compiler is not required to know the contents of the storage at compile time.</li> </ul>"},{"location":"OOP/oop5/#pointers-and-const","title":"Pointers and const","text":"<pre><code>char * const q = \"abc\"; // q is const\n*q = 'c'; // ERROR\n// char a[] = \"abc\"; *q = 'c' is ok.\nq++; // ERROR\nconst char *p = \"ABCD\"; // (*p) is a const char\n*p = 'b'; // ERROR! (*p) is the const\n</code></pre> <p>C/C++ \u628a\u5b57\u7b26\u5b57\u9762\u91cf\u505a\u6210\u5b57\u7b26\u6570\u7ec4\uff0c\u5e76\u52a0\u4e0a <code>\\0</code>, \u653e\u5728\u4e00\u4e2a\u4e0d\u53ef\u4fee\u6539\u7684\u5730\u65b9\u3002 <code>char * const q</code> \u8868\u793a q \u6307\u5411 abc \u7684\u5730\u5740\uff0c\u5219 q \u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u5730\u65b9\u3002 <code>const char * q</code> p \u6307\u5411\u7684\u5730\u5740\u53ef\u4ee5\u4fee\u6539\uff0c\u4f46\u4e0d\u80fd\u901a\u8fc7 p \u4fee\u6539 p \u6307\u5411\u7684\u503c\u3002</p> <p>Example</p> <pre><code>string p1(\"Fred\");\nconst string* p = &amp;p1;\nstring const* p = &amp;p1;\nstring *const p = &amp;p1;\n</code></pre> <ul> <li>\u5bf9\u8c61\u4e0d\u80fd\u6539</li> <li>\u5bf9\u8c61\u4e0d\u80fd\u6539</li> <li>\u6307\u9488\u4e0d\u80fd\u6539</li> </ul> <p><code>*</code> \u7684\u4f4d\u7f6e\uff0cconst \u5728\u661f\u53f7\u524d\u9762\u5219\u5bf9\u8c61\u4e0d\u80fd\u6539\uff0c\u5426\u5219\u8868\u793a\u6307\u9488\u4e0d\u80fd\u6539\u3002</p> <code>int i;</code> <code>const int ci = 3;</code> <code>int *ip;</code> <code>ip = &amp;i;</code> <code>ip = &amp;ci; // ERROR</code> <code>const int *cip</code> <code>cip = &amp;i;</code> <code>cip=&amp;ci;</code> <p>\u5982\u679c <code>ip = &amp;ci</code> \u4e0d\u62a5\u9519\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u65e0\u6cd5\u5728\u8fd0\u884c\u65f6\u5bf9\u7a0b\u5e8f\u4fee\u6539\u5e38\u91cf\u505a\u51fa\u4efb\u4f55\u9650\u5236\u3002 <code>cip = &amp;i;</code> \u4e4b\u540e <code>i</code> \u4ecd\u7136\u53ef\u4ee5\u4fee\u6539\uff0c\u53ea\u662f\u4e0d\u80fd\u901a\u8fc7 <code>cip</code> \u4fee\u6539 <code>i</code> \u7684\u503c\u3002</p> <pre><code>char* s = \"Hello, world!\";\n</code></pre> <ul> <li><code>s</code> is a pointer initialized to point to a string constant</li> <li>This is actually a <code>const char *s</code> but compiler accepts it without the const \u4e3a\u4e86\u5411\u540e\u517c\u5bb9</li> <li>Don't try and change the character values (it is undefined behavior)</li> <li>If you want to change the string, put it in an array: <pre><code>char s[] = \"Hello, world!\";\n</code></pre></li> </ul> <p>Can always treat a non-const value as const. \u8fd4\u56de const \u6307\u9488\u662f\u6709\u610f\u4e49\u7684\uff0c\u53ea\u80fd\u8bfb\u4e0d\u80fd\u5199</p>"},{"location":"OOP/oop5/#const-object","title":"Const Object","text":"<pre><code>const Currency the_raise(42, 38);\n</code></pre> <ul> <li>What members can access the internals?</li> <li>How can the object be protected from change?</li> <li>Solution: declare member functions const</li> </ul> <p><pre><code>int Date::set_day(int d) {\n//...error check d here...\nday = d; // ok, non-const so can modify\n}\nint Date::get_day() const {\nday++; // ERROR modifies data member\nset_day(12); // ERROR calls non-const member\nreturn day; // ok\n}\n</code></pre> \u8fd9\u4e2a const \u8868\u660e\u5728\u5728\u51fd\u6570\u91cc\u4e0d\u4f1a\u6539\u53d8\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u4e0d\u4f1a\u8c03\u7528\u5176\u4ed6\u975e const \u7684\u6210\u5458\u51fd\u6570\u3002\u4e0d\u52a0 const \u8868\u660e\u6211\u4eec\u4e0d\u4e00\u5b9a\u4fee\u6539\u3002</p> <p>Repeat the const keyword in the definition as well as the declaration. <pre><code>int get_day () const;\nint get_day() const { return day };\n</code></pre></p> <p>const \u5b9a\u4e49\u7684\u5bf9\u8c61\uff0c\u53ea\u80fd\u8c03\u7528\u5e26 const \u5c5e\u6027\u7684\u6210\u5458\u51fd\u6570\u3002</p> <p><pre><code>void f() const;\nvoid f();\n</code></pre> \u53ef\u4ee5\u91cd\u8f7d\uff0c\u4f1a\u6839\u636e\u5bf9\u8c61\u8c03\u7528\u65f6\u662f\u5426 const \u6765\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u6210\u5458\u51fd\u6570\u3002\u4e8b\u5b9e\u4e0a const \u540e\u7684\u6210\u5458\u51fd\u6570\u53c2\u6570\uff0c\u76f8\u5f53\u4e8e <code>const A *this</code>, \u800c\u4e0d\u52a0 const \u5c31\u53ea\u662f <code>A *this</code>. </p> <p>\u5982\u679c\u6210\u5458\u53d8\u91cf\u4e2d\u6709 const <pre><code>class A {\nconst int i;\n};\n</code></pre> has to be initialized in initializer list of the constructor.  </p>"},{"location":"OOP/oop5/#static","title":"<code>static</code>","text":"<ul> <li>Two basic meanings<ul> <li>Static storage</li> </ul> </li> <li>allocated once at a fixed address<ul> <li>Visibility of a name</li> <li>internal linkage</li> </ul> </li> </ul> <p>\u9759\u6001\u672c\u5730\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u88ab\u5b58\u50a8\u5728\u9759\u6001\u5185\u5b58\u4e2d\u3002   \u51fa\u73b0\u5728\u5168\u5c40\u53d8\u91cf/\u51fd\u6570\u524d\uff0c\u8868\u793a\u8bbf\u95ee\u9650\u5236\uff0c\u53ea\u6709\u5f53\u524d\u6587\u4ef6\u53ef\u4ee5\u8bbf\u95ee\u3002</p> <p>In C++, don't use static except inside functions and classes.  </p> type meaning static free function internal linkage(deprecated) static global variables internal linkage(deprecated) static local variables persistent storage static member  variables shared by instances static member functions shared by instances, can only access static member <p>Static applied to objects ... Construction occurs when definition is encountered Constructor called at-most once The constructor arguments must be satisfied Destruction takes place on exit from program Compiler assures LIFO order of destructors</p> <p>\u5168\u5c40\u53d8\u91cf\u7684\u6784\u9020\u53d1\u751f\u5728 <code>main()</code> \u4e4b\u524d\uff0c\u5728 <code>main()</code> \u6216\u8005 <code>exit()</code> \u4e4b\u540e\u6790\u6784\u3002 \u4f46\u662f\u4e0d\u540c\u7f16\u8bd1\u5355\u5143\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u5982\u679c\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f46\u8fd9\u662f\u65e0\u6cd5\u4fdd\u8bc1\u7684\u3002</p> <p>Just say no -- avoid non-local static dependencies.</p> <p>Can we apply static to members?</p> <p>\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u672c\u5730\u53d8\u91cf\u662f\u4e00\u6837\u7684\u3002\u8bbf\u95ee\u53d7\u9650\uff0c\u9650\u4e8e\u7c7b\u5185\u90e8\uff0c\u5b9e\u9645\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\u3002 \u8868\u73b0\uff1a\u5728\u8fd9\u4e2a\u7c7b\u5185\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u7ef4\u6301\u76f8\u540c\u7684\u503c\uff0c\u5bf9\u8c61 A \u4fee\u6539\u4e86\u90a3\u4e48\u5bf9\u8c61 B \u7684\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u4e5f\u4f1a\u6539\u53d8\u3002  </p> <p>\u597d\u4e60\u60ef\uff1a\u53ea\u8981\u4e0d\u6539\u53d8\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u5c31\u628a\u6210\u5458\u51fd\u6570\u52a0\u4e0a const.  </p> <p>\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this, \u4e0d\u80fd\u8c03\u7528\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u51fd\u6570\u3002\u53ef\u4ee5\u5728\u6ca1\u6709\u521b\u5efa\u7c7b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\u5c31\u80fd\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002  </p>"},{"location":"OOP/oop5/#namespace","title":"Namespace","text":"<p>Avoiding name clashes <pre><code>// old1.h\nvoid f();\nvoid g();\n// old2.h\nvoid f();\nvoid g();\n</code></pre> \u540d\u5b57\u7a7a\u95f4\uff0c\u76f8\u5f53\u4e8e\u7ed9\u8fd9\u4e9b name \u52a0\u4e0a\u4e86 family name. <pre><code>// old1.h \nnamespace old1 { void f(); void g(); }\n// old2.h \nnamespace old2 { void f(); void g(); }\n</code></pre></p> <p>Namespace</p> <ul> <li>Expresses a logical grouping of classes, functions, variables, etc.</li> <li>A namespace is a scope just like a class</li> <li>Preferred when only name encapsulation is needed</li> </ul>"},{"location":"OOP/oop5/#using-names-from-a-namespace","title":"Using names from a namespace","text":"<ul> <li>Using-Declarations<ul> <li>Introduces a local synonym for name</li> <li>States in one place where a name comes from.</li> <li>Eliminates redundant scope qualification: <pre><code>void main() {\nusing MyLib::foo;\nusing MyLib::Cat;\nfoo();\nCat c;\nc.Meow();\n}\n</code></pre></li> </ul> </li> <li>Using-Directives<ul> <li>Makes all names from a namespace available.</li> <li>Can be used as a notational convenience. <pre><code>void main() {\nusing namespace std;\nusing namespace MyLib;\nfoo();\nCat c;\nc.Meow();\ncout &lt;&lt; \"hello\" &lt;&lt; endl;\n}   </code></pre></li> <li> <p>Using-directives may create potential ambiguities.     <pre><code>// Mylib.h\nnamespace XLib {\nvoid x();\nvoid y();\n}\nnamespace YLib {\nvoid y();\nvoid z();\n}\n</code></pre>     Solution: </p> <ul> <li>Using-directives only make the names available.</li> <li>Ambiguities arise only when you make calls.</li> <li>Use scope resolution to resolve.     <pre><code>void main() {\nusing namespace XLib;\nusing namespace YLib;\nx(); // OK\ny(); // Error: ambiguous\nXLib::y(); // OK, resolves to XLib\nz(); // OK\n}\n</code></pre></li> </ul> </li> </ul> </li> </ul>"},{"location":"OOP/oop5/#namespace-aliases","title":"Namespace aliases","text":"<pre><code>namespace short1 = supercalifragilistic;\nshort1::f();\n</code></pre>"},{"location":"OOP/oop5/#namespace-composition","title":"Namespace composition","text":"<ul> <li>Compose new namespaces using names from other ones.</li> <li>Using-declarations can resolve potential clashes.</li> <li>Explicitly defined functions take precedence.</li> </ul> <pre><code>namespace first {\nvoid x();\nvoid y();\n}\nnamespace second {\nvoid y();\nvoid z();\n}\nnamespace mine {\nusing namespace first;\nusing namespace second;\nusing first::y(); // resolve clashes to first::x()\nvoid mystuff();\n// ...\n}\n</code></pre>"},{"location":"OOP/oop5/#namespace-selection","title":"Namespace selection","text":"<ul> <li>Compose namespaces by selecting a few features from other namespaces.</li> <li>Choose only the names you want rather than all.</li> <li>Changes to \"orig\" declaration become reflected in \"mine\".</li> </ul> <pre><code>namespace mine {\nusing orig::Cat; // use Cat class from orig\nvoid x();\nvoid y();\n}\n</code></pre>"},{"location":"OOP/oop5/#namspaces-are-open","title":"Namspaces are open.","text":"<ul> <li>Multiple namespace declarations add to the same namespace.<ul> <li>Namespace can be distributed across multiple files. <pre><code>//header1.h\nnamespace X {\nvoid f();\n}\n// header2.h\nnamespace X {\nvoid g(); // X how has f() and g();\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"OOP/oop6/","title":"Inheritance","text":"Abstract <ul> <li>composition</li> <li>inheritance</li> </ul>"},{"location":"OOP/oop6/#composition","title":"Composition","text":"<p>Composition: reusing the implementation</p> <ul> <li>Composition: construct new object with existing objects</li> <li>It is the relationship of \"has-a\"</li> <li>Ways of inclusion<ul> <li>Fully</li> <li>By reference (Inclustion by reference allows sharing) e.g. an employee has <pre><code>Name    // fully\nAddress     // fully\nHealth Plan     // fully\nSalary History: Collection of Raise objects // fully\nSupervisor: Another Employee object!    // reference\n</code></pre></li> </ul> </li> </ul> <p>Embedded objects</p> <ul> <li>All embedded objects are initalized<ul> <li>The default constructor is called if you don\u02bct supply the arguments, and there is a default constructor (or one can be built)  </li> </ul> </li> <li>Constructors can have initial</li> </ul> <p>Note</p> <p>If we wrote the constructor as (assuming we have the set accessors for the sub-objects): <pre><code>SavingsAccount::SavingsAccount (\nconst char* name,\nconst char* address,\nint cents ) {\nm_saver.set_name( name );\nm_saver.set_address( address );\nm_balance.set_cents( cents );\n}\n</code></pre> Default constructors would be called! \u5bf9\u4e8e\u5d4c\u5165\u5bf9\u8c61\uff0c\u4e0d\u7528\u521d\u59cb\u5316\u5217\u8868\uff0c\u5c31\u5fc5\u987b\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002</p> <p>public vs private  It is common to make embedded objects private.  </p>"},{"location":"OOP/oop6/#inheritance_1","title":"Inheritance","text":"<p>Reusing the interface \u7ee7\u627f\u662f\u8981\u57fa\u4e8e\u5df2\u6709\u7684\u7c7b\u6765\u8bbe\u8ba1\u65b0\u7684\u7c7b\uff0c\u65b0\u7684\u7c7b\u7684\u5bf9\u8c61\u53ef\u4ee5\u88ab\u5f53\u4f5c\u5df2\u6709\u7c7b\u7684\u5bf9\u8c61\u3002  </p> <p>Inheritance is the ability to define the behavior or implementation of one class as a superset of another class. </p>"},{"location":"OOP/oop6/#example","title":"Example","text":"<p>Source Code: <pre><code>class Database {\nvector&lt;CD&gt; cds;\nvector&lt;DVD&gt; dvds;\npublic:\nvoid addCD(CD &amp;aCD);\nvoid addDVD(DVD &amp;aDVD);\nvoid list() {\nfor (auto x:cds) { cd.print(); }\nfor (auto x:dvds) { x.print(); }\n}\n}\n</code></pre> Critique of DoME</p> <ul> <li>code duplication<ul> <li>CD and DVD classes very similar (large part are identical)</li> <li>makes maintenance difficult/more work</li> <li>introduces danger of bugs through incorrect maintenance</li> </ul> </li> <li>code duplication also in Database class</li> </ul> <p>Inheritance allows us to define one class as an extension of another.</p> <p>\u8fd9\u65f6\u5982\u679c\u5e0c\u671b\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u5982\u78c1\u5e26\uff0c\u76f4\u63a5 <code>class Tape: public Item</code> \u7ee7\u627f\u5373\u53ef\u3002</p>"},{"location":"OOP/oop6/#inheritance_2","title":"Inheritance","text":"<p>Advantages of inheritance</p> <ul> <li>Avoiding code duplication</li> <li>Code reuse</li> <li>Easier maintenance \u53ef\u7ef4\u62a4\u6027\uff0c\u6307\u4ee3\u7801\u4fee\u6539\u540e\u53ef\u4ee5\u9002\u5e94\u672a\u6765\u7684\u53d8\u5316\u3002</li> <li>Extendibility \u53ef\u6269\u5c55\u6027\uff0c\u6307\u4ee3\u7801\u4e0d\u7ecf\u4fee\u6539\u5c31\u53ef\u4ee5\u9002\u5e94\u672a\u6765\u7684\u53d8\u5316\u3002</li> </ul> <p>Class relationship: Is-A e.g. manager is an employee.  </p> <p>\u57fa\u7c7b\uff0c\u8d85\u7c7b\uff0c\u7236\u7c7b\u3002\u6d3e\u751f\u7c7b\uff0c\u5b50\u7c7b\u3002</p>"},{"location":"OOP/oop6/#scopes-and-access-in-c","title":"Scopes and access in C++","text":"<p>clint class \u8868\u793a\u8fd9\u4e2a\u7c7b\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u7c7b\u3002\uff08\u53ea\u80fd\u770b\u5230 <code>public</code>\uff09 \u80fd\u63a5\u53d7\u76f8\u540c\u4fe1\u606f\u7684\u5bf9\u8c61\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u7c7b\u578b\uff0c\u56e0\u6b64\u5b50\u7c7b\u7684\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u7236\u7c7b\u7684\u5bf9\u8c61\u3002 \u5b50\u7c7b\u4e0d\u80fd\u8bbf\u95ee\u7236\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff0c\u4f46\u79c1\u6709\u53d8\u91cf\u5b58\u5728\u4e8e\u8fd9\u4e2a\u7c7b\u4e2d\u3002  </p> <p>\u5f53\u8c03\u7528\u6784\u9020\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u4e0d\u80fd\u8c03\u7528\u7236\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff0c\u53ea\u80fd\u7528\u521d\u59cb\u5316\u5217\u8868\u7684\u65b9\u5f0f\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6211\u4eec\u4e0d\u80fd\u4e5f\u4e0d\u5e94\u8be5\u5728\u5b50\u7c7b\u5bf9\u7236\u7c7b\u7684\u53d8\u91cf\u505a\u521d\u59cb\u5316 (code duplication)</p> <pre><code>Employee::Employee( const string&amp; name, const string&amp; ssn )\n: m_name(name), m_ssn( ssn) {\n// initializer list sets up the values!\n}\nclass Manager : public Employee {\npublic:\nManager(const std::string&amp; name, const std::string&amp; ssn, const std::string&amp; title);\nconst std::string title_name() const;\nconst std::string&amp; get_title() const;\nvoid print(std::ostream&amp; out) const;\nprivate:\nstd::string m_title;\n};\nManager::Manager( const string&amp; name, const string&amp; ssn, const string&amp; title = \"\" )\n:Employee(name, ssn), m_title( title ) {\n}\n</code></pre> <p>\u6709\u4ec0\u4e48\u662f\u6ca1\u6709\u7ee7\u627f\u5f97\u5230\uff1a</p> <p>\u6784\u9020\u51fd\u6570\u6ca1\u6709\u88ab\u7ee7\u627f\uff0c\u4f46\u7236\u7c7b\u7684\u6784\u9020\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002\u6790\u6784\u540c\u7406\u3002  \u8d4b\u503c\u7684\u8fd0\u7b97\u7b26\u4e0d\u4f1a\u88ab\u7ee7\u627f\u3002  </p> <p>Inheritance</p> <ul> <li>Public: <code>class Derived : public Base ...</code></li> <li>Protected: <code>class Derived : protected Base ...</code></li> <li>Private: <code>class Derived : private Base ...</code><ul> <li>default</li> </ul> </li> </ul> Inheritance Type (B is) public protected private public A public in B protected in B hidden private A private in B private in B hidden protected A protected in B protected in B hidden <p>private \u7ee7\u627f\uff1a\u79c1\u751f\u5b50\uff0c\u5916\u754c\u4e0d\u80fd\u77e5\u9053\u4ed6\u7684\u7236\u4eb2\u662f\u8c01\u3002\u5373 B \u7684\u7528\u6237\u4e0d\u80fd\u770b\u5230 A \u7684 public \u51fd\u6570\u3002\u5176\u5b9e\u662f\u4e00\u79cd\u7ec4\u5408\uff0c\u7236\u7c7b\u7684\u51fd\u6570\u3001\u53d8\u91cf\u53d8\u4e3a\u79c1\u6709\u3002    </p> <pre><code>int main()\n{\nEmployee p1(\"John\");\nManager p2(\"Tom Jordan\", );\np1.print();\np2.print();\np1.print(\"Welcome:\");\n//p2.print(\"Welcome:\");     \u62a5\u9519\nEmployee *p = &amp;p1;\np-&gt;print();\np = &amp;p2;\np-&gt;print();             // \u6309 Employee \u91cc\u9762\u7684\u51fd\u6570\u8f93\u51fa\uff0c\u800c\u4e0d\u662f Manager\n}\n</code></pre> <p>\u8981\u8c03\u7528\u7236\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8981 <code>Employee::print()</code>. </p> <p>\u521d\u59cb\u5316\u5217\u8868\u662f\u5c5e\u4e8e body \u7684\uff0c\u8981\u548c <code>{}</code> \u4e00\u8d77\u3002 \u7236\u7c7b\u7684\u6784\u9020\u662f\u5728\u5b50\u7c7b\u7684\u6784\u9020\u4e4b\u524d\u3002</p> <p>\u5b50\u7c7b\u91cd\u65b0\u5b9a\u4e49\u4e86\u7236\u7c7b\u7684\u67d0\u4e2a\u51fd\u6570\uff0c\u5c31\u4f1a\u628a\u5176\u4ed6 overloaded \u7684\u51fd\u6570\u8986\u76d6\u6389\uff08C++ \u72ec\u6709\uff0c\u65e0\u6cd5\u89e3\u91ca\uff09\uff0c\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, <code>p2.print(\"welcome\")</code> \u4f1a\u62a5\u9519\u3002</p> <p>\u5982\u679c\u5728 Employee \u4e2d\u7684 <code>print</code> \u51fd\u6570\u52a0\u4e0a <code>virtual</code>, <code>p-&gt;print()</code> \u5c31\u4f1a\u8f93\u51fa\u3002</p>"},{"location":"OOP/oop7/","title":"Polymorphism","text":"Abstract <ul> <li>Polymorphism<ul> <li>virtual functions and override</li> <li>abstract functions and classes</li> </ul> </li> <li>Multiple Inheritance</li> </ul>"},{"location":"OOP/oop7/#virtual-function","title":"Virtual function","text":""},{"location":"OOP/oop7/#subtyping","title":"Subtyping","text":"<p>Objects of subclasses can be used where objects of supertypes are required. (This is called substitution) Subclass object may be assigned to superclass pointr variables. </p> Example <p> </p> <pre><code>Vehicle *v1 = new Vehicle();\nVehicle *v2 = new Car();\nVehicle *v3 = new Bicycle();\n</code></pre> <p>Conversions</p> <ul> <li>Public Inheritance should imply substitution<ul> <li>If B isa A, you can use a B any where an A can be used.</li> <li>if B isa A, then everything that is true for A is also true of B.</li> <li>Be careful if the substitution is not valid!</li> </ul> </li> <li>Given D is derived from B<ul> <li><code>D -&gt; B</code> \u53ea\u628a D \u5185\u548c B \u76f8\u540c\u7684\u5730\u65b9\u8d4b\u503c\uff0c\u4e0d\u4f1a\u628a D \u7279\u6709\u7684\u4e1c\u897f\u8d4b\u503c\u3002</li> <li><code>D* -&gt; B*</code> \u6362\u4e2a\u773c\u5149\u770b\u5f85\u5bf9\u8c61\uff0c\u5e76\u6ca1\u6709\u6539\u53d8\u5bf9\u8c61\u3002</li> <li><code>D&amp; -&gt; B&amp;</code> </li> </ul> </li> </ul>"},{"location":"OOP/oop7/#upcasting","title":"Upcasting","text":"<p>cast \u5728 OOP \u91cc\u53eb\u9020\u578b\uff0c\u4e0d\u518d\u662f\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u7684\u610f\u601d\u3002 Upcasting is the act of converting from a Derived reference or pointer to a base class reference or pointer.  </p> <p>\u6211\u4eec\u662f\u5b66\u751f\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u53bb\u642c\u7816\uff0c\u5e76\u6ca1\u6709\u6539\u53d8\u6211\u4eec\u7684\u80fd\u529b\u3002\u4f46 \u5bf9\u4e8e <code>int i = (int)6.25;</code> \u8fd9\u91cc\u5fc5\u987b\u5f3a\u5236\u6539\u9020\uff0c\u5426\u5219\u65e0\u6cd5\u5b58\u8fdb\u8fd9\u4e2a\u503c, 6.25 \u4e5f\u88ab\u622a\u65ad\u4e3a 6.   </p> <p>upcasting: \u5411\u4e0a\u9020\u578b\uff0c\u91cd\u65b0\u4e3a\u5bf9\u8c61\u60f3\u4e86\u4e00\u4e2a\u9020\u578b\uff0c\u4f46\u5e76\u6ca1\u6709\u6539\u53d8\u5bf9\u8c61\u7684\u503c\u3002\u56e0\u4e3a Manager \u4e2d\u4e00\u5b9a\u6709 Employee \u7684\u90e8\u5206\uff0c\u800c\u4e14\u4e00\u5b9a\u5728\u8fd9\u90e8\u5206\u7684\u6700\u4e0a\u65b9\u3002\u73b0\u5728\u6211\u4eec\u8ba4\u4e3a\u8fd9\u5757\u5730\u5740\u5b58\u653e\u7684\u662f Employee \u7684\u5bf9\u8c61\u3002</p> Example <p><pre><code>Manager pete( \"Pete\", \"444-55-6666\",\"Bakery\");\nEmployee* ep = &amp;pete; // Upcast\nEmployee&amp; er = pete; // Upcast\n</code></pre> Lose type information about the object: <pre><code>ep-&gt;print( cout ); // prints base class version\n</code></pre></p>"},{"location":"OOP/oop7/#example-a-drawing-program","title":"Example: A drawing program","text":"<p>operations: <code>render, resize, move</code>. data: <code>center</code>. </p> <pre><code>class XYPos{}\nclass Shape {\npublic: Shape();\nvirtual ~Shape();\nvirtual void render();\nvoid move (const XYPos&amp;);\nvirtual void resize();\nprotected:\nXYPos center;\n}\n</code></pre> <p><code>virtual</code> \u5b9a\u4e49\u4e86\u865a\u51fd\u6570\uff0c\u610f\u5473\u7740\u5b50\u7c7b\u53ef\u80fd\u51fa\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u65b0\u7248\u672c\u3002\u544a\u8bc9\u7f16\u8bd1\u5668\u901a\u8fc7\u6307\u9488\u8bbf\u95ee\u8fd9\u4e2a\u51fd\u6570\u65f6\uff0c\u8981\u5982\u4f55\u7f16\u8bd1\u3002</p> <pre><code>class Ellipse : public Shape {\npublic:\nEllipse(float maj, float minr);\nvirtual void render(); // will define own\nprotected:\nfloat major_axis, minor_axis;\n};\nclass Circle : public Ellipse {\npublic:\nCircle(float radius) : Ellipse(radius, radius){}\nvirtual void render();\n};\n</code></pre> <pre><code>void render(Shape* p) {\np-&gt;render(); // calls correct render function\n} // for given Shape! void func() {\nEllipse ell(10, 20);\nell.render(); // static -- Ellipse::render();\nCircle circ(40);\ncirc.render(); // static -- Circle::render();\nrender(&amp;ell); // dynamic -- Ellipse::render();\nrender(&amp;circ); // dynamic -- Circle::render()\n</code></pre> <p>\u6211\u4eec\u8ba4\u4e3a p \u8fd9\u4e2a\u6307\u9488\u662f\u4e00\u4e2a polymorphic variable \u591a\u6001\u53d8\u91cf\uff0c\u6709\u9759\u6001\uff08\u58f0\u660e\uff09\u7c7b\u578b <code>Shape</code> \u53c8\u6709\u52a8\u6001\u7c7b\u578b\u3002</p>"},{"location":"OOP/oop7/#static-and-dynamic-type","title":"Static and dynamic type","text":"<ul> <li>The declared type of a variable is its static type.</li> <li>The type of the object a variable refers to is its dynamic type.</li> <li>The compiler\u02bcs job is to check for static-type violations. \u56e0\u6b64\u5728\u7f16\u8bd1\u65f6\uff0c\u5982\u679c\u6211\u4eec\u53bb\u6389 <code>Shape()</code> \u91cc\u7684 <code>render</code> \u51fd\u6570\uff0c\u7f16\u8bd1\u5c31\u4f1a\u62a5\u9519\u3002\u8fd9\u6837\u65e0\u6cd5\u901a\u8fc7\u9759\u6001\u68c0\u67e5\uff0c\u5c3d\u7ba1\u6211\u4eec\u77e5\u9053\u6211\u4eec\u5e76\u4e0d\u4f1a\u4f7f\u7528 <code>Shape</code> \u7684 <code>render</code> \u51fd\u6570\u3002</li> </ul>"},{"location":"OOP/oop7/#polymorphism_1","title":"Polymorphism","text":"<ul> <li>Upcast: take an object of the derived class as an object of the base one. e.g. Ellipse can be treated as a Shape</li> <li>Binding: which function to be called<ul> <li>Static binding: call the function as the code</li> <li>Dynamic binding: call the function of the object <code>virtual</code> \u5173\u952e\u8bcd\u662f\u5728\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528\u52a8\u6001\u7ed1\u5b9a\u3002\u5426\u5219\u5373\u4f7f\u7528\u6307\u9488\uff0c\u4e5f\u662f\u9759\u6001\u7ed1\u5b9a\u3002 e.g. <code>g();</code> <code>Student a; a.f()</code> \u662f\u9759\u6001; <code>Student &amp;a; a.f();</code> <code>p-&gt;f();</code> \u4e0d\u4e00\u5b9a\u662f\u9759\u6001\u3002</li> </ul> </li> </ul> call type free function static <code>object.fun()</code> static <code>ref.func()</code> static <code>p-&gt;func()</code> static <code>ref.vfunc()</code> dynamic <code>p-&gt;vfunc()</code> dynamic"},{"location":"OOP/oop7/#virtual-functions","title":"Virtual functions","text":"<ul> <li>Can be transparently overridden in a derived class  \u7236\u7c7b\u7684\u51fd\u6570\u5b9a\u4e49\u4e3a\u865a\u51fd\u6570\u540e\uff0c\u5b50\u7c7b\u4e0d\u9700\u8981\u518d\u5b9a\u4e49\u4e86\uff0c\u4f1a\u4f20\u9012\u4e0b\u53bb\u3002\uff08\uff1f</li> <li>Objects carry a pack of their virtual functions</li> <li>Compiler checks pack and dynamically calls the right function</li> <li>If compiler knows the function at compile-time, it can generate a static call</li> </ul> <p>Polymorphic variables </p> <ul> <li>Pointers or reference variables of objects are polymorphic variables</li> <li>They can hold objects of the declared type, or of subtypes of the declared type. \u53ea\u5199\u4e86\u4e00\u53e5\u4ee3\u7801\uff0c\u4f46\u5b9e\u9645\u6267\u884c\u4e2d\u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6267\u884c\u65b9\u5f0f\uff0c\u8fd9\u5c31\u662f\u591a\u6001\u3002</li> </ul>"},{"location":"OOP/oop7/#how-virtuals-work-in-c","title":"How virtuals work in C++","text":"<pre><code>class A {\nint i;\nvoid f() {}\n};\nclass B: public A {\nint j;\n};\n</code></pre> <p>\u8fd9\u65f6 <code>sizeof(A) == 4</code> \u4f46\u5982\u679c\u5c06 f \u58f0\u660e\u4e3a\u865a\u51fd\u6570, <code>sizeof(A)</code> \u5c31\u53d8\u4e3a 16. \u5982\u679c\u53bb\u6389 <code>int i;</code> \u540e <code>sizeof(A)</code> \u53d8\u4e3a 8.  </p> <p>\u4e00\u65e6\u6709\u865a\u51fd\u6570\u58f0\u660e\uff0c\u8fd9\u91cc\u4f1a\u5728\u5f00\u5934\u653e\u4e00\u4e2a\u6307\u9488 <code>VPTR</code>, \u6307\u5411\u4e00\u4e2a\u8868\uff0c\u91cc\u9762\u653e\u7684\u662f\u51fd\u6570\u6307\u9488\u3002\uff08\u5bf9\u8c61\u91cc\u9762\u6ca1\u6709\u51fd\u6570\u6307\u9488\uff0c\u53ea\u653e\u8868\u7684\u6307\u9488\uff09 <pre><code>long long *vp = (long long**)p;\nvoid (*pf) () = (void (*)())*(*p);\npf();\n</code></pre> \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u5bf9\u5e94\u7684\u865a\u51fd\u6570\u3002</p> <p><pre><code>Ellipse elly(20F, 40F);\nCircle circ(60F);\nelly = circ; // 10 in 5?\nelly.render(); // Ellipse::render()\n</code></pre> \u8fd9\u91cc\u53ea\u4f1a\u628a circ \u5bf9\u5e94\u7684\u90e8\u5206\u8d4b\u503c\u7ed9 elly, \u4f46\u865a\u51fd\u6570\u7684 VPTR \u4e0d\u4f1a. VPTR \u53ea\u4f1a\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u7684\u65f6\u5019\u5bf9\u5176\u8fdb\u884c\u8d4b\u503c\u3002</p> <pre><code>Ellipse* elly = new Ellipse(20F, 40F);\nCircle* circ = new Circle(60F);\nelly = circ;\nelly-&gt;render(); // Circle::render()\n</code></pre> <p>References act like pointers.  </p>"},{"location":"OOP/oop7/#virtual-destructors","title":"Virtual destructors","text":"<pre><code>Shape *p = new Ellipse(100.0F, 200.0F); ...\ndelete p;\n</code></pre> <p>p \u7684\u9759\u6001\u7c7b\u578b\u662f Shape, \u5982\u679c\u4e0d\u5b9a\u4e49\u865a\u51fd\u6570\uff0c\u90a3\u4e48 p \u53ea\u4f1a\u53d1\u751f\u9759\u6001\u7ed1\u5b9a\uff0c\u5373\u8c03\u7528 <code>Shape</code> \u7684\u6790\u6784\u51fd\u6570\uff0c\u65e0\u6cd5\u8c03\u7528 <code>Ellipse</code> \u7684\u6790\u6784\u51fd\u6570\u3002  </p>"},{"location":"OOP/oop7/#overriding","title":"Overriding","text":"<p>Overriding redefines the body of a virtual function.  </p> <p>\u4ecd\u7136\u53ef\u4ee5\u5728\u5b50\u7c7b\u4e2d\u8c03\u7528\u7236\u7c7b\u7684\u88ab overide \u7684\u51fd\u6570\u3002 <pre><code>void Derived::func() {\ncout &lt;&lt; \"In Derived::func!\";\nBase::func(); // call to base class\n}\n</code></pre></p> <pre><code>class Base {\npublic:\nvirtual void func();\nvirtual void func(int);\n};\n</code></pre> <p>Return types relaxation </p> <ul> <li>Suppose D is publicly derived from B</li> <li><code>D::f()</code> can return a subclass of the return type defined in <code>B::f()</code></li> <li>Applies to pointer and reference types</li> </ul> Relaxation Example <p><pre><code>class Expr {\npublic: virtual Expr* newExpr();\nvirtual Expr&amp; clone();\nvirtual Expr self();\n}\nclass BinaryExpr : public Expr {\npublic:\nvirtual BinaryExpr* newExpr();  // ok\nvirtual BinaryExpr&amp; clone();    // ok\nvirtual BinaryExpr self();      // Error!\n}\n</code></pre> \u6307\u5411\u5b50\u7c7b\u7684\u5bf9\u8c61\u53ef\u4ee5\u88ab\u770b\u505a\u662f\u4e00\u4e2a\u6307\u5411\u7236\u7c7b\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u5b50\u7c7b\u7684\u5bf9\u8c61\u548c\u7236\u7c7b\u7684\u5bf9\u8c61\u662f\u4e0d\u540c\u7684\u3002</p> <p>If you override an overloaded function, you must override all of the variants!</p> <ul> <li>Can't override just one</li> <li>If you don't override all, some will be hidden</li> </ul> <p>Tips</p> <ul> <li>Never redefine an inherited non-virtual function \u5b50\u7c7b\u4e0d\u8981\u91cd\u65b0\u5b9a\u4e49\u4e0d\u662f virtual \u7684\u51fd\u6570\uff0c\u8fd9\u6837\u65e0\u6cd5\u5f62\u6210 override \u7684\u5173\u7cfb\u3002<ul> <li>Non-virtuals are statically bound</li> <li>No dynamic dispatch!</li> </ul> </li> <li>Never redefine an inherited default parameter value \u4e0d\u8981\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u7684\u9ed8\u8ba4\u53c2\u6570\u503c\u3002<ul> <li>They\u02bcre statically bound too!</li> <li>And what would it mean?</li> </ul> </li> </ul> <p>Example</p> <p><pre><code>class A {\npublic:\nA() { f(); }\nvirtual void f() { cout &lt;&lt; \u201cA::f()\u201d; }\n};\nclass B : public A {\npublic:\nB() { f(); }\nvoid f() { cout &lt;&lt; \u201cB::f()\u201d; }\n};\nB b; // \u8f93\u51fa A...B... \n</code></pre> \u8fd9\u91cc\u4f1a\u53d1\u751f\u52a8\u6001\u7ed1\u5b9a\u3002\u4f46\u662f VPTR \u4f1a\u5728\u6784\u9020\u51fd\u6570\u7684 initialized list \u91cc\u521d\u59cb\u5316\u3002\u6211\u4eec\u4f1a\u6267\u884c A \u7684\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u4e2a\u65f6\u5019 VPTR \u662f A \u7684\uff0c\u56e0\u6b64\u4f1a\u8c03\u7528 A \u4e2d\u7684 f \u51fd\u6570\u3002\u7236\u7c7b\u7ed3\u675f\u540e\u56de\u5230 B \u7684\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u65f6\u628a VPTR \u6539\u5199\u4e3a\u6307\u5411 B \u7684\u8868\uff0c\u8fd9\u65f6\u7684\u52a8\u6001\u7ed1\u5b9a\u5c31\u53d8\u4e3a B \u7684 f \u51fd\u6570\u3002</p>"},{"location":"OOP/oop7/#abstract-classes","title":"Abstract classes","text":"<p>\u6211\u4eec\u4e0d\u5e94\u8be5\u5236\u9020 Shape \u7684\u5bf9\u8c61\uff0c\u4ed6\u7684\u4f5c\u7528\u53ea\u5728\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\u548c\u516c\u5171\u63a5\u53e3\u3002 </p> <p>\u8fd9\u4e2a\u7c7b\u4e2d\u4e00\u65e6\u6709\u4e00\u4e2a\u865a\u51fd\u6570=0(\u7eaf\u865a\u51fd\u6570), \u90a3\u4e48\u8fd9\u4e2a\u7c7b\u5c31\u4e0d\u80fd\u88ab\u5236\u9020\u51fa\u5bf9\u8c61\uff0c\u8fd9\u6837\u7684\u7c7b\u53eb\u505a\u62bd\u8c61\u7c7b\u3002</p> Example <pre><code>class XYPos{ ... }; // x,y point\nclass Shape {\npublic:\nShape();\nvirtual void render() = 0; // mark render() pure\nvoid move(const XYPos&amp;);\nvirtual void resize();\nprotected:\nXYPos center;\n};\n</code></pre> <ul> <li>An abstract base class has pure virtual functions<ul> <li>Only interface defined</li> <li>No function body given</li> </ul> </li> <li>Abstract base classes cannot be instantiated<ul> <li>Must derive a new class (or classes)</li> <li>Must supply definitions for all pure virtuals before class can be instantiated</li> </ul> </li> </ul>"},{"location":"OOP/oop7/#multiple-inheritance","title":"Multiple Inheritance","text":"<p>diamond inheritance. \u5b59\u5b50\u4f53\u5185\u6709\u4e24\u4e2a\u7237\u7237\u3002</p>"},{"location":"OOP/oop7/#vanilla-mi","title":"Vanilla MI","text":"<ul> <li>Members are duplicated</li> <li>Derived class has access to full copies of each base class</li> <li>This can be useful!<ul> <li>Multiple links for lists</li> <li>Multiple streambufs for input and output</li> </ul> </li> </ul> <pre><code>class B1 { int m_i; };\nclass D1 : public B1 {};\nclass D2 : public B1 {};\nclass M : public D1, public D2 {};\nvoid main() {\nMm; //OK\nB1* p = new M; // ERROR: which B1\nB1* p2 = dynamic_cast&lt;D1*&gt;(new M); // OK\n}\n</code></pre>"},{"location":"OOP/oop7/#protocol-classes","title":"Protocol classes","text":"<p>\u591a\u7ee7\u627f\uff1a\u53ea\u6709\u4e00\u4e2a\u7236\u7c7b\u6709\u6210\u5458\u53d8\u91cf\uff08\u51fd\u6570\u6ca1\u5173\u7cfb\uff09</p> <p>Protocol classes \u534f\u8bae\u7c7b\uff0c\u91cc\u9762\u6ca1\u6709\u6210\u5458\u53d8\u91cf\uff08\u9664\u4e86 static, const\uff09\u53ea\u6709\u7eaf\u865a\u51fd\u6570\u3002\u8fd9\u6837\u7684\u7c7b\u53ef\u4ee5\u5b89\u5168\u5730\u505a\u591a\u7ee7\u627f\u3002</p> <p>Abstract base class with</p> <ul> <li>All non-static member functions are pure virtual except destructor</li> <li>Virtual destructor with empty body</li> <li>No non-static member variables, inherited or otherwise may contain static members</li> </ul>"},{"location":"OOP/oop7/#using-virtual-base-classes","title":"Using virtual base classes","text":"<p>\u865a\u7ee7\u627f virtual public  \u628a\u7236\u7c7b\u7684\u5bf9\u8c61\u62ff\u51fa\u6765\u653e\u5728\u5916\u9762\uff0c\u5b50\u7c7b\u6307\u9488\u6307\u5411\u5916\u9762\u7684\u7a7a\u95f4\u3002\u4ece\u4e24\u4e2a\u865a\u7ee7\u627f\u7684\u7c7b\u591a\u7ee7\u627f\uff0c\u8fd9\u65f6\u5176\u4e2d\u7684\u4e24\u4e2a\u7237\u7237\u7c7b\u53ef\u4ee5\u6307\u5411\u540c\u4e00\u4e2a\u5730\u65b9\u3002</p> <pre><code>class B1 { int m_i; };\nclass D1 : virtual public B1 {};\nclass D2 : virtual public B1 {};\nclass M : public D1, public D2 {};\nvoid main() {\nM m; //OK\nm.m_i++; // OK, there is only one B1 in m.\nB1* p = new M; // OK\n}\n</code></pre> <p>\u5efa\u8bae\uff1a\u5bf9\u591a\u7ee7\u627f say no. </p>"},{"location":"OOP/oop8/","title":"Copy Constructor","text":""},{"location":"OOP/oop8/#copying","title":"Copying","text":"<p>Create a new object from an existing one.  </p> <ul> <li>Copying is implemented by the copy constructor  </li> <li>Has the unique signature <code>T::T(const T&amp;);</code> </li> <li>C++ builds a copy ctor for you if you don't provide one! \u5982\u679c\u6ca1\u6709\u7ed9\u62f7\u8d1d\u6784\u9020, C++ \u4f1a\u81ea\u52a8\u521b\u9020\u4e00\u4e2a memberwise \u800c\u975e bitwise. \u5982\u679c\u6709\u6210\u5458\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f1a\u8c03\u7528\u5bf9\u8c61\u81ea\u5df1\u7684\u62f7\u8d1d\u51fd\u6570\u3002 \u5982\u679c\u6709\u6210\u5458\u53d8\u91cf\u662f\u6307\u9488\uff0c\u4f1a\u548c\u539f\u6765\u5bf9\u8c61\u4e00\u6837\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u3002\u5982\u679c\u6709\u4e00\u4e2a\u5bf9\u8c61\u88ab\u6790\u6784\uff0c\u90a3\u4e48\u8fd9\u5757\u5185\u5b58\u5c31\u88ab delete, \u8fd9\u5c31\u53d8\u6210\u4e86\u65e0\u6548\u5185\u5b58\u3002 \u56e0\u6b64\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u6709\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u6709\u6307\u9488\u65f6\u5fc5\u987b\u8981\u6709\u3002   <ul> <li>Copies each member variable<ul> <li>Good for numbers, objects, arrays Copies each pointer</li> </ul> </li> <li>Data may become shared!</li> </ul> </li> </ul> <p>\u4ec0\u4e48\u65f6\u5019\u62f7\u8d1d\u6784\u9020\u4f1a\u88ab\u8c03\u7528\uff1f</p> <ul> <li>During call by value \u53ea\u6709\u5bf9\u8c61\u672c\u8eab\u624d\u4f1a\u6709\u62f7\u8d1d\u6784\u9020\uff08\u6307\u9488\u3001\u5f15\u7528\u4e0d\u4f1a\uff09  </li> <li>During initialization   \u5b9a\u4e49\u53d8\u91cf\u65f6\u505a\u7684\u662f\u521d\u59cb\u5316\uff0c\u5176\u4ed6\u65f6\u5019\u662f\u8d4b\u503c\u3002  \u521d\u59cb\u5316\u662f\u8981\u62f7\u8d1d\u6784\u9020\uff0c\u8d4b\u503c\u8981\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 <pre><code>Person baby_a(\"Fred\");\n// these use the copy ctor\nPerson baby_b = baby_a; // not an assignment\nPerson baby_c( baby_a ); // not an assignment\n</code></pre></li> <li>During function return \u4e0d\u540c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u505a\u4e0d\u540c\u7684\u4f18\u5316\u3002\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u62f7\u8d1d\u6784\u9020\u3002</li> </ul> <p>\u4e00\u4e2a\u5bf9\u8c61\u53ea\u80fd\u88ab\u6784\u9020\uff08\u521d\u59cb\u5316\uff09\u4e00\u6b21\uff0c\u6790\u6784\u4e00\u6b21\uff0c\u4f46\u53ef\u4ee5\u88ab\u8d4b\u503c\u5f88\u591a\u6b21\u3002  </p> <p><code>string</code> \u6709\u81ea\u5df1\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 </p> <p>Copy ctor guidelines</p> <ul> <li>In general, be explicit Create your own copy ctor -- don't rely on the default</li> <li>If you don't need one declare a <code>private</code> copy ctor \u79c1\u6709\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f7f\u5f97\u5bf9\u8c61\u4e0d\u80fd\u88ab\u62f7\u8d1d\u6784\u9020\u3002<ul> <li>prevents creation of a default copy constructor</li> <li>generates a compiler error if try to pass-by-value - don't need a defintion</li> </ul> </li> </ul>"},{"location":"OOP/oop8/#types-of-function-parameters-and-return-value","title":"types of function parameters and return value","text":"<p>way in</p> <ul> <li>a new object is to be created in f  <code>void f(Student i);</code> </li> <li>better with const if no intend to modify the object  <code>void f(Student *p);</code></li> <li>better with const if no intend to modify the object  <code>void f(Student&amp; i);</code></li> </ul> <p>way out</p> <ul> <li>a new object is to be created at returning  <code>Student f();</code></li> <li>what should it points to?  <code>Student* f();</code></li> <li>what should it refers to?  <code>Student&amp; f();</code></li> </ul> <p><pre><code>char *foo() {\nchar *p;    p = new char[10];\nstrcpy(p, \"something\");\nreturn p;\n}\nvoid bar() {\nchar *p = foo();\nprintf(\"%s\", p);\ndelete p;\n}\n</code></pre> <code>p</code> \u672c\u8eab\u662f\u672c\u5730\u53d8\u91cf\uff0c\u4f46\u6307\u5411\u7684\u5730\u65b9\u662f\u5168\u5c40\u7684\u7a7a\u95f4\u3002</p> <p>Note</p> <ul> <li>Pass in an object if you want to store it \u51fd\u6570\u8981\u5b58\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u7528\u7528\u6307\u9488\u6216\u8005\u5f15\u7528\u4f20\u5165\uff0c\u800c\u662f\u76f4\u63a5\u4f20\u5165\u3002  </li> <li>Pass in a const pointer or reference if you want to get the values</li> <li>Pass in a pointer or reference if you want to do something to it</li> <li>Pass out an object if you create it in the function \u5982\u679c\u521b\u5efa\u4e86\u65b0\u7684\u5bf9\u8c61\uff0c\u5c31\u8981\u4f20\u5bf9\u8c61\u51fa\u53bb\u3002</li> <li>Pass out pointer or reference of the passed in only \u4f20\u51fa\u53bb\u7684\u6307\u9488/\u5f15\u7528\u53ea\u80fd\u662f\u4f20\u5165\u7684\u6307\u9488/\u5f15\u7528\u3002</li> <li>Never new something and return the pointer \u5728\u54ea\u91cc <code>new</code> \u5c31\u5728\u54ea\u91cc <code>delete</code>.(\u7c7b\u5185\u662f\u53ef\u4ee5\u7684\uff0c\u6bd4\u5982\u5728\u6784\u9020\u7684 <code>new</code> \u5728\u6790\u6784\u7684\u65f6\u5019 <code>delete</code>)</li> </ul>"},{"location":"OOP/oop8/#move-constructor","title":"Move Constructor","text":""},{"location":"OOP/oop8/#left-value-vs-right-value","title":"Left Value vs Right Value","text":"<ul> <li>\u53ef\u4ee5\u7b80\u5355\u5730\u8ba4\u4e3a\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u5de6\u8fb9\u7684\u90fd\u662f\u5de6\u503c\uff1a<ul> <li>\u53d8\u91cf\u672c\u8eab\u3001\u5f15\u7528</li> <li><code>*</code> \u3001 <code>[]</code> \u8fd0\u7b97\u7684\u7ed3\u679c</li> </ul> </li> <li>\u53ea\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u53f3\u8fb9\u7684\u90fd\u662f\u53f3\u503c<ul> <li>\u5b57\u2faf\u91cf</li> <li>\u8868\u8fbe\u5f0f</li> </ul> </li> <li>\u8c03\u7528\u53ea\u80fd\u63a5\u53d7\u5de6\u503c\u2014&gt;\u5f15\u7528\u662f\u5de6\u503c\u7684\u522b\u540d</li> <li>\u8c03\u7528\u51fd\u6570\u65f6\u7684\u4f20\u53c2\u76f8\u5f53\u4e8e\u53c2\u6570\u53d8\u91cf\u5728\u8c03\u7528\u65f6\u7684\u521d\u59cb\u5316</li> </ul> <p><code>&amp;&amp;</code> \u6210\u4e3a\u53f3\u503c\u5f15\u7528\u3002 <pre><code>int x=20; // \u5de6\u503c\nint&amp;&amp; rx = x * 2; // x*2\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u53f3\u503c\uff0crx\u5ef6\u957f\u5176\u2f63\u547d\u5468\u671f\nint y = rx + 2; // \u56e0\u6b64\u4f60\u53ef\u4ee5\u91cd\u7528\u5b83:42\nrx = 100; // \u4e00\u65e6\u4f60\u521d\u59cb\u5316\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u5de6\u503c\uff0c\u53ef\u4ee5\u88ab\u8d4b\u503c\nint&amp;&amp; rrx1 = x; // \u975e\u6cd5:\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u88ab\u5de6\u503c\u521d\u59cb\u5316\nconst int&amp;&amp; rrx2 = x; // \u975e\u6cd5:\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u88ab\u5de6\u503c\u521d\u59cb\u5316\n</code></pre> <code>x</code> \u4e0d\u5b58\u5728\u4e86\uff0c\u53f3\u503c\u5f15\u7528\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u3002\u6ce8\u610f\u53f3\u503c\u5f15\u7528\u672c\u8eab\u662f\u4e2a\u5de6\u503c\u3002 <pre><code>int x = 10;\nint &amp;&amp;a = x + 2;\nint y = a + 2;\ncout &lt;&lt; y &lt;&lt; endl;\nx = 5;\ncout &lt;&lt; y &lt;&lt; endl;\na = 40;\ncout &lt;&lt; y &lt;&lt; endl;\ncout &lt;&lt; a &lt;&lt; endl;\nint &amp;&amp;b = x;        // ERR: \u53f3\u503c\u5f15\u7528\u4e0d\u80fd\u7ed1\u5de6\u503c\uff08\u4e3a\u4e86\u533a\u5206\nint &amp;&amp;b = x+0;      // ok\n</code></pre> \u5982\u679c\u51fd\u6570\u8fd4\u56de\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53f3\u503c\u5f15\u7528\uff0c\u907f\u514d\u62f7\u8d1d\u6784\u9020\u3002  </p> <pre><code>void fun(int &amp;lref) {\ncout &lt;&lt; \"l-value\" &lt;&lt; endl;\n}\nvoid fun(int &amp;&amp;rref) {\ncout &lt;&lt; \"r-value\" &lt;&lt; endl;\n}\nint main() {\nint x = 10;\nfun(x);     // l value\nfun(10);    // r value\n}\n</code></pre> <p>\u6ca1\u6709\u63a5\u53d7\u53f3\u503c\u7684\u51fd\u6570\u65f6\u8fd9\u6837\u7684\u51fd\u6570\u4e5f\u80fd\u63a5\u53d7\u53f3\u503c <pre><code>void fun(const int&amp; clref) {\ncout &lt;&lt; \"l-value const reference\\n\";\n}\n</code></pre></p>"},{"location":"OOP/oop8/#move-constructor_1","title":"Move Constructor","text":"<p>\u79fb\u52a8\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1a\u53c2\u6570\u4e3a\u53f3\u503c\u5f15\u7528\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002</p> <p>\u5982\u679c\u6709\u4e00\u4e2a\u5bf9\u8c61\uff0c\u91cc\u9762\u6709\u6307\u9488\u6307\u5411\u4e00\u5757\u5185\u5b58\u3002\u62f7\u8d1d\u6784\u9020\u5c31\u662f\u91cd\u65b0\u7533\u8bf7\u4e00\u5757\u5185\u5b58\u5e76\u5c06\u539f\u5185\u5b58\u7684\u6570\u636e\u62f7\u8d1d\u8fc7\u6765\u3002\u800c\u79fb\u52a8\u6784\u9020\u5c31\u662f\u8ba9\u65b0\u5bf9\u8c61\u7684\u6307\u9488\u6307\u5411\u5185\u5b58\uff0c\u4f46\u539f\u6307\u9488\u4e0d\u518d\u6307\u5411\u8fd9\u4e2a\u5185\u5b58(<code>nullptr</code>). </p> <pre><code>DynamicArray(DynamicArray&amp;&amp; rhs) : m_size{rhs.m_size}, m_array{rhs.m_array}\n{\nrhs.m_size = 0;\nrhs.m_array = nullptr;\ncout &lt;&lt; \"Move constructor: dynamic array is moved!\\n\";\n}\n</code></pre> <p>\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u79fb\u52a8\u6784\u9020\uff1f \u7c7b\u5185\u6709\u6307\u9488\uff0c\u800c\u4e14\u5bf9\u8c61\u4f1a\u5728\u51fd\u6570\u5185\u4f20\u8fdb\u4f20\u51fa\u3002    </p> <p><code>std::move()</code> <pre><code>vector&lt;int&gt; v1{1, 2, 3, 4};\nvector&lt;int&gt; v2 = v1;\nvector&lt;int&gt; v3 = std::move(v1);// \u6b64\u65f6\u8c03\u7528\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570  \n</code></pre> \u6b64\u65f6\u8c03\u7528\u590d\u5236\u6784\u9020\u51fd\u6570\uff0cv2\u662fv1\u7684\u526f\u672c  \u901a\u8fc7 <code>std::move</code> \u5c06 v1 \u8f6c\u5316\u4e3a\u53f3\u503c\uff0c\u4ece\u2f7d\u6fc0\u53d1 v3 \u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u5b9e\u73b0\u79fb\u52a8\u8bed\u4e49 * \u5bf9\u8c61\u521d\u59cb\u5316\u7684\u5f62\u5f0f     <pre><code>//\u5c0f\u62ec\u53f7\u521d\u59cb\u5316\nstring str(\"hello\");\n//\u7b49\u53f7\u521d\u59cb\u5316\nstring str = \"hello\";\n//\u5927\u62ec\u53f7\u521d\u59cb\u5316\nstruct Studnet\n{\nchar *name;\nint age;\n};\nStudnet s = {\"dablelv\", 18};//Plain of Data\u7c7b\u578b\u5bf9\u8c61\nStudnet sArr[] = {{\"dablelv\", 18}, {\"tommy\", 19}}; //POD\u6570\u7ec4\n</code></pre> * \u5217\u8868\u521d\u59cb\u5316\u7684\u5f62\u5f0f     <pre><code>class Test\n{\nint a;\nint b;\npublic:\nTest(int i, int j);\n};\nTest t{0, 0}; //C++11 only\uff0c\u76f8\u5f53\u4e8e Test t(0,0);\nTest *pT = new Test{1, 2}; //C++11 only\uff0c\u76f8\u5f53\u4e8e Test* pT=new Test(1,2);\nint *a = new int[3]{1, 2, 0}; //C++11 only\n</code></pre></p> <p>Delegating Ctor</p>"},{"location":"OOP/oop9/","title":"Overloaded operators","text":"<p>\u53ef\u4ee5\u8ba9\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u50cf\u539f\u751f\u7c7b\u578b\u4e00\u6837\u5177\u6709\u8fd0\u7b97\u7684\u80fd\u529b\u3002</p> <ul> <li>Allows user-defined types to act like built in types.</li> <li>Another way of function call</li> </ul> <p>\u53ef\u4ee5\u88ab\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26</p> <p>\u4e0d\u80fd\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26 <code>.</code> <code>.*</code> <code>::</code> <code>?:</code> <code>sizeof</code> <code>typeid</code> <code>static_cast</code> <code>dynamic_cast</code> <code>const_cast</code> <code>reinterpret_cast</code> </p> <p><code>a+b</code> \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <code>a</code> \u7684\u7c7b\u578b (receiver) \u6765\u51b3\u5b9a\u6211\u4eec\u7684\u8fd0\u7b97\u7b26\uff0c\u4f46 <code>a&gt;b?a:b</code> \u6ca1\u6709 receiver. <code>typeid</code> \u83b7\u53d6\u7c7b\u7684\u65b9\u5f0f\u3002\u53ef\u4ee5\u7528 VPTR \u8868\u793a\uff08\u5982\u679c\u6709\u865a\u51fd\u6570\uff09  </p> <p>Restrictions</p> <ul> <li>Only existing operators can be overloaded. \u4e0d\u80fd\u91cd\u8f7d\u4e0d\u5b58\u5728\u7684\u8fd0\u7b97\u7b26\uff0c\u5982 Python \u7684 <code>**</code> \u4f46\u91cd\u8f7d\u65f6\u53ef\u4ee5\u6beb\u65e0\u987e\u5fcc\u8fd0\u7b97\u7b26\u539f\u6765\u7684\u8bed\u4e49\uff08\u5982\u91cd\u8f7d <code>+</code>, \u4f46\u5b9e\u9645\u4e0a\u662f\u505a\u51cf\u6cd5\uff09  </li> <li>Operators must be overloaded on a class or enumeration type  </li> <li>Overloaded operators must  <ul> <li>Preserve number of operands \u5982\u5bf9\u4e8e\u9664\u6cd5 <code>/</code>, \u5b83\u91cd\u8f7d\u65f6\u5fc5\u987b\u4e5f\u662f\u53cc\u76ee\u7684\u3002</li> <li>Preserve precedence \u4f18\u5148\u7ea7\u548c\u7ed3\u5408\u5f8b\u662f\u4e0d\u53d8\u7684</li> </ul> </li> </ul>"},{"location":"OOP/oop9/#c-overloaded-operator","title":"C++ overloaded operator","text":"<p>Just a function with an operator name. \u4f7f\u7528 <code>operator</code> \u5173\u952e\u5b57\u4f5c\u4e3a\u524d\u7f00\uff0c\u540e\u9762\u8ddf\u4e0a\u8fd0\u7b97\u7b26\u3002<code>operator *(...)</code> </p> <ul> <li>Can be a member function<ul> <li>Implicit first argument <code>const String String::operator + (const String &amp;that)</code></li> </ul> </li> <li>Can be a global(free) function  <ul> <li>Both arguments explicit \u8fd9\u4e24\u79cd\u5199\u6cd5\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u3002</li> </ul> </li> </ul>"},{"location":"OOP/oop9/#how-to-overload","title":"How to overload","text":"<ul> <li>As a member function  <ul> <li>Implicit first argument</li> <li>No type conversion performed on reveiver <pre><code>class A {\npublic:\nA(int ii):i(ii){}\nint get() {return i;}\n/* \u8fd4\u56de\u7684\u4e00\u5b9a\u662f A \u7684\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61 */\nconst A operator+(const A &amp;that) const {\nA c(this-&gt;i+that.i);        /* \u8fd9\u91cc\u53ef\u4ee5\u8bbf\u95ee that. \u79c1\u6709\u662f\u9488\u5bf9\u7c7b\u7684\uff0c\u4e0d\u662f\u9488\u5bf9\u5bf9\u8c61\u7684\u3002 */\nreturn c;\n}\nprivate:\nint i;\n}\nint main() {\nA a = 6;\nA b = 7;\nA c = a + b;    /* a + 9 \u4e5f\u662f\u53ef\u4ee5\u7684\uff1b\u4f46 9 + a \u4e0d\u884c */\ncout &lt;&lt; c.get() &lt;&lt; endl;    /* \u8f93\u51fa 13 */\n}\n</code></pre> \u8fd9\u91cc\u6211\u4eec\u4e0d\u5e0c\u671b\u8fd4\u56de\u7684\u5bf9\u8c61\u88ab\u4fee\u6539\uff0c\u5426\u5219\u53ef\u80fd\u51fa\u73b0 <code>(a+b) = a</code> \u7684\u60c5\u51b5\u3002 \u5982\u679c <code>c = a + 9</code> \u7f16\u8bd1\u5668\u4f1a\u7528 9 \u5e2e\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\u3002  </li> <li>\u4e8c\u5143\u8fd0\u7b97\u7b26\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u5143\u8fd0\u7b97\u7b26\u4e0d\u9700\u8981\u53c2\u6570\u3002 e.g. <code>-a, +a, *p, !a, ~b</code> </li> </ul> </li> <li>As a global function<ul> <li>Explicit first argument</li> <li>Developer does not need special access to classes</li> <li>May need to be a friend <pre><code>const A operator - (const A&amp;r, const A&amp;l)\n{\nA c(r.i-l.i);\nreturn c;\n}\n</code></pre> \u8fd9\u91cc\u5168\u5c40\u51fd\u6570\u662f\u4e0d\u80fd\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\u7684\u3002\u56e0\u6b64\u8981 <code>friend const A operator - (const A&amp;r, const A&amp;l)</code> \u58f0\u660e\u53cb\u5143\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u5199 <code>A c = 9-b;</code> \u4f46 <code>A c = 9-7;</code> \u4e0d\u4f1a\u91cd\u8f7d\u3002</li> </ul> </li> </ul> <p>Members vs. Free Functions</p> <ul> <li>Unary operators should be members.</li> <li>assignment <code>= () [] -&gt; -&gt;*</code> must be memebers;</li> <li>All other binary operators as non-members.</li> </ul>"},{"location":"OOP/oop9/#argument-passing","title":"Argument Passing","text":"<ul> <li>if it is read-only pass it in as a const reference (except built-ins) </li> <li>make member functions const that don't change the class (boolean operators, +, -, etc) </li> <li>for global functions, if the left-hand side changes pass as a reference (assignment operators)</li> <li>Select the return type depending on the expected meaning of the operator. \u5982\u52a0\u51cf\u4e58\u9664\u53ea\u80fd\u4f5c\u4e3a\u53f3\u503c\uff0c\u56e0\u6b64\u8981 const. \u800c <code>[]</code> \u53ef\u4ee5\u4f5c\u4e3a\u5de6\u503c\uff0c\u5c31\u4e0d\u80fd const.    </li> </ul> <p>The prototypes of operator</p> <ul> <li><code>+ - * / % ^ &amp; | ~</code> <code>const T operator X(const T&amp;l, const T&amp;r);</code>  \u8fd9\u91cc\u8fd4\u56de\u7684\u5fc5\u987b\u662f\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u3002\u5982\u679c\u8fd9\u91cc\u8fd4\u56de\u5f15\u7528\uff0c\u90a3\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5168\u5c40\u7684\u5730\u5740\uff0c\u4f46\u51fd\u6570\u53ea\u6709\u672c\u5730\u7a7a\u95f4\u3002</li> <li><code>! &amp;&amp; || &lt; &lt;= == &gt;= &gt;</code> <code>bool operator X(const T&amp;l, const T&amp;r);</code> </li> <li><code>[]</code> \u8fd4\u56de\u7684\u662f\u5de6\u503c\uff08\u4e0d\u80fd\u4e3a const\uff09\uff0c\u800c\u4e14\u4e0d\u80fd\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff08\u5426\u5219 <code>a[6]=7</code> \u6267\u884c\u540e\u5c31\u88ab\u4e22\u6389\u4e86\uff09 <code>E&amp; T::operator[](int index);</code> </li> </ul> <p><pre><code>class Integer { public: ... const Integer&amp; operator++(); //prefix++ \nconst Integer operator++(int); //postfix++ \nconst Integer&amp; operator--(); //prefix-- \nconst Integer operator--(int); //postfix-- \n... };\n// \nconst Integer&amp; Integer::operator++() { *this += 1; // increment \nreturn *this; // fetch \n} // int argument not used so leave unnamed so \n// won't get compiler warnings \nconst Integer Integer::operator++( int ){ Integer old( *this ); // fetch \n++(*this); // increment \u8c03\u7528\u4e86\u521a\u521a\u7684\u51fd\u6570\nreturn old; // return \n</code></pre> \u7b2c\u4e00\u4e2a\u662f\u524d\u7f00 <code>++a</code>, \u7b2c\u4e8c\u4e2a\u662f\u540e\u7f00 <code>a++</code>. \u8981 overload <code>+=</code> \u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199 <code>i++</code> \u540e\u8fd4\u56de <code>*this</code>, \u8282\u7701\u5f00\u9500\uff0c\u4e0d\u7528\u65b0\u5efa\u5bf9\u8c61\u3002 <pre><code>++x; // calls x.operator++(); \nx++; // calls x.operator++(0); \n--x; // calls x.operator--(); \nx--; // calls x.operator--(0); \n</code></pre></p> <p>Relational operators <pre><code>class Integer { public: ... bool operator==( const Integer&amp; rhs ) const; bool operator!=( const Integer&amp; rhs ) const; bool operator&lt;( const Integer&amp; rhs ) const; bool operator&gt;( const Integer&amp; rhs ) const; bool operator&lt;=( const Integer&amp; rhs ) const; bool operator&gt;=( const Integer&amp; rhs ) const; }\nbool Integer::operator==( const Integer&amp; rhs ) const { return i == rhs.i; } // implement lhs != rhs in terms of !(lhs == rhs) \nbool Integer::operator!=( const Integer&amp; rhs ) const { return !(*this == rhs); } bool Integer::operator&lt;( const Integer&amp; rhs ) const { return i &lt; rhs.i; }\n// implement lhs &gt; rhs in terms of lhs &lt; rhs \nbool Integer::operator&gt;( const Integer&amp; rhs ) const { return rhs &lt; *this; } // implement lhs &lt;= rhs in terms of !(rhs &lt; lhs) \nbool Integer::operator&lt;=( const Integer&amp; rhs ) const { return !(rhs &lt; *this); } // implement lhs &gt;= rhs in terms of !(lhs &lt; rhs) \nbool Integer::operator&gt;=( const Integer&amp; rhs ) const { return !(*this &lt; rhs); }\n</code></pre></p> <p>Operator <code>[]</code> \u8ba4\u4e3a\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2a\u5bb9\u5668 <pre><code>class A {\nint&amp; operator [] (int idx)\n{\nreturn buf[index];\n}\nprivate:\nint size;\nint *buf;\n}\n</code></pre></p> <p>stream extractor/inserter <pre><code>ostream &amp;operator &lt;&lt;(ostream &amp;, const A &amp;a)\n{\ncout &lt;&lt; a.size() &lt;&lt; endl;\nreturn os;\n}\n</code></pre> \u8fd9\u91cc <code>ostream</code> \u4e0d\u80fd\u662f const, \u56e0\u4e3a\u5f80\u91cc\u9762\u8f93\u51fa\u4f1a\u4fee\u6539 <code>cout</code> \u5185\u90e8\u3002 <code>cout &lt;&lt; a &lt;&lt; 5;</code> \u8fd9\u91cc\u5b9e\u9645\u4e0a\u662f\u5148\u6267\u884c <code>cout &lt;&lt; a;</code> \u518d\u6267\u884c <code>(cout &lt;&lt; a) &lt;&lt; 5</code>. \u56e0\u6b64\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u662f <code>ostream</code>. \u8fd9\u91cc\u4e5f\u8981\u58f0\u660e\u53cb\u5143\u3002 <pre><code>istream&amp; operator&gt;&gt;(istream&amp; is, T&amp; obj) {   // \u8fd9\u91cc\u6ca1\u6709 const, \u56e0\u4e3a\u8981\u5f80\u91cc\u5199\u5165\n// specific code to read obj \nreturn is; } </code></pre></p> <p>You can define your own manipulators. <pre><code>ostream&amp; manip(ostream&amp; out) { ... return out; } ostream&amp; tab ( ostream&amp; out ) { return out &lt;&lt; '\\t'; } cout &lt;&lt; \"Hello\" &lt;&lt; tab &lt;&lt; \"World!\" &lt;&lt; endl;\n</code></pre></p>"},{"location":"OOP/oop9/#copying-vs-initialization","title":"Copying vs. Initialization","text":"<ul> <li>Assignment Operator <ul> <li>Must be a member function \u5fc5\u987b\u662f\u6210\u5458\u51fd\u6570</li> <li>Will be generated for you if you don't provide one    \u2013Same behavior as automatic copy ctor -- memberwise assignment</li> <li>Check for assignment to self \u62f7\u8d1d\u6784\u9020\u4e4b\u524d\uff0c\u5185\u5b58\u7684\u6307\u9488 <code>p</code> \u662f\u6ca1\u6709\u503c\u7684\uff0c\u4f46\u662f\u8d4b\u503c\u7684\u65f6\u5019 <code>p</code> \u662f\u6709\u503c\u7684\u3002\u6240\u4ee5\u9700\u8981\u5148 <code>delete p</code> \u518d <code>new</code>.  \u4f46\u5982\u679c\u662f\u81ea\u5df1\u8d4b\u503c\u7ed9\u81ea\u5df1\uff0c\u6e90\u64cd\u4f5c\u7684\u5185\u5b58\u5df2\u7ecf\u88ab <code>delete</code> \u6389\u4e86\u3002 </li> <li>Be sure to assign to all data members</li> <li>Return a reference to <code>*this</code></li> </ul> </li> </ul>"},{"location":"OOP/oop9/#type-conversion","title":"Type Conversion","text":"<p>User-defined Type conversions <code>(int)3.5</code> \u5355\u76ee\u7684\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u91cd\u8f7d <pre><code>class PathName {\nstring name;\npublic:\n// or could be multi-argument with defaults\nPathName(const string&amp;);\n~ PathName();\n};\n...\nstring abc(\"abc\");\nPathName xyz(abc); // OK!\nxyz = abc; // OK abc =&gt; PathName\n</code></pre> \u8fd9\u91cc\u6211\u4eec\u4f1a\u5148\u5229\u7528 <code>abc</code> \u6784\u9020\u4e00\u4e2a PathName \u7684\u5bf9\u8c61\uff0c\u968f\u540e\u8d4b\u503c\u7ed9 xyz. \u4ee5\u5176\u4ed6\u53d8\u91cf\u4e3a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u505a\u8d4b\u503c\u3002 \u6211\u4eec\u5728\u6784\u9020\u51fd\u6570\u524d\u9762\u52a0\u4e0a <code>explicit</code> \u5173\u952e\u5b57\uff0c\u5373 <code>explicit PathName(const string&amp;);</code> \u5373\u6211\u4eec\u7684\u6784\u9020\u51fd\u6570\u53ea\u80fd\u7528\u6765\u505a\u6784\u9020\uff0c\u4e0d\u80fd\u628a <code>string</code> \u5bf9\u8c61\u8d4b\u503c\u7ed9 <code>PathName</code>. \u8fd9\u6837\u7f16\u8bd1\u65f6\u5c31\u4f1a\u51fa\u9519\u3002 </p> <p>Conversion operations   </p> <ul> <li>Operator name is any type descriptor</li> <li>No explicit arguments</li> <li>No return type</li> <li>Compiler will use it as a type conversion from \\(X \\Rightarrow T\\)</li> </ul> <pre><code>class Rational {\npublic:\n...\noperator double() const; // Rational to double\n}\nRational::operator double() const { return numerator_/(double)denominator_;\n}\nRational r(1,3); double d = r; // r=&gt;double\n</code></pre> <p>\u4e0d\u9700\u8981\u5199\u8fd4\u56de\u7c7b\u578b\u3002  \u5982\u679c\u6211\u4eec\u5728\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u524d\u9762\u52a0\u4e0a <code>explicit</code>, \u90a3\u4e48\u6211\u4eec\u5c31\u5fc5\u987b\u5199\u4f5c <code>double d = (double)r;</code> </p> <p>\u60f3\u5c06 T \u8f6c\u5316\u4e3a C, \u90a3\u4e48\u9700\u8981\u4e00\u4e2a <code>C(T)</code> \u7684\u4e0d\u52a0 <code>explicit</code>\u7684\u6784\u9020\u51fd\u6570\uff0c\u6216\u8005 <code>operator C()</code> \u7684\u91cd\u8f7d\u3002\u5982\u679c\u4e24\u4e2a\u90fd\u6709\uff0c\u7f16\u8bd1\u5668\u4f1a\u51fa\u9519\u3002</p> <p>Use explicit conversion functions. </p>"},{"location":"OS/","title":"\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u5b9e\u8df5","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u64cd\u4f5c\u7cfb\u7edf\u539f\u7406\u4e0e\u5b9e\u8df5\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0  </p> <ul> <li>\u8001\u5e08: \u7533\u6587\u535a</li> <li>\u52a9\u6559: Xingkai Wang, Ruorong Guo, Zichen Zhao, Ganhao Chen</li> </ul>"},{"location":"OS/chap01/","title":"OS Structures","text":"Abstract <ul> <li>Operating System Services</li> <li>User and Operating System-Interface</li> <li>System Calls</li> <li>System Services</li> <li>Linkers and Loaders</li> <li>Why Applications are Operating System Specific</li> <li>Operating-System Design and Implementation</li> <li>Operating System Structure</li> <li>Building and Booting an Operating System</li> <li>Operating System Debugging</li> </ul>"},{"location":"OS/chap01/#operating-system-services","title":"Operating System Services","text":"<p>A View of Operating System Services</p> <p>\u7ea2\u8272\u90e8\u5206\u662f helpful to user, \u84dd\u8272\u90e8\u5206\u662f better efficiency/operation. </p> <p>User Operating System Interface</p> <ul> <li>CLI Comand Line Interface<ul> <li>shells</li> </ul> </li> <li>GUI User-friendly desktop metaphor interface</li> </ul>"},{"location":"OS/chap01/#system-calls","title":"System Calls","text":"<p>Programming interface to the services provided by the OS \u7528\u6237\u7a7a\u95f4\u8fdb\u5165\u5185\u6838\u7684\u63a5\u53e3 interface.  </p> <p>\u4e00\u822c\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\uff0c\u79f0\u4e3a API(Application Programming Interface) e.g. Win32 API, POSIX API(for Unix, Linux, Mac OSX), Java API(for JVM)</p>"},{"location":"OS/chap01/#example-of-system-call-write","title":"Example of System Call - <code>write</code>","text":"<p><code>unist</code>: Unix Standard <code>printf</code> \u662f <code>write</code> (system call) \u7684\u4e00\u4e2a wrapper\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <code>man 2 write</code> \u67e5\u770b\u7cfb\u7edf\u8c03\u7528\u7684\u7528\u6cd5\uff082 \u8868\u793a\u67e5\u8be2\u7cfb\u7edf\u8c03\u7528\uff09 <pre><code>ssize_t write(int fd, const void *buf, size_t count);\n</code></pre></p> <ul> <li><code>fd=1</code> \u8868\u793a\u6807\u51c6\u8f93\u51fa\u3002</li> <li><code>buf</code> \u662f\u8981\u8f93\u51fa\u7684\u5185\u5bb9\uff0c\u6307\u5411 <code>hello world\\n</code> \u8fd9\u4e2a\u5b57\u7b26\u4e32\u9996\u5730\u5740\u3002</li> <li><code>count=13</code> \u662f\u8981\u8f93\u51fa\u7684\u5b57\u8282\u6570\uff08\u5305\u542b\u4e86 <code>\\n</code>\uff09</li> </ul> <p>\u53ef\u4ee5\u770b\u5230\uff0c<code>write</code> \u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a 1\u3002  </p> <p><code>objdump -d</code> \u7ffb\u8bd1\u6210\u6c47\u7f16\u53ef\u4ee5\u770b\u5230\uff0c<code>main</code> \u91cc\u4f1a\u8c03\u7528 <code>__libc_write</code>\u3002</p> <p>\u5728 <code>__libc_write</code> \u91cc\u4f1a\u5c06 1\uff08\u7cfb\u7edf\u8c03\u7528\u53f7\uff09\u632a\u5230\u5bc4\u5b58\u5668 <code>%eax</code> \u91cc\u968f\u540e\u8c03\u7528\u4e86 <code>syscall</code> \u6307\u4ee4\uff0c\u8df3\u5230 kernel space\uff0c\u5e76\u4e14\u5207\u6362 mode\u3002  </p> <p>\u5728 kernel \u7a7a\u95f4\uff0c</p> <ul> <li>\u8c03\u7528 <code>kernel_entry</code> \u6765\u4fdd\u62a4\u5bc4\u5b58\u5668\u3002</li> <li>\u4ece syscall_table \u91cc\u62ff\u5230\u51fd\u6570\u6307\u9488\uff0c\u8df3\u5230 <code>write</code> \u7684\u5904\u7406\u7a0b\u5e8f\u3002<ul> <li>syscall_table \u662f\u4e00\u4e2a array\uff0c\u7cfb\u7edf\u8c03\u7528\u53f7\u4f5c\u4e3a index\uff0c\u901a\u8fc7 index \u53d6\u5bf9\u5e94\u7cfb\u7edf\u8c03\u7528\u7684\u51fd\u6570\u6307\u9488\u3002</li> </ul> </li> <li>\u5199\u5b8c\u540e\u8c03\u7528 <code>ret_to_user</code>\u3002<ul> <li>\u6062\u590d\u5bc4\u5b58\u5668</li> <li>\u8fd4\u56de\u5230 user\u3002</li> </ul> </li> </ul> <p>The caller need know nothing about how the system call is implemented. \u7528\u6237\u4e0d\u9700\u8981\u77e5\u9053\u7cfb\u7edf\u8c03\u7528\u5177\u4f53\u5b9e\u73b0\uff0cOS \u5df2\u7ecf\u5b9e\u73b0\u597d\u4e86\u3002</p> <p>The Hidden Syscall Table</p> <p>ARM64 \u67b6\u6784\u7684 <code>sys.c</code>:  </p> <p>\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u901a\u8fc7 C \u9884\u5904\u7406\u5f97\u5230\u5b8f\u5c55\u5f00\u7684\u6587\u4ef6\uff1a </p> <p><code>make</code> <code>.i</code> \u6587\u4ef6\u53ef\u4ee5\u5f97\u5230\u9884\u5904\u7406\u540e\u7684\u6587\u4ef6\u3002</p> <code>write</code> <p>\u5176\u5b9e <code>write</code> \u4e5f\u662f\u4e00\u4e2a wrapper\uff0c\u80cc\u540e\u6545\u4e8b\u53ef\u89c1\uff1a</p> <ul> <li>http://osteras.info/personal/2013/10/11/hello-world-analysis.html</li> <li>https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/notcancel.h.html#__write_nocancel</li> <li>https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/write_nocancel.c.html#__write_nocancel</li> </ul>"},{"location":"OS/chap01/#system-calls_1","title":"System Calls","text":"<p><code>strace</code></p> <p>On Linux there is a \u201ccommand\u201d called <code>strace</code> that gives details about which system calls were placed by a program during execution. <code>strace</code>: system call trace. e.g. <code>strace cp main.c main</code> \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u8c03\u7528 <code>cp main.c main</code> \u65f6\uff0c\u8c03\u7528\u4e86\u54ea\u4e9b\u7cfb\u7edf\u8c03\u7528\u3002 \u53ef\u4ee5\u7528 <code>strace</code> \u77e5\u9053\u6211\u4eec\u7684\u7a0b\u5e8f\u8c03\u7528\u4e86\u4ec0\u4e48\u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\u51fa\u95ee\u9898\u3002</p> <p><code>time</code></p> <p><code>time</code> \u53ef\u4ee5\u8f93\u51fa real, user, sys \u7684\u65f6\u95f4\u3002\uff08real \u8868\u793a\u65f6\u949f\u7684\u65f6\u95f4\uff09 \u6709\u65f6 user \u548c sys \u662f\u591a\u8fdb\u7a0b\u540c\u65f6\u8fdb\u884c\uff0c\u6240\u4ee5\u52a0\u8d77\u6765\u7684\u65f6\u95f4\u6bd4\u65f6\u949f\u7684\u65f6\u95f4\u957f\u3002</p>"},{"location":"OS/chap01/#system-call-parameter-passing","title":"System Call Parameter Passing","text":"<p>\u4f20\u53c2\uff0c\u5982\u679c\u53c2\u6570\u5c0f\uff0c\u76f4\u63a5\u653e\u5728\u5bc4\u5b58\u5668\u91cc\uff1b\u5426\u5219\u53ef\u4ee5\u628a\u5730\u5740\u653e\u5728\u5bc4\u5b58\u5668\u91cc\uff0c\u901a\u8fc7\u5730\u5740\u8bbf\u95ee\u3002</p>"},{"location":"OS/chap01/#types-of-system-calls","title":"Types of System Calls","text":"<ul> <li>Process control create process, terminate process; end, abort; </li> <li>File management</li> <li>Device management</li> <li>Information maintenance</li> <li>Communications</li> <li>Protection</li> </ul>"},{"location":"OS/chap01/#linkers-and-loaders","title":"Linkers and Loaders","text":"<p>\u4ece <code>.c</code> \u6587\u4ef6\u5230 <code>.o</code> \u6587\u4ef6\u7ecf\u8fc7\u4e86\u4e0b\u9762\u7684\u6d41\u7a0b\uff1a</p> <ul> <li>\u9884\u5904\u7406 <code>cpp main.c -o main.i</code></li> <li>\u7f16\u8bd1 <code>gcc -S main.i -o main.s</code></li> <li>\u6c47\u7f16 <code>as main.s -i main.o</code> </li> </ul> <p>\u600e\u4e48\u751f\u6210 main\uff1f\u5982\u4f55\u628a main \u52a0\u8f7d\u5230\u5185\u5b58\u91cc\u6267\u884c\uff1f</p> <p>Linker combines these into single binary executable file. Loader loads executable file into memory and starts execution.</p>"},{"location":"OS/chap01/#elf-binary-basics","title":"ELF binary basics","text":"<ul> <li>Executable and Linkable Format - ELF</li> <li>Section header &amp; Program header \u4e00\u4e2a\u7ed9 Linker \u7528\uff0c\u4e00\u4e2a\u7ed9 Loader \u7528\u3002</li> <li><code>.text</code>: code</li> <li><code>.rodata</code>: initialized read-only data</li> <li><code>.data</code>: initialized data</li> <li><code>.bss</code>: uninitialized data</li> </ul> <p><code>readelf</code></p> <p>static variables \u5728 <code>.data</code> \u6bb5\uff0cstatic const \u5728 <code>.rodata</code> \u6bb5\uff0cconst \u5728 <code>.data</code> \u6bb5\u3002 </p> <p>\u5b58\u6709\u6bcf\u4e2a\u6bb5\u7684\u8d77\u59cb\u5730\u5740\uff0c\u5927\u5c0f\uff0c\u6743\u9650\u7b49\u4fe1\u606f\u3002</p>"},{"location":"OS/chap01/#linking","title":"Linking","text":"<p>Linking \u5206\u4e3a static \u548c dynamic </p> <ul> <li>Static linking: All needed code is packed in single binary, leading to large binary  <ul> <li>\u628a\u6240\u6709\u7684\u4ee3\u7801\u90fd\u653e\u5230\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5927\u3002  </li> <li>\u6ca1\u6709 <code>.interp</code> \u6bb5</li> </ul> </li> <li>Dynamic linking: Reuse libraries to reduce ELF file size  <ul> <li>\u4ee3\u7801\u5206\u6563\u5728\u591a\u4e2a\u6587\u4ef6\uff0c\u8fd0\u884c\u65f6\u518d\u52a0\u8f7d\uff0c\u5c0f\u3002  </li> <li>\u6709 <code>.interp</code> \u6bb5\uff0c\u5b58\u7684\u662f loader\u3002</li> </ul> </li> </ul>"},{"location":"OS/chap01/#running-a-binary","title":"Running a binary","text":"<p>\u8fd0\u884c\u65f6\u7684\u5185\u5b58\u5e03\u5c40\uff1a</p> <p>ELF section \u88ab\u6620\u5c04\u5230\u5185\u5b58\u91cc\u9762\u7684\u4e0d\u540c segment\u3002 \u6ce8\u610f\u533a\u5206\u5806\u548c\u6808\uff0c\u5206\u914d\u6570\u636e\u65f6 stack \u5feb\uff0cheap \u6162\u3002</p> <ul> <li>who setup ELF files mapping?<ul> <li>Kernel</li> <li>exec syscall</li> </ul> </li> <li>who setup stack and heap?<ul> <li>Kernel</li> <li>exec syscall</li> </ul> </li> <li>who setups libraries?<ul> <li>Loader</li> <li>ld-xxx</li> </ul> </li> </ul> <ul> <li>text: r-xp </li> <li>r--p: rodatas</li> <li>rw-p: data</li> <li>.bss: uninitialized variables. \u7ed9\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u4e0d\u7ed9\u503c\uff0c\u65e9\u671f\u7f16\u8bd1\u5668\u8bb0\u5f55\u5b83\u5728 <code>.bss</code> \u6bb5\u91cc\uff0c\u4f46\u6ca1\u6709\u5b9e\u9645\u7a7a\u95f4\uff0c\u6620\u5c04\u5230\u5185\u5b58\u65f6\u5c31\u521d\u59cb\u5316\u4e3a 0\u3002</li> <li>heap/stack \u533f\u540d\u6620\u5c04\uff0c\u6ca1\u6709\u4e00\u4e2a\u6587\u4ef6\u652f\u6301\u3002\u6620\u5c04\u4e3a\u53ef\u8bfb\u53ef\u5199\u3002</li> </ul>"},{"location":"OS/chap01/#running-a-binary-statically-linked","title":"Running a binary (Statically-linked)","text":"<p>\u9996\u5148\u6211\u4eec\u901a\u8fc7 <code>strace</code> \u67e5\u770b\u8fd0\u884c\u9759\u6001\u94fe\u63a5\u6587\u4ef6\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u7cfb\u7edf\u8c03\u7528\u3002</p> <ul> <li><code>execve</code> \u6267\u884c\u5bf9\u5e94\u8def\u5f84\u7684\u6587\u4ef6</li> <li><code>brk</code> \u6269\u5145\u6808</li> <li><code>write</code> \u6267\u884c\u7a0b\u5e8f\u91cc\u7684 <code>printf</code> \u529f\u80fd</li> </ul> <p>\u7cfb\u7edf\u5982\u4f55\u77e5\u9053\u6211\u4eec\u8981\u6267\u884c\u7684\u7a0b\u5e8f\u4ece\u54ea\u4e00\u884c\u5f00\u59cb\u6267\u884c\uff1f</p> <p>\u901a\u8fc7 entry point address! <code>sys_execve()</code> \u91cc\u6709 <code>load_elf_binary</code> \u51fd\u6570\uff0c\u4ece ELF \u5934\u8bfb\u5730\u5740\u5230 <code>elf_entry</code>\uff0c\u628a\u5730\u5740\u5f53\u4f5c <code>regs-&gt;pc</code>\u3002\u7136\u540e\u8c03\u7528 <code>start_thread</code> \u51fd\u6570\u3002</p> <p>ELF \u91cc\u6709 entry point address\uff08\u901a\u8fc7 <code>readelf -h</code>\uff09</p> <p>entry point address \u4e0d\u662f <code>main()</code> \u7684\u5730\u5740\uff0c\u800c\u662f <code>_start</code> \u7684\u5730\u5740\uff0c\u91cc\u9762\u4f1a\u8c03\u7528 <code>__libc_start_main</code> \u51fd\u6570\uff0c\u91cc\u9762\u624d\u8c03\u7528 <code>main()</code> \u51fd\u6570\u3002 <code>_start</code> \u662f\u5728\u8bfb\u53d6\u547d\u4ee4\u884c\u53c2\u6570\u5e76\u4e14\u4f20\u7ed9 <code>main</code>\u3002</p> <p><code>cat /proc/pid/maps</code> \u91cc\u53ef\u4ee5\u770b\u5230\u8fdb\u7a0b\u7684\u5185\u5b58\u6620\u5c04\u3002static \u7684\u6761\u76ee\u66f4\u5c11\uff0c\u56e0\u4e3a\u9700\u8981\u7684\u4e1c\u897f\u5df2\u7ecf\u6253\u5305\u5230 <code>a.static</code> \u5185\u4e86\uff0c\u4e0d\u9700\u8981\u5916\u90e8\u7684\u5e93\u3002\u800c dynamic \u9700\u8981\u5916\u90e8\u7684\u5e93\u3002</p> <p>Summary</p> <p></p>"},{"location":"OS/chap01/#running-a-binary-dynamically-linked","title":"Running a binary (Dynamically-linked)","text":"<p>\u76f8\u6bd4\u4e8e\u9759\u6001\u94fe\u63a5\uff0c\u52a8\u6001\u94fe\u63a5\uff1a</p> <ul> <li>\u9700\u8981\u4e00\u4e2a loader\u3002</li> <li>\u52a8\u6001\u94fe\u63a5\u7684\u5185\u5b58\u5e03\u5c40\u4e2d\u6761\u76ee\u66f4\u591a\u3002</li> <li>\u52a8\u6001\u94fe\u63a5\u7684\u7cfb\u7edf\u8c03\u7528\u6bd4\u9759\u6001\u7684\u591a\u3002</li> <li>\u52a8\u6001\u94fe\u63a5\u7684 entry point \u7684\u5730\u5740\u5f88\u5c0f\uff0c\u4e5f\u662f\u5bf9\u5e94 <code>_start</code> \u7684\u5730\u5740\uff0c\u91cc\u9762\u6709\u4e9b symbol \u8fd8\u6ca1\u6709\u88ab\u89e3\u6790\u3002</li> </ul> <p>\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u5148\u901a\u8fc7 <code>strace</code> \u67e5\u770b\u8fd0\u884c\u52a8\u6001\u94fe\u63a5\u6587\u4ef6\u4e2d\u4f7f\u7528\u4e86\u54ea\u4e9b\u7cfb\u7edf\u8c03\u7528\u3002 \u53ef\u4ee5\u770b\u5230\u76f8\u6bd4\u4e8e\u9759\u6001\u94fe\u63a5\uff0c\u591a\u51fa\u6765\u7684\u7cfb\u7edf\u90fd\u7528\u90fd\u548c ld \u6709\u5173\uff0c\u5373 dynamic loader\u3002  </p> <p>\u52a8\u6001\u94fe\u63a5\u6709 <code>.interp</code> \u6bb5\uff0c\u5728 <code>load_elf_binary</code> \u51fd\u6570\u4e2d\u4f1a\u8d70\u53e6\u4e00\u4e2a\u5206\u652f\uff1aentry point \u4f1a\u6307\u5411 loader \u7684\u5730\u5740\u3002</p> <p>Summary</p> <p></p> <p>\u591a\u51fa\u6765\u7684\u7cfb\u7edf\u8c03\u7528\u662f\u4e3a\u4e86\u5148\u628a loader \u52a0\u8f7d\u8fdb\u6765\uff0cloader \u518d\u628a libc \u52a0\u8f7d\u3002 \u5185\u5b58\u5e03\u5c40\u91cc\u591a\u6620\u5c04\u7684\u6761\u76ee\u4e5f\u662f\u4e3a\u4e86\u7ed9 loader \u4f7f\u7528\u3002</p>"},{"location":"OS/chap01/#why-applications-are-operating-system-specific","title":"Why Applications are Operating System Specific","text":"<ul> <li>\u5f00\u53d1\u7684\u8f6f\u4ef6\u4e0d\u80fd\u76f4\u63a5\u8de8\u5e73\u53f0\u8c03\u7528\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u540c\u5bfc\u81f4\u7cfb\u7edf\u8c03\u7528\u4e0d\u540c\uff0c\u4e0b\u9762\u7684\u786c\u4ef6\u4e5f\u4e0d\u540c\u3002  <ul> <li>\u50cf Java \u5f00\u53d1\u7684\u8f6f\u4ef6\u53ef\u4ee5\uff0c\u56e0\u4e3a\u6709 JVM \u63d0\u4f9b\u4e86\u8de8\u7cfb\u7edf\u7684\u5e73\u53f0\u3002</li> </ul> </li> <li>Application Binary Interface (ABI) is architecture equivalent of API, defines how different components of binary code can interface for a given operating system on a given architecture, CPU, etc... Application Binary Interface (ABI) \u66f4\u8d34\u8fd1\u786c\u4ef6\u67b6\u6784</li> </ul>"},{"location":"OS/chap01/#operating-system-design-and-implementation","title":"Operating-System Design and Implementation","text":"<p>\u7b56\u7565 VS \u673a\u5236\uff1a</p> <ul> <li>Policy: What will be done?  </li> <li>Mechanism: How to do it?</li> </ul> <p>The separation of policy from mechanism. \u628a\u7b56\u7565\u548c\u673a\u5236\u5206\u5f00\u3002</p> The Door Example <p>\u6211\u4eec\u7684\u4e00\u4e2a\u7b56\u7565\uff1a\u53ea\u5141\u8bb8\u4e0a OS \u7684\u540c\u5b66\u8fdb\u5165\u66f9\u897f-201\u3002\u5bf9\u5e94\u7684\u5b9e\u73b0\uff08\u673a\u5236\uff09\u53ef\u4ee5\u662f\uff1a\u6211\u4eec\u505a\u4e00\u628a\u9501\uff0c\u7ed9 88 \u4e2a\u540c\u5b66\u90fd\u914d\u4e00\u628a\u3002\u4f46\u8fd9\u6837\u7684\u7b56\u7565\u5b58\u5728\u5f88\u591a\u88ab break \u7684\u53ef\u80fd\u3002\u53e6\u4e00\u4e2a\u673a\u5236\uff1a\u6bcf\u4e2a\u4eba\u51ed\u5b66\u751f\u5361/\u4eba\u8138\u8bc6\u522b\u8fdb\u5165\u3002</p>"},{"location":"OS/chap01/#implementation","title":"Implementation","text":"<p>\u5b8f\u5185\u6838\u91cc\u653e\u6709\u5f88\u591a driver\uff0c\u800c driver \u51fa\u95ee\u9898\uff0c\u76f4\u63a5\u5f71\u54cd\u5230 CPU \u7684 scheduler.    </p> <p>microkernel: Moves as much from the kernel into user space.  \u628a driver, file system... \u90fd\u653e\u5230 user space\uff0c\u53ea\u7559\u4e0b\u6700\u6838\u5fc3\u7684\u4e1c\u897f\u5728 kernel space.  </p> <ul> <li>benefits: <ul> <li>Easier to extend a microkernel</li> <li>Easier to port the operating system to new architectures</li> <li>More reliable (less code is running in kernel mode)</li> <li>More secure</li> </ul> </li> <li>detriments: <ul> <li>Performance overhead of user space to kernel space communication  </li> </ul> </li> </ul> <p>Many modern operating systems implement loadable kernel modules (LKMs).  </p> <p>Operating-System Debugging</p> <p>Kernighan\u2019s Law: \u201cDebugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.\u201d</p>"},{"location":"OS/chap02/","title":"Processes","text":"Abstract <ul> <li>Process Concept</li> <li>Process Control Block</li> <li>Process State<ul> <li>Process Creation</li> <li>Process Termination</li> <li>Process and Signal</li> </ul> </li> <li>Process Scheduling</li> </ul>"},{"location":"OS/chap02/#process-concept","title":"Process Concept","text":"<p>Process: a unit of resource allocation and protection  </p> <ul> <li>A process is a program in execution \u4e00\u4e2a\u5728\u6267\u884c\u7684\u7a0b\u5e8f\uff08ELF \u6587\u4ef6\uff09\uff0c\u8dd1\u8d77\u6765\u540e\u8981\u5206\u914d\u8d44\u6e90\uff08CPU\uff0c\u5185\u5b58\uff0cIO\uff09\uff0c\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u3002</li> <li>Multiple processes can be associated to the same program. \u4e00\u4e2a program \u53ef\u4ee5\u8fd0\u884c\u591a\u6b21\uff0c\u6bcf\u6b21\u8fd0\u884c\u90fd\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u3002</li> <li>A running system consists of multiple processes.  </li> <li>\u201cjob\u201d and \u201cprocess\u201d are used interchangeably in OS texts.  </li> </ul> <p>Process includes\uff08\u5176\u4e2d\u524d\u56db\u9879\u5728 ELF \u4e2d\uff0c\u5806\u548c\u6808\u662f\u8fd0\u884c\u65f6\u7684\u4fe1\u606f\u5728 ELF \u4e4b\u5916\uff09</p> <ul> <li>code (also called the text) initially stored on disk in an executable file</li> <li>data section global variables (<code>.bss</code> and <code>.data</code> in x86 assembly)</li> <li>program counter points to the next instruction to execute (i.e., an address in the code)</li> <li>content of the processor\u2019s registers</li> <li>a stack</li> <li>a heap</li> </ul> <p>Memory Layout of a C Program</p> <p></p> <ul> <li><code>int x;</code> unitialized data, </li> <li><code>int y = 15;</code> initialized data</li> <li>\u4e34\u65f6\u53d8\u91cf\u5728\u6808\u4e0a\uff0cmalloc \u5728\u5806\u4e0a\u3002</li> </ul>"},{"location":"OS/chap02/#the-stack","title":"The Stack","text":"<p>\u6bcf\u4e2a\u51fd\u6570\u8fd0\u884c\u65f6\u90fd\u4f1a\u5206\u914d\u6808\u7684\u4e00\u90e8\u5206\uff0c\u5373\u4e00\u4e2a\u6808\u5e27 stack frame. </p> Simple Runtime Stack <p></p> <p>\u5f15\u5165\u6808\u662f\u4e3a\u4e86\u89e3\u51b3\u51fd\u6570\u8c03\u7528\u7684\u95ee\u9898\u3002  </p> <p>Any function needs to have some \u201cstate\u201d so that it can run. </p> <ul> <li>Parameters passed to it by whatever function called it</li> <li>Local variables</li> <li>The address of the instruction that should be executed once the function returns: the return address</li> <li>The value that it will return</li> </ul> <p>\u6808\u4ece\u4e0a\uff08\u9ad8\u5730\u5740\uff09\u5f80\u4e0b\uff08\u4f4e\u5730\u5740\uff09\uff0c\u5806\u4ece\u4e0b\u5f80\u4e0a\u3002\u5982\u679c\u78b0\u9762\u5c31\u53d1\u751f\u4e86\u6ea2\u51fa\u3002</p> <p>Runtime Stack Growth</p> <p>\u5982\u679c\u6211\u4eec\u8fd0\u884c\u4e00\u4e2a\u7a0b\u5e8f\u4e24\u6b21\uff0c\u5185\u5b58\u5e03\u5c40\u4e0d\u4e00\u5b9a\u76f8\u540c\u3002 </p> <p>stack \u548c heap \u79f0\u4e3a\u52a8\u6001\u5185\u5b58\uff0c\u76f8\u5f53\u4e8e\u662f OS \u7ed9\u8fdb\u7a0b\u7684\u4e24\u5f20\u8349\u7a3f\u7eb8\uff0c\u7528\u591a\u5c11\u53d6\u51b3\u4e8e\u5f53\u524d\u7684\u6267\u884c\u72b6\u6001\u3002</p>"},{"location":"OS/chap02/#process-control-block-pcb","title":"Process Control Block (PCB)","text":"<p>Each process has and only has a PCB. Information associated with each process. \u63a7\u5236\u5757\uff0c\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a PCB. \u6574\u4e2a PCB \u5b58\u5728\u5185\u5b58\u91cc\u3002  </p> <ul> <li>Process state</li> <li>Program counter</li> <li>CPU registers</li> <li>CPU-scheduling information</li> <li>Memory-management information</li> <li>Accounting information</li> <li>I/O status information</li> </ul> <p>Represented by the C structure <code>task_struct</code>. </p> <p>\u6240\u6709\u7684 <code>task_struct</code> \u662f\u901a\u8fc7\u94fe\u8868\u4e32\u8d77\u6765\u7684\u3002</p>"},{"location":"OS/chap02/#process-state","title":"Process State","text":"<p>As a process executes, it changes state</p> <ul> <li>New: The process is being created</li> <li>Running: Instructions are being executed</li> <li>Waiting: The process is waiting for some events to occur</li> <li>Ready: The process is waiting to be assigned to a processor</li> <li>Terminated: The process has finished execution</li> </ul>"},{"location":"OS/chap02/#process-creation","title":"Process Creation","text":"<p>A process may create new processes, in which case it becomes a parent.</p> <p>Each process has a pid (process ID).  </p> <ul> <li> <p>ppid refers to the parent\u2019s pid</p> Process Tree <p></p> </li> <li> <p>The child may inherit/share some of the resources of its parent, or may have entirely new ones. \u5b50\u8fdb\u7a0b\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684\u8d44\u6e90\uff08\u5982\u6253\u5f00\u7684\u6587\u4ef6\uff09</p> </li> <li>A parent can also pass input to a child.  </li> <li>Upon creation of a child, the parent can either<ul> <li>continue execution, or</li> <li>wait for the child\u2019s completion</li> </ul> </li> <li>The child could be either<ul> <li>a clone of the parent (i.e., have a copy of the address space), or </li> <li>be an entirely new program</li> </ul> </li> </ul>"},{"location":"OS/chap02/#the-fork-system-call","title":"The <code>fork()</code> System Call","text":"<p><code>fork()</code> creates a new process.   The child is is a copy of the parent, but</p> <ul> <li>It has a different pid (and thus ppid)</li> <li>Its resource utilization (so far) is set to 0</li> <li><code>fork()</code> returns the child\u2019s pid to the parent, and 0 to the child. <code>fork</code> \u4f1a\u628a child \u7684 pid \u8fd4\u56de\u7ed9 parent\uff0c\u7ed9 child \u8fd4\u56de 0. (how to implement?)  </li> <li>Both processes continue execution after the call to <code>fork()</code></li> </ul> Example <p>What does the following code print? <pre><code>int a = 12;\nif (pid = fork()) { // PARENT\n// ask the OS to put me in waiting\nsleep(10);\nfprintf(stdout,\u201da = %d\\n\u201d,a);\nwhile (1);\n} else { // CHILD\na += 3;\nwhile (1);\n}\n</code></pre> The answer should be 12. <code>fork</code> \u4e4b\u540e\u53d8\u91cf\u7684\u503c\u76f8\u540c\uff0c\u4f46\u5e76\u4e0d\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u3002\uff08\u76f8\u5f53\u4e8e\u4e00\u4efd\u62f7\u8d1d\uff09  </p> Example <p>How many processes does this C program create? <pre><code>int main (int argc, char *arg[])\n{\nfork ();\nif (fork ()) {\nfork ();\n}\nfork (); }\n</code></pre> The answer should be 12.</p>"},{"location":"OS/chap02/#the-execve-system-call","title":"The <code>execve()</code> System Call","text":"<p><code>execve()</code> system call used after a <code>fork()</code> to replace the process\u2019 memory space with a new program. <code>execve()</code> \u4f1a\u628a\u4e4b\u524d\u7684\u8fdb\u7a0b\u8d44\u6e90\u5168\u90e8\u4e22\u6389\uff0c\u518d load \u65b0\u7684 binary\uff0c\u6620\u5c04\u65b0\u7684\u5185\u5b58\uff0c\u5206\u7684\u65b0\u7684\u5806\u548c\u6808\uff0c\u5e38\u63a5\u5728 <code>fork()</code> \u540e\u9762\u4f7f\u7528\u3002</p> <p>the pros and cons of <code>fork()</code></p> <ul> <li>Pros<ul> <li>\u7b80\u6d01\uff1a\u4e0d\u9700\u8981\u53c2\u6570</li> <li>\u5206\u5de5\uff1a<code>fork</code> \u642d\u8d77\u9aa8\u67b6\uff0c<code>exec</code> \u8d4b\u4e88\u7075\u9b42</li> <li>\u8054\u7cfb\uff1a\u4fdd\u6301\u8fdb\u7a0b\u4e0e\u8fdb\u7a0b\u4e4b\u95f4\u7684\u5173\u7cfb</li> </ul> </li> <li>Cons<ul> <li>\u590d\u6742\uff1a\u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528</li> <li>\u6027\u80fd\u5dee</li> <li>\u5b89\u5168\u95ee\u9898</li> </ul> </li> <li>Clone syscal: fork + exec</li> </ul>"},{"location":"OS/chap02/#process-terminations","title":"Process Terminations","text":"<p>A process terminates itself with the <code>exit()</code> system call. \u8c03\u7528 exit \u540e\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u91ca\u653e\u8d44\u6e90\u3002</p> <ul> <li>This call takes as argument an integer that is called the process\u2019s exit/return/error code.  </li> <li>All resources of a process are deallocated by the OS. <code>exit</code> \u7ec8\u6b62\u4e4b\u540e\u4f1a\u628a\u8d44\u6e90\u90fd\u91ca\u653e\u3002</li> <li>A process can cause the termination of another process.  <ul> <li>Using something called \u201csignals\u201d and the <code>kill()</code> system call</li> </ul> </li> <li>A parent can wait for a child to complete. <code>wait()</code> and <code>waitpid()</code></li> </ul>"},{"location":"OS/chap02/#processes-and-signals","title":"Processes and Signals","text":"<p>A process can receive signals. And each signal causes a default behavior in the process. e.g. \u5f53\u6211\u4eec\u60f3\u8981\u7ec8\u6b62\u4e00\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6572\u5165 <code>Ctrl+C</code>\uff0c\u8fd9\u76f8\u5f53\u4e8e\u5bf9\u5f53\u524d\u8fdb\u7a0b\u53d1\u9001\u4e86 <code>SIGINT</code> \u4fe1\u53f7\uff0c\u5c31\u4f1a\u7ec8\u6b62\u5f53\u524d\u8fdb\u7a0b\u3002</p> <p>Manipulating Signals</p> <ul> <li>The <code>signal()</code> system call allows a process to specify what action to do on a signal \u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u6709\u4e9b\u4fe1\u53f7\u7684\u5904\u7406\u7a0b\u5e8f\u3002</li> <li>Signals like <code>SIGKILL</code> and <code>SIGSTOP</code> cannot be ignored or handled by the user, for security reasons</li> </ul>"},{"location":"OS/chap02/#zombie","title":"Zombie","text":"<p>When a child process terminates</p> <ul> <li>Remains as a zombie in an \u201cundead\u201d state.  </li> <li>Until it is \u201creaped\u201d (garbage collected) by the OS. \u4e00\u4e2a\u8fdb\u7a0b\u7ed3\u675f\u4e86\uff0c\u4f46\u4f9d\u7136\u8fd8\u5728\u5360\u7528\u8d44\u6e90\u3002\uff08\u4ed6\u53ef\u4ee5\u91ca\u653e\u81ea\u5df1\u7684\u8d44\u6e90\uff0c\u9664\u4e86 PCB \u662f\u4e0d\u80fd\u7531\u81ea\u5df1\u91ca\u653e\u7684\uff09</li> </ul> <p>Get rid of zombies: When a child exits, a <code>SIGCHLD</code> signal is sent to the parent. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed9 <code>SIGCHILD</code> \u4fe1\u53f7\u52a0\u4e00\u4e2a handler\uff0c\u91cc\u9762\u8c03\u7528 <code>wait</code> \u6765\u56de\u6536\u8fdb\u7a0b\u3002</p>"},{"location":"OS/chap02/#orphans","title":"Orphans","text":"<p>An orphan process is one whose parent has died. \u5b50\u8fdb\u7a0b\u8fd8\u5728\u8fd0\u884c\u65f6\uff0c\u5b83\u7684\u7236\u8fdb\u7a0b\u7ec8\u6b62\u4e86\uff0c\u90a3\u4e48\u5b83\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u5b64\u513f\u8fdb\u7a0b\u3002</p> <p>pid 1 \u4f1a\u6536\u517b orphan\uff0c\u56e0\u6b64\u5b64\u513f\u8fdb\u7a0b\u4e0d\u4f1a\u6210\u4e3a zombie\u3002\uff08pid 1 \u8fdb\u7a0b\u4e00\u5b9a\u4f1a\u56de\u6536\u5b50\u8fdb\u7a0b\uff09</p> <p>\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a trick\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e0e\u5f53\u524d\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u5b8c\u5168\u65e0\u5173\u7684\u8fdb\u7a0b\uff1a\u5148 <code>fork()</code> \u4e00\u4e2a\u8fdb\u7a0b\uff0c\u968f\u540e\u6740\u6b7b\u81ea\u5df1\uff0c\u90a3\u4e48\u5f53\u524d\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\u5c31\u4f1a\u88ab pid 1 \u6536\u517b\uff0c\u5c31\u8131\u79bb\u4e86\u539f\u6765\u7684\u7236\u8fdb\u7a0b\u3002</p>"},{"location":"OS/chap02/#process-scheduling","title":"Process Scheduling","text":"<p>\u4e00\u4e2a CPU \u53ea\u80fd\u8fd0\u884c\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u6211\u4eec\u5e0c\u671b\u63d0\u9ad8\u4f7f\u7528\u6548\u7387\u3002\u8fdb\u7a0b\u5904\u4e8e Waiting \u72b6\u6001\u7684\u65f6\u5019 CPU \u5982\u679c\u8ddf\u7740\u7b49\u5f85\u662f\u5bf9\u8d44\u6e90\u7684\u6d6a\u8d39\u3002</p> <p>Process scheduler selects among ready processes for next execution on CPU core.  </p> <p>Maintains scheduling queues of processes: </p> <ul> <li>Ready queue - set of all processes residing in main memory, ready and waiting to execute. \u53ea\u6709\u4e00\u4e2a ready queue, ready queue \u4e0d\u4f1a\u7a7a\uff0c\u56e0\u4e3a IDLE \u8fdb\u7a0b\u4e00\u76f4\u5728\u91cc\u9762\u3002</li> <li>Wait queue - set of processes waiting for an event. \u5f88\u591a\u4e2a\u7b49\u5f85\u961f\u5217\uff0c\u4e00\u4e2a\u88ab\u7b49\u5f85\u7684\u4e8b\u4ef6\u5bf9\u5e94\u4e00\u4e2a\u7b49\u5f85\u961f\u5217\u3002\u5f53\u6211\u4eec\u8fd9\u4e2a\u4e8b\u4ef6\u5230\u6765\u4e4b\u65f6\uff0c\u6211\u4eec\u4ece\u4e8b\u4ef6\u5bf9\u5e94\u7684\u961f\u5217\u9009\u62e9\u4e00\u4e2a\u8fdb\u7a0b\u3002</li> <li>Processes migrate among the various queues.  </li> </ul> <p>Ready and Wait Queue</p> <p>\u5f53\u6211\u4eec\u60f3\u8981\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u65f6\uff0c\u76f4\u63a5\u901a\u8fc7\u53cc\u5411\u94fe\u8868\u63a5\u4e0a\u5373\u53ef\u3002\u901a\u8fc7\u504f\u79fb\u91cf\u627e\u5230\u5bf9\u5e94\u5730\u5740\uff0c\u5e76\u901a\u8fc7\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u5f97\u5230 <code>task_struct</code>\u3002 </p> <p>\u9996\u5148\u4ece ready queue \u4e2d\u62ff\u4e00\u4e2a\u8fdb\u7a0b\u53bb CPU\uff0c</p> <ul> <li>\u5982\u679c\u5230\u65f6\u95f4\u4e86\uff08\u8fc7\u4e86\u4e00\u4e2a\u65f6\u95f4\u7247\uff09\uff0c\u5c31\u76f4\u63a5\u628a\u81ea\u5df1\u653e\u5230 ready queue; </li> <li>\u5982\u679c\u8981\u7b49\u5f85 I/O \u4e8b\u4ef6\uff0c\u5c31\u628a\u81ea\u5df1\u653e\u8fdb wait queue\uff0c\u7b49\u5f85 I/O \u4e8b\u4ef6\u53d1\u751f\u540e\u518d\u628a\u81ea\u5df1\u5524\u9192\uff0c\u653e\u56de ready queue.</li> <li>\u521b\u5efa\u5b50\u8fdb\u7a0b\u4e4b\u540e\u5b50\u8fdb\u7a0b\u653e\u5230 ready queue \u4e2d\uff0c\u5982\u679c\u8c03\u7528\u4e86 <code>wait</code>\uff0c\u90a3\u4e48\u7236\u8fdb\u7a0b\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u540e\uff0c\u8fdb\u5165 ready queue.</li> </ul>"},{"location":"OS/chap02/#context-switch","title":"Context Switch","text":"<p>A context switch occurs when the CPU switches from one process to another.</p> <ul> <li>When CPU switches to another process, the system must save the state of the old process and load the saved state for the new process via a context switch. \u4e0a\u4e0b\u6587\u5207\u6362\u65f6\uff0c\u5b58\u50a8\u5f53\u524d\u8fdb\u7a0b\u7684\u72b6\u6001\uff0c\u5e76\u52a0\u8f7d\u76ee\u6807\u8fdb\u7a0b\u7684\u72b6\u6001\u3002</li> <li>Context of a process represented in the PCB state \u4e3b\u8981\u6307\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u9875\u8868...</li> <li>Context-switch time is overhead; the system does no useful work while switching.  \u4e0a\u4e0b\u6587\u5207\u6362\u4e0d\u505a\u6709\u610f\u4e49\u7684\u4e8b\u60c5\uff0c\u662f pure overhead. </li> </ul> <ul> <li><code>cpu_context</code> \u5728 <code>task_struct</code> \u4e2d\uff0c\u4e14\u6709\u4e00\u4e2a\u504f\u79fb\u91cf\u3002\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u5148 load \u8fd9\u4e2a\u504f\u79fb\u91cf\u5230\u5bc4\u5b58\u5668 <code>x10</code>\u3002</li> <li><code>x8</code> \u6307\u5411\u8981\u88ab\u6362\u51fa\u53bb\u7684\u8fdb\u7a0b\u7684 <code>task_struct</code>, \u968f\u540e\u6211\u4eec\u5c06\u8981\u5b58\u7684\u5bc4\u5b58\u5668\u5b58\u5165 <code>task_struct</code> \u4e2d\u3002</li> <li>\u968f\u540e <code>x8</code> \u6307\u5411\u8981\u88ab\u6362\u8fdb\u6765\u7684\u8fdb\u7a0b\u7684 <code>task_struct</code>, \u968f\u540e\u6211\u4eec\u5c06\u8981\u53d6\u7684\u5bc4\u5b58\u5668\u4ece <code>task_struct</code> \u4e2d\u53d6\u51fa\u3002</li> </ul> <p>\u4e3a\u4ec0\u4e48 switch \u4e2d\u53ea\u4fdd\u5b58\u90e8\u5206\u5bc4\u5b58\u5668\uff1f</p> <p>\u6211\u4eec\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\u4f1a\u8c03\u7528 <code>cpu_switch_to</code> \u51fd\u6570\u3002\u5176\u4ed6\u5bc4\u5b58\u5668\u5728 arm \u67b6\u6784\u4e2d\u5c5e\u4e8e caller-saved registers\uff0c\u56e0\u6b64\u4e0d\u7528\u5728 <code>cpu_switch_to</code> \u4e2d\u4fdd\u5b58\uff0c<code>cpu_switch_to</code> \u4e2d\u5b58\u7684\u662f callee-saved registers. </p> <p>\u4e00\u4e2a\u8fdb\u7a0b\u5728\u5185\u6838\u4e2d\u8fd0\u884c\u65f6\u91cd\u8981\u7684 data structures: </p> <ul> <li> <p>\u5185\u6838\u6808\u4f4e\u5730\u5740\u5904\u6709 <code>thread_info</code>, \u6307\u5411 <code>task_struct</code>, \u5185\u6709 <code>cpu_context</code>.</p> <p>\u6ce8\u610f\u5230 <code>task_struct</code> \u5e76\u4e0d\u5728\u6808\u4e0a\uff0c\u53ea\u662f\u6709\u6307\u9488\u6307\u5411\u4ed6\u3002\uff08\u56e0\u4e3a <code>task_struct</code> \u592a\u5927\u4e86\uff0c\u56e0\u6b64\u653e\u4e86\u4e2a\u6307\u9488\u3002\u540e\u6765\u5927\u5bb6\u8ba4\u4e3a\u6808\u4f4d\u7f6e\u66b4\u9732\u540e\u5c31\u80fd\u627e\u5230 <code>task_struct</code> \u7684\u5730\u5740\uff0c\u56e0\u6b64\u540e\u6765\u6307\u9488\u4e5f\u6ca1\u4e86\uff09</p> </li> <li> <p>\u5185\u6838\u6808\u9ad8\u5730\u5740\u5904\u6709 <code>pt_regs</code>, \u4fdd\u5b58\u4e86\u5bc4\u5b58\u5668\u7684\u503c\u3002\uff08\u4e0d\u662f <code>cpu_context</code> \u4e2d\u7684\u5bc4\u5b58\u5668\uff09 \u4ece\u7528\u6237\u7a7a\u95f4\u5230\u5185\u6838\u7a7a\u95f4\u65f6\uff0c\u4e5f\u4f1a\u6709\u4e00\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u8fd9\u65f6\u5019\u4f1a\u4fdd\u5b58\u7528\u6237\u7a7a\u95f4\u7684\u6240\u6709\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u52a0\u8f7d\u5185\u6838\u7a7a\u95f4\u7684\u5bc4\u5b58\u5668\u3002</p> </li> <li> <p>stack frame</p> <p>\u6267\u884c\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u4e00\u4e2a\u6808\u5e27\uff0c\u5148\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u3002\u6240\u4ee5\u6808\u4e00\u65e6\u5207\u6362\uff0c\u7a0b\u5e8f\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\u4e5f\u88ab\u5207\u6362\u4e86\u3002</p> </li> </ul> <p>Context switching between two kernel threads. context \u4e00\u5b9a\u5728 kernel mode \u6267\u884c\u3002\u4e3a\u4e86\u5b89\u5168\uff0c\u4e0a\u4e0b\u6587\u5207\u6362\u6d89\u53ca\u5230\u5bc4\u5b58\u5668\u7684\u4fee\u6539\u3002</p> <p>Context Switch Scenarios - kernel</p> <p>When and where are the context (regs) been saved?  </p> <ul> <li>When: In <code>context_switch</code>, more specifically, in cpu_switch_to</li> <li>Where: In PCB, more specifically, in cpu_context</li> <li>All regs are running kernel code, termed kernel context </li> </ul> <p>Context Switch Scenarios - user</p> <ul> <li>When and where are the user context (regs) been saved?<ul> <li>When: <code>kernel_entry</code>\uff08\u8fdb\u5165\u5185\u6838\u65f6\u5b58\u5bc4\u5b58\u5668\uff09\uff0c<code>kernel_exit</code>\uff08\u79bb\u5f00\u5185\u6838\u65f6\u53d6\u51fa\u5bc4\u5b58\u5668\uff09; Where: per-thread kernel stack, more specifically <code>pt_regs</code></li> </ul> </li> <li>When and where are the kernel context (regs) saved saved?<ul> <li>When: <code>cpu_switch_to</code>; Where: <code>cpu_context</code> </li> </ul> </li> </ul> <p><code>fork()</code> return values</p> <p>How does <code>fork()</code> return two values?</p> <ul> <li>\u8c03\u7528 <code>fork</code> \u540e\u4f1a\u8c03\u7528 <code>do_fork</code> \u51fd\u6570\uff0c\u968f\u540e\u8c03\u7528 <code>copy_process</code> \u6700\u540e\u8fdb\u5165 <code>copy_thread</code> \u51fd\u6570\u3002\u5b83\u4f1a\u628a <code>task_struct</code> \u91cc\u7684 <code>thread</code> \u8fdb\u884c\u62f7\u8d1d\u3002</li> <li> <p>\u5bf9\u4e8e\u7236\u8fdb\u7a0b\uff0c<code>fork</code> \u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u3002\u901a\u8fc7 <code>kernel_entry</code> \u8fdb\u5165\u5185\u6838\u6001\uff0c\u5c06\u7528\u6237\u6001\u4e0a\u4e0b\u6587\u5b58\u5728 <code>pt_regs</code> \u4e2d\u3002\u8fd4\u56de\u503c\uff08pid\uff09\u901a\u8fc7 <code>pt_regs</code> \u7684\u5bc4\u5b58\u5668\u503c\u8fd4\u56de\u3002 \uff08\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u503c\u5728 <code>x0</code> \u4e2d\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u503c\u5b58\u5230 <code>pt_regs</code> \u4e2d\uff0c\u8fd9\u6837\u540e\u9762\u4ece\u5185\u6838\u5207\u6362\u5230\u7528\u6237\u6001\u65f6\u5c31\u53ef\u4ee5\u52a0\u8f7d\u8fd4\u56de\u503c\u5230 <code>x0</code>\uff09 </p> </li> <li> <p>\u5bf9\u4e8e\u5b50\u8fdb\u7a0b\uff0c\u4f1a\u8c03\u7528 <code>copy_thread</code> \u51fd\u6570\u3002\u4ed6\u4f1a\u62f7\u8d1d\u5bc4\u5b58\u5668\uff0c\u5e76\u628a <code>regs[0]=0</code>\u3002\u8fd9\u6837\u5728\u540e\u7eed <code>kernel_exit</code> \u540e\u5c31\u53ef\u4ee5\u628a\u503c\u8fd4\u56de\u5230\u5b50\u8fdb\u7a0b\u3002 \u6ce8\u610f\u5230\u6b64\u65f6\u5b50\u8fdb\u7a0b\u7684 <code>pc</code>\uff08ARM \u91cc\u7684 <code>pc</code> \u7c7b\u4f3c\u4e8e RISC-V \u91cc\u7684 <code>ra</code>\uff0c\u5b58\u50a8\u8fd4\u56de\u5730\u5740\uff09\u88ab\u8bbe\u7f6e\u4e3a\u4e86 <code>ret_from_fork</code>\uff08\u8c03\u7528 <code>ret_to_user</code>\uff0c\u518d\u8c03\u7528 <code>kernel_exit</code>\uff09\uff0c<code>sp</code> \u88ab\u8bbe\u7f6e\u4e3a\u4e86 <code>pt_regs</code>. </p> </li> <li> <p>\u6ce8\u610f\u5230\u5f53 <code>fork</code> \u4e4b\u540e\uff0c\u6211\u4eec\u4ece\u7236\u8fdb\u7a0b\u8fd4\u56de\uff0c\u6b64\u65f6\u5b50\u8fdb\u7a0b\u5904\u4e8e READY \u72b6\u6001\uff0c\u7b49\u5f85 CPU \u7684\u8c03\u5ea6\u3002\u7b2c\u4e00\u6b21\u8c03\u5ea6\u65f6\u5b50\u8fdb\u7a0b\u5728\u5207\u6362\u4e0a\u4e0b\u6587\u4e4b\u540e\u4f1a\u4ece <code>ret_from_fork</code> \u5f00\u59cb\u6267\u884c\uff0c\u968f\u540e\u8c03\u7528 <code>ret_to_user</code>\uff0c\u518d\u8c03\u7528 <code>kernel_exit</code>\uff08\u628a\u5b58\u5728 <code>pt_regs</code> \u91cc\u7684\u5bc4\u5b58\u5668\u5168\u90e8\u6062\u590d\uff09\uff0c\u4ece\u800c\u8fd4\u56de 0\u3002</p> </li> </ul> <p>\u8c03\u7528 <code>write</code> \u7684\u7cfb\u7edf\u8c03\u7528\u4f1a\u4e0d\u4f1a\u6709\u4e0a\u4e0b\u6587\u5207\u6362</p> <p>\u4e0d\u4f1a\uff0c\u53ea\u662f\u4ece user space \u901a\u8fc7 <code>kernel_entry</code> \u8fdb\u5165 kernel space\uff0c\u6267\u884c\u5bf9\u5e94\u7684 handler\uff0c\u6267\u884c\u5b8c\u540e\u901a\u8fc7 <code>kernel_exit</code> \u8fd4\u56de user space\u3002</p>"},{"location":"OS/chap02/#takeaway","title":"Takeaway","text":"<p>Takeaway</p> <ul> <li>Process Concept<ul> <li>Process vs Program</li> </ul> </li> <li>Process Control Block<ul> <li><code>task_struct</code></li> </ul> </li> <li>Process State<ul> <li>Five states, who has a queue</li> <li>How to create and terminate a process </li> </ul> </li> <li>Process Scheduling<ul> <li><code>cpu_switch_to</code><ul> <li>Where are registers saved?</li> </ul> </li> <li><code>fork</code><ul> <li>Why returns two values?</li> </ul> </li> </ul> </li> </ul>"},{"location":"OS/chap03/","title":"Inter-Process Communication","text":"<p>Processes within a host may be independent or cooperating. Reasons for cooperating processes:</p> <ul> <li>Information sharing</li> <li>Computation speedup</li> <li>Modularity</li> <li>Convenience</li> </ul> <p>\u8fdb\u7a0b\u4fdd\u62a4\u7684\u592a\u597d\u4e86\uff0c\u9700\u8981\u6709\u4e92\u76f8\u901a\u4fe1\u7684\u624b\u6bb5\u3002</p> <p>Models of IPC</p> <ul> <li>Shared memory</li> <li>Message passing</li> <li>Signal</li> <li>Pipe</li> <li>Socket</li> </ul>"},{"location":"OS/chap03/#ipc-communication-models","title":"IPC Communication Models","text":"<ul> <li>Message-passing \u9700\u8981\u5185\u6838\u7a7a\u95f4\u652f\u6301<ul> <li>useful for exchanging small amounts of data</li> <li>simple to implement in the OS</li> <li>sometimes cumbersome for the user as code is sprinkled with send/recv operations</li> <li>high-overhead: one syscall per communication operation</li> </ul> </li> <li>Shared memory \u975e\u5185\u6838\u7a7a\u95f4 <ul> <li>low-overhead: a few syscalls initially, and then none   </li> <li>more convenient for the user since we\u2019re used to simply reading/writing from/to RAM</li> <li>more difficult to implement in the OS</li> </ul> </li> </ul>"},{"location":"OS/chap03/#shared-memory","title":"Shared Memory","text":"<p>Processes need to establish a shared memory region.  </p> <p>producer/consumer example</p> <p></p> <p>Example</p> <p></p> <p><code>ipcs -a</code> \u53ef\u4ee5\u67e5\u770b\u5f53\u524d IPC \u7684\u72b6\u6001\u3002</p> <p>\u5b58\u5728\u95ee\u9898\uff1a\u4e0d\u5b89\u5168\u3002\u4efb\u4f55\u4eba\u62ff\u5230 <code>share_id</code> \u90fd\u53ef\u4ee5\u628a\u5171\u4eab\u5185\u5b58 attach \u5230\u81ea\u5df1\u8fdb\u7a0b\u4e0a\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u5176\u4ed6\u8fdb\u7a0b\u7684\u6570\u636e\u3001\u751a\u81f3\u505a DOS \u653b\u51fb\u3002</p> <p>\u800c\u4e14\u5f88 cubersome\uff0c\u4f1a\u53d1\u751f\u5404\u79cd error \u9700\u8981\u5904\u7406\u3002\uff08\u73b0\u5728\u4f7f\u7528\u4e0d\u591a\uff09</p>"},{"location":"OS/chap03/#message-passing","title":"Message Passing","text":"<p>Two fundamental operations:</p> <ul> <li>send: to send a message (i.e., some bytes)</li> <li>recv: to receive a message</li> </ul> <p>If processes P and Q wish to communicate they</p> <ul> <li> <p>establish a communication \u201clink\u201d between them</p> <p>This \u201clink\u201d is an abstraction that can be implemented in many ways (even with shared memory!!)</p> </li> <li> <p>place calls to <code>send()</code> and <code>recv()</code></p> </li> <li>optionally shutdown the communication \u201clink\u201d</li> </ul>"},{"location":"OS/chap03/#implementing-message-passing","title":"Implementing Message-Passing","text":"<p>Implementation of communication link</p> <ul> <li>Physical:<ul> <li>Shared memory</li> <li>Hardware bus</li> <li>Network</li> </ul> </li> <li> <p>Logical:</p> <ul> <li> <p>Direct or indirect</p> <ul> <li> <p>Direct  </p> <p>\u6709\u4e00\u4e2a P \u548c Q\uff0c\u76f4\u63a5\u53d1\u4fe1\u606f\u3002\u5982\u679c\u6709 n \u4e2a\u8fdb\u7a0b\uff0c\u9700\u8981\u5efa\u7acb \\(C_2^n\\) \u4e2a\u8fde\u63a5\u3002</p> </li> <li> <p>Indirect</p> <p>\u6709\u4e00\u4e2a mailbox\uff0c\u53d1\u4fe1\u606f\u76f8\u5f53\u4e8e\u53d1\u7ed9\u4e00\u4e2a mailbox\u3002\u5982\u679c\u6709\u591a\u4e2a\u8fdb\u7a0b\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u662f\u7531\u54ea\u4e2a\u8fdb\u7a0b\u63a5\u6536\u4fe1\u606f\u3002</p> </li> </ul> </li> <li> <p>Synchronous or asynchronous</p> <ul> <li> <p>Synchronous: Blocking is considered synchronous</p> <p>\u5373\u6211\u4eec\u53d1\u4fe1\u606f\uff0c\u5982\u679c\u63a5\u6536\u8005\u6ca1\u6536\u5230\u4fe1\u606f\uff0c\u53d1\u9001\u8005\u5c31\u5835\u585e\u7740\u4e0d\u8d70\uff1b\u6211\u4eec\u6536\u4fe1\u606f\uff0c\u5982\u679c\u53d1\u9001\u8005\u6ca1\u6709\u53d1\u9001\u4fe1\u606f\uff0c\u63a5\u9001\u8005\u5c31\u5835\u585e\u7740\u4e0d\u8d70\u3002</p> </li> <li> <p>Asynchronous: Non-blocking is considered asynchronous</p> </li> <li>\u5f02\u6b65\u6548\u7387\u66f4\u9ad8\uff0c\u540c\u6b65\u65f6\u6548\u6027\u66f4\u9ad8\u3002<ul> <li>Automatic or explicit buffering</li> </ul> </li> <li>Zero capacity - no messages are queued on a link. Sender must wait for receiver. </li> <li>Bounded capacity - finite length of n messages. Sender must wait if link full.X</li> <li>Unbounded capacity - infinite length. Sender never waits.</li> </ul> </li> </ul> </li> </ul>"},{"location":"OS/chap03/#pipes","title":"Pipes","text":"<ul> <li> <p>Ordinary pipes </p> <p>\u6ca1\u6709\u540d\u5b57\uff0c\u53ea\u80fd\u901a\u8fc7 <code>fork()</code> \u6765\u4f20\u64ad\u3002</p> <ul> <li>Producer writes to one end (the write-end of the pipe)</li> <li>Consumer reads from the other end (the read-end of the pipe)</li> </ul> <p></p> <p>\u6ce8\u610f <code>fd[0]</code> \u662f read-end\uff0c<code>fd[1]</code> \u662f write-end\uff08\u5bf9\u4e8e\u53cc\u65b9\u90fd\u662f\uff09</p> </li> <li> <p>Named pipes</p> <p>\u53ef\u4ee5\u628a\u540d\u5b57\u901a\u8fc7\u7f51\u7edc/\u6587\u4ef6\u4f20\u64ad\uff0c\u8fd9\u6837\u5c31\u80fd\u4ea4\u4e92\u3002\uff08\u53ef\u4ee5\u4f7f\u7528 <code>mkfifo</code> \u521b\u5efa named pipes\uff09</p> </li> </ul> <p>In UNIX, a pipe is mono-directional.  \u8981\u5b9e\u73b0\u4e24\u4e2a\u65b9\u5411\u4e00\u5b9a\u9700\u8981\u4e24\u4e2a pipe\u3002</p>"},{"location":"OS/chap03/#client-server-communication","title":"Client-Server Communication","text":"<p>\u5e7f\u4e49\u4e0a\u7684 IPC\uff0c\u56e0\u4e3a\u662f\u8dd1\u5728\u4e24\u4e2a\u7269\u7406\u673a\u5668\u4e0a\u7684\u4ea4\u4e92\u3002</p> <ul> <li>Sockets</li> <li> <p>RPCs</p> <p>\u6240\u6709\u7684\u4ea4\u4e92\u90fd\u662f\u548c stub \u901a\u4fe1\uff0cstub \u4f1a\u548c\u8fdc\u7aef\u7684 server \u901a\u4fe1\u3002 \u5b58\u5728\u7f51\u7edc\u95ee\u9898\uff0c\u5982\u4e22\u5305\u3002</p> </li> <li> <p>Java RMI</p> <p>RPC in Java</p> </li> </ul>"},{"location":"OS/chap03/#takeaway","title":"Takeaway","text":"<p>Takeaway</p> <ul> <li>Communicating processes are the basis for many programs/services</li> <li>OSes provide two main ways for processes to communicate<ul> <li>shared memory</li> <li>message-passing</li> </ul> </li> <li>Each way comes with many variants and in many flavors</li> <li>Signals, Pipes, Sockets, RPCs, RMIs, etc.</li> </ul>"},{"location":"OS/chap04/","title":"Threads","text":"<p>How can we make a process run faster</p> <ul> <li>Multiple execution units with a process     </li> </ul>"},{"location":"OS/chap04/#thread-definition","title":"Thread Definition","text":"<ul> <li>A thread is a basic unit of execution within a process.  <ul> <li>Each thread has its own</li> <li>thread ID</li> <li>program counter</li> <li>register set</li> <li>Stack</li> </ul> </li> <li>It shares the following with other threads within the same process <ul> <li>code section</li> <li>data section</li> <li>the heap (dynamically allocated memory)</li> <li>open files and signals</li> </ul> </li> <li>Concurrency: A multi-threaded process can do multiple things at once</li> </ul> Example <p>\u7ebf\u7a0b\u6267\u884c\u7684\u4ee3\u7801\u5f88\u6709\u53ef\u80fd\u4e0d\u4e00\u6837\u3002</p> <ul> <li> <p>Advantages of Threads</p> <ul> <li> <p>Economy  </p> <ul> <li> <p>Creating a thread is cheap</p> <p>\u5982\u679c\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u90a3\u4e48\u6211\u4eec\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u53ea\u9700\u8981\u7ed9\u5b83\u5206\u914d\u4e00\u4e2a\u6808\u3002Code\uff0cdata\uff0cheap \u90fd\u5df2\u7ecf\u5728\u5185\u5b58\u91cc\u5206\u914d\u597d\u4e86\u3002</p> </li> <li> <p>Context switching between threads is cheap</p> <p>Cache is hot, no need to cache flush.      * Resource Sharing         * Threads naturally share memory</p> <p>\u4e0d\u9700\u8981 IPC\u3002</p> </li> <li> <p>Having concurrent activities in the same address space is very powerful</p> <ul> <li>Responsiveness</li> </ul> </li> </ul> <p>\u5982\u5728 web server \u4e2d\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u5728\u7b49\u5f85 I/O\uff0c\u5f53\u6709\u8bf7\u6c42\u6765\u65f6\u5c31\u518d\u5206\u914d\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u5904\u7406\u3002\uff08\u8fdb\u7a0b\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u4ee3\u4ef7\u66f4\u5927\uff09</p> </li> <li> <p>Scalability</p> <ul> <li>multi-core machine</li> </ul> </li> <li>Drawbacks of Threads</li> <li> <p>Weak isolation between threads</p> <p>\u5982\u679c\u6709\u4e00\u4e2a\u7ebf\u7a0b\u51fa\u9519\uff0c\u90a3\u4e48\u6574\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u51fa\u9519\u3002 * Typical challenges of multi-threaded programming     * Deal with data dependency and synchronization     * Dividing activities among threads     * Balancing load among threads     * Split data among threads     * Testing and debugging</p> </li> </ul> </li> </ul>"},{"location":"OS/chap04/#user-threads-vs-kernel-threads","title":"User Threads vs. Kernel Threads","text":"<p>\u5982\u679c\u5185\u6838\u4e0d\u77e5\u9053\u4f60\u8fd9\u4e2a user thread\uff0c\u5b8c\u5168\u5728 user space \u6267\u884c\uff0c\u5c31\u662f user space-based thread; \u5982\u679c\u5185\u6838\u77e5\u9053\u4f60\u8fd9\u4e2a user thread\uff0c\u5c31\u662f kernel-based thread\u3002</p> <ul> <li> <p>Many-to-One Model</p> <p>\u7f3a\u70b9\uff1a\u5185\u6838\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u65e0\u6cd5\u53d1\u6325 multi-core \u7684\u4f18\u52bf\uff1b\u4e00\u65e6\u4e00\u4e2a\u7ebf\u7a0b\u88ab\u963b\u585e\uff0c\u5176\u4ed6\u7ebf\u7a0b\u4e5f\u4f1a\u88ab\u963b\u585e\u3002 </p> </li> <li> <p>One-to-One Model</p> <p>\u628a\u7ebf\u7a0b\u7684\u7ba1\u7406\u53d8\u5f97\u5f88\u7b80\u5355\uff0c\u73b0\u5728 Linux\uff0cWindows \u90fd\u662f\u8fd9\u79cd\u6a21\u578b\u3002 </p> </li> <li> <p>Many-to-Many Model</p> <p>m to n \u7ebf\u7a0b\uff0c\u6298\u4e2d\u3002\u7f3a\u70b9\u662f\u592a\u590d\u6742\u3002 </p> </li> <li> <p>Two-Level Model</p> <p>\u53ef\u4ee5\u9009\u62e9 many to many \u6216\u8005 one to one\u3002 </p> </li> </ul>"},{"location":"OS/chap04/#thread-libraries","title":"Thread Libraries","text":"<ul> <li>In C/C++: pthreads and Win32 threads</li> <li>In C/C++: OpenMP</li> <li>In Java: Java Threads</li> </ul>"},{"location":"OS/chap04/#pthreads","title":"Pthreads","text":"<p>Specification, not implementation</p> <p>\u53ea\u8981\u7b26\u5408\u63a5\u53e3\u7684\u5b9a\u4e49\uff0c\u5c31\u53ef\u4ee5\u53eb pthreads\u3002</p> Example <p> </p>"},{"location":"OS/chap04/#openmp","title":"OpenMP","text":"<p>Identifies parallel regions \u2013 blocks of code that can run in parallel <pre><code>#pragma omp parallel\n</code></pre></p> Example <pre><code>#include &lt;omp.h&gt;\n#include &lt;stdio.h&gt;\nint main(int argc, char *argv[])\n{\n/* sequential code */\n#pragma omp parallel\n{\nprintf(\"I am a parallel region.\");\n}\n/* sequential code */\nreturn 0;\n}\n#pragma omp parallel for\nfor (i = 0; i &lt; N; i++)\n{\nc[i] = a[i] + b[i];\n}\n</code></pre> <p>\u4f7f\u7528\u4e4b\u540e\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6211\u4eec\u5207\u5206\u51fa\u82e5\u5e72\u4e2a\u5e76\u884c\u5757\uff0c\u521b\u9020\u51fa\u5bf9\u5e94\u7684\u7ebf\u7a0b\uff0c\u6700\u540e\u4f7f\u7528 join \u628a\u7ebf\u7a0b\u5408\u5e76\u3002</p>"},{"location":"OS/chap04/#java-threads","title":"Java Threads","text":"<ul> <li>Java threads may be created by:<ul> <li>Extending Thread class</li> <li>Implementing the Runnable interface</li> </ul> </li> </ul> Example <pre><code>class MyThread extends Thread {\npublic void run() {\n. . .\n}\n}\nMyThread t = new MyThread();\npublic interface Runnable {\npublic abstract void run();\n}\n</code></pre>"},{"location":"OS/chap04/#threading-issues","title":"Threading Issues","text":"<p>\u7ebf\u7a0b\u7684\u52a0\u5165\u8ba9\u8fdb\u7a0b\u7684\u64cd\u4f5c\u53d8\u5f97\u66f4\u590d\u6742\u3002</p>"},{"location":"OS/chap04/#semantics-of-fork-and-exec","title":"Semantics of <code>fork()</code> and <code>exec()</code>","text":"<p>\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u8c03\u7528\u4e86 <code>fork()</code>\uff0c\u53ef\u80fd\u53d1\u751f\u4e24\u79cd\u60c5\u51b5\uff1a\u53ea\u590d\u5236\u8c03\u7528\u7ebf\u7a0b\uff0c\u6216\u8005\u590d\u5236\u6240\u6709\u7ebf\u7a0b\u3002</p> <p>Some OSes provide both options</p> <ul> <li> <p>In Linux the first option above is used  </p> <p>\u56e0\u4e3a\u5927\u90e8\u5206\u65f6\u5019 <code>fork</code> \u4e4b\u540e\u4f1a\u63a5 <code>exec</code>\uff0c\u62b9\u6389\u6240\u6709\u7684\u6570\u636e\uff0c\u56e0\u6b64\u76f4\u63a5\u590d\u5236\u8c03\u7528\u7ebf\u7a0b\u5c31\u53ef\u4ee5\u4e86\u3002</p> </li> </ul>"},{"location":"OS/chap04/#signals","title":"Signals","text":"<p>\u4fe1\u53f7\u662f\u7ed9\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u7ed9\u6240\u6709\u7ebf\u7a0b\uff0c\u7ed9\u4e00\u4e2a\u56fa\u5b9a\u7684\u7ebf\u7a0b\u8fd8\u662f\u7528\u4e00\u4e2a\u7279\u5b9a\u7684\u7ebf\u7a0b\u6765\u5904\u7406\u4fe1\u53f7\uff1f</p> <p>Most UNIX versions: a thread can say which signals it accepts and which signals it doesn\u2019t accept.  </p> <p>On Linux: dealing with threads and signals is tricky but well understood with many tutorials on the matter and man pages</p>"},{"location":"OS/chap04/#safe-thread-cancellation","title":"Safe Thread Cancellation","text":"<p>\u628a\u4e00\u4e2a\u7ebf\u7a0b\u7684\u5de5\u4f5c\u53d6\u6d88\u6389\uff0c\u5982\u4f55\u4fdd\u8bc1\u53d6\u6d88\u540e\u4e0d\u5f71\u54cd\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\u3002</p> <ul> <li> <p>Asynchronous cancellation</p> <p>\u7acb\u5373\u7ec8\u6b62\u3002</p> </li> <li> <p>Deferred cancellation</p> <p>\u7ebf\u7a0b\u4f1a\u81ea\u5df1\u8fdb\u884c\u5468\u671f\u6027\u68c0\u67e5\uff0c\u5982\u679c\u53d6\u6d88\u6389\u4e0d\u4f1a\u5f71\u54cd\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\uff0c\u5c31\u628a\u81ea\u5df1\u53d6\u6d88\u6389\u3002</p> </li> </ul> <p>Invoking thread cancellation requests cancellation, but actual cancellation depends on thread state.</p> <p>\u5e26\u6765\u5f88\u591a\u95ee\u9898\uff1a\u6bd4\u5982\u4e00\u4e2a\u7ebf\u7a0b\u6b63\u5728\u5199\u53d8\u91cf\uff0c\u503c\u8fd8\u6ca1\u6709\u540c\u6b65\u5230\u5185\u5b58\u6216\u8005 cache\uff0c\u8fd9\u4e2a bug \u5f88\u96be\u88ab\u590d\u73b0\u3002</p> <p>In Java, the <code>Thread.stop()</code> method is deprecated, and so cancellation has to be deferred. </p>"},{"location":"OS/chap04/#linux-threads","title":"Linux Threads","text":"<p>In Linux, a thread is also called a light-weight process(LWP).</p> <p>The <code>**clone()**</code> syscall is used to create a thread or a process. </p> <p>Note</p> <p><code>clone</code> \u6709\u4e00\u4e2a\u53c2\u6570 <code>CLONE_VM</code>\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\u90a3\u4e48\u7c7b\u4f3c\u4e8e <code>fork</code>\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u5185\u5b58\u7a7a\u95f4\uff1b\u5982\u679c\u8bbe\u7f6e\u4e86\u90a3\u4e48\u7ebf\u7a0b\u8dd1\u5728\u540c\u4e00\u5730\u5740\u7a7a\u95f4\u4e0a\u3002</p> <p>\u6ce8\u610f\u7ebf\u7a0b\u80fd\u8bbf\u95ee\u5230\u5176\u4ed6\u7ebf\u7a0b\u7684\u6808\uff0c\u4e5f\u80fd\u8bfb\u5199\uff0c\u53ea\u662f\u6b63\u5e38\u4f7f\u7528\u60c5\u51b5\u4e0b\u662f\u7528\u7684\u81ea\u5df1\u6808\u3002\uff1f\uff1f\uff1f</p> <p>TCB \u7528\u6765\u5b58\u50a8\u7ebf\u7a0b\u7684\u4fe1\u606f\uff0cLinux \u5e76\u4e0d\u533a\u5206 PCB \u548c TCB\uff0c\u90fd\u662f\u7528 <code>task_struct</code> \u6765\u8868\u793a\u3002</p> <p>Example</p> <p></p> <p>PID \u5982\u679c\u548c LWP \u76f8\u540c\uff0c\u8bf4\u660e\u8fd9\u4e2a\u8fdb\u7a0b\u53ea\u6709\u8fd9\u4e00\u4e2a\u7ebf\u7a0b\u3002\u5982\u679c\u4e0d\u76f8\u540c\uff0c\u8bf4\u660e\u8fdb\u7a0b\u6709\u591a\u4e2a\u7ebf\u7a0b\uff0c\u6b64\u65f6\u8fdb\u7a0b\u7684 PID \u662f\u4e3b\u7ebf\u7a0b\u7684 LWP\u3002</p> <p>A process is </p> <ul> <li>either a single thread + an address space <ul> <li>PID is thread ID</li> </ul> </li> <li>or multiple threads + an address space<ul> <li>PID is the leading thread ID</li> </ul> </li> </ul> <p>Threads with Process \u2013 What is shared</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230 <code>mm_struct</code> \uff08\u4e0e\u5185\u5b58\u7ba1\u7406\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u5982\u9875\u8868\uff0c<code>vm_struct</code>\uff09\u662f\u5171\u4eab\u7684\uff0c<code>task_struct, pid, stack, comm</code> \u662f\u4e0d\u5171\u4eab\u7684\u3002</p> <ul> <li>One task in Linux<ul> <li>Same task_struct (PCB) means same thread\uff08\u4e00\u4e2a PCB \u6307\u7684\u662f\u4e00\u4e2a\u7ebf\u7a0b\uff09<ul> <li>Also viewed as 1:1 mapping</li> <li>One user thread maps to one kernel thread</li> <li>But actually, they are the same thread</li> </ul> </li> </ul> </li> <li>Can be executed in user space<ul> <li>User code, user space stack</li> </ul> </li> <li>Can be executed in kernel space<ul> <li>Kernel code, kernel space stack</li> </ul> </li> </ul> <p>\u4f8b\u5982\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u7ebf\u7a0b\u5207\u6362\u5230\u5185\u6838\u6a21\u5f0f\uff0c\u76f8\u5f53\u4e8e\u662f\u7528\u6237\u7ebf\u7a0b\u5bf9\u5e94\u7684\u5185\u6838\u7ebf\u7a0b\u5728\u6267\u884c\uff0c\u6b64\u65f6\u5c31\u4f7f\u7528\u5185\u6838\u7a7a\u95f4\u7684\u6808\u3002</p>"},{"location":"OS/chap04/#takeaway","title":"Takeaway","text":"<p>Takeaway</p> <ul> <li>Thread is the basic execution unit<ul> <li>Has its own registers, pc, stack </li> </ul> </li> <li>Thread vs Process<ul> <li>What is shared and what is not</li> </ul> </li> <li>Pros and cons of thread</li> </ul>"},{"location":"OS/chap05/","title":"Scheduling","text":""},{"location":"OS/chap05/#cpu-scheduling","title":"CPU Scheduling","text":"<p>Definition: The decisions made by the OS to figure out which ready processes/threads should run and for how long. \u8c01\u7528\uff1f\u7528\u591a\u4e45\uff1f</p> <ul> <li> <p>The policy is the scheduling strategy</p> <p>\u600e\u4e48\u9009\u62e9\u4e0b\u4e00\u4e2a\u8981\u6267\u884c\u7684\u8fdb\u7a0b\u3002</p> </li> <li> <p>The mechanism is the dispatcher</p> <p>\u600e\u6837\u5feb\u901f\u5730\u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u3002</p> </li> </ul>"},{"location":"OS/chap05/#cpu-io-burst-cycle","title":"CPU-I/O Burst Cycle","text":"<ul> <li> <p>I/O-bound process</p> <p>\u4e3b\u8981\u662f\u7b49 I/O\u3002\u5927\u90e8\u5206\u7684\u64cd\u4f5c\u90fd\u662f I/O-bound \u7684\u3002  </p> <p>e.g. <code>/bin/cp</code></p> </li> <li> <p>CPU-bound process</p> <p>\u4e3b\u8981\u662f\u7b49 CPU\u3002  </p> <p>e.g. \u79d1\u5b66\u8ba1\u7b97\uff08\u5982\u628a\u5706\u5468\u7387\u8ba1\u7b97\u540e\u4e00\u767e\u4e07\u4f4d\uff09\uff0c\u6e32\u67d3</p> </li> </ul>"},{"location":"OS/chap05/#the-cpu-scheduler","title":"The CPU Scheduler","text":"<p>\u5f53 CPU \u7a7a\u95f2\u65f6\uff0c\u4ece\u6240\u6709\u7684 ready processes \u4e2d\u9009\u4e00\u4e2a\u7ee7\u7eed\u8dd1\u3002</p> <ul> <li> <p>Non-preemptive scheduling: a process holds the CPU until it is willing to give it up.  </p> <p>\u975e\u62a2\u5360\u5f0f\uff0c\u5b83\u4e00\u76f4\u5360\u7740 CPU\uff0c\u76f4\u5230\u5b83\u81ea\u5df1\u653e\u5f03\u3002</p> </li> <li> <p>Preemptive scheduling: a process can be preempted even though it could have happily continued executing.</p> <p>\u62a2\u5360\u5f0f\uff0cCPU \u51b3\u5b9a\u6bcf\u4e2a\u8fdb\u7a0b\u80fd\u8dd1\u591a\u4e45\uff0c\u53ef\u4ee5\u5f3a\u5236\u4e2d\u6b62\u6b63\u5728\u8dd1\u7684\u8fdb\u7a0b\u3002</p> </li> </ul> <p>\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u4e00\u822c\u4f7f\u7528\u62a2\u5360\u5f0f\u7684\uff08\u5426\u5219\u64cd\u4f5c\u7cfb\u7edf\u5c31\u4e0d\u592a\u9700\u8981\u505a\u8c03\u5ea6\u4e86\uff09</p>"},{"location":"OS/chap05/#scheduling-decision-points","title":"Scheduling Decision Points","text":"<p>Scheduling decisions can occur</p> <ul> <li> <p>A process goes from RUNNING to WAITING</p> <p>e.g. waiting for I/O to complete</p> </li> <li> <p>A process goes from RUNNING to READY</p> <p>e.g. when an interrupt occurs (such as a timer going off)</p> </li> <li> <p>A process goes from WAITING to READY</p> <p>e.g. an I/O operation has completed</p> </li> <li> <p>A process goes from RUNNING to TERMINATED</p> </li> <li>A process goes from NEW to READY</li> <li>A process goes from READY to WAITING</li> </ul> <p>\u5728\u975e\u62a2\u5360\u5f0f\u7684\u60c5\u51b5\u4e2d\uff0c\u53ea\u6709\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\u3002\u5728\u62a2\u5360\u5f0f\u7684\u60c5\u51b5\u4e2d\uff0c\u6240\u6709\u7684\u60c5\u51b5\u90fd\u4f1a\u53d1\u751f\u3002</p> <p>Preemptive scheduling is good, since the OS remains in control, but is complex. </p>"},{"location":"OS/chap05/#scheduling-mechanisms","title":"Scheduling Mechanisms","text":""},{"location":"OS/chap05/#scheduling-queues","title":"Scheduling Queues","text":"<ul> <li>The Ready Queue contains processes that are in the READY state</li> <li> <p>Device Queues contain processes waiting for particular devices</p> <p>\u6bcf\u4e2a\u88ab\u7b49\u5f85\u7684 devices \u90fd\u6709\u4e00\u4e2a device queues, \u901a\u8fc7\u53cc\u5411\u94fe\u8868\u8fde\u63a5\u3002</p> </li> </ul> <p>Example</p> <p></p> <p>\u6bd4\u5982\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u8fdb\u7a0b 2 \u8fd0\u884c\uff0c\u5c31\u5c06\u5b83\u4ece ready queue \u91cc\u62ff\u51fa\u6765\u3002\u968f\u540e\u5982\u679c\u4ed6\u8981\u8bfb\u786c\u76d8\uff0c\u6211\u4eec\u5c31\u628a PCB2 \u6302\u8f7d\u5230 disk unit 0 \u7684 device queue \u4e0a\u3002</p> <p>Example</p> <p></p> <p>parent call fork \u4e4b\u540e\uff0c\u5b50\u8fdb\u7a0b\u8fdb\u5165 ready queue\u3002\u5982\u679c\u7236\u8fdb\u7a0b\u4f7f\u7528\u4e86 <code>wait</code>\uff0c\u4ed6\u5c31\u4f1a\u88ab\u653e\u5230\u5b50\u8fdb\u7a0b\u7684 waiting queue \u91cc\uff08\u5b9e\u9645\u4e0a\u6bcf\u4e2a\u88ab\u7b49\u5f85\u7684\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a waiting queue\uff09\u3002\u5f53\u5b50\u8fdb\u7a0b\u62ff\u5230 CPU \u65f6\uff0c\u5b83\u7ed3\u675f\u4e4b\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u7236\u8fdb\u7a0b\u5524\u9192\uff0c\u968f\u540e\u7236\u8fdb\u7a0b\u8fdb\u5165 ready queue\u3002</p> <p>\u5f53 CPU \u518d\u6b21\u88ab\u7236\u8fdb\u7a0b\u62ff\u5230\u65f6\uff0c\u5b83\u4f1a\u56de\u6536\u5b50\u8fdb\u7a0b\u8fd9\u4e2a zombie\u3002</p>"},{"location":"OS/chap05/#dispatcher","title":"Dispatcher","text":"<p>Dispatcher module gives control of the CPU to the process selected by the scheduler. </p> <ul> <li> <p>switching to kernel mode</p> <p><code>kernel_entry</code>, \u7528\u6237\u6001\u7684\u4fe1\u606f\u5b58\u5728 <code>pt_regs</code> \u4e2d\u3002</p> </li> <li> <p>switching context</p> <p>\u4e0a\u4e0b\u6587\u5b58\u5728 PCB \u4e2d\u3002</p> </li> <li> <p>switching to user mode</p> </li> <li>jumping to the proper location in the user program to restart that program</li> </ul> <p>Dispatch latency \u2013 time it takes for the dispatcher to stop one process and start another to run. \u8fd9\u662f pure overhead\uff0c\u56e0\u4e3a CPU \u6ca1\u6709\u505a\u5b9e\u9645\u7684\u5de5\u4f5c\u3002</p>"},{"location":"OS/chap05/#scheduling-algorithms","title":"Scheduling Algorithms","text":"<p>Scheduling Objectives</p> <ul> <li>Maximize CPU Utilization</li> <li>Maximize Throughput</li> <li> <p>Minimize Turnaround Time</p> <p>\u5468\u8f6c\u65f6\u95f4\uff0c\u6307\u8fdb\u7a0b\u4ece\u521b\u5efa\u5230\u5b8c\u6210\u7684\u65f6\u95f4\u3002</p> </li> <li> <p>Minimize Waiting Time</p> </li> <li> <p>Minimize Response Time</p> <p>\u54cd\u5e94\u65f6\u95f4\uff0c\u6307\u8fdb\u7a0b\u4ece\u521b\u5efa\u5230\u7b2c\u4e00\u6b21\u54cd\u5e94\u88ab\u63a5\u53d7\u7684\u65f6\u95f4\u3002</p> </li> </ul> <p>\u6211\u4eec\u5f88\u96be\u8bf4\u4e00\u4e2a\u7b97\u6cd5\u600e\u6837\u624d\u662f\u597d\u7684\uff08\u4e0a\u8ff0\u7684\u76ee\u6807\u5b9e\u9645\u4e0a\u4e92\u76f8\u4e4b\u95f4\u662f\u6709\u77db\u76fe\u7684\uff09\u3002</p> <p>One thing is certain: the algorithms cannot be overly complicated so that they can be fast. \u5373\u7b97\u6cd5\u4e0d\u8981\u8fc7\u4e8e\u590d\u6742\u3002</p> <p>\u7528\u4e0b\u9762\u7684\u6307\u6807\u6765\u8861\u91cf\u7b97\u6cd5\u7684\u597d\u574f\uff1a</p> <ul> <li>CPU utilization \u2013 keep the CPU as busy as possible</li> <li>Throughput \u2013 # of processes that complete their execution per time unit</li> <li>Turnaround time \u2013 amount of time to execute a particular process</li> <li>Waiting time \u2013 amount of time a process has been waiting in the ready queue</li> <li>Response time \u2013 amount of time it takes from when a request was submitted until the first response is produced, not output (for time sharing environment)</li> </ul>"},{"location":"OS/chap05/#first-come-first-served-scheduling-fcfs","title":"First-Come, First-Served Scheduling (FCFS)","text":"<ul> <li>Waiting time = start time \u2013 arrival time</li> <li>Turnaround time = finish time \u2013 arrival time</li> </ul> <p>Example</p> <p> </p> <p>Convoy effect - short process behind long process \u6162\u8f66\u5728\u5feb\u8f66\u540e\u9762\uff0c\u6240\u6709\u8f66\u90fd\u5728\u540e\u9762\u7b49\u7740\u3002</p>"},{"location":"OS/chap05/#shortest-job-first-sjf-scheduling","title":"Shortest-Job-First (SJF) Scheduling","text":"<p>Use these lengths to schedule the process with the shortest time.  </p> <p>Example</p> <p>\u6ce8\u610f\u5206\u4e3a\u62a2\u5360\u5f0f\u548c\u975e\u62a2\u5360\u5f0f\u7684\uff01  </p> <p>\u6709\u591a\u6bb5\u7684\u6267\u884c\uff0c\u7b49\u5f85\u65f6\u95f4\u6211\u4eec\u8981\u8ba1\u7b97\u8fd9\u4e2a\u8fdb\u7a0b\u5728\u6267\u884c\u7ed3\u675f\u524d\uff0c\u6709\u591a\u5c11\u65f6\u95f4\u6ca1\u6709\u88ab\u6267\u884c\uff0c\u5373 25-10=15\u3002</p> <p>SJF is provably optimal for average wait time</p> <p>\u4f46\u6211\u4eec\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\u4e4b\u524d\uff0c\u6211\u4eec\u5982\u4f55\u77e5\u9053\u4e00\u4e2a\u4efb\u52a1\u9700\u8981\u591a\u957f\u65f6\u95f4\uff1f\uff08burst durations\uff09</p>"},{"location":"OS/chap05/#predicting-cpu-burst-durations","title":"Predicting CPU burst durations","text":"<p>\u6839\u636e\u4e4b\u524d\u7684\u65f6\u95f4\uff0c\u9884\u6d4b\u4e00\u4e2a\u8fdb\u7a0b\u7684\u4e0b\u4e00\u6b21\u6267\u884c\u65f6\u95f4\uff1a\\(\\tau_{n+1}=\\alpha t_n + (1-\\alpha)\\tau_n\\)</p>"},{"location":"OS/chap05/#round-robin-scheduling","title":"Round-Robin Scheduling","text":"<p>RR Scheduling is preemptive and designed for time-sharing. </p> <p>\u7ed9\u8fdb\u7a0b\u4e00\u4e2a\u56fa\u5b9a\u65f6\u95f4\u7247\uff0c\u7528\u5b8c\u4e86\u5c31\u8dd1\u5230 ready queue \u672b\u5c3e\u6392\u961f\u3002</p> <p>Ready Queue is a FIFO. Whenever a process changes its state to READY it is placed at the end of the FIFO.</p> <p>Scheduling:</p> <ul> <li>Pick the first process from the ready queue</li> <li>Set a timer to interrupt the process after 1 quantum</li> <li>Dispatch the process</li> </ul> <p>Example</p> <p></p> <ul> <li> <p>No starvation, so better response time  </p> <p>\u5728 SJF \u4e2d\uff0c\u5982\u679c\u4e0d\u505c\u7684\u6709\u65f6\u95f4\u77ed\u7684\u8fdb\u7a0b\u8fdb\u6765\uff0c\u90a3\u4e48\u957f\u8fdb\u7a0b\u5c31\u53ef\u80fd\u6c38\u8fdc\u65e0\u6cd5\u6267\u884c\uff0c\u79f0\u4e3a starvation\u3002</p> </li> <li> <p>The wait time is bounded.</p> </li> <li>Trade-off<ul> <li>Short quantum: great response/interactivity but high overhead</li> <li>Long quantum: poor response/interactivity, but low overhead</li> </ul> </li> </ul>"},{"location":"OS/chap05/#priority-scheduling","title":"Priority Scheduling","text":"<p>\u4f18\u5148\u7ea7\u9ad8\u7684\u5148\u88ab\u8c03\u5ea6\uff0c\u4f18\u5148\u7ea7\u4f4e\u7684\u540e\u88ab\u8c03\u5ea6\u3002\uff08No convention: low number can mean low or high priority\uff09</p> <ul> <li> <p>Priorities can be internal.</p> <p>e.g. in SJF it\u2019s the predicted burst time, the number of open files. </p> </li> <li> <p>Priorities can be external.</p> <p>e.g. set by users to specify relative importance of jobs. </p> </li> </ul> <p>Example</p> <p></p> <p>Example</p> <p></p> <p>\u4e3a\u4e86\u5b9e\u73b0\u4f18\u5148\u7ea7\u8c03\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u4ee3\u66ff\u961f\u5217\u3002</p> <p>\u5b58\u5728\u95ee\u9898\uff1a\u4f18\u5148\u7ea7\u4f4e\u7684\u8fdb\u7a0b\u53ef\u80fd\u6c38\u8fdc\u65e0\u6cd5\u6267\u884c\uff0c\u5373 starvation\u3002</p> <p>A solution: Priority aging</p> <ul> <li>Increase the priority of a process as it ages</li> </ul>"},{"location":"OS/chap05/#multilevel-feedback-queues","title":"Multilevel Feedback Queues","text":"<ul> <li>use one ready queue per class of processes.</li> <li>Scheduling within queues<ul> <li>Each queue has its own scheduling policy</li> </ul> </li> </ul> <p>\u4e00\u4e2a\u961f\u5217\u91cc\u7528\u4e00\u79cd\u8c03\u5ea6\u65b9\u6cd5\uff0c\u4e0d\u540c\u7684\u961f\u5217\u91cc\u53ef\u4ee5\u7528\u4e0d\u540c\u8c03\u5ea6\u65b9\u6cd5\u3002</p> <p>Processes can move among the queues.</p> <p>Example</p> <p>\u6709\u4e09\u5c42\u961f\u5217\uff0c\u7b2c\u4e00\u3001\u4e8c\u5c42\u662f Round-Robin\u3002\u6765\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u5148\u653e\u5230\u7b2c\u4e00\u4e2a\u961f\u5217\u91cc\u51c6\u5907\u6267\u884c\uff0c\u5982\u679c\u6ca1\u6267\u884c\u5b8c\u5c31\u653e\u5230\u7b2c\u4e8c\u4e2a\u961f\u5217\u91cc\uff0c\u5982\u679c\u8fd8\u6ca1\u6267\u884c\u5b8c\u5c31\u653e\u5230\u7b2c\u4e09\u4e2a\u961f\u5217\u91cc FCFS\u3002 </p> <p>\u5982\u679c\u6700\u5f00\u59cb\u5728 Q0 \u5c31\u6267\u884c\u5b8c\u4e86\uff0c\u5f88\u53ef\u80fd\u662f I/O bound \u7684\u8fdb\u7a0b\uff0c\u6211\u4eec\u628a\u5b83\u7684\u4f18\u5148\u7ea7\u8bbe\u7684\u5f88\u9ad8\uff1b\u5426\u5219\u53ef\u80fd\u662f CPU-bound \u6211\u4eec\u5c31\u964d\u4f4e\u5b83\u7684\u4f18\u5148\u7ea7\u3002</p> <p>Rationale: non-CPU-intensive jobs should really get the CPU quickly on the rare occasions they need them, because they could be interactive processes (this is all guesswork, of course). \u975e CPU-intensive \u7684\u8fdb\u7a0b\u5e94\u8be5\u5c3d\u5feb\u5f97\u5230 CPU\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u80fd\u662f\u4ea4\u4e92\u5f0f\u8fdb\u7a0b\u3002</p> <p>\u53ef\u4ee5\u505a\u7684\u6bd4\u8f83\u901a\u7528\u3002 The Multilevel Feedback Queues scheme is very general because highly configurable</p> <ul> <li>Number of queues</li> <li>Scheduling algorithm for each queue</li> <li>Scheduling algorithm across queues</li> <li>Method used to promote/demote a proces</li> </ul>"},{"location":"OS/chap05/#thread-scheduling","title":"Thread Scheduling","text":"<ul> <li> <p>process-contention scope (PCS) </p> <p>\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u5230\u65f6\u95f4\u7247\u4e00\u6837\uff0c\u7136\u540e\u8fdb\u7a0b\u5185\u90e8\u518d\u5bf9\u7ebf\u7a0b\u8fdb\u884c\u8c03\u5ea6\u3002</p> </li> <li> <p>system-contention scope (SCS)</p> <p>\u6240\u6709\u7ebf\u7a0b\u8fdb\u884c\u8c03\u5ea6\u3002</p> </li> </ul> <p>\u73b0\u5728\u4e3b\u6d41 CPU \u90fd\u662f\u4ee5\u7ebf\u7a0b\u4e3a\u7c92\u5ea6\u8fdb\u884c\u8c03\u5ea6\u7684\u3002</p>"},{"location":"OS/chap05/#multiple-processor-scheduling","title":"Multiple-Processor Scheduling","text":"<p>Multi-processor may be any one of the following architectures:</p> <ul> <li>Multi-core CPUs</li> <li>Multi-threaded cores</li> </ul>"},{"location":"OS/chap05/#multithreaded-multicore-system","title":"Multithreaded Multicore System","text":"<ul> <li>All threads may be in a common ready queue (a)</li> <li> <p>Each processor may have its own private queue of threads (b)  </p> <p>\u73b0\u5728\u5927\u90e8\u5206\u662f\u8fd9\u79cd\u67b6\u6784\u3002 </p> </li> </ul> <p>CPU \u4e2d\u8ba1\u7b97\u5355\u5143\u5f88\u5feb\uff0c\u4f46\u662f\u5185\u5b58\u8bbf\u95ee\u662f\u5f88\u6162\u7684\uff0c\u9700\u8981 stall\u3002\u4e3a\u4e86\u5229\u7528\u8fd9\u6bb5 stall \u7684\u65f6\u95f4\uff0c\u6211\u4eec\u5c31\u591a\u7528\u4e00\u4e2a thread\uff0c\u5728\u8fd9\u4e2a thread stall \u65f6\u6267\u884c\u53e6\u4e00\u4e2a thread\u3002\uff08hyperthreading\uff09</p> <p>Chip-multithreading (CMT) assigns each core multiple hardware threads. (Intel refers to this as hyperthreading.)</p> <p>hyperthreading \u5c5e\u4e8e\u786c\u4ef6\u7ebf\u7a0b\uff0c\u7531\u786c\u4ef6\u6765\u8c03\u5ea6\uff0c\u4e0d\u540c\u4e8e OS \u91cc\u7684 thread\u3002</p>"},{"location":"OS/chap05/#multiple-processor-scheduling_1","title":"Multiple-Processor Scheduling","text":""},{"location":"OS/chap05/#load-balancing","title":"Load Balancing","text":"<ul> <li>Load balancing attempts to keep workload evenly distributed</li> <li> <p>Push migration \u2013 periodic task checks load on each processor, and if found pushes task from overloaded CPU to other CPUs.</p> <p>core \u4e0a\u5de5\u4f5c\u592a\u591a\uff0c\u8981\u63a8\u7ed9\u5176\u4ed6\u7684 core\u3002</p> </li> <li> <p>Pull migration \u2013 idle processors pulls waiting task from busy processor.</p> <p>core \u4e0a\u5de5\u4f5c\u592a\u5c11\uff0c\u5c31\u4ece\u5176\u4ed6\u7684 core \u4e0a\u62c9\u4e00\u4e9b\u4efb\u52a1\u8fc7\u6765\u3002</p> </li> </ul>"},{"location":"OS/chap05/#processor-affinity","title":"Processor Affinity","text":"<p>\u6709\u7684\u8fdb\u7a0b\u6211\u4eec\u60f3\u8981\u5728\u4e00\u4e2a core \u4e0a\u8dd1\u3002</p> <ul> <li>Soft affinity \u2013 the operating system attempts to keep a thread running on the same processor, but no guarantees.</li> <li>Hard affinity \u2013 allows a process to specify a set of processors it may run on.</li> </ul>"},{"location":"OS/chap05/#linux-scheduling","title":"Linux Scheduling","text":"<ul> <li>Nice command <ul> <li>\u6570\u8d8a\u5c0f\uff0c\u4f18\u5148\u7ea7\u8d8a\u9ad8</li> <li><code>ps -e -o uid,pid,ppid,pri,ni,cmd</code></li> </ul> </li> </ul> <p>Linux Scheduling: 0.11</p> <p>Round-Robin + priority. \u7b2c\u4e00\u4e2a\u7ea2\u6846 \\(O(N)\\) \u627e <code>counter</code> \u6700\u5927\u7684\u8fdb\u7a0b\uff0c\u5982\u679c <code>counter</code> \u4e0d\u4e3a 0 \u5c31\u6267\u884c\uff0c\u5426\u5219\u8bf4\u660e\u6240\u6709\u7684\u8fdb\u7a0b\u90fd\u5df2\u7ecf\u8dd1\u5b8c\u81ea\u5df1\u7684\u65f6\u95f4\u7247\u4e86\uff0c\u91cd\u65b0\u8d4b\u503c\u65f6\u95f4\u7247\uff0c\u6309\u7167\u4f18\u5148\u7ea7\u8d4b\u503c\u3002\uff08\u5f53\u65f6\u6570\u8d8a\u5927\uff0c\u8bf4\u660e\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540e\u6765\u76f8\u53cd\u4e86\uff09 </p> <p>\u6bcf\u6b21\u627e\u8fdb\u7a0b\u90fd\u8981 \\(O(N)\\)\uff0c\u540e\u6765\u6539\u4e3a\u4e86 \\(O(1)\\) \u7684\u7b97\u6cd5\uff08Linux 2.6\uff09</p> <p>The kernel keeps two arrays of round-robin queues</p> <ul> <li>One for active tasks: one Round Robin queue per priority level</li> <li>One for expired tasks: one Round Robin queue per priority level</li> </ul> <p>\u6bcf\u4e2a\u4f18\u5148\u7ea7\u90fd\u5bf9\u5e94\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u91cc\u6709\u4e00\u4e2a Round Robin \u961f\u5217\u3002</p> <pre><code>struct prio_array {\nint nr_active; // total num of tasks\nunsigned long bitmap[5]; // priority bitmap\nstruct list_head queue[MAX_PRIO]; // the queues\n}\n</code></pre> <p>The bitmap contains one bit for each priority level. <code>bitmap</code> \u5b58\u54ea\u4e2a\u4f18\u5148\u7ea7\u91cc\u8fd8\u6709\u5143\u7d20\uff0c\u6700\u5f00\u59cb\u6240\u6709\u4f4d\u90fd\u662f 0\uff0c\u5982\u679c\u6709\u4f18\u5148\u7ea7\u91cc\u6709\u8fdb\u7a0b\uff0c\u5c31\u628a\u5bf9\u5e94\u7684\u4f4d\u8bbe\u4e3a 1\u3002\u627e\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5c31\u662f\u4ece\u5de6\u5f80\u53f3\u904d\u5386\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a 1 \u7684\u4f4d\u3002x86 \u4e0a\u6b63\u597d\u6709\u4e00\u4e2a\u6307\u4ee4 <code>bsfl</code>\uff08bit scan forward - from right to left\uff09\u53ef\u4ee5\u76f4\u63a5\u627e\u5230\u5bf9\u5e94\u7684\u4f4d\uff0c\u7136\u540e\u518d\u4ece\u5bf9\u5e94\u7684 <code>task_list</code> \u53d6\u51fa\u4e00\u4e2a\u8fdb\u7a0b\u3002 <pre><code>prio_array.head_queue[bsfl(bitmap)].task_struct\n</code></pre></p> <p>\u4e00\u4e2a\u4efb\u52a1\u6267\u884c\u5b8c\u5b83\u7684\u65f6\u95f4\u7247\u540e\uff0c\u5c31\u4ece active array \u79fb\u5230 expired array\u3002\u5f53 active array \u4e3a\u7a7a\u65f6\uff0c\u5c31\u628a expired array \u548c active array \u4ea4\u6362\u3002</p> <p>\u95ee\u9898\u5728\u4e8e\uff1a\u4f18\u5148\u7ea7\u6570\u91cf\u53d7\u9650\u5236\uff1b\u800c\u4e14 policy \u548c mechanism \u7d27\u5bc6\u7ed1\u5b9a\uff0c\u96be\u4ee5\u7ef4\u62a4\uff0c\u6240\u4ee5\u540e\u6765\u6ca1\u6709\u7ee7\u7eed\u4f7f\u7528\u3002</p> <p>CFS: Completely Fair Scheduler</p> <ul> <li>Developed by the developer of \\(O(1)\\), with ideas from others</li> <li>Main idea: keep track of how fairly the CPU has been allocated to tasks, and \u201cfix\u201d the unfairness</li> <li>For each task, the kernel keeps track of its virtual time<ul> <li>The sum of the time intervals during which the task was given the CPU since the task started</li> <li>Could be much smaller than the time since the task started</li> </ul> </li> <li>Goal of the scheduler: give the CPU to the task with the smallest virtual time. i.e., to the task that\u2019s the least \"happy\"</li> </ul>"},{"location":"OS/chap05/#takeaway","title":"Takeaway","text":"<p>Takeaway</p> <ul> <li>There are many options for CPU scheduling</li> <li>Modern OSes use preemptive scheduling</li> <li>Some type of multilevel feedback priority queues is what most OSes do right now</li> <li>A common concern is to ensure interactivity</li> <li>I/O bound processes often are interactive, and thus should have high priority</li> <li>Having \u201cquick\u201d short-term scheduling is paramoun</li> </ul>"},{"location":"OS/chap06/","title":"Synchoronization","text":"<ul> <li>Processes/threads can execute concurrently</li> <li>Concurrent access to shared data may result in data inconsistency</li> </ul>"},{"location":"OS/chap06/#race-condition","title":"Race Condition","text":"Example <p>Several processes (or threads) access and manipulate the same data concurrently and the outcome of the execution depends on the particular order in which the access takes place, is called a race-condition. \u591a\u4e2a\u8fdb\u7a0b\u5e76\u884c\u5730\u5199\u6570\u636e\uff0c\u7ed3\u679c\u53d6\u51b3\u4e8e\u5199\u7684\u5148\u540e\u987a\u5e8f\uff0c\u8fd9\u5c31\u662f\u7ade\u4e89\u6761\u4ef6\u3002</p> <p>\u5728\u5185\u6838\u4e2d\uff0c\u6bd4\u5982\u4e24\u4e2a\u8fdb\u7a0b\u540c\u65f6 <code>fork</code>\uff0c\u5b50\u8fdb\u7a0b\u53ef\u80fd\u62ff\u5230\u4e00\u6837\u7684 pid\u3002</p> <p>critical section</p> <p>\u4fee\u6539\u5171\u540c\u53d8\u91cf\u7684\u533a\u57df\u79f0\u4e3a critical section\uff1b\u5171\u540c\u533a\u57df\u4e4b\u524d\u53eb entry section\uff0c\u4e4b\u540e\u53eb exit section\u3002</p> <ul> <li>Single-core system: preventing interrupts</li> <li>Multiple-processor: preventing interrupts are not feasible (depending on if kernel is preemptive or non-preemptive)<ul> <li>Preemptive \u2013 allows preemption of process when running in kernel mode</li> <li>Non-preemptive \u2013 runs until exits kernel mode, blocks, or voluntarily yields CPU</li> </ul> </li> </ul> <ul> <li>Mutual Exclusion\uff08\u4e92\u65a5\u8bbf\u95ee\uff09<ul> <li>\u5728\u540c\u4e00\u65f6\u523b\uff0c\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\u4e34\u754c\u533a</li> </ul> </li> <li>Progress\uff08\u7a7a\u95f2\u8ba9\u8fdb\uff09<ul> <li>\u5f53\u6ca1\u6709\u7ebf\u7a0b\u5728\u6267\u884c\u4e34\u754c\u533a\u4ee3\u7801\u65f6\uff0c\u5fc5\u987b\u5728\u7533\u8bf7\u8fdb\u5165\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u4e2d\u9009\u62e9\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5141\u8bb8\u5176\u6267\u884c\u4e34\u754c\u533a\u4ee3\u7801\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u6267\u884c\u7684\u8fdb\u5c55</li> </ul> </li> <li>Bounded waiting\uff08\u6709\u9650\u7b49\u5f85\uff09<ul> <li>\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7533\u8bf7\u8fdb\u5165\u4e34\u754c\u533a\u540e\uff0c\u5fc5\u987b\u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\u83b7\u5f97\u8bb8\u53ef\u5e76\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u4e0d\u80fd\u65e0\u9650\u7b49\u5f85</li> </ul> </li> </ul>"},{"location":"OS/chap06/#petersons-solution","title":"Peterson\u2019s Solution","text":"<p>Peterson\u2019s solution solves two-processes/threads synchronization (Only works for two processes case)</p> <ul> <li>It assumes that LOAD and STORE are atomic<ul> <li>atomic: execution cannot be interrupted</li> </ul> </li> <li>Two processes share two variables<ul> <li><code>boolean flag[2]</code>: whether a process is ready to enter the critical section</li> <li><code>int turn</code>: whose turn it is to enter the critical section</li> </ul> </li> </ul> <p>\u9a8c\u8bc1\u4e09\u4e2a\u6761\u4ef6</p> <ul> <li>Mutual exclusion<ul> <li>P0 enters CS:<ul> <li>Either <code>flag[1]=false</code> or <code>turn=0</code></li> <li>Now prove P1 will not be able to enter CS</li> </ul> </li> <li>Case 1: <code>flag[1]=false</code> -&gt; P1 is out CS</li> <li>Case 2: <code>flag[1]=true</code>, <code>turn=1</code> -&gt; P0 is looping, contradicts with P0 is in CS</li> <li>Case 3: <code>flag[1]=true</code>, <code>turn=0</code> -&gt; P1 is looping</li> </ul> </li> <li> <p>Process requirement</p> <p></p> </li> <li> <p>Bounded waiting</p> <p></p> <p>Whether P0 enters CS depends on P1; Whether P1 enters CS depends on P0; P0 will enter CS after one limited entry P1</p> </li> </ul> <p>Peterson\u2019s Solution is not guaranteed to work on modern architectures.</p> <ul> <li>Only works for two processes case</li> <li>It assumes that LOAD and STORE are atomic</li> <li> <p>Instruction reorder</p> <p>\u6307\u4ee4\u4f1a\u4e71\u5e8f\u6267\u884c\u3002</p> </li> </ul> <p>Example</p> <p></p> <p>100 is the expected output. \u4f46\u662f\u7ebf\u7a0b 2 \u7684\u4ee3\u7801\u53ef\u80fd\u88ab\u4e71\u5e8f\uff0c\u4e24\u6761\u6307\u4ee4\u4ea4\u6362\u987a\u5e8f\uff0c\u8fd9\u6837\u8f93\u51fa\u5c31\u53ef\u80fd\u53d8\u6210 0\u3002 </p>"},{"location":"OS/chap06/#hardware-support-for-synchronization","title":"Hardware Support for Synchronization","text":"<p>Many systems provide hardware support for critical section code</p> <ul> <li>Uniprocessors: disable interrupts</li> <li>Solutions:<ul> <li>Memory barriers</li> <li>Hardware instructions<ul> <li>test-and-set: either test memory word and set value</li> <li>compare-and-swap: compare and swap contents of two memory words</li> </ul> </li> <li>Atomic variables</li> </ul> </li> </ul>"},{"location":"OS/chap06/#memory-barriers","title":"Memory Barriers","text":"<p>Memory model are the memory guarantees a computer architecture makes to application programs.</p> <ul> <li> <p>Strongly ordered \u2013 where a memory modification of one processor is immediately visible to all other processors.</p> <p>\u4e00\u4e2a\u5185\u5b58\u7684\u4fee\u6539\u8981\u7acb\u523b\u88ab\u6240\u6709\u7684 processors \u770b\u5230\u3002</p> </li> <li> <p>Weakly ordered \u2013 where a memory modification of one processor may not be immediately visible to all other processors.</p> </li> </ul> <p>A memory barrier is an instruction that forces any change in memory to be propagated (made visible) to all other processors.  </p> <p>Example</p> <p></p> <ul> <li>X86 support<ul> <li>\u5199\u5185\u5b58\u5c4f\u969c (Store Memory Barrier)\uff1a\u5728\u6307\u4ee4\u540e\u63d2\u5165 Store Barrier\uff0c\u80fd\u8ba9\u5199\u5165\u7f13\u5b58\u4e2d\u6700\u65b0\u6570\u636e\u66f4\u65b0\u5199\u5165\u5185\u5b58\u4e2d\uff0c\u8ba9\u5176\u4ed6\u7ebf\u7a0b\u53ef\u89c1\u3002 \u5f3a\u5236\u5199\u5165\u5185\u5b58\uff0c\u8fd9\u79cd\u663e\u5f0f\u8c03\u7528\uff0c\u4e0d\u4f1a\u8ba9 CPU \u53bb\u8fdb\u884c\u6307\u4ee4\u91cd\u6392\u5e8f\u3002</li> <li>\u8bfb\u5185\u5b58\u5c4f\u969c (Load Memory Barrier)\uff1a\u5728\u6307\u4ee4\u540e\u63d2\u5165 Load Barrier\uff0c\u53ef\u4ee5\u8ba9\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u5931\u6548\uff0c\u5f3a\u5236\u91cd\u65b0\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u6570\u636e\u3002\u4e5f\u662f\u4e0d\u4f1a\u8ba9 CPU \u53bb\u8fdb\u884c\u6307\u4ee4\u91cd\u6392\u3002</li> </ul> </li> </ul>"},{"location":"OS/chap06/#hardware-instructions","title":"Hardware Instructions","text":"<p>Special hardware instructions that allow us to either test-and modify the content of a word, or two swap the contents of two words atomically (uninterruptable)</p>"},{"location":"OS/chap06/#test-and-set-instruction","title":"Test-and-Set Instruction","text":"<p>Defined as below, but atomically.  <pre><code>bool test_set (bool *target)\n{\nbool rv = *target;\n*target = TRUE;\nreturn rv:\n}\n</code></pre></p> <p>Lock with Test-and-Set</p> <pre><code>bool lock = FALSE\ndo {\nwhile (test_set(&amp;lock)); // busy wait\ncritical section\nlock = FALSE;\nremainder section } while (TRUE);\n</code></pre> <p>Bounded Waiting for Test-and-Set Lock</p> <p></p>"},{"location":"OS/chap06/#compare-and-swap-instruction","title":"Compare-and-Swap Instruction","text":"<p>Executed atomically, the swap takes place only under this condition.</p> <pre><code>int compare_and_swap(int *value, int expected, int new_value)\n{\nint temp = *value;\nif (*value == expected)\n*value = new_value;\nreturn temp;\n}\n</code></pre> <p>Shared integer lock initialized to 0; <pre><code>while (true)\n{\nwhile (compare_and_swap(&amp;lock, 0, 1) != 0); /* do nothing */\n/* critical section */\nlock = 0;\n/* remainder section */\n}\n</code></pre></p> <p>x86 \u4e2d\u5b9e\u73b0\u4e86 <code>cmpxchg</code>\u3002</p>"},{"location":"OS/chap06/#atomic-variables","title":"Atomic Variables","text":"<p>One tool is an atomic variable that provides atomic (uninterruptible) updates on basic data types such as integers and booleans. </p> <p>The <code>increment()</code> function can be implemented as follows: <pre><code>void increment(atomic_int *v) {\nint temp;\ndo {\ntemp = *v;\n} while (temp != (compare_and_swap(v,temp,temp+1)));\n}\n</code></pre></p>"},{"location":"OS/chap06/#mutex-lock","title":"Mutex Lock","text":"<p>Mutex Locks \u652f\u6301 <code>acquire()</code> \uff08\u83b7\u5f97\u8fd9\u4e2a\u9501\uff09<code>release()</code>\uff08\u91ca\u653e\u8fd9\u4e2a\u9501\uff09\u3002\u56e0\u6b64 <code>acquire, release</code> \u662f\u539f\u5b50\u7684\u3002</p> <p>This solution requires busy waiting</p> <ul> <li>This lock therefore called a spinlock</li> </ul> <pre><code>bool locked = false;\nacquire() {\nwhile (compare_and_swap(&amp;locked, false, true))\n; //busy waiting\n}\nrelease() {\nlocked = false;\n}\n</code></pre> <p>\u95ee\u9898\uff1a\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u6709\u65f6\u95f4\u7247\uff0c\u4f46\u662f\u62ff\u4e0d\u5230\u9501\uff0c\u4e00\u76f4 spin\uff0c\u4f1a\u6d6a\u8d39 CPU \u65f6\u95f4\u3002</p> <p>we put the busy waiting thread into suspended (yield-&gt; moving from running to sleeping) When the lock is locked, change process\u2019s state to SLEEP, add to the queue, and call <code>schedule()</code></p>"},{"location":"OS/chap06/#semaphore","title":"Semaphore","text":"<p>Synchronization tool that provides more sophisticated ways (than Mutex locks) for process to synchronize their activities.</p> <p>Can only be accessed via two indivisible (atomic) operations</p> <ul> <li> <p><code>wait()</code> and <code>signal()</code> (Originally called P() and V() Dutch)</p> <ul> <li> <p><code>wait()</code></p> <p>\u60f3\u62ff\u5230\u8fd9\u4e2a semaphore\uff0c\u5982\u679c\u62ff\u4e0d\u5230\uff0c\u5c31\u4e00\u76f4\u7b49\u5f85\u3002 <pre><code>wait(S) { while (S &lt;= 0) ; // busy wait\nS--;\n}\n</code></pre></p> </li> <li> <p><code>signal()</code></p> <p>\u91ca\u653e semaphore\u3002 <pre><code>signal(S) { S++;\n}\n</code></pre></p> </li> </ul> </li> <li> <p>Counting semaphore \u2013 integer value can range over an unrestricted domain</p> </li> <li>Binary semaphore \u2013 integer value can range only between 0 and 1<ul> <li>Same as a mutex lock</li> </ul> </li> </ul> <p>Example</p> <p>\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u540c\u6b65\u95ee\u9898\uff1a </p>"},{"location":"OS/chap06/#semaphore-w-waiting-queue","title":"Semaphore w/ waiting queue","text":"<p>With each semaphore there is an associated waiting queue. </p> <pre><code>typedef struct { int value; struct list_head * waiting_queue; } semaphore; </code></pre> <p>Two operations:</p> <ul> <li> <p><code>block</code> \u2013 place the process invoking the operation on the appropriate waiting queue.</p> <p>\u628a\u5f53\u524d\u7684\u8fdb\u7a0b sleep\uff0c\u653e\u5230 waiting queue \u91cc\u9762\u3002</p> </li> <li> <p><code>wakeup</code> \u2013 remove one of processes in the waiting queue and place it in the ready queue.</p> <p>\u4ece waiting queue \u91cc\u9762\u62ff\u51fa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u653e\u5230 ready queue \u91cc\u9762\u3002</p> </li> </ul> <p>Implemetation with waiting queue: (need to be atomic by spinlock)</p> <pre><code>wait(semaphore *S) {\nS-&gt;value--;\nif (S-&gt;value &lt; 0) {\nadd this process to S-&gt;list;\nblock();\n}\n}\nsignal(semaphore *S) {\nS-&gt;value++;\nif (S-&gt;value &lt;= 0) {\nremove a proc.P from S-&gt;list;\nwakeup(P);\n}\n}\n</code></pre> <p>\u8fd9\u91cc\u6709 busy waiting, \u4f46\u5728 critical section \u91cc\u4e0d\u9700\u8981\uff08\u6ca1\u6709\u62ff\u5230 semaphor \u5c31\u4f1a sleep\uff0c\u8fd8\u6ca1\u6709\u8d70\u5230 critical section\uff09\uff0c\u53ea\u6709 <code>wait</code> \u548c <code>signal</code> \u91cc\u9700\u8981 busy wait\u3002</p> <p>Comparison between mutex and semaphore</p> <ul> <li>Mutex or spinlock<ul> <li>Pros: no blocking</li> <li>Cons: Waste CPU on looping</li> <li>Good for short critical section</li> </ul> </li> <li>Semaphore<ul> <li>Pros: no looping</li> <li>Cons: context switch is time-consuming</li> <li>Good for long critical section</li> </ul> </li> </ul> Semaphore w/ waiting queue in practice <p> </p>"},{"location":"OS/chap06/#deadlock-and-starvation","title":"Deadlock and Starvation","text":"<ul> <li> <p>Deadlock: two or more processes are waiting indefinitely for an event that can be caused by only one of the waiting processes.</p> <p></p> </li> <li> <p>Starvation: indefinite blocking. a process may never be removed from the semaphore\u2019s waiting queue.</p> </li> </ul> <p>Deadlock \u662f\u5927\u5bb6\u90fd\u62ff\u4e0d\u5230\u9501\uff0cStarvation \u662f\u6709\u7684\u8fdb\u7a0b\u62ff\u4e0d\u5230\u9501\u3002</p>"},{"location":"OS/chap06/#priority-inversion","title":"Priority Inversion","text":"<p>Priority Inversion: a higher priority process is indirectly preempted by a lower priority task. </p> <p>\u9ad8\u4f18\u5148\u7ea7\u7b49\u4f4e\u4f18\u5148\u7ea7\uff08\u9501\u5148\u88ab\u4f4e\u4f18\u5148\u7ea7\u62ff\u5230\uff09\uff0c\u4f46\u662f\u4f4e\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u62ff\u4e0d\u5230 CPU\uff0c\u5c31\u65e0\u6cd5\u91ca\u653e\u9501\u3002</p> <p>Priority Inversion</p> <p></p> <p>Solution: priority inheritance </p> <ul> <li> <p>temporary assign the highest priority of waiting process (PH) to the process holding the lock (PL)</p> <p>\u5982\u679c\u4f4e\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u62ff\u5230\u4e86\u9501\uff0c\u800c\u4e14\u8fd9\u4e2a\u9501\u4e0a\u6709\u9ad8\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u5728\u7b49\uff0c\u5c31\u63d0\u9ad8\u4f4e\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\uff0c\u7ee7\u627f\u9501\u7684\u4f18\u5148\u7ea7\uff08\u53d6\u51b3\u4e8e\u5728\u8fd9\u4e2a\u9501\u4e0a\u7b49\u5f85\u7684\u8fdb\u7a0b\u7684\u6700\u9ad8\u7684\u4f18\u5148\u7ea7\uff09\u3002</p> </li> </ul>"},{"location":"OS/chap06/#linux-synchronization","title":"Linux Synchronization","text":"<p>2.6 \u4ee5\u524d\u7684\u7248\u672c\u7684 kernel \u4e2d\u901a\u8fc7\u7981\u7528\u4e2d\u65ad\u6765\u5b9e\u73b0\u4e00\u4e9b\u77ed\u7684 critical section\uff1b2.6 \u53ca\u4e4b\u540e\u7684\u7248\u672c\u7684 kernel \u662f\u62a2\u5360\u5f0f\u7684\u3002</p> <p>Linux \u63d0\u4f9b\uff1a</p> <ul> <li>Atomic integers</li> <li>Spinlocks</li> <li> <p>Semaphores</p> <p>\u5728 <code>linux/include/linux/semaphore.h</code> \u4e2d\uff0c<code>down()</code> \u662f lock\uff08\u5982\u679c\u8981\u8fdb\u5165 sleep\uff0c\u5b83\u4f1a\u5148\u91ca\u653e\u9501\u518d\u7761\u7720\uff0c\u5524\u9192\u4e4b\u540e\u4f1a\u7acb\u523b\u91cd\u65b0\u83b7\u5f97\u9501\uff09\uff0c<code>up()</code> \u662f unlock\u3002 * Reader-writer locks</p> </li> </ul>"},{"location":"OS/chap06/#posix-synchronization","title":"POSIX Synchronization","text":"<p>POSIX API provides</p> <ul> <li>mutex locks</li> <li>semaphores</li> <li>condition variable</li> </ul>"},{"location":"OS/chap06/#mutex-locks","title":"Mutex Locks","text":"<ul> <li> <p>Creating and initializing the lock</p> <pre><code>#include &lt;pthread.h&gt;\npthread_mutex_t mutex;\n/* create and initialize the mutex lock */\npthread_mutex_init(&amp;mutex, NULL);\n</code></pre> </li> <li> <p>Acquiring and releasing the lock</p> <pre><code>/* acquire the mutex lock */\npthread_mutex_lock(&amp;mutex);\n/* critical section */\n/* release the mutex lock */\npthread_mutex_unlock(&amp;mutex);\n</code></pre> </li> </ul>"},{"location":"OS/chap06/#semaphores","title":"Semaphores","text":"<p>Named semaphores can be used by unrelated processes, unnamed cannot. <code>sem_open(), sem_init(), sem_wait(), sem_post()</code></p>"},{"location":"OS/chap06/#unamed-semaphores","title":"Unamed Semaphores","text":"<ul> <li> <p>Creating an initializing the semaphore:</p> <pre><code>#include &lt;semaphore.h&gt;\nsem_t sem;\n/* Create the semaphore and initialize it to 1 */\nsem_init(&amp;sem, 0, 1);\n</code></pre> </li> <li> <p>Acquiring and releasing the semaphore:</p> <pre><code>/* acquire the semaphore */\nsem_wait(&amp;sem);\n/* critical section */\n/* release the semaphore */\nsem_post(&amp;sem);\n</code></pre> </li> </ul>"},{"location":"OS/chap06/#named-semaphores","title":"Named Semaphores","text":"<ul> <li> <p>Creating an initializing the semaphore:</p> <pre><code>#include &lt;semaphore.h&gt;\nsem_t *sem;\n/* Create the semaphore and initialize it to 1 */\nsem = sem_open(\"SEM\", O_CREAT, 0666, 1);\n</code></pre> </li> <li> <p>Another process can access the semaphore by referring to its name SEM.</p> </li> <li> <p>Acquiring and releasing the semaphore:</p> <pre><code>/* acquire the semaphore */\nsem_wait(sem);\n/* critical section */\n/* release the semaphore */\nsem_post(sem);\n</code></pre> </li> </ul>"},{"location":"OS/chap06/#condition-variable","title":"Condition Variable","text":"<p>When should we use condition variables?</p> <p></p> <p>Operations supported by a condition variable are:</p> <ul> <li> <p><code>wait(condition, lock)</code>: release lock, put thread to sleep until condition is signaled; when thread wakes up again, re-acquire lock before returning.</p> <p>\u7b49\u5f85\u4e00\u4e2a\u6761\u4ef6\uff08\u5148\u653e\u9501\u7136\u540e\u7761\u7720\uff0c\u7b49\u5f85\u88ab\u5524\u9192\uff0c\u88ab\u5524\u9192\u4e4b\u540e\u91cd\u65b0\u83b7\u5f97\u9501\uff09\u3002</p> </li> <li> <p><code>signal(condition, lock)</code>: if any threads are waiting on condition, wake up one of them. Caller must hold lock, which must be the same as the lock used in the wait call.</p> <p>\u5524\u9192\u4e00\u4e2a\u7b49\u5f85\u7ebf\u7a0b\u3002</p> </li> <li> <p><code>broadcast(condition, lock)</code>: same as signal, except wake up all waiting threads.</p> <p>\u5524\u9192\u6240\u6709\u7684\u7b49\u5f85\u7ebf\u7a0b\u3002</p> </li> </ul> <pre><code>pthread_mutex_t mutex; pthread_cond_t cond_var;\npthread_mutex_init(&amp;mutex, NULL); pthread_cond_init(&amp;cond_var, NULL);\n// Thread waiting for the condition a == b to become true:\npthread_mutex_lock(&amp;mutex);\nwhile(a != b)                               // \u4e00\u822c\u8981\u91cd\u590d\u5c1d\u8bd5\uff0c\u6240\u4ee5\u7528 while \u800c\u4e0d\u662f if\npthread_cond_wait(&amp;cond_var, &amp;mutex);   // release lock when wait, acquire lock when being signaled\npthread_mutex_unlock(&amp;mutex);\n// Thread signaling another thread waiting on the condition variable:\npthread_mutex_lock(&amp;mutex);\na = b;\npthread_cond_signal(&amp;cond_var);\npthread_mutex_unlock(&amp;mutex);\n</code></pre> Example <p></p> <ul> <li>Condition variable can wake up all threads, semaphore can only wake up one by one.  </li> <li>Mutex is used to guarantee that operations are atomic.</li> </ul>"},{"location":"OS/chap06/#takeaway","title":"Takeaway","text":"<p>Takeaway</p> <ul> <li>Data race<ul> <li>Less than 2M example</li> <li>Reason</li> </ul> </li> <li>Critical section<ul> <li>Three requirements</li> </ul> </li> <li>Peterson\u2019s Solution</li> <li>Hardware Support for Synchronization<ul> <li>Memory barrier, hardware instruction, atomic variables</li> </ul> </li> <li>Mutex lock</li> <li>Semaphore</li> <li>Linux provides:<ul> <li>atomic integers</li> <li>spinlocks</li> <li>semaphores</li> <li>reader-writer lock</li> </ul> </li> </ul>"},{"location":"Quan/","title":"\u91cf\u5b50\u8ba1\u7b97\u7406\u8bba\u57fa\u7840\u4e0e\u8f6f\u4ef6\u7cfb\u7edf","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u91cf\u5b50\u8ba1\u7b97\u7406\u8bba\u57fa\u7840\u4e0e\u8f6f\u4ef6\u7cfb\u7edf\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0  </p> <ul> <li>\u8001\u5e08: \u5362\u4e3d\u5f3a</li> </ul>"},{"location":"Quan/chap1/","title":"\u91cf\u5b50\u6001\u4e0e\u91cf\u5b50\u95e8","text":"<p>\u91cf\u5b50\u672f\u8bed\u4e0e\u7ebf\u4ee3\u672f\u8bed\u5bf9\u7167</p> <p> </p>"},{"location":"Quan/chap1/#_2","title":"\u5355\u91cf\u5b50\u6bd4\u7279","text":""},{"location":"Quan/chap1/#_3","title":"\u91cf\u5b50\u6bd4\u7279\u7684\u53e0\u52a0\u6001","text":"<p>\u91cf\u5b50\u6bd4\u7279\u7684\u4e24\u4e2a\u53ef\u80fd\u7684\u72b6\u6001\u4e3a \\(|0\\rangle\\) \u548c \\(|1\\rangle\\) \u6001\u3002\u5f0f\u4e2d\u7684 \\(|\\rangle\\) \u7b26\u53f7\u88ab\u79f0\u4e3a Dirac \u8bb0\u53f7\uff0c\u662f\u91cf\u5b50\u529b\u5b66\u4e2d\u72b6\u6001\u7684\u6807\u51c6\u7b26\u53f7\u3002 \u91cf\u5b50\u6bd4\u7279\u53ef\u4ee5\u5904\u4e8e\u9664 \\(|0\\rangle\\) \u548c \\(|1\\rangle\\) \u6001\u4ee5\u5916\u7684\u72b6\u6001\uff0c\u91cf\u5b50\u6bd4\u7279\u662f\u72b6\u6001\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u5373\u53e0\u52a0\u6001\u3002  </p> \\[ |\\psi\\rangle = \\alpha|0\\rangle + \\beta|1\\rangle \\] <p>\u8fd9\u91cc \\(|0\\rangle\\) \u548c \\(|1\\rangle\\) \u662f\u53e0\u52a0\u6001\u7684\u57fa\u77e2\u6001\uff0c\u662f\u6784\u6210\u5411\u91cf\u7a7a\u95f4\u7684\u4e00\u7ec4\u6b63\u4ea4\u57fa\u3002</p> <p>\u51e1\u662f\u53ef\u4ee5\u8868\u793a\u4e24\u4e2a\u72b6\u6001\u53e0\u52a0\u7684\u90fd\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u91cf\u5b50\u6bd4\u7279\uff0c\u5982\u7535\u5b50\u53ef\u4ee5\u5f80\u4e0a\u81ea\u65cb\uff0c\u4e5f\u53ef\u4ee5\u5f80\u4e0b\u81ea\u65cb\uff1b\u539f\u5b50\u5468\u56f4\u7684\u7535\u5b50\u662f\u5728\u57fa\u6001\u548c\u6fc0\u53d1\u6001\u4e4b\u95f4\u8dc3\u8fc1\u3002</p> <p>\u91cf\u5b50\u6bd4\u7279\u53ef\u4ee5\u7528\u5411\u91cf\u8868\u793a\uff0c\u5982</p> \\[ |\\psi\\rangle = \\alpha|0\\rangle + \\beta|1\\rangle = \\begin{bmatrix} \\alpha \\\\ \\beta \\end{bmatrix} \\] <p>\u5728\u8be5\u5f0f\u4e2d\uff0c\\(\\alpha\\) \u548c \\(\\beta\\) \u88ab\u79f0\u4e3a\u590d\u7cfb\u6570\uff08\u632f\u5e45\uff09\u3002</p> <p>\u53e6\u4e00\u7ec4\u5e38\u7528\u7684\u6b63\u4ea4\u57fa</p> \\[ \\begin{align*} |+\\rangle &amp; = \\dfrac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle) = \\dfrac{1}{2}\\begin{bmatrix} 1 \\\\ 1 \\end{bmatrix}\\\\ |-\\rangle &amp; = \\dfrac{1}{\\sqrt{2}}(|0\\rangle - |1\\rangle) = \\dfrac{1}{2}\\begin{bmatrix} 1 \\\\ -1 \\end{bmatrix} \\end{align*} \\]"},{"location":"Quan/chap1/#_4","title":"\u91cf\u5b50\u6001\u77e2\u5185\u79ef","text":"<p>bra-ket \u8868\u793a\u6cd5\uff0c\u5176\u4e2d bra \\(|\\psi \\rangle\\) \u8868\u793a\u4e00\u4e2a\u5217\u5411\u91cf\uff0c\u5176\u5bf9\u5e94\u7684 ket \u4e3a \\(\\langle \\psi |\\)\uff0c\u4e14 \\(\\langle \\psi |\\) \u4e3a \\(|\\psi \\rangle\\) \u7684\u5171\u8f6d\u8f6c\u7f6e\uff0c\u5373 \\(\\langle \\psi |=[\\alpha^*\\quad \\beta^*]\\)\uff08\\(\\alpha^*, \\beta^*\\) \u4e3a \\(\\alpha,\\beta\\) \u7684\u5171\u8f6d\u590d\u6570\uff1b\u5bf9\u5411\u91cf\u8f6c\u7f6e\uff0c\u5bf9\u91cc\u9762\u7684\u5143\u7d20\u6c42\u5171\u8f6d\uff09</p> <p>\u4e24\u4e2a\u5411\u91cf\u7684\u5185\u79ef\u662f\u4e00\u4e2a\u6807\u91cf\uff0c\u5b9a\u4e49\u4e3a ket \u5411\u91cf\u548c bra \u5411\u91cf\u7684\u77e9\u9635\u4e58\u79ef\uff1a</p> \\[ \\langle a| = [a_0^*,\\ldots,a_n^*] ,|b\\rangle = \\begin{bmatrix} b_0 \\\\ \\vdots \\\\ b_n \\end{bmatrix} \\quad \\langle a|b\\rangle = [a_0^*,\\ldots,a_n^*]\\begin{bmatrix} b_0 \\\\ \\vdots \\\\ b_n \\end{bmatrix} = \\sum_{i=0}^n a_i^*b_i \\] <p>\u4e24\u4e2a\u5411\u91cf\u7684\u5185\u79ef\u4e3a 0\uff0c\u5219\u79f0\u4e24\u4e2a\u5411\u91cf\u6b63\u4ea4\u3002\u901a\u8fc7\u5411\u91cf\u4e0e\u81ea\u8eab\u7684\u5185\u79ef\u7684\u5f00\u65b9\uff0c\u6765\u5b9a\u4e49\u5411\u91cf\u7684\u6b27\u51e0\u91cc\u5f97\u8303\u6570\uff1a\\(||\\ |v\\rangle\\ ||=\\sqrt{\\langle v|v\\rangle }\\)</p> <p>\u5f53\u6211\u4eec\u6d4b\u91cf\u91cf\u5b50\u6001\u65f6\uff0c\u4f1a\u53d1\u751f\u91cf\u5b50\u6001\u7684\u574d\u7f29\uff08\u53c8\u79f0\u4e3a\u91cf\u5b50\u6001\u7684\u6295\u5f71\uff09\u3002 \u5176\u4e2d\u5f97\u5230 0 \u6001\u7684\u6982\u7387\u4e3a \\(|\\alpha|^2\\)\uff0c\u5f97\u5230 1 \u6001\u7684\u6982\u7387\u4e3a \\(|\\beta|^2\\)\uff0c\u5e76\u4e14 \\(|\\alpha|^2+|\\beta|^2=1\\)</p> <p>\u8fd9\u88ab\u79f0\u4e3a\u5f52\u4e00\u5316\u6761\u4ef6\u3002\u56e0\u6b64\uff0c\u901a\u5e38\u91cf\u5b50\u6bd4\u7279\u7684\u72b6\u6001\u65f6\u4e8c\u7ef4\u590d\u5411\u91cf\u7a7a\u95f4\u4e2d\u7684\u5355\u4f4d\u5411\u91cf\uff0c\u5176\u5411\u91cf\u8868\u793a\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a</p> <ul> <li>\u5411\u91cf\u7684\u5404\u5206\u91cf\u4e3a\u590d\u6570\uff1b</li> <li>\u5411\u91cf\u7684\u6b27\u51e0\u91cc\u5f97\u8303\u6570\u4e3a 1</li> </ul> <p>\u91cf\u5b50\u4e0d\u53ef\u514b\u9686\uff1a\u4e0d\u80fd\u627e\u5230\u4e00\u4e2a\u7b97\u7b26\uff08\u77e9\u9635\uff09\uff0c\u628a\u91cf\u5b50\u6001 \\(|\\psi\\rangle\\) \u6620\u5c04\u5230\u5230\u53e6\u4e00\u4e2a\u91cf\u5b50\u6001 \\(|\\psi\\rangle|\\psi\\rangle\\) \u7684\u53e0\u52a0\u6001\u4e0a\u3002 To be completed...</p>"},{"location":"Quan/chap1/#_5","title":"\u5f20\u91cf\u79ef","text":"<p>\u5f20\u91cf\u79ef\u5c06\u4e24\u4e2a\u5411\u91cf\u7a7a\u95f4\u7684\u5411\u91cf\u5408\u5e76\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u5411\u91cf\u7a7a\u95f4\uff0c\u53ef\u8868\u793a\u4e3a \\(V\\oplus W\\)\u3002\u5f20\u91cf\u79ef\u53ef\u4ee5\u83b7\u5f97\u591a\u4e2a\u91cf\u5b50\u6001\u7684\u590d\u5408\u91cf\u5b50\u6001\u3002\u5bf9\u4e8e\u4e00\u4e2a\u590d\u5408\u7684\u91cf\u5b50\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f20\u91cf\u79ef\u7684\u65b9\u5f0f\u5c06\u5176\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u5355\u91cf\u5b50\u6bd4\u7279\u3002 </p> <p>e.g. \\(|00\\rangle = |0\\rangle \\oplus |0\\rangle, |01\\rangle = |0\\rangle \\oplus |1\\rangle\\)</p>"},{"location":"Quan/chap1/#_6","title":"\u91cf\u5b50\u6bd4\u7279\u7684\u51e0\u4f55\u8868\u793a","text":"<p>\u5411\u91cf\u53ef\u4ee5\u548c\u6781\u5750\u6807\u5bf9\u5e94\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u5355\u91cf\u5b50\u6bd4\u7279\u7684\u91cf\u5b50\u6001\u53ef\u89c6\u5316\u5728\u4e00\u4e2a\u7403\u9762\u4e2d\uff0c\u8fd9\u4e2a\u7403\u9762\u79f0\u4e3a Bloch \u7403\u3002</p> <p>To be completed...</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u91cf\u5b50\u6bd4\u7279\uff0c\u5b83\u7684\u72b6\u6001\u53ef\u80fd\u662f Bloch \u7403\u4e0a\u7684\u4efb\u610f\u4e00\u70b9\uff0c\u7531\u6b64\u53ef\u89c1\u4e00\u4e2a\u91cf\u5b50\u6bd4\u7279\u5c31\u53ef\u4ee5\u5305\u542b\u5927\u91cf\u4fe1\u606f\u3002\u4f46\u91cf\u5b50\u6bd4\u7279\u88ab\u6d4b\u91cf\u540e\u4fbf\u4f1a\u574d\u7f29\uff0c\u56e0\u6b64\u5355\u6b21\u6d4b\u91cf\u53ea\u80fd\u83b7\u53d6\u4e00\u6bd4\u7279\u7684\u4fe1\u606f\uff0c\u53ea\u6709\u5728\u6d4b\u91cf\u4e86\u65e0\u6570\u591a\u4e2a\u201c\u5b8c\u5168\u76f8\u540c\u201d\u7684\u91cf\u5b50\u6bd4\u7279\u540e\uff0c\u624d\u80fd\u786e\u5b9a \\(\\alpha\\) \u548c \\(\\beta\\)\u3002</p> <p>\u8574\u542b\u4e86\u65e0\u9650\u4fe1\u606f\uff0c\u4f46\u8981\u5f97\u5230\u65e0\u9650\u7684\u4fe1\u606f\u9700\u8981\u4ed8\u51fa\u65e0\u9650\u7684\u4ee3\u4ef7\u3002</p>"},{"location":"Quan/chap1/#_7","title":"\u591a\u91cf\u5b50\u6bd4\u7279","text":"<p>\u4e24\u4e2a\u91cf\u5b50\u6bd4\u7279\uff0c\u57fa\u672c\u72b6\u6001\u5c31\u6709 00, 01, 10, 11\u3002 </p> <p>\u91cf\u5b50\u7ea0\u7f20\u662f\u91cf\u5b50\u53e0\u52a0\u7684\u5fc5\u7136\u7ed3\u679c\u3002 \u5982\u679c\u4e00\u4e2a\u591a\u91cf\u5b50\u6bd4\u7279\u53ef\u4ee5\u5206\u89e3\u4e3a\u591a\u4e2a\u5355\u91cf\u5b50\u6bd4\u7279\u7684\u5f20\u91cf\u79ef\uff0c\u5219\u79f0\u8be5\u591a\u91cf\u5b50\u6bd4\u7279\u4e3a\u975e\u7ea0\u7f20\u6001\uff0c\u5426\u5219\u79f0\u4e3a\u7ea0\u7f20\u6001\u3002</p> <p>\u7ea0\u7f20\u5224\u5b9a</p> <ul> <li>\\(\\dfrac{1}{2} | 00\\rangle + \\dfrac{1}{2} | 01\\rangle - \\dfrac{1}{2} | 10\\rangle - \\dfrac{1}{2} | 11\\rangle\\) \u53ef\u4ee5\u5206\u89e3\u4e3a $\\left(\\dfrac{1}{\\sqrt 2} | 0\\rangle - \\dfrac{1}{\\sqrt 2} | 1\\rangle\\right)\\oplus\\left(\\dfrac{1}{\\sqrt 2} | 0\\rangle + \\dfrac{1}{\\sqrt 2} | 1\\rangle\\right), \u6240\u4ee5\u662f\u65e0\u5173\u7684\u53ef\u5206\u7684\u3002  </li> <li>\\(\\dfrac{1}{\\sqrt 2} | 00\\rangle + \\dfrac{1}{\\sqrt 2} | 11\\rangle\\) \u4e0d\u80fd\u5206\u89e3\uff0c\u56e0\u6b64\u662f\u4e0d\u53ef\u5206\u7684\u3001\u7ea0\u7f20\u7684\u3002 \u7ea0\u7f20\u610f\u5473\u7740\u4f60\u6d4b\u4e86\u7b2c\u4e00\u4e2a\u6bd4\u7279\u4e4b\u540e\uff0c\u7b2c\u4e8c\u4e2a\u6bd4\u7279\u4e0d\u7528\u6d4b\u91cf\u5c31\u53ef\u4ee5\u77e5\u9053\u7ed3\u679c\u3002</li> </ul> <p>\u590d\u5408\u7cfb\u7edf</p>"},{"location":"Quan/chap1/#_8","title":"\u8d1d\u5c14\u6001","text":"\\[ \\begin{align*} |\\psi^+\\rangle &amp; = \\dfrac{1}{\\sqrt{2}}(|00\\rangle + |11\\rangle), \\quad |\\psi^-\\rangle = \\dfrac{1}{\\sqrt{2}}(|00\\rangle - |11\\rangle) \\\\ |\\psi^+\\rangle &amp; = \\dfrac{1}{\\sqrt{2}}(|01\\rangle + |10\\rangle), \\quad |\\psi^-\\rangle = \\dfrac{1}{\\sqrt{2}}(|01\\rangle - |10\\rangle) \\end{align*}  \\] <p>\u8fd9\u6784\u6210\u4e86\u8d1d\u5c14\u57fa\uff0c\u4efb\u4f55\u4e24\u4e2a\u91cf\u5b50\u6bd4\u7279\u7684\u91cf\u5b50\u6001\u5411\u91cf\uff0c\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u56db\u4e2a\u8d1d\u5c14\u6001\u7684\u7ebf\u6027\u7ec4\u5408\u3002</p>"},{"location":"Quan/chap1/#_9","title":"\u5355\u91cf\u5b50\u95e8","text":"<p>\u95e8\u64cd\u4f5c\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u5411\u91cf\u8fdb\u884c\u77e9\u9635\u64cd\u4f5c\u3002\u5355\u91cf\u5b50\u6bd4\u7279\u7684\u91cf\u5b50\u95e8\u53ef\u4ee5\u7531 2\u00d72 \u7684\u77e9\u9635\u7ed9\u51fa\uff0c\u5176\u77e9\u9635\u5206\u91cf\u51b3\u5b9a\u4e86 \u91cf\u5b50\u95e8\u7684\u884c\u4e3a\u3002</p> <ul> <li> <p>\u91cf\u5b50\u975e\u95e8     </p> </li> <li> <p>Hadamard \u95e8 \u57fa\u6001\u53d8\u4e3a\u53e0\u52a0\u6001     </p> </li> <li> <p>\u6ce1\u5229\u77e9\u9635\u548c\u6ce1\u5229\u95e8 </p> </li> </ul> <p>\u91cf\u5b50\u8ba1\u7b97\u672c\u8d28\u662f\u9149\u77e9\u9635\u8ba1\u7b97\u3002 \u9149\u77e9\u9635\u5176\u9006\u7b49\u4e8e\u5176\u5171\u8f6d\u8f6c\u7f6e\uff0c\u5384\u7c73\u77e9\u9635\u7b49\u4e8e\u5176\u5171\u8f6d\u8f6c\u7f6e\u3002</p> Example <p></p> <p>\u53cc\u6bd4\u7279\u9700\u8981 44 \u7684\u77e9\u9635\uff0c\u4e09\u6bd4\u7279\u9700\u8981 88 \u7684\u77e9\u9635...</p> <p>\u9149\u77e9\u9635\u7684\u6027\u8d28\u4fdd\u8bc1\u4e86\u4f5c\u7528\u5728\u91cf\u5b50\u6001\u4e0a\u5f97\u5230\u7684\u7ed3\u679c\u4ecd\u7136\u6ee1\u8db3\u5f52\u4e00\u5316\u6761\u4ef6\uff0c\u5373\u4ecd\u7136\u662f\u5408\u6cd5\u7684\u91cf\u5b50\u6001\u3002\uff08\u6982\u7387\u548c\u4e3a 1\uff09</p> <p>\u76f8\u4f4d\u65cb\u8f6c\u95e8\u4f5c\u7528\u4e8e\u91cf\u5b50\u6bd4\u7279\u7684\u6001\u77e2\u91cf\u65f6\uff0c\u4f1a\u5f15\u5165\u4e00\u4e2a\u7279\u5b9a\u7684\u76f8\u4f4d\u56e0\u5b50\uff0c\u6539\u53d8\u91cf\u5b50\u6001\u7684\u76f8\u5bf9\u76f8\u4f4d\u3002  \u4f4d\u7f6e\u6ca1\u6709\u53d8\uff0c\u6539\u53d8\u4e86\u76f8\u4f4d\u3002\uff08\u6ce2\u51fd\u6570\uff09</p> <p>\u5355\u91cf\u5b50\u6bd4\u7279\u5206\u89e3</p>"},{"location":"Quan/chap1/#_10","title":"\u591a\u91cf\u5b50\u95e8","text":"<p>\u5047\u8bbe\u6211\u4eec\u6709\u9149\u77e9\u9635 U\uff0c\u53ef\u4ee5\u88ab\u8868\u8fbe\u4e3a\u5982\u4e0b\u5f62\u5f0f\uff1a</p>"},{"location":"Quan/chap1/#cnot-controlled-not-gate","title":"CNOT \u95e8\uff08Controlled-NOT Gate\uff09","text":"<p>\u4e00\u79cd\u7406\u89e3\u5f02\u6216\u95e8\u7684\u601d\u8def\u662f\u201c\u53d7\u63a7\u975e\u95e8\u201d\uff1a\u8f93\u5165 A \u662f\u4e00\u79cd\u201c\u63a7\u5236\u7aef\u201d\uff0c\u5f53 A \u4e3a 1 \u7684\u65f6\u5019\uff0cXOR \u5bf9 B \u65bd\u52a0\u975e\u95e8\uff1b\u800c\u5f53 A \u4e3a 0 \u7684\u65f6\u5019\uff0c\u5219\u4e0d\u65bd\u52a0\u975e\u95e8\u3002 </p> <p>\u9ad8\u4f4d\u4f5c\u4e3a\u63a7\u5236\u6bd4\u7279</p> <p></p> <p>\u6211\u4eec\u7528\u5b9e\u5fc3\u70b9\u8868\u793a\u63a7\u5236\u6bd4\u7279\uff0c\u52a0\u53f7\u8868\u793a\u76ee\u6807\u6bd4\u7279\u3002</p> <p>\u4f4e\u4f4d\u4f5c\u4e3a\u63a7\u5236\u6bd4\u7279</p> <p></p> <p>CNOT \u95e8\u53ef\u4ee5\u7528\u6765\u5236\u5907\u8d1d\u5c14\u6001\uff1a\u5c06 CNOT \u95e8\u4f5c\u7528\u5728\u975e\u53e0\u52a0\u6001\u4e0a\uff0c\u4f1a\u5c06 01 \u548c 11 \u7684\u632f\u5e45\u8c03\u6362\u3002</p> \\[ \\begin{align*} |a\\rangle = \\left[\\begin{matrix} a_{00} \\\\ a_{01} \\\\ a_{10} \\\\ a_{11} \\end{matrix}\\right], CNOT | a\\rangle = \\left[\\begin{matrix} a_{00} \\\\ a_{11} \\\\ a_{10} \\\\ a_{01} \\end{matrix}\\right] \\end{align*} \\] <p>Example</p> <p>\u6211\u4eec\u8f93\u5165\u57fa\u6001 \\(q_0q_1=|00\\rangle\\)\uff0c\u6211\u4eec\u5148\u8ba9 \\(q_0\\) \u901a\u8fc7 Hadamard \u95e8\uff0c\u53d8\u4e3a\u53e0\u52a0\u6001\uff0c\u5f97\u5230 \\(\\dfrac{1}{\\sqrt 2}\\left(|00\\rangle + |10 \\rangle\\right)\\) \u7136\u540e\u518d\u8ba9 \\(q_0q_1\\) \u901a\u8fc7 CNOT \u95e8\uff0c\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u8d1d\u5c14\u6001 \\(|\\psi^+\\rangle=\\dfrac{1}{\\sqrt{2}}(|00\\rangle + |11\\rangle)\\)\u3002</p> <p>\u91cf\u5b50\u9690\u5f62\u4f20\u6001\uff08\u91cf\u5b50\u4fdd\u5bc6\u901a\u4fe1\uff09</p> <p>To be completed...</p>"},{"location":"Quan/chap1/#swap-cswap","title":"SWAP \u95e8\u53ca CSWAP \u95e8","text":"<p>SWAP \u7528\u4e8e\u4ea4\u6362\u4e24\u4e2a\u91cf\u5b50\u6bd4\u7279\u7684\u72b6\u6001\u3002\u7535\u8def\u5199\u6cd5\u4e00\u822c\u662f\u6253\u4e24\u4e2a\u53c9\u3002</p> <p></p>"},{"location":"Quan/chap1/#toffoli","title":"Toffoli \u95e8","text":"<p>Toffoli \u95e8\u5373 CCNOT \u95e8\uff0c\u5b83\u6d89\u53ca 3 \u4e2a\u91cf\u5b50\u6bd4\u7279\uff0c\u4e24\u4e2a\u63a7\u5236\u6bd4\u7279\uff0c\u4e00\u4e2a\u76ee\u6807\u6bd4\u7279\uff0c\u4e24\u4e2a\u9ad8\u4f4d\u90fd\u4e3a 1 \u65f6 (\u9ad8\u4f4d\u4e3a\u63a7\u5236\u6bd4\u7279)\uff0c\u624d\u5c06\u4f4e\u4f4d\u91cf\u5b50\u6001\u7ffb\u8f6c\u3002</p> <p>\u63a7\u5236\u95e8\u5c31\u6253\u70b9\uff0c\u88ab\u63a7\u5236\u7684\u6bd4\u7279\u6253\u4e0a\u5341\u5b57\u3002</p> <p>To be completed...</p>"},{"location":"Quan/chap1/#_11","title":"\u91cf\u5b50\u9690\u5f62\u4f20\u6001","text":"<p>Alice \u62ff\u4e86\u9ad8\u4f4d\u6bd4\u7279\uff0cBob \u62ff\u4e86\u4f4e\u4f4d\u3002 \u8fd9\u91cc\u7684 \\(\\phi_{AB}\\) \u662f Alice, Bob \u6700\u5f00\u59cb\u7684 qubits, \\(\\psi\\) \u662f Alice \u60f3\u8981\u4f20\u9012\u7ed9 Bob \u7684\u4fe1\u606f\u3002\u8fd9\u4e24\u4efd\u6bd4\u7279\u662f\u4e0d\u7ea0\u7f20\u7684\u3002\\(\\phi_0\\) \u7b49\u4e8e\u8fd9\u4e24\u4efd\u6bd4\u7279\u7684\u5f20\u91cf\u79ef\u3002 \u628a Alice \u624b\u91cc\u7684\u4e24\u4e2a\u6bd4\u7279\u8fdb\u884c\u7ea0\u7f20\uff0c\u5373\u628a Bob \u7684\u6bd4\u7279\u62ff\u51fa\u53bb\uff0cAlice \u7684\u4e24\u4e2a\u6bd4\u7279\u5199\u5728\u4e00\u8d77\u3002  </p> <p>\u603b\u7ed3\uff0c\u6211\u4eec\u5bf9 Alice \u7684\u4e24\u4e2a\u6bd4\u7279\u505a\u64cd\u4f5c\uff1a\u5148\u5c06\u8981\u53d1\u9001\u7684 qubit \u548c\u6301\u6709\u7684 qubit \u7ea0\u7f20\u5e76\u901a\u8fc7 CNOT \u95e8\uff0c\u968f\u540e\u5bf9\u8981\u53d1\u9001\u7684 qubit \u505a Hadamard \u53d8\u6362\uff0c\u6700\u540e\u6d4b\u91cf\u4e24\u4e2a\u6bd4\u7279\uff0c\u6839\u636e\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u5bf9 Bob \u7684 qubit \u505a\u76f8\u5e94\u7684\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 Alice \u60f3\u8981\u4f20\u9012\u7684\u4fe1\u606f\u3002</p> <p></p>"},{"location":"Quan/chap1/#_12","title":"\u91cf\u5b50\u8ba1\u7b97\u7684\u5e76\u884c\u6027","text":"<p>\u5728\u91cf\u5b50\u8ba1\u7b97\u4e2d\u5229\u7528\u53e0\u52a0\u6001\uff0c\u53ef\u4ee5\u5728\u4e00\u6b21\u7535\u8def\u64cd\u4f5c\u4e2d\u540c\u65f6\u8ba1\u7b97\u591a\u4e2a\u51fd\u6570\u503c\u3002</p> <p>Question</p> <p>\u5047\u8bbe\u67d0\u4e2a\u51fd\u6570\u662f\u4e0b\u9762\u7684\u4e00\u79cd\u3002\u5c1d\u8bd5\u6700\u5c11\u4e14\u8db3\u591f\u7684\u6b21\u6570\uff0c\u6765\u786e\u5b9a\u5b83\u662f\u5e38\u6570\u51fd\u6570\u8fd8\u662f\u5e73\u8861\u51fd\u6570\u3002 </p> <p>\u5bf9\u7ecf\u5178\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u9700\u8981\u5c1d\u8bd5 \\(\\dfrac{2^n}{2}+1\\) \u6b21\uff08\u4e5f\u5c31\u662f\u4e00\u534a\u591a\u4e00\u6b21\uff09\uff0c\u624d\u80fd\u786e\u4fdd\u8db3\u591f\u53ef\u4ee5\u5224\u65ad\u672a\u77e5\u51fd\u6570</p> <p>\u5bf9\u91cf\u5b50\u8ba1\u7b97\u673a\u6765\u8bf4\uff1a </p>"},{"location":"Quan/chap1/#deutsch","title":"Deutsch \u7b97\u6cd5","text":"<p>Deutsch \u7b97\u6cd5\uff08\\(\\oplus\\) \u662f\u5f02\u6216\u3002\uff09 </p> \\[ \\psi_1 = \\left[\\dfrac{|0\\rangle + |1\\rangle}{\\sqrt 2}\\right]\\oplus\\left[\\dfrac{|0\\rangle - |1\\rangle}{\\sqrt 2}\\right] \\] <p></p> <p>\uff08\u7b2c\u4e00\u6b65\u53ef\u4ee5\u679a\u4e3e\u60c5\u51b5\u63a8\u51fa\uff09  </p> <p>\u6211\u4eec\u4e0d\u80fd\u5f97\u5230 f \u7684\u5177\u4f53\u503c\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u91cf\u5b50\u53e0\u52a0\u7684\u65b9\u5f0f\u540c\u65f6\u8ba1\u7b97\uff0c\u5e76\u5f97\u5230 f \u7684\u76f8\u5173\u6027\u8d28\u3002</p>"},{"location":"Quan/chap2/","title":"\u91cf\u5b50\u6d4b\u91cf","text":""},{"location":"Quan/chap2/#_2","title":"\u91cf\u5b50\u8ba1\u7b97\u4e2d\u7684\u7279\u5f81\uff08\u8c31\uff09\u5206\u89e3","text":"<p>\u77e9\u9635\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff0c\u5982\u62c9\u4f38\u3002</p> Example <p>!()[https://cdn.hobbitqia.cc/20231028161954.png]</p> <p>\u7279\u5f81\u5206\u89e3 \\(A=Q\\sum Q^{-1}\\)\uff0c\u5176\u4e2d \\(Q\\) \u662f\u77e9\u9635 \\(A\\) \u7279\u5f81\u5411\u91cf\u7ec4\u6210\u7684\u77e9\u9635\uff0c\\(\\sum\\) \u662f\u4e00\u4e2a\u5bf9\u89d2\u9635\u3002</p> <p>\u7279\u5f81\u5206\u89e3\u53c8\u79f0\u8c31\u5206\u89e3\uff0c\u5047\u8bbe \\(A\\)\uff0c\u662f\u4e00\u4e2a\u590d\u6570\u57df\u6b63\u89c4\u77e9\u9635\uff0c\u90a3\u4e48\u53ef\u4ee5\u5206\u89e3\u4e3a\uff1a\uff08\u8fd9\u91cc\u7684 \\(|e_i\\rangle\\) \u4e3a \\(A\\) \u7684\u672c\u5f81\u77e2\u91cf\uff09</p> \\[ A=\\sum\\limits_{i=1}^n \\lambda_i |e_i\\rangle \\langle e_i| \\] <p>\u5b8c\u5907\u6027\u65b9\u7a0b\uff1a</p> \\[ \\sum\\limits_{i=1}^n |e_i\\rangle \\langle e_i| = I \\] <p>\u6ee1\u8db3\u5b8c\u5907\u6027\u65b9\u7a0b\u7684\u5c31\u662f\u4e00\u7ec4\u6807\u51c6\u6b63\u4ea4\u57fa\u3002</p> <p>Example</p> <p>!()[https://cdn.hobbitqia.cc/20231028163112.png]</p>"},{"location":"Quan/chap2/#_3","title":"\u6295\u5f71\u7b97\u5b50","text":"<p>\u6d4b\u91cf\u53ef\u4ee5\u7406\u89e3\u4e3a\u6295\u5f71\u3002</p> <p>\u6211\u4eec\u5b9a\u4e49\u6295\u5f71\u7b97\u5b50\u4e3a \\(P_k = |e_k\\rangle \\langle e_k|\\)\uff0c\u6ee1\u8db3</p> <ul> <li>\\(P_k^2=P_k\\)</li> <li>\\(P_k P_j = 0(k\\neq j)\\)</li> <li>\\(\\sum P_k = I\\)</li> </ul> <p>\u5728 \\(e_k\\) \u4e0a\u7684\u6295\u5f71\u5c31\u76f8\u5f53\u4e8e\u4e58\u4e00\u4e2a \\(P_k\\) \u77e9\u9635\u3002\uff08\\(P_k| v \\rangle = c_k | e_k\\rangle\\)\uff09 \u5373 \\(P_k |v\\rangle\\) \u4e3a \\(|v\\rangle\\) \u5728 \\(|e_k\\rangle\\) \u4e0a\u7684\u6295\u5f71\u3002</p> <p>Example</p> <p></p> <p>\u5bf9\u4e8e \\(|\\phi \\rangle = \\begin{matrix}\\left[ 1 \\\\ 0 \\right]\\end{matrix}\\)\uff0c\u6211\u4eec\u6709 </p> \\[ P_1 \\phi\\rangle = \\dfrac{1}{2}\\begin{matrix}\\left[ 1 \\\\ 0 \\right]\\end{matrix} = \\dfrac{1}{\\sqrt 2} |e_1\\rangle \\] <p>\u5373 \\(|\\phi\\rangle\\) \u5728 \\(|e_1\\rangle\\) \u65b9\u5411\u7684\u6295\u5f71\u4e3a \\(\\dfrac{1}{2}\\)\uff0c\u5bf9\u5e94 \\(\\dfrac{1}{2} |e_1\\rangle = \\dfrac{1}{2} |0\\rangle + \\dfrac{1}{2} |1\\rangle\\)</p> <p>\u56e0\u4e3a \\(A=\\sum\\limits_{i=1}^n \\lambda_i |e_i\\rangle \\langle e_i| = \\sum \\lambda_i P_i\\)</p> <p>\u628a\u4e00\u4e2a\u77e9\u9635 A \u4f5c\u7528\u5230\u91cf\u5b50\u6001\uff0c\u7b49\u4ef7\u4e8e\u6295\u5f71\u5230 A \u7684\u5404\u4e2a\u7279\u5f81\u6001\u3002</p>"},{"location":"Quan/chap2/#_4","title":"\u6295\u5f71\u6d4b\u91cf","text":"<p>\u6d4b\u91cf\u9700\u8981\u9009\u4e00\u7ec4\u57fa\u77e2\u6001\uff0c\u7136\u540e\u5f97\u5230\u5bf9\u5e94\u6d4b\u91cf\u77e9\u9635\u8fdb\u884c\u6d4b\u91cf\u3002</p> <p>\u6295\u5f71\u7b97\u7b26\u5177\u6709\u5982\u4e0b\u6027\u8d28</p> \\[ P_m^{\\dagger} P_m = P_m^2 = P_m \\] <p>\u6307\u6807 \\(i\\) \u8868\u793a\u5728\u5b9e\u9a8c\u4e0a\u53ef\u80fd\u53d1\u751f\u7684\u7ed3\u679c\u3002\u5982\u679c\u6d4b\u91cf\u524d\u7684\u91cf\u5b50\u7cfb\u7edf\u5904\u5728\u6700\u65b0\u72b6\u6001 \\(|\\psi \\rangle\\)\uff0c\u90a3\u4e48\u7ed3\u679c \\(i\\) \u53d1\u751f\u7684\u6982\u7387\u4e3a: </p> \\[ p_i = \\langle \\psi | P_i^{\\dagger} P_i | \\psi \\rangle = \\langle \\psi | P_i | \\psi \\rangle \\] <p>\u8fd9\u91cc \\(P_i\\) \u5c31\u662f\u5c06\u91cf\u5b50\u6295\u5f71\u5230\u5bf9\u5e94\u7684\u672c\u5f81\u6001 \\(\\alpha\\) \u4e0a\uff0c\u56e0\u6b64\u4e5f\u6709</p> \\[ p_\\alpha = \\langle \\psi | P_i | \\psi \\rangle = |\\langle \\psi | \\alpha \\rangle|^2 \\] <p>\u5728\u6295\u5f71\u6d4b\u91cf\u4e4b\u540e\uff0c\u91cf\u5b50\u6001\u5c31\u574d\u7f29\u5230\u672c\u5f81\u6001\u77e2 \\(|\\alpha \\rangle\\) \u4e0a\u3002</p> <p>\u5355\u6bd4\u7279\u6d4b\u91cf</p> <p>!()[https://cdn.hobbitqia.cc/20231028165311.png] !()[https://cdn.hobbitqia.cc/20231028165332.png]</p> <p>\u5982\u679c\u57fa\u5e95\u4e0d\u662f\u81ea\u7136\u57fa\u5e95\uff0c\u90a3\u6211\u4eec\u9700\u8981\u6309\u7167\u516c\u5f0f\uff0c\u4e0d\u80fd\u76f4\u63a5\u6839\u636e\u7cfb\u6570\u5f97\u5230\u7ed3\u679c\u3002</p>"},{"location":"Quan/chap2/#_5","title":"\u91cf\u5b50\u7ebf\u8def\u4e0e\u6d4b\u91cf\u64cd\u4f5c","text":"<p>\u5728\u91cf\u5b50\u7535\u8def\u4e2d\uff0c\u7528\u4e00\u822c\u4f7f\u7528\u5e26\u4eea\u8868\u7b26\u53f7\u7684\u95e8\u6765\u8868\u793a\u5bf9\u8be5\u91cf\u5b50\u7ebf\u8def\u4ee3\u8868\u7684\u91cf\u5b50\u6bd4\u7279\u8fdb\u884c\u6d4b\u91cf\u64cd\u4f5c\u3002 !()[https://cdn.hobbitqia.cc/20231028165540.png]</p> <p>\u5b9e\u9645\u4e0a\u6d4b\u91cf\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u77e9\u9635\uff0c\u5982\u5728\u81ea\u7136\u57fa\u5e95\u4e0b\u6211\u4eec\u6709</p> <p>$$ M_0 = |0\\rangle \\langle 0| =  \\left[\\begin{matrix} 1 &amp; 0 \\ 0 &amp; 0  \\end{matrix}\\right]\\</p> <p>M_1 = |0\\rangle \\langle 0| =  \\left[\\begin{matrix} 0 &amp; 0 \\ 0 &amp; 1 \\end{matrix}\\right] $$</p> \u5355\u91cf\u5b50\u6bd4\u7279\u7ebf\u8def\u6d4b\u91cf <p>!()[https://cdn.hobbitqia.cc/20231028165914.png]</p> \u53cc\u6bd4\u7279\u6574\u4f53\u6d4b\u91cf <p>\u6ce8\u610f\u8fd9\u4e2a\u7cfb\u7edf\u8fd9\u91cc \\(q_1\\) \u662f\u9ad8\u4f4d\u3002 !()[https://cdn.hobbitqia.cc/20231028165951.png] !()[https://cdn.hobbitqia.cc/20231028170003.png] !()[https://cdn.hobbitqia.cc/20231028170318.png]</p> \u53cc\u6bd4\u7279\u90e8\u5206\u6d4b\u91cf <p>\u53ea\u6d4b\u91cf\u4e00\u4e2a\u6bd4\u7279\uff0c\u6211\u4eec\u8981\u628a\u591a\u4e2a\u6d4b\u91cf\u77e9\u9635\u76f8\u52a0\u3002\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2a\u5355\u6bd4\u7279\u7684\u6d4b\u91cf\u77e9\u9635\u548c\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\u505a\u5f20\u91cf\u79ef\u5f97\u5230\u3002\uff08\u8fd9\u91cc \\(M_1^0\\) \u8868\u793a\u9ad8\u4f4d\u6bd4\u7279\u53d6 0 \u7684\u6d4b\u91cf\u77e9\u9635\uff0c\u5176\u4ed6\u7c7b\u4f3c\uff09 !()[https://cdn.hobbitqia.cc/20231028170540.png] !()[https://cdn.hobbitqia.cc/20231028170734.png]</p>"},{"location":"Quan/chap2/#_6","title":"\u91cf\u5b50\u6001\u533a\u5206\u516c\u8bbe","text":"<p>\u91cf\u5b50\u6d4b\u91cf\u7684\u539f\u7406\u7684\u4e00\u5927\u5e94\u7528\u662f\u533a\u5206\u91cf\u5b50\u7cfb\u7edf\u4e2d\u4e0d\u540c\u7684\u91cf\u5b50\u6001\u3002</p> <p>\u5982\u679c\u4e00\u7ec4\u6001\u5411\u91cf\u662f\u6b63\u4ea4\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u6001\u5411\u91cf\u5206\u522b\u5b9a\u4e49\u6d4b\u91cf\u7b97\u5b50\u5bf9\u5176\u8fdb\u884c\u786e\u5b9a\u6027\u7684\u533a\u5206\uff1b\u5426\u5219\u5982\u679c\u91cf\u5b50\u6001\u4e4b\u95f4\u4e0d\u6b63\u4ea4\uff0c\u5219\u53ef\u4ee5\u8bc1\u660e\u6ca1\u6709\u91cf\u5b50\u6d4b\u91cf\u53ef\u4ee5\u7cbe\u786e\u533a\u5206\u8fd9\u4e9b\u72b6\u6001\u3002</p>"},{"location":"Quan/chap3/","title":"\u91cf\u5b50\u7b97\u6cd5","text":""},{"location":"Quan/chap3/#_2","title":"\u91cf\u5b50\u5085\u91cc\u53f6\u53d8\u6362","text":"<p>\u4e00\u4e2a\u5468\u671f\u51fd\u6570\u53ef\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u4e0d\u540c\u9891\u7387\u6b63\u5f26\u6ce2\u7684\u53e0\u52a0\uff0c\u5085\u91cc\u53f6\u53d8\u6362\u5c06\u8fd9\u4e2a\u51fd\u6570\u4ece\u65f6\u57df\u8f6c\u4e3a\u9891\u57df\u3002</p> <p>DFT: \\(y_k \\leftarrow \\dfrac{1}{\\sqrt N}\\sum\\limits_{j=0}^{N-1}x_j e^{\\frac{2\\pi i j k}{N}}\\). \u9891\u57df\u4e2d\u7684\u4e00\u70b9\u901a\u8fc7\u65f6\u57df\u4e2d\u7684\u6240\u6709\u79bb\u6563\u70b9\u8ba1\u7b97\u5f97\u5230\u3002</p> <p>\u5728 QFT \u4e2d\uff0c\u6211\u4eec\u53d8\u4e3a \\(y_k|k\\rangle \\leftarrow x_j|j\\rangle\\). QFT \u7684\u5f62\u5f0f\u5c31\u662f\u628a DFT \u7684\u7ed3\u679c\u4f5c\u4e3a\u57fa\u6001\u7684\u632f\u5e45\u3002</p> <p>!()[https://cdn.hobbitqia.cc/20231028182736.png]</p> <p>\u4ee5 j \u4e3a\u57fa\u7684\u6001\u53d8\u6362\u4e3a\u4ee5 k \u4e3a\u57fa\u7684\u6001\uff0c\u7cfb\u6570\u6ee1\u8db3\u7ecf\u5178\u5085\u91cc\u53f6\u53d8\u6362\u3002</p> <p>\u9700\u8981\u600e\u6837\u7684\u7535\u8def\u624d\u80fd\u5b9e\u73b0\u8fd9\u6837\u7684 QFT?  </p>"},{"location":"Quan/chap3/#qft","title":"QFT \u7684\u5f20\u91cf\u79ef\u5f62\u5f0f","text":"<p>!()[https://cdn.hobbitqia.cc/20231028183039.png]</p> <p>To be continued...</p> <p>p13 \u7684\u5206\u6bcd\u4e0a\u7684 k \u662f\u5341\u8fdb\u5236\u3002</p> QFT\u4f8b\u5b50-\u5355\u6bd4\u7279\u7cfb\u7edf <p>!()[https://cdn.hobbitqia.cc/20231028184831.png]</p> QFT\u4f8b\u5b50-\u53cc\u6bd4\u7279\u7cfb\u7edf <p>!()[https://cdn.hobbitqia.cc/20231028185455.png]</p>"},{"location":"Quan/chap3/#qft_1","title":"QFT \u7684\u91cf\u5b50\u7535\u8def","text":"<p>!()[https://cdn.hobbitqia.cc/20231028185521.png]</p> <p>To be continued...</p>"},{"location":"TCS/","title":"\u8ba1\u7b97\u7406\u8bba","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u7406\u8bba\u8ba1\u7b97\u673a\u79d1\u5b66\u5bfc\u5f15\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0  </p> <ul> <li>\u8001\u5e08: \u6bdb\u5b87\u5c18</li> </ul>"},{"location":"android/dataflow/","title":"Android \u89e6\u63a7\u4e8b\u4ef6\u6570\u636e\u6d41","text":""},{"location":"android/dataflow/#_1","title":"\u57fa\u672c\u6982\u5ff5","text":""},{"location":"android/dataflow/#_2","title":"\u89e6\u6478\u4e8b\u4ef6\u6a21\u578b","text":"<p>\u89e6\u6478\u4e8b\u4ef6\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b 1. \u6355\u83b7\u89e6\u63a7\u4e8b\u4ef6\u3002\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u4e0d\u65ad\u7684\u76d1\u542c\u5c4f\u5e55\uff0c\u4e00\u65e6\u6709\u89e6\u6478\u4e8b\u4ef6\uff0c\u5c31\u5c06\u4e8b\u4ef6\u6355\u83b7\u3002 2. \u6d3e\u53d1\u4e8b\u4ef6\u3002\u56e0\u4e3a\u53ef\u80fd\u6709\u591a\u4e2aAPP\u7684\u591a\u4e2a\u754c\u9762\u4e3a\u7528\u6237\u53ef\u89c1\uff0c\u5fc5\u987b\u627e\u5230\u76ee\u6807\u7a97\u53e3\uff0c\u786e\u5b9a\u8fd9\u4e2a\u4e8b\u4ef6\u7a76\u7adf\u901a\u77e5\u90a3\u4e2a\u7a97\u53e3\uff0c\u5e76\u628a\u4e8b\u4ef6\u53d1\u9001\u7ed9\u76ee\u6807\u7a97\u53e3\u3002 3. \u76ee\u6807\u7a97\u53e3\u6d88\u8d39\u4e8b\u4ef6\u3002  </p> <p></p>"},{"location":"android/dataflow/#_3","title":"\u6355\u83b7\u89e6\u63a7\u4e8b\u4ef6","text":"<p>InputManagerService</p> <p>InputManagerService \u662f Android \u4e3a\u4e86\u5904\u7406\u5404\u79cd\u7528\u6237\u64cd\u4f5c\u800c\u62bd\u8c61\u7684\u4e00\u4e2a\u670d\u52a1\uff0c\u81ea\u8eab\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a Binder \u670d\u52a1\u5b9e\u4f53\uff0c\u5728 SystemServer \u8fdb\u7a0b\u542f\u52a8\u7684\u65f6\u5019\u5b9e\u4f8b\u5316\uff0c\u5e76\u6ce8\u518c\u5230 ServiceManager \u4e2d\u53bb\u3002</p> <p>InputManagerService \u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u8bfb\u53d6\u7ebf\u7a0b\uff0c\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u6d3e\u53d1\u7ebf\u7a0b\u3002</p> <p>EventHub \u5229\u7528 Linux \u7684 inotify \u548c epoll \u673a\u5236\uff0c\u76d1\u542c\u8bbe\u5907\u4e8b\u4ef6\uff0c\u9762\u5411\u7684\u662f /dev/input \u76ee\u5f55\u4e0b\u7684\u8bbe\u5907\u8282\u70b9\u3002\u901a\u8fc7 EventHub \u7684 <code>getEvents</code> \u53ef\u4ee5\u76d1\u542c\u5e76\u83b7\u5f97\u8be5\u4e8b\u4ef6\u3002</p> <p></p> <p>\u5728 <code>new InputManager</code> \u65f6\u5019\uff0c\u4f1a\u65b0\u5efa\u4e00\u4e2a <code>InputReaderThread</code> \u7ebf\u7a0b\u53ca <code>InputDispatcherThread</code> \u7ebf\u7a0b\u3002</p> <ul> <li>\u8fd9\u4e2a Reader \u7ebf\u7a0b\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u901a\u8fc7 EventHub \u7684 <code>getEvents</code> \u83b7\u53d6 Input \u4e8b\u4ef6\u3002   <code>processEventsLocked</code> \u4f1a\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u521d\u6b65\u5c01\u88c5\u4e3a RawEvent. Reader \u91cc\u7684 <code>loopOnce</code> \u65b9\u6cd5\u4f1a\u5728\u8bfb\u53d6\u5230\u4e8b\u4ef6\u540e\uff0c<code>mQueuedListener-&gt;flush()</code> \u5373\u5411 InputDispatcherThread \u7ebf\u7a0b\u53d1\u9001\u6d88\u606f\u3002  </li> <li>Dispatcher \u7ebf\u7a0b\u8d77\u521d\u5904\u4e8e\u7761\u7720\u72b6\u6001\uff0c\u63a5\u53d7\u5230\u6d88\u606f\u540e\u88ab\u5524\u9192\uff0c\u5904\u7406\u540e\u7ee7\u7eed\u7761\u7720\u3002</li> </ul> <pre><code>InputManager::InputManager(\nconst sp&lt;EventHubInterface&gt;&amp; eventHub,\nconst sp&lt;InputReaderPolicyInterface&gt;&amp; readerPolicy,\nconst sp&lt;InputDispatcherPolicyInterface&gt;&amp; dispatcherPolicy) {\n&lt;!--\u4e8b\u4ef6\u5206\u53d1\u6267\u884c\u7c7b--&gt;\nmDispatcher = new InputDispatcher(dispatcherPolicy);\n&lt;!--\u4e8b\u4ef6\u8bfb\u53d6\u6267\u884c\u7c7b--&gt;\nmReader = new InputReader(eventHub, readerPolicy, mDispatcher);\ninitialize();\n}\nvoid InputManager::initialize() {\nmReaderThread = new InputReaderThread(mReader);     // \u4e8b\u4ef6\u8bfb\u53d6\u7ebf\u7a0b\nmDispatcherThread = new InputDispatcherThread(mDispatcher);     // \u4e8b\u4ef6\u6d3e\u53d1\u7ebf\u7a0b\n}\nbool InputReaderThread::threadLoop() {\nmReader-&gt;loopOnce();\nreturn true;\n}\nvoid InputReader::loopOnce() {\nint32_t oldGeneration;\nint32_t timeoutMillis;\nbool inputDevicesChanged = false;\nVector&lt;InputDeviceInfo&gt; inputDevices;\n{  ...&lt;!--\u76d1\u542c\u4e8b\u4ef6--&gt;\nsize_t count = mEventHub-&gt;getEvents(timeoutMillis, mEventBuffer, EVENT_BUFFER_SIZE);\n....&lt;!--\u5904\u7406\u4e8b\u4ef6--&gt;\nprocessEventsLocked(mEventBuffer, count);\n...\n&lt;!--\u901a\u77e5\u6d3e\u53d1--&gt;\nmQueuedListener-&gt;flush();   // \u5411\u5206\u53d1\u7ebf\u7a0b\u53d1\u9001\u6d88\u606f\n}\n</code></pre> <p></p>"},{"location":"android/dataflow/#_4","title":"\u4e8b\u4ef6\u6d3e\u53d1","text":"<pre><code>bool InputDispatcherThread::threadLoop() {\nmDispatcher-&gt;dispatchOnce();\nreturn true;\n}\nvoid InputDispatcher::dispatchOnce() {\nnsecs_t nextWakeupTime = LONG_LONG_MAX;\n{  &lt;!--\u88ab\u5524\u9192 \uff0c\u5904\u7406Input\u6d88\u606f--&gt;\nif (!haveCommandsLocked()) {\ndispatchOnceInnerLocked(&amp;nextWakeupTime);\n}\n...\n} nsecs_t currentTime = now();\nint timeoutMillis = toMillisecondTimeoutDelay(currentTime, nextWakeupTime);\n&lt;!--\u7761\u7720\u7b49\u5f85input\u4e8b\u4ef6--&gt;\nmLooper-&gt;pollOnce(timeoutMillis);\n}\n</code></pre> <p>\u5982\u4e0a\u6587\u6240\u8bf4\uff0c\u5728\u65b0\u5efa <code>InputManager</code> \u65f6\u4e5f\u521b\u5efa\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u6d3e\u53d1\u8fdb\u7a0b. <code>InputDispatcherThread</code> \u662f\u4e00\u4e2a Looper \u7ebf\u7a0b\uff0c\u57fa\u4e8e native \u7684 Looper \u5b9e\u73b0\u4e86 Hanlder \u6d88\u606f\u5904\u7406\u6a21\u578b\uff0c\u5982\u679c\u6709 Input \u4e8b\u4ef6\u5230\u6765\u5c31\u88ab\u5524\u9192\u5904\u7406\u4e8b\u4ef6\uff0c\u5904\u7406\u5b8c\u6bd5\u540e\u7ee7\u7eed\u7761\u7720\u7b49\u5f85\u3002 \u8fd9\u91cc <code>dispatchOnceInnerLocked</code> \u662f\u5177\u4f53\u7684\u6d3e\u53d1\u903b\u8f91\u3002\u5bf9\u4e8e\u89e6\u6478\u4e8b\u4ef6\u4f1a\u9996\u5148\u901a\u8fc7 <code>findTouchedWindowTargetsLocked</code> \u627e\u5230\u76ee\u6807 Window, \u8fdb\u800c\u901a\u8fc7 <code>dispatchEventLocked</code> \u5c06\u6d88\u606f\u53d1\u9001\u5230\u76ee\u6807\u7a97\u53e3\u3002</p> <pre><code>void InputDispatcher::dispatchOnceInnerLocked(nsecs_t* nextWakeupTime) {\n...\ncase EventEntry::TYPE_MOTION: {\nMotionEntry* typedEntry = static_cast&lt;MotionEntry*&gt;(mPendingEvent);\n...\ndone = dispatchMotionLocked(currentTime, typedEntry,\n&amp;dropReason, nextWakeupTime);\nbreak;\n}\nbool InputDispatcher::dispatchMotionLocked(\nnsecs_t currentTime, MotionEntry* entry, DropReason* dropReason, nsecs_t* nextWakeupTime) {\n...     Vector&lt;InputTarget&gt; inputTargets;\nbool conflictingPointerActions = false;\nint32_t injectionResult;\nif (isPointerEvent) {\n&lt;!--\u5173\u952e\u70b91 \u627e\u5230\u76ee\u6807Window--&gt;\ninjectionResult = findTouchedWindowTargetsLocked(currentTime,\nentry, inputTargets, nextWakeupTime, &amp;conflictingPointerActions);\n} else {\ninjectionResult = findFocusedWindowTargetsLocked(currentTime,\nentry, inputTargets, nextWakeupTime);\n}\n...\n&lt;!--\u5173\u952e\u70b92  \u6d3e\u53d1--&gt;\ndispatchEventLocked(currentTime, entry, inputTargets);\nreturn true;\n}\n</code></pre>"},{"location":"android/dataflow/#_5","title":"\u627e\u5230\u76ee\u6807\u7a97\u53e3","text":"<p>Android \u7cfb\u7edf\u80fd\u591f\u540c\u65f6\u652f\u6301\u591a\u5757\u5c4f\u5e55\uff0c\u6bcf\u5757\u5c4f\u5e55\u88ab\u62bd\u8c61\u6210\u4e00\u4e2a <code>DisplayContent</code> \u5bf9\u8c61\uff0c\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a <code>WindowList</code> \u5217\u8868\u5bf9\u8c61\uff0c\u7528\u6765\u8bb0\u5f55\u5f53\u524d\u5c4f\u5e55\u4e2d\u7684\u6240\u6709\u7a97\u53e3\uff0c\u5305\u62ec\u72b6\u6001\u680f\u3001\u5bfc\u822a\u680f\u3001\u5e94\u7528\u7a97\u53e3\u3001\u5b50\u7a97\u53e3\u7b49\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u89e6\u6478\u4e8b\u4ef6\u7684\u4f4d\u7f6e\u53ca\u7a97\u53e3\u7684\u5c5e\u6027\u904d\u5386 <code>WindowList</code> \u5217\u8868\u6765\u786e\u5b9a\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u54ea\u4e2a\u7a97\u53e3\u3002\uff08\u5224\u65ad\u662f\u5426\u53ef\u89c1\u3001\u662f\u5426\u53ef\u89e6\u6478\u7b49\u4fe1\u606f\uff09</p>"},{"location":"android/dataflow/#_6","title":"\u53d1\u9001\u4e8b\u4ef6\u5230\u76ee\u6807\u7a97\u53e3","text":"<p>\u76ee\u524d\u6240\u6709\u903b\u8f91\u5728 SystemServer \u8fdb\u7a0b\uff0c\u8981\u901a\u77e5\u7684\u7a97\u53e3\u4f4d\u4e8e APP \u7aef\u7684\u7528\u6237\u8fdb\u7a0b\u3002\u9ad8\u7248\u672c\u7684\u91c7\u7528\u7684\u90fd\u662f Socket \u7684\u901a\u4fe1\u65b9\u5f0f\uff0c\u800c\u6bd4\u8f83\u65e7\u7684\u7248\u672c\u91c7\u7528\u7684\u662f Pipe \u7ba1\u9053\u7684\u65b9\u5f0f\u3002</p> <p>\u5176\u4e2d\uff0c\u4e24\u7aef\u901a\u4fe1\u7684 Socket, \u5728 APP \u7aef\u5411 WMS \u8bf7\u6c42\u6dfb\u52a0\u7a97\u53e3\u7684\u65f6\u5019\uff0c\u4f1a\u4f34\u968f\u7740 Input \u901a\u9053\u7684\u521b\u5efa\uff0c\u7a97\u53e3\u7684\u6dfb\u52a0\u4e00\u5b9a\u4f1a\u8c03\u7528 <code>ViewRootImpl</code> \u7684 <code>setView</code> \u51fd\u6570\u3002</p> <pre><code>public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) {\n...\nrequestLayout();\nif ((mWindowAttributes.inputFeatures\n&amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == 0) {\n&lt;!--\u521b\u5efaInputChannel\u5bb9\u5668--&gt;\nmInputChannel = new InputChannel();\n// \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 InputChannel\n}\ntry {\nmOrigWindowType = mWindowAttributes.type;\nmAttachInfo.mRecomputeGlobalAttributes = true;\ncollectViewAttributes();\n&lt;!--\u6dfb\u52a0\u7a97\u53e3\uff0c\u5e76\u8bf7\u6c42\u5f00\u8f9fSocket Input\u901a\u4fe1\u901a\u9053--&gt;\nres = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,\ngetHostVisibility(), mDisplay.getDisplayId(),\nmAttachInfo.mContentInsets, mAttachInfo.mStableInsets,\nmAttachInfo.mOutsets, mInputChannel);\n// \u8fd9\u91cc\u4f1a\u8f6c\u5316\u4e3a\u5bf9 addWindow \u7684\u8c03\u7528\n// Binder \u8c03\u7528 WMS \u7684 addToDisplay \u63a5\u53e3\uff0c\u5e76\u5c06 InputChanel \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u4ee5\u5b8c\u6210\u8d4b\u503c\n}...\n&lt;!--\u76d1\u542c\uff0c\u5f00\u542fInput\u4fe1\u9053--&gt;\nif (mInputChannel != null) {    if (mInputQueueCallback != null) {\nmInputQueue = new InputQueue();\nmInputQueueCallback.onInputQueueCreated(mInputQueue);\n}\nmInputEventReceiver = new WindowInputEventReceiver(mInputChannel,\nLooper.myLooper());\n// \u6839\u636e\u8d4b\u503c\u540e\u7684 InputChannel \u5c01\u88c5\u521b\u5efa WindowInputEventReceiver \u5bf9\u8c61\uff0c\u4ee5\u4fbf\u540e\u7eed\u63a5\u6536 Input \u4e8b\u4ef6\n}\n</code></pre> <p><code>setView</code> \u4e2d\u521b\u5efa\u4e86 <code>InputChannel</code> \u5bb9\u5668\uff0c\u5b83\u662f out \u7c7b\u578b\uff0c\u9700\u8981\u7531\u670d\u52a1\u7aef\u8fdb\u884c\u586b\u5145\u3002</p> <pre><code>public int addWindow(Session session, IWindow client, int seq,\nWindowManager.LayoutParams attrs, int viewVisibility, int displayId,\nRect outContentInsets, Rect outStableInsets, Rect outOutsets,\nInputChannel outInputChannel) {            ...\nif (outInputChannel != null &amp;&amp; (attrs.inputFeatures\n&amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == 0) {\nString name = win.makeInputChannelName();\n&lt;!--\u521b\u5efa InputChannelPair, \u5b9e\u73b0\u521b\u5efa socketpair \u5168\u53cc\u5de5\u901a\u4fe1\u4fe1\u9053 --&gt;\nInputChannel[] inputChannels = InputChannel.openInputChannelPair(name);\n// \u521b\u5efa\u901a\u4fe1\u4fe1\u9053\uff0c\u5e76\u5206\u522b\u586b\u5145\u5230\u5ba2\u6237\u548c\u670d\u52a1\u7684 InputChannel\n&lt;!--\u672c\u5730\u7528--&gt;\nwin.setInputChannel(inputChannels[0]);\n&lt;!--APP\u7aef\u7528--&gt;\ninputChannels[1].transferTo(outInputChannel);\n// \u5c06\u5ba2\u6237\u7aef InputChannel \u8d4b\u503c\u7ed9 outInputChannel, \u5e76 Binder \u56de\u4f20\u7ed9\u5e94\u7528\u8fdb\u7a0b\u4e2d ViewRootImpl \u4e2d\n&lt;!--\u6ce8\u518c\u4fe1\u9053\u4e0e\u7a97\u53e3--&gt;\nmInputManager.registerInputChannel(win.mInputChannel, win.mInputWindowHandle);\n// mInputWindowHandle.token \u552f\u4e00\u6807\u8bc6\u4e86\u63a5\u6536 Input \u4e8b\u4ef6\u7684 App \u7a97\u53e3\n}\n</code></pre> <p>\u8fd9\u91cc <code>openInputChannelPair</code> \u521b\u5efa\u4e86 socketpair, \u5e76\u5206\u522b\u586b\u5145\u5230 Client \u4e0e Server \u7684 InputChannel \u4e2d\u53bb\u3002\u8ba9 InputManager \u5c06 Input \u901a\u4fe1\u4fe1\u9053\u4e0e\u5f53\u524d\u7684\u7a97\u53e3 ID \u7ed1\u5b9a\uff0c\u6700\u540e\u901a\u8fc7 Binder \u5c06 <code>outInputChannel</code> \u56de\u4f20\u5230 APP \u7aef\u3002WMS \u9700\u8981\u501f\u52a9 Binder \u901a\u4fe1\u5411 APP \u7aef\u56de\u4f20\u6587\u4ef6\u63cf\u8ff0\u7b26 fd.  </p> <p>\u7a97\u53e3\u6dfb\u52a0\u6210\u529f\u540e, socketpair \u88ab\u521b\u5efa\uff0c\u88ab\u4f20\u9012\u5230\u4e86 APP \u7aef\uff0c\u4f46\u662f\u4fe1\u9053\u5e76\u672a\u5b8c\u5168\u5efa\u7acb\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u4e3b\u52a8\u7684\u76d1\u542c\u3002 APP \u7aef\u7684\u76d1\u542c\u6d88\u606f\u7684\u624b\u6bb5\u662f\uff1a\u5c06 socket \u6dfb\u52a0\u5230 Looper \u7ebf\u7a0b\u7684 <code>epoll</code> \u6570\u7ec4\u4e2d\u53bb\uff0c\u4e00\u6709\u6d88\u606f\u5230\u6765 Looper \u7ebf\u7a0b\u5c31\u4f1a\u88ab\u5524\u9192\uff0c\u5e76\u83b7\u53d6\u4e8b\u4ef6\u5185\u5bb9\uff0c\u4ece\u4ee3\u7801\u4e0a\u6765\u770b\uff0c\u901a\u4fe1\u4fe1\u9053\u7684\u6253\u5f00\u662f\u4f34\u968f WindowInputEventReceiver \u7684\u521b\u5efa\u6765\u5b8c\u6210\u7684\u3002</p> <p>\u4fe1\u606f\u5230\u6765, Looper\u6839\u636e fd \u627e\u5230\u5bf9\u5e94\u7684\u76d1\u542c\u5668: NativeInputEventReceiver, \u5e76\u8c03\u7528 <code>handleEvent</code> \u5904\u7406\u5bf9\u5e94\u4e8b\u4ef6\u3002\u4e4b\u540e\u4f1a\u8fdb\u4e00\u6b65\u8bfb\u53d6\u4e8b\u4ef6\uff0c\u5e76\u5c01\u88c5\u6210 Java \u5c42\u5bf9\u8c61\uff0c\u4f20\u9012\u7ed9 Java \u5c42\u3002</p> <pre><code>int NativeInputEventReceiver::handleEvent(int receiveFd, int events, void* data) {\n...\nif (events &amp; ALOOPER_EVENT_INPUT) {\nJNIEnv* env = AndroidRuntime::getJNIEnv();\nstatus_t status = consumeEvents(env, false /*consumeBatches*/, -1, NULL);   mMessageQueue-&gt;raiseAndClearException(env, \"handleReceiveCallback\");\nreturn status == OK || status == NO_MEMORY ? 1 : 0;\n}\n...\nstatus_t NativeInputEventReceiver::consumeEvents(JNIEnv* env,  bool consumeBatches, nsecs_t frameTime, bool* outConsumedBatch) {  ...\nfor (;;) {  uint32_t seq;  InputEvent* inputEvent;  &lt;!--\u83b7\u53d6\u4e8b\u4ef6--&gt;\nstatus_t status = mInputConsumer.consume(&amp;mInputEventFactory,  consumeBatches, frameTime, &amp;seq, &amp;inputEvent);  ...\n&lt;!--\u5904\u7406touch\u4e8b\u4ef6--&gt;\ncase AINPUT_EVENT_TYPE_MOTION: {\nMotionEvent* motionEvent = static_cast&lt;MotionEvent*&gt;(inputEvent);\nif ((motionEvent-&gt;getAction() &amp; AMOTION_EVENT_ACTION_MOVE) &amp;&amp; outConsumedBatch) {\n*outConsumedBatch = true;\n}\ninputEventObj = android_view_MotionEvent_obtainAsCopy(env, motionEvent);\nbreak;\n} ...\n</code></pre> <p>\u6700\u540e\u5c31\u662f\u89e6\u6478\u4e8b\u4ef6\u88ab\u5c01\u88c5\u6210\u4e86 <code>InputEvent</code>, \u5e76\u901a\u8fc7 InputEventReceiver \u7684 <code>dispatchInputEvent</code> \u8fdb\u884c\u5904\u7406\u3002InputEventReceiver \u7684 <code>dispatchInputEvent</code> \u65b9\u6cd5\u4f1a\u8c03\u7528 <code>onInputEvent</code> \u5177\u4f53\u5904\u7406 Input event \u89e6\u63a7\u4e8b\u4ef6\u3002</p>"},{"location":"android/dataflow/#_7","title":"\u76ee\u6807\u7a97\u53e3\u6d88\u8d39\u4e8b\u4ef6","text":""},{"location":"android/dataflow/#ui","title":"UI \u7ebf\u7a0b\u5bf9\u89e6\u63a7\u4e8b\u4ef6\u7684\u5206\u53d1\u5904\u7406","text":"<p>\u4ece <code>ViewRootImpl::WindowInputDispatcherReceiver::onInputEvent</code> \u51fd\u6570\u5f00\u59cb, Input \u4e8b\u4ef6\u5148\u540e\u6765\u5230 UI \u7ebf\u7a0b\uff0c\u901a\u8fc7 <code>enqueueInputEvent</code> \u51fd\u6570\u653e\u5165\u672c\u5730\u5f85\u5904\u7406\u961f\u5217\u4e2d\u3002</p> <p>\u5177\u4f53\u5bf9 Input \u89e6\u63a7\u4e8b\u4ef6\u7684\u5904\u7406\u903b\u8f91\u90fd\u5c01\u88c5\u5728 InputUsage \u7c7b\u4e2d\uff0c\u5728 ViewRootImpl \u521b\u5efa Window \u65f6\u7684 <code>setView</code> \u903b\u8f91\u4e2d\u4f1a\u521b\u5efa\u4e86\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684 InputUsage \u5bf9\u8c61\u4f9d\u6b21\u8fdb\u884c\u4e8b\u4ef6\u5904\u7406\uff0c\u8bbe\u8ba1\u4e0a\u91c7\u7528\u8d23\u4efb\u94fe\u6a21\u5f0f\uff0c\u5c06\u6bcf\u4e2a InputStage \u5b9e\u73b0\u7c7b\u901a\u8fc7 <code>mNext</code> \u53d8\u91cf\u8fde\u63a5\u8d77\u6765\u3002 \u6bcf\u4e2a InputUsage \u4e3b\u8981\u903b\u8f91\u662f\u5728 <code>OnProcess</code> \u51fd\u6570\u4e2d\u5177\u4f53\u5904\u7406\u89e6\u63a7\u4e8b\u4ef6\uff0c\u7136\u540e\u5224\u65ad\u5904\u7406\u662f\u5426\u5b8c\u6210\uff0c\u6ca1\u6709\u5219 <code>onDeliverToNext</code> \u4ea4\u7ed9\u4e0b\u4e00\u4e2a InputUsage \u7ee7\u7eed\u5904\u7406\uff0c\u5426\u5219\u5c31\u8c03\u7528 <code>finishInputEvent</code> \u7ed3\u675f\u4e8b\u4ef6\u3002</p> <pre><code> public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView,\nint userId) {\n...\n// Set up the input pipeline.\nCharSequence counterSuffix = attrs.getTitle();\n// \u521b\u5efa\u591a\u4e2a\u4e0d\u540c\u7c7b\u578bInputUsage\u4ee5\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u89e6\u63a7\u4e8b\u4ef6\nmSyntheticInputStage = new SyntheticInputStage();\n// ViewPostImeInputStage\u4e2d\u5c01\u88c5\u6211\u4eec\u5e94\u7528\u4e00\u822c\u89e6\u63a7\u4e8b\u4ef6\u5904\u7406\u903b\u8f91\uff08\u91cd\u8981\uff09\nInputStage viewPostImeStage = new ViewPostImeInputStage(mSyntheticInputStage);\nInputStage nativePostImeStage = new NativePostImeInputStage(viewPostImeStage,\n\"aq:native-post-ime:\" + counterSuffix);\n...\n}\nabstract class InputStage {\n...\n/**\n         * Delivers an event to be processed.\n         */\npublic final void deliver(QueuedInputEvent q) {\n// \u662f\u5426\u5e26\u6709FLAG_FINISHED\u7684flag\uff0c\u5982\u6709\u5219\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9mNext\nif ((q.mFlags &amp; QueuedInputEvent.FLAG_FINISHED) != 0) {\nforward(q);\n// \u662f\u5426\u5e94\u8be5\u4e22\u5f03\u4e8b\u4ef6\n} else if (shouldDropInputEvent(q)) {\nfinish(q, false);\n} else {\ntraceEvent(q, Trace.TRACE_TAG_VIEW);\nfinal int result;\ntry {\n// 1.\u5b9e\u9645\u5904\u7406\u4e8b\u4ef6\nresult = onProcess(q);\n} finally {\nTrace.traceEnd(Trace.TRACE_TAG_VIEW);\n}\n// 2.\u62ff\u5230\u5904\u7406\u4e8b\u4ef6\u7684\u7ed3\u679c\u540e\u51b3\u5b9a\u8fdb\u4e00\u6b65\u884c\u52a8\napply(q, result);\n}\n}\nprotected void apply(QueuedInputEvent q, int result) {\nif (result == FORWARD) {\nforward(q);\n} else if (result == FINISH_HANDLED) {\nfinish(q, true);\n} else if (result == FINISH_NOT_HANDLED) {\nfinish(q, false);\n}\n}\nprotected void finish(QueuedInputEvent q, boolean handled) {\nq.mFlags |= QueuedInputEvent.FLAG_FINISHED;\nif (handled) {\nq.mFlags |= QueuedInputEvent.FLAG_FINISHED_HANDLED;\n}\n// \u4ea4\u7ed9\u4e0b\u4e00\u4e2aInputUsage\u7ee7\u7eed\u5904\u7406\nforward(q);\n}\nprotected void forward(QueuedInputEvent q) {\n// \u4ea4\u7ed9\u4e0b\u4e00\u4e2aInputUsage\u7ee7\u7eed\u5904\u7406\nonDeliverToNext(q);\n}\nprotected void onDeliverToNext(QueuedInputEvent q) {\nif (DEBUG_INPUT_STAGES) {\nLog.v(mTag, \"Done with \" + getClass().getSimpleName() + \". \" + q);\n}\nif (mNext != null) {\n// 1.\u4ea4\u7ed9\u4e0b\u4e00\u4e2aInputUsage\u7ee7\u7eed\u5904\u7406\nmNext.deliver(q);\n} else {\n// 2.\u5224\u65ad\u6240\u6709\u7684InputUsage\u90fd\u5904\u7406\u5b8c\u6210\u5219\u8c03\u7528finishInputEvent\u7ed3\u675f\u89e6\u63a7\u4e8b\u4ef6\nfinishInputEvent(q);\n}\n}\n}\n</code></pre> <p>\u5176\u4e2d, <code>onProcess</code> \u51fd\u6570\u4f1a\u628a\u4e8b\u4ef6\u5206\u53d1\u5230 View \u6811\u7684\u6839\u8282\u70b9 DecorView \u7684 <code>dispatchTouchEvent</code> \u51fd\u6570\u4e2d\uff0c\u5177\u4f53\u6d41\u7a0b\u89c1 2.3.2.</p> <p>\u5904\u7406\u5b8c\u6210\u540e\uff0c\u8c03\u7528 <code>finishInputEvent</code> \u4f1a\u901a\u8fc7 Client \u7aef\u7684 <code>InputChannel</code> \u7684 <code>sendMessage</code> \u901a\u77e5 InputDispatcher. \u670d\u52a1\u7aef\u7684 InputDispatcher \u5728\u6536\u5230\u6d88\u606f\u540e\u5c06\u6b64\u89e6\u63a7\u4e8b\u4ef6\u79fb\u51fa\u7b49\u5f85\u961f\u5217\u3002</p>"},{"location":"android/dataflow/#view","title":"View \u7684\u89e6\u63a7\u4e8b\u4ef6\u5206\u53d1\u673a\u5236","text":"<p>\u5176\u4e2d <code>Window.Callback</code> \u6307\u5411\u5f53\u524d Activity. \u8fd9\u91cc\u6211\u4eec\u4f1a\u628a\u4e8b\u4ef6\u4ea4\u7ed9 Activity \u7684 <code>dispatchTouchEvent</code> \u5904\u7406\u4e8b\u4ef6\u3002</p> <pre><code>@Override\npublic boolean dispatchTouchEvent(MotionEvent ev) {\nfinal Window.Callback cb = mWindow.getCallback();\n// \u4ea4\u7ed9\u5e94\u7528 Activity \u7684 dispatchTouchEvent \u5904\u7406\u89e6\u63a7\u4e8b\u4ef6\nreturn cb != null &amp;&amp; !mWindow.isDestroyed() &amp;&amp; mFeatureId &lt; 0\n? cb.dispatchTouchEvent(ev) : super.dispatchTouchEvent(ev);\n}\n</code></pre> <p>Activity \u4e2d\u4f1a\u5148\u5c06\u4e8b\u4ef6\u4ea4\u7ed9 PhoneWindow \u5904\u7406\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4ea4\u7ed9 DecorView \u4e2d\u5904\u7406. DecorView \u4f1a\u7ee7\u7eed\u628a\u4e8b\u4ef6\u4ea4\u7ed9\u5176\u7236\u7c7b ViewGroup \u5904\u7406\u3002</p> <p>ViewGroup \u4e2d\u7684\u4e8b\u4ef6\u5206\u53d1\u7684\u4e3b\u8981\u903b\u8f91\u5c31\u662f</p> <ul> <li>\u5224\u65ad\u5b50 View \u4e2d\u662f\u5426\u8bbe\u7f6e\u4e86\u7981\u6b62\u7236 ViewGroup \u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6\u3002 \uff08\u89e3\u51b3\u6ed1\u52a8\u51b2\u7a81\u7684\u4e00\u4e2a\u4e3b\u8981\u601d\u8def\u5c31\u662f\u5b50 View <code>\u901a\u8fc7\u8c03\u7528requestDisallowInterceptTouchEvent</code> \u7981\u6b62\u7236 ViewGroup \u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6\uff0c\u4ece\u800c\u5c06\u4e8b\u4ef6\u7edf\u4e00\u4ea4\u7ed9\u5b50 View \u5904\u7406\u4ee5\u907f\u514d\u4ea7\u751f\u6ed1\u52a8\u51b2\u7a81\uff09</li> <li>\u82e5\u6ca1\u6709, <code>onInterceptTouchEvent</code> \u5224\u65ad\u662f\u5426\u62e6\u622a\u6b64\u4e8b\u4ef6\uff08\u9ed8\u8ba4\u4e3a False)\u3002</li> <li>\u4e0d\u62e6\u622a\uff0c\u5219\u904d\u5386\u6240\u6709\u5b50 View \u627e\u5230\u5339\u914d\u7684\u5b50 View, \u7136\u540e\u901a\u8fc7 <code>dispatchTransformedTouchEvent</code> \u4ea4\u7ed9\u8be5\u5b50 View \u7684 <code>dispatchTouchEvent</code> \u7ee7\u7eed\u5904\u7406\u3002</li> </ul> <pre><code> public boolean dispatchTouchEvent(MotionEvent ev) {\n...\nif (onFilterTouchEventForSecurity(ev)) {\n...\nif (actionMasked == MotionEvent.ACTION_DOWN\n|| mFirstTouchTarget != null) {\n// 1.\u5224\u65ad\u5b50View\u4e2d\u662f\u5426\u8bbe\u7f6e\u4e86\u7981\u6b62\u7236ViewGroup\u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6\uff0c\u89e3\u51b3\u6ed1\u52a8\u51b2\u7a81\u7684\u5173\u952e\nfinal boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;\nif (!disallowIntercept) {\n// onInterceptTouchEvent\u4e2d\u5224\u65adViewGroup\u662f\u5426\u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6\nintercepted = onInterceptTouchEvent(ev);\n}\n}\n...\nif (!canceled &amp;&amp; !intercepted) {\nif (actionMasked == MotionEvent.ACTION_DOWN\n|| (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)\n|| actionMasked == MotionEvent.ACTION_HOVER_MOVE) {\n...\nif (newTouchTarget == null &amp;&amp; childrenCount != 0) {\n...\nfinal View[] children = mChildren;\n// 2.\u5bf9\u6240\u6709\u5b50View\u8fdb\u884c\u904d\u5386\nfor (int i = childrenCount - 1; i &gt;= 0; i--) {\n...\nif (!child.canReceivePointerEvents()\n|| !isTransformedTouchPointInView(x, y, child, null)) {\n// 3.\u5982\u679c\u6b64View\u65e0\u6cd5\u63a5\u6536\u4e8b\u4ef6\u6216\u8005\u5f53\u524d\u4e8b\u4ef6\u7684\u6216\u843d\u70b9\u4e0d\u5728\u8fd9\u4e2aView\u533a\u57df\u5185\u5219\u8fd4\u56de\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af\ncontinue;\n}\n...\n// 4.\u8fd9\u91cc\u5c31\u4f1a\u6267\u884c\u5b50View\u4e8b\u4ef6\u5206\u53d1\u5904\u7406\u903b\u8f91\u4e86\nif (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {\n...\nbreak;\n}\n...\n}\n}\n...\n}\n}\n...\n}\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\nif (ev.isFromSource(InputDevice.SOURCE_MOUSE)\n&amp;&amp; ev.getAction() == MotionEvent.ACTION_DOWN\n&amp;&amp; ev.isButtonPressed(MotionEvent.BUTTON_PRIMARY)\n&amp;&amp; isOnScrollbarThumb(ev.getX(), ev.getY())) {\nreturn true;\n}\n// ViewGroup\u9ed8\u8ba4\u4e0d\u62e6\u622a\u4e8b\u4ef6\nreturn false;\n}\nprivate boolean dispatchTransformedTouchEvent(MotionEvent event, boolean cancel,\nView child, int desiredPointerIdBits) {\n...\n// Perform any necessary transformations and dispatch.\nif (child == null) {\nhandled = super.dispatchTouchEvent(transformedEvent);\n} else {\n...\n// \u8c03\u7528\u5b50View\u7684dispatchTouchEvent\u7ee7\u7eed\u8fdb\u884c\u4e8b\u4ef6\u5206\u53d1\nhandled = child.dispatchTouchEvent(transformedEvent);\n}\n...\n}\n</code></pre> <p>\u4e8b\u4ef6\u4f20\u9012\u5230 View \u7684 <code>dispatchTouchEvent</code> \u540e</p> <ul> <li>\u5224\u65ad\u8be5 View \u662f\u5426\u8bbe\u7f6e\u4e86\u89e6\u6478\u76d1\u542c\uff0c\u5373\u662f\u5426\u8c03\u7528\u8fc7 <code>setOnTouchListener</code> \u65b9\u6cd5\uff0c\u5982\u679c\u6709\u5219\u5c06\u4e8b\u4ef6\u4f20\u5165\u5176 <code>onTouch</code> \u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c</li> <li>\u6ca1\u6709\u8bbe\u7f6e\uff0c\u5219\u4f1a\u8c03\u7528 View \u7684 <code>onTouchEvent</code> \u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u4e2d\u4f1a\u6709\u6761\u4ef6\u7684\u8c03\u7528 <code>onClick</code> </li> </ul> <pre><code>public boolean dispatchTouchEvent(MotionEvent event) {\n...\nboolean result = false;\nif (onFilterTouchEventForSecurity(event)) {\n...\n// 1.\u5224\u65ad\u662f\u5426\u8c03\u7528\u8fc7setOnTouchListener\u65b9\u6cd5\uff0c\u5982\u679c\u6709\u5219\u5c06\u4e8b\u4ef6\u4f20\u5165\u5176onTouch\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c\nif (li != null &amp;&amp; li.mOnTouchListener != null\n&amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED\n&amp;&amp; li.mOnTouchListener.onTouch(this, event)) {\nresult = true;\n}\n// 2.onTouchEvent\u4e2d\u5224\u65ad\u662f\u5426\u6d88\u8d39\u89e6\u63a7\u4e8b\u4ef6\nif (!result &amp;&amp; onTouchEvent(event)) {\nresult = true;\n}\n}\n...\nreturn result;\n}\n</code></pre>"},{"location":"dip/","title":"\u56fe\u50cf\u4fe1\u606f\u5904\u7406","text":"<p>Abstract</p> <p>\u6d59\u6c5f\u5927\u5b66 \u201c\u56fe\u50cf\u4fe1\u606f\u5904\u7406\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0  </p> <ul> <li>\u6559\u6750: \u672a\u77e5 </li> <li>\u8001\u5e08: \u5b8b\u660e\u9ece/TA: \u80e1\u51ef\u6587</li> </ul>"},{"location":"dip/dip1/","title":"Introduction","text":""},{"location":"dip/dip1/#digital-image-representation","title":"Digital Image Representation","text":"<p>\u6bcf\u4e2a\u7070\u5ea6\u56fe\u50cf\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6216\u8005\u77e9\u9635 \u7070\u5ea6\u56fe\u50cf(grayscale image)\u4e00\u822c\u6bcf\u4e2a\u50cf\u7d20\uff08pixel\uff09\u7528\u4e00\u4e2a\u5b57\u8282\uff088bit\uff09\u8868\u793a\uff0c\u6b64\u65f6\u6700\u5927\u80fd\u8868\u793a[0..255]\u5171256\u4e2a\u7070\u5ea6\u7ea7\u3002   32 \u4f4d\u591a\u4e86\u4e00\u4e2a\u963f\u5c14\u6cd5\u901a\u9053, \u7528\u6765\u8868\u793a\u900f\u660e\u5ea6.    </p>"},{"location":"dip/dip1/#image-format","title":"Image Format","text":"<p>\u76ee\u7684: \u5b58\u50a8\u56fe\u50cf\u4fe1\u606f \u57fa\u4e8e\u50cf\u7d20, \u77e9\u5f62\u533a\u57df.   \u4e0d\u540c\u7684\u56fe\u50cf\u683c\u5f0f\u548c\u64cd\u4f5c\u7cfb\u7edf, \u8f6f\u4ef6\u6709\u5173.   \u7f16\u7801\u65b9\u6cd5: \u6709\u7684\u6709\u538b\u7f29, \u5305\u62ec\u6709\u635f\u538b\u7f29(\u4fe1\u606f\u6709\u635f\u5931), \u65e0\u635f\u538b\u7f29  \u5e38\u89c1\u683c\u5f0f: bmp, jpeg, tiff, gif, png...   </p> <p>Info</p> <p>\u624b\u673a\u91cc\u4e00\u822c\u662f jpeg. tiff \u4e3b\u8981\u7528\u4e8e\u5730\u7406\u4fe1\u606f\u7cfb\u7edf. gif \u662f\u52a8\u6001\u7684. \u4e92\u8054\u7f51\u4e00\u822c\u662f png.  </p>"},{"location":"dip/dip1/#bmp-format","title":"BMP Format","text":"<p>Windows \u7cfb\u7edf\u91cc\u7684\u6807\u51c6\u5f62\u5f0f, \u6709\u65f6\u88ab\u5b58\u4e3a<code>.dib</code>\u6587\u4ef6. \u5927\u90e8\u5206 BMP \u6587\u4ef6\u662f\u4e0d\u538b\u7f29\u7684\u5f62\u5f0f, \u4f46\u5b83\u672c\u8eab\u8fd8\u662f\u652f\u6301\u56fe\u50cf\u538b\u7f29\u7684\uff0c\u5982 rle \u683c\u5f0f\uff08\u884c\u7a0b\u957f\u5ea6\u7f16\u7801\uff0crunlength encoding\uff09\u538b\u7f29\u683c\u5f0f\u7b49  </p> <p></p> <ul> <li> <p>\u56fe\u50cf\u6587\u4ef6\u5934:   </p> <ul> <li><code>bfType</code>: \u8bf4\u660e\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u8be5\u503c\u5fc5\u9700\u662f0x4D42\uff0c\u4e5f\u5c31\u662f\u5b57\u7b26'BM'.(C \u8bed\u8a00\u53ef\u7528 fopen \u8bfb)  </li> <li><code>bfSize</code>: \u8bf4\u660e\u8be5\u4f4d\u56fe\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u7528\u5b57\u8282\u4e3a\u5355\u4f4d</li> <li><code>bfReserved1</code>: \u4fdd\u7559\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a0</li> <li><code>bfReserved2</code>: \u4fdd\u7559\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a0</li> <li><code>bfOffBits</code>: \u8bf4\u660e\u4ece\u6587\u4ef6\u5934\u5f00\u59cb\u5230\u5b9e\u9645\u7684\u56fe\u8c61\u6570\u636e\u4e4b\u95f4\u7684\u5b57\u8282\u7684\u504f\u79fb\u91cf\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u56e0\u4e3a\u4f4d\u56fe\u4fe1\u606f\u5934\u548c\u8c03\u8272\u677f\u7684\u957f\u5ea6\u4f1a\u6839\u636e\u4e0d\u540c\u60c5\u51b5\u800c\u53d8\u5316\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e2a\u504f\u79fb\u503c\u8fc5\u901f\u7684\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u4f4d\u6570\u636e.  </li> </ul> </li> <li> <p>\u56fe\u50cf\u4fe1\u606f\u5934: </p> <ul> <li><code>biSize</code> \u8bf4\u660e BITMAPINFOHEADER(\u56fe\u50cf\u4fe1\u606f\u5934) \u7ed3\u6784\u6240\u9700\u8981\u7684\u5b57\u6570.  </li> <li><code>biWidth</code> \u8bf4\u660e\u56fe\u8c61\u7684\u5bbd\u5ea6\uff0c\u4ee5\u8c61\u7d20\u4e3a\u5355\u4f4d.  </li> <li><code>biHeight</code> \u8bf4\u660e\u56fe\u8c61\u7684\u9ad8\u5ea6\uff0c\u4ee5\u8c61\u7d20\u4e3a\u5355\u4f4d.  \u6ce8\uff1a\u8fd9\u4e2a\u503c\u9664\u4e86\u7528\u4e8e\u63cf\u8ff0\u56fe\u50cf\u7684\u9ad8\u5ea6\u4e4b\u5916\uff0c\u5b83\u8fd8\u6709\u53e6\u4e00\u4e2a\u7528\u5904\uff0c\u5c31\u662f\u6307\u660e\u8be5\u56fe\u50cf\u662f\u5012\u5411\u7684\u4f4d\u56fe\uff0c\u8fd8\u662f\u6b63\u5411\u7684\u4f4d\u56fe\u3002\u5982\u679c\u8be5\u503c\u662f\u4e00\u4e2a\u6b63\u6570\uff0c\u8bf4\u660e\u56fe\u50cf\u662f\u5012\u5411\u7684(\u5934\u671d\u4e0a\u811a\u671d\u4e0b)\uff0c\u5982\u679c\u8be5\u503c\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u5219\u8bf4\u660e\u56fe\u50cf\u662f\u6b63\u5411\u7684\u3002\u5927\u591a\u6570\u7684BMP\u6587\u4ef6\u90fd\u662f\u5012\u5411\u7684\u4f4d\u56fe\uff0c\u4e5f\u5c31\u662f\u65f6\uff0c\u9ad8\u5ea6\u503c\u662f\u4e00\u4e2a\u6b63\u6570.(\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u4f1a\u63d0\u524d\u5904\u7406\u4ee5\u4fdd\u8bc1\u6211\u4eec\u770b\u5230\u7684\u662f\u6b63\u5411\u7684)    </li> <li><code>biPlanes</code> \u4e3a\u76ee\u6807\u8bbe\u5907\u8bf4\u660e\u4f4d\u9762\u6570\uff0c\u5176\u503c\u5c06\u603b\u662f\u88ab\u8bbe\u4e3a 1.  </li> <li><code>biBitCount</code> \u6bcf\u4e2a\u50cf\u7d20\u591a\u5c11\u4f4d. \u5176\u503c\u4e3a1\u30014\u30018\u300116\u300124\u3001\u6216 32.  \u5982\u679c\u50cf\u7d20\u5341\u516d\u4f4d, \u5373\u4e3a\u4f2a\u5f69\u8272(\u4ecb\u4e8e\u9ed1\u767d\u548c\u5f69\u8272\u4e4b\u95f4)   </li> <li><code>biCompression</code> \u8bf4\u660e\u56fe\u8c61\u6570\u636e\u538b\u7f29\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ea\u8ba8\u8bba\u6ca1\u6709\u538b\u7f29\u7684\u7c7b\u578b\uff1aBI_RGB.  </li> <li><code>biSizeImage</code> \u8bf4\u660e\u56fe\u8c61\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d.  \u5f53\u7528 BI_RGB \u683c\u5f0f\u65f6\uff0c\u53ef\u8bbe\u7f6e\u4e3a 0.  </li> <li><code>biXPelsPerMeter/biYPelsPerMeter</code> \u6c34\u5e73/\u5782\u76f4\u65b9\u5411\u5206\u8fa8\u7387, \u6bcf\u7c73\u6709\u591a\u5c11\u4e2a\u50cf\u7d20. \u50cf\u7d20\u4e0d\u662f\u8d8a\u591a\u8d8a\u597d, \u800c\u662f\u9897\u7c92\u8d8a\u5c0f\u8d8a\u597d.   </li> <li><code>biClrUsd</code> \u4f4d\u56fe\u4e2d\u5b9e\u9645\u8981\u4f7f\u7528\u7684\u989c\u8272\u7d22\u5f15\u7684\u6570\u91cf.(0 \u8bf4\u660e\u8981\u4f7f\u7528\u6240\u6709\u8c03\u8272\u677f\u9879).     </li> <li><code>biClrImportant</code> \u8bf4\u660e\u5bf9\u56fe\u8c61\u663e\u793a\u6709\u91cd\u8981\u5f71\u54cd\u7684\u989c\u8272\u7d22\u5f15\u7684\u6570\u76ee\uff0c\u5982\u679c\u662f 0\uff0c\u8868\u793a\u90fd\u91cd\u8981. \u5f53\u4e0d\u5f97\u4e0d\u629b\u5f03\u989c\u8272\u65f6, \u4f1a\u5148\u628a\u4e0d\u91cd\u8981\u7684\u989c\u8272\u4e22\u6389.    </li> </ul> </li> <li> <p>\u8c03\u8272\u677f(palette). </p> <ul> <li>\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u84dd\u8272, \u4e00\u4e2a\u5b57\u8282\u8868\u793a\u7eff\u8272, \u4e00\u4e2a\u5b57\u8282\u8868\u793a\u7ea2\u8272, \u4e00\u4e2a\u5b57\u8282\u603b\u662f 0.(BGR)   </li> <li>\u5185\u5b58\u5145\u8db3, \u5f80\u5f80\u4e0d\u518d\u9700\u8981\u8c03\u8272\u677f, \u76f4\u63a5\u5b58\u6570\u636e.  </li> </ul> </li> <li> <p>\u4f4d\u56fe\u6570\u636e(Bitmap data)</p> <ul> <li>\u6bcf\u4e00\u884c\u7684\u5b57\u8282\u6570\u5fc5\u987b\u662f4\u7684\u6574\u500d\u6570\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u9700\u8981\u8865\u9f50\u3002  </li> <li>\u4e00\u822c\u6765\u8bf4\uff0c.bMP\u6587\u4ef6\u7684\u6570\u636e\u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u6587\u4ef6\u4e2d\u6700\u5148\u8bfb\u5230\u7684\u662f\u56fe\u8c61\u6700\u4e0b\u9762\u4e00\u884c\u7684\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u8c61\u7d20\uff0c\u7136\u540e\u662f\u5de6\u8fb9\u7b2c\u4e8c\u4e2a\u8c61\u7d20\u2026\u2026\u63a5\u4e0b\u6765\u662f\u5012\u6570\u7b2c\u4e8c\u884c\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u8c61\u7d20\uff0c\u5de6\u8fb9\u7b2c\u4e8c\u4e2a\u8c61\u7d20\u2026\u2026\u4f9d\u6b21\u7c7b\u63a8 \uff0c\u6700\u540e\u5f97\u5230\u7684\u662f\u6700\u4e0a\u9762\u4e00\u884c\u7684\u6700\u53f3\u4e00\u4e2a\u8c61\u7d20\u3002</li> </ul> </li> </ul>"},{"location":"dip/dip1/#jpeg","title":"JPEG","text":"<ul> <li>\u538b\u7f29\u7b56\u7565\uff1a\u6839\u636e\u538b\u7f29\u6bd4\u8981\u6c42\uff0c\u4ece\u9ad8\u9891\u5230\u4f4e\u9891\u9010\u6b65\u524a\u51cf\u4fe1\u606f</li> <li>\u597d\u5904<ul> <li>\u9ad8\u9891\u4fe1\u606f\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5927\uff0c\u51cf\u5c11\u9ad8\u9891\u4fe1\u606f\u66f4\u5bb9\u6613\u83b7\u5f97\u9ad8\u538b\u7f29\u6bd4\uff1b</li> <li>\u4f4e\u9891\u4fe1\u606f\u53ef\u4ee5\u4fdd\u7559\u7269\u4f53\u7684\u57fa\u672c\u8f6e\u5ed3\u548c\u8272\u5f69\u5206\u5e03\uff0c\u6700\u5927\u9650\u5ea6\u7ef4\u6301\u56fe\u50cf\u8d28\u91cf\u3002</li> <li>\u9002\u5408\u7528\u4e8e\u4e92\u8054\u7f51</li> </ul> </li> </ul> <p>\u4e0d\u9002\u5408\u7528\u4e8e\u7ebf\u6761\u753b\u3001\u6587\u5b57\u3001\u56fe\u6807\u7b49\uff0c\u5176\u6709\u635f\u538b\u7f29\u4f1a\u5bfc\u81f4\u8fd9\u7c7b\u5bf9\u8c61\u7684\u7455\u75b5\u4e25\u91cd</p>"},{"location":"dip/dip1/#tiff","title":"TIFF","text":"<p>TIFF\u662fTagged Image File Format\u7684\u7f29\u5199\uff0c\u662f\u4e00\u4e2a\u5e7f\u4e3a\u5e94\u7528\u7684\u5149\u6805\u56fe\u50cf\u6587\u4ef6\u683c\u5f0f\uff0c\u5b83\u7684\u6765\u6e90\u6709\uff1a\u626b\u63cf\u4eea\u3001CAD\u7cfb\u7edf\u3001\u5730\u7406\u4fe1\u606f TIFF\u662f\u4e00\u4e2a\u975e\u5e38\u7a33\u5b9a\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u6709\u5f88\u957f\u7684\u5e94\u7528\u5386\u53f2\uff0c\u6709\u516c\u5171\u7684\u8f6f\u4ef6\u5e93\u6765\u8bfb\u5199TIFF\u683c\u5f0f\u7684\u56fe\u50cf\uff08\u652f\u6301\u5404\u79cd\u64cd\u4f5c\u7cfb\u7edf\uff09</p> <ul> <li>\u652f\u6301\u4ece\u9ad8\u7aef\u5230\u4f4e\u7aef\u7684\u8bbe\u5907</li> <li>\u53ef\u6269\u5c55\u6027\u5f3a\uff0c\u652f\u6301\u516c\u5171\u548c\u79c1\u7528\u7684\u6807\u8bb0\u7ed3\u6784\uff08\u6bcf\u4e2a\u516c\u53f8\u6709\u81ea\u5df1\u79c1\u6709\u7684\u90e8\u5206\uff09</li> <li>\u652f\u6301\u5404\u79cd\u538b\u7f29\u683c\u5f0f</li> <li>\u6709\u516c\u5171\u8f6f\u4ef6\u5e93\u652f\u6301</li> <li>\u4e8c\u503c\u56fe\u3001\u7070\u5ea6\u56fe\u3001\u8c03\u8272\u677f\u3001\u771f\u5f69\u8272\u3001\u5176\u4ed6\u6269\u5c55</li> </ul>"},{"location":"dip/dip1/#gif","title":"GIF","text":"<p>Graphics Interchange Format</p> <ul> <li>\u91c7\u7528\u590d\u6742\u7684 LZW \u7f16\u7801\u65b9\u5f0f</li> <li>\u4e00\u4e2a GIF \u6587\u4ef6\u53ef\u4ee5\u5b58\u50a8\u591a\u5e45\u56fe\u50cf</li> <li>\u5e26\u6709\u8272\u5f69\u8868\uff08\u5168\u5c40\u3001\u5c40\u90e8\u8272\u5f69\u8868\uff09</li> <li>\u652f\u6301\u56fe\u50cf\u5b9a\u5e8f\u663e\u793a\u6216\u8986\u76d6(\u64ad\u653e\u6b21\u5e8f\uff0c\u5982\u4ece\u540e\u5f80\u524d)</li> <li>\u53ef\u4ee5\u9519\u884c\u5b58\u653e</li> <li>\u652f\u6301\u6587\u672c\u8986\u76d6\u5d4c\u5165</li> </ul>"},{"location":"dip/dip1/#basic-principle-of-imaging","title":"Basic Principle of Imaging","text":"<p>\u901a\u8fc7\u4f7f\u7528\u900f\u955c\u53ef\u4ee5\u4f1a\u805a\u66f4\u591a\u7684\u5149\u7ebf\u5230\u4e00\u4e2a\u6210\u50cf\u70b9\uff0c\u53ea\u662f\u53ea\u6709\u5728\u7279\u6b8a\u7684\u4f4d\u7f6e\u4e0a\u624d\u80fd\u8fbe\u5230\u8fd9\u4e2a\u76ee\u6807\uff0c\u5373\u5927\u5bb6\u4ee5\u524d\u5c31\u5b66\u4e60\u8fc7\u7684\u900f\u955c\u805a\u7126\u3002\u4f4d\u4e8e\u5408\u9002\u8ddd\u79bb\u7684\u7269\u4f53\u70b9\u53ef\u4ee5\u6210\u6e05\u6670\u50cf\uff0c\u5176\u4ed6\u7684\u70b9\u5219\u4f1a\u4ea7\u751f\u5f25\u6563\u5706\u3002 \u901a\u8fc7\u6539\u53d8\u955c\u5934\u7684\u5f62\u72b6\u53ef\u4ee5\u6539\u53d8\u805a\u7126\u65f6\u7684\u7269\u4f53\u70b9\u6240\u9700\u8981\u7684\u8ddd\u79bb\u3002</p> <p>\u5f25\u6563\u5706(circle of confusion) \uff1a\u5728\u7126\u70b9\u524d\u540e\uff0c\u5149\u7ebf\u5f00\u59cb\u805a\u96c6\u548c\u6269\u6563\uff0c\u70b9\u7684\u5f71\u50cf\u53d8\u6a21\u7cca\uff0c\u5f62\u6210\u4e00\u4e2a\u6269\u5927\u7684\u5706\u3002\u5982\u679c\u5f25\u6563\u5706\u7684\u76f4\u5f84\u5c0f\u4e8e\u4eba\u773c\u7684\u9274\u522b\u80fd\u529b\uff0c\u5728\u4e00\u5b9a\u8303\u56f4\u5185\u5b9e\u9645\u5f71\u50cf\u4ea7\u751f\u7684\u6a21\u7cca\u662f\u4e0d\u80fd\u8fa8\u8ba4\u7684\u3002\u4e0d\u80fd\u8fa8\u8ba4\u7684\u76f4\u5f84\u53eb\u505a\u5bb9\u8bb8\u5f25\u6563\u5706\u3002\u7126\u70b9\u524d\u540e\u5404\u6709\u4e00\u4e2a\u5bb9\u8bb8\u5f25\u6563\u5706\u3002\u5bf9\u4e8e6\u5bf8\u7167\u7247\uff0c\u89c2\u5bdf\u8ddd\u79bb25\uff0d30cm \uff0c\u5927\u6982\u662f\u5e95\u7247\u5bf9\u89d2\u7ebf1/1000-1/1500\uff0c</p> <p>\u6570\u7801\u76f8\u673a\u7684\u6210\u50cf\u8fc7\u7a0b\uff1a</p> <ul> <li>\u5f53\u4f7f\u7528\u6570\u7801\u76f8\u673a\u62cd</li> <li>\u5f53CCD\u66dd\u5149\u540e\uff0c\u5149\u7535\u4e8c\u6781\u7ba1\u53d7\u5230\u5149\u7ebf\u7684\u6fc0\u53d1\u800c\u91ca\u653e\u51fa\u7535\u8377\uff0c\u751f\u6210\u611f\u5149\u5143\u4ef6\u7684\u7535\u4fe1\u53f7\u3002\u6444\u666f\u7269\u65f6\uff0c\u666f\u7269\u53cd\u5c04\u7684\u5149\u7ebf\u901a\u8fc7\u6570\u7801\u76f8\u673a\u7684\u955c\u5934\u900f\u5c04\u5230CCD\u4e0a\u3002</li> <li>CCD\u63a7\u5236\u82af\u7247\u5229\u7528\u611f\u5149\u5143\u4ef6\u4e2d\u7684\u63a7\u5236\u4fe1\u53f7\u7ebf\u8def\u5bf9\u53d1\u5149\u4e8c\u6781\u7ba1\u4ea7\u751f\u7684\u7535\u6d41\u8fdb\u884c\u63a7\u5236\uff0c\u7531\u7535\u6d41\u4f20\u8f93\u7535\u8def\u8f93\u51fa\uff0cCCD\u4f1a\u5c06\u4e00\u6b21\u6210\u50cf\u4ea7\u751f\u7684\u7535\u4fe1\u53f7\u6536\u96c6\u8d77\u6765\uff0c\u7edf\u4e00\u8f93\u51fa\u5230\u653e\u5927\u5668\u3002</li> <li>\u7ecf\u8fc7\u653e\u5927\u548c\u6ee4\u6ce2\u540e\u7684\u7535\u4fe1\u53f7\u88ab\u4f20\u9001\u5230ADC\uff0c\u7531ADC\u5c06\u7535\u4fe1\u53f7\uff08\u6a21\u62df\u4fe1\u53f7\uff09\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0c\u6570\u503c\u7684\u5927\u5c0f\u548c\u7535\u4fe1\u53f7\u7684\u5f3a\u5ea6\u4e0e\u7535\u538b\u7684\u9ad8\u4f4e\u6210\u6b63\u6bd4\uff0c\u8fd9\u4e9b\u6570\u503c\u5176\u5b9e\u4e5f\u5c31\u662f\u56fe\u50cf\u7684\u6570\u636e\u3002</li> <li>\u6b64\u65f6\u8fd9\u4e9b\u56fe\u50cf\u6570\u636e\u8fd8\u4e0d\u80fd\u76f4\u63a5\u751f\u6210\u56fe\u50cf\uff0c\u8fd8\u8981\u8f93\u51fa\u5230DSP\uff08\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668\uff09\u4e2d\uff0c\u5728DSP\u4e2d\uff0c\u5c06\u4f1a\u5bf9\u8fd9\u4e9b\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u8272\u5f69\u6821\u6b63\u3001\u767d\u5e73\u8861\u5904\u7406\uff0c\u5e76\u7f16\u7801\u4e3a\u6570\u7801\u76f8\u673a\u6240\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\u3001\u5206\u8fa8\u7387\uff0c\u7136\u540e\u624d\u4f1a\u88ab\u5b58\u50a8\u4e3a\u56fe\u50cf\u6587\u4ef6\u3002</li> <li>\u5f53\u5b8c\u6210\u4e0a\u8ff0\u6b65\u9aa4\u540e\uff0c\u56fe\u50cf\u6587\u4ef6\u5c31\u4f1a\u88ab\u4fdd\u5b58\u5230\u5b58\u50a8\u5668\u4e0a,\u6211\u4eec\u5c31\u53ef\u4ee5\u6b23\u8d4f\u4e86\u3002</li> </ul>"},{"location":"dip/dip1/#light-and-color","title":"Light and Color","text":"<ul> <li> <p>\u8272\u5f69     \u8272\u5f69\u53ef\u4ee5\u5206\u4e3a\u5f69\u8272\uff08chromatic color\uff09\u548c\u6d88\u8272\uff08achromatic color\uff09\u4e24\u5927\u7c7b\u3002</p> <ul> <li>\u5f69\u8272\u662f\u6307\u7ea2\u3001\u9ec4\u3001\u84dd\u7b49\u5355\u8272\u4ee5\u53ca\u5b83\u4eec\u7684\u6df7\u5408\u8272\u3002\u5f69\u8272\u7269\u4f53\u5bf9\u5149\u8c31\u5404\u6ce2\u957f\u7684\u53cd\u5c04\u5177\u6709\u9009\u62e9\u6027\uff0c\u6240\u4ee5\u5b83\u4eec\u5728\u767d\u5149\u7167\u5c04\u4e0b\u5448\u73b0\u51fa\u4e0d\u540c\u7684\u989c\u8272\u3002  </li> <li>\u6d88\u8272\uff0c\u53c8\u79f0\u975e\u5f69\u8272\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684\u7070\u5ea6\uff0c\u662f\u6307\u767d\u8272\uff0c\u9ed1\u8272\u4ee5\u53ca\u5404\u79cd\u6df1\u6d45\u4e0d\u540c\u7684\u7070\u8272\u3002\u6d88\u8272\u7269\u4f53\u5bf9\u5149\u8c31\u5404\u6ce2\u957f\u7684\u53cd\u5c04\u6ca1\u6709\u9009\u62e9\u6027\uff0c\u5b83\u4eec\u662f\u4e2d\u6027\u8272\u3002</li> <li>\u8272\u89c9 \u8272\u89c9\u662f\u6307\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u7ebf\u4f5c\u7528\u4e8e\u89c6\u7f51\u819c\u800c\u5728\u5927\u8111\u4e2d\u5f15\u8d77\u7684\u611f\u89c9\u3002\u4eba\u773c\u53ef\u89c1\u5149\u7ebf\u7684\u6ce2\u957f\u662f390nm\uff5e780nm\uff0c\u4e00\u822c\u53ef\u8fa8\u51fa\u5305\u62ec\u7d2b\u3001\u84dd\u3001\u9752\u3001\u7eff\u3001\u9ec4\u3001\u6a59\u3001\u7ea27\u79cd\u4e3b\u8981\u989c\u8272\u5728\u5185\u7684120\uff5e180\u79cd\u4e0d\u540c\u7684\u989c\u8272\u3002  </li> </ul> </li> <li> <p>\u89c6\u7f51\u819c \u89c6\u7f51\u819c\u662f\u4eba\u773c\u4e2d\u6700\u91cd\u8981\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u5c31\u50cf\u76f8\u673a\u91cc\u7684\u611f\u5149\u5e95\u7247\uff0c\u4e13\u95e8\u8d1f\u8d23\u611f\u5149\u6210\u50cf\u3002\u6355\u6349\u5149\u5e76\u4ea7\u751f\u56fe\u50cf\u3002  \u77b3\u5b54\u53ef\u4ee5 \u653e\u5927\u653e\u5c0f   ---- \u5149\u5708 \u8fd9\u91cc\u6709\u4e24\u79cd\u89c6\u89c9\u7ec6\u80de</p> <ul> <li>\u9525\u5f62 \u6570\u91cf\u5c11, \u4f46\u53ef\u4ee5\u533a\u5206\u8272\u5f69(\u524d\u63d0: \u5149\u7ebf\u6bd4\u8f83\u5145\u8db3\uff0c\u5f3a\u5149\u624d\u80fd\u6fc0\u53d1)</li> <li>\u6746\u72b6 \u6570\u91cf\u591a, \u5bf9\u5149\u7684\u4eae\u5ea6\u6bd4\u8f83\u654f\u611f, \u4f46\u4e0d\u80fd\u533a\u5206\u8272\u5f69</li> </ul> </li> </ul> <p>\u4e09\u539f\u8272\u662f\u76ee\u524d\u6700\u4e3a\u4ee3\u8868\u6027\u7684\u8272\u89c9\u673a\u5236\u89e3\u91ca\uff1a \u5728\u89c6\u7f51\u819c\u4e0a\u5b58\u5728\u7740\u4e09\u79cd\u5206\u522b\u5bf9\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u7ebf\u7684\u6ce2\u957f\u7279\u522b\u654f\u611f\u7684\u89c6\u9525\u7ec6\u80de\u6216\u76f8\u5e94\u7684\u611f\u5149\u8272\u7d20\uff0c\u5f53\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u7ebf\u8fdb\u5165\u4eba\u773c\u65f6\uff0c\u4e0e\u4e4b\u76f8\u7b26\u6216\u76f8\u8fd1\u7684\u89c6\u9525\u7ec6\u80de\u53d1\u751f\u4e0d\u540c\u7a0b\u5ea6\u7684\u5174\u594b\uff0c\u4e8e\u662f\u5728\u5927\u8111\u4ea7\u751f\u76f8\u5e94\u7684\u8272\u89c9\uff1b\u4e09\u79cd\u89c6\u9525\u7ec6\u80de\u82e5\u53d7\u5230\u540c\u7b49\u7a0b\u5ea6\u7684\u523a\u6fc0\uff0c\u5219\u4ea7\u751f\u6d88\u8272\u3002</p>"},{"location":"dip/dip1/#color-vision-basic","title":"Color Vision Basic","text":"<p>\u56fd\u9645\u7167\u660e\u59d4\u5458\u4f1a\uff08Commission internationale de l\u2018\u00e9clairage\uff09\uff0c\u7b80\u79f0CIE\uff0c\u57281931\u5e74\u6839\u636e\u5df2\u6709\u7684\u5b9e\u9a8c\u7ed3\u679c\uff0c\u9009\u62e9700nm\uff08R\uff09\u3001541.6nm\uff08G\uff09\u3001435.8nm\uff08B\uff09\u4f5c\u4e3a\u4e09\u539f\u8272\uff0c\u8ba1\u7b97\u51fa\u76f8\u5e94\u7684\u5149\u8c31\u4e09\u523a\u6fc0\u503c r\u3001g \u3001b \uff0c\u5176\u4e09\u523a\u6fc0\u503c\u66f2\u7ebf\u5982\u56fe\u6240\u793a\uff1a</p>"},{"location":"dip/dip1/#properties-of-color-vision","title":"Properties of Color Vision","text":"<ul> <li> <p>\u7edd\u5bf9\u8272\u89c9\u611f\u77e5\u4e0d\u51c6\u786e\uff0c\u4e00\u822c\u901a\u8fc7\u4e0a\u4e0b\u6587\u5224\u65ad\u3002\u6240\u4ee5\u8bf4\u6709\u65f6\u5019\u4f1a\u51fa\u9519\uff0c\u8fd9\u4e2a\u53ebvision illusion</p> Vision Illusion <p> </p> </li> <li> <p>\u611f\u77e5\u80fd\u529b, \u4e0d\u540c\u7684\u4eba\u7684\u611f\u77e5\u80fd\u529b\u4e5f\u4e0d\u540c </p> </li> <li>Weber's Law \u611f\u77e5\u5230\u7684\u5bf9\u6bd4\u5ea6, \u548c\u80cc\u666f\u7684\u7070\u5ea6\u6210\u6b63\u6bd4.  \u80fd\u88ab\u611f\u77e5\u5230\u7684 deltaI \u4e0e I \u6210\u6b63\u6bd4(\u9ec4\u8272\u7ebf\u5185\u7b26\u5408\u8fd9\u4e2a\u5b9a\u5f8b)    </li> </ul> <ul> <li>\u611f\u77e5\u7684\u4f18\u5148\u7a0b\u5ea6\u548c\u654f\u611f\u5ea6    <ul> <li>\u4f18\u5148\u7a0b\u5ea6\uff1a\u540c\u7b49\u6761\u4ef6\u4e0b\uff0c\u4eba\u4eec\u5f80\u5f80\u4f1a\u6ce8\u610f\u5230\u8272\u8c03\uff08Hue, H\uff09\u7684\u53d8\u5316\uff0c\u7136\u540e\u662f\u9971\u548c\u5ea6\uff08Saturation, S\uff09\uff0c\u7136\u540e\u662f\u4eae\u5ea6\uff08Value, V\uff09\u3002</li> <li>\u654f\u611f\u5ea6\uff1a\u4eba\u773c\u5bf9\u4e8e\u4eae\u5ea6\u7684\u53d8\u5316\u6700\u4e3a\u654f\u611f\uff0c\u5206\u8fa8\u80fd\u529b\u6700\u5f3a\u3002\u6070\u597d\u4e0e\u4eba\u773c\u7684\u9ad8\u52a8\u6001\u80fd\u529b\u76f8\u5339\u914d\u3002</li> </ul> </li> </ul>"},{"location":"dip/dip1/#color-space","title":"Color Space","text":"<p>\u989c\u8272\u6a21\u578b\u5305\u62ec\u4e00\u7cfb\u5217\u989c\u8272\u6a21\u578b\uff0c\u8fd9\u4e9b\u989c\u8272\u6a21\u578b\u662f\u7531\u56fd\u9645\u7167\u660e\u59d4\u5458\u4f1a\u63d0\u51fa\u7684\uff0c\u662f\u57fa\u4e8e\u4eba\u7684\u773c\u775b\u5bf9RGB\u7684\u53cd\u5e94\uff0c\u88ab\u7528\u4e8e\u7cbe\u786e\u8868\u793a\u5bf9\u8272\u5f69\u7684\u63a5\u6536\u3002  </p> <p>\u8bbe\u5907\u65e0\u5173\u6027\uff1a\u8fd9\u4e9b\u989c\u8272\u6a21\u578b\u88ab\u7528\u6765\u5b9a\u4e49\u6240\u8c13\u7684\u72ec\u7acb\u4e8e\u8bbe\u5907\u7684\u989c\u8272\u3002\u5b83\u80fd\u591f\u5728\u4efb\u4f55\u7c7b\u578b\u7684\u8bbe\u5907\u4e0a\u4ea7\u751f\u771f\u5b9e\u7684\u989c\u8272\uff0c\u4f8b\u5982\uff1a\u626b\u63cf\u4eea\u3001\u76d1\u89c6\u5668\u548c\u6253\u5370\u673a\u3002\u8fd9\u4e9b\u6a21\u578b\u88ab\u5e7f\u6cdb\u5730\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u5f88\u5bb9\u6613\u88ab\u7528\u4e8e\u8ba1\u7b97\u673a\uff0c\u63cf\u8ff0\u989c\u8272\u7684\u8303\u56f4\u3002</p> <ul> <li> <p>\u4e0e\u8bbe\u5907\u6709\u5173\u7684\u989c\u8272\u6a21\u578b: RGB, CMY, HSV</p> </li> <li> <p>\u4e0e\u8bbe\u5907\u65e0\u5173\u7684\u989c\u8272\u6a21\u578b\uff1a \u4e3b\u8981\u662f\u56fd\u9645\u7167\u660e\u59d4\u5458\u4f1a(CIE, Commission Internationale de L\u2018Eclairage/International Commission on Illumination)\u5b9a\u4e49\u7684CIE CIE XYZ, CIE L*a*b\u548c CIE YUV \u8fd9\u4e9b\u989c\u8272\u6a21\u578b\u88ab\u7528\u6765\u5b9a\u4e49\u6240\u8c13\u7684\u72ec\u7acb\u4e8e\u8bbe\u5907\u7684\u989c\u8272\u3002\u5b83\u80fd\u591f\u5728\u4efb\u4f55\u7c7b\u578b\u7684\u8bbe\u5907\u4e0a\u4ea7\u751f\u771f\u5b9e\u7684\u989c\u8272\uff0c\u4f8b\u5982\uff1a\u626b\u63cf\u4eea\u3001\u76d1\u89c6\u5668\u548c\u6253\u5370\u673a\u3002\u8fd9\u4e9b\u6a21\u578b\u88ab\u5e7f\u6cdb\u5730\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u5f88\u5bb9\u6613\u88ab\u7528\u4e8e\u8ba1\u7b97\u673a\uff0c\u63cf\u8ff0\u989c\u8272\u7684\u8303\u56f4\u3002</p> </li> </ul>"},{"location":"dip/dip1/#rgb-color-model","title":"RGB Color Model","text":"<p>RBG \u989c\u8272\u6a21\u578b\u662f\u4e09\u7ef4\u76f4\u89d2\u5750\u6807\u989c\u8272\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u5355\u4f4d\u6b63\u65b9\u4f53 \u5728\u6b63\u65b9\u4f53\u7684\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u5404\u539f\u8272\u7684\u91cf\u76f8\u7b49\uff0c\u4ea7\u751f\u7531\u6697\u5230\u4eae\u7684\u767d\u8272\uff0c\u5373\u7070\u5ea6\u3002\uff080\uff0c0\uff0c0\uff09\u4e3a\u9ed1\uff0c\uff081\uff0c1\uff0c1\uff09\u4e3a\u767d\uff0c\u6b63\u65b9\u4f53\u7684\u5176\u4ed66\u4e2a\u89d2\u70b9\u5206\u522b\u4e3a\u7ea2\u3001\u9ec4\u3001\u7eff\u3001\u9752\u3001\u84dd\u548c\u54c1\u7ea2\u3002 RGB\u989c\u8272\u6a21\u578b\u6784\u6210\u7684\u989c\u8272\u7a7a\u95f4\u662fCIE\u539f\u8272\u7a7a\u95f4\u7684\u4e00\u4e2a\u771f\u5b50\u96c6\u3002 RGB\u989c\u8272\u6a21\u578b\u901a\u5e38\u7528\u4e8e\u5f69\u8272\u9634\u6781\u5c04\u7ebf\u7ba1\u548c\u5f69\u8272\u5149\u6805\u56fe\u5f62\u663e\u793a\u5668\uff08\u8ba1\u7b97\u673a\u548c\u7535\u89c6\u673a\u91c7\u7528\uff09\u3002</p>"},{"location":"dip/dip1/#cmy-color-model","title":"CMY Color Model","text":"<p>\u5f69\u8272\u5370\u5237\u6216\u8005\u5f69\u8272\u6253\u5370\u7684\u7eb8\u5f20\u4e0d\u80fd\u53d1\u5c04\u5149\u7ebf\uff0c\u56e0\u800c\u5370\u5237\u673a\u6216\u6253\u5370\u673a\u5c31\u53ea\u80fd\u4f7f\u7528\u4e00\u4e9b\u80fd\u591f\u5438\u6536\u7279\u5b9a\u5149\u6ce2\u800c\u53cd\u5c04\u5176\u4ed6\u5149\u6ce2\u7684\u6cb9\u58a8\u6216\u8005\u989c\u8272\u3002</p> <p>\u6cb9\u58a8\u6216\u989c\u6599\u76843\u79cd\u57fa\u8272\u662f\u4ee5\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u8272\u7684\u8865\u8272\u9752\uff08Cyan\uff09\u3001\u54c1\u7ea2\uff08Magenta\uff09\u3001\u9ec4\uff08Yellow\uff09\u4e3a\u57fa\u8272\u3002</p> <p>\u7528CMY\u6a21\u578b\u4ea7\u751f\u7684\u989c\u8272\u79f0\u4e3a\u76f8\u51cf\u8272\uff0c\u662f\u56e0\u4e3a\u5b83\u51cf\u6389\u4e86\u4e3a\u89c6\u89c9\u7cfb\u7edf\u8bc6\u522b\u989c\u8272\u6240\u9700\u8981\u7684\u53cd\u5c04\u5149</p> <p>CMY\u7a7a\u95f4\u4e0eRGB\u7a7a\u95f4\u4e92\u8865\uff0c\u4e5f\u5c31\u662f\u7528\u767d\u8272\u51cf\u53bbRGB\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e00\u989c\u8272\u503c\u5c31\u7b49\u4e8e\u540c\u6837\u989c\u8272\u5728CMY\u7a7a\u95f4\u4e2d\u7684\u503c</p>"},{"location":"dip/dip1/#hsv-color-model","title":"HSV Color Model","text":"<p>\u989c\u8272\u7a7a\u95f4\u662f\u4ece\u4eba\u7684\u89c6\u89c9\u7cfb\u7edf\u51fa\u53d1\uff0c\u7528\u8272\u8c03\uff08Hue)\u3001\u8272\u9971\u548c\u5ea6\uff08Saturation\uff09\u548c\u4eae\u5ea6\uff08Intensity\uff0c\u6216\u8005Value\uff09\u6765</p> <p>\u5706\u9525\u7684\u9876\u9762\u5bf9\u5e94\u4e8eV=1\uff0c\u5b83\u5305\u542bRGB\u6a21\u578b\u4e2d\u7684R=1\uff0cG=1\uff0cB=1\u4e09\u4e2a\u9762\uff0c\u6545\u6240\u4ee3\u8868\u7684\u989c\u8272\u8f83\u4eae\u3002\u8272\u5ea6H\u7531\u7ed5V\u8f74\u7684\u65cb\u8f6c\u89d2\u7ed9\u5b9a\u3002\u7ea2\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea60o\uff0c\u7eff\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea6120o\uff0c\u84dd\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea6240o\u3002\u63cf\u8ff0\u989c\u8272\u3002</p> <p>\u5728\u5706\u9525\u7684\u9876\u70b9\u5904\uff0cV=0\uff0cH\u548cS\u65e0\u5b9a\u4e49\uff0c\u4ee3\u8868\u9ed1\u8272\u3002</p> <ul> <li>\u7b26\u5408\u4eba\u7c7b\u89c6\u89c9\u7cfb\u7edf</li> <li>\u5f53\u91c7\u7528RGB\uff08\u6216\u8005CMY\uff09\u989c\u8272\u6a21\u578b\u65f6\uff0c\u6539\u53d8\u67d0\u4e00\u989c\u8272\u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u6539\u53d8\u8272\u8c03\u5c31\u5fc5\u987b\u540c\u65f6\u6539\u53d8R\u3001G\u3001B\uff08\u6216\u8005C\u3001M\u3001Y\uff09\u4e09\u4e2a\u5750\u6807\uff1b\u800c\u91c7\u7528HSV\u989c\u8272\u6a21\u578b\u65f6\u53ea\u9700\u6539\u53d8H\u5750\u6807\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cHSV\u989c\u8272\u6a21\u578b\u4e2d\u7684\u4e09\u4e2a\u5750\u6807\u662f\u72ec\u7acb\u7684\u3002\u5408\u4eba\u773c\u5bf9\u989c\u8272\u7684\u611f\u89c9\u3002</li> <li>HSV\u989c\u8272\u6a21\u578b\u6784\u6210\u7684\u662f\u4e00\u4e2a\u5747\u5300\u7684\u989c\u8272\u7a7a\u95f4\uff0c\u91c7\u7528\u7ebf\u6027\u7684\u6807\u5c3a\uff0c\u5f69\u8272\u4e4b\u95f4\u611f\u89c9\u4e0a\u7684\u8ddd\u79bb\u4e0eHSV\u989c\u8272\u6a21\u578b\u5750\u6807\u4e0a\u70b9\u7684\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u6210\u6b63\u6bd4\u3002</li> </ul>"},{"location":"dip/dip1/#cie-xyz","title":"CIE XYZ","text":"<p>XYZ \u4e09\u523a\u6fc0\u503c\u7684\u6982\u5ff5\u662f\u4ee5\u8272\u89c6\u89c9\u7684\u4e09\u5143\u7406\u8bba\u4e3a\u6839\u636e\u7684\uff0c\u5b83\u8bf4\u660e\u4eba\u773c\u5177\u6709\u63a5\u53d7\u4e09\u539f\u8272(\u7ea2\u3001\u7eff\u3001\u84dd)\u7684\u63a5\u53d7\u5668\uff0c\u800c\u6240\u6709\u7684\u989c\u8272\u5747\u88ab\u89c6\u4f5c\u8be5\u4e09\u539f\u8272\u7684\u6df7\u5408\u8272\u3002 1931\u5e74CIE\u5236\u5b9a\u4e86\u4e00\u79cd\u5047\u60f3\u7684\u6807\u51c6\u89c2\u5bdf\u8005\uff0c\u8bbe\u7f6e\u914d\u8272\u51fd\u6570 \\(\\overline x(\\lambda)\\) \\(\\overline y(\\lambda)\\) \\(\\overline z(\\lambda)\\) XYZ\u4e09\u523a\u6fc0\u503c\u662f\u5229\u7528\u8fd9\u4e9b\u6807\u51c6\u89c2\u5bdf\u8005\u914d\u8272\u51fd\u6570\u8ba1\u7b97\u5f97\u6765\u7684\u3002 \u5728\u6b64\u57fa\u7840\u4e0a\uff0cCIE\u4e8e1931\u5e74\u89c4\u5b9a\u4e86Yxy\u989c\u8272\u7a7a\u95f4\uff0c\u5176\u4e2dY\u4e3a\u4eae\u5ea6\uff0cx,y\u662f\u4ece\u4e09\u523a\u6fc0\u503cXYZ\u8ba1\u7b97\u5f97\u6765\u7684\u8272\u5750\u6807\u3002\u5b83\u4ee3\u8868\u4eba\u7c7b\u53ef\u89c1\u7684\u989c\u8272\u8303\u56f4\u3002</p>"},{"location":"dip/dip1/#cie-lab","title":"CIE L*a*b","text":"<p>Lab\u989c\u8272\u7a7a\u95f4\u662f\u57281976\u5e74\u5236\u5b9a\u7684\uff0c\u5b83\u662fCIE XYZ\u989c\u8272\u6a21\u578b\u7684\u6539\u8fdb\u578b\uff0c\u4ee5\u4fbf\u514b\u670d\u539f\u6765\u7684Yxy\u989c\u8272\u7a7a\u95f4\u5b58\u5728\u7684\u5728x\uff0cy\u8272\u5ea6\u56fe\u4e0a\u76f8\u7b49\u7684\u8ddd\u79bb\u5e76\u4e0d\u76f8\u5f53\u4e8e\u6211\u4eec\u6240\u89c9\u5bdf\u5230\u7684\u76f8\u7b49\u8272\u5dee\u7684\u95ee\u9898\u3002 \u5b83\u7684\u201cL\u201d\uff08\u660e\u4eae\u5ea6\uff09\uff0c\u201ca\u201d\uff08\u7eff\u8272\u5230\u7ea2\u8272\uff09\u548c\u201cb\u201d(\u84dd\u8272\u5230\u9ec4\u8272)\u4ee3\u8868\u8bb8\u591a\u7684\u503c\u3002\u4e0eXYZ\u6bd4\u8f83\uff0cCIE Lab\u989c\u8272\u66f4\u9002\u5408\u4e8e\u4eba\u773c\u7684\u611f\u89c9\u3002 \u5229\u7528CIE Lab*\uff0c\u989c\u8272\u7684\u4eae\u5ea6\uff08L\uff09\u3001\u7070\u9636\u548c\u9971\u548c\u5ea6\uff08a,b\uff09\u53ef\u4ee5\u5355\u72ec\u4fee\u6b63\uff0c\u8fd9\u6837\uff0c\u56fe\u50cf\u7684\u6574\u4e2a\u989c\u8272\u90fd\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u56fe\u50cf\u6216\u5176\u4eae\u5ea6\u7684\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u6539\u53d8\u3002</p>"},{"location":"dip/dip1/#cie-yuv","title":"CIE YUV","text":"<p>\u5728\u73b0\u4ee3\u5f69\u8272\u7535\u89c6\u7cfb\u7edf\u4e2d\uff0c\u901a\u5e38\u91c7\u7528\u4e09\u7ba1\u5f69\u8272\u6444\u50cf\u673a\u6216\u5f69\u8272CCD\uff08\u7535\u8377\u8026\u5408\u5668\u4ef6\uff09\u6444\u50cf\u673a\uff0c\u5b83\u628a\u6444\u5f97\u7684\u5f69\u8272\u56fe\u50cf\u4fe1\u53f7\uff0c\u7ecf\u5206\u8272\uff0c\u5206\u522b\u653e\u5927\u6821\u6b63\u5f97\u5230RGB\uff0c\u518d\u7ecf\u8fc7\u77e9\u9635\u53d8\u6362\u7535\u8def\u5f97\u5230\u4eae\u5ea6\u4fe1\u53f7Y\u548c\u4e24\u4e2a\u8272\u5dee\u4fe1\u53f7R\uff0dY\u3001B\uff0dY\uff0c\u6700\u540e\u53d1\u9001\u7aef\u5c06\u4eae\u5ea6\u548c\u8272\u5dee\u4e09\u4e2a\u4fe1\u53f7\u5206\u522b\u8fdb\u884c\u7f16\u7801\uff0c\u7528\u540c\u4e00\u4fe1\u9053\u53d1\u9001\u51fa\u53bb\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u5e38\u7528\u7684YUV\u989c\u8272\u7a7a\u95f4\u3002</p> <p>\u91c7\u7528YUV\u989c\u8272\u7a7a\u95f4\u7684\u91cd\u8981\u6027\u662f\u5b83\u7684\u4eae\u5ea6\u4fe1\u53f7Y\u548c\u8272\u5ea6\u4fe1\u53f7U\u3001V\u662f\u5206\u79bb\u7684\u3002\u5982\u679c\u53ea\u6709Y\u4fe1\u53f7\u5206\u91cf\u800c\u6ca1\u6709U\u3001V\u5206\u91cf\uff0c\u90a3\u4e48\u8fd9\u6837\u8868\u793a\u7684\u56fe\u5c31\u662f\u9ed1\u767d\u7070\u5ea6\u56fe\u3002\u5f69\u8272\u7535\u89c6\u91c7\u7528YUV\u7a7a\u95f4\u6b63\u662f\u4e3a\u4e86\u7528\u4eae\u5ea6\u4fe1\u53f7Y\u89e3\u51b3\u5f69\u8272\u7535\u89c6\u673a\u4e0e\u9ed1\u767d\u7535\u89c6\u673a\u7684\u517c\u5bb9\u95ee\u9898\uff0c\u4f7f\u9ed1\u767d\u7535\u89c6\u673a\u4e5f\u80fd\u63a5\u6536\u5f69\u8272\u4fe1\u53f7\u3002</p> <p>\u6839\u636e\u7f8e\u56fd\u56fd\u5bb6\u7535\u89c6\u5236\u5f0f\u59d4\u5458\u4f1a\uff0cNTSC\u5236\u5f0f\u7684\u6807\u51c6\uff0c\u5f53\u767d\u5149\u7684\u4eae\u5ea6\u7528Y\u6765\u8868\u793a\u65f6\uff0c\u5b83\u548c\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u8272\u5149\u7684\u5173\u7cfb\u53ef\u7528\u5982\u4e0b\u5f0f\u7684\u65b9\u7a0b\u63cf\u8ff0\uff1a</p>"},{"location":"dip/dip1/#image-processing-data-structure","title":"Image Processing Data Structure","text":"<ul> <li>\u77e9\u9635</li> <li>\u94fe\u5f0f  \u4e00\u4e2a\u56fe\u50cf\u662f\u7531\u4e00\u4e2a\u5217\u8868\u8868\u793a\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u53c8\u662f\u4e00\u4e2a\u5b50\u5217\u8868\u3002\u5b50\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u8868\u793a\u76ee\u524d\u662f\u7b2c\u51e0\u884c\uff0c\u968f\u540e\u7684\u6570\u5b57\u6210\u5bf9\u51fa\u73b0\u3002\u6bcf\u5bf9\u8868\u793a\u4e00\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\u4f4d\u7f6e\u3002  </li> </ul>"},{"location":"dip/dip10/","title":"Fourier Transform","text":"<p>Abstract</p> <ul> <li>Fourier and his work</li> <li>Background of Fourier Transform</li> <li>Fourier Transform</li> <li>Discrete Fourier Transform (1D)</li> <li>FFT</li> <li>Discrete Fourier Transform (2D)</li> <li>FFT for Image in Matlab</li> </ul>"},{"location":"dip/dip10/#fourier-transform_1","title":"Fourier Transform","text":""},{"location":"dip/dip10/#expansion-of-a-function","title":"Expansion of a Function","text":"<p>\u82f1\u56fd\u6570\u5b66\u5bb6\u6cf0\u52d2\u572817\u4e16\u7eaa\u627e\u5230\u4e86\u7528\u5e42\u51fd\u6570\u7684\u65e0\u9650\u7ebf\u6027\u7ec4\u5408\u8868\u793a\u4e00\u822c\u7684\u89e3\u6790\u51fd\u6570\u7684\u65b9\u6cd5\u3002</p> \\[ f(x)=f(a)+f'(a)(x-a)+\\dfrac{f''(a)}{2!}(x-a)^2+\\dfrac{f'''(a)}{3!}(x-a)^3+\\ldots+\\dfrac{f^{(n)}(a)}{n!}(x-a)^n+\\ldots \\]"},{"location":"dip/dip10/#fourier-series","title":"Fourier Series","text":"<p>18\u4e16\u7eaa\u4e2d\u53f6\uff0c\u6cd5\u56fd\u6570\u5b66\u5bb6\u5085\u91cc\u53f6\u5728\u7814\u7a76\u70ed\u4f20\u5bfc\u95ee\u9898\u65f6\uff0c\u627e\u5230\u4e86\u4e09\u89d2\u51fd\u6570\u7684\u65e0\u9650\u7ebf\u6027\u7ec4\u5408\u8868\u793a\u6709\u9650\u533a\u95f4\u4e0a\u7684\u4e00\u822c\u51fd\u6570\u7684\u65b9\u6cd5\uff0c\u5373\u628a\u51fd\u6570\u5c55\u5f00\u6210\u4e09\u89d2\u7ea7\u6570\u3002</p> \\[ \\begin{align*} f(x) &amp; =\\dfrac{1}{2}a_0+\\sum\\limits_{n=1}^{\\infty}a_n\\cos(nx)+\\sum\\limits_{n=1}^{\\infty}b_n\\sin(nx)\\\\ a_0 &amp; = \\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)dx\\\\ a_n &amp; =\\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)\\cos(nx)dx\\\\ b_n &amp; =\\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)\\sin(nx)dx \\end{align*} \\] <p>\u7b80\u5355\u7684\u5468\u671f\u73b0\u8c61\uff0c\u7b80\u8c10\u632f\u52a8: \\(y=A\\sin(\\omega t+\\phi)\\) \u4e00\u4e2a\u5468\u671f\u8fd0\u52a8\uff0c\u7269\u7406\u5b66\u4e0a\u53ef\u4ee5\u5206\u6210\u82e5\u5e72\u4e2a\u7b80\u8c10\u632f\u52a8\u7684\u53e0\u52a0: \\(y=\\sum\\limits_{k=1}^n y_k=\\sum\\limits_{k=1}^n A_k\\sin(k\\omega t+\\phi)\\)</p> Example"},{"location":"dip/dip10/#complex-numbers","title":"Complex Numbers","text":"<p>\u590d\u6570\u53ef\u4ee5\u91c7\u7528 Magnitude-Phase(vector) \u8868\u793a\uff0c\u5373 \\(x=|x|e^{j\\phi(x)}\\), \u5176\u4e2d Magnitude \\(|x|=\\sqrt{a^2+b^2}\\), Phase \\(\\phi(x)=\\tan^{-1}(b/a)\\) </p> <p>\u5728\u8fd9\u79cd\u8868\u793a\u4e0b\uff0c\u590d\u6570\u4e58\u6cd5\u53ef\u4ee5\u5199\u4f5c \\(xy=|x|e^{j\\phi(x)}\\cdot |y|e^{j\\phi(y)}=|x||y|e^{j\\phi(x)+\\phi(y)}\\) </p> <p>\u5171\u8f6d\u590d\u6570 \\(x^* = a-jb\\), \u5b83\u6ee1\u8db3 \\(|x|=|x^*|,\\phi(x)=-\\phi(x),xx^*=|x|^2\\) </p> <p>Euler Formula: \\(e^{j\\theta}=\\cos(\\theta)+j\\sin(\\theta)\\) \u5b83\u6ee1\u8db3 \\(|e^{j\\theta}|=1, phi(e^{j\\theta})=\\theta,sin(\\theta)=\\dfrac{1}{2l}(e^{j\\theta}-e^{-j\\theta}),cos(\\theta)=\\dfrac{1}{2}(e^{j\\theta}+e^{-j\\theta})\\) </p>"},{"location":"dip/dip10/#fourier-transform_2","title":"Fourier Transform","text":"<p>\u5085\u91cc\u53f6\u53d8\u6362\u662f\u590d\u5085\u91cc\u53f6\u7cfb\u6570\u5728\u7ed9\u5b9a\u533a\u95f4\u4e0a\u7684\u4e00\u4e2a\u63a8\u5e7f\u3002  \u5085\u91cc\u53f6\u5206\u6790\u6307\u9891\u7387\u533a\u57df\u5206\u6790\uff0c\u5176\u4e2d \\(n\\) \u8f83\u5c0f\u65f6\u4e3a\u4f4e\u9891\uff0c \\(n\\) \u8f83\u5927\u65f6\u4e3a\u9ad8\u9891\u3002 \u6ce8\u610f\u5230\u6b63\u5f26\u6ce2\u548c\u4f59\u5f26\u6ce2\u90fd\u662f\u65e0\u9650\u957f\u7684\uff0c\u8fd9\u662f\u5085\u91cc\u53f6\u5206\u6790\u7684\u4e00\u4e2a\u4e0d\u8db3\uff0c\u56e0\u6b64\u5fae\u6ce2(wavelet)\u5206\u6790\u6bd4\u7279\u5b9a\u4fe1\u53f7\u7684\u5206\u6790\u66f4\u597d\u3002  </p> Example <p>\u5bf9\u4e8e\u975e\u5468\u671f\u51fd\u6570,\u5982\u679c\u51fd\u6570 \\(f(x)\\)\u53ea\u5728\u533a\u95f4 \\([\u2212\\pi,\\pi]\\) \u4e0a,\u4e5f\u53ef\u5c55\u5f00\u6210\u5085\u6c0f\u7ea7\u6570. \u5468\u671f\u5ef6\u62d3  </p> \\[ \\begin{align*} F(x)=\\left\\{\\begin{matrix}  &amp; f(x) ,x \\in(-\\pi,\\pi] \\\\   &amp; f(x-2k\\pi) ,x\\in ((2k-1)\\pi,(2k+1)\\pi], k=\\pm 1 ,\\pm 2,\\ldots \\end{matrix}\\right. \\end{align*} \\] <p>1-D 2-D Continuous</p>"},{"location":"dip/dip10/#image-transform","title":"Image Transform","text":"<p>\u5f88\u591a\u65f6\u5019\uff0c\u56fe\u50cf\u5904\u7406\u4efb\u52a1\u5728\u53d8\u6362\u57df\uff08\u9891\u57df\uff09\u800c\u4e0d\u662f\u7a7a\u95f4\u57df\u4e2d\u6267\u884c\u5f97\u6700\u597d\u3002  </p> <ul> <li>\u56fe\u50cf\u53d8\u6362</li> <li>\u8fdb\u884c\u64cd\u4f5c</li> <li>\u56fe\u50cf\u9006\u53d8\u6362\uff0c\u56de\u5230\u7a7a\u95f4\u57df</li> </ul> <ul> <li>T</li> <li>InvT</li> </ul> <p>\u4f4e\u9891\u5bf9\u5e94\u56fe\u50cf\u7f13\u6162\u53d8\u5316\u7684\u4fe1\u606f\uff08\u5982\u8fde\u7eed\u7684\u8868\u9762\uff09\uff1b\u9ad8\u9891\u5bf9\u5e94\u5feb\u901f\u53d8\u5316\u7684\u4fe1\u606f\uff08\u5982\u8fb9\uff09</p> <p>Frequency Filtering Steps</p> <ul> <li>\u5bf9 \\(f(x)\\) \u5085\u91cc\u53f6\u53d8\u6362 \\(F(f(x))\\)</li> <li>\u53bb\u6389\u4e0d\u60f3\u8981\u7684\u9891\u7387 \\(D(F(f(x)))\\)</li> <li>\u8f6c\u6362\u56de\u539f\u6765\u7684\u4fe1\u53f7 \\(\\hat f(x)=F^{-1}(D(F(f(x))))\\)</li> </ul>"},{"location":"dip/dip10/#discrete-fourier-transform-dft","title":"Discrete Fourier Transform (DFT)","text":"<p>Forward DFT \\(F(u)=\\sum\\limits_{x=0}^{N-1}f(x)e^{-\\frac{j2\\pi ux}{N}}, u=0,1,\\ldots,N-1\\)  N \u9891\u7387\u7684\u6570\u76ee\uff0cx \u91c7\u6837\u70b9\u7684\u6570\u76ee Inverse \\(f(x)=\\dfrac{1}{N}\\sum\\limits_{u=0}^{N-1}f(u)e^{\\frac{j2\\pi ux}{N}}, x=0,1,\\ldots,N-1\\) </p> Magnitude VS Phase <p> </p> <p>\u5982\u679c\u6211\u4eec\u53ea\u7528\u632f\u5e45/\u76f8\u4f4d\u4f5c\u4e3a\u4fe1\u606f\u91cd\u5efa\u56fe\u50cf\uff0c\u4f1a\u5f97\u5230\u4ec0\u4e48\u6837\u7684\u7ed3\u679c\uff1f  </p> <ul> <li> <p>\u5229\u7528\u632f\u5e45 </p> </li> <li> <p>\u5229\u7528\u76f8\u4f4d </p> </li> </ul> <p>\u76f8\u4f4d\u66f4\u591a\u7684\u4f20\u9012\u4e86\u56fe\u50cf\u7684\u7ed3\u6784\u4fe1\u606f\uff01</p>"},{"location":"dip/dip10/#fast-fourier-transformfft","title":"Fast Fourier Transform(FFT)","text":"<ul> <li>\u5c06\u539f\u59cb\u7684 N \u70b9\u5e8f\u5217\u4f9d\u6b21\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u77ed\u5e8f\u5217\uff1b</li> <li>\u6c42\u51fa\u8fd9\u4e9b\u77ed\u5e8f\u5217\u7684\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\uff1b</li> <li>\u7ec4\u5408\u51fa\u6240\u9700\u7684\u53d8\u6362\u503c\uff1b</li> <li>\u8ba1\u7b97\u91cf\uff08\u4e58\u9664\u6cd5\uff09\uff1a\\(2N^2\\rightarrow 2N\\lg_2N\\)</li> </ul>"},{"location":"dip/dip10/#principle","title":"Principle","text":"<p>\\(F(k)=\\dfrac{1}{N}\\sum\\limits_{n=0}^{N-1}f(n)e^{\\frac{j2\\pi kn}{N}}\\) </p> <p>Let \\(W_N^{n,k}=e^{-j2\\pi nk/N}\\) then DFT is \\(F(k)=\\dfrac{1}{N}\\sum\\limits_{n=0}^{N-1}f(n)W_N^{n,k}\\) </p> <p>\u5047\u5b9a \\(N\\) \u4e3a \\(2\\) \u7684\u6b63\u6574\u6570\u5e42\uff1a\\(N=2^H\\Rightarrow N=2M\\), \u5c06\u539f\u5f0f\u5b50\u5206\u4e3a\u5947\u6570\u9879\u548c\u5076\u6570\u9879      </p> \\[ \\begin{align*} F(k) &amp; = \\dfrac{1}{2M} \\sum\\limits_{n=0}^{2M-1}f(n)W_{2M}^{n,k}\\\\ &amp; = \\dfrac{1}{2}\\left[\\dfrac{1}{M}\\sum\\limits_{n=0}^{M-1}f(2n)W_{2M}^{2n,k}+\\dfrac{1}{M}\\sum\\limits_{n=0}^{M-1}f(2n+1)W_{2M}^{2n+1,k}\\right]\\\\ W_{2M}^{2n,k} &amp; = e^{-j2\\pi \\cdot 2nk/2M} = e^{-j2\\pi nk/M} = W_M^{n,k}\\\\ W_{2M}^{2n+1,k} &amp; = e^{-j2\\pi \\cdot (2n+1)k/2M} = e^{-j2\\pi nk/M} \\cdot e^{-j2\\pi k/2M}= W_M^{n,k}\\cdot  W_{2M}^k\\\\ F(k) &amp; = \\left[\\sum\\limits_{n=0}^{M-1}f(2n)W_M^{n,k}+\\sum\\limits_{n=0}^{M-1}f(2n+1)W_M^{n,k}W_{2M}^k\\right], k=0,1,\\ldots,M-1 \\end{align*} \\] <p>\u4ee4 \\(\\left\\{ \\begin{matrix} F_e(k) &amp; = \\sum\\limits_{n=0}^{M-1}f(2n)W_M^{n,k} \\\\ F_o(k) &amp; = \\sum\\limits_{n=0}^{M-1}f(2n+1)W_M^{n,k} \\end{matrix}\\right.\\) \u90a3\u4e48 \\(F(k)=\\lfloor F_e(k)+F_o(k)W_{2M}^k \\rfloor\\) </p> <p>\u5982\u679c \\(e, o\\) \u662f \\(2\\) \u7684\u5e42\u6b21\uff0c\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u62c6   </p> <p>\u5bf9\u4e8e \\(k=M,M+1\\ldots,2M-1\\) </p> \\[ \\begin{align*} W_M^{n,k+M} &amp; = e^{-j2\\pi (k+M)/M}\\\\     &amp; = e^{-j2\\pi n k/M} \\cdot e^{-j2n\\pi}\\\\     &amp; = e^{-j2\\pi n k /M}\\\\     &amp; = W_M^{n,k}\\\\ W_{2M}^{k+M} &amp; = e^{-j2\\pi k/2M\\cdot e^{-j\\pi}=-W_{2M}^k} \\end{align*} \\] <p>\u56e0\u6b64 $F(k+M)=\\lfloor F_e(k)-F_o(k)W_{2M}^k\\rfloor  $    </p> <p>\u610f\u4e49\uff1a\u5bf9\u4e00\u4e2a\u957f\u5ea6\u4e3a N \u7684\u5e8f\u5217\u8fdb\u884c\u5085\u7acb\u53f6\u53d8\u6362\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u5206\u6210\u4e24\u534a\u8ba1\u7b97\uff0c\u5bf9\u7b2c\u4e00\u90e8\u5206\u7684\u8ba1\u7b97\u9700\u8981\u901a\u8fc7\u8ba1\u7b97\u4e24\u4e2a\u957f\u5ea6\u4e3a N/2 \u957f\u5ea6\u5e8f\u5217\u7684\u5085\u7acb\u53f6\u53d8\u6362\u5f0f\u8fdb\u884c\uff0c\u7136\u540e\u5229\u7528\u8fd9\u4e24\u4e2a\u957f\u5ea6\u4e3a N/2 \u7684\u5e8f\u5217\u53ef\u4ee5\u5f97\u5230\u7b2c\u4e8c\u90e8\u5206\u7684\u503c\u3002</p>"},{"location":"dip/dip11/","title":"Image Feature","text":"<p>Abstract</p> <ul> <li>Image feature  <ul> <li>Image matching  </li> <li>Feature detection  <ul> <li>Harris operator  </li> </ul> </li> <li>Invariance  <ul> <li>Scale Invariant Feature Transform (SIFT)  </li> </ul> </li> </ul> </li> </ul>"},{"location":"dip/dip11/#image-matching","title":"Image Matching","text":"<p>\u505a\u56fe\u50cf\u62fc\u63a5: \u68c0\u6d4b\u4e24\u5f20\u56fe\u8c61\u7684\u7279\u5f81\u70b9\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u70b9\u5bf9\uff0c\u7528\u8fd9\u4e9b\u70b9\u5bf9\u5bf9\u9f50\u56fe\u50cf   </p>"},{"location":"dip/dip11/#feature-detection","title":"Feature detection","text":"<p>\u63d0\u53d6\u51fa\u5c40\u90e8\u7684\u5177\u6709\u51e0\u4f55\u4e0d\u53d8\u6027\u7684\u7279\u5f81   </p> <p>\u600e\u6837\u627e\u5230\u4e00\u4e2a\u597d\u7684\u7279\u5f81\uff1f  \u2014\u2014\u627e\u5230\u4e00\u4e2a\u975e\u540c\u5bfb\u5e38\u7684\u533a\u57df     </p> <p>\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u5c0f\u7a97\u53e3\u7684\u50cf\u7d20  </p> <ul> <li>flat: \u5728\u4efb\u4f55\u65b9\u5411\u90fd\u4e0d\u4f1a\u6709\u50cf\u7d20\u7684\u6539\u53d8</li> <li>egde: \u6cbf\u7740\u8fb9\u7684\u65b9\u5411\u4e0d\u4f1a\u6709\u50cf\u7d20\u7684\u6539\u53d8</li> <li>corner: \u5728\u4efb\u4f55\u65b9\u5411\u90fd\u4f1a\u6709\u660e\u663e\u7684\u6539\u53d8  </li> </ul> <p>\u91cf\u5316\u7a97\u53e3\u50cf\u7d20\u7684\u53d8\u5316: \\(W\\) \u8868\u793a\u7a97\u53e3\uff0c\\((u,v)\\) \u8868\u793a\u65b9\u5411</p> <p>\\(E(u,v)=\\sum\\limits_{(x,y)\\in W}[I(x+u,y+v)-I(x,y)]^2\\) \u6cf0\u52d2\u5c55\u5f00:  \\(I(x+u,y+v)-I(x,y)=\\dfrac{\\partial I}{\\partial x}u + \\dfrac{\\partial I}{\\partial y}v + higher\\ order\\ terms\\) \u5982\u679c\u79fb\u52a8 \\((u,v)\\) \u5c0f\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u4e00\u9636\u5fae\u5206\u4f30\u8ba1 \\(I(x+u,y+v)-I(x,y)\\approx \\dfrac{\\partial I}{\\partial x}u + \\dfrac{\\partial I}{\\partial y}v=\\left[\\begin{matrix}I_x &amp; I_y \\end{matrix}\\right]\\left[\\begin{matrix}u \\\\ v \\end{matrix}\\right]\\) \u5c06\u5f0f\u5b50\u5e26\u5165\u4e4b\u524d\u7684\u516c\u5f0f\u5f97\u5230  </p> \\[ \\begin{align*} E(u,v) &amp; \\approx \\sum\\limits_{(x,y)\\in W} \\left[\\left[\\begin{matrix}I_x &amp; I_y \\end{matrix}\\right]\\left[\\begin{matrix}u \\\\ v \\end{matrix}\\right]\\right]^2\\\\  &amp; = \\sum\\limits_{(x,y)\\in W}\\left[\\begin{matrix}u &amp; v \\end{matrix}\\right]\\left[\\begin{matrix}I_x^2 &amp; I_xI_y \\\\ I_yI_x &amp; I_y^2 \\end{matrix}\\right] \\left[\\begin{matrix}u \\\\ v \\end{matrix}\\right] \\end{align*} \\] <p>\u6cbf\u7740\u77e9\u9635 \\(H\\) \u7684\u4e24\u4e2a\u7279\u5f81\u5411\u91cf\uff0c\u53d8\u5316\u6700\u5927\u3002 \\(\\lambda_{+}, \\lambda_{-}\\) \u6bd4\u8f83\u5927\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u597d\u7684\u4f4d\u7f6e\uff08\u56e0\u4e3a\u6cbf\u5404\u4e2a\u65b9\u5411\u7684\u53d8\u5316\u90fd\u8f83\u5927\uff09  </p> <p>\u4e00\u4e2a\u5927\u4e00\u4e2a\u5c0f: \\(edge\\); \u4e24\u4e2a\u90fd\u5c0f: \\(flat\\) </p> <p>Feature Detection</p> <ul> <li>\u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u70b9\u7684\u68af\u5ea6</li> <li>\u901a\u8fc7\u68af\u5ea6\u5f97\u5230\u6bcf\u4e2a windows \u7684 \\(H\\) \u77e9\u9635</li> <li>\u8ba1\u7b97\u7279\u5f81\u503c</li> <li>\u627e\u5230\u76f8\u5e94\u8f83\u5927\u7684\u70b9(\\(\\lambda_- &gt; Threshold\\))  </li> <li>\u9009\u62e9\u90a3\u4e9b \\(\\lambda_-\\) \u662f\u5c40\u90e8\u6781\u5927\u503c\u7684\u70b9\u4f5c\u4e3a\u7279\u5f81</li> </ul>"},{"location":"dip/dip11/#the-harries-operator","title":"The Harries operator","text":"<p>\\(\\lambda_-\\) \u662f Harries operator \u7528\u4e8e\u7279\u5f81\u68c0\u6d4b\u7684\u53d8\u4f53</p> \\[ \\begin{align*} f &amp; = \\dfrac{\\lambda_1\\lambda_2}{\\lambda_1 + \\lambda_2}\\\\ &amp; = \\dfrac{det(H)}{trace(H)} \\end{align*} \\] <ul> <li>\\(trace(H)=h_{11}+h_{22}\\)</li> <li>\u8fd9\u5c31\u662f \u201cHarris Corner Detector\u201d or \u201cHarris Operator\u201d, \u8fd9\u4e2a\u7b97\u5b50\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u54cd\u5e94\u503c  </li> </ul>"},{"location":"dip/dip11/#some-properties","title":"Some properties","text":"<ul> <li>\u65cb\u8f6c\u4e0d\u53d8\u6027 \u692d\u5706\u65cb\u8f6c\uff0c\u4f46\u957f\u8f74\u77ed\u8f74\u7684\u5f62\u72b6\u4e0d\u53d8\uff0c\u7279\u5f81\u503c\u4e5f\u4e0d\u53d8  </li> <li>\u5bf9\u56fe\u50cf\u5f3a\u5ea6\u6539\u53d8<ul> <li>\u5bf9\u52a0\u6cd5\u548c\u6570\u4e58\u5f3a\u5ea6\u53d8\u5316\u4fdd\u6301\u4e0d\u53d8 \\(I\\rightarrow I+b,I\\rightarrow aI\\) \u6781\u503c\u70b9\u4e0d\u53d8</li> <li>\u56fe\u50cf\u5c3a\u5ea6\u53d8\u5316\u4f1a\u6709\u5f71\u54cd\uff01      </li> </ul> </li> </ul>"},{"location":"dip/dip11/#scale-invariant-detection","title":"Scale Invariant Detection","text":"<p>\u5728\u533a\u57df\u5185\u8bbe\u8ba1\u4e00\u4e2a\u6bd4\u4f8b\u4e0d\u53d8\u7684\u51fd\u6570  </p> <p>\u5728\u4e0d\u540c\u7684\u56fe\u50cf(\u6bd4\u4f8b\u4e0d\u540c)\uff0c\u6781\u503c\u70b9\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u73b0</p> <p>a. edge, \u6ca1\u6709\u6781\u503c\u70b9 b. \u597d\u51e0\u4e2a\u6781\u503c\u70b9 \u4e0d\u77e5\u9053\u662f\u54ea\u4e2a c. good</p> <p>\u80fd\u7b5b\u6389\u524d\u4e24\u79cd</p> <p>\u4e8c\u8005\u601d\u8def\u76f8\u540c, kernal \u7565\u6709\u5dee\u5f02  </p> <p>\\(f=Kernal * Image\\) </p> <p>kernals:</p> <ul> <li>\\(L=\\sigma^2(G_{xx}(x,y\\sigma)+G_{yy}(x,y,\\sigma))\\)</li> <li>\\(DoG=G(x,y,k\\sigma)-G(x,y,\\sigma)\\) \u5176\u4e2d \\(G(x,y,\\sigma)=\\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^2+y^2}{2\\sigma^2}}\\)</li> </ul>"},{"location":"dip/dip11/#harris-laplacian","title":"Harris-Laplacian","text":"<p>\u4e0d\u540c\u7ef4\u5ea6\u8ba1\u7b97\u65b9\u6cd5\u4e0d\u4e00\u6837  </p> <ul> <li>\u521d\u59cb\u5316\uff1a\u591a\u5c3a\u5ea6\u7684 Harris corner detection(\u6539\u53d8\u6e05\u6670\u5ea6\u540e\uff0c\u5355\u72ec\u627e\u89d2\u70b9) \u53ea\u6709\u5728\u4efb\u4f55\u5c3a\u5ea6\u4e0a\u90fd\u662f\u89d2\u70b9\u7684\u70b9\uff0c\u624d\u80fd\u88ab\u4fdd\u7559  </li> <li>\u57fa\u4e8e\u62c9\u666e\u62c9\u65af\u7b97\u5b50\uff0c\u8fdb\u884c\u5c3a\u5ea6\u9009\u62e9\u3002\u5bf9\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u54ea\u4e00\u4e2a\u5c3a\u5ea6\u4e0a\u62c9\u666e\u62c9\u65af\u503c\u6700\u5927\uff0c\u5c06\u8fd9\u4e2a\u4f4d\u7f6e\u548c\u5c3a\u5ea6\u4f5c\u4e3a\u89d2\u70b9\u3002\uff08\u552f\u4e00\u6027\uff0c\u5728\u8fd9\u4e2a\u5c3a\u5ea6\u4e0a\u662f\u6781\u5927\u503c\uff0c\u90a3\u4e48\u5728\u53e6\u4e00\u4e2a\u5c3a\u5ea6\u4e0a\u4e5f\u662f\u6781\u5927\u503c\uff0c\u53ea\u662f\u6781\u5927\u503c\u7684\u6570\u503c\u53ef\u80fd\u4e0d\u540c\uff09\uff1f\uff1f\uff1f  </li> </ul> <p>Laplacian-of-Gaussian = \"blob\" detector \\(\\nabla^2 g=\\dfrac{\\partial^2 g}{\\partial x^2}+\\dfrac{\\partial^2 g}{\\partial y^2}\\) </p> <p>\u5728\u56fe\u50cf\u4e2d\u7ed9\u5b9a\u7684\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5b9a\u4e49\u62c9\u666e\u62c9\u65af\u54cd\u5e94\u503c\u8fbe\u5230\u5cf0\u503c\u7684\u5c3a\u5ea6\u4e3a\u7279\u5f81\u5c3a\u5ea6(characteristic scale)</p>"},{"location":"dip/dip11/#sift","title":"SIFT","text":"<p>\u4e09\u4e2a\u65b9\u5411\u90fd\u662f DOG.  </p> <p>\u5bf9\u4e8e\u753b \u00d7 \u7684\u9700\u8981\u6bd4\u8f8326\u4e2a\u90bb\u5c45\u624d\u80fd\u5f97\u51fa\u5176\u662f\u5426\u662f\u6781\u503c\uff0c\u8ba1\u7b97\u901f\u5ea6\u76f8\u5bf9\u8f83\u6162\u3002</p> <p>\u5f97\u5230\u89d2\u70b9\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u89d2\u70b9\u7684\u7279\u5f81\uff0c\u5982\u65b9\u5411\u6027  </p> <ul> <li> <p>\u68af\u5ea6\u548c\u89d2\u5ea6 \u5176\u4e2d \\(m(x,y)\\) \u662f\u70b9\u7684\u5e45\u503c\uff0c\u5373 x \u65b9\u5411\u7684\u5dee\u5206\u548c y \u65b9\u5411\u7684\u5dee\u5206\u7684\u5e73\u65b9\u548c \\(\\theta(x,y)\\) \u662f\u901a\u8fc7 y \u65b9\u5411\u7684\u68af\u5ea6\u548c\u6bd4\u4e0a x \u65b9\u5411\u7684\u68af\u5ea6\u7684\u53cd\u6b63\u5207\u8ba1\u7b97 </p> </li> <li> <p>\u65b9\u5411\u9009\u62e9      </p> <p>\u53ef\u4ee5\u7528\u6295\u7968\u7684\u65b9\u5f0f\u5b9a\u4e49\u90bb\u57df\u7684\u671d\u5411</p> </li> </ul>"},{"location":"dip/dip11/#sift-descriptor","title":"SIFT Descriptor","text":"<p>Invariance:  \u5047\u8bbe\u8fd9\u91cc\u6709\u4e24\u5e45\u56fe\u50cf \\(I_1, I_2\\), \u5176\u4e2d \\(I_2\\) \u662f \\(I_1\\) \u7ecf\u8fc7\u67d0\u79cd\u53d8\u6362\u540e\u7684\u7248\u672c\uff08\u4eff\u5c04\u53d8\u6362\uff0c\u4eae\u5ea6\u7b49\uff09 \u5728\u53d8\u6362\u4e2d\u4e0d\u53d8\u7684\u7279\u5f81\u79f0\u4e3a\u53d8\u6362\u4e0d\u53d8\u6027 </p> <p>SIFT \u7279\u5f81\uff1a\u65cb\u8f6c\u4e0d\u53d8\u6027 \u6839\u636e\u5176\u4e3b\u8981\u68af\u5ea6\u65b9\u5411(dominant gradient orientation)\u65cb\u8f6c patch, \u8fd9\u6837\u53ef\u4ee5\u4f7f\u4ed6\u5904\u4e8e\u89c4\u8303\u65b9\u5411  </p> <p>Scale Invariant Feature Transform \u57fa\u672c\u601d\u60f3</p> <ul> <li>\u5728\u68c0\u6d4b\u5230\u7684\u7279\u5f81\u89d2\u70b9\u5468\u56f4\u9009\u53d6 \\(16\\times16\\) \u7684\u65b9\u5f62\u7a97\u53e3</li> <li>\u8ba1\u7b97\u6bcf\u4e2a\u50cf\u7d20\u7684\u8fb9\u7684\u671d\u5411(\u68af\u5ea6\u7684\u89d2\u5ea6- 90\u00b0)</li> <li>\u5254\u9664\u5f31\u8fb9\u7f18(\u5c0f\u4e8e\u9608\u503c\u68af\u5ea6\u5e45\u5ea6)</li> <li>\u521b\u5efa\u5269\u4e0b\u8fb9\u7684\u65b9\u5411\u7684\u76f4\u65b9\u56fe</li> </ul> <p>\u5b8c\u6574\u7248\uff1a</p> <ul> <li>\u5c06 \\(16\\times16\\) \u7684\u7a97\u53e3 \u5212\u5206\u4e3a \\(4\\times4\\) \u7684\u7f51\u683c  </li> <li>\u5bf9\u6bcf\u4e2a\u7f51\u683c\u8ba1\u7b97\u5176\u65b9\u5411\u76f4\u65b9\u56fe  </li> <li>16 cells * 8 orientations = 128 dimensional descriptor(128 \u7ef4\u5411\u91cf)</li> </ul> <p>SIFT Feature</p> <ul> <li>Descriptor 128-D<ul> <li></li> <li>\u53ef\u4ee5\u901a\u8fc7\u53bb\u6389\u5149\u7167\u53d8\u5316\u5e26\u6765\u7684\u5f71\u54cd</li> </ul> </li> <li>\u4f4d\u7f6e \\((x,y)\\)</li> <li>\u5c3a\u5ea6\uff0c\u63a7\u5236\u7279\u5f81\u63d0\u53d6\u7684\u8986\u76d6\u8303\u56f4</li> <li>\u65b9\u5411\uff0c\u5b9e\u73b0\u65cb\u8f6c\u4e0d\u53d8\u7684 descriptor</li> </ul> <p>SIFT \u7279\u5f81\u53ef\u4ee5\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b Bag of visual words \u63d0\u53d6SIFT\u7279\u5f81\uff0c\u5c06\u7279\u5f81\u505a\u4e00\u4e2a\u805a\u7c7b(kmeans)\uff0c\u5c06\u6bcf\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u79f0\u4e3a visual word \u89c6\u89c9\u5355\u8bcd</p> <p>Conclusion of SIFT</p> <ul> <li>\u4f18\u70b9<ul> <li>\u671f\u671b\u5728\u6bd4\u4f8b\u3001\u65cb\u8f6c\u3001\u5149\u7167\u7b49\u53d8\u5316\u4e2d\u7684\u4e0d\u53d8\u6027\u3002</li> <li>\u5c40\u90e8 patch \u5177\u6709\u5f88\u5f3a\u7684\u533a\u5206\u6027\u548c\u8868\u5f81\u80fd\u529b\u3002</li> <li>\u5728\u521a\u6027\u5bf9\u8c61\u8868\u793a\u4e0a\u975e\u5e38\u6709\u6548\u3002</li> </ul> </li> <li>\u7f3a\u70b9<ul> <li>\u63d0\u53d6\u8017\u65f6 \u5bf9\u4e8e\u5927\u5c0f\u4e3a400 * 400\u7684\u56fe\u50cf\uff0c\u5e73\u5747\u9700\u89811\u79d2\u3002</li> <li>\u5bf9\u975e\u521a\u6027\u7269\u4f53\u6027\u80fd\u8f83\u5dee\u3002 \u5982\u4eba\u8138\u3001\u52a8\u7269\u7b49\u3002</li> <li>\u5728\u4e25\u91cd\u7684\u4eff\u5c04\u5931\u771f\u4e0b\u53ef\u80fd\u65e0\u6cd5\u5de5\u4f5c\u3002 \u5c40\u90e8\u8865\u4e01\u662f\u4e00\u4e2a\u5706\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u692d\u5706\u8c03\u6574\u5230\u4eff\u5c04\u5931\u771f\u3002</li> </ul> </li> </ul>"},{"location":"dip/dip11/#surf-detectors-and-descriptors","title":"SURF detectors and descriptors","text":"<ul> <li>\u89d2\u70b9\u68c0\u6d4b repeatable</li> <li>\u7279\u5f81\u63d0\u53d6\uff1a\u63cf\u8ff0\u80fd\u529b\u5177\u6709 dinstinctive robust</li> </ul> <p>\u90fd\u9700\u8981 fast</p> <p>SURF algorithm</p> <ul> <li> <p>Interest point detector:</p> <ul> <li>\u8ba1\u7b97\u79ef\u5206\u56fe\u50cf \u5750\u6807 \\((x,y)\\) \u7684\u50cf\u7d20\u503c\u662f \u524d\u7f00\u548c \\(s(x,y)\\)(\u5de6\u4e0a\u65b9\u957f\u65b9\u5f62\u7684\u50cf\u7d20\u503c\u6c42\u548c).</li> <li>\u5e94\u7528\u4e8c\u9636\u5bfc\u6570(\u8fd1\u4f3c\uff0c\u6c42\u5dee\u5206\u7684\u5dee\u5206\uff0c\u53ef\u4ee5\u7528\u79ef\u5206\u56fe\u8fd1\u4f3c)\u6ee4\u6ce2\u5668\u5bf9\u56fe\u50cf\u6ee4\u6ce2\u64cd\u4f5c</li> <li>\u975e\u6781\u5927\u6291\u5236(\u5728 \\((x,y,\\sigma)\\) \u7a7a\u95f4\u4e2d\u5bfb\u627e\u5c40\u90e8\u6781\u5927\u503c\uff0c\u5176\u4ed6\u7684\u4e22\u6389)</li> <li>\u4e8c\u6b21\u63d2\u503c\u6cd5</li> </ul> </li> <li> <p>Interest point descriptor:</p> <ul> <li>\u628a\u7a97\u53e3\u5206\u4e3a \\(t\\times 4\\)(16 \u4e2a\u5b50\u7a97\u53e3)  </li> <li>\u8ba1\u7b97 Haar \u5c0f\u6ce2\u7279\u5f81\uff08\u79bb\u6563\u60c5\u51b5\u4e0b\u7684\u8fd1\u4f3c\uff09</li> <li>\u5728\u6bcf\u4e2a\u5b50\u7a97\u53e3\u5185\uff0c\u8ba1\u7b97 \\(v_{subregion}=\\left[\\sum dx,\\sum dy,\\sum |dx|,\\sum|dy|\\right]\\) </li> <li>\u8fd9\u5f97\u5230 64 \u4e2a\u7279\u5f81</li> </ul> </li> </ul>"},{"location":"dip/dip11/#integral-image","title":"Integral Image","text":"<p>Integral Image(a.k.a. Summed area table) \u662f</p> <ul> <li>\\(S(x,y)=\\sum\\sum I(x,y)\\)</li> <li>\\(V(l,t,r,b)=S(l,t)+S(r,b)-S(l,b)-S(r,t)\\) \u5f97\u5230\u77e9\u5f62\u5185\u7684\u50cf\u7d20\u503c\u7684\u548c   </li> </ul> <p>\u79ef\u5206\u56fe\u8ba9\u6211\u4eec\u5f88\u65b9\u4fbf\u7684\u5bf9\u5c3a\u5ea6\u8fdb\u884c\u4e0a\u91c7\u6837</p>"},{"location":"dip/dip11/#interpolation","title":"Interpolation","text":"<p>\u4e0d\u540c\u5c3a\u5ea6\u4e4b\u95f4\u53ef\u4ee5\u7528\u63d2\u503c\u6765\u8ba1\u7b97\u4e2d\u95f4\u7684\u5c3a\u5ea6\u3002</p> <p>Why SURF is better than SIFT</p> <ul> <li>\u7ef4\u5ea6\u4f4e, \u53ea\u7528 64 \u7ef4\u7279\u5f81  </li> <li>\u5728\u5747\u5300\u3001\u6e10\u53d8\u3001\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u56fe\u50cf\u4e0a SIFT \u65e0\u6cd5\u5206\u8fa8\uff0c\u4f46 SURF \u53ef\u4ee5  </li> <li>\u5e26\u566a\u58f0\u4f1a\u4f7f SIFT \u7279\u5f81\u51cc\u4e71\uff0c\u5bf9 SURF \u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd</li> </ul>"},{"location":"dip/dip11/#ransac","title":"RANSAC","text":"<p>RANSAC \u89e3\u51b3\u56fe\u50cf\u62fc\u63a5\u7684\u79bb\u7fa4\u70b9  </p> <p>RANSAC RANdom SAmple Consensus</p> <p>\u6392\u9664\u79bb\u7fa4\u70b9\uff0c\u53ea\u5173\u6ce8\u5e76\u4f7f\u7528 inliers.  </p> <p>\u601d\u60f3\uff1a\u5982\u679c\u79bb\u7fa4\u70b9\u88ab\u9009\u4e2d\u8ba1\u7b97\u5f53\u524d\u7684\u5339\u914d\uff0c\u90a3\u4e48\u56de\u5f52\u51fa\u6765\u7684\u7ebf\u80af\u5b9a\u4e0d\u8db3\u4ee5\u652f\u6491\u5269\u4e0b\u70b9\u7684\u5339\u914d\uff0c\u548c\u771f\u6b63 inlier \u5f97\u5230\u7684\u7ebf\u6709\u5f88\u5927\u7684\u5dee\u5f02\u3002</p> <p>RANSAC Loop</p> <ul> <li>\u968f\u673a\u9009\u62e9\u79cd\u5b50\u70b9\u4f5c\u4e3a\u8f6c\u6362\u4f30\u8ba1\u7684\u57fa\u7840</li> <li>\u8ba1\u7b97\u79cd\u5b50\u70b9\u4e4b\u95f4\u7684\u53d8\u6362  </li> <li>\u627e\u5230\u8fd9\u6b21\u53d8\u6362\u7684 inliers</li> <li>\u5982\u679c inliners \u7684\u6570\u76ee\u8db3\u591f\u591a\uff0c\u90a3\u4e48\u91cd\u65b0\u8ba1\u7b97\u6240\u6709 inliners \u4e0a\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5\u4f30\u8ba1</li> <li>\u56de\u5f52\u4e4b\u540e\u518d\u8ba1\u7b97 inliners \u5982\u6b64\u5f80\u590d\uff0c\u7ee7\u7eed\u8c03\u6574\u3002\u5982\u679c\u6ca1\u6709\u8c03\u6574\u90a3\u6211\u4eec\u53ef\u4ee5\u505c\u6b62\u5faa\u73af\u3002\u6700\u7ec8\u4f7f\u5f97\u56de\u5f52\u51fa\u7684\u7ebf\u8fbe\u5230\u6700\u591a\u7684 inliners.   </li> </ul> <p>\u9700\u8981\u591a\u5c11\u6b21\u53d6\u6837\uff1f\u5047\u8bbe \\(w\\) \u662f inliners \u7684\u4e00\u90e8\u5206, \\(n\\) \u4e2a\u9700\u8981\u7528\u6765\u5b9a\u4e49\u524d\u63d0\u7684\u70b9\uff0c\u8fdb\u884c\u4e86 \\(k\\) \u6b21\u53d6\u6837\u3002  </p> <ul> <li>\\(n\\) \u4e2a\u70b9\u90fd\u662f\u6b63\u786e\u7684 \\(w^n\\)</li> <li>\\(k\\) \u6b21\u91c7\u6837\u90fd\u5931\u8d25\u4e86 \\((1-w^n)^k\\)</li> <li>\u9009\u62e9 k \u8fbe\u5230\u8db3\u591f\u9ad8\u4f7f\u5f97\u5931\u8d25\u7684\u6982\u7387\u4f4e\u4e8e\u9608\u503c  </li> </ul> <p>RANSAC \u4e4b\u540e\u5c06\u6570\u636e\u5212\u5206\u4e3a outiler \u548c inliner. </p> <ul> <li>\u4f18\u70b9<ul> <li>\u5bf9\u4e8e\u6a21\u578b\u62df\u5408\u95ee\u9898\u662f\u4e00\u79cd\u901a\u7528\u7684\u65b9\u6cd5</li> <li>\u5bb9\u6613\u5b9e\u73b0\uff0c\u5bb9\u6613\u8ba1\u7b97\u5931\u8d25\u7387</li> </ul> </li> <li>\u7f3a\u70b9<ul> <li>\u53ea\u80fd\u89e3\u51b3\u9002\u5ea6 outliers \u65f6\u7684\u60c5\u51b5\uff0c\u5426\u5219\u5f00\u9500\u6bd4\u8f83\u9ad8</li> <li>\u5f88\u591a\u5b9e\u9645\u95ee\u9898\u4e2d\u7684 outliers \u7684\u6bd4\u7387\u8f83\u9ad8\uff08\u4f46\u6709\u65f6\u6311\u9009\u7b56\u7565\u53ef\u4ee5\u6709\u5e2e\u52a9\uff0c\u800c\u975e\u968f\u673a\u9009\u53d6\uff09</li> </ul> </li> </ul>"},{"location":"dip/dip11/#image-blending-pyramid-creation","title":"Image Blending - Pyramid Creation","text":"<p>Image Stitching</p> <ul> <li>Detect key points \u68c0\u6d4b\u7279\u5f81\u70b9</li> <li>Build the SIFT descriptors \u63d0\u53d6 SIFT \u7279\u5f81</li> <li>Match SIFT descriptors SIFT \u7279\u5f81\u5339\u914d\uff08\u6c42\u6b27\u6c0f\u8ddd\u79bb\uff09</li> <li>Fitting the transformation \u8ba1\u7b97\u53d8\u6362</li> <li>RANSAC \u7b5b\u9664\u5916\u70b9</li> <li>Image Blending \u56fe\u50cf\u878d\u5408\uff0c\u89e3\u51b3\u8df3\u53d8</li> </ul>"},{"location":"dip/dip12/","title":"\u6df1\u5ea6\u5b66\u4e60\u7b80\u4ecb","text":"<ul> <li>\u7279\u5f81\u4e0d\u80fd\u5b66\u4e60/\u8bad\u7ec3\u7684</li> <li>\u5206\u7c7b\u5668\u901a\u5e38\u662f\u53ef\u8bad\u7ec3\u7684\uff0c\u5982 SVM, HMM...</li> </ul> <p>\u7279\u5f81\u975e\u5e38\u91cd\u8981\uff0c\u5f88\u591a\u7279\u5f81\u90fd\u662f\u4e3a\u4e86\u7279\u5b9a\u7684\u4efb\u52a1\u800c\u624b\u5de5\u8bbe\u8ba1\uff0c\u4f46\u624b\u5de5\u8bbe\u8ba1\u4e00\u4e2a\u7279\u5f81\u63d0\u53d6\u9700\u8981\u76f8\u5f53\u5927\u7684\u52aa\u529b\u3002</p> <ul> <li>\u4e3a\u4e86\u7279\u5b9a\u7684\u8bc6\u522b\u4efb\u52a1\uff0c\u627e\u5230\u66f4\u9002\u5408\u7684\u7279\u5f81\uff0c\u4ee5\u53ef\u8bad\u7ec3\u7684\u65b9\u5f0f\u63d0\u53d6\u7279\u5f81  </li> <li>\u5b66\u4e60\u7edf\u8ba1\u7ed3\u6784\u6216\u8005\u6570\u636e\u4e0e\u6570\u636e\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb\u5f97\u5230\u7279\u5f81\u8868\u8fbe</li> <li>\u5b66\u4e60\u5f97\u5230\u7684\u7279\u5f81\u8868\u8fbe\u53ef\u4ee5\u7528\u6765\u4f5c\u4e3a\u8bc6\u522b\u4efb\u52a1\u4e2d\u7684\u7279\u5f81</li> </ul> <p>CNN \u5377\u79ef\u795e\u7ecf\u7f51\u7edc  </p> <ul> <li>CNN \u662f\u5c11\u6709\u7684\u53ef\u4ee5\u76d1\u7763\u8bad\u7ec3\u7684\u6df1\u5ea6\u6a21\u578b\uff0c\u800c\u4e14\u5bb9\u6613\u7406\u89e3\u3001\u5b9e\u73b0\u3002  </li> </ul> <p>\u795e\u7ecf</p> <p>\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\uff0c\u5bf9\u7a81\u89e6\u7684\u89c2\u6d4b\u503c\u8fde\u5230\u6c47\u603b\u7684\u5730\u65b9\uff0c\u5e76\u8fdb\u884c\u52a0\u6743\u6c42\u548c\uff0c\u901a\u8fc7\u6fc0\u6d3b\u51fd\u6570\u4ea7\u751f\u8f93\u51fa  </p> <p>\\(w_0\\) \u7528\u4e8e\u77eb\u6b63\u6570\u636e\u7684\u504f\u7f6e\u91cf Bias \u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570  </p> <p>ReLU \u4f1a\u628a\u8f93\u5165\u7684\u4fe1\u53f7\u53bb\u6389\u4e00\u90e8\u5206  </p> <p>\u591a\u5c42\u795e\u7ecf\u7f51\u7edc  </p> <p>\u5982\u4f55\u89e3\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc(\u89e3\uff0c\u6307\u6c42\u51fa \\(w\\))   \u53cd\u5411\u4f20\u64ad Back-propagation(BP) </p> <ul> <li>\u968f\u673a\u521d\u59cb\u5316\u6743\u91cd\uff0c\u8ba1\u7b97 \\(h_W(X)\\) </li> <li>\u8ba1\u7b97\u8bef\u5dee \\(E=(h_W(X)-y)^2\\)</li> <li>\\(W_k=W_{k-1}-\\epsilon \\frac{\\partial E}{\\partial W}\\) \u7279\u522b\u5730, \\(w_{ij}^{(k)}=w_{ij}^{(k-1)}-\\epsilon \\frac{\\partial E}{\\partial w_{ij}^{(k-1)}}\\) \u68af\u5ea6\u4e0b\u964d\u6cd5</li> </ul> <p>\\(\\epsilon\\) \u662f\u4e2a\u8d85\u53c2\uff0c\u79f0\u4e3a\u5b66\u4e60\u7387\u3002\u5982\u679c\u8bbe\u7f6e\u8fc7\u5927\u53ef\u80fd\u4f1a\u5728\u6536\u655b\u7684\u4e24\u8fb9\u5267\u70c8\u9707\u8361\uff1b\u5982\u679c\u8fc7\u5c0f\u5bb9\u6613\u9677\u5165\u5c40\u90e8\u6700\u4f18\u722c\u4e0d\u51fa\u6765\uff0c\u4ee5\u53ca\u6536\u655b\u66f4\u6162\u3002  </p> <p>\u5171\u4eab\u6743\u91cd \u8bbe\u8ba1\u4e00\u4e2a\u5377\u79ef\u6838\u7528\u6765\u63d0\u53d6\u7279\u5f81\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u50cf feature map \u7279\u5f81\u56fe\u3002   </p> <p>10 \u4e2a\u5377\u79ef\u6838\u5f97\u5230 10 \u5f20\u7279\u5f81\u56fe\uff0c\u5f62\u6210\u4e00\u4e2a\u4e09\u7ef4\u7684\u7279\u5f81\u4f53\u3002 \u5377\u79ef\u6838\u53ef\u4ee5\u590d\u7528  </p> <p>\u7b80\u5355\u7684\u7ec6\u80de\u68c0\u6d4b\u5c40\u90e8\u7279\u5f81\uff1b\u590d\u6742\u7684\u7ec6\u80de\u4f1a\u6c60\u5316\uff0c\u7b5b\u9009\u63d0\u53d6\u7279\u5f81\uff08\u7279\u5f81\u56fe\u7684\u964d\u91c7\u6837\uff09</p> <p>\u6c60\u5316\uff1a</p> <p>\u7a7a\u95f4\uff0c\u9009\u62e9\u91cd\u8981\u7684\u503c\uff0c\u964d\u4f4e\u590d\u6742\u5ea6  </p> <p>\u662f\u901a\u8fc7\u68af\u5ea6\u4e0b\u964d\u7684\u65b9\u6cd5\u6765\u4f18\u5316\uff0c\u5982\u4f55\u8bbe\u7f6e\u5b66\u4e60\u7387\uff1f </p> <p>\u5b66\u4e60\u7387\u4f4e\uff0c\u6536\u655b\u6162\uff0c\u5bb9\u6613\u6389\u5230\u5751\u91cc\u9677\u5165\u5c40\u90e8\u6700\u4f18\uff1b\u5b66\u4e60\u7387\u9ad8\uff0c\u53ef\u80fd\u4f7f\u5f97\u6536\u655b\u8fc7\u7a0b\u4e0d\u7a33\u5b9a\uff0c\u6765\u56de\u9707\u8361\uff0c\u4e00\u76f4\u4e0d\u6536\u655b  </p> <p>idea:</p> <ul> <li>\u8bbe\u7f6e\u4e0d\u540c\u7684\u5b66\u4e60\u7387\uff0c\u770b\u54ea\u79cd\u60c5\u51b5\u6700\u597d</li> <li>\u8bbe\u8ba1\u4e00\u4e2a\u81ea\u9002\u5e94\u5b66\u4e60\u7387\u3002\u6b64\u65f6\u5b66\u4e60\u7387\u4e0d\u518d\u56fa\u5b9a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5916\u5728\u6761\u4ef6\u7b97(\u68af\u5ea6\uff0c\u5b66\u4e60\u8981\u6709\u591a\u5feb\uff0c\u7279\u5f81\u6743\u91cd\u7684\u5927\u5c0f...)  </li> </ul> <p>\u7b2c\u4e09\u6b65\u7684\u68af\u5ea6\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u7b97\u51fa  </p> <p>\u5982\u679c\u6211\u4eec\u968f\u673a\u9009\u4e00\u4e2a\u70b9\uff0c\u5f88\u5bb9\u6613\u88ab\u566a\u70b9\u5f71\u54cd\u3002\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a batch B  </p> <p>\u6b63\u5219\u5316\uff1adropout  \u4e22\u6389\u4e00\u534a\uff0c\u9632\u6b62\u8fc7\u62df\u5408  </p> <p>\u65e9\u505c\u6cd5\uff0c\u89c1\u597d\u5c31\u6536</p>"},{"location":"dip/dip2/","title":"Binary Image and Morphological","text":"<p>\u5982\u4f55\u4ece\u7070\u5ea6\u56fe\u8f6c\u4e3a\u4e8c\u503c\u56fe\u50cf\uff1f \u4e3a\u4ec0\u4e48\u9700\u8981\u4e8c\u503c\u56fe\u50cf\uff08\u5b9e\u9645\u5e94\u7528\u4e2d\u4e8c\u503c\u5316\u80fd\u628a\u4e0d\u91cd\u8981\u7684\u4fe1\u606f\u53bb\u6389\uff09</p>"},{"location":"dip/dip2/#binary-image","title":"Binary Image","text":"<p>Pixel value is limited to 0 or 1.   \u524d\u666f\u7f6e\u4e3a 1, \u540e\u666f\u7f6e\u4e3a 0.  \u4e8c\u503c\u56fe\u50cf\uff08Binary Image\uff09\u4e2d\u50cf\u7d20\uff08Pixel\uff09\u7684\u503c\u53ea\u6709 [0,1] \u6216\u8005 [0,255]\uff0c\u7f16\u7a0b\u4e2d\u4e00\u822c\u7528 [0,255] \u6765\u6784\u9020\u4e8c\u503c\u56fe\u50cf\u3002</p> <ul> <li> <p>\u4f18\u70b9\uff1a</p> <ul> <li>\u66f4\u5c0f\u7684\u5185\u5b58\u9700\u6c42 </li> <li>\u8fd0\u884c\u901f\u5ea6\u66f4\u5feb </li> <li>\u4e3a\u4e8c\u503c\u56fe\u50cf\u5f00\u53d1\u7684\u7b97\u6cd5\u5f80\u5f80\u53ef\u4ee5\u7528\u4e8e\u7070\u5ea6\u7ea7\u56fe\u50cf </li> <li>\u66f4\u4fbf\u5b9c </li> </ul> </li> <li> <p>\u7f3a\u70b9\uff1a</p> <ul> <li>\u5e94\u7528\u8303\u56f4\u6bd5\u7adf\u6709\u9650\uff1b </li> <li>\u66f4\u65e0\u6cd5\u63a8\u5e7f\u5230\u4e09\u7ef4\u7a7a\u95f4\u4e2d</li> <li>\u8868\u73b0\u529b\u6b20\u7f3a\uff0c\u4e0d\u80fd\u8868\u73b0\u7269\u4f53\u5185\u90e8\u7ec6\u8282</li> <li>\u65e0\u6cd5\u63a7\u5236\u5bf9\u6bd4\u5ea6</li> </ul> </li> </ul>"},{"location":"dip/dip2/#image-binarization","title":"Image binarization","text":"<ul> <li>\u8bbe\u7f6e\u4e00\u4e2a\u9608\u503c Threshold\uff0c\u6bd4\u9608\u503c\u5c0f\u7684\u7f6e\u4e3a 0, \u6bd4\u9608\u503c\u5927\u7684\u5c31\u7f6e\u4e3a 255.  \\(\\left\\{\\begin{matrix}I(x,y)=0\\ if\\ I(x,y)\\leq Threshold \\\\ I(x,y)=255\\ if\\ I(x,y)\\geq Threshold \\end{matrix} \\right.\\)</li> <li> <p>\u5982\u4f55\u9009\u53d6\u5408\u9002\u7684 threshold? \u57fa\u672c\u601d\u60f3\uff1a\u5c06\u4e8c\u503c\u5316\u5f97\u5230\u7684\u4e8c\u503c\u56fe\u50cf\u89c6\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5bf9\u5e94\u524d\u666f\uff08Foreground\uff09\uff0c\u53e6\u4e00\u90e8\u5206\u5bf9\u5e94\u80cc\u666f\uff08Background\uff09\u3002\u5c1d\u8bd5\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684threshold\u4f7f\u5f97\u5230\u7684\u524d\u666f\u548c\u80cc\u666f\u7684\u5185\u90e8\u65b9\u5dee\u6700\u5c0f\uff0c\u800c\u5b83\u4eec\u4e4b\u95f4\u7684\u65b9\u5dee\u5219\u6700\u5927\u3002\uff08\u4e0b\u9762\u7684\u63a8\u5bfc\u53ef\u770b\u51fa\uff0c\u8fd9\u4e8c\u8005\u662f\u7b49\u4ef7\u7684\uff09 Otto \u5927\u6d25\u7b97\u6cd5\uff1a  (\\(N\\) \u662f\u50cf\u7d20\u603b\u4e2a\u6570\uff0c\\(N_{Fgrd}\\) \u662f\u7ed9\u5b9a T \u7684\u60c5\u51b5\u4e0b\u5c5e\u4e8e\u524d\u666f\u7684\u50cf\u7d20\u4e2a\u6570)</p> <ul> <li>\u7b80\u5316\u7248\u63a8\u5bfc </li> <li>\u5177\u4f53\u8fc7\u7a0b  </li> <li>Step 1: \u786e\u5b9a\u539f\u59cb\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff1b</li> <li>Step 2: \u6700\u5c0f\u503c\u52a0 1 \u4f5c\u4e3a threshold \u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u4e8c\u503c\u5316\u64cd\u4f5c\uff1b</li> <li>Step 3: \u6839\u636e\u5bf9\u5e94\u5173\u7cfb\u786e\u5b9a\u524d\u666f\u548c\u80cc\u666f\uff0c\u5206\u522b\u8ba1\u7b97\u5f53\u524d threshold \u4e0b\u7684\u5185\u90e8\u534f\u65b9\u5dee\u548c\u5916\u90e8\u534f\u65b9\u5dee\uff1b\uff08\u7b97\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86\uff09</li> <li>Step 4: \u56de\u5230 Step 2 \u76f4\u5230\u8fbe\u5230\u50cf\u7d20\u6700\u5927\u503c\uff1b</li> <li>Step 5\uff1a\u6bd4\u8f83\u627e\u5230\u6700\u5927\u5916\u90e8\u548c\u6700\u5c0f\u5185\u90e8\u534f\u65b9\u5dee\u5bf9\u5e94\u7684 threshold.</li> </ul> </li> </ul> <p>\u6211\u4eec\u53ef\u4ee5\u524d\u8ff0 thresholding \u7b56\u7565\u63a8\u5e7f\u5230\u5f69\u8272\u56fe\u50cf\uff0c\u540c\u65f6\u8003\u8651 rgb \u4e09\u4e2a\u901a\u9053\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9488\u5bf9\u7279\u5b9a\u7684\u8272\u5f69\u8fdb\u884c thresholding \u64cd\u4f5c\uff0c</p> <p>Example</p> <p> </p> <p>\u5927\u6d25\u7b97\u6cd5\u5b58\u5728\u95ee\u9898\uff1a\u5168\u5c40\u8fdb\u884c\u4e8c\u503c\u5316\u64cd\u4f5c\u4e0d\u7ed9\u529b\uff0c\u5982  </p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a\u5c40\u90e8\u81ea\u9002\u5e94\u64cd\u4f5c   \u8bbe\u5b9a\u4e00\u4e2a\u5c40\u90e8\u7a97\u53e3\uff0c\u5728\u6574\u4e2a\u56fe\u50cf\u4e0a\u6ed1\u52a8\u8be5\u7a97\u53e3\uff1b\u5bf9\u4e8e\u6bcf\u4e00\u7a97\u53e3\u4f4d\u7f6e\uff0c\u786e\u5b9a\u9488\u5bf9\u8be5\u7a97\u53e3\u7684threshold\u3002</p>"},{"location":"dip/dip2/#morphology-operation","title":"Morphology Operation","text":""},{"location":"dip/dip2/#morphology","title":"Morphology","text":"<ul> <li>\u5f62\u6001\u5b66 Morphology 1960s \u540e\u671f\u63d0\u51fa\uff0c\u7814\u7a76\u52a8\u690d\u7269\u7684\u7ed3\u6784\u4e0e\u5f62\u6001\u3002\u5f62\u6001\u5b66\u4e00\u822c\u6307\u751f\u7269\u5b66\u4e2d\u7814\u7a76\u52a8\u7269\u548c\u690d\u7269\u7ed3\u6784\u7684\u4e00\u4e2a\u5206\u652f</li> <li>\u6570\u5b66\u5f62\u6001\u5b66 Mathematical morphology \u57fa\u7840\u7406\u8bba\uff1a\u96c6\u5408\u8bba \u4e00\u79cd\u7b80\u5355\u7684\u975e\u7ebf\u6027\u4ee3\u6570\u7b97\u5b50\uff0c\u4e3b\u8981\u7528\u4e8e\u4e8c\u503c\u56fe\u50cf\uff0c\u53ef\u6269\u5c55\u5230\u7070\u5ea6\u56fe\u50cf\u3002\u7528\u5728\u566a\u58f0\u8fc7\u6ee4\u3001\u5f62\u72b6\u7b80\u5316\u3001\u7ec6\u5316\u3001\u5206\u5272\u3001\u7269\u4f53\u63cf\u8ff0\u7b49</li> </ul> <p>\u7528\u6570\u5b66\u5f62\u6001\u5b66\uff08\u4e5f\u79f0\u56fe\u50cf\u4ee3\u6570\uff09\u8868\u793a\u4ee5\u5f62\u6001\u4e3a\u57fa\u7840\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u6790\u7684\u6570\u5b66\u5de5\u5177  </p> <ul> <li>\u57fa\u672c\u601d\u60f3\u662f\u7528\u5177\u6709\u4e00\u5b9a\u5f62\u6001\u7684\u7ed3\u6784\u5143\u7d20(structure element) \u53bb\u5ea6\u91cf\u548c\u63d0\u53d6\u56fe\u50cf\u4e2d\u7684\u5bf9\u5e94\u5f62\u72b6\u4ee5\u8fbe\u5230\u5bf9\u56fe\u50cf\u5206\u6790\u548c\u8bc6\u522b\u7684\u76ee\u7684\u3002  </li> <li>\u5f62\u6001\u5b66\u56fe\u50cf\u5904\u7406\u7684\u6570\u5b66\u57fa\u7840\u548c\u6240\u7528\u8bed\u8a00\u662f\u96c6\u5408\u8bba\u3002  </li> <li>\u5f62\u6001\u5b66\u56fe\u50cf\u5904\u7406\u7684\u5e94\u7528\u53ef\u4ee5\u7b80\u5316\u56fe\u50cf\u6570\u636e\uff0c\u4fdd\u6301\u5b83\u4eec\u57fa\u672c\u7684\u5f62\u72b6\u7279\u6027\uff0c\u5e76\u9664\u53bb\u4e0d\u76f8\u5e72\u7ed3\u6784\u3002</li> <li>\u5f62\u6001\u5b66\u56fe\u50cf\u5904\u7406\u7684\u57fa\u672c\u8fd0\u7b97\u67094\u4e2a\uff1a\u81a8\u80c0\u3001\u8150\u8680\u3001\u5f00\u64cd\u4f5c\u548c\u95ed\u64cd\u4f5c </li> </ul>"},{"location":"dip/dip2/#set-theory-for-image","title":"Set Theory for Image","text":""},{"location":"dip/dip2/#dilation","title":"Dilation","text":"<p>A: \u4e8c\u503c\u56fe\u50cf B: \u4e8c\u503c\u6a21\u677f\uff0c\u79f0\u4e3a\u7ed3\u6784\u5143\uff08structure element\uff09 \\(A\\oplus B = \\{z| (B)_z \\cap A \\neq \\empty\\}\\) \u4e0a\u5f0f\u8868\u793aB\u8fdb\u884c\u5e73\u79fb\u4e0eA\u7684\u4ea4\u96c6\u4e0d\u4e3a\u7a7a</p> <p>\u81a8\u80c0\u662f\u5c06\u4e0e\u7269\u4f53\u201c\u63a5\u89e6\u201d\u7684\u6240\u6709\u80cc\u666f\u70b9\u5408\u5e76\u5230\u8be5\u7269\u4f53\u4e2d\uff0c\u4f7f\u8fb9\u754c\u5411\u5916\u90e8\u6269\u5f20\u7684\u8fc7\u7a0b\u3002\u53ef\u4ee5\u7528\u6765\u586b\u8865\u7269\u4f53\u4e2d\u7684\u7a7a\u6d1e\u3002  \uff08\u5176\u4e2d\u201c\u63a5\u89e6\u201d\u7684\u542b\u4e49\u7531\u7ed3\u6784\u5143\u63cf\u8ff0\uff09</p> <p>\u7528\u884c\u626b\u63cf\u7684\u65b9\u5f0f\uff0c\u4f5c\u4e3a A \u7684\u4e00\u90e8\u5206\uff0c\u5e0c\u671b\u628a\u524d\u666f\u5468\u56f4\u7684\u4e00\u5708\u7eb3\u5165\u5230\u524d\u666f\u3002 \u6838\u5fc3\u5224\u65ad\uff0c\u4ea4\u96c6\u4e0d\u4e3a\u7a7a\u3002 \u586b\u5145 B \u7684\u4e2d\u5fc3</p> <p>\u9009\u62e9\u4e0d\u540c\u5f62\u72b6\u7684\u7ed3\u6784\u5143\uff0c\u7ed3\u679c\u4e5f\u4e0d\u540c</p> <p>Example</p> <p> </p> <p>\u53ef\u4ee5\u7528\u6765\u586b\u8865 gap.</p>"},{"location":"dip/dip2/#erosion","title":"Erosion","text":"<p>\u8150\u8680\u662f\u4e00\u79cd\u6d88\u9664\u8fb9\u754c\u70b9\uff0c\u4f7f\u8fb9\u754c\u5411\u5185\u90e8\u6536\u7f29\u7684\u8fc7\u7a0b\u3002\u53ef\u4ee5\u7528\u6765\u6d88\u9664\u5c0f\u4e14\u65e0\u610f\u4e49\u7684\u7269\u4f53\u3002 </p> <p>A: Binary image B: binary template,  structure element \\(A\\ominus B=\\{(x,y)|(B)_{xy}\\sube A\\}\\) Physical meaning: remove boundary, remove unwanted small objects.</p> <p>padding \u7684\u601d\u60f3\uff1a\u5982\u679c\u6211\u4eec\u60f3\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u626b\u63cf\uff0c\u4f46\u662f\u8fd9\u6837\u6709\u7684\u5c31\u8d85\u51fa\u8fb9\u754c\u4e86\uff0c\u6211\u4eec\u5c31\u628a\u8fd9\u4e00\u884c\u518d\u590d\u5236\u4e00\u904d\uff0c\u518d\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u626b\u63cf\u3002</p> <p>(\u8fd9\u91cc\u76f4\u63a5\u628a\u7b2c\u4e00\u884c\u53d8\u6210 0, \u6ca1\u6709 padding)</p> <p>Example</p> <p> </p> <p> </p> <p>\u53ef\u4ee5\u7528\u7b2c\u4e8c\u5f20\u56fe\u9a8c\u8bc1\u4ee3\u7801\u662f\u5426\u6b63\u786e\u3002\u518d\u5229\u7528\u7b97\u6cd5\u4e8c\u503c\u5316\u5e76\u64cd\u4f5c\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528\u8150\u8680\u6d88\u9664\u56fe\u50cf\u7684\u7ec6\u8282\u90e8\u5206\uff0c\u4ea7\u751f\u6ee4\u6ce2\u5668\u7684\u4f5c\u7528\u3002</p> <p>Dilation and Erosion</p> <ul> <li>\u81a8\u80c0 \u7531B\u5bf9A\u81a8\u80c0\u6240\u4ea7\u751f\u7684\u4e8c\u503c\u56fe\u8c61D\u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u70b9(x,y)\u7684\u96c6\u5408\uff1a\u5982\u679cB\u7684\u539f\u70b9\u5e73\u79fb\u5230\u70b9(x,y)\uff0c\u90a3\u4e48\u5b83\u4e0eA\u7684\u4ea4\u96c6\u975e\u7a7a\u3002 </li> <li>\u8150\u8680 \u7531B\u5bf9A\u8150\u8680\u6240\u4ea7\u751f\u7684\u4e8c\u503c\u56fe\u8c61E\u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u70b9(x,y)\u7684\u96c6\u5408\uff1a\u5982\u679cB\u7684\u539f\u70b9\u5e73\u79fb\u5230\u70b9(x,y)\uff0c\u90a3\u4e48B\u5c06\u5b8c\u5168\u5305\u542b\u4e8eA\u4e2d </li> <li>\u81a8\u80c0\u4e0e\u8150\u8680\u662f\u5bf9\u5076\u7684 \\((A\\ominus B)^c=\\{z|(B_z)\\sube A\\}^c=\\{z|(B_z)\\cap A=\\empty\\}c=\\{z|(B_z)\\cap A^c \\neq \\empty\\}=A^c\\oplus B\\) </li> </ul> <p>Application</p> <ul> <li>A - erode(A) \u5f97\u5230\u8fb9\u754c</li> <li>p25 \u4e0e A \u7684\u8865\u96c6\u6c42\u4ea4 </li> </ul>"},{"location":"dip/dip2/#open","title":"Open","text":"<p>erosion, then dilation \\(A\\circ B=(A\\ominus B)\\oplus B\\)</p> <p>Remove small objects, segment object at thin part, smooth boundary of large object but preserve its original area. </p> <p> \u9762\u79ef\u57fa\u672c\u76f8\u540c</p>"},{"location":"dip/dip2/#close","title":"Close","text":"<p>dilation, then erosion \\(A \\bullet B =(A\\oplus B)\\ominus B\\) </p> <p>Fill small holes, connect the neighboring objects, smooth boundary while preserving the area at most.  \u7528\u6765\u586b\u5145\u7269\u4f53\u5185\u7ec6\u5c0f\u7a7a\u6d1e\u3001\u8fde\u63a5\u90bb\u8fd1\u7269\u4f53\u3001\u5e73\u6ed1\u5176\u8fb9\u754c\u7684\u540c\u65f6\u5e76\u4e0d\u660e\u663e\u6539\u53d8\u5176\u9762\u79ef\u3002 </p> <p></p>"},{"location":"dip/dip3/","title":"Image grayscale transform","text":""},{"location":"dip/dip3/#grayscale-perception","title":"Grayscale perception","text":"<p>\u7070\u5ea6\u7ea7\u611f\u77e5\uff1a32\u7070\u5ea6\u7ea7\u300164\u7070\u5ea6\u7ea7\u3001128\u7070\u5ea6\u7ea7\u3001256\u7070\u5ea6\u7ea7</p> <p>\u53ef\u89c6\u7684\u9608\u503c  Weber\u2019s Law \u80fd\u88ab\u6211\u4eec\u770b\u5230\u7684\u9608\u503c(delta I) \u4e0e I \u6210\u6b63\u6bd4 \\(\\dfrac{\\Delta I}{I}\\approx K_{weber}\\approx 1...2\\%\\)   P</p> <p>\u5047\u8bbe\u8fde\u7eed\u4e24\u4e2a\u7070\u5ea6\u7ea7\u4e4b\u95f4\u7684\u4eae\u5ea6\u5dee\u5f02\u5c31\u662fWeber\u2019s Law\u4e2d\u7684\u53ef\u89c6\u4e34\u754c\u503c\uff0c \\(\\dfrac{I_{max}}{I_{min}}=(1+K_{weber})^{255}\\) \u8003\u8651\u5230 \\(K_{weber}=0.01...0.02,\\dfrac{I_{max}}{I_{min}}=13...156\\) </p>"},{"location":"dip/dip3/#visibility-enhancement-a-logarithmic-operation","title":"Visibility enhancement: a logarithmic operation","text":"<p>\u53ef\u89c6\u5316\u589e\u5f3a\uff1a\u4ee5\u5bf9\u6570\u64cd\u4f5c\u4e3a\u4f8b</p> <p>\u4e3a\u4e86\u589e\u5f3a\u56fe\u50cf\u7684\u53ef\u89c6\u4fe1\u606f\uff0c\u5bf9\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u8fdb\u884c\u57fa\u4e8e\u5bf9\u6570\u7684\u64cd\u4f5c \\(L_d=\\dfrac{\\log(L_w+1)}{\\log(L_{max}+1)}\\) \\(L_d\\) \u662f\u663e\u793a\u4eae\u5ea6\uff0c\\(L_w\\) \u662f\u771f\u5b9e\u4e16\u754c\u4eae\u5ea6\uff0c\\(L_{max}\\) \u662f\u573a\u666f\u4e2d\u7684\u6700\u4eae\u503c\u3002 \u8fd9\u4e2a\u6620\u5c04\u80fd\u591f\u786e\u4fdd\u4e0d\u7ba1\u573a\u666f\u7684\u52a8\u6001\u8303\u56f4\u662f\u600e\u4e48\u6837\u7684\uff0c\u5176\u6700\u5927\u503c\u90fd\u80fd\u6620\u5c04\u52301\uff08\u767d\uff09\uff0c\u5176\u4ed6\u7684\u503c\u80fd\u591f\u6bd4\u8f83\u5e73\u6ed1\u5730\u53d8\u5316\u3002 </p> <p>\u5e73\u6ed1\u66f2\u7ebf\uff0c\u4e0d\u4f1a\u51fa\u73b0\u68af\u5ea6\u9006\u8f6c\uff08\u539f\u6765\u6bd4\u8f83\u6697\uff0c\u73b0\u5728\u8fd8\u662f\u6bd4\u8f83\u6697\uff09 global method. </p> <p>\u5bf9\u6570\u7684\u95ee\u9898\uff1a </p> <p>\u867d\u7136\u7ec6\u8282\u66f4\u591a\uff0c\u4f46\u662f\u5bf9\u6bd4\u5ea6\u6ca1\u90a3\u4e48 sharp \u4e86\uff0c\u7f8e\u611f</p>"},{"location":"dip/dip3/#grayscale-image-and-histogram","title":"Grayscale image and histogram","text":""},{"location":"dip/dip3/#grayscale-image","title":"Grayscale image","text":"<ul> <li>\u4e8c\u7ef4\u6570\u7ec4\uff0c\u6bcf\u4e2a\u50cf\u7d20 8 \u4f4d\uff08\u901a\u5e38\u5199\u4f5c 0..255\uff09</li> <li>\u7070\u5ea6\u7ea7\u7684\u503c\u8d8a\u5c0f\uff0c\u8fd9\u4e2a\u56fe\u50cf\u770b\u4e0a\u53bb\u8d8a\u6697\uff1b\u53cd\u4e4b\u8d8a\u4eae  </li> </ul>"},{"location":"dip/dip3/#histogram","title":"Histogram","text":"<p>\u7070\u5ea6\u76f4\u65b9\u56fe\u662f\u4e00\u7c7b\u7edf\u8ba1\u56fe\u5f62\uff0c\u5b83\u8868\u793a\u4e00\u5e45\u56fe\u50cf\u4e2d\u5404\u4e2a\u7070\u5ea6\u7b49\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u5728\u50cf\u7d20\u603b\u6570\u4e2d\u6240\u5360\u7684\u6bd4\u91cd\u3002  e.g. </p> <p>\u91cf\u5316\uff1a\u5982 256 \u5206\u4e3a 8 \u4e2a\u7070\u5ea6\u7ea7\uff0c 0-32 \u4e3a\u4e00\u4e2a\u7070\u5ea6\u7ea7\uff0c\u4ee5\u6b64\u7c7b\u63a8... \u6bcf\u4e2a\u67f1\u5b50\u5c31\u53cd\u6620\u4e86\u50cf\u7d20\u6570\u76ee\u5360\u7684\u6bd4\u4f8b\u3002</p> <p>\u8bbe\u7070\u5ea6\u7b49\u7ea7\u8303\u56f4\u4e3a[0,L-1] \uff0c\u7070\u5ea6\u76f4\u65b9\u56fe\u7528\u4e0b\u5217\u79bb\u6563\u51fd\u6570\u6765\u8868\u793a\uff1a \\(h(r_k)=n_k\\) \u5176\u4e2d\uff0c\\(r_k\\) \u4e3a\u7b2ck\u7ea7\u7070\u5ea6\uff0c\\(n_k\\) \u662f\u56fe\u50cf\u4e2d\u5177\u6709\u7070\u5ea6\u7ea7 \\(r_k\\) \u7684\u50cf\u7d20\u6570\u76ee\uff0c\\(0 \\leq k \\leq L-1\uff0c0 \\leq n_k \\leq n-1\\), \\(n\\) \u4e3a\u56fe\u50cf\u603b\u7684\u50cf\u7d20\u6570\u76ee\u3002 \u901a\u5e38\u7528\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u6765\u5f52\u4e00\u5316\u76f4\u65b9\u56fe\uff1a \\(P(r_k)\\)\u4e3a\u7070\u5ea6\u7ea7\\(r_k\\)\u6240\u53d1\u751f\u7684\u6982\u7387\uff08\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff09\u3002\u6b64\u65f6\uff0c\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a  \\(\\sum\\limits_{k=0}^{L-1}P(r_k)=1\\)</p> <p>Example</p> <p></p>"},{"location":"dip/dip3/#color-image-and-histogram","title":"Color image and histogram","text":""},{"location":"dip/dip3/#color-histogram","title":"Color histogram","text":"<p>\u5f69\u8272\u76f4\u65b9\u56fe\u662f\u4e00\u7c7b\u7edf\u8ba1\u56fe\u5f62\uff0c\u5b83\u8868\u793a\u4e00\u5e45\u56fe\u50cf\u4e2d r,g,b \u901a\u9053\u4e0a\u5404\u4e2a\u7070\u5ea6\u7b49\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u5728\u50cf\u7d20\u603b\u6570\u4e2d\u6240\u5360\u7684\u6bd4\u91cd\u3002 </p> <p></p>"},{"location":"dip/dip3/#characteristics-of-histogram","title":"Characteristics of histogram","text":"<p>\u76f4\u65b9\u56fe  </p> <ul> <li>\u662f\u7a7a\u95f4\u57df\u5904\u7406\u6280\u672f\u7684\u57fa\u7840\u3002</li> <li>\u53cd\u6620\u56fe\u50cf\u7070\u5ea6\u7684\u5206\u5e03\u89c4\u5f8b\uff0c\u4f46\u4e0d\u80fd\u4f53\u73b0\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u53d8\u5316\u60c5\u51b5\u3002</li> <li>\u5bf9\u4e8e\u4e00\u5e45\u7ed9\u5b9a\u7684\u56fe\u50cf\uff0c\u5176\u76f4\u65b9\u56fe\u662f\u552f\u4e00\u7684\u3002</li> <li>\u4e0d\u540c\u7684\u56fe\u50cf\u53ef\u4ee5\u5bf9\u5e94\u76f8\u540c\u7684\u76f4\u65b9\u56fe\u3002</li> </ul> <p>\u5bf9\u76f4\u65b9\u56fe\u8fdb\u884c\u64cd\u4f5c\u80fd\u6709\u6548\u5730\u7528\u4e8e\u56fe\u50cf\u589e\u5f3a\u3001\u538b\u7f29\u548c\u5206\u5272, \u4ed6\u4eec\u662f\u56fe\u50cf\u5904\u7406\u7684\u4e00\u4e2a\u5b9e\u7528\u624b\u6bb5\u3002</p> <p>\u7f3a\u70b9\uff1a\u5e26\u6765\u566a\u58f0</p> <p>Question</p> <p> </p> <p>\u4f46\u662f\u76f4\u65b9\u56fe\u628a\u7ed3\u6784\u4fe1\u606f\u4e22\u5931\uff0c\u53ea\u77e5\u9053\u989c\u8272\u5206\u5e03\uff0c\u4e0d\u77e5\u9053\u7ed3\u6784\u3002  </p>"},{"location":"dip/dip3/#histogram-equalization-and-fitting","title":"Histogram equalization and fitting","text":""},{"location":"dip/dip3/#histogram-equalization","title":"Histogram equalization","text":"<p>\u76f4\u65b9\u56fe\u5747\u8861\u5316\uff1a\u5c06\u539f\u56fe\u50cf\u7684\u975e\u5747\u5300\u5206\u5e03\u7684\u76f4\u65b9\u56fe\u901a\u8fc7\u53d8\u6362\u51fd\u6570T\u4fee\u6b63\u4e3a\u5747\u5206\u5e03\u7684\u76f4\u65b9\u56fe\uff0c\u7136\u540e\u6309\u5747\u8861\u76f4\u65b9\u56fe\u4fee\u6b63\u539f\u56fe\u50cf\u3002</p> <p>\u627e\u5230\u53d8\u6362\u51fd\u6570T\uff0c\u786e\u5b9a\u5982\u4e0b\u5bf9\u5e94\u5173\u7cfb\uff1a \\(s=T(r)\\) \u4ece\u800c\u786e\u4fdd\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7070\u5ea6r\u90fd\u80fd\u8f6c\u6362\u4e3a\u65b0\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u5bf9\u5e94\u7684\u7070\u5ea6s\u3002</p> <p>\u76f4\u65b9\u56fe\u5747\u8861\u5316\u2014\u2014\u5bfb\u627eT\uff08\u8fde\u7eed\u7070\u5ea6\u53d8\u5316\uff09 \u5047\u8bbe\uff1a  </p> <ul> <li>\u4ee4 r\u548c s \u5206\u522b\u4ee3\u8868\u53d8\u5316\u524d\u540e\u56fe\u50cf\u7684\u7070\u5ea6\u7ea7\uff0c\u5e76\u4e14 \\(0\\leq r,s \\leq 1\\) \u3002</li> <li>P\u00ae \u548c P(s) \u5206\u522b\u4e3a\u53d8\u5316\u524d\u540e\u5404\u7ea7\u7070\u5ea6\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff08r\u548cs\u503c\u5df2\u5f52\u4e00\u5316\uff0c\u6700\u5927\u7070\u5ea6\u503c\u4e3a1\uff09</li> </ul> <p>\u89c4\u5b9a\uff1a  </p> <ul> <li>\u5728\\(0\\leq r \\leq\\)\u4e2d\uff0cT\u00ae\u662f\u5355\u8c03\u9012\u589e\u51fd\u6570\uff0c\u5e76\u4e14\\(0\\leq T(r)\\leq 1\\)\u3002</li> <li>\u53cd\u53d8\u6362\\(r = T-1(s)\\)\u4e5f\u4e3a\u5355\u8c03\u9012\u589e\u51fd\u6570\u3002</li> </ul> <p>\u8003\u8651\u5230\u7070\u5ea6\u53d8\u6362\u4e0d\u5f71\u54cd\u50cf\u7d20\u7684\u4f4d\u7f6e\u5206\u5e03\uff0c\u4e5f\u4e0d\u4f1a\u589e\u51cf\u50cf\u7d20\u6570\u76ee\u3002\u6240\u4ee5\u6709\uff1a\\(\\int_{0}^rP(r)dr =\\int_{0}^sP(s)ds=\\int_{0}^s1ds=s=T(r)\\) (\u4e3a\u4ec0\u4e48 Ps = 1, \u56e0\u4e3a\u662f\u6982\u7387\u5bc6\u5ea6) \u56e0\u6b64 \\(s=T(r)=\\int_{0}^rP(r)dr\\) \u5373\u8f6c\u6362\u51fd\u6570 T \u5728\u53d8\u91cf r \u5904\u7684\u51fd\u6570\u503c s\uff0c\u662f\u539f\u76f4\u65b9\u56fe\u4e2d\u7070\u5ea6\u7b49\u7ea7\u4e3a [0,r] \u4ee5\u5185\u7684\u76f4\u65b9\u56fe\u66f2\u7ebf\u6240\u8986\u76d6\u7684\u9762\u79ef\u3002 </p> <p>Discrete: \u8bbe\u4e00\u5e45\u56fe\u50cf\u7684\u50cf\u7d20\u603b\u6570\u4e3a n\uff0c\u5206 L \u4e2a\u7070\u5ea6\u7ea7\uff0c\\(n_k\\)\u4e3a\u7b2c k \u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u50cf\u7d20\u6570\uff0c\u5219\u7b2c k \u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u6982\u7387\u4e3a\uff1a\\(P(r_k)=\\dfrac{n_k}{n}\\quad (0\\leq r_k\\leq 1,k=0,1,2,...L-1)\\) \u79bb\u6563\u7070\u5ea6\u76f4\u65b9\u56fe\u5747\u8861\u5316\u7684\u8f6c\u6362\u516c\u5f0f\u4e3a\uff1a \\(s_k=T(r_k)=\\sum\\limits_{i=0}^kP(r_i)=\\sum\\limits_{i=0}^k\\dfrac{n_i}{n}=\\dfrac{1}{n}\\sum\\limits_{i=0}^k n_i\\) \u5bf9\u4e8e\u539f\u76f4\u65b9\u56fe\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u7070\u5ea6\u7ea7 \\(r_k\\)\uff0c\u53ea\u9700\u5c06\u7070\u5ea6\u7ea7\u4e3a \\([0,r_k]\\) \u4ee5\u5185\u7684\u6240\u6709\u50cf\u7d20\u4e2a\u6570\u7684\u548c\u9664\u4ee5\u56fe\u50cf\u7684\u50cf\u7d20\u603b\u6570\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8f6c\u6362\u4e4b\u540e\u7684\u5bf9\u5e94\u7070\u5ea6\u7ea7 \\(s_k\\)</p> <p>Example</p> <p>\u8bbe\u56fe\u50cf\u670964*64=4096\u4e2a\u50cf\u7d20\uff0c\u67098\u4e2a\u7070\u5ea6\u7ea7\uff0c\u7070\u5ea6\u5206\u5e03:  1. \u8ba1\u7b97 \\(s_k\\)(\u5229\u7528\u524d\u7f00\u548c) 2. \u628a\u8ba1\u7b97\u7684 \\(s_k\\) \u5c31\u8fd1\u5b89\u6392\u52308\u4e2a\u7070\u5ea6\u7ea7\u4e2d\uff08\u5f97\u5230 \\(s_k\\) \u820d\u5165\uff09  \u6ce8\u610f\u8fd9\u91cc 34 \u7070\u5ea6\u7ea7\u88ab\u5408\u5e76\uff0c\u7070\u5ea6\u7ea7\u603b\u6570\u51cf\u5c11\uff0c\u610f\u5473\u7740\u7070\u5ea6\u7ea7\u4e4b\u95f4\u7684\u5dee\u5f02\u589e\u5927\uff0c\u5bf9\u6bd4\u5ea6\u589e\u5f3a\u3002 </p> <p>Question</p> <ul> <li>\u6309\u7167\u5747\u8861\u5316\u7684\u8981\u6c42\uff0c\u5728\u5747\u8861\u5316\u540e\u7684\u7ed3\u679c\u76f4\u65b9\u56fe\u4e2d\uff0c\u5404\u7070\u5ea6\u7ea7\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u662f\u76f8\u540c\u7684\uff0c\u5982\u53f3\u4e0a\u56fe\u6240\u793a\u8fde\u7eed\u7070\u5ea6\u7ea7\u5747\u8861\u5316\u7ed3\u679c\u90a3\u6837\u3002\u4f46\u662f\uff0c\u5982\u521a\u521a\u4e2d\u79bb\u6563\u7070\u5ea6\u7ea7\u5747\u8861\u5316\u540e\uff0c\u5404\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u6982\u7387\u5e76\u4e0d\u5b8c\u5168\u4e00\u6837\u3002\u4e3a\u4ec0\u4e48\uff1f</li> <li>\u6b65\u9aa42\u4e2d\uff0c\u6240\u5f97\u7684 \\(s_k\\) \u4e0d\u53ef\u80fd\u6b63\u597d\u7b49\u4e8e8\u7ea7\u7070\u5ea6\u503c\u4e2d\u7684\u67d0\u4e00\u7ea7\uff0c\u56e0\u6b64\u9700\u8981\u5c31\u8fd1\u5f52\u5165\u67d0\u4e00\u4e2a\u7070\u5ea6\u7ea7\u4e2d\u3002\u8fd9\u6837\uff0c\u76f8\u90bb\u7684\u591a\u4e2a \\(s_k\\) \u5c31\u53ef\u80fd\u843d\u5165\u540c\u4e00\u4e2a\u7070\u5ea6\u7ea7\uff0c\u9700\u8981\u5728\u6b65\u9aa43\u65f6\u5c06\u5904\u4e8e\u540c\u4e00\u4e2a\u7070\u5ea6\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u7d2f\u52a0\u3002\u56e0\u6b64\uff0c\u79bb\u6563\u7070\u5ea6\u76f4\u65b9\u56fe\u5747\u8861\u5316\u64cd\u4f5c\u4ee5\u540e\uff0c\u6bcf\u4e2a\u7070\u5ea6\u7ea7\u5904\u7684\u6982\u7387\u5bc6\u5ea6\uff08\u6216\u50cf\u7d20\u4e2a\u6570\uff09\u5e76\u4e0d\u5b8c\u5168\u4e00\u6837\u3002 </li> </ul> <p>\u76f4\u65b9\u56fe\u5747\u8861\u5316\u5b9e\u8d28\u4e0a\u662f\u51cf\u5c11\u56fe\u50cf\u7684\u7070\u5ea6\u7ea7\u4ee5\u6362\u53d6\u5bf9\u6bd4\u5ea6\u7684\u52a0\u5927\u3002\u5728\u5747\u8861\u8fc7\u7a0b\u4e2d\uff0c\u539f\u6765\u7684\u76f4\u65b9\u56fe\u4e0a\u51fa\u73b0\u6982\u7387\u8f83\u5c0f\u7684\u7070\u5ea6\u7ea7\u88ab\u5f52\u5165\u5f88\u5c11\u51e0\u4e2a\u751a\u81f3\u4e00\u4e2a\u7070\u5ea6\u7ea7\u4e2d\uff0c\u6545\u5f97\u4e0d\u5230\u589e\u5f3a\u3002\u82e5\u8fd9\u4e9b\u7070\u5ea6\u7ea7\u6240\u6784\u6210\u7684\u56fe\u8c61\u7ec6\u8282\u6bd4\u8f83\u91cd\u8981\uff0c\u5219\u9700\u91c7\u7528\u5c40\u90e8\u533a\u57df\u76f4\u65b9\u56fe\u5747\u8861\u5316\u5904\u7406\u3002 </p>"},{"location":"dip/dip3/#histogram-fitting","title":"Histogram fitting","text":"<ul> <li>\u6240\u8c13\u76f4\u65b9\u56fe\u5339\u914d\uff0c\u5c31\u662f\u4fee\u6539\u4e00\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\uff0c\u4f7f\u5f97\u5b83\u4e0e\u53e6\u4e00\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u5339\u914d\u6216\u5177\u6709\u4e00\u79cd\u9884\u5148\u89c4\u5b9a\u7684\u51fd\u6570\u5f62\u72b6\u3002  </li> <li>\u76f4\u65b9\u56fe\u5339\u914d\u7684\u76ee\u6807\uff0c\u662f\u7a81\u51fa\u6211\u4eec\u611f\u5174\u8da3\u7684\u7070\u5ea6\u8303\u56f4\uff0c\u4f7f\u56fe\u50cf\u8d28\u91cf\u6539\u5584\u3002  </li> <li>\u5229\u7528\u76f4\u65b9\u56fe\u5747\u8861\u5316\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5b9e\u73b0\u76f4\u65b9\u56fe\u5339\u914d\u8fc7\u7a0b\u3002</li> </ul> <p>\u5177\u4f53\u8fc7\u7a0b\uff1a  </p> <ul> <li>Base on the equation \\(s=T(r)=\\int_0^rP(r)dr\\) map the gray level r in the resulted histogram to be s.  </li> <li>Base on the equation \\(v=T(z)=\\int_0^zP(z)dz\\) map the gray level z in the resulted histogram to be v.  </li> <li>\u7531\\(v = G(z)\\)\u5f97\u5230 \\(z =G^{-1}(v)\\)\u3002\u7531\u4e8es\u548cv\u6709\u76f8\u540c\u7684\u5206\u5e03\uff0c\u9010\u4e00\u53d6\\(v = s\\)\uff0c\u6c42\u51fa\u4e0er\u5bf9\u5e94\u7684\\(z =G^{-1}(s)\\)\u3002</li> </ul> <p>\u65b9\u6cd5\u7b80\u8ff0\uff1a   \u5728\u6b65\u9aa41\u548c2\u4e2d\uff0c\u5206\u522b\u8ba1\u7b97\u83b7\u5f97\u4e24\u5f20\u8868\uff08\u53c2\u89c1\u76f4\u65b9\u56fe\u5747\u8861\u5316\u4e2d\u7684\u7b97\u4f8b\uff09\uff0c\u4ece\u4e2d\u9009\u53d6\u4e00\u5bf9vk\u3001sj\uff0c\u4f7fvk = sj\uff0c\u5e76\u4ece\u4e24\u5f20\u8868\u4e2d\u67e5\u51fa\u5bf9\u5e94\u7684zk\u3001rj\u3002\u8fd9\u6837\uff0c\u539f\u59cb\u56fe\u50cf\u4e2d\u7070\u5ea6\u7ea7\u4e3arj\u7684\u6240\u6709\u50cf\u7d20\u90fd\u6620\u5c04\u6210\u7070\u5ea6\u7ea7zk\uff0c\u6700\u7ec8\u5f97\u5230\u6240\u671f\u671b\u7684\u56fe\u50cf\u3002</p> <p>\u76f4\u65b9\u56fe\uff08\u7070\u5ea6\uff09\u53d8\u6362\u7528\u4ee5\u786e\u5b9a\u53d8\u6362\u524d\u540e\u4e24\u4e2a\u76f4\u65b9\u56fe\u7070\u5ea6\u7ea7\u4e4b\u95f4\u5bf9\u5e94\u5173\u7cfb\u7684\u53d8\u6362\u51fd\u6570\u3002\u7ecf\u8fc7\u76f4\u65b9\u56fe\u53d8\u6362\u4ee5\u540e\uff0c\u539f\u56fe\u50cf\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7070\u5ea6\u503c\u90fd\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a\u65b0\u7684\u7070\u5ea6\u503c\uff0c\u4ece\u800c\u6784\u6210\u4e00\u5e45\u65b0\u56fe\u50cf\u3002 \u76f4\u65b9\u56fe\u5747\u8861\u5316\u3001\u76f4\u65b9\u56fe\u5339\u914d\u90fd\u5c5e\u4e8e\u76f4\u65b9\u56fe\u53d8\u6362\u64cd\u4f5c\u3002</p>"},{"location":"dip/dip3/#histogram-transformimage-enhancement","title":"Histogram transform\u2014image enhancement","text":"<p>\u56fe\u50cf\u589e\u5f3a * \u91c7\u7528\u4e00\u7cfb\u5217\u6280\u672f\u53bb\u6539\u5584\u56fe\u50cf\u7684\u89c6\u89c9\u6548\u679c\uff0c\u6216\u5c06\u56fe\u50cf\u8f6c\u6362\u6210\u4e00\u79cd\u66f4\u9002\u5408\u4e8e\u4eba\u6216\u673a\u5668\u8fdb\u884c\u5206\u6790\u5904\u7406\u7684\u5f62\u5f0f\u3002  * \u56fe\u50cf\u589e\u5f3a\u5e76\u4e0d\u4ee5\u56fe\u50cf\u4fdd\u771f\u4e3a\u51c6\u5219\uff0c\u800c\u662f\u6709\u9009\u62e9\u5730\u7a81\u51fa\u67d0\u4e9b\u5bf9\u4eba\u6216\u673a\u5668\u5206\u6790\u6709\u610f\u4e49\u7684\u4fe1\u606f\uff0c\u6291\u5236\u65e0\u7528\u4fe1\u606f\uff0c\u63d0\u9ad8\u56fe\u50cf\u7684\u4f7f\u7528\u4ef7\u503c\u3002  * \u6839\u636e\u4efb\u52a1\u76ee\u6807\u7a81\u51fa\u56fe\u50cf\u4e2d\u611f\u5174\u8da3\u7684\u4fe1\u606f\uff0c\u6d88\u9664\u5e72\u6270\uff0c\u6539\u5584\u56fe\u50cf\u7684\u89c6\u89c9\u6548\u679c\u6216\u589e\u5f3a\u4fbf\u4e8e\u673a\u5668\u8bc6\u522b\u7684\u4fe1\u606f\u3002 </p> <ul> <li> <p>Luminance adjustment</p> Example <p></p> </li> <li> <p>Contrast adjustment</p> Example <p></p> </li> <li> <p>Color quantization</p> Example <p></p> </li> </ul> <p>\u6839\u636e\u53d8\u6362\u51fd\u6570\u7c7b\u578b\u7684\u4e0d\u540c\uff0c\u76f4\u65b9\u56fe\u7070\u5ea6\u53d8\u6362\u53ef\u4ee5\u5206\u4e3a\u7ebf\u6027\u53d8\u6362\u548c\u975e\u7ebf\u6027\u53d8\u6362\u4e24\u5927\u7c7b\u3002 </p>"},{"location":"dip/dip3/#linear-grayscale-transform","title":"Linear grayscale transform","text":"<p>Example</p> <p></p> <p>Contrast stretching \u62c9\u4f38 \u8f93\u5165\u56fe\u50cff(x,y)\u7070\u5ea6\u8303\u56f4\u4e3a[a,b] \u8f93\u51fa\u56fe\u50cfg(x,y)\u7070\u5ea6\u8303\u56f4\u4e3a[c,d] </p> <p>\u6709\u7684\u65f6\u5019 \u5206\u6bb5\u62c9\u4f38 \u5229\u7528\u5206\u6bb5\u76f4\u65b9\u56fe\u53d8\u6362\uff0c\u53ef\u4ee5\u5c06\u611f\u5174\u8da3\u7684\u7070\u5ea6\u8303\u56f4\u7ebf\u6027\u6269\u5c55\uff0c\u540c\u65f6\u76f8\u5bf9\u6291\u5236\u4e0d\u611f\u5174\u8da3\u7684\u7070\u5ea6\u533a\u57df\u3002 </p>"},{"location":"dip/dip3/#nonlinear-histogram-transform","title":"Nonlinear histogram transform","text":""},{"location":"dip/dip5/","title":"Geometric transform","text":"<p>Abstract</p> <ul> <li>Simple geometric transform  </li> <li>Interpolation  </li> <li>Warp and morph  </li> <li>Application  </li> </ul> <p>\u5229\u7528\u53d8\u6362\u51fd\u6570\u6539\u53d8\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002  \u51e0\u4f55\u53d8\u6362\u4e0d\u6539\u53d8\u50cf\u7d20\u503c\uff0c\u800c\u662f\u6539\u53d8\u50cf\u7d20\u6240\u5728\u7684\u4f4d\u7f6e\u3002 </p> <p>Example</p> <p> </p> <p>\\(g(x,y)=f(x^{'},y^{'})=f[a(x,y),b(x,y)]\\) </p> <p>\\(f(x,y)\\) \u8868\u793a\u8f93\u5165\u56fe\u50cf\uff0c \\(g(x,y)\\) \u8868\u793a\u8f93\u51fa\u56fe\u50cf\u3002\u51fd\u6570 \\(a(x,y)\\) \u548c \\(b(x,y)\\) \u552f\u4e00\u5730\u63cf\u8ff0\u4e86\u7a7a\u95f4\u53d8\u6362\u3002 </p> <p>\u51e0\u4f55\u53d8\u6362\u6839\u636e\u96be\u6613\u7a0b\u5ea6\u901a\u5e38\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4e24\u7c7b\uff1a  </p> <ul> <li>\u7b80\u5355\u53d8\u6362\u2014\u2014\u53d8\u6362\u8fc7\u7a0b\uff08\u5404\u4e2a\u50cf\u7d20\u53d8\u6362\u524d\u540e\u7684\u4f4d\u7f6e\uff09\u4ee5\u53ca\u53d8\u6362\u53c2\u6570\u53ef\u77e5\u65f6\u7684\u53d8\u6362\uff0c\u5982\u56fe\u50cf\u7684\u5e73\u79fb\u3001\u955c\u50cf\u3001\u8f6c\u7f6e\u3001\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u9519\u5207\u53d8\u6362\u7b49\u3002</li> <li>\u4e00\u822c\u53d8\u6362\u2014\u2014\u53d8\u6362\u8fc7\u7a0b\u4e0d\u662f\u4e00\u76ee\u4e86\u7136\uff0c\u53d8\u6362\u53c2\u6570\u96be\u4ee5\u6d4b\u91cf\u65f6\u7684\u53d8\u6362\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u56fe\u50cf\u7578\u53d8\u8fdb\u884c\u6821\u6b63\u65f6\uff0c\u9700\u8981\u7528\u5230\u8f83\u4e3a\u590d\u6742\u7684\u53d8\u6362\u516c\u5f0f\u3002  </li> </ul>"},{"location":"dip/dip5/#simple-geometric-transform","title":"Simple geometric transform","text":""},{"location":"dip/dip5/#translation","title":"Translation","text":"<p>\u5c06\u56fe\u50cf\u6cbf\u6c34\u5e73\u548c\u7ad6\u76f4\u65b9\u5411\u79fb\u52a8\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002   </p> \\[ \\left\\{ \\begin{matrix} x^{'}=x+x_0 \\\\ y^{'}=y+y_0 \\end{matrix} \\right. \\] \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} 1 &amp; 0 &amp; x_0 \\\\ 0 &amp; 1 &amp; y_0 \\\\ 0 &amp; 0 &amp; 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] <p>\u5e73\u79fb\u540e\u7684\u666f\u7269\u4e0e\u539f\u56fe\u50cf\u76f8\u540c\uff0c\u4f46\u201c\u753b\u5e03\u201d\u4e00\u5b9a\u662f\u6269\u5927\u4e86\uff0c\u5426\u5219\u5c31\u4f1a\u4e22\u5931\u4fe1\u606f\u3002</p>"},{"location":"dip/dip5/#mirror","title":"Mirror","text":"<p>\u7ed5x\u8f74\u6216y\u8f74\u7ffb\u8f6c\uff0c\u4ece\u800c\u4ea7\u751f\u4e0e\u539f\u56fe\u50cf\u5bf9\u79f0\u7684\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b: \\(\\left\\{ \\begin{matrix} x^{'}=x \\\\ y^{'}=-y \\end{matrix} \\right.\\) \u7ed5x\u8f74\u6216y\u8f74\u7ffb\u8f6c\uff0c\u4ece\u800c\u4ea7\u751f\u4e0e\u539f\u56fe\u50cf\u5bf9\u79f0\u7684\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b: \\(\\left\\{ \\begin{matrix} x^{'}=-x \\\\ y^{'}=y \\end{matrix} \\right.\\)</p> \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} s_x &amp; 0 &amp; 0 \\\\ 0 &amp; s_y &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} \\cos\\theta &amp; -\\sin\\theta &amp; 0 \\\\ \\sin\\theta &amp; \\cos\\theta &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] <p>\u5f53 \\(S_x = 1\\)\uff0c\u4e14 \\(S_y = -1\\) \u65f6\u5b9e\u73b0\u7ed5x\u8f74\u7684\u955c\u50cf\u53d8\u6362 \u5f53 \\(S_x = -1\\)\uff0c\u4e14 \\(S_y = 1\\) \u65f6\u5b9e\u73b0\u7ed5y\u8f74\u7684\u955c\u50cf\u53d8\u6362</p>"},{"location":"dip/dip5/#rotation","title":"Rotation","text":"<p>\u7ed5\u539f\u70b9\u65cb\u8f6c \\(\\theta\\) \u89d2\uff0c\u5f97\u5230\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b  </p> \\[   \\left\\{ \\begin{matrix} x^{'}=x\\cos\\theta - y\\sin\\theta\\\\ y^{'}=x\\sin\\theta + y\\cos\\theta \\end{matrix} \\right. \\] \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} \\cos\\theta &amp; 0 &amp; x_0 \\\\ 0 &amp; 1 &amp; y_0 \\\\ 0 &amp; 0 &amp; 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] <p>Example</p> <p> </p> <p>\u56db\u820d\u4e94\u5165/\u4fdd\u7559\u539f\u6765\u80cc\u666f\u989c\u8272\uff08\u7a7a\u767d\uff09 \u7a7a\u6d1e\u95ee\u9898\uff0c\u56fe\u50cf\u7ecf\u8fc7\u65cb\u8f6c\u53d8\u6362\u4ee5\u540e\uff0c\u65b0\u56fe\u50cf\u4e2d\u4f1a\u51fa\u73b0\u8bb8\u591a\u7a7a\u6d1e\uff0c\u9700\u8981\u63d2\u5165</p> <p>\u89e3\u51b3\uff1a \u7528\u63d2\u503c\u65b9\u6cd5\u586b\u8865\u3002 \u884c\u63d2\u503c\u2014\u2014\u6309\u987a\u5e8f\u5bfb\u627e\u6bcf\u4e00\u884c\u4e2d\u7684\u7a7a\u6d1e\u50cf\u7d20\uff0c\u8bbe\u7f6e\u5176\u50cf\u7d20\u503c\u4e0e\u540c\u4e00\u884c\u4e2d\u524d\u4e00\u4e2a\u50cf\u7d20\u7684\u50cf\u7d20\u503c\u76f8\u540c\u3002 \u8fd8\u53ef\u4ee5\u7f29\u653e\u3002</p>"},{"location":"dip/dip5/#scale","title":"Scale","text":"<p>\u5c06\u56fe\u50cf\u4e58\u4ee5\u4e00\u5b9a\u7cfb\u6570\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002</p> \\[ \\left\\{ \\begin{matrix} x^{'}=cx\\\\ y^{'}=dy \\end{matrix} \\right. \\] <p>\u6216\u8005\u7528\u77e9\u9635\u8868\u793a\u4e3a </p> \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} c &amp;  0 &amp; 0 \\\\ 0 &amp; d &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] <ul> <li>\u6cbfx\u8f74\u65b9\u5411\u7f29\u653ec\u500d\uff08c&gt;1\u65f6\u4e3a\u653e\u5927\uff0c0&lt;c&lt;1\u65f6\u4e3a\u7f29\u5c0f\uff09\uff1b\u6cbfy\u8f74\u65b9\u5411\u7f29\u653ed\u500d\uff08d&gt;1\u65f6\u4e3a\u653e\u5927\uff0c0&lt;d&lt;1\u65f6\u4e3a\u7f29\u5c0f\uff09\u3002 </li> <li>\u5f53 \\(c=d\\) \u65f6\uff0c\u56fe\u50cf\u7b49\u6bd4\u7f29\u653e\uff1b\u5426\u5219\u4e3a\u975e\u7b49\u6bd4\u7f29\u653e\uff0c\u5bfc\u81f4\u56fe\u50cf\u53d8\u5f62\u3002</li> <li>\u7f29\u5c0f\u2014\u2014\u6309\u4e00\u5b9a\u95f4\u9694\u9009\u53d6\u67d0\u4e9b\u884c\u548c\u5217\u7684\u50cf\u7d20\u6784\u6210\u7f29\u5c0f\u540e\u7684\u65b0\u56fe\u50cf\uff1b</li> <li>\u653e\u5927\u2014\u2014\u65b0\u56fe\u50cf\u51fa\u73b0\u7a7a\u884c\u548c\u7a7a\u5217\uff0c\u53ef\u91c7\u7528\u63d2\u503c\u7684\u65b9\u6cd5\u52a0\u4ee5\u586b\u8865\uff0c\u4f46\u5b58\u5728\u201c\u9a6c\u8d5b\u514b\u201d\u73b0\u8c61\u3002 </li> </ul> <p>e.g. </p>"},{"location":"dip/dip5/#shear","title":"Shear","text":"<p>\u56fe\u50cf\u7684\u9519\u5207\u53d8\u6362\u5b9e\u9645\u4e0a\u662f\u666f\u7269\u5728\u5e73\u9762\u4e0a\u7684\u975e\u5782\u76f4\u6295\u5f71\u6548\u679c\u3002</p> <p>\u5047\u8bbe\u526a\u5207\u53d8\u6362\u7684\u53c2\u6570\u4e3a \\(d_x\\) \u6216\u8005 \\(d_y\\)\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u6570\u5b66\u516c\u5f0f\u8868\u73b0\u4e3a  </p> <ul> <li>Shear on x-axis: \\(\\left\\{ \\begin{matrix} a(x,y)=x+d_xy\\\\ b(x,y)=y \\end{matrix} \\right.\\)</li> <li>Shear on y-axis: \\(\\left\\{ \\begin{matrix} a(x,y)=x\\\\ b(x,y)=y+d_yx \\end{matrix} \\right.\\) \u4ec5 x \u5750\u6807\u6216 y \u5750\u6807\u53d7\u5230\u526a\u5207\u6216\u8005 x\u3001y \u540c\u65f6\u53d7\u5230\u526a\u5207\u7684\u53d8\u6362\u77e9\u9635\u5206\u522b\u4e3a\uff1a</li> </ul> \\[ \\left( \\begin{matrix} 1 &amp;  0  \\\\ d_x &amp; 1 \\end{matrix} \\right)  \\left( \\begin{matrix} 1 &amp;  d_y  \\\\ 0 &amp; 1 \\end{matrix} \\right) \\left( \\begin{matrix} 1 &amp;  d_y  \\\\ d_x &amp; 1 \\end{matrix} \\right)   \\] <p>e.g. </p>"},{"location":"dip/dip5/#combination","title":"Combination","text":"<p>\u56fe\u50cf\u7684\u7ec4\u5408\u53d8\u6362\u662f\u5404\u9879\u7b80\u5355\u51e0\u4f55\u53d8\u6362\u7684\u6df7\u5408\u64cd\u4f5c\u3002</p> \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} a &amp;  b &amp; c \\\\ d &amp; e &amp; f \\\\ g &amp; h &amp; 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] <p>\u53d8\u6362\u77e9\u9635\u662f\u7531\u6784\u6210\u7ec4\u5408\u53d8\u6362\u7684\u5404\u79cd\u7b80\u5355\u53d8\u6362\u7684\u53d8\u6362\u77e9\u9635\u6309\u4ece\u5de6\u81f3\u53f3\u7684\u987a\u5e8f\u9010\u6b21\u76f8\u4e58\u4ee5\u540e\u5f97\u5230\u7684\u7ed3\u679c\u3002 \u53d8\u6362\u77e9\u9635\u76f8\u4e58\u65f6\u7684\u987a\u5e8f\u662f\u4e0d\u53ef\u4ee5\u4efb\u610f\u6539\u53d8\u7684</p>"},{"location":"dip/dip5/#interpolation","title":"Interpolation","text":"<p>\u63d2\u503c\u662f\u51e0\u4f55\u53d8\u6362\u6700\u5e38\u7528\u7684\u5de5\u5177\uff0c\u5229\u7528\u5df2\u77e5\u50cf\u7d20\u503c\uff0c\u91c7\u7528\u4e0d\u540c\u7684\u63d2\u503c\u65b9\u6cd5\uff0c\u53ef\u4ee5\u6a21\u62df\u51fa\u672a\u77e5\u50cf\u7d20\u7684\u50cf\u7d20\u503c\u3002 </p>"},{"location":"dip/dip5/#nearest-neighbor","title":"Nearest neighbor","text":"<p>\u6700\u8fd1\u90bb\u63d2\u503c\uff1a\u8f93\u51fa\u50cf\u7d20\u7684\u7070\u5ea6\u503c\u7b49\u4e8e\u79bb\u5b83\u6240\u6620\u5c04\u5230\u7684\u4f4d\u7f6e\u6700\u8fd1\u7684\u8f93\u5165\u50cf\u7d20\u7684\u7070\u5ea6\u503c\u3002   </p> <p>\u8ba1\u7b97\u8fc7\u7a0b\uff1a \u4e3a\u4e86\u8ba1\u7b97\u51e0\u4f55\u53d8\u6362\u540e\u65b0\u56fe\u50cf\u4e2d\u67d0\u4e00\u70b9P\u2019\u5904\u7684\u50cf\u7d20\u503c\uff0c\u53ef\u4ee5\u9996\u5148\u8ba1\u7b97\u8be5\u51e0\u4f55\u53d8\u6362\u7684\u9006\u53d8\u6362\uff0c\u8ba1\u7b97\u51faP\u2019\u6240\u5bf9\u5e94\u7684\u539f\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6eP\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cP\u7684\u4f4d\u7f6e\u4e0d\u53ef\u80fd\u6b63\u597d\u5904\u5728\u539f\u56fe\u50cf\u7684\u67d0\u4e00\u4e2a\u50cf\u7d20\u4f4d\u7f6e\u4e0a\uff08\u5373P\u70b9\u7684\u5750\u6807\u901a\u5e38\u90fd\u4e0d\u4f1a\u6b63\u597d\u662f\u6574\u6570\uff09\u3002\u5bfb\u627e\u4e0eP\u70b9\u6700\u63a5\u8fd1\u7684\u50cf\u7d20Q\uff0c\u628aQ\u70b9\u7684\u50cf\u7d20\u503c\u4f5c\u4e3a\u65b0\u56fe\u50cf\u4e2dP\u2019\u70b9\u7684\u50cf\u7d20\u503c\u3002   \u5f53\u56fe\u50cf\u4e2d\u5305\u542b\u660e\u663e\u7684\u51e0\u4f55\u7ed3\u6784\u65f6\uff0c\u7ed3\u679c\u5c06\u4e0d\u592a\u5149\u6ed1\u8fde\u7eed\uff0c\u4ece\u800c\u5728\u56fe\u50cf\u4e2d\u4ea7\u751f\u4eba\u4e3a\u7684\u75d5\u8ff9\u3002 </p>"},{"location":"dip/dip5/#linear-interpolation","title":"Linear interpolation","text":"<p>\u5728\u4e00\u7ef4\u60c5\u51b5\u4e0b\uff0c\u5df2\u77e5x1\u548cx2\u5904\u7684\u7070\u5ea6\u503c\u5206\u522b\u4e3ag1\u548cg2\uff0c\u5219x3\u5904\u7684\u7070\u5ea6\u503cg3\u4e3a\uff1a \\(g_3=\\dfrac{g_2-g_1}{x_2-x_1}(x_3-x_1)+g_1\\)</p> <p>\u4f46\u6211\u4eec\u56fe\u50cf\u662f\u4e8c\u7ef4\u7684\uff08\u884c\u5217\uff09\uff0c\u56e0\u6b64\u9700\u8981\u4e8c\u7ef4\u63d2\u503c\u3002  </p> <p>\u5728\u4e8c\u7ef4\u60c5\u51b5\u4e0b\uff0c\u79f0\u4e3a\u53cc\u7ebf\u6027\u63d2\u503c\u3002 \u5df2\u77e5\u56fe\u50cf\u7684\u6b63\u65b9\u5f62\u7f51\u683c\u4e0a\u56db\u4e2a\u70b9A\u3001B\u3001C\u3001D\u7684\u7070\u5ea6\uff0c\u6c42P\u70b9\u7684\u7070\u5ea6\u3002</p> <ul> <li>\u5b9a\u4e49\u53cc\u7ebf\u6027\u65b9\u7a0b \\(g(x,y)=ax+by+cxy+d\\)</li> <li>\u5206\u522b\u5c06A\u3001B\u3001C\u3001D\u56db\u70b9\u7684\u4f4d\u7f6e\u548c\u7070\u5ea6\u4ee3\u5165\u65b9\u7a0b\uff0c\u5f97\u5230\u65b9\u7a0b\u7ec4\u3002</li> <li>\u89e3\u65b9\u7a0b\u7ec4\uff0c\u89e3\u51faa\u3001b\u3001c\u3001d\u56db\u4e2a\u7cfb\u6570\u3002</li> <li>\u5c06P\u70b9\u7684\u4f4d\u7f6e\u4ee3\u5165\u65b9\u7a0b\uff0c\u5f97\u5230P\u70b9\u7684\u7070\u5ea6\u3002</li> </ul> <p>\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97. \u5b9e\u9645\u4e2d\u53ef\u4ee5\u5206\u522b\u5728\u884c\u5217\u505a\u4e24\u6b21\u7ebf\u6027\u63d2\u503c\uff0c\u968f\u540e\u518d\u5728\u524d\u4e24\u6b21\u57fa\u7840\u4e0a\u8fdb\u884c\u4e00\u6b21\u7ebf\u6027\u63d2\u503c\u3002</p>"},{"location":"dip/dip5/#rbf-interpolation","title":"RBF interpolation","text":"<p>\\(G(x)=\\sum_{i=1}^n w_iG(c_i)\\) where \\(w_i=\\dfrac{\\phi(|x-c_i|)}{\\sum_{i=1}^n\\phi(|x-c_i|}\\) </p> <p>\u5176\u4e2d \\(x\\) \u53ef\u4ee5\u662f\u4e00\u4e2a\u6807\u91cf\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\u65e2\u53ef\u4ee5\u662f\u4e00\u7ef4\u63d2\u503c\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e8c\u7ef4\u3001\u591a\u7ef4\u63d2\u503c\uff0c\u53d6\u51b3\u4e8e \\(x\\) \u7684\u7ef4\u5ea6\u3002   </p> <p>\u7528\u9f20\u6807\u62d6\uff0c\u79bb\u9f20\u6807\u8d8a\u8fd1\uff0c\u53d7\u5f71\u54cd\u8d8a\u5c0f  </p> <p>\u5e38\u7528\u7684\u6838\u51fd\u6570\uff1a</p> <ul> <li>Gaussian: \\(\\phi(r)=exp\\{-\\dfrac{e^2}{2\\sigma^2}\\}\\) </li> <li>Multiquadrics: \\(\\phi(r)=\\sqrt{1+\\dfrac{r^2}{\\sigma^2}}\\) </li> <li>Linear: \\(\\phi(r)=r\\) </li> <li>Cubic: \\(\\phi(r)=r^3\\) </li> <li>Thinplate: \\(\\phi(r)=r^2\\ln(r+1)\\)</li> </ul>"},{"location":"dip/dip5/#warp-and-morph","title":"Warp and Morph","text":"<p>Warp: \u53ea\u6539\u53d8\u50cf\u7d20\u7684\u4f4d\u7f6e Morph \u4e0d\u4ec5\u6539\u53d8\u4f4d\u7f6e\uff0c\u8fd8\u8981\u6539\u53d8\u989c\u8272  </p>"},{"location":"dip/dip5/#image-morph","title":"Image Morph","text":"<p>\u8fd9\u91cc\u8ba8\u8bba\u7684 Morph \u53d8\u5f62\u4e0d\u540c\u4e8e\u4e00\u822c\u7684\u51e0\u4f55\u53d8\u6362(Warp) Morph \u53d8\u5f62\u6307\u666f\u7269\u7684\u5f62\u4f53\u53d8\u5316\uff0c\u5b83\u662f\u4f7f\u4e00\u5e45\u56fe\u50cf\u9010\u6b65\u53d8\u5316\u5230\u53e6\u4e00\u5e45\u56fe\u50cf\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u8fd9\u662f\u4e00\u79cd\u8f83\u590d\u6742\u7684\u4e8c\u7ef4\u56fe\u50cf\u5904\u7406\uff0c\u9700\u8981\u5bf9\u5404\u50cf\u7d20\u70b9\u7684\u989c\u8272\u3001\u4f4d\u7f6e\u4f5c\u53d8\u6362\u3002 </p> <p>\u53d8\u5f62\u7684\u8d77\u59cb\u56fe\u50cf\u548c\u7ed3\u675f\u56fe\u50cf\u5206\u522b\u4e3a\u4e24\u5e45\u5173\u952e\u5e27\uff08\u8d77\u59cb\u5e27\u548c\u7ed3\u675f\u5e27\uff09\uff0c\u4ece\u8d77\u59cb\u5f62\u72b6\u53d8\u5316\u5230\u7ed3\u675f\u5f62\u72b6\u7684\u5173\u952e\u5728\u4e8e\u81ea\u52a8\u5730\u751f\u6210\u4e2d\u95f4\u5f62\u72b6\uff0c\u4e5f\u5373\u81ea\u52a8\u751f\u6210\u4e2d\u95f4\u5e27\u3002</p> <p>\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5e45\u56fe\u7684\u8f6c\u6362\u4f5c\u9759\u6001\u53d8\u6362\u3002\u4ece\u4e00\u5e45\u56fea\u9010\u6e10\u53d8\u5316\u6210\u7b2c\u4e8c\u5e45\u56feb   </p> <ul> <li>\u539f\u7406\uff1a\u8ba9\u56fea\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\uff0c\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u50cf\u7d20\u7684\u989c\u8272\u3002</li> <li>\u65b9\u6cd5\uff1a\u6839\u636e\u53d8\u6362\u7684\u5feb\u6162\uff0c\u8bbe\u7f6e\u76f8\u5e94\u7684\u6b65\u957f\uff0c\u5c06\u56fea\u6bcf\u4e00\u70b9\u7684RGB\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u8c61\u7d20\u7684RGB\u3002\u53ef\u4ee5\u9009\u62e9\u7b49\u6bd4\u6216\u7b49\u5dee\u7684\u65b9\u5f0f\uff0c\u6216\u5176\u5b83\u65b9\u5f0f\u8ba9\uff1a\\(r^a\\rightarrow r^b\\)  \u5982\uff1a\\(I_i=I_{begin}+i*\\dfrac{I_{end}-I_{begin}}{n}\\)</li> <li>\u5bf9\u4e8e\u5f69\u8272\u56fe\u50cf\uff0cRGB\u4e09\u8272\u540c\u65f6\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe\u50cf\u3002\u53ef\u4ee5\u5206\u522b\u53d8\u5316\uff0c\u4e5f\u53ef\u8003\u8651RGB\u7684\u76f8\u5bf9\u6bd4\u4f8b\u5173\u7cfb\u540c\u65f6\u53d8\u5316\u3002  </li> </ul> <p>\u5bf9\u4e8e\u7070\u5ea6\u56fe\u50cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7b49\u6bd4\u6216\u7b49\u5dee\u7ea7\u6570\u5b9a\u4e49\u6b65\u957f\uff0c\u4f7f\u989c\u8272\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe\u3002</p> <p>\u5982\u4f55\u9009\u62e9\u5173\u952e\u5e27\uff1a \u9009\u62e9\u4e24\u5e45\u7ed3\u6784\u76f8\u4f3c\u3001\u5927\u5c0f\u76f8\u540c\u7684\u753b\u9762\u4f5c\u4e3a\u8d77\u59cb\u548c\u7ed3\u675f\u5173\u952e\u5e27\uff0c\u8fd9\u6837\u624d\u80fd\u6bd4\u8f83\u5bb9\u6613\u5730\u5b9e\u73b0\u81ea\u7136\u3001\u8fde\u7eed\u7684\u4e2d\u95f4\u53d8\u5f62\u8fc7\u7a0b\u3002\uff08\u5426\u5219\u6548\u679c\u5f88\u5dee\uff09   </p>"},{"location":"dip/dip5/#morph-based-on-segment","title":"Morph based on segment","text":"<p>\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u63a7\u5236\u50cf\u7d20\u7684\u79fb\u52a8\u3002\u5229\u7528 RBF \u7684\u601d\u8def\uff0c\u79fb\u52a8\u7ebf\u6bb5\u3002\u8ddd\u79bb\u63a7\u5236\u70b9\u8d8a\u8fd1\uff0c\u79fb\u52a8\u5e45\u5ea6\u8d8a\u76f8\u4f3c\u3002</p> <p>\u5728\u8d77\u59cb\u548c\u7ed3\u675f\u753b\u9762\u4e0a\u786e\u5b9a\u548c\u52fe\u753b\u51fa\u5404\u90e8\u5206\uff08\u4e3b\u8981\u8f6e\u5ed3\uff09\u7684\u7ed3\u6784\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e5f\u5373\u4ece\u8d77\u59cb\u753b\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\u53d8\u5230\u7ed3\u675f\u753b\u9762\u4e0a\u7684\u53e6\u4e00\u4e2a\u5bf9\u5e94\u70b9\u7684\u4f4d\u7f6e\uff0c\u8fd9\u662f\u53d8\u5f62\u8fd0\u7b97\u6240\u9700\u8981\u7684\u53c2\u6570\u3002\u6839\u636e\u9700\u8981\uff0c\u5bf9\u5e94\u70b9\u7684\u4f4d\u7f6e\u53ef\u4ee5\u4efb\u610f\u79fb\u52a8\u3002\u8c03\u6574\u8d77\u59cb\u5e27\u7684\u5bf9\u5e94\u70b9\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u6a21\u62df\u6444\u50cf\u4e2d\u7684\u955c\u5934\u6e10\u53d8\u6548\u679c\u3002</p> <p>\u5728\u5404\u70b9\u50cf\u7d20\u5750\u6807\u53d8\u5316\u7684\u540c\u65f6\uff0c\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272RGB\u4e5f\u4e00\u8d77\u4ece\u539f\u56fe\u50cf\u6539\u53d8\u4e3a\u76ee\u6807\u56fe\u50cf\u3002</p> <p>\u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u63d2\u503c\u7b56\u7565\u8ba1\u7b97\u50cf\u7d20\u4e2d\u95f4\u503c\uff08\u7a7a\u95f4\uff0c\u989c\u8272\uff09</p>"},{"location":"dip/dip5/#morph-based-on-grid","title":"Morph based on grid","text":"<p>\u89c6\u70b9\u53d8\u6362\u5c31\u662f\u6c42\u5728\u89c6\u70b9\u79fb\u52a8\u540e\u539f\u59cb\u56fe\u50cf\u53d8\u6362\u751f\u6210\u7684\u65b0\u89c6\u56fe\u3002</p> <ul> <li>\u5728\u7528\u76f8\u673a\u62cd\u6444\u7269\u4f53\u65f6\uff0c\u4fdd\u6301\u7269\u4f53\u7684\u4f4d\u7f6e\u4e0d\u52a8\uff0c\u800c\u5c06\u76f8\u673a\u79fb\u79bb\u7269\u4f53\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u89c6\u70b9\u53d8\u6362\uff1b</li> <li>\u5982\u679c\u6211\u4eec\u4fdd\u6301\u76f8\u673a\u56fa\u5b9a\u4f4d\u7f6e\uff0c\u5c06\u7269\u4f53\u79fb\u79bb\u76f8\u673a\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u6a21\u578b\u8f6c\u6362\u3002</li> </ul> <p>\u89c6\u70b9\u53d8\u5f62\u8981\u6c42\u5bf9\u7269\u4f53\u6709\u4e09\u7ef4\u5750\u6807\u77e5\u8bc6\u3002</p>"},{"location":"dip/dip5/#application","title":"Application","text":"<p>Question</p> <p> </p> <p>\u6211\u4eec\u53ef\u4ee5 \\(v_{B'}=v_{B}+v_{A'}-v_A\\), \u4f46\u8fd9\u6837\u5f97\u5230\u7684\u8868\u60c5\u7ec6\u8282\u4e22\u5931\u4e86\u3002  </p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5148\u4ecb\u7ecd\u4e00\u4e2a\u5149\u7167\u6a21\u578b Lambertian model.  </p>"},{"location":"dip/dip5/#lambertian-model","title":"Lambertian model","text":"<p>\u5047\u8bbe\u7a7a\u95f4\u4e2d m \u70b9\u5149\u6e90\uff0c\u66f2\u9762\u4eae\u5ea6\u5982\u4e0b\uff1a \\(I=\\rho\\sum\\limits_{1\\leq i\\leq m} S_iI_in_i\\cdot l_i\\equiv \\rho E(n)\\) where \\(S_i=\\left\\{\\begin{matrix} 0, cannot\\ be\\ seen \\\\ 1, otherwise\\end{matrix}\\right.\\) </p> <p>\u5176\u4e2d \\(l_i\\) \u7b2c i \u4e2a\u5149\u6e90\u7167\u8fc7\u6765\u7684\u89d2\u5ea6\uff0c\\(n\\) \u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u66f2\u9762\u7684\u6cd5\u5411\u91cf\uff0c\u6240\u4ee5 \\(n\\cdot l_i\\) \u76f8\u5f53\u4e8e\u4f59\u5f26\u5173\u7cfb; \\(I_i\\) \u8868\u793a\u7b2c i \u4e2a\u5149\u6e90\u7684\u4eae\u5ea6\uff1b\\(S_i\\) \u8868\u793a\u66f2\u9762\u80fd\u4e0d\u80fd\u88ab\u7b2c i \u4e2a\u70b9\u5149\u6e90\u7167\u5230; \\(\\rho\\) \u8868\u793a\u66f2\u9762\u7684\u6750\u8d28  </p> <p>Expression ratio image: \\(\\dfrac{I'}{I}=\\dfrac{E(n')}{E(n)}\\) (\\(\\rho\\) \u4e00\u6837\uff0c\u56e0\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5bf9\u8c61\u53d8\u6362\u524d\u540e\u7684\u6750\u8d28\u662f\u4e00\u6837\u7684) \u7b80\u79f0 ERI</p> <p>ERI \u662f\u56e0\u4e3a\u66f2\u9762\u53d8\u5f62\u6240\u5bfc\u81f4\u7684\u4eae\u5ea6\u7684\u53d8\u5316\uff1b\u4e0d\u4f9d\u8d56\u4e8e\u6750\u8d28\u7684\u3002</p> <p>\u5047\u8bbe\u5728\u5bf9\u5e94\u7684\u70b9\u90fd\u6709\u76f8\u540c\u7684\u6cd5\u5411\u91cf\uff0c\u6750\u8d28\u4e0d\u540c\uff0c\u76f8\u540c\u7684\u5f62\u53d8</p> Before deform After deform Surface 1 \\(I_1=\\rho_1E(n)\\) \\(I_1^{'}=\\rho_1E(n')\\) Surface 2 \\(I_2=\\rho_2E(n)\\) \\(I_2^{'}=\\rho_2E(n')\\) <p>\u4e8e\u662f\u521a\u521a\u7684\u95ee\u9898\u8f6c\u53d8\u4e3a\uff1a\uff08\u5047\u8bbe\u4eba\u8138\u6709\u8fd1\u4f3c\u76f8\u540c\u7684\u6cd5\u5411\u91cf\uff09</p> Neutral Expression Person A \\(I_a=\\rho_aE(n)\\) \\(I_a^{'}=\\rho_aE(n')\\) Person B \\(I_b=\\rho_bE(n)\\) \\(I_b^{'}=?\\) <p>\u7531\u521a\u521a\u7684\u63a8\u5bfc\u53ef\u5f97 \\(I_b^{'}=\\dfrac{I_a^{'}}{I_a}I_b\\) </p> <p>Algorithm: </p> <ul> <li>mark feature points </li> <li>\u5bf9\u6bcf\u4e00\u4e2a\u7279\u5f81\u70b9 \\(v_b\\) in B, warp it: \\(v_{b'}=v_b+v_{a'}-v_a\\), \u4ee4 \\(B_g\\) \u662f B \u53d8\u5f62\u540e\u7684\u56fe\u50cf  </li> <li>\u7528 \\(B_g\\) \u5bf9\u9f50 A A' \u76f4\u5230\u6bcf\u4e2a\u50cf\u7d20\u90fd\u80fd\u627e\u5230\u53e6\u5916\u4e24\u79cd\u56fe\u50cf\u4e0a\u7684\u5bf9\u5e94\u70b9</li> <li>\u8ba1\u7b97 ratio image \\(\\dfrac{A'}{A}\\)</li> <li>\\(B' = \\dfrac{A'}{A} \\cdot B_g\\)</li> </ul> <p>\u5982\u4f55\u627e\u50cf\u7d20\u7684 coreespondence</p> <p>\u901a\u8fc7\u56fe\u50cf\u5bf9\u9f50\uff0c\u624b\u5de5\u6807\u8bb0\u7279\u5f81\u70b9\u540e\u8fdb\u884c\u53c2\u6570\u5316\u3002</p>"},{"location":"dip/dip6/","title":"Convolution and Filtering","text":"<p>Abstract</p> <ul> <li>Continuous 1D convolution  </li> <li>Properties of convolution  </li> <li>Discrete 1D convolution  </li> <li>Spatial domain filtering  </li> </ul>"},{"location":"dip/dip6/#1d-convolution","title":"1D Convolution","text":""},{"location":"dip/dip6/#definition","title":"Definition","text":"<p>\u4e00\u7ef4\u5377\u79ef</p> <p>\u4e24\u4e2a\u4e00\u7ef4\u8fde\u7eed\u51fd\u6570 \\(f(x)\\) \u548c \\(h(x)\\) \u7684\u5377\u79ef \\(g(x)\\) \u4e3a \\(g(x)=f(x)*h(x)=\\int_{-\\infty}^{\\infty}f(t)h(x-t)dt\\) \u5b83\u8868\u793a\u4e24\u4e2a\u51fd\u6570\u7684\u5377\u79ef\u53ef\u4ee5\u8f6c\u5316\u6210\u4e58\u79ef\u7684\u79ef\u5206\u6765\u8ba1\u7b97\u3002\u901a\u5e38\u5c06 \\(f(x)\\) \u79f0\u4e3a\u8f93\u5165\u51fd\u6570\uff0c\u5c06 \\(h(x)\\) \u79f0\u4e3a\u5377\u79ef\u51fd\u6570\u3002  </p>"},{"location":"dip/dip6/#computing-process","title":"Computing process","text":"<p>\u5df2\u77e5\u4e24\u4e2a\u51fd\u6570\uff0c\u8981\u6c42\u8ba1\u7b97\u5b83\u4eec\u7684\u5377\u79ef\u5728\u4efb\u610f\u70b9x\u5904\u7684\u503c\u3002</p> <ul> <li>\u5c06\u5377\u79ef\u51fd\u6570 \\(h(t)\\) \u53cd\u6298  </li> </ul> <ul> <li>\u5c06\u53cd\u6298\u540e\u7684\u5377\u79ef\u51fd\u6570\u5411\u53f3\u79fb\u52a8\u8ddd\u79bb \\(x\\)</li> </ul> <ul> <li>\u8ba1\u7b97 f \u548c h \u5728\u4efb\u610f t \u7684\u4e58\u79ef\uff0c\u5e76\u79ef\u5206</li> </ul> <p>\u5bf9\u6bcf\u4e00\u4e2a \\(x\\) \u503c\u91cd\u590d\u4e0a\u8ff0\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5c31\u5f97\u5230\u4e86\u8f93\u51fa\u66f2\u7ebf \\(g(x)\\)  \u5f53 \\(x\\) \u53d8\u5316\u65f6\uff0c\u53cd\u6298\u7684\u51fd\u6570\u88ab\u5e73\u79fb\u901a\u8fc7\u9759\u6b62\u4e0d\u52a8\u7684\u8f93\u5165\u51fd\u6570, \\(g(x)\\) \u503c\u53d6\u51b3\u4e8e\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u91cd\u53e0\u90e8\u5206\u7684\u7d2f\u79ef\u3002 </p>"},{"location":"dip/dip6/#property","title":"Property","text":"<ul> <li>Exchangeable: \\(f(x)*g(x)=g(x)*f(x)\\) </li> <li>Distributive: \\(f*(g+h)=f*g+f*h\\) </li> <li>Associative: \\(f*(g*h)=(f*g)*h\\) </li> </ul>"},{"location":"dip/dip6/#discrete-1d-convolution","title":"Discrete 1D convolution","text":"<p>\u5bf9\u4e8e\u79bb\u6563\u5e8f\u5217\uff0c\u5176\u5377\u79ef\u53ef\u7528\u4e0e\u8fde\u7eed\u51fd\u6570\u76f8\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6c42\u5f97\u3002\u6b64\u65f6\u81ea\u53d8\u91cf\u53d8\u4e3a\u4e0b\u6807\uff0c\u9762\u79ef\u5219\u7531\u6c42\u548c\u4ee3\u66ff\u3002  \u5bf9\u4e8e\u4e24\u4e2a\u957f\u5ea6\u5747\u4e3a M \u7684\u5e8f\u5217 \\(f(x)\\) \u548c \\(h(x)\\)\uff0c\u5176\u5377\u79ef\u4e3a: \\(h(x)=f(x)*h(x)=\\dfrac{1}{M}=\\sum\\limits_{t=0}^{M-1}f(t)h(x-t)\\)</p> <p>\u6709\u6548\u8303\u56f4\uff1a\u8986\u76d6\u4e86\u6240\u6709 \\(h(t)\\) \u7684\u70b9\u3002</p> <p>e.g. </p> <p>\u5377\u79ef\u5b9e\u8d28\u4e0a\u662f\u5bf9\u56fe\u50cf\u50cf\u7d20\u7684\u52a0\u6743\u6c42\u548c </p>"},{"location":"dip/dip6/#spatial-filtering","title":"Spatial filtering","text":""},{"location":"dip/dip6/#concept","title":"Concept","text":"<p>\u6ee4\u6ce2\u5668\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(M\\times N\\) \u7684\u7a97\u53e3\uff0c\u7a97\u53e3\u4e2d\u7684\u5143\u7d20\u4e0e\u539f\u56fe\u50cf\u7684\u5904\u4e8e\u7a97\u53e3\u5185\u7684\u50cf\u7d20\u8fdb\u884c\u67d0\u79cd\u8fd0\u7b97\uff0c\u7ed3\u679c\u4f5c\u4e3a\u65b0\u56fe\u50cf\u7684\u4e00\u4e2a\u50cf\u7d20\u3002\u5f53\u7a97\u53e3\u6ed1\u8fc7\u539f\u56fe\u50cf\u5e76\u5b8c\u6210\u4e0a\u8ff0\u8fd0\u7b97\u4e4b\u540e\uff0c\u5c31\u80fd\u591f\u5f97\u5230\u4e00\u5e45\u65b0\u56fe\u50cf\u3002\uff08\u672c\u8d28\u5c31\u662f\u521a\u521a\u7684\u5377\u79ef\uff09</p> <p>\u6ee4\u6ce2\u5668\u7684\u522b\u540d\uff1a\u6ee4\u6ce2\u5668\u3001\u63a9\u6a21\u3001\u6838\u3001\u6a21\u677f\uff0c\u7a97\u53e3</p> <p>\u6ee4\u6ce2\u5668\u5b50\u56fe\u50cf\u4e2d\u7684\u503c\u662f\u7cfb\u6570\u503c\uff0c\u800c\u4e0d\u662f\u50cf\u7d20\u503c\uff0c\u5b83\u4ee3\u8868\u4e86\u5f71\u54cd\u65b0\u50cf\u7d20\u4ea7\u751f\u7684\u6743\u91cd\u3002 </p> <p>\u5377\u79ef\u548c\u5f62\u6001\u5b66\u4e2d\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff1a\u8fb9\u754c\u5982\u4f55\u5904\u7406\uff0c\u53ef\u4ee5\u6269\u5c55\u884c\u5217\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06\u4e2d\u5fc3\u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u3002</p>"},{"location":"dip/dip6/#procedure","title":"Procedure","text":"<p>\u5728\u5f85\u5904\u7406\u56fe\u50cf\u4e2d\u9010\u70b9\u79fb\u52a8\u63a9\u6a21\uff0c\u5728\u6bcf\u4e00\u70b9 \\((x,y)\\) \u5904\uff0c\u6ee4\u6ce2\u5668\u5728\u8be5\u70b9\u7684\u54cd\u5e94\u901a\u8fc7\u5b9e\u73b0\u5b9a\u4e49\u7684\u5173\u7cfb\u6765\u8ba1\u7b97\u3002\u5bf9\u4e8e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\uff0c\u5176\u54cd\u5e94\u7531\u6ee4\u6ce2\u5668\u7cfb\u6570\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u626b\u8fc7\u533a\u57df\u7684\u5bf9\u5e94\u50cf\u7d20\u503c\u7684\u4e58\u79ef\u4e4b\u548c\u7ed9\u51fa\u3002 </p>"},{"location":"dip/dip6/#principle-of-filteringresponse","title":"Principle of filtering\u2014\u2014Response","text":"<p>\u54cd\u5e94\u503c: \\(R=w(-1,-1)f(x-1,y-1)+w(-1,0)f(x-1, y)+\\ldots +w(0,0)f(x,y)+\\ldots+w(1,0)f(x+1,y)+w(1,1)f(x+1,y)\\) \u8fd9\u5b9e\u8d28\u4e0a\u662f\u4e00\u79cd\u5377\u79ef\u64cd\u4f5c\uff0c\u5377\u79ef\u8868\u793a\u4e3a: \\(h(x)=f(x)*h(x)=\\dfrac{1}{M}=\\sum\\limits_{t=0}^{M-1}f(t)h(x-t)\\) </p> <p>\u901a\u5e38\uff0c\u63a9\u6a21\u7684\u957f\u5bbd\u90fd\u4e3a\u5947\u6570\u3002\u5047\u8bbe\u5206\u522b\u4e3a \\(2a+1\\) \u548c \\(2b+1\\). \u5f53\u7a97\u53e3\u4e2d\u5fc3\u5904\u4e8e\u50cf\u7d20 \\((x,y)\\) \u5904\u65f6\uff0c\u65b0\u7684\u50cf\u7d20\u503c\u4e3a\uff1a  \u5bf9\u56fe\u50cf \\(f\\) \u4e2d\u6240\u6709\u50cf\u7d20\u90fd\u4e0e\u63a9\u6a21\u8fdb\u884c\u8fd0\u7b97\u4e4b\u540e\uff0c\u6700\u7ec8\u4ea7\u751f\u4e00\u5e45\u65b0\u56fe\u50cf \\(g\\). \\(g(x,y)=\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^b w(s,t)f(x+s,y+t)\\) \u5373 \\(R=w_1z_1+w_2z_2+\\cdots+w_{mn}z_{mn}=\\sum\\limits_{i=1}^m w_iz_i\\)</p> <p>\u56fe\u50cf\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u4f20\u8f93\u4fe1\u9053\u3001\u91c7\u6837\u7cfb\u7edf\u8d28\u91cf\u8f83\u5dee\uff0c\u6216\u53d7\u5404\u79cd\u5e72\u6270\u7684\u5f71\u54cd\uff0c\u800c\u9020\u6210\u56fe\u50cf\u6bdb\u7cd9\uff0c\u6b64\u65f6\uff0c\u5c31\u9700\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\u3002\u5e73\u6ed1\u53ef\u4ee5\u6291\u5236\u9ad8\u9891\u6210\u5206\uff0c\u4f46\u4e5f\u4f7f\u56fe\u50cf\u53d8\u5f97\u6a21\u7cca\u3002 </p>"},{"location":"dip/dip6/#spatial-filtering-for-smoothing","title":"Spatial filtering for smoothing","text":"<p>\u5e73\u6ed1\u7a7a\u95f4\u6ee4\u6ce2\u5668\uff08\u4e5f\u53eb\u4f4e\u901a\u6ee4\u6ce2\uff0c\u56e0\u4e3a\u5e73\u6ed1\u7684\u90e8\u5206\u4e00\u822c\u662f\u4f4e\u9891\u7684\uff09\u7528\u4e8e\u6a21\u7cca\u5904\u7406\u548c\u51cf\u5c11\u566a\u58f0\u3002\u6a21\u7cca\u5904\u7406\u7ecf\u5e38\u7528\u4e8e\u9884\u5904\u7406\uff0c\u4f8b\u5982\uff0c\u5728\u63d0\u53d6\u5927\u7684\u76ee\u6807\u4e4b\u524d\u53bb\u9664\u56fe\u50cf\u4e2d\u4e00\u4e9b\u7410\u788e\u7684\u7ec6\u8282\uff0c\u6865\u63a5\u76f4\u7ebf\u6216\u66f2\u7ebf\u7684\u7f1d\u9699\u3002 \u53ef\u4ee5\u53bb\u6389\u566a\u58f0\uff0c\u4f46\u4f1a\u4f7f\u56fe\u6a21\u7cca\uff0c\u4e00\u822c\u7528\u4e8e\u9884\u5904\u7406\u3002</p>"},{"location":"dip/dip6/#linear-smoothing-filter","title":"Linear smoothing filter","text":"<p>\u5e73\u6ed1\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5668\u7684\u8f93\u51fa\u662f\u5305\u542b\u5728\u6ee4\u6ce2\u63a9\u6a21\u90bb\u57df\u5185\u50cf\u7d20\u7684\u7b80\u5355\u5e73\u5747\u503c\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u6ee4\u6ce2\u5668\u4e5f\u79f0\u4e3a\u5747\u503c\u6ee4\u6ce2\u5668\u3002</p> <p>\u5747\u503c\u6ee4\u6ce2\u5668\u7684\u4e3b\u8981\u5e94\u7528\u662f\u53bb\u9664\u56fe\u50cf\u4e2d\u7684\u4e0d\u76f8\u5e72\u7ec6\u8282\uff0c\u5373\u90a3\u4e9b\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u5c3a\u5bf8\u76f8\u6bd4\u66f4\u5c0f\u7684\u50cf\u7d20\u533a\u57df\u3002  </p> <ul> <li>\u7b80\u5355\u5e73\u5747\uff0c\u8868\u793a\u7a97\u53e3\u4e2d\u6bcf\u4e00\u4e2a\u50cf\u7d20\u5bf9\u54cd\u5e94\u7684\u8d21\u732e\u662f\u4e00\u6837\u7684  </li> <li> <p>\u52a0\u6743\u5e73\u5747\uff0c\u8868\u793a\u7a97\u53e3\u4e2d\u7684\u50cf\u7d20\u5bf9\u76f8\u5e94\u7684\u8d21\u732e\u6709\u5927\u5c0f\u4e4b\u5206\u3002 \u4e24\u4e2a3\u00d73\u5e73\u6ed1\uff08\u5747\u503c\uff09\u6ee4\u6ce2\u5668\u63a9\u6a21\uff0c\u6bcf\u4e2a\u63a9\u6a21\u524d\u8fb9\u7684\u4e58\u6570\u7b49\u4e8e\u5b83\u7684\u7cfb\u6570\u503c\u7684\u548c\uff0c\u4ee5\u8ba1\u7b97\u5e73\u5747\u503c  </p> Example <p> </p> <p>\u8fd9\u6837\u4e2d\u95f4\u50cf\u7d20\u80fd\u66f4\u591a\u5730\u88ab\u4fdd\u7559\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u9ad8\u65af\u51fd\u6570\u3002</p> </li> </ul> <p>\\(g(x,y)=\\dfrac{\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^bw(s,t)f(x+s,y+t)}{\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^b w(s,t)}\\) \u5176\u4e2d\uff0c\u6ee4\u6ce2\u5668\u5927\u5c0f\u4e3a \\((2a+1) \\times (2b+1)\\)\uff0c\\(w\\) \u4e3a\u6ee4\u6ce2\u5668\uff0c\\(f\\) \u4e3a\u8f93\u5165\u56fe\u50cf\uff0c\\(g\\) \u4e3a\u8f93\u51fa\u56fe\u50cf\u3002</p> <p>\u6ee4\u6ce2\u63a9\u6a21\u7684\u5927\u5c0f\u4e0e\u56fe\u50cf\u7684\u5e73\u6ed1\u6548\u679c\u6709\u76f4\u63a5\u7684\u5173\u7cfb\u3002\u5f53\u63a9\u6a21\u6bd4\u8f83\u5c0f\u65f6\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u5728\u6574\u5e45\u56fe\u50cf\u4e2d\u6709\u8f7b\u5fae\u7684\u6a21\u7cca\uff0c\u5f53\u63a9\u6a21\u5927\u5c0f\u589e\u52a0\uff0c\u6a21\u7cca\u7a0b\u5ea6\u4e5f\u968f\u4e4b\u589e\u52a0\u3002 \u5377\u79ef\u6838\u8d8a\u5927\uff0c\u56fe\u8d8a\u6a21\u7cca\uff0c\u4fdd\u7559\u7684\u7ec6\u8282\u8d8a\u5c11\uff08\u7c7b\u4f3c\u7167\u76f8\u673a\u7684\u5149\u5708\uff09  </p> <p>\u4e3a\u4e86\u5bf9\u611f\u5174\u8da3\u7269\u4f53\u5f97\u5230\u4e00\u4e2a\u7c97\u7565\u7684\u63cf\u8ff0\u800c\u6a21\u7cca\u4e00\u5e45\u56fe\u50cf\uff0c\u8fd9\u6837\uff0c\u90a3\u4e9b\u8f83\u5c0f\u7269\u4f53\u7684\u5f3a\u5ea6\u4e0e\u80cc\u666f\u6df7\u5408\u5728\u4e00\u8d77\u4e86\uff0c\u8f83\u5927\u7269\u4f53\u53d8\u5f97\u50cf\u201c\u6591\u70b9\u201d\u800c\u6613\u4e8e\u68c0\u6d4b\u3002\u63a9\u6a21\u7684\u5927\u5c0f\u7531\u90a3\u4e9b\u5373\u5c06\u878d\u5165\u80cc\u666f\u4e2d\u53bb\u7684\u7269\u4ef6\u5c3a\u5bf8\u6765\u51b3\u5b9a\u3002 </p>"},{"location":"dip/dip6/#statistical-sorting-filter","title":"Statistical sorting filter","text":"<p>\u7edf\u8ba1\u6ee4\u6ce2\u5668\u662f\u4e00\u79cd\u975e\u7ebf\u6027\u7684\u7a7a\u95f4\u6ee4\u6ce2\u5668\uff0c\u5b83\u7684\u54cd\u5e94\u662f\u57fa\u4e8e\u7a97\u53e3\u5185\u56fe\u50cf\u533a\u57df\u4e2d\u50cf\u7d20\u503c\u7684\u6392\u5e8f\uff0c\u7531\u7edf\u8ba1\u6392\u5e8f\u7ed3\u679c\u51b3\u5b9a\u7684\u503c\u4ee3\u66ff\u4e2d\u5fc3\u50cf\u7d20\u7684\u503c\u3002(\u6bcf\u6b21\u90fd\u8981\u6392\u5e8f\uff0c\u56e0\u6b64\u8ba1\u7b97\u901f\u5ea6\u6bd4\u7ebf\u6027\u6ee4\u6ce2\u6162) \u7edf\u8ba1\u6ee4\u6ce2\u5668\u4e2d\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u4e2d\u503c\u6ee4\u6ce2\u5668\u3002</p> <ul> <li>\u7528\u50cf\u7d20\u90bb\u57df\u5185\u7070\u5ea6\u7684\u4e2d\u503c\u4ee3\u66ff\u8be5\u50cf\u7d20\u7684\u503c\u3002</li> <li>\u63d0\u4f9b\u4e86\u4f18\u79c0\u7684\u53bb\u566a\u80fd\u529b\uff0c\u6bd4\u5c0f\u5c3a\u5bf8\u7684\u7ebf\u6027\u5e73\u6ed1\u6ee4\u6ce2\u5668\u7684\u6a21\u7cca\u7a0b\u5ea6\u660e\u663e\u8981\u4f4e\u3002</li> <li>\u5bf9\u5904\u7406\u8109\u51b2\u566a\u58f0\uff08\u4e5f\u79f0\u4e3a\u6912\u76d0\u566a\u58f0\uff09\u975e\u5e38\u6709\u6548\uff0c\u56e0\u4e3a\u8fd9\u79cd\u566a\u58f0\u662f\u4ee5\u9ed1\u767d\u70b9\u53e0\u52a0\u5728\u56fe\u50cf\u4e0a\u7684\u3002 </li> </ul> <p>\u4e3a\u4e86\u5bf9\u4e00\u5e45\u56fe\u50cf\u4e0a\u7684\u67d0\u4e2a\u70b9\u4f5c\u4e2d\u503c\u6ee4\u6ce2\u5904\u7406\u3002\u5fc5\u987b\u5148\u5c06\u63a9\u6a21\u5185\u6b32\u6c42\u7684\u50cf\u7d20\u53ca\u5176\u90bb\u57df\u7684\u50cf\u7d20\u503c\u6392\u5e8f\uff0c\u786e\u5b9a\u51fa\u4e2d\u503c\uff0c\u5e76\u5c06\u4e2d\u503c\u8d4b\u4e88\u8be5\u50cf\u7d20\u70b9\u3002 </p> <p>\u5e38\u7528 \\(n\\times n\\) \u7684\u4e2d\u503c\u6ee4\u6ce2\u5668\u53bb\u9664\u90a3\u4e9b\u76f8\u5bf9\u4e8e\u5176\u90bb\u57df\u50cf\u7d20\u66f4\u4eae\u6216\u66f4\u6697\uff0c\u5e76\u4e14\u5176\u533a\u57df\u5c0f\u4e8e \\(n^2/2\\)\uff08\u6ee4\u6ce2\u5668\u533a\u57df\u7684\u4e00\u534a\uff09\u7684\u5b64\u7acb\u50cf\u7d20\u96c6\u3002 </p> <p>\u8fd9\u4e2a\u65b9\u6cd5\u6709\u5229\u4e8e\u7a81\u51fa\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u6216\u8005\u589e\u5f3a\u88ab\u6a21\u7cca\u4e86\u7684\u7ec6\u8282\u3002 </p>"},{"location":"dip/dip6/#sharpening-spatial-filter","title":"Sharpening spatial filter","text":"<p>\u5fae\u5206\u7b97\u5b50\u662f\u5b9e\u73b0\u9510\u5316\u7684\u5de5\u5177\uff0c\u5176\u54cd\u5e94\u7a0b\u5ea6\u4e0e\u56fe\u50cf\u5728\u8be5\u70b9\u5904\u7684\u7a81\u53d8\u7a0b\u5ea6\u6709\u5173\u3002\u5fae\u5206\u7b97\u5b50\u589e\u5f3a\u4e86\u8fb9\u7f18\u548c\u5176\u4ed6\u7a81\u53d8\uff08\u5982\u566a\u58f0\uff09\u5e76\u524a\u5f31\u4e86\u7070\u5ea6\u53d8\u5316\u7f13\u6162\u7684\u533a\u57df\u3002 </p> <ul> <li>\u57fa\u4e8e\u4e8c\u9636\u5fae\u5206\u7684\u56fe\u50cf\u589e\u5f3a\u2014\u2014\u62c9\u666e\u62c9\u65af\u7b97\u5b50 </li> <li>\u57fa\u4e8e\u4e00\u9636\u5fae\u5206\u7684\u56fe\u50cf\u589e\u5f3a\u2014\u2014\u68af\u5ea6\u6cd5 </li> </ul> <p>\u5bf9\u4e8e\u4e00\u4e2a\u6574\u6570\u503c\u51fd\u6570 \\(f(x)\\) \u6765\u8bf4\uff0c\u6211\u4eec\u4f7f\u7528\u5dee\u5206\u6765\u8868\u793a\u5fae\u5206\u7b97\u5b50\uff1a</p> \\[\\dfrac{\\partial f}{\\partial x}=f(x+1)-f(x)\\] <p>\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e8c\u9636\u5fae\u5206\u5199\u6210\u8fd9\u6837\uff1a</p> \\[\\dfrac{\\partial^2 f}{\\partial x^2}=f(x+1)+f(x-1)-2f(x)\\]"},{"location":"dip/dip6/#gradient-based-operator","title":"gradient based operator","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570 \\(f(x,y)\\) \u6765\u8bf4\uff0c\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u7684\u5411\u91cf\uff1a</p> \\[ \\nabla f=\\left[\\dfrac{G_x}{G_y}\\right]=\\left[\\dfrac{\\dfrac{\\partial f}{\\partial x}}{\\dfrac{\\partial f}{\\partial y}}\\right] \\] <p>\u5b83\u7684\u5e45\u503c(Magnitude)\u88ab\u8868\u793a\u4e3a\uff1a</p> \\[ \\nabla f = (G_x^2+G_y^2)^{\\frac{1}{2}}=\\left[(\\dfrac{\\partial f}{\\partial x})^2 + (\\dfrac{\\partial f}{\\partial y})^2\\right]^{\\frac{1}{2}} \\] <p>\u5f53\u5bf9\u6574\u5e45\u56fe\u50cf\u8ba1\u7b97\u68af\u5ea6\u65f6\uff0c\u8fd0\u7b97\u91cf\u4f1a\u5f88\u5927\uff0c\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u5e38\u7528\u7edd\u5bf9\u503c\u4ee3\u66ff\u5e73\u65b9\u4e0e\u5e73\u65b9\u6839\u8fd0\u7b97\u8fd1\u4f3c\u6c42\u68af\u5ea6\u7684\u6a21\u503c</p> \\[\\nabla f\\approx |G_x|+|G_y|\\] <p>\u53e6\u4e00\u79cd\u8ba1\u7b97\u65b9\u6cd5: Robert \u4ea4\u53c9\u68af\u5ea6\u7b97\u5b50</p>"},{"location":"dip/dip6/#laplacian-operator","title":"Laplacian operator","text":"<p>\u5bf9\u51fd\u6570 \\(f(x, y)\\)\uff0c\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5b9a\u4e49\u5982\u4e0b(\u548c\u68af\u5ea6\u4e0d\u540c\uff0c\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u662f\u4e00\u4e2a\u6807\u91cf)</p> \\[ \\nabla^2 f=\\dfrac{\\partial^2 f}{\\partial x^2}+\\dfrac{\\partial^2 f}{\\partial y^2} \\] <ul> <li> <p>\u4e24\u4e2a\u53d8\u91cf\u7684\u79bb\u6563\u62c9\u666e\u62c9\u65af\u51fd\u6570\u662f:  </p> \\[ \\nabla^2 f(x,y)=f(x+1,y)+f(x-1,y)+f(x,y+1)+f(x,y-1)-4f(x,y) \\] <p> </p> <p>\u76f8\u5f53\u4e8e\u7528\u8fd9\u4e2a\u5377\u79ef\u6838\u5bf9\u56fe\u50cf\u505a\u5377\u79ef\uff08\u8fd9\u4e2a\u5377\u79ef\u6838\u662f\u5404\u5411\u540c\u6027\u7684\uff0crotation-invariant\uff09</p> </li> <li> <p>\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5143\u7d20\u4e5f\u53ef\u4ee5\u8003\u8651\u8fdb\u6765\u8bbe\u8ba1\u63a9\u819c\uff1a  </p> \\[ \\begin{align*} \\nabla^2 f(x,y) &amp; =f(x-1,y-1)+f(x,y-1)+f(x+1,y-1)+f(x-1,y) f(x+1,y)+f(x-1,y+1)+f(x,y+1)+f(x+1,y+1)-8f(x,y) \\\\ &amp; = \\sum\\limits_{i=-1}^1\\sum\\limits_{j=-1}^1 f(x+i,y+j)-9f(x,y) \\end{align*} \\] <p> </p> </li> <li> <p>\u53cd\u8fc7\u6765  </p> <p> </p> <p>\u5f53\u62c9\u666e\u62c9\u65af\u6ee4\u6ce2\u540e\u7684\u56fe\u50cf\u4e0e\u5176\u5b83\u56fe\u50cf\u5408\u5e76\u65f6\uff08\u76f8\u52a0\u6216\u76f8\u51cf\uff09\uff0c\u5219\u5fc5\u987b\u8003\u8651\u7b26\u53f7\u4e0a\u7684\u5dee\u522b\u3002 </p> </li> </ul> <p>Application  \u5c06\u539f\u59cb\u56fe\u50cf\u548c\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u53e0\u52a0\u5728\u4e00\u8d77\u7684\u7b80\u5355\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u62c9\u666e\u62c9\u65af\u9510\u5316\u5904\u7406\u7684\u6548\u679c\uff0c\u540c\u65f6\u53c8\u80fd\u590d\u539f\u80cc\u666f\u4fe1\u606f\u3002 </p> \\[ g(x,y)=\\left\\{\\begin{matrix}f(x,y)-\\nabla^2f(x,y), If\\ the\\ center\\ of\\ the\\ mask\\ is\\ negative \\\\     f(x,y)+\\nabla^2f(x,y), If\\ the\\ center\\ of\\ the\\ mask\\ is\\ positive \\end{matrix} \\right. \\]  Laplacian Example"},{"location":"dip/dip6/#bilateral-filtering","title":"Bilateral Filtering","text":"<p>\u4fdd\u8fb9\u6ee4\u6ce2(edge-preserving)\u7684\u4e00\u79cd</p>  Bilateral filtering Example  <p>\u76ee\u6807\uff1a\u56fe\u50cf\u7684\u5e73\u6ed1\uff0c\u4f46\u8981\u628a large-scale \u7684\u7ed3\u6784\u4fdd\u7559, small-scale \u7684\u7eb9\u8def\u62b9\u6389\u3002</p> <ul> <li>space domain S, \u8868\u793a\u50cf\u7d20\u53ef\u80fd\u7684\u4f4d\u7f6e(\u9ad8\u65af\u6ee4\u6ce2\u4e3b\u8981\u8003\u8651\u7684)  </li> <li>intensity domain R, \u50cf\u7d20\u53ef\u80fd\u7684\u7070\u5ea6\u503c  </li> </ul> <p>\u60f3\u6cd5:  </p> <ul> <li>\u6bcf\u4e2a\u6837\u672c\u90fd\u88ab\u5468\u56f4\u7684\u52a0\u6743\u5e73\u5747\u66ff\u4ee3</li> <li>\u6743\u91cd\u8981\u540c\u65f6\u53cd\u6620\u8ddd\u79bb\u4e2d\u5fc3\u50cf\u7d20\u7684\u8fdc\u8fd1\uff0c\u4ee5\u53ca\u50cf\u7d20\u503c\u548c\u4e2d\u5fc3\u50cf\u7d20\u503c\u7684\u76f8\u4f3c\u5ea6</li> </ul> Review of Gaussian Blur \\[ GB[I]_p=\\sum\\limits_{q\\in S}G_\\sigma (||p-q||)I_q \\] <p>\u5f53 G \u6ee1\u8db3\u9ad8\u65af\u5206\u5e03\u65f6\uff1a  </p> <p>\u8fd9\u91cc\u7684 \\(\\sigma\\) \u662f\u6211\u4eec\u9009\u53d6\u7a97\u53e3\u7684\u5927\u5c0f\u3002\u5982\u4f55\u8bbe\u7f6e \\(\\sigma\\)? \u6839\u636e\u7ecf\u9a8c\uff0c\u901a\u5e38\u7684\u7b56\u7565\u662f\u662f\u8bbe\u7f6e\u4e3a\u56fe\u50cf\u5927\u5c0f\u7684\u4e00\u4e2a\u6bd4\u4f8b\uff0c\u5982 2%. \u53ef\u4ee5\u8d77\u5230\u5e73\u6ed1\u6548\u679c\uff0c\u4f46\u4f1a\u4f7f\u56fe\u50cf\u6a21\u7cca\uff0c\u56e0\u4e3a\u53ea\u8003\u8651\u4e86\u8ddd\u79bb\u56e0\u7d20\u3002</p> \\[ BF[I]_p=\\dfrac{1}{W_p}\\sum\\limits_{q\\in S}G_{\\sigma_s} (||p-q||)G_{\\sigma_r} (|I_p-I_q|)I_q \\] <ul> <li>\\(\\dfrac{1}{W_p}\\) \u5f52\u4e00\u5316\u56e0\u5b50</li> <li>\\(G_{\\sigma_s} (||p-q||)\\) \u7a7a\u95f4(spatial)\u7684\u6743\u91cd\uff0c\u548c\u9ad8\u65af\u6ee4\u6ce2\u4e2d\u76f8\u540c(\\(\\sigma_s\\) \u8868\u793a\u6838\u7684\u7a7a\u95f4\u8303\u56f4)</li> <li>\\(G_{\\sigma_r} (|I_p-I_q|)\\) \u7070\u5ea6(range)\u7684\u6743\u91cd(\u6ce8\u610f\u8fd9\u91cc\u53ea\u662f\u4e00\u8303\u5f0f\u800c\u975e\u4e8c\u8303\u5f0f\uff0c\u56e0\u4e3a\u7070\u5ea6\u53ea\u662f\u6807\u91cf)(\\(\\sigma_r\\) \u8868\u793a\u7070\u5ea6\u7684\u8303\u56f4)</li> </ul>  \u8303\u56f4\u53d8\u5316\u5bf9\u56fe\u50cf\u7684\u5f71\u54cd  <p>\u5982\u4f55\u8bbe\u7f6e\u53c2\u6570: intensity proportional to edge amplitude(\u5bf9\u6bcf\u4e00\u4e2a\u5c0f\u7a97\u53e3\u90fd\u9700\u8981\u91cd\u65b0\u8ba1\u7b97 \\(\\sigma_r\\))  </p> <p>\u53ef\u4ee5\u53cd\u590d\u5728\u4e00\u5f20\u56fe\u50cf\u4e0a\u505a\u53cc\u8fb9\u6ee4\u6ce2\uff0c\\(I_{(n+1)}=BF[I_{(n)}]\\)</p> <p>\u82e5\u5728\u5f69\u8272\u56fe\u4e0a\u505a\u53cc\u8fb9\u6ee4\u6ce2\uff0c\u53ea\u9700\u8981\u5c06\u5f0f\u5b50\u6539\u4e3a  </p> \\[ BF[I]_p=\\dfrac{1}{W_p}\\sum\\limits_{q\\in S}G_{\\sigma_s} (||p-q||)G_{\\sigma_r} (|||C_p-C_q|||)I_q \\] <p>\u5176\u4e2d \\(|||C_p-C_q|||\\) \u662f\u4e09\u7ef4\u5411\u91cf(RGB/Lab) \u7684\u6b27\u6c0f\u8ddd\u79bb</p>"},{"location":"dip/dip6/#denoising","title":"Denoising","text":"<ul> <li>\u8f83\u5c0f\u7684\u7a7a\u95f4 \\(\\sigma_s\\)</li> <li>\u6839\u636e\u566a\u58f0\u6c34\u5e73\u8c03\u6574 \\(\\sigma_r\\) </li> <li>\u53ef\u80fd\u4e0d\u662f\u6700\u597d\u7684\u53bb\u566a\u65b9\u6cd5\uff0c\u4f46\u80fd\u505a\u597d\u7b80\u6d01\u6027\u548c\u6548\u679c\u7684 tradeoff</li> </ul>"},{"location":"dip/dip6/#tone-mapping","title":"Tone mapping","text":"<p>\u5c06\u771f\u5b9e\u4e16\u754c\u7684</p> <ul> <li>\u8f93\u5165: HDR Image(high-dynamic-range) 32 \u4f4d\u56fe\u50cf\uff0c\u591a\u51fa\u6765\u7684 8 \u4f4d\u79f0\u4e3a\u963f\u5c14\u6cd5\u901a\u9053\uff0c\u5373\u900f\u660e\u5ea6\u3002\u6bcf\u4e2a\u50cf\u7d20\u662f\u6d6e\u70b9\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u589e\u52a0\u8303\u56f4\u3002</li> </ul> <p>\u4ece 1:10000 \u538b\u5230 1:100\uff1f</p> <p>\u51cf\u5c11\u4f4e\u9891\uff0c\u4f46\u53ef\u80fd\u4f1a\u51fa\u73b0\u68af\u5ea6\u9006\u8f6c(halo)</p> <p>Brute-force problem</p> <p>\u66b4\u529b\u5b9e\u73b0\u53cc\u8fb9\u6ee4\u6ce2\u7684\u65f6\u95f4\u53ef\u80fd\u4f1a\u975e\u5e38\u6162\uff0c\u56e0\u4e3a\u4ed6\u662f\u975e\u7ebf\u6027\u7684\uff0c\u800c\u4e14\u6bcf\u4e2a\u6838\u90fd\u4e0d\u4e00\u6837\uff0c\u4e0d\u80fd\u63d0\u524d\u7b97\u51fa</p>"},{"location":"dip/dip7/","title":"Basic Image Operation (V)","text":"<p>Abstract</p> <p>A Fast Approximation of the Bilateral Filter using a Signal Processing Approach  \u8bfe\u5916\u8d44\u6e90: http://people.csail.mit.edu/sparis/bf/#code</p>"},{"location":"dip/dip7/#definition","title":"Definition","text":"<ul> <li>\u53cc\u8fb9\u6ee4\u6ce2\u4f7f\u56fe\u50cf\u5e73\u6ed1\uff0c\u540c\u65f6\u80fd\u4fdd\u8fb9  </li> <li>\u672c\u8d28\u662f\u8fd1\u90bb\u7684\u52a0\u6743\u5e73\u5747\uff0c\u6743\u91cd\u5305\u62ec\uff1a<ul> <li>space \u4e0a\u7684\u9ad8\u65af\u51fd\u6570</li> <li>range \u4e0a\u7684\u9ad8\u65af\u51fd\u6570</li> <li>\u5f52\u4e00\u5316\u56e0\u5b50</li> </ul> </li> </ul> \\[ I_p^{bf}=\\dfrac{1}{W_p^{bf}}\\sum\\limits_{q\\in S}G_{\\sigma_s}(||p-q||)G_{\\sigma_r}(|I_p-I_q|)I_q \\]"},{"location":"dip/dip7/#contribution","title":"Contribution","text":"<ul> <li>\u548c\u7ebf\u6027\u6ee4\u6ce2\u76f8\u8054\u7cfb\u8d77\u6765</li> <li>\u505a\u5230\u4e86\u5feb\u3001\u4e14\u51c6\u786e\u7684\u8fd1\u4f3c\uff08\u6709\u8bef\u5dee\uff0c\u5e76\u4e0d\u662f\u76f8\u7b49\uff09</li> </ul>"},{"location":"dip/dip7/#intuition-on-1d-signal","title":"Intuition on 1D Signal","text":"<ul> <li>\u8fd1\u4e14\u76f8\u4f3c\u7684\u50cf\u7d20\u662f\u6709\u5f71\u54cd\u529b\u7684</li> <li>\u8fdc\u7684\u50cf\u7d20\u6ca1\u6709\u5f71\u54cd\u529b</li> <li>\u548c\u4e2d\u5fc3\u50cf\u7d20\u76f8\u5dee\u8f83\u5927\u7684\u5f71\u54cd\u529b\u4e5f\u6bd4\u8f83\u5c0f\uff08\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4fdd\u8fb9\u4e0b\uff09</li> </ul>"},{"location":"dip/dip7/#handling-the-division","title":"Handling the Division","text":"<p>\u901a\u8fc7\u6295\u5f71\u7a7a\u95f4\u7684\u65b9\u6cd5\u5904\u7406\u5f52\u4e00\u5316\u56e0\u5b50\u8fd9\u91cc\u7684\u9664\u6cd5</p> <ul> <li> <p>\u7b2c\u4e00\u884c(\\(I_p^{bf}\\)) \u4e58\u4e0a\u5f52\u4e00\u5316\u56e0\u5b50\uff0c\u4ece\u800c\u5f62\u6210\u4e00\u4e2a \\(2\\times 1\\)\u5411\u91cf\uff0c\u5982\u4e0a\u56fe\u4e0b\u9762\u6240\u793a\u3002</p> </li> <li> <p>\u7c7b\u4f3c\u4e8e\u6295\u5f71\u7a7a\u95f4\u4e2d\u7684\u9f50\u6b21\u5750\u6807</p> </li> <li>\u6211\u4eec\u628a\u9664\u6cd5\u5f80\u540e\u653e\uff0c\u76f4\u5230\u8ba1\u7b97\u7ed3\u675f\u518d\u8fdb\u884c\u5f52\u4e00\u5316\u56e0\u5b50\u7684\u9664\u6cd5</li> <li>\u4e0b\u4e00\u6b65\uff1a\u6dfb\u52a0\u4e00\u7ef4\uff0c\u4f7f\u5f97\u53ef\u4ee5\u8fdb\u884c\u5377\u79ef\u64cd\u4f5c</li> </ul>"},{"location":"dip/dip7/#introducing-a-convolution","title":"Introducing a Convolution","text":"<p>\u4e09\u7ef4\u9ad8\u65af\uff0c\u4e8c\u7ef4\u5377\u79ef\uff08\u5377\u79ef\u53ef\u4ee5\u53d8\u4e3a\u9891\u7387\u7684\u4e58\u79ef\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5229\u7528 FFT \u53d8\u6362\uff09</p> <p>\u53d8\u4e3a \\(\\sum\\limits_{(q,\\xi)\\in S\\times R}\\left(\\begin{matrix}W_q I_q \\\\ W_q \\end{matrix}\\right)\\) space-range Gaussian</p> <p>\u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c\u8fd8\u9700\u8981\u91c7\u6837</p>"},{"location":"dip/dip7/#summary","title":"Summary","text":"<p>\u4e0a\u91c7\u6837\uff0c\u4e0b\u91c7\u6837\u5e76\u4e0d\u662f\u5b8c\u5168\u7684\u53cc\u8fb9\u6ee4\u6ce2\uff0c\u505a\u4e86\u4e00\u4e2a\u8fd1\u4f3c</p>"},{"location":"dip/dip8/","title":"Guided Image Filtering","text":"<p>Abstract</p> <p>\u4ecb\u7ecd Guided Image Filtering, \u5305\u62ec\u5176\u57fa\u672c\u601d\u60f3\uff0c\u4f18\u70b9\u548c\u5c40\u9650\u6027\uff0c\u4ee5\u53ca\u5e94\u7528\u3002</p>"},{"location":"dip/dip8/#guided-filter","title":"Guided Filter","text":"<p>\u53cc\u8fb9\u6ee4\u6ce2\u53ea\u80fd\u4fdd\u8fb9\uff0c\u6ca1\u6709\u4fdd\u68af\u5ea6\uff08\u5373\u6b63\u8d1f\u53f7\uff09\uff0c\u5f88\u6709\u53ef\u80fd\u53d1\u751f\u68af\u5ea6\u9006\u8f6c</p> <p>\u8f93\u5165\u6709\u566a\u58f0\u7684\u56fe\u50cf \\(p\\), \u8f93\u51fa\u53bb\u566a\u540e\u5e73\u6ed1\u7684\u56fe\u50cf \\(q\\). \u90a3\u4e48 $q_i = p_i - n_i $ \u5176\u4e2d \\(n_i\\) \u8868\u793a\u566a\u58f0\u6216\u8005\u662f\u7eb9\u8def</p> <p>\u5f15\u5165\u4e86 guided image \\(I\\). \\(\\nabla q_i=a \\nabla I_i\\Rightarrow q_i=aI_i+b\\) (\\(a\\) \u662f\u4e00\u4e2a\u6807\u91cf\u7cfb\u6570)    </p> <p>\u8981\u6c42 \\(\\min\\limits_{(a,b)}\\sum\\limits_i (aI_i+b-p_i)^2+\\epsilon a^2\\) (\u8fd9\u91cc \\(\\epsilon a^2\\) \u662f\u6b63\u5219\u9879\uff0c\u7528\u6765\u63a7\u5236\u65b9\u5411)    </p> <p>\u5bf9 \\(a\\) \u6c42\u504f\u5bfc\uff0c\u4ee4\u504f\u5bfc\u6570\u4e3a \\(0\\); \u5bf9 \\(b\\) \u540c\u7406, \u8fd9\u6837\u53ef\u4ee5\u89e3\u4e00\u4e2a\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u5f97\u5230 \\(a\\) \u548c \\(b\\). (\u8fd9\u91cc \\(\\overline p\\) \u6307\u7684\u662f \\(I\\) \u8fd9\u4e2a\u90bb\u57df\u7684\u5e73\u5747\u503c)</p> <p>\u4ee5\u4e0a\u662f\u5bf9\u5355\u4e2a\u50cf\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u6269\u5145\u5230\u6574\u4e2a\u56fe\u50cf\uff1a  </p> <ul> <li> <p>\u5bf9\u6bcf\u4e00\u4e2a\u5c40\u90e8\u7a97\u53e3 \\(w_k\\) \u6211\u4eec\u53ef\u4ee5\u7b97\u51fa \\(a_k, b_k\\) \u7a97\u53e3\u4e4b\u95f4\u53ef\u80fd\u6709\u91cd\u53e0\uff0c\u8981\u7b97\u7a97\u53e3\u5185 \\(q_k\\) \u7684\u5e73\u5747\u503c\uff0c\u5373\u6240\u6709\u5305\u542b \\(q_i\\) \u7684\u7a97\u53e3\u7684\u5747\u503c  </p> </li> <li> <p>\u53c2\u6570: \u7a97\u53e3\u534a\u5f84 \\(r\\), \u6b63\u5219\u7cfb\u6570 \\(\\epsilon\\)</p> </li> </ul> <p>\u5982\u679c\u7a97\u53e3\u7684 \\(var(I)\\ll \\epsilon, Cov(I,p)\\ll \\epsilon\\Rightarrow a\\approx 0, b\\approx \\overline p\\Rightarrow q_i\\approx \\overline{\\overline p}\\) (\u76f8\u5f53\u4e8e\u5bf9\u5747\u503c\u6ee4\u6ce2\u7684\u4e00\u4e2a\u7ea7\u8054)  </p> <p>guided image \u600e\u4e48\u627e\uff1f\u53ef\u4ee5\u7528\u8f93\u51fa\u56fe\u50cf\u7684\u5e73\u5747\u503c \\(\\overline p\\) \u4f5c\u4e3a guided image.  </p> <p>\\(r\\) \u51b3\u5b9a\u4e86\u91c7\u6837\u7a97\u53e3\u7684\u5927\u5c0f</p> <p>\u8fd9\u8bf4\u660e\u5b83\u4e0d\u4ec5\u53ef\u4ee5\u4fdd\u8fb9\uff0c\u8fd8\u53ef\u4ee5\u4fdd\u65b9\u5411\uff0c\u5373\u4e0d\u4f1a\u51fa\u73b0\u68af\u5ea6\u9006\u8f6c\u7684\u60c5\u51b5\u3002 \\(\\epsilon\\) \u51b3\u5b9a\u4e86\u6211\u4eec\u4fdd\u8fb9\u7684\u7a0b\u5ea6\uff0c\u8d8a\u5927\u4fdd\u8fb9\u80fd\u529b\u8d8a\u5f3a</p> Example <p>Guided Filter \u7684\u4f18\u70b9</p> <ul> <li>\u4fdd\u8fb9\uff08\u4fdd\u68af\u5ea6\u5c31\u4e00\u5b9a\u80fd\u4fdd\u8fb9\uff0c\u53cd\u4e4b\u4e0d\u4e00\u5b9a\uff09</li> <li>\u975e\u8fed\u4ee3</li> <li>\\(O(1)\\) \u7684\u65f6\u95f4\uff0c\u5feb\u4e14\u4e0d\u9700\u8981\u901a\u8fc7\u8fd1\u4f3c\u7684\u65b9\u6cd5</li> <li>\u4e0d\u5b58\u5728\u68af\u5ea6\u9006\u8f6c\u7684\u95ee\u9898</li> </ul>"},{"location":"dip/dip8/#complexity","title":"Complexity","text":"<ul> <li>\u5728\u6bcf\u4e2a\u5c40\u90e8\u7a97\u53e3\u8ba1\u7b97\u5747\u503c\u3001\u65b9\u5dee\u3001\u534f\u65b9\u5dee</li> <li>\u7ea7\u8054\uff0c\u53ef\u4ee5\u7528\u79ef\u5206\u56fe\u63d0\u524d\u505a\u8ba1\u7b97<ul> <li>\\(O(1)\\) \u4e14\u4e0d\u4f9d\u8d56\u4e8e\u7a97\u53e3\u5927\u5c0f \\(r\\)</li> <li>\u975e\u8fd1\u4f3c</li> </ul> </li> </ul>"},{"location":"dip/dip8/#gradient-preserving","title":"Gradient Preserving","text":"\u68af\u5ea6\u9006\u8f6c\u7684\u4f8b\u5b50 <p>\u9664\u4e86\u56fe\u50cf\u5e73\u6ed1\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u53bb\u96fe\u3001\u62a0\u56fe</p>"},{"location":"dip/dip8/#limitation","title":"Limitation","text":"<p>\u5bf9\u8fb9\u7f18\u7684\u5b9a\u4e49\u4e0d\u6e05\u6dc5\uff0c\u800c\u4e14\u8fb9\u7f18\u662f context-dependent \u7684\u3002\u8089\u773c\u4e2d\u7684\u8fb9\u754c\uff0c\u53ef\u80fd\u4e0d\u88ab\u8ba4\u4e3a\u662f\u8fb9\u754c\uff0c\u6700\u7ec8\u8fd8\u662f\u4f1a\u51fa\u73b0 halo \u7684\u73b0\u8c61\u3002</p>"},{"location":"dip/dip9/","title":"Sparse Norm Filtering","text":""},{"location":"dip/dip9/#core-algorithm","title":"Core Algorithm","text":"<p>\u5e73\u6ed1\u4e00\u4e2a\u56fe\u50cf\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 \\(l^2\\) \u8303\u5f0f\u5e76\u6c42: \\(\\min\\limits_{l_i^{new}}\\sum\\limits_{j\\in N_i(l_i^{new}-l_j)^2}\\Rightarrow\\) \u5747\u503c\u6ee4\u6ce2, \u6c42\u504f\u5bfc\u5e76\u4ee4\u5176\u7b49\u4e8e \\(0\\), \u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u70b9\u7684\u50cf\u7d20\u503c\u3002  </p> <p>\u4e3a\u4e86\u8ba9\u6ee4\u6ce2\u80fd\u591f\u4fdd\u8fb9\uff0c\u6211\u4eec\u5efa\u8bae\u6539\u53d8\u4e3a \\(p\\) \u8303\u5f0f\uff0c\u53d8\u4e3a sparser norm, \u5f0f\u5b50\u63a8\u5e7f\u4e3a \\(\\min\\limits_{l_i^{new}}\\sum\\limits_{j\\in N_i}|l_i^{new}-l_j|^p,0&lt;p\\leq 2\\Rightarrow\\) Sparse Norm Filter</p>"},{"location":"dip/dip9/#application","title":"Application","text":""},{"location":"dip/dip9/#halo-free-filtering","title":"Halo free filtering","text":"<p>\u52a0\u6743\u5e73\u5747\u4f1a\u5e26\u6765 Halo, \u57fa\u4e8e\u6ee4\u6ce2\u8fdb\u884c\u6700\u4f18\u5316\u6bd4\u8f83\u6162\u800c\u4e14\u4f1a\u4ea7\u751f\u4e0d\u60f3\u770b\u5230\u7684\u7ed3\u679c\u3002</p> <p>\u6211\u4eec\u80fd\u901a\u8fc7 Sparse Norm Filter \u751f\u6210 halo free \u7684\u7ed3\u679c\u662f\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8 \\(l^p\\) \u8303\u5f0f</p> Example <p> </p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u8282 \\(p\\) \u7684\u5927\u5c0f\uff0c\u5728\u7b2c\u4e8c\u5f20\u56fe\u50cf\u4e2d\u68af\u5ea6\u9006\u8f6c\u7684\u73b0\u8c61\u6d88\u5931\u4e86\uff01 \\(p&gt;1\\) \u65f6\u4e0d\u80fd\u9632\u6b62\u68af\u5ea6\u9006\u8f6c\uff0c\\(p&lt;1\\) \u53ef\u4ee5.  </p>"},{"location":"dip/dip9/#outlier-tolerant-filtering","title":"Outlier tolerant filtering","text":"<p>SNF \u662f\u4e00\u4e2a\u901a\u7528\u7684\u6ee4\u6ce2\uff08\u4e2d\u503c\u6ee4\u6ce2\u662f\u4e00\u4e2a\u7279\u4f8b\uff0c\u76f8\u5f53\u4e8e \\(l^1\\) \u8303\u5f0f\u6ee4\u6ce2\uff09  </p> <p>\u4e5f\u53ef\u4ee5\u8d77\u5230\u53bb\u566a\u7684\u6548\u679c</p> Example  \u539f\u56fe   p=0.1 norm filter"},{"location":"dip/dip9/#hdr-compression","title":"HDR Compression","text":"<p>\u56e0\u4e3a SNF \u7684\u5fae\u5206\u662f\u975e\u5c40\u90e8\u7684\uff0c\u4ed6\u4e0d\u90a3\u4e48\u53ef\u80fd\u9677\u5165\u68af\u5ea6\u4e0b\u964d\u7684\u60c5\u51b5\u3002</p> Example  \u539f\u56fe   p=0.2 norm filter"},{"location":"dip/dip9/#non-blind-deconvolution","title":"Non-blind Deconvolution","text":"<p>\u8fd0\u52a8\u53bb\u6a21\u7cca</p> Example <p>  \u539f\u56fe   p=0.5, r=5 </p> <p>\u5982\u4f55\u505a\u8fd0\u52a8\u53bb\u6a21\u7cca\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5148\u4f30\u8ba1\u51fa\u8fd0\u52a8\u7684\u8f68\u8ff9\uff08\u548c\u5899\u5bf9\u9f50\uff09\uff0c\u518d\u901a\u8fc7\u5bf9\u5f27\uff08\u8f68\u8ff9\uff09\u8fdb\u884c\u53bb\u5377\u79ef\u3002  </p>"},{"location":"dip/dip9/#joint-filtering","title":"Joint filtering","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u53e6\u4e00\u4e2a\u5f15\u5bfc\u56fe\u50cf\u6765\u63d0\u4f9b\u6ee4\u6ce2\u7684\u5f15\u5bfc\u6743\u91cd\uff0c\u5982\u5c06\u5f15\u5bfc\u56fe\u50cf\u7684\u8272\u8c03\u7528\u5230\u53e6\u4e00\u5f20\u56fe\u50cf\u4e0a</p> Example"},{"location":"dip/dip9/#segmentation","title":"Segmentation","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8054\u5408\u6ee4\u6ce2\u52a0\u901f\u5f52\u4e00\u5316\u5207\u5272\u6765\u8fdb\u884c\u56fe\u50cf\u5206\u5272\u3002 </p> <p>\u5728\u7279\u5f81\u6c42\u89e3\u5668\u4e2d\u7528\u9ad8\u6548\u7684\u8054\u5408\u6ee4\u6ce2\u4ee3\u66ff\u77e9\u9635\u4e58\u6cd5</p> Example  <p>\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6280\u672f\u6269\u5c55\u5230\u5f52\u4e00\u5316\u5207\u5272\u7684\u76f8\u5173\u7b97\u6cd5\u3002</p>"},{"location":"dip/dip9/#colorization","title":"Colorization","text":"<p>\u57fa\u4e8e\u5bf9\u56fe\u50cf\u7684\u5206\u5272\uff0c\u518d\u4e0a\u8272</p> Example  \u8f93\u5165\u56fe\u50cf Result after 5 iter Final result by SNF using p=0.1,r=1/4  of the image height"},{"location":"dip/dip9/#seamless-editing","title":"Seamless editing","text":"<p>\u65e0\u7f1d\u8854\u63a5\uff0c\u601d\u8def\u7c7b\u4f3c\u4e0a\u8272\uff0c\u4e0d\u65ad\u4f7f\u7528 SNF \u8fed\u4ee3</p> Example  \u8f93\u5165\u56fe\u50cf  Result by drag-and-drop  Final result by SNF"},{"location":"ds/","title":"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5","text":"<p>Abstract</p> <p>\u8fd9\u91cc\u662f\u6d59\u6c5f\u5927\u5b66 \u6570\u636e\u7ed3\u6784\u57fa\u7840 \u8bfe\u7a0b\u7b14\u8bb0\u53ca\u76f8\u5173\u77e5\u8bc6 \u8001\u5e08: \u6731\u5efa\u79d1 \u53c2\u8003:</p> <ul> <li>Data Structures and Algorithm Analysis in C(\u6559\u6750)  </li> <li>\u8001\u5e08\u4e0a\u8bfe\u7684 PPT (by cyll)</li> </ul>"},{"location":"ds/algorithm/","title":"\u7b97\u6cd5\u5206\u6790","text":"<p>\u4e00\u4e2a\u7b97\u6cd5(algorithm) \u662f\u4e3a\u4e86\u5b9e\u73b0\u7279\u5b9a\u4efb\u52a1\u7684\u4e00\u4e2a\u6709\u9650\u6761\u6307\u4ee4\u7684\u96c6\u5408</p> <p>\u7b97\u6cd5\u6ee1\u8db3\u8fd9\u4e9b\u6027\u8d28\uff1a </p> <ul> <li>Input</li> <li>Output</li> <li>Definiteness</li> <li>Finiteness</li> <li>Effectiveness</li> </ul> <p>Note: program \u53ef\u4ee5\u4e0d finite(e.g. \u64cd\u4f5c\u7cfb\u7edf)</p>"},{"location":"ds/algorithm/#_2","title":"\u5206\u6790\u5185\u5bb9","text":"<ul> <li>\u8fd0\u884c\u65f6\u95f4\uff1a\u4e0e\u673a\u5668\u3001\u7f16\u8bd1\u5668\u6709\u5173</li> <li>\u65f6\u95f4 &amp; \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4e0e\u673a\u5668\u3001\u7f16\u8bd1\u5668\u65e0\u5173</li> </ul> <p>\u5047\u8bbe\uff1a</p> <ul> <li>\u6307\u4ee4\u6309\u987a\u5e8f\u6267\u884c</li> <li>\u6bcf\u6761\u6307\u4ee4\u662f\u7b80\u5355\u7684\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u65f6\u95f4\u5355\u4f4d\u6267\u884c</li> <li>\u6570\u636e\u89c4\u6a21\u662f\u7ed9\u5b9a\u7684\uff0c\u800c\u7a7a\u95f4\u662f\u65e0\u9650\u7684</li> </ul> <p>\u901a\u5e38\u6211\u4eec\u9700\u8981\u5206\u6790 \\(T_{avg}(N) \\&amp; T_{worst}(N)\\), \\(N\\) \u662f\u8f93\u5165\u89c4\u6a21\uff08\u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165\uff09</p>"},{"location":"ds/algorithm/#_3","title":"\u6e10\u8fdb\u7b26\u53f7","text":""},{"location":"ds/algorithm/#_4","title":"\u5b9a\u4e49","text":"<p>\u5927 \\(O\\) \u8868\u793a\u6cd5 \\(T(N) = O(f(N))\\)\uff0c\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(c\\) \u548c \\(n_0\\)\u200b\u4f7f\u5f97\u5f53 \\(N\\geq n_0\\) \u65f6 \\(T(N)\\leq c\\cdot f(N)\\) \u6e10\u8fdb\u4e0a\u754c\uff0c\u5373 \\(T(N)\\) \u7684\u9636\u4e0d\u4f1a\u9ad8\u4e8e \\(f(N)\\)\uff08\u589e\u957f\u6bd4 \\(f(N)\\) \u6162\u6216\u76f8\u540c\uff0c\\(\\leq\\)\uff09</p> <p>\u5927 \\(\\Omega\\) \u8868\u793a\u6cd5 \\(T(N) = \\Omega(g(N))\\)\uff0c\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(c\\) \u548c \\(n_0\\)\u200b\u4f7f\u5f97\u5f53 \\(N\\geq n_0\\) \u65f6 \\(T(N)\\geq c\\cdot f(N)\\) \u6e10\u8fdb\u4e0b\u754c\uff0c\u5373 \\(T(N)\\) \u7684\u9636\u4e0d\u4f1a\u4f4e\u4e8e \\(f(N)\\)\uff08\u589e\u957f\u6bd4 \\(f(N)\\) \u5feb\u6216\u76f8\u540c\uff0c\\(\\geq\\)\uff09</p> <p>\u5927 \\(\\Theta\\) \u8868\u793a\u6cd5 \\(T(N) = \\Theta(h(N))\\)\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(T(N) = O(h(N))\\) \u4e14 \\(T(N) = \\Omega(h(N))\\) \u6e10\u8fdb\u7d27\u786e\u754c\uff0c\u5373 \\(T(N)\\) \u4e0e \\(h(N)\\) \u540c\u9636\uff08\u589e\u957f\u901f\u5ea6\u76f8\u540c\uff0c\\(=\\))</p> <p>\u5c0f \\(o\\) \u8868\u793a\u6cd5 \\(T(N) = o(p(N))\\)\uff0c\u5f53 \\(T(N)=O(p(N))\\) \u4e14 \\(T(N)\\neq \\Theta(p(N))\\) \u65f6\u6210\u7acb \u975e\u6e10\u8fdb\u7d27\u786e\u4e0a\u754c\uff0c\uff08\u5373 \\(T(N)\\) \u589e\u957f\u6bd4 \\(p(N)\\)\u6162\uff0c\\(&lt;\\)\uff09</p> <p>\u5c0f \\(w\\) \u8868\u793a\u6cd5 \\(T(N) = w(p(N))\\)\uff0c\u5f53 \\(T(N)=\\Omega(p(N))\\) \u4e14 \\(T(N)\\neq \\Theta(p(N))\\) \u65f6\u6210\u7acb \u975e\u6e10\u8fdb\u7d27\u786e\u4e0b\u754c\uff0c\uff08\u5373 \\(T(N)\\) \u589e\u957f\u6bd4 \\(p(N)\\)\u5feb\uff0c\\(&gt;\\)\uff09</p>"},{"location":"ds/algorithm/#_5","title":"\u8fd0\u7b97\u89c4\u5219","text":"<ul> <li>\u82e5 \\(T_1(N)=O(f(N)), T_2(N)=O(g(N))\\) <ul> <li>\\(T_1(N)+T_2(N)=\\max(O(f(N)), O(g(N))\\)</li> <li>\\(T_1(N)\\cdot T_2(N)=O(f(N)\\cdot g(N))\\)</li> </ul> </li> <li>\u82e5 \\(T(N)\\) \u662f\u6700\u9ad8\u6b21\u6570\u4e3a k \u6b21\u7684\u591a\u9879\u5f0f\uff0c\u90a3\u4e48 \\(T(N)=\\Theta ((N^k))\\) </li> <li>\u5bf9\u4e8e\u4efb\u610f\u5e38\u6570 \\(k\\), \u90fd\u6709 \\(\\log^kN=O(N)\\)\uff0c\u8fd9\u8bf4\u660e\u5bf9\u589e\u957f\u975e\u5e38\u7f13\u6162\u3002</li> <li>\u5206\u6790\u65f6\u7684\u89c4\u5219<ul> <li>for loop \u8fd0\u884c\u65f6\u95f4\u662f\u5faa\u73af\u5185\u90e8\u8bed\u53e5\u7684\u6700\u957f\u65f6\u95f4\uff08\u5305\u62ec for \u8fb9\u754c\u5224\u65ad\uff09\u4e58\u5faa\u73af\u7684\u6b21\u6570</li> <li>\u5d4c\u5957 for loop \u8fd0\u884c\u65f6\u95f4\u662f\u5404\u4e2a for loop \u7684\u8fd0\u884c\u65f6\u95f4\u9010\u6b21\u76f8\u4e58</li> <li>\u8fde\u7eed\u6267\u884c\u7684\u8bed\u53e5 \u76f8\u52a0</li> <li>if else \u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7\u5224\u65ad\u65f6\u95f4\u52a0\u4e0a\u7528\u65f6\u6700\u591a\u7684\u8bed\u53e5\u5757\u7684\u65f6\u95f4</li> </ul> </li> </ul>"},{"location":"ds/graph/","title":"\u56fe\u8bba","text":""},{"location":"ds/graph/#_2","title":"\u5b9a\u4e49","text":"<ul> <li> <p>\u4e00\u4e2a\u56fe \\(G=(V,E)\\) \u5176\u4e2d \\(V\\) \u662f\u8282\u70b9\u7684\u6709\u9650\u975e\u7a7a\u96c6\u5408, \\(E\\) \u662f\u8fb9\u7684\u6709\u9650\u975e\u7a7a\u96c6\u5408. \u6bcf\u4e00\u6761\u8fb9\u5c31\u662f\u4e00\u4e2a\u70b9\u5bf9 \\((v,w)\\).  </p> <ul> <li>\u65e0\u5411\u56fe: \\((v_i,v_j)=(v_j,v_i)\\) \u8868\u793a\u540c\u4e00\u6761\u8fb9</li> <li>\u6709\u5411\u56fe: \\((v_i,v_j)\\neq (v_j,v_i)\\) \u5176\u4e2d \\((v_i,v_j)\\) \u8868\u793a\u7531 \\(v_i\\) (tail) \u6307\u5411 \\(v_j\\) (head) \u7684\u4e00\u6761\u8fb9\u3002</li> <li>\u9650\u5236\uff1a\u81ea\u73af\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u540c\u65f6\u6211\u4eec\u4e0d\u8003\u8651\u591a\u91cd\u56fe </li> <li>\u5bf9\u4e8e \\((v_i,v_j)\\) \u8fd9\u6761\u8fb9\uff0c\u6211\u4eec\u79f0 \\(v_i,v_j\\) \u662f\u90bb\u63a5\u7684(adjacent), \u79f0 \\((v_i,v_j)\\) \u9644\u5c5e\u4e8e(incident) \\(v_i/v_j\\)</li> <li>\u5b8c\u5168\u56fe: \u6bcf\u4e00\u5bf9\u8282\u70b9\u95f4\u90fd\u5b58\u5728\u4e00\u6761\u8fb9\u7684\u56fe  </li> <li>\u5b50\u56fe: \\(G'\\sub G\\) \u5373 \\(G'\\) \u4e2d\u7684\u70b9\u548c\u8fb9\u90fd\u5305\u542b\u5728 G \u4e2d(\\(V(G')\\sube V(G)\\quad E(G')\\sube E(G)\\))  </li> <li>\u8def\u5f84: \\(\\{v_p,v_{i1},v_{i2},\\ldots, v_{in},v_q\\}((v_i,v_i)\\in E)\\) \u79f0\u4e3a\u4ece \\(v_p\\) \u5230 \\(v_q\\) \u7684\u4e00\u6761\u8def\u5f84</li> <li>\u8def\u5f84\u7684\u957f\u5ea6\uff1a\u8def\u5f84\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf</li> <li>\u7b80\u5355\u8def\u5f84: \\(v_{i1},v_{i2}...\\) \u5404\u4e0d\u76f8\u540c(\u6ce8\u610f\u7b2c\u4e00\u4e2a\u70b9\u53ef\u4ee5\u548c\u6700\u540e\u4e00\u4e2a\u70b9\u76f8\u540c)</li> <li>\u5708: \\(v_p=v_q\\) \u7684\u7b80\u5355\u8def\u5f84</li> <li>\u5982\u679c\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\u6bcf\u4e00\u4e2a\u9876\u70b9\u5230\u53e6\u4e00\u4e2a\u5176\u4ed6\u9876\u70b9\u90fd\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48\u65e0\u5411\u56fe\u662f\u8fde\u901a\u7684\u3002\u5177\u6709\u8fd9\u6837\u6027\u8d28\u7684\u6709\u5411\u56fe\u79f0\u4e3a\u5f3a\u8fde\u901a\u3002\u5982\u679c\u6709\u5411\u56fe\u4e0d\u662f\u5f3a\u8fde\u901a\uff0c\u4f46\u4ed6\u7684\u57fa\u7840\u56fe\uff08\u8fb9\u53bb\u6389\u65b9\u5411\u6240\u5f62\u6210\u7684\u56fe\uff09\u662f\u8fde\u901a\u7684\uff0c\u90a3\u4e48\u79f0\u4e3a\u5f31\u8054\u901a\u3002</li> <li>DAG: Directed Acyclic Graph(\u6709\u5411\u65e0\u73af\u56fe)\uff0c\u6811\u662f\u8fde\u901a\u7684\u6709\u5411\u65e0\u73af\u56fe  </li> <li>\u5ea6\u6570: \u9644\u5c5e\u4e8e \\(v\\) \u7684\u8fb9\u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8fd8\u5206\u4e3a\u51fa\u5ea6\u548c\u5165\u5ea6\u3002\u7ed9\u4e00\u4e2a \\(n\\) \u4e2a\u8282\u70b9\u7684\u56fe \\(G\\), \u6211\u4eec\u6709 \\(e=\\dfrac{\\sum\\limits_{i=0}^{n-1}d_i}{2}\\) \uff08\u5176\u4e2d \\(d_i=degree(v_i)\\)</li> </ul> </li> </ul>"},{"location":"ds/graph/#_3","title":"\u56fe\u7684\u8868\u793a","text":""},{"location":"ds/graph/#_4","title":"\u90bb\u63a5\u77e9\u9635","text":"\\[ adj\\_mat[i][j]=\\left\\{ \\begin{matrix} 1\\quad if\\ (v_i,v_j)\\ or\\ &lt;v_i,v_j&gt;\\in E(G)\\\\ 0\\quad \\quad \\quad \\quad \\quad \\quad  \\quad \\quad \\quad \\ \\ \\ otherwise \\end{matrix} \\right. \\] <p>\u5982\u679c \\(G\\) \u662f\u65e0\u5411\u56fe\uff0c\u90a3\u4e48\u90bb\u63a5\u77e9\u9635\u662f\u5bf9\u79f0\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53ea\u5b58\u4e00\u534a\u7684\u6570\u636e\u3002</p> <p>\\(deg(i)=\\sum\\limits_{j=0}^{n-1}adj\\_mat[i][j]+\\sum\\limits_{j=0}^{n-1}adj\\_mat[j][i]\\)</p> <p>\u4f46\u8fd9\u6837\u7684\u7a7a\u95f4\u9700\u6c42\u662f \\(\\Theta(|V|^2)\\), \u5bf9\u4e8e\u975e\u7a20\u5bc6\u56fe\u5f00\u9500\u592a\u5927\u3002</p>"},{"location":"ds/graph/#_5","title":"\u90bb\u63a5\u8868","text":"<p>\u5bf9\u6bcf\u4e00\u4e2a\u9876\u70b9\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u94fe\u8868\u5b58\u653e\u5176\u6240\u6709\u90bb\u63a5\u7684\u9876\u70b9\uff0c\u6b64\u65f6\u7684\u7a7a\u95f4\u9700\u6c42\u4e3a \\(O(|E|+|V|)\\)</p> <p>\u5728\u65e0\u5411\u56fe\u4e0a\uff0c\u6bcf\u6761\u8fb9 \\((u,v)\\) \u51fa\u73b0\u5728\u4e24\u4e2a\u8868\u4e2d\uff0c\u56e0\u6b64\u7a7a\u95f4\u7684\u4f7f\u7528\u662f\u53cc\u500d\u7684\uff0c$S=n heads + 2e edges $</p> <p>\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\\(v\\) \u7684\u5ea6\u6570\u5c31\u662f \\(graph[v]\\) \u4e2d\u7684\u8282\u70b9\u4e2a\u6570\u3002\u5982\u679c \\(G\\) \u662f \u6709\u5411\u56fe\uff0c\u8fd9\u6837\u53ea\u80fd\u627e\u5230\u51fa\u5ea6\uff0c\u5bf9\u4e8e\u5165\u5ea6\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5:</p> <ul> <li>\u589e\u52a0\u4e00\u4e2a\u94fe\u8868\uff0c\u5c06\u8fb9\u53cd\u5411\u5e76\u5b58\u5165 </li> <li>\u4f7f\u7528\u591a\u91cd\u8868</li> </ul>"},{"location":"ds/graph/#_6","title":"\u90bb\u63a5\u591a\u91cd\u8868\u5217","text":""},{"location":"ds/graph/#_7","title":"\u62d3\u6251\u6392\u5e8f","text":"<ul> <li>AOV \u7f51\u7edc\uff1a\u6709\u5411\u56fe\u4e2d\uff0c\u7528\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u7528\u5f27\u8868\u793a\u6d3b\u52a8\u4e4b\u95f4\u7684\u4f18\u5148\u5173\u7cfb</li> <li>\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u6211\u4eec\u79f0 \\(i\\) \u662f \\(j\\) \u7684\u524d\u9a71\uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u4ece \\(i\\) \u5230 \\(j\\) \u7684\u8def\u5f84  </li> <li>\u6211\u4eec\u79f0 \\(i\\) \u662f \\(j\\) \u7684\u76f4\u63a5\u524d\u9a71\uff0c\u5982\u679c \\(&lt;i,j&gt;\\in E(G)\\). \u540c\u65f6 \\(j\\) \u79f0\u4e3a \\(i\\) \u7684\u76f4\u63a5\u540e\u7ee7</li> </ul> <p>\u53ef\u5b9e\u73b0\u7684 AOV \u7f51\u7edc\u4e00\u5b9a\u662f DAG.  </p> <p>\u62d3\u6251\u6392\u5e8f\u662f\u5bf9\u6709\u5411\u65e0\u73af\u56fe\u7684\u9876\u70b9\u7684\u4e00\u79cd\u6392\u5e8f\uff0c\u5b83\u4f7f\u5f97\u5982\u679c \\(i\\) \u662f \\(j\\) \u7684\u524d\u9a71\uff0c\u90a3\u4e48\u5728\u62d3\u6251\u5e8f\u5217\u4e2d \\(i\\) \u4e00\u5b9a\u51fa\u73b0\u5728 \\(j\\) \u7684\u524d\u9762\u3002</p> <p>\u5b9e\u73b0\u601d\u8def\uff1a\u5728\u5bb9\u5668\u4e2d\uff08\u961f\u5217/\u6808\uff09\u653e\u672a\u88ab\u6392\u5e8f\u4e14\u5ea6\u6570\u4e3a 0 \u7684\u8282\u70b9</p> <pre><code>void Topsort( Graph G )\n{   Queue  Q;\nint  Counter = 0;\nVertex  V, W;\nQ = CreateQueue( NumVertex );  MakeEmpty( Q );\nfor ( each vertex V )\nif ( Indegree[ V ] == 0 )   Enqueue( V, Q );\nwhile ( !IsEmpty( Q ) ) {\nV = Dequeue( Q );\nTopNum[ V ] = ++ Counter; /* assign next */\nfor ( each W adjacent to V )\nif ( \u2013 \u2013 Indegree[ W ] == 0 )  Enqueue( W, Q );\n}  /* end-while */\nif ( Counter != NumVertex )\nError( \u201cGraph has a cycle\u201d );\nDisposeQueue( Q ); /* free memory */\n}\n</code></pre> <p>Note</p> <p>\u62d3\u6251\u6392\u5e8f\u53ef\u80fd\u4e0d\u662f\u552f\u4e00\u7684</p>"},{"location":"ds/graph/#_8","title":"\u6700\u77ed\u8def","text":"<p>\u7ed9\u5b9a\u6709\u5411\u56fe \\(G=(V,E)\\) \u4ee5\u53ca\u4e00\u4e2a\u82b1\u8d39\u51fd\u6570 \\(c(e), e\\in E(G)\\). \u4ece\u6e90\u70b9\u5230\u7ec8\u70b9\u7684\u4e00\u6761\u8def\u5f84 \\(P\\) \u7684\u957f\u5ea6\u5b9a\u4e49\u4e3a \\(\\sum\\limits_{e_i\\sub P}c(e_i)\\) \uff08\u4e5f\u79f0\u4e3a\u5e26\u6743\u8def\u5f84\u957f\uff09 </p>"},{"location":"ds/graph/#_9","title":"\u5355\u6e90\u6700\u77ed\u8def\u5f84","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u8d4b\u6743\u56fe\u548c\u4e00\u4e2a\u7279\u5b9a\u9876\u70b9 \\(s\\) \u4f5c\u4e3a\u8f93\u5165\uff0c\u627e\u51fa\u4ece \\(s\\) \u5230 \\(G\\) \u4e2d\u6bcf\u4e00\u4e2a\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u5e26\u6743\u8def\u5f84\u3002 \u6ce8\u610f: \u5982\u679c\u8fd9\u91cc\u6709\u8d1f\u73af\uff0c\u90a3\u4e48\u6700\u77ed\u8def\u5f84\u5b9a\u4e49\u4e3a 0. </p>"},{"location":"ds/graph/#_10","title":"\u65e0\u6743\u6700\u77ed\u8def\u5f84","text":"<p>\u91c7\u7528 BFS(Breadth-First Search) \u7684\u65b9\u5f0f\uff0c\u4ece \\(s\\) \u51fa\u53d1\u5bfb\u627e\u6240\u6709\u8ddd\u79bb\u4e3a 1 \u7684\u9876\u70b9(\u5373\u4e0e \\(s\\) \u90bb\u63a5)\u968f\u540e\u5bfb\u627e\u4e0e \\(s\\) \u8ddd\u79bb\u4e3a 2 \u7684\u9876\u70b9\uff0c\u5373\u4e0e\u521a\u521a\u90a3\u4e9b\u9876\u70b9\u90bb\u63a5\u7684\u9876\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <pre><code>void Unweighted( Table T )\n{   /* T is initialized with the source vertex S given */\nQueue  Q;\nVertex  V, W;\nQ = CreateQueue (NumVertex );  MakeEmpty( Q );\nEnqueue( S, Q ); /* Enqueue the source vertex */\nwhile ( !IsEmpty( Q ) ) {\nV = Dequeue( Q );\nT[ V ].Known = true; /* not really necessary */\nfor ( each W adjacent to V )\nif ( T[ W ].Dist == Infinity ) {\nT[ W ].Dist = T[ V ].Dist + 1;\nT[ W ].Path = V;\nEnqueue( W, Q );\n} /* end-if Dist == Infinity */\n} /* end-while */\nDisposeQueue( Q ); /* free memory */\n}\n</code></pre>"},{"location":"ds/graph/#dijkstra","title":"Dijkstra \u7b97\u6cd5","text":"<p>\u4ee4 S \u8868\u793a\u6e90\u70b9 s \u4ee5\u53ca\u5176\u4ed6\u5df2\u7ecf\u627e\u5230\u6700\u77ed\u8def\u7684\u8282\u70b9\u7684\u96c6\u5408\uff0c\u5bf9\u4e8e\u4e0d\u5728 S \u96c6\u5408\u4e2d\u7684\u8282\u70b9 u, \u6211\u4eec\u5b9a\u4e49 \\(dist[u]\\) \u8868\u793a\u6700\u77ed\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u5176\u4e2d\u8def\u5f84\u662f\u4ece \\(s\\rightarrow v_i\\rightarrow u(v_i\\in S)\\). \u5982\u679c\u8def\u5f84\u662f\u975e\u964d\u5e8f\u751f\u6210\u7684\uff0c\u90a3\u4e48</p> <ul> <li>\u6700\u77ed\u8def\u5f84\u4e00\u5b9a\u662f\u4ece \\(S\\) \u4e2d\u7684\u67d0\u4e2a\u70b9 \\(v_i\\) \u5230 \\(u\\).  </li> <li>\\(dist[u]=\\min\\{w\\notin S\\ |\\ dist[w]\\}\\). \u5373\u6211\u4eec\u4ece \\(S\\) \u4e4b\u5916\u7684\u8282\u70b9\u4e2d\u9009\u62e9 \\(dist[u]\\) \u6700\u5c0f\u7684\u4f5c\u4e3a\u4e0b\u4e00\u4e2a \\(u\\).  </li> <li>\u5982\u679c \\(dist[u_1]&lt;dist[u_2]\\) \u540c\u65f6\u6211\u4eec\u5c06 \\(u_1\\) \u52a0\u5165\u4e86 \\(S\\), \u90a3\u4e48 \\(dist[u_2]\\) \u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u5982\u679c\u6539\u53d8\u4e86\uff0c\u90a3\u4e48 \\(dist[u_2]=dist[u_1]+length&lt;u_1,u_2&gt;\\).  </li> </ul> <pre><code>void Dijkstra( Table T )\n{   /* T is initialized by Figure 9.30 on p.303 */\nVertex  V, W;\nfor ( ; ; ) { /* O( |V| ) */\nV = smallest unknown distance vertex;\nif ( V == NotAVertex )\nbreak; T[ V ].Known = true;\nfor ( each W adjacent to V )\nif ( !T[ W ].Known ) if ( T[ V ].Dist + Cvw &lt; T[ W ].Dist ) {\nDecrease( T[ W ].Dist  to\nT[ V ].Dist + Cvw );\nT[ W ].Path = V;\n} /* end-if update W */\n} /* end-for( ; ; ) */\n}\n/* not work for edge with negative cost  */\n</code></pre> <p>\u603b\u7684\u8fd0\u884c\u65f6\u95f4 \\(O(|E|+|V|^2)\\) </p> <p>\u5177\u4f53\u5b9e\u73b0:</p> <ul> <li>\u901a\u8fc7\u626b\u63cf\u6574\u4e2a\u8868\u6765\u627e\u5230 smallest unknown distance vertex - \\(O(|V|^2+|E|)\\) \uff08\u5f53\u56fe\u662f\u7a20\u5bc6\u7684\u65f6\u5019\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u597d\u7684\uff09</li> <li>\u4f7f\u7528\u5806\u3002\u9996\u5148\u6211\u4eec <code>DeleteMin</code>, \u968f\u540e\u53ef\u4ee5 <code>DecreaseKey</code> \u6765\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u6837\u6211\u4eec\u9700\u8981\u8bb0\u5f55 \\(d_i\\) \u7684\u503c\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5f53\u5806\u53d1\u751f\u53d8\u5316\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u66f4\u65b0\uff1b\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5728\u6bcf\u6b21\u66f4\u65b0\u540e\u5c06 \\(w\\) \u548c\u65b0\u503c \\(d_w\\) \u63d2\u5165\u5806\uff0c\u8fd9\u6837\u5806\u4e2d\u53ef\u80fd\u6709\u540c\u4e00\u9876\u70b9\u7684\u591a\u4e2a\u4ee3\u8868\u3002\u5f53\u5220\u9664\u6700\u5c0f\u503c\u7684\u65f6\u5019\u9700\u8981\u68c0\u67e5\u8fd9\u4e2a\u70b9\u662f\u4e0d\u662f\u5df2\u7ecf\u77e5\u9053\u7684\u3002</li> </ul>"},{"location":"ds/graph/#_11","title":"\u8d1f\u6743\u8fb9\u7684\u56fe","text":"<pre><code>void  WeightedNegative( Table T )\n{   /* T is initialized by Figure 9.30 on p.303 */\nQueue  Q;\nVertex  V, W;\nQ = CreateQueue (NumVertex );  MakeEmpty( Q );\nEnqueue( S, Q ); /* Enqueue the source vertex */\nwhile ( !IsEmpty( Q ) ) { /* each vertex can dequeue at most |V| times */\nV = Dequeue( Q );\nfor ( each W adjacent to V )\nif ( T[ V ].Dist + Cvw &lt; T[ W ].Dist ) {\nT[ W ].Dist = T[ V ].Dist + Cvw;\nT[ W ].Path = V;\nif ( W is not already in Q )\nEnqueue( W, Q );\n} /* end-if update */\n} /* end-while */\nDisposeQueue( Q ); /* free memory */\n}\n/* negative-cost cycle will cause indefinite loop */\n</code></pre>"},{"location":"ds/graph/#_12","title":"\u65e0\u5708\u56fe","text":"<p>\u5982\u679c\u56fe\u662f\u65e0\u5708\u7684\uff0c\u6211\u4eec\u4ee5\u62d3\u6251\u5e8f\u9009\u62e9\u8282\u70b9\u6765\u6539\u8fdb\u7b97\u6cd5\u3002\u5f53\u9009\u62e9\u4e00\u4e2a\u9876\u70b9\u540e\uff0c\u6309\u7167\u62d3\u6251\u5e8f\u4ed6\u6ca1\u6709\u4ece\u672a\u77e5\u9876\u70b9\u53d1\u51fa\u7684\u8fdb\u5165\u8fb9\uff0c\u56e0\u6b64\u4ed6\u7684\u8ddd\u79bb\u4e0d\u53ef\u80fd\u518d\u964d\u4f4e\uff0c\u7b97\u6cd5\u5f97\u4ee5\u4e00\u6b21\u5b8c\u6210\u3002</p> <p>\\(T=O(|V|+|E|)\\) \u800c\u4e14\u4e0d\u9700\u8981\u5806</p> <p>\u5e94\u7528\uff1aAOE (Activity On Edge) \u7f51\u7edc</p> <p>Info</p> <p>digraph: \u6709\u5411\u56fe Multigraph: \u591a\u91cd\u56fe\uff0c\u5373\u6709\u91cd\u8fb9\u7684\u56fe  cycle: \u5708  underlying graph: \u57fa\u7840\u56fe   Adjacency Matrix: \u90bb\u63a5\u77e9\u9635   Adjacency Lists: \u90bb\u63a5\u8868 Adjacency Multilists: \u90bb\u63a5\u591a\u91cd\u8868\u5217  </p>"},{"location":"ds/hash/","title":"\u6563\u5217","text":""},{"location":"ds/hash/#_2","title":"\u57fa\u672c\u601d\u60f3","text":"<p>\u7406\u60f3\u7684\u6563\u5217\u8868\u662f\u4e00\u4e2a\u542b\u6709\u5173\u952e\u5b57\u7684\u5177\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u7ec4\u3002</p> <p>ADT \u6a21\u578b</p> <ul> <li>\u5bf9\u8c61\uff1a\u4e00\u7ec4 \u540d\u79f0-\u5c5e\u6027 \u5bf9\uff0c\u5176\u4e2d\u540d\u79f0\u662f\u552f\u4e00\u7684\u3002</li> <li>\u64cd\u4f5c<ul> <li>\u521b\u5efa\u6563\u5217\u8868</li> <li>\u67e5\u8be2\u5173\u952e\u5b57\u662f\u5426\u5728\u6563\u5217\u8868\u4e2d</li> <li>\u67e5\u8be2\u5173\u952e\u5b57</li> <li>\u63d2\u5165\u5173\u952e\u5b57</li> <li>\u5220\u9664\u5173\u952e\u5b57</li> </ul> </li> </ul> <p>\u5bf9\u6bcf\u4e2a\u6807\u8bc6\u7b26 <code>x</code>, \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6563\u5217\u51fd\u6570 <code>f(x)=</code>position of <code>x</code> in <code>ht[ ]</code> (i.e. the index of the bucket that contains <code>x</code>)  </p> <p>\u8fd9\u91cc\u6211\u4eec\u7528 \\(T\\) \u8868\u793a <code>x</code> \u53ef\u80fd\u7684\u4e0d\u540c\u503c; \\(n\\) \u8868\u793a <code>ht[]</code> \u4e2d\u6240\u6709\u4e0d\u540c\u6807\u8bc6\u7b26\u7684\u4e2a\u6570; \u6807\u8bc6\u7b26\u5bc6\u5ea6\u5b9a\u4e49\u4e3a \\(\\dfrac{n}{T}\\); \u88c5\u8f7d\u5bc6\u5ea6\u5b9a\u4e49\u4e3a \\(\\dfrac{n}{sb}\\) </p> <ul> <li>\u5f53\u6211\u4eec\u628a\u4e24\u4e2a\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u6876\u91cc\u65f6\uff0c\u51b2\u7a81\u53d1\u751f\u4e86(i.e. \\(f(i_1)=f(i_2), i_1\\neq i_2\\))</li> <li>\u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u65b0\u7684\u6807\u8bc6\u7b26\u6620\u5c04\u5230\u4e00\u4e2a\u6ee1\u7684\u6876\u91cc\u65f6\uff0c\u6ea2\u51fa\u53d1\u751f\u4e86  </li> </ul> <p>\u6ca1\u6709\u6ea2\u51fa\u65f6, \\(T_{search} = T_{insert} = T_{delete} = O( 1 )\\)</p>"},{"location":"ds/hash/#_3","title":"\u6563\u5217\u51fd\u6570","text":"<p>\\(f\\) \u8981\u6ee1\u8db3\u7684\u6027\u8d28\uff1a</p> <ul> <li>\u5bb9\u6613\u8ba1\u7b97\uff0c\u6700\u5c0f\u5316\u51b2\u7a81\u7684\u6570\u91cf</li> <li>\\(f\\) \u5e94\u8be5\u662f\u65e0\u504f\u89c1\u7684\uff0c\u5373 \\(\\forall x,i\\) \u6211\u4eec\u6709 \\(P(f(x)=i)=\\dfrac{1}{b}\\). \u8fd9\u6837\u7684\u6563\u5217\u51fd\u6570\u79f0\u4e3a\u5747\u5300\u6563\u5217\u51fd\u6570.  </li> </ul> <p>TableSize \u5e94\u8be5\u662f\u4e00\u4e2a\u7d20\u6570\uff0c\u8fd9\u6837\u5bf9\u968f\u673a\u8f93\u5165\uff0c\u5173\u952e\u5b57\u7684\u5206\u5e03\u6bd4\u8f83\u5747\u5300 \u5982 \\(f(x)=(\\sum x[N-i-1]*32^i)\\%TableSize\\) </p>"},{"location":"ds/hash/#_4","title":"\u5206\u79bb\u94fe\u63a5","text":"<p>\u89e3\u51b3\u51b2\u7a81\u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\u53eb\u4f5c\u5206\u79bb\u94fe\u63a5\u6cd5\u3002\u5176\u505a\u6cd5\u662f\u5c06\u6563\u5217\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u503c\u7684\u6240\u6709\u5143\u7d20\u4fdd\u5b58\u5728\u4e00\u4e2a\u5217\u8868\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u94fe\u8868\u7684\u65b9\u5f0f\u5b58\u50a8\u3002</p> <ul> <li> <p>\u7ed3\u6784\u4f53\u5b9a\u4e49      <p><pre><code>struct  ListNode; typedef  struct  ListNode  *Position; struct  HashTbl; typedef  struct  HashTbl  *HashTable; struct  ListNode { ElementType  Element; Position  Next; }; typedef  Position  List; /* List *TheList will be an array of lists, allocated later */ /* The lists use headers (for simplicity), */ /* though this wastes space */ struct  HashTbl { int  TableSize; List  *TheLists; }; </code></pre> </p> <li> <p>\u521b\u5efa\u7a7a\u8868      <p><pre><code>HashTable  InitializeTable( int TableSize ) {   HashTable  H; int  i; if ( TableSize &lt; MinTableSize ) { Error( \"Table size too small\" );  return NULL;  } H = malloc( sizeof( struct HashTbl ) );  /* Allocate table */\nif ( H == NULL )    FatalError( \"Out of space!!!\" ); H-&gt;TableSize = NextPrime( TableSize );  /* Better be prime */\nH-&gt;TheLists = malloc( sizeof( List ) * H-&gt;TableSize );  /*Array of lists*/\nif ( H-&gt;TheLists == NULL )   FatalError( \"Out of space!!!\" ); for( i = 0; i &lt; H-&gt;TableSize; i++ ) {   /* Allocate list headers */\nH-&gt;TheLists[ i ] = malloc( sizeof( struct ListNode ) ); /* Slow! */\nif ( H-&gt;TheLists[ i ] == NULL )  FatalError( \"Out of space!!!\" ); else    H-&gt;TheLists[ i ]-&gt;Next = NULL;\n} return  H; } </code></pre> </p> <li> <p>\u67e5\u8be2\u5173\u952e\u5b57      <p><pre><code>Position  Find ( ElementType Key, HashTable H ) { Position P; List L; L = H-&gt;TheLists[ Hash( Key, H-&gt;TableSize ) ]; P = L-&gt;Next; while( P != NULL &amp;&amp; P-&gt;Element != Key )  /* Probably need strcmp */ P = P-&gt;Next; return P; } </code></pre> </p> <li> <p>\u63d2\u5165\u5173\u952e\u5b57     \u9996\u5148\u6211\u4eec\u67e5\u627e\u8fd9\u4e2a\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u503c\u5df2\u7ecf\u5b58\u5728\u90a3\u4e48\u6211\u4eec\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002      <p><pre><code>void  Insert ( ElementType Key, HashTable H ) { Position   Pos, NewCell; List  L; Pos = Find( Key, H ); if ( Pos == NULL ) {   /* Key is not found, then insert */\nNewCell = malloc( sizeof( struct ListNode ) ); if ( NewCell == NULL )     FatalError( \"Out of space!!!\" ); else { L = H-&gt;TheLists[ Hash( Key, H-&gt;TableSize ) ]; NewCell-&gt;Next = L-&gt;Next; NewCell-&gt;Element = Key; /* Probably need strcpy! */ L-&gt;Next = NewCell; } } } </code></pre> </p>"},{"location":"ds/hash/#_5","title":"\u5f00\u653e\u5730\u5740","text":"<p>\u5f00\u653e\u5730\u5740\u6cd5\uff0c\u5f53\u6709\u51b2\u7a81\u53d1\u751f\u65f6\uff0c\u5c1d\u8bd5\u9009\u62e9\u5176\u4ed6\u7684\u5355\u5143\uff0c\u76f4\u5230\u627e\u5230\u7a7a\u7684\u5355\u5143\u4e3a\u6b62\u3002 \u4e00\u822c\u5730, \\(h_0(X),h_1(X),\\ldots,\\) \u5176\u4e2d $h_i(X)=(Hash(X)+F(i)) mod TableSize $ \u4e00\u822c\u6765\u8bf4 \\(\\lambda&lt;0.5\\) </p> <pre><code>Algorithm: insert key into an array of hash table\n{\nindex = hash(key);\ninitialize i = 0 ------ the counter of probing;\nwhile ( collision at index ) {\nindex = ( hash(key) + f(i) ) % TableSize;\nif ( table is full )    break;\nelse    i ++;\n}\nif ( table is full )\nERROR (\u201cNo space left\u201d);\nelse\ninsert key at index;\n}\n</code></pre>"},{"location":"ds/hash/#_6","title":"\u7ebf\u6027\u63a2\u6d4b\u6cd5","text":"<p>\u5728\u7ebf\u6027\u63a2\u6d4b\u6cd5\u4e2d\uff0c\u51fd\u6570 \\(F\\) \u662f \\(i\\) \u7684\u7ebf\u6027\u51fd\u6570\uff0c\u5178\u578b\u60c5\u5f62\u662f \\(F(i)=i\\). \u8fd9\u76f8\u5f53\u4e8e\u9010\u4e2a\u63a2\u6d4b\u5355\u5143\uff08\u5fc5\u8981\u65f6\u53ef\u4ee5\u7ed5\u56de\u5230\u7b2c\u4e00\u4e2a\u5355\u5143\uff09\u4ee5\u67e5\u627e\u51fa\u4e00\u4e2a\u7a7a\u5355\u5143\u3002</p> <p>\u53ef\u4ee5\u8bc1\u660e\uff0c\u4f7f\u7528\u7ebf\u6027\u63a2\u6d4b\u7684\u63a2\u6d4b\u6b21\u6570\u5bf9\u4e8e\u63d2\u5165\u548c\u4e0d\u6210\u529f\u7684\u67e5\u627e\u6765\u8bf4\u7ea6\u4e3a \\(\\dfrac{1}{2}(1+\\dfrac{1}{(1-\\lambda)^2})\\) \u6b21; \u5bf9\u4e8e\u6210\u529f\u7684\u67e5\u627e\u6765\u8bf4\u5219\u9700 \\(\\dfrac{1}{2}(1+\\dfrac{1}{1-\\lambda})\\) \u6b21</p>"},{"location":"ds/hash/#_7","title":"\u5e73\u65b9\u63a2\u6d4b\u6cd5","text":"<p>\u5e73\u65b9\u63a2\u6d4b\u6cd5\u662f\u6d88\u9664\u7ebf\u6027\u63a2\u6d4b\u4e2d\u4e00\u6b21\u805a\u96c6\u95ee\u9898\u7684\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5\u3002\u51b2\u7a81\u51fd\u6570\u4e3a\u4e8c\u6b21\u51fd\u6570\uff0c\u4e00\u822c\u4e3a \\(F(i)=i^2\\) </p> <p>\u5b9a\u7406: \u5982\u679c\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\uff0c\u4e14\u8868\u7684\u5927\u5c0f\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f53\u8868\u81f3\u5c11\u6709\u4e00\u534a\u4e3a\u7a7a\u65f6\uff0c\u603b\u80fd\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002</p> <p>\u5bf9\u4e8e\u4efb\u610f\u5143\u7d20 \\(x\\), \u5b83\u6709 \\(\\lceil TableSize/2 \\rceil\\) \u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\u53ef\u80fd\u653e\u7f6e\u8fd9\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6700\u591a $\\lfloor TableSize/2 \\rfloor $ \u4f4d\u7f6e\u88ab\u4f7f\u7528\uff0c\u90a3\u4e48\u603b\u80fd\u627e\u5230\u653e \\(x\\) \u7684\u7a7a\u5355\u5143\u3002</p> <ul> <li> <p>\u67e5\u627e\u5143\u7d20 \\(F(i)=F(i-1)+i^2-(i-1)^2=F(i-1)+2i-1\\)     \u8fd9\u91cc <code>while</code> \u8bed\u53e5\u7684\u6d4b\u8bd5\u987a\u5e8f\u4e0d\u80fd\u6539\u53d8\u3002\u5982\u679c\u662f <code>empty</code>\uff0c\u5219 <code>key</code> \u6ca1\u6709\u5b9a\u4e49\uff0c\u5148\u5224\u65ad\u4f1a\u51fa\u9519\u3002     \u5047\u8bbe\u63a2\u6d4b\u6b65\u6570 i \u4e0d\u8d85\u8fc7 \\(\\dfrac{TS}{2}+1\\) \u6b65\uff0c\u5373\u5047\u8bbe\u8868 \\(&lt;50\\%\\)\u3002\u8fd9\u65f6 <code>CurrentPos+2i-1 &lt;= 2TS-1</code>\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u51cf\u6cd5\u3002</p> <p><pre><code>Position  Find ( ElementType Key, HashTable H ) {   Position  CurrentPos; int  CollisionNum; CollisionNum = 0; CurrentPos = Hash( Key, H-&gt;TableSize ); while( H-&gt;TheCells[ CurrentPos ].Info != Empty &amp;&amp; H-&gt;TheCells[ CurrentPos ].Element != Key ) { CurrentPos += 2 * ++CollisionNum \uf02d 1; if ( CurrentPos &gt;= H-&gt;TableSize )  CurrentPos \uf02d = H-&gt;TableSize; } return CurrentPos; } </code></pre> </p> <li> <p>\u63d2\u5165\u5143\u7d20      <p><pre><code>void  Insert ( ElementType Key, HashTable H ) { Position  Pos; Pos = Find( Key, H ); if ( H-&gt;TheCells[ Pos ].Info != Legitimate ) { /* OK to insert here */ H-&gt;TheCells[ Pos ].Info = Legitimate; H-&gt;TheCells[ Pos ].Element = Key; /* Probably need strcpy */ } } </code></pre> </p> <p>\u6563\u5217\u5230\u540c\u4e00\u4f4d\u7f6e\u4e0a\u7684\u90a3\u4e9b\u5143\u7d20\u5c06\u63a2\u6d4b\u76f8\u540c\u7684\u5907\u9009\u5355\u5143\uff0c\u8fd9\u79f0\u4e3a\u4e8c\u6b21\u805a\u96c6\u3002</p>"},{"location":"ds/hash/#_8","title":"\u53cc\u6563\u5217","text":"<p>\\(f(i)=i*hash_2(X)\\)  \u6211\u4eec\u5728 \\(X\\) \u8ddd\u79bb \\(hash_2(X),2hash_2(X),\\ldots\\) \u7b49\u4f4d\u7f6e\u8fdb\u884c\u63a2\u6d4b\u3002 \u5e38\u7528 \\(hash_2(X)=R-(X mod R)\\), \u5176\u4e2d \\(R\\) \u662f\u4e00\u4e2a\u6bd4 \\(TableSize\\) \u5c0f\u7684\u7d20\u6570\u3002</p> <ul> <li>\u5982\u679c\u6b63\u786e\u5b9e\u73b0\u4e86\u53cc\u91cd\u54c8\u5e0c\uff0c\u6a21\u62df\u8868\u660e\u9884\u671f\u7684\u63a2\u6d4b\u6570\u91cf\u51e0\u4e4e\u4e0e\u968f\u673a\u51b2\u7a81\u89e3\u51b3\u7b56\u7565\u76f8\u540c\u3002</li> <li>\u4e8c\u6b21\u63a2\u6d4b\u4e0d\u9700\u8981\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u54c8\u5e0c\u51fd\u6570\uff0c\u56e0\u6b64\u5728\u5b9e\u8df5\u4e2d\u53ef\u80fd\u66f4\u7b80\u5355\u3001\u66f4\u5feb\u3002</li> </ul>"},{"location":"ds/hash/#_9","title":"\u518d\u6563\u5217","text":"<p>\u5bf9\u4e8e\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\u7684\u5f00\u653e\u5730\u5740\u6563\u5217\u6cd5\uff0c\u5982\u679c\u8868\u7684\u5143\u7d20\u8fc7\u591a\uff0c\u90a3\u4e48\u64cd\u4f5c\u7684\u8fd0\u884c\u65f6\u95f4\u5c06\u5f00\u59cb\u6d88\u8017\u8fc7\u957f\u3002  </p> <ul> <li>\u5efa\u7acb\u4e00\u4e2a\u4e24\u500d\u5927\u7684\u8868</li> <li>\u626b\u63cf\u539f\u59cb\u6563\u5217\u8868</li> <li>\u5229\u7528\u65b0\u7684\u6563\u5217\u51fd\u6570\u5c06\u5143\u7d20\u6620\u5c04\u5230\u65b0\u7684\u6563\u5217\u503c\uff0c\u5e76\u63d2\u5165</li> </ul> <p>\\(T(N)=O(N)\\) </p> <p>\u4ec0\u4e48\u65f6\u5019\u518d\u6563\u5217\uff1f</p> <ul> <li>\u8868\u586b\u6ee1\u4e00\u534a\u5c31\u518d\u6563\u5217</li> <li>\u5f53\u63d2\u5165\u5931\u8d25\u65f6</li> <li>\u5f53\u8868\u8fbe\u5230\u67d0\u4e00\u4e2a\u88c5\u586b\u56e0\u5b50\u65f6\u8fdb\u884c\u518d\u6563\u5217\u3002  </li> </ul> <p>\u901a\u5e38\u5728\u91cd\u54c8\u5e0c\u4e4b\u524d\u5e94\u8be5\u6709 \\(N/2\\) \u4e2a\u63d2\u5165\uff0c\u6240\u4ee5 \\(O(N)\\) \u91cd\u54c8\u5e0c\u53ea\u4f1a\u7ed9\u6bcf\u4e2a\u63d2\u5165\u589e\u52a0\u4e00\u4e2a\u6052\u5b9a\u7684\u4ee3\u4ef7\u3002 \u7136\u800c\uff0c\u5728\u4ea4\u4e92\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u5e78\u7684\u7528\u6237\u7684\u63d2\u5165\u5bfc\u81f4\u91cd\u65b0\u6563\u5217\uff0c\u53ef\u80fd\u4f1a\u770b\u5230\u901f\u5ea6\u51cf\u6162\u3002</p>"},{"location":"ds/heap/","title":"\u4f18\u5148\u961f\u5217\uff08\u5806\uff09","text":""},{"location":"ds/heap/#adt","title":"ADT \u6a21\u578b","text":"<ul> <li>\u5bf9\u8c61\uff1a\u4e00\u4e2a\u6709\u9650\u7684\u6709\u5e8f\u96c6</li> <li>\u64cd\u4f5c\uff1a<ul> <li>\u521d\u59cb\u5316</li> <li>\u63d2\u5165</li> <li>\u5220\u9664\u6700\u5c0f\u7684\u5143\u7d20</li> <li>\u5bfb\u627e\u6700\u5c0f\u7684\u5143\u7d20</li> </ul> </li> </ul>"},{"location":"ds/heap/#_2","title":"\u7b80\u5355\u7684\u5b9e\u73b0","text":"<ul> <li>\u6570\u7ec4\uff1a<ul> <li>\u63d2\u5165\u5143\u7d20\u5230\u672b\u5c3e \\(\\Theta(1)\\) </li> <li>\u627e\u5230\u6700\u5927/\u6700\u5c0f\u5143\u7d20 \\(\\Theta(n)\\), \u5220\u9664\u5143\u7d20\u79fb\u52a8\u6570\u7ec4 \\(O(n)\\)</li> </ul> </li> <li>\u94fe\u8868\uff1a<ul> <li>\u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5f00\u5934 \\(\\Theta(1)\\)</li> <li>\u627e\u5230\u6700\u5927/\u6700\u5c0f\u5143\u7d20 \\(\\Theta(n)\\), \u5220\u9664\u5143\u7d20 \\(\\Theta(1)\\) </li> </ul> </li> <li>\u6709\u5e8f\u6570\u7ec4\uff1a<ul> <li>\u63d2\u5165 \u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e \\(O(n)\\), \u79fb\u52a8\u6570\u7ec4\u5e76\u63d2\u5165\u5143\u7d20 \\(O(n)\\)</li> <li>\u5220\u9664\u5f00\u5934/\u672b\u5c3e\u5143\u7d20 \\(\\Theta(1)\\)</li> </ul> </li> <li>\u6709\u5e8f\u94fe\u8868\uff1a<ul> <li>\u63d2\u5165 \u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e \\(O(n)\\), \u63d2\u5165\u5143\u7d20 \\(\\Theta(1)\\)</li> <li>\u5220\u9664\u5f00\u5934/\u672b\u5c3e\u5143\u7d20 \\(\\Theta(1)\\)</li> </ul> </li> </ul>"},{"location":"ds/heap/#_3","title":"\u4e8c\u53c9\u5806","text":""},{"location":"ds/heap/#_4","title":"\u7ed3\u6784\u6027\u8d28","text":"<p>\u5806\u662f\u4e00\u68f5\u88ab\u5b8c\u5168\u586b\u6ee1\u7684\u4e8c\u53c9\u6811\uff0c\u6709\u53ef\u80fd\u7684\u4f8b\u5916\u662f\u5728\u5e95\u5c42\uff1a\u5e95\u5c42\u4e0a\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u586b\u5165\u3002\u8fd9\u6837\u7684\u6811\u79f0\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u3002</p> <p>\u4e00\u68f5\u9ad8 h \u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u4ecb\u4e8e \\(2^h\\) \u5230 \\(2^{h+1}-1\\) \u4e4b\u95f4\uff0c\u5373\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u662f \\(\\lfloor \\log N\\rfloor\\)</p> <p>\u5bf9\u4e8e\u4e0b\u6807\u4e3a \\(i\\) \u7684\u5143\u7d20\uff0c\u5176\u5de6\u513f\u5b50\u4f4d\u4e8e \\(2i\\) \u4e0a\uff0c\u53f3\u513f\u5b50\u4f4d\u4e8e \\(2i+1\\) \u4e0a\uff0c\u4ed6\u7684\u7236\u4eb2\u4f4d\u4e8e \\(\\lfloor i/2 \\rfloor\\) \u4e0a\u3002</p>"},{"location":"ds/heap/#_5","title":"\u5806\u5e8f\u6027\u8d28","text":"<p>\u5982\u679c\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u4e0d\u5927\u4e8e\u5176\u513f\u5b50\u8282\u70b9\u7684\u503c\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u68f5\u5c0f\u6839\u6811\u3002\u5c0f\u6839\u5806\u5c31\u662f\u6ee1\u8db3\u5c0f\u6839\u6811\u6027\u8d28\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u3002</p>"},{"location":"ds/heap/#_6","title":"\u57fa\u672c\u7684\u5806\u64cd\u4f5c","text":""},{"location":"ds/heap/#_7","title":"\u63d2\u5165","text":"<p>\u5bf9\u4e8e\u65b0\u7684\u8282\u70b9\uff0c\u552f\u4e00\u53ef\u4ee5\u653e\u7684\u4f4d\u7f6e\u5c31\u662f\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u4f4d\u7f6e\uff0c\u5426\u5219\u5806\u5c06\u4e0d\u518d\u662f\u5b8c\u5168\u6811\uff0c\u4f46\u8fd9\u6837\u53ef\u80fd\u7834\u574f\u5806\u7684\u5e8f\uff0c\u6211\u4eec\u4e00\u822c\u91c7\u7528\u4e0a\u6d6e\u7684\u7b56\u7565\u3002</p> <pre><code>/* H-&gt;Element[ 0 ] is a sentinel */ void  Insert( ElementType  X,  PriorityQueue  H ) { int  i; if ( IsFull( H ) ) { Error( \"Priority queue is full\" ); return; } for ( i = ++H-&gt;Size; H-&gt;Elements[ i / 2 ] &gt; X; i /= 2 ) H-&gt;Elements[ i ] = H-&gt;Elements[ i / 2 ]; H-&gt;Elements[ i ] = X; }\n</code></pre> <p>\u6ce8\u610f\u8fd9\u91cc\u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u4ea4\u6362\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4ea4\u6362\u64cd\u4f5c\u7684\u65f6\u95f4\u6210\u672c\u66f4\u9ad8\u3002</p>"},{"location":"ds/heap/#_8","title":"\u5220\u9664\u6700\u5c0f\u5143","text":"<p>\u6211\u4eec\u4e00\u822c\u91c7\u7528\u4e0b\u6ee4\u7684\u7b56\u7565\u3002\u5220\u9664\u6700\u5c0f\u5143\u540e\uff0c\u5728\u6839\u8282\u70b9\u4ea7\u751f\u4e00\u4e2a\u7a7a\u7a74\u3002\u540c\u65f6\u5806\u5c11\u4e86\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5fc5\u987b\u628a\u5806\u6700\u540e\u4e00\u4e2a\u5143\u7d20 X \u79fb\u52a8\u5230\u5806\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u4ece\u6839\u8282\u70b9\u7684\u7a7a\u7a74\u5f00\u59cb\u6211\u4eec\u5c06\u7a7a\u7a74\u7684\u4e24\u4e2a\u513f\u5b50\u4e2d\u7684\u8f83\u5c0f\u8005\u79fb\u5165\u7a7a\u7a74\uff0c\u8fd9\u6837\u5c31\u628a\u7a7a\u7a74\u5f80\u4e0b\u63a8\u4e86\u4e00\u5c42\u3002\u91cd\u590d\u6b65\u9aa4\u76f4\u5230 X \u53ef\u4ee5\u653e\u5165\u7a7a\u7a74\u3002</p> <pre><code>ElementType  DeleteMin( PriorityQueue  H ) { int  i, Child; ElementType  MinElement, LastElement; if ( IsEmpty( H ) ) { Error( \"Priority queue is empty\" ); return  H-&gt;Elements[ 0 ];   } MinElement = H-&gt;Elements[ 1 ];  /* save the min element */\nLastElement = H-&gt;Elements[ H-&gt;Size-- ];  /* take last and reset size */\nfor ( i = 1; i * 2 &lt;= H-&gt;Size; i = Child ) {  /* Find smaller child */ Child = i * 2; if (Child != H-&gt;Size &amp;&amp; H-&gt;Elements[Child+1] &lt; H-&gt;Elements[Child]) Child++;     if ( LastElement &gt; H-&gt;Elements[ Child ] )   /* Percolate one level */ H-&gt;Elements[ i ] = H-&gt;Elements[ Child ]; else     break;   /* find the proper position */\n} H-&gt;Elements[ i ] = LastElement; return  MinElement; }\n</code></pre>"},{"location":"ds/heap/#_9","title":"\u5176\u4ed6\u7684\u5806\u64cd\u4f5c","text":"<p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u5c0f\u6839\u5806\uff0c\u627e\u9664\u4e86\u6700\u5c0f\u5143\u4ee5\u5916\u7684\u5143\u7d20\u90fd\u9700\u8981\u7ebf\u6027\u641c\u7d22\u6574\u4e2a\u5806\u3002</p> <ul> <li><code>DecreaseKey</code> DecreaseKey(P,\\(\\Delta\\),H) \u64cd\u4f5c\u964d\u4f4e\u5728\u4f4d\u7f6e P \u5904\u7684\u5173\u952e\u5b57\u7684\u503c\u3002\u6211\u4eec\u9700\u8981\u4e0a\u6ee4\u64cd\u4f5c\u5bf9\u5806\u8fdb\u884c\u8c03\u6574\u3002</li> <li><code>IncreaseKey</code> IncreaseKey(P,\\(\\Delta\\),H) \u64cd\u4f5c\u589e\u52a0\u5728\u4f4d\u7f6e P \u5904\u7684\u5173\u952e\u5b57\u7684\u503c\u3002\u6211\u4eec\u9700\u8981\u4e0b\u6ee4\u64cd\u4f5c\u5bf9\u5806\u8fdb\u884c\u8c03\u6574\u3002</li> <li><code>Delete</code> Delete(P,H) \u64cd\u4f5c\u5220\u9664\u5806\u4e2d\u4f4d\u7f6e P \u4e0a\u7684\u8282\u70b9\u3002\u8fd9\u4e2a\u64cd\u4f5c\u9996\u5148\u6267\u884c DecreaseKey(P,\\(\\infty\\),H) \u518d\u6267\u884c DeleteMin \u5373\u53ef\u3002</li> <li><code>BuildHeap</code> BuildHeap(H) \u64cd\u4f5c\u628a N \u4e2a\u5173\u952e\u5b57\u4f5c\u4e3a\u8f93\u51fa\u5e76\u628a\u5b83\u4eec\u653e\u5728\u7a7a\u961f\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 N \u4e2a\u76f8\u7ee7\u7684 Insert \u64cd\u4f5c\u5b8c\u6210\u3002 \u4e5f\u53ef\u4ee5\u5c06 N \u4e2a\u5173\u952e\u5b57\u4ee5\u4efb\u610f\u987a\u5e8f\u653e\u5165\u6811\u4e2d\u6784\u6210\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u4ece\u5012\u6570\u7b2c\u4e8c\u5c42\u5f00\u59cb\u4f9d\u6b21 percolate down. \u53ef\u4ee5\u8bc1\u660e\u8fd9\u65f6\u53ea\u9700\u8981\u7ebf\u6027\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u5b8c\u6210\u6811\u7684\u6784\u5efa\u3002</li> </ul> <p>\u5b9a\u7406\uff1a\u5305\u542b \\(2^{h+1}-1\\) \u4e2a\u8282\u70b9\uff0c\u9ad8\u5ea6\u4e3a \\(h\\) \u7684\u7406\u60f3\u4e8c\u53c9\u6811\uff0c\u5176\u8282\u70b9\u7684\u9ad8\u5ea6\u548c\u4e3a \\(2^{h+1}-1-(h+1)\\) \u8bc1\u660e\uff1a\\(S=\\sum\\limits_{i=0}^h 2^i(h-i)\\) \u56e0\u6b64 BuildHeap \u7684\u64cd\u4f5c\u662f\u7ebf\u6027\u7684</p>"},{"location":"ds/heap/#d-heaps","title":"d-Heaps","text":"<p>d-\u5806\u662f\u4e8c\u53c9\u5806\u7684\u63a8\u5e7f\uff0c\u6240\u6709\u7684\u8282\u70b9\u90fd\u6709 d \u4e2a\u513f\u5b50\uff08\u56e0\u6b64\u4e8c\u53c9\u5806\u662f 2-\u5806\uff09 d-\u5806\u6bd4\u4e8c\u53c9\u5806\u6d45\uff0c\u56e0\u6b64 Insert \u64cd\u4f5c\u6539\u8fdb\u4e3a \\(O(\\log_dN)\\) \u4f46\u5bf9\u4e8e\u5927\u7684 d, DeleteMin \u4f1a\u82b1\u8d39\u66f4\u591a\u65f6\u95f4\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u5c42\u90fd\u8981\u627e\u51fa d \u4e2a\u513f\u5b50\u4e2d\u7684\u6700\u5c0f\u8005\u3002\u8fd9\u6837\u64cd\u4f5c\u7684\u7528\u65f6\u5c31\u662f \\(O(d\\log_dN)\\)\u3002\u800c\u4e14\u5f53 d \u4e0d\u662f 2 \u7684\u5e42\u6b21\u65f6\uff0c\u627e\u51fa\u513f\u5b50\u548c\u7236\u4eb2\u4f1a\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\u3002</p> <p>Info</p> <p>Priority queue: \u4f18\u5148\u961f\u5217  Binary heap: \u4e8c\u53c9\u5806 \u5806\u5e8f: heap order \u4e0a\u6d6e\uff1apercolate up \u4e0b\u6ee4\uff1apercolate down  </p>"},{"location":"ds/set/","title":"\u5e76\u67e5\u96c6","text":""},{"location":"ds/set/#_2","title":"\u524d\u7f6e\u77e5\u8bc6","text":"<p>\u4e00\u4e2a\u5173\u7cfb R \u5b9a\u4e49\u5728\u96c6\u5408 S \u4e0a, \u8868\u793a\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u5bf9 \\((a,b),a,b\\in S\\), \\(aRb\\) \u8981\u4e48\u4e3a\u771f\u8981\u4e48\u4e3a\u5047. \u5982\u679c \\(aRb\\) \u4e3a\u771f\uff0c\u90a3\u4e48\u6211\u4eec\u79f0 \\(a\\) \u548c \\(b\\) \u6709\u5173\u7cfb\u3002</p> <p>\u7b49\u4ef7\u5173\u7cfb\u662f\u6ee1\u8db3\u81ea\u53cd\u6027(\\(\\forall a\\in S, aRa\\))\uff0c\u5bf9\u79f0\u6027(\\(aRb\\Leftrightarrow bRa\\))\uff0c\u4f20\u9012\u6027(\\(aRb, bRc \\Rightarrow aRc\\))\u7684\u5173\u7cfb\uff0c\u4e00\u822c\u7528 ~ \u8868\u793a\u7b49\u4ef7\u5173\u7cfb\u3002</p> <p>S \u4e2d\u7684\u4e24\u4e2a\u5143\u7d20 \\(x\\) \\(y\\) \u5728\u540c\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u4e2d\u5f53\u4e14\u4ec5\u5f53 \\(a\\) ~ \\(b\\)</p>"},{"location":"ds/set/#_3","title":"\u52a8\u6001\u7b49\u4ef7\u6027\u95ee\u9898","text":"<ul> <li>\u96c6\u5408\u7684\u5143\u7d20: \\(1,2,3\\ldots,N\\)</li> <li>\u96c6\u5408: \\(S_1,S_2,\\ldots\\) \u4e14 \\(S_i\\cap S_j=\\empty\\) (\u82e5 \\(i\\neq j\\)), \u5373\u96c6\u5408\u4e4b\u95f4\u4e0d\u76f8\u4ea4</li> <li>\u64cd\u4f5c:<ul> <li><code>Find(i)</code> \u8fd4\u56de\u7ed9\u5b9a\u5143\u7d20\u7684\u6240\u5728\u7684\u96c6\u5408\uff08\u7b49\u4ef7\u7c7b\uff09</li> <li><code>Union(i,j)</code> \u6c42\u5e76\u8fd0\u7b97\uff0c\u5c06\u542b\u6709 a \u548c b \u7684\u4e24\u4e2a\u7b49\u4ef7\u7c7b\u5408\u5e76\u4e3a\u4e00\u4e2a\u7b49\u4ef7\u7c7b  </li> </ul> </li> </ul>"},{"location":"ds/set/#_4","title":"\u57fa\u672c\u6570\u636e\u7ed3\u6784","text":"<p>\u6211\u4eec\u7528\u6811\u6765\u8868\u793a\u6bcf\u4e00\u4e2a\u96c6\u5408\uff0c\u6811\u7684\u6839\u547d\u540d\u8fd9\u4e2a\u96c6\u5408\uff08\u4ee3\u8868\u5143\uff09\uff0c\u6811\u7684\u96c6\u5408\u6784\u6210\u4e86\u4e00\u4e2a\u68ee\u6797\u3002 \u521d\u59cb\u65f6\uff0c\u6bcf\u68f5\u6811\u90fd\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u3002\u5f53\u9700\u8981\u6267\u884c <code>Union</code> \u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u6839\u6307\u9488\u6307\u5411\u53e6\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u3002\u5f53\u9700\u8981\u6267\u884c <code>Find</code> \u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u5143\u7d20 X \u4e00\u76f4\u5411\u4e0a\u76f4\u5230\u6839\u4e3a\u6b62\u3002</p> <pre><code>void SetUnion ( DisjSet S, SetType Rt1, SetType Rt2 )\n{    S [ Rt2 ] = Rt1 ;     }\nSetType Find ( ElementType X, DisjSet S )\n{   for ( ; S[X] &gt; 0; X = S[X] );\nreturn  X ;\n}\n</code></pre> <p>\u5b9e\u9645\u8fd0\u7528\u4e2d\uff0c<code>Union</code> \u548c <code>Find</code> \u64cd\u4f5c\u901a\u5e38\u6210\u5bf9\u51fa\u73b0:</p> <pre><code>/* Algorithm using union-find operations */\n{  Initialize  Si = { i }  for  i = 1, ..., 12 ;\nfor  ( k = 1; k &lt;= 9; k++ )  {  /* for each pair  i \uf0ba j */\nif  ( Find( i ) != Find( j ) )\nSetUnion( Find( i ), Find( j ) );\n}\n}\n</code></pre>"},{"location":"ds/set/#_5","title":"\u7075\u5de7\u6c42\u5e76\u7b97\u6cd5","text":"<ul> <li>\u6309\u5927\u5c0f\u6c42\u5e76 \u5373\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u6539\u53d8\u8f83\u5c0f\u7684\u6811 \u8bbe \\(T\\) \u662f\u6309\u5927\u5c0f\u5408\u5e76\u7684 \\(N\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u90a3\u4e48 \\(height(T)\\leq\\lfloor \\log_2N\\rfloor +1\\) (\u53ef\u7528\u5f52\u7eb3\u6cd5\u8bc1\u660e)  \u56e0\u6b64\u5bf9\u4e8e \\(N\\) \u4e2a <code>Union</code> \u64cd\u4f5c \\(M\\) \u4e2a <code>Find</code> \u64cd\u4f5c\uff0c\u6240\u7528\u65f6\u95f4\u4e3a \\(O(N+M\\log_2N)\\)</li> <li>\u6309\u9ad8\u5ea6\u6c42\u5e76 \u5373\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u6539\u53d8\u8f83\u77ee\u7684\u6811</li> </ul>"},{"location":"ds/set/#_6","title":"\u8def\u5f84\u538b\u7f29","text":"<pre><code>SetType  Find ( ElementType  X, DisjSet  S )\n{   ElementType  root,  trail,  lead;\nfor ( root = X; S[ root ] &gt; 0; root = S[ root ] )\n;  /* find the root */\nfor ( trail = X; trail != root; trail = lead ) {\nlead = S[ trail ] ;   S[ trail ] = root ;   }  /* collapsing */\nreturn  root ;\n}\n</code></pre> <p>\u8def\u5f84\u538b\u7f29\u7684\u6548\u679c\u662f\uff0c\u4ece X \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4f7f\u5b83\u7684\u7236\u8282\u70b9\u53d8\u6210\u6839\u3002 \u8def\u5f84\u538b\u7f29\u4e0e\u6309\u5927\u5c0f\u6c42\u5e76\u5b8c\u5168\u517c\u5bb9\uff0c\u53ef\u4ee5\u540c\u65f6\u5b9e\u73b0\uff0c\u4f46\u4e0d\u80fd\u4e0e\u6309\u9ad8\u5ea6\u6c42\u5e76\uff08\u6709\u65f6\u79f0\u4e3a\u79e9\uff09</p>"},{"location":"ds/set/#_7","title":"\u6309\u79e9\u6c42\u5e76\u548c\u8def\u5f84\u538b\u7f29\u7684\u6700\u574f\u60c5\u5f62","text":"<p>\u4ee4 \\(T(M,N)\\) \u6267\u884c \\(M\\geq N\\) \u6b21 <code>Find</code> \u548c \\(N-1\\) \u6b21 <code>Union</code> \u64cd\u4f5c\u7684\u6700\u574f\u7528\u65f6\u3002\u90a3\u4e48 \\(k_1M\\alpha(M,N)\\leq T(M,N)\\leq k_2 M\\alpha(M,N)\\) \u5bf9\u4e8e\u67d0\u4e2a\u6b63\u5e38\u6570 \\(k_1,k_2\\). \u5176\u4e2d \\(\\alpha(M,N)\\) \u662f Ackermann \u51fd\u6570.  </p> \\[ \\begin{align*} A(i,j)=\\left\\{ \\begin{matrix}2^j\\quad    &amp; i=1\\ and\\ j\\geq 1\\\\ A(i-1,2)\\quad &amp; i\\geq 2\\ and\\ j=1\\\\ A(i-1,A(i,j-1))\\ &amp; i\\geq 2\\ and\\ j\\geq 2 \\end{matrix}\\right. \\end{align*} \\] <p>Info</p> <p>\u5e76\u67e5\u96c6: the disjoint set  \u7b49\u4ef7\u5173\u7cfb: equivalence relations \u6309\u5927\u5c0f\u6c42\u5e76: union by size \u8def\u5f84\u538b\u7f29: path compression  </p>"},{"location":"ds/sort/","title":"\u6392\u5e8f","text":"<p>\u6211\u4eec\u5047\u8bbe \"&lt;\" \"&gt;\" \u8fd0\u7b97\u7b26\u5b58\u5728\uff0c\u8fd9\u4e24\u79cd\u8fd0\u7b97\u662f\u4ec5\u6709\u7684\u5141\u8bb8\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u8fd9\u79f0\u4e3a\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f. \u6211\u4eec\u5047\u5b9a N \u4e3a\u8981\u6392\u5e8f\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u6570\u636e\u4ece\u4f4d\u7f6e 0 \u5f00\u59cb\u3002</p>"},{"location":"ds/sort/#_2","title":"\u63d2\u5165\u6392\u5e8f","text":"<p>\u63d2\u5165\u6392\u5e8f\u6709 N-1 \u8d9f(pass), \u5bf9\u4e8e \\(P=1\\) \u5230 \\(P=N-1\\) \u8d9f\u6211\u4eec\u4fdd\u8bc1\u4f4d\u7f6e 0 \u5230\u4f4d\u7f6e \\(P-1\\) \u4e0a\u7684\u5143\u7d20\u662f\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\uff0c\u800c\u7b2c \\(P\\) \u8d9f\u8981\u505a\u7684\u5c31\u662f\u5c06\u4f4d\u7f6e \\(P\\) \u7684\u5143\u7d20\u5411\u5de6\u79fb\u52a8\u5230\u5b83\u5728\u524d \\(P+1\\) \u4e2a\u5143\u7d20\u4e2d\u7684\u6b63\u786e\u4f4d\u7f6e\u4e0a\u3002  </p> <pre><code>void InsertionSort ( ElementType A[ ], int N ) { int j, P; ElementType  Tmp; for ( P = 1; P &lt; N; P++ ) { Tmp = A[ P ];  /* the next coming card */\nfor ( j = P; j &gt; 0 &amp;&amp; A[ j - 1 ] &gt; Tmp; j-- ) A[ j ] = A[ j - 1 ]; /* shift sorted cards to provide a position \n                       for the new coming card */\nA[ j ] = Tmp;  /* place the new card at the proper position */\n}  /* end for-P-loop */\n}\n</code></pre> <ul> <li>\u6700\u4f73\u60c5\u51b5 - \u8f93\u5165\u6570\u636e\u662f\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\uff0c\u90a3\u4e48\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(N)\\) </li> <li>\u6700\u574f\u60c5\u51b5 - \u8f93\u5165\u6570\u636e\u662f\u9006\u5e8f\u7684\uff0c\u90a3\u4e48\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(N^2)\\)</li> </ul>"},{"location":"ds/sort/#_3","title":"\u7b80\u5355\u6392\u5e8f\u7b97\u6cd5\u7684\u4e0b\u754c","text":"<p>\u4e00\u4e2a\u9006\u5e8f\u662f\u6307\u6570\u7ec4\u4e2d \\(i&lt;j\\) \u4f46 \\(A[i]&gt;A[j]\\) \u7684\u5e8f\u5076 \\((A[i],A[j])\\) </p> <p>\u4ea4\u6362\u4e0d\u6309\u539f\u5e8f\u6392\u5217\u7684\u76f8\u90bb\u5143\u7d20\u4f1a\u6070\u597d\u6d88\u9664\u4e00\u4e2a\u9006\u5e8f\uff0c\u56e0\u6b64\u63d2\u5165\u6392\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(I+N)\\). \u5176\u4e2d \\(I\\) \u4e3a\u539f\u59cb\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u6570\uff0c\u5f53\u9006\u5e8f\u6570\u8f83\u5c11\u65f6\u63d2\u5165\u6392\u5e8f\u4ee5\u7ebf\u6027\u65f6\u95f4\u8fd0\u884c\u3002</p> <p>\\(N\\) \u4e2a\u4e92\u5f02\u6570\u7684\u6570\u7ec4\u7684\u5e73\u5747\u9006\u5e8f\u6570\u4e3a \\(\\dfrac{N(N-1)}{4}\\) </p> <p>\u901a\u8fc7\u4ea4\u6362\u76f8\u90bb\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u7684\u4efb\u4f55\u7b97\u6cd5\u5e73\u5747\u9700\u8981 \\(\\Omega(N^2)\\) \u65f6\u95f4</p>"},{"location":"ds/sort/#_4","title":"\u5e0c\u5c14\u6392\u5e8f","text":"<p>\u5e0c\u5c14\u6392\u5e8f\u4f7f\u7528\u4e00\u4e2a \\(h_1,h_2,\\ldots,h_t\\) \u7684\u589e\u91cf\u5e8f\u5217(\\(h_1=1\\)). \\(h_k\\)-sort \u7684\u4e00\u822c\u505a\u6cd5\u662f\uff0c\u5bf9\u4e8e \\(h_k,h_k+1,\\ldots,N-1\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\), \u5c06\u5176\u5143\u7d20\u653e\u5230 \\(i,i-h_k,i-2h_k,\\ldots\\) \u4e2d\u95f4\u7684\u6b63\u786e\u4f4d\u7f6e\u4e0a\u3002\u76f8\u5f53\u4e8e\u5bf9 \\(h_k\\) \u4e2a\u72ec\u7acb\u7684\u5b50\u6570\u7ec4\u5404\u8fdb\u884c\u4e00\u6b21\u63d2\u5165\u6392\u5e8f\u3002\\(h_k\\)-sort \u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \u6211\u4eec\u90fd\u6709 \\(a_i\\leq a_{i+h_k}\\), \u6b64\u65f6\u6210\u79f0\u4e3a \\(h_k\\)-sorted. </p> <p>\u5e0c\u5c14\u6392\u5e8f\u7684\u4e00\u4e2a\u91cd\u8981\u6027\u8d28: \u4e00\u4e2a \\(h_k\\)-sorted \u7684\u6587\u4ef6\uff08\u6b64\u540e\u5c06\u662f \\(h_{k-1}\\)-sorted\uff09\u4fdd\u6301\u4ed6\u7684 \\(h_k\\)-sorted \u6027\u8d28\u3002  </p>"},{"location":"ds/sort/#_5","title":"\u5e0c\u5c14\u589e\u91cf\u5e8f\u5217","text":"<p>\\(h_t=\\lfloor N/2 \\rfloor, h_k=\\lfloor h_{k+1}/2 \\rfloor\\)(\u53ef\u4ee5\u6709\u66f4\u597d\u7684\u589e\u91cf\u5e8f\u5217)</p> <pre><code>void Shellsort( ElementType A[ ], int N ) { int  i, j, Increment; ElementType  Tmp; for ( Increment = N / 2; Increment &gt; 0; Increment /= 2 )  /*h sequence */\nfor ( i = Increment; i &lt; N; i++ ) { /* insertion sort */\nTmp = A[ i ]; for ( j = i; j &gt;= Increment; j - = Increment ) if( Tmp &lt; A[ j - Increment ] ) A[ j ] = A[ j - Increment ]; else break; A[ j ] = Tmp; } /* end for-I and for-Increment loops */\n}\n</code></pre> <ul> <li> <p>\u6700\u574f\u60c5\u5f62\u5206\u6790  </p> <p>\u4f7f\u7528\u5e0c\u5c14\u589e\u91cf\u65f6\u7684\u5e0c\u5c14\u6392\u5e8f\u7684\u6700\u574f\u60c5\u5f62\u8fd0\u884c\u65f6\u95f4\u4e3a \\(\\Theta(N^2)\\) </p> </li> <li> <p>Hibbard \u589e\u91cf\u5e8f\u5217 \\(h_k= 2^k-1\\), \u4e14\u5176\u6700\u574f\u60c5\u5f62\u4e0b\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(N^{3/2})\\)</p> </li> </ul>"},{"location":"ds/sort/#_6","title":"\u5806\u6392\u5e8f","text":"<p>\u5982\u679c\u6211\u4eec\u5148 <code>BuildHeap</code>, \u518d Delete N \u6b21\u6700\u5c0f\u5143\u7d20\uff0c\u8fd9\u6837\u9700\u8981\u591a\u4f7f\u7528\u4e00\u4e2a\u9644\u52a0\u6570\u7ec4\uff0c\u4f7f\u5f97\u5b58\u50a8\u9700\u6c42\u589e\u52a0\u4e00\u500d\u3002  </p> <p>\u6bcf\u6b21 <code>DeleteMin</code> \u540e\uff0c\u5806\u7684\u5927\u5c0f\u7f29\u5c0f\u4e86 1, \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u5806\u4e2d\u6700\u540e\u7684\u5355\u5143\u6765\u5b58\u653e\u521a\u521a\u5220\u53bb\u7684\u5143\u7d20\u3002  </p> <p>\u6574\u4f53\u6d41\u7a0b\uff1a</p> <ul> <li>\u4ee5\u7ebf\u6027\u65f6\u95f4\u5efa\u4e00\u4e2a Max \u5806</li> <li>\u5c06\u5806\u4e2d\u6700\u540e\u5143\u7d20\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff0c\u7f29\u51cf\u5806\u7684\u5927\u5c0f\u5e76\u8fdb\u884c\u4e0b\u6ee4\u3002\u6267\u884c N-1 \u6b21 <code>DeleteMax</code> \u64cd\u4f5c  </li> <li>\u7b97\u6cd5\u7ec8\u6b62\u65f6\uff0c\u6570\u7ec4\u6309\u987a\u5e8f\u5373\u4e3a\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u7ed3\u679c</li> </ul> <pre><code>void Heapsort( ElementType A[ ], int N ) {  int i; for ( i = N / 2; i &gt;= 0; i - - ) /* BuildHeap */ PercDown( A, i, N ); for ( i = N - 1; i &gt; 0; i - - ) { Swap( &amp;A[ 0 ], &amp;A[ i ] ); /* DeleteMax */ PercDown( A, 0, i ); } }\n</code></pre> <p>\u6ce8\uff1a\u8fd9\u91cc\u7684\u5806\u6211\u4eec\u662f\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u56e0\u6b64\u5de6\u513f\u5b50\u5e94\u8be5\u662f <code>2*i+1</code> </p> <p>\u5bf9 N \u4e2a\u4e92\u5f02\u9879\u7684\u968f\u673a\u6392\u5217\u8fdb\u884c\u5806\u6392\u5e8f\uff0c\u5e73\u5747\u6bd4\u8f83\u6b21\u6570\u4e3a \\(2N\\log N-O(N\\log\\log N)\\)</p>"},{"location":"ds/sort/#_7","title":"\u5f52\u5e76\u6392\u5e8f","text":"<p>\u57fa\u672c\u64cd\u4f5c\uff1a\u5408\u5e76\u4e24\u4e2a\u5df2\u6392\u5e8f\u7684\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u7684\u65b9\u6cd5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u5b8c\u6210\u4e24\u4e2a\u8868\u7684\u5408\u5e76\uff0c\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b</p> <ul> <li>\u53d6\u4e24\u4e2a\u8f93\u5165\u6570\u7ec4 A \u548c B, \u4e00\u4e2a\u8f93\u51fa\u6570\u7ec4 C, \u4ee5\u53ca\u4e09\u4e2a\u8ba1\u6570\u5668 Aptr, Bptr, Cptr, \u5206\u522b\u5bf9\u5e94\u6570\u7ec4\u7684\u5f00\u7aef\u3002</li> <li>\u6bcf\u6b21 <code>A[Aptr]</code> \u548c <code>B[Bptr]</code> \u4e2d\u7684\u8f83\u5c0f\u8005\u4f1a\u88ab\u62f7\u8d1d\u5230 C \u4e2d\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\uff0c\u76f8\u5173\u7684\u8ba1\u6570\u5668\u5411\u524d\u63a8\u8fdb\u4e00\u6b65\u3002</li> <li>\u5f53\u4e24\u4e2a\u8f93\u5165\u8868\u4e2d\u6709\u4e00\u4e2a\u7528\u5b8c\u65f6\uff0c\u5c06\u53e6\u4e00\u4e2a\u8868\u7684\u5269\u4f59\u90e8\u5206\u62f7\u8d1d\u5230 C \u4e2d\u3002</li> <li>\u6211\u4eec\u6700\u591a\u8fdb\u884c \\(N-1\\) \u6b21\u6bd4\u8f83\uff0c\u56e0\u6b64\u5408\u5e76\u65f6\u95f4\u663e\u7136\u662f\u7ebf\u6027\u7684\u3002</li> </ul> <p>\u56e0\u6b64\u5f52\u5e76\u6392\u5e8f\u7684\u6d41\u7a0b\u5c31\u662f\uff0c\u5982\u679c <code>N=1</code> \u90a3\u4e48\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u9700\u8981\u6392\u5e8f\uff0c\u7b54\u6848\u662f\u663e\u7136\u7684\uff1b\u5426\u5219\u9012\u5f52\u5730\u5c06\u524d\u534a\u90e8\u5206\u6570\u636e\u548c\u540e\u534a\u90e8\u5206\u6570\u636e\u5404\u81ea\u5f52\u5e76\u6392\u5e8f\uff0c\u5f97\u5230\u6392\u5e8f\u540e\u7684\u4e24\u90e8\u5206\u6570\u636e\uff0c\u7136\u540e\u4f7f\u7528\u521a\u521a\u63cf\u8ff0\u7684\u5408\u5e76\u64cd\u4f5c\u5c06\u8fd9\u4e24\u4e2a\u90e8\u5206\u5408\u5e76\u5230\u4e00\u8d77\u3002  </p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u9012\u5f52\u8c03\u7528 Merge \u90fd\u5c40\u90e8\u58f0\u660e\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\uff0c\u90a3\u4e48\u4efb\u610f\u65f6\u523b\u5c31\u4f1a\u6709 \\(\\log N\\) \u4e2a\u4e34\u65f6\u6570\u7ec4\u5904\u4e8e\u6d3b\u52a8\u671f\uff0c\u8fd9\u5bf9\u4e8e\u5c0f\u5185\u5b58\u7684\u673a\u5668\u662f\u81f4\u547d\u7684\u3002\u6ce8\u610f\u5230 Merge \u53ea\u5728\u6bcf\u6b21\u9012\u5f52\u8c03\u7528\u7684\u6700\u540e\u4e00\u884c\uff0c\u56e0\u6b64\u4efb\u4f55\u65f6\u523b\u53ea\u9700\u8981\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u6d3b\u52a8\uff0c\u800c\u4e14\u53ef\u4ee5\u4f7f\u7528\u8be5\u4e34\u65f6\u6570\u7ec4\u7684\u4efb\u610f\u90e8\u5206\uff0c\u8fd9\u6837\u8282\u7ea6\u4e86\u7a7a\u95f4\u3002</p> <pre><code>void MSort( ElementType A[ ], ElementType TmpArray[ ], int Left, int Right ) {   int  Center; if ( Left &lt; Right ) {  /* if there are elements to be sorted */\nCenter = ( Left + Right ) / 2; MSort( A, TmpArray, Left, Center );     /* T( N / 2 ) */\nMSort( A, TmpArray, Center + 1, Right );    /* T( N / 2 ) */\nMerge( A, TmpArray, Left, Center + 1, Right );  /* O( N ) */\n} } void Mergesort( ElementType A[ ], int N ) {   ElementType  *TmpArray;  /* need O(N) extra space */\nTmpArray = malloc( N * sizeof( ElementType ) ); if ( TmpArray != NULL ) { MSort( A, TmpArray, 0, N - 1 ); free( TmpArray ); } else  FatalError( \"No space for tmp array!!!\" ); }\n/* Lpos = start of left half, Rpos = start of right half */ void Merge( ElementType A[ ], ElementType TmpArray[ ], int Lpos, int Rpos, int RightEnd ) {   int  i, LeftEnd, NumElements, TmpPos; LeftEnd = Rpos - 1; TmpPos = Lpos; NumElements = RightEnd - Lpos + 1; while( Lpos &lt;= LeftEnd &amp;&amp; Rpos &lt;= RightEnd ) /* main loop */ if ( A[ Lpos ] &lt;= A[ Rpos ] ) TmpArray[ TmpPos++ ] = A[ Lpos++ ]; else TmpArray[ TmpPos++ ] = A[ Rpos++ ]; while( Lpos &lt;= LeftEnd ) /* Copy rest of first half */ TmpArray[ TmpPos++ ] = A[ Lpos++ ]; while( Rpos &lt;= RightEnd ) /* Copy rest of second half */ TmpArray[ TmpPos++ ] = A[ Rpos++ ]; for( i = 0; i &lt; NumElements; i++, RightEnd - - ) /* Copy TmpArray back */ A[ RightEnd ] = TmpArray[ RightEnd ]; }\n</code></pre> <ul> <li>\u8fd0\u884c\u65f6\u95f4\u5206\u6790  </li> </ul> \\[ \\begin{align*} T(1) &amp; = 1\\\\ T(N) &amp; = 2T(N/2)+O(N) \\\\     &amp; = 2^kT(N/2^k) + k*O(N)\\\\     &amp; = N *T(1) +\\log N *O(N)\\\\     &amp; = O(N+N\\log N) \\end{align*} \\] <p>\u6ce8\uff1aMergesort \u9700\u8981\u7ebf\u6027\u5916\u90e8\u5185\u5b58\uff0c\u590d\u5236\u6570\u7ec4\u7f13\u6162\uff0c\u56e0\u6b64\u4e0d\u9002\u5408\u7528\u4e8e\u5185\u90e8\u6392\u5e8f\uff0c\u4f46\u5bf9\u4e8e\u5916\u90e8\u6392\u5e8f\u662f\u6709\u7528\u7684\u3002</p>"},{"location":"ds/sort/#_8","title":"\u5feb\u901f\u6392\u5e8f","text":"<p>\u5feb\u901f\u6392\u5e8f\u662f\u5728\u5b9e\u8df5\u4e2d\u5df2\u77e5\u7684\u6700\u5feb\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u662f \\(O(N\\log N)\\) \u5feb\u901f\u6392\u5e8f\u7684\u7b97\u6cd5\u6d41\u7a0b\uff1a\uff08\u5c06\u6570\u7ec4 S \u6392\u5e8f\uff09</p> <ul> <li>\u5982\u679c S \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u662f 0 \u6216\u8005 1 \u5219\u8fd4\u56de</li> <li>\u4ece S \u4e2d\u53d6\u4efb\u610f\u5143\u7d20\u4e3a\u4e3b\u5143</li> <li>\u5c06 \\(S-\\{v\\}\\) \u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408 \\(S_1=\\{x\\in S-\\{v\\}|x\\leq v\\}, S_2=\\{x\\in S-\\{v\\}|x\\geq v\\}\\) </li> <li>\u8fd4\u56de \\(quicksort(S_1), v, quicksort(S_2)\\) </li> </ul> <p>\u5bf9\u4e8e\u4e0d\u540c\u4e3b\u5143\u7684\u9009\u53d6\uff0c\u5206\u5272\u7684\u63cf\u8ff0\u4e0d\u662f\u552f\u4e00\u7684\u3002</p>"},{"location":"ds/sort/#_9","title":"\u9009\u53d6\u4e3b\u5143","text":"<ul> <li>\u9519\u8bef\u7684\u65b9\u6cd5 <code>Pivot=A[0]</code> \u8fd9\u6837\u5982\u679c\u8f93\u5165\u662f\u987a\u5e8f\u6216\u8005\u53cd\u5e8f\u7684\uff0c\u90a3\u4e48\u6bcf\u6b21\u5212\u5206\u6240\u6709\u5143\u7d20\u5168\u90e8\u843d\u5165 \\(S_1\\) \u6216\u8005 \\(S_2\\), \u9009\u53d6\u4e3b\u5143\u5e76\u6ca1\u6709\u5e26\u6765\u4efb\u4f55\u5e2e\u52a9\uff0c\u5b8c\u6210\u6392\u5e8f\u9700\u8981 \\(O(N^2)\\) \u7684\u65f6\u95f4\u3002  </li> <li>\u5b89\u5168\u505a\u6cd5 <code>Pivot = random select from A[]</code> \u4f46\u968f\u673a\u6570\u7684\u4ea7\u751f\u662f\u6602\u8d35\u7684  </li> <li>\u4e09\u6570\u4e2d\u503c\u5206\u5272\u6cd5 <code>Pivot = median(left, center, right)</code> \u4e00\u7ec4 N \u4e2a\u6570\u7684\u4e2d\u503c\u662f\u7b2c \\(\\lceil N/2 \\rceil\\) \u5927\u7684\u6570\uff0c\u4e3b\u5143\u6700\u597d\u662f\u9009\u62e9\u4e2d\u503c\uff0c\u4f46\u8fd9\u5f88\u96be\u7b97\u51fa\uff0c\u800c\u4e14\u4f1a\u660e\u663e\u51cf\u6162\u6392\u5e8f\u7684\u901f\u5ea6\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5de6\u7aef\u3001\u53f3\u7aef\u548c\u4e2d\u5fc3\u4f4d\u7f6e\u4e0a\u7684\u4e09\u4e2a\u5143\u7d20\u7684\u4e2d\u503c\u4f5c\u4e3a\u4e3b\u5143\u3002 \u8fd9\u6837\u6d88\u9664\u4e86\u9519\u8bef\u65b9\u6cd5\u4e2d\u7684\u6700\u574f\u60c5\u5f62\uff0c\u51cf\u5c11\u4e86\u5feb\u901f\u6392\u5e8f\u5927\u6982 5% \u7684\u8fd0\u884c\u65f6\u95f4\u3002  </li> </ul>"},{"location":"ds/sort/#_10","title":"\u5212\u5206\u7b56\u7565","text":"<p>\u9996\u5148\u6211\u4eec\u5c06\u4e3b\u5143\u548c\u6700\u540e\u7684\u5143\u7d20\u4ea4\u6362\uff0c\u4f7f\u5f97\u4e3b\u5143\u79bb\u5f00\u5c06\u8981\u5206\u5272\u7684\u6570\u636e\u6bb5\uff0c\u968f\u540e i \u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0cj \u4ece\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u3002\uff08\u5047\u8bbe\u6240\u6709\u5143\u7d20\u4e92\u5f02\uff09  </p> <ul> <li>\u5f53 i \u5728 j \u7684\u5de6\u8fb9\u65f6\uff0c\u6211\u4eec\u5c06 i \u53f3\u79fb\uff0c\u79fb\u8fc7\u90a3\u4e9b\u5c0f\u4e8e\u4e3b\u5143\u7684\u5143\u7d20\uff0c\u5e76\u5c06 j \u5de6\u79fb\uff0c\u79fb\u8fc7\u90a3\u4e9b\u5927\u4e8e\u4e3b\u5143\u7684\u5143\u7d20\u3002</li> <li>\u5f53 i \u548c j \u505c\u6b62\u65f6\uff0ci \u6307\u5411\u4e00\u4e2a\u5927\u5143\u7d20\u800c j \u6307\u5411\u4e00\u4e2a\u5c0f\u5143\u7d20\uff0c\u5982\u679c i \u5728 j \u7684\u5de6\u8fb9\u90a3\u4e48\u5c06\u8fd9\u4e24\u4e2a\u5143\u7d20\u4e92\u6362\u3002</li> <li>\u76f4\u5230 i \u548c j \u5f7c\u6b64\u4ea4\u9519\u65f6\uff0c\u505c\u6b62\u4ea4\u6362</li> <li>\u5c06 i \u548c\u4e3b\u5143\u4ea4\u6362</li> </ul> <p>\u5bf9\u4e8e\u90a3\u4e9b\u7b49\u4e8e\u4e3b\u5143\u7684\u5173\u952e\u5b57\uff0c\u6211\u4eec\u91c7\u7528\u505c\u6b62 i j \u5e76\u4ea4\u6362\u7684\u7b56\u7565\u3002\u56e0\u4e3a\u82e5 i j \u4e0d\u505c\u6b62\uff0c\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u6240\u6709\u5173\u952e\u5b57\u90fd\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u6709\u7a0b\u5e8f\u9632\u6b62 i j \u8d85\u51fa\u6570\u7ec4\u7684\u754c\u9650\u3002\u6700\u540e\u6211\u4eec\u4f1a\u628a\u4e3b\u5143\u4ea4\u6362\u5230 i \u7684\u6700\u540e\u4f4d\u7f6e\u4e0a\uff0c\u4e5f\u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u6837\u6211\u4eec\u53c8\u9677\u5165\u4e86\u6700\u574f\u60c5\u51b5\u3002</p>"},{"location":"ds/sort/#_11","title":"\u5c0f\u6570\u7ec4","text":"<p>\u5bf9\u4e8e\u5f88\u5c0f\u7684\u6570\u7ec4(\\(N\\leq 20\\))\u5feb\u901f\u6392\u5e8f\u4e0d\u5982\u63d2\u5165\u6392\u5e8f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u622a\u6b62\u8303\u56f4 Cutoff(e.g. 10). \u5f53 N \u5c0f\u4e8e\u9608\u503c\u7684\u65f6\u5019\u91c7\u7528\u63d2\u5165\u6392\u5e8f.  </p>"},{"location":"ds/sort/#_12","title":"\u5b9e\u73b0","text":"<pre><code>void  Quicksort( ElementType A[ ], int N ) { Qsort( A, 0, N - 1 ); /* A:   the array   */\n/* 0:   Left index  */\n/* N \u2013 1: Right index   */\n}\n/* Return median of Left, Center, and Right */ /* Order these and hide the pivot */ ElementType Median3( ElementType A[ ], int Left, int Right ) { int  Center = ( Left + Right ) / 2; if ( A[ Left ] &gt; A[ Center ] ) Swap( &amp;A[ Left ], &amp;A[ Center ] ); if ( A[ Left ] &gt; A[ Right ] ) Swap( &amp;A[ Left ], &amp;A[ Right ] ); if ( A[ Center ] &gt; A[ Right ] ) Swap( &amp;A[ Center ], &amp;A[ Right ] ); /* Invariant: A[ Left ] &lt;= A[ Center ] &lt;= A[ Right ] */ Swap( &amp;A[ Center ], &amp;A[ Right - 1 ] ); /* Hide pivot */ /* only need to sort A[ Left + 1 ] \u2026 A[ Right \u2013 2 ] */\nreturn  A[ Right - 1 ];  /* Return pivot */ }\nvoid  Qsort( ElementType A[ ], int Left, int Right ) {   int  i,  j; ElementType  Pivot; if ( Left + Cutoff &lt;= Right ) {  /* if the sequence is not too short */\nPivot = Median3( A, Left, Right );  /* select pivot */\ni = Left;     j = Right \u2013 1;  /* why not set Left+1 and Right-2? */\nfor( ; ; ) { while ( A[ + +i ] &lt; Pivot ) { }  /* scan from left */\nwhile ( A[ \u2013 \u2013j ] &gt; Pivot ) { }  /* scan from right */\nif ( i &lt; j ) Swap( &amp;A[ i ], &amp;A[ j ] );  /* adjust partition */\nelse     break;  /* partition done */\n} Swap( &amp;A[ i ], &amp;A[ Right - 1 ] ); /* restore pivot */ Qsort( A, Left, i - 1 );      /* recursively sort left part */\nQsort( A, i + 1, Right );   /* recursively sort right part */\n}  /* end if - the sequence is long */\nelse /* do an insertion sort on the short subarray */ InsertionSort( A + Left, Right - Left + 1 );\n}\n</code></pre> <ul> <li>\u5728\u6700\u5f00\u59cb\u9009\u53d6\u4e3b\u5143\u65f6\uff0c\u6211\u4eec\u5c06 <code>A[left],A[mid],A[Right]</code> \u8fdb\u884c\u6392\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c06\u8f83\u5c0f\u503c\u653e\u5728\u4e86\u6700\u5de6\u8fb9\uff0c\u8f83\u5927\u503c\u653e\u5728\u4e86\u6700\u53f3\u8fb9\uff0c\u8fd9\u7b26\u5408\u5206\u5272\u7684\u8981\u6c42\u3002\u6b64\u5916\u7531\u4e8e <code>A[left]</code> \u6bd4\u4e3b\u5143\u5c0f\uff0c\u6211\u4eec\u4e0d\u7528\u62c5\u5fc3 j \u8d8a\u754c\u3002</li> </ul>"},{"location":"ds/sort/#_13","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<p>\\(T(N)=T(i)+T(N-i-1+)+cN\\) \u5176\u4e2d \\(i=|S_1|\\) </p> <ul> <li>\u6700\u574f\u60c5\u5f62\uff1a\u4e3b\u5143\u59cb\u7ec8\u662f\u6700\u5c0f\u5143\u7d20\uff0c\u6b64\u65f6 \\(i=0\\) \u5219\u9012\u63a8\u5173\u7cfb\u4e3a \\(T(N)=T(N-1)+cN,N&gt;1\\) \u90a3\u4e48 \\(T(N)=T(1)+d\\sum\\limits_{i=2}^N i=O(N^2)\\) </li> <li>\u6700\u597d\u60c5\u5f62\uff1a\u4e3b\u5143\u6b63\u597d\u4f4d\u4e8e\u4e2d\u95f4 \\(T(N)=2T(N/2)+cN\\Rightarrow T(N)=O(N\\log N)\\) </li> <li>\u5e73\u5747\u60c5\u5f62\uff1a\\(T(N)=\\dfrac{2}{N}\\sum\\limits_{j=0}^{N-1}T(j)+cN\\Rightarrow T(N)=O(N\\log N)\\)</li> </ul>"},{"location":"ds/sort/#_14","title":"\u5927\u578b\u7ed3\u6784\u7684\u6392\u5e8f","text":"<p>\u4ea4\u6362\u4e24\u4e2a\u5927\u578b\u7684\u7ed3\u6784\u53ef\u80fd\u662f\u975e\u5e38\u6602\u8d35\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8ba9\u8f93\u5165\u6570\u7ec4\u5305\u542b\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\uff0c\u901a\u8fc7\u6bd4\u8f83\u6307\u9488\u6307\u5411\u7684\u5173\u952e\u5b57\uff0c\u5fc5\u8981\u65f6\u4ea4\u6362\u6307\u9488\u6765\u8fdb\u884c\u6392\u5e8f\u3002</p>"},{"location":"ds/sort/#_15","title":"\u6392\u5e8f\u7684\u4e00\u822c\u4e0b\u754c","text":"<p>\u53ea\u4f7f\u7528\u6bd4\u8f83\u7684\u4efb\u610f\u6392\u5e8f\u7b97\u6cd5\u6700\u574f\u60c5\u5f62\u4e0b\u90fd\u9700\u8981 \\(\\Omega(N\\log  N)\\) </p> <p>\u4f7f\u7528\u51b3\u7b56\u6811\u8bc1\u660e\uff1a\u5171 \\(N!\\) \u79cd\u6392\u5e8f\u53ef\u80fd\uff0c\u56e0\u6b64\u51b3\u7b56\u4e8c\u53c9\u6811\u6709 \\(N!\\) \u7247\u53f6\u5b50\uff0c\u5219\u6811\u7684\u6df1\u5ea6\u81f3\u5c11\u4e3a \\(\\log(N!)=\\Omega(N\\log N)\\) </p>"},{"location":"ds/sort/#_16","title":"\u6876\u6392\u5e8f","text":"<p>\u82e5\u8f93\u5165\u6570\u636e \\(A_1,A_2,\\ldots,A_N\\) \u90fd\u5c0f\u4e8e \\(M\\), \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(M\\) \u7684 <code>Count</code> \u6570\u7ec4\uff0c\u521d\u59cb\u5316\u4e3a\u5168 0. \u4e8e\u662f <code>Count</code> \u6709 \\(M\\) \u4e2a\u6876\uff0c\u8bfb\u5165\u5230 \\(A_i\\) \u65f6 <code>Count[Ai]</code> \u81ea\u589e\u4e00\u3002\u6240\u6709\u6570\u636e\u8bfb\u5b8c\u540e\u626b\u63cf\u6570\u7ec4 <code>Count</code> \u6253\u5370\u6392\u5e8f\u540e\u7684\u8868\u3002  </p> <pre><code>{\ninitialize count[ ];\nwhile (read in a student\u2019s record)\ninsert to list count[stdnt.grade];\nfor (i=0; i&lt;M; i++) {\nif (count[i])\noutput list count[i];\n}\n}\n</code></pre> <p>\\(O(M+N)\\)</p> <p>LSB MSB</p>"},{"location":"ds/tree/","title":"\u6811","text":""},{"location":"ds/tree/#_2","title":"\u9884\u5907\u77e5\u8bc6","text":""},{"location":"ds/tree/#_3","title":"\u57fa\u672c\u6982\u5ff5","text":"<ul> <li>\u6811\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u96c6\u5408\u3002\u5f53\u96c6\u5408\u975e\u7a7a\u65f6\uff0c\u6811\u5305\u62ec<ul> <li>\u6839</li> <li>0 \u6216\u591a\u4e2a\u975e\u7a7a\u7684\u5b50\u6811 \\(T_1,T_2,\\ldots,T_k\\)\uff0c\u8fd9\u4e9b\u5b50\u6811\u4e2d\u6bcf\u4e00\u68f5\u5b50\u6811\u90fd\u88ab\u6765\u81ea\u6839 r \u7684\u4e00\u6761\u6709\u5411\u7684\u8fb9\u6240\u8fde\u63a5\u3002</li> </ul> </li> <li>\u6bcf\u4e00\u68f5\u5b50\u6811\u7684\u6839\u53eb\u505a\u6839 r \u7684\u513f\u5b50\uff0c\u800c r \u662f\u6bcf\u4e00\u68f5\u5b50\u6811\u7684\u6839\u7684\u7236\u4eb2\u3002</li> <li>\u4e00\u68f5\u6811\u662f \\(N\\) \u4e2a\u8282\u70b9\u548c \\(N-1\\) \u6761\u8fb9\u7684\u96c6\u5408\u3002</li> <li>\u6ca1\u6709\u513f\u5b50\u7684\u8282\u70b9\u79f0\u4e3a\u6811\u53f6</li> <li>\u5177\u6709\u76f8\u540c\u7236\u4eb2\u7684\u8282\u70b9\u79f0\u4e3a\u5144\u5f1f</li> <li>\u4e00\u4e2a\u70b9\u7684\u5ea6\uff0c\u662f\u8fd9\u4e2a\u70b9\u7684\u513f\u5b50\u6570\u91cf</li> <li>\u4e00\u68f5\u6811\u7684\u5ea6\uff0c\u662f\u8fd9\u68f5\u6811\u91cc\u70b9\u7684\u5ea6\u6570\u7684\u6700\u5927\u503c\uff0c\u5373 \\(\\max\\limits_{node\\in tree}\\{deg(node)\\}\\) </li> <li>\u4ece\u8282\u70b9 \\(n_1\\) \u5230 \\(n_k\\) \u7684\u8def\u5f84\u5b9a\u4e49\u4e3a \\(n_1,n_2,\\ldots,n_k\\) \u7684\u4e00\u4e2a\u5e8f\u5217\uff0c\u4f7f\u5f97\u5bf9\u4e8e \\(1\\leq i &lt; k\\) \u8282\u70b9 \\(n_i\\) \u662f \\(n_{i+1}\\) \u7684\u7236\u4eb2\u3002\u8fd9\u6761\u8def\u5f84\u662f\u552f\u4e00\u7684\u3002</li> <li>\u8def\u5f84\u7684\u957f\u5ea6\u5c31\u662f\u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u6570\u91cf</li> <li>\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9 \\(n_i\\), \\(n_i\\) \u7684\u6df1\u5ea6\u4e3a\u4ece\u6839\u5230 \\(n_i\\) \u7684\u552f\u4e00\u8def\u5f84\u7684\u957f\u5ea6\u3002</li> <li>\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9 \\(n_i\\), \\(n_i\\) \u7684\u9ad8\u5ea6\u4e3a\u4ece \\(n_i\\) \u5230\u4e00\u7247\u6811\u53f6\u7684\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u3002</li> <li>\u4e00\u68f5\u6811\u7684\u9ad8\u5ea6/\u6df1\u5ea6\uff1a\u6839\u7684\u9ad8\u5ea6</li> <li>\u5982\u679c\u5b58\u5728\u4ece \\(n_1\\) \u5230 \\(n_2\\) \u7684\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48 \\(n_1\\) \u662f \\(n_2\\) \u7684\u4e00\u4f4d\u7956\u5148\uff0c\u800c \\(n_2\\) \u662f \\(n_1\\) \u7684\u4e00\u4e2a\u540e\u88d4\uff0c\u5982\u679c \\(n_1\\neq n_2\\) \u79f0\u4e3a\u771f\u7956\u5148\u548c\u771f\u540e\u88d4\u3002</li> </ul>"},{"location":"ds/tree/#_4","title":"\u5b9e\u73b0","text":"<p>\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528 FirstChild-NextSibling Representation, \u5c06\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u653e\u5728\u6811\u8282\u70b9\u7684\u94fe\u8868\u4e2d</p> <pre><code>typedef struct TreeNode *PrtToNode;\nstruct Tree Node {\nElementType Element;\nPtrToNode FirstChild;\nPtrToNode NextSibling;\n}\n</code></pre>"},{"location":"ds/tree/#_5","title":"\u4e8c\u53c9\u6811","text":"<p>\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u4e0d\u80fd\u591a\u4e8e\u4e24\u4e2a\u3002</p>"},{"location":"ds/tree/#_6","title":"\u8868\u8fbe\u5f0f\u6811","text":"<p>\u8868\u8fbe\u5f0f\u6811\u7684\u6811\u53f6\u662f\u64cd\u4f5c\u6570\uff0c\u6bd4\u5982\u5e38\u6570\u6216\u53d8\u91cf\uff0c\u800c\u5176\u4ed6\u7684\u8282\u70b9\u4e3a\u64cd\u4f5c\u7b26\u3002\u56e0\u4e3a\u6211\u4eec\u7684\u64cd\u4f5c\u7b26\u4e00\u822c\u662f\u4e8c\u5143\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\u5982\u679c\u6709\u5355\u76ee\u64cd\u4f5c\u7b26\uff0c\u90a3\u4e48\u8282\u70b9\u5c31\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u3002</p> Example <p>\\(A+B*C/D\\) \u8868\u793a\u5982\u4e0b\uff1a  </p>"},{"location":"ds/tree/#_7","title":"\u6811\u7684\u904d\u5386","text":"<p>\u6811\u7684\u904d\u5386\u5373\u6bcf\u4e2a\u8282\u70b9\u8bbf\u95ee\u4e00\u6b21</p> <ul> <li>\u524d\u5e8f\u904d\u5386  </li> </ul> <pre><code>void  preorder ( tree_ptr  tree )\n{  if  ( tree )   {\nvisit ( tree );\nfor (each child C of tree )\npreorder ( C );\n}\n}\n</code></pre> <ul> <li>\u540e\u5e8f\u904d\u5386  </li> </ul> <pre><code>void  postorder ( tree_ptr  tree )\n{  if  ( tree )   {\nfor (each child C of tree )\npostorder ( C );\nvisit ( tree );\n}\n}\n</code></pre> <ul> <li>\u5c42\u5e8f\u904d\u5386  </li> </ul> <pre><code>void  levelorder ( tree_ptr  tree )\n{   enqueue ( tree );\nwhile (queue is not empty) {\nvisit ( T = dequeue ( ) );\nfor (each child C of T )\nenqueue ( C );\n}\n}\n</code></pre> <ul> <li>\u4e2d\u5e8f\u904d\u5386  </li> </ul> <pre><code>void  inorder ( tree_ptr  tree )\n{  if  ( tree )   {\ninorder ( tree-&gt;Left );\nvisit ( tree-&gt;Element );\ninorder ( tree-&gt;Right );\n}\n}\n</code></pre> Example <p>  \u4e2d\u5e8f\u904d\u5386: \\(A+B*C/D\\)  \u524d\u5e8f\u904d\u5386: \\(+A/*BCD\\) * \u540e\u5e8f\u904d\u5386: \\(ABC*D/+\\)</p>"},{"location":"ds/tree/#_8","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811","text":"<p>\u89c4\u5219: </p> <ul> <li>\u5982\u679c <code>Tree-&gt;Left</code> \u4e3a\u7a7a\uff0c\u7528\u4e00\u4e2a\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f53\u524d\u8282\u70b9\u7684\u524d\u9a71\u7684\u6307\u9488\u4ee3\u66ff\u5b83</li> <li>\u5982\u679c <code>Tree-&gt;Right</code> \u4e3a\u7a7a\uff0c\u7528\u4e00\u4e2a\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f53\u524d\u8282\u70b9\u7684\u540e\u7ee7\u7684\u6307\u9488\u4ee3\u66ff\u5b83 </li> <li>\u8fd9\u91cc\u6ca1\u6709\u7a7a\u95f2\u7684\u6307\u9488\uff0c\u56e0\u6b64\u4e00\u68f5\u7ebf\u7d22\u4e8c\u53c9\u6811\u9700\u8981\u6709\u4e00\u4e2a\u5de6\u513f\u5b50\u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5934\u8282\u70b9\u3002</li> </ul> <pre><code>typedef  struct  ThreadedTreeNode  *PtrTo  ThreadedNode;\ntypedef  struct  PtrToThreadedNode  ThreadedTree;\ntypedef  struct  ThreadedTreeNode {\nint                  LeftThread;   /* if it is TRUE, then Left */\nThreadedTree     Left;      /* is a thread, not a child ptr.   */\nElementType  Element;\nint                  RightThread; /* if it is TRUE, then Right */\nThreadedTree     Right;    /* is a thread, not a child ptr.   */\n}\n</code></pre> Example <p>  \u90a3\u4e48\u5b83\u5bf9\u5e94\u7684\u7ebf\u7d22\u4e8c\u53c9\u6811\u5982\u4e0b:   </p> <p>Note</p> <p>\u5728\u6811\u91cc\u9762\uff0c\u513f\u5b50\u7684\u6b21\u5e8f\u6ca1\u6709\u5f71\u54cd\u3002\u4f46\u5bf9\u4e8e\u4e8c\u53c9\u6811\u800c\u8a00\uff0c\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u662f\u4e0d\u540c\u7684\u3002</p> <p>\u5b8c\u5168\u4e8c\u53c9\u6811</p> <p>\u6240\u6709\u53f6\u8282\u70b9\u90fd\u4f4d\u4e8e\u76f8\u90bb\u7684\u4e24\u4e2a\u5c42\u4e0a</p>"},{"location":"ds/tree/#_9","title":"\u4e8c\u53c9\u6811\u7684\u6027\u8d28","text":"<ul> <li>\u7b2c i \u5c42\u8282\u70b9\u4e2a\u6570\u6700\u591a\u4e3a \\(2^{i-1},i\\geq 1\\). \u6df1\u5ea6\u4e3a k \u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709 \\(2^k-1\\) \u4e2a\u8282\u70b9\u3002</li> <li> <p>\u5bf9\u4e8e\u4efb\u4f55\u975e\u7a7a\u4e8c\u53c9\u6811\u90fd\u6709 \\(n_0=n_2+1\\). \u5176\u4e2d \\(n_0\\) \u662f\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\uff0c\\(n_2\\) \u662f\u5ea6\u6570\u4e3a 2 \u7684\u8282\u70b9\u4e2a\u6570\u3002</p> Proof <p>\u4ee4 \\(n_1\\) \u8868\u793a\u5ea6\u6570\u4e3a 1 \u7684\u8282\u70b9\u4e2a\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u6709 \\(n=n_0+n_1+n_2\\). \u4ee4 \\(B\\) \u8868\u793a\u6240\u6709\u7684\u8fb9\uff0c\u90a3\u4e48 \\(B=n-1\\)\uff0c\u540c\u65f6\u53c8\u6709 \\(B=n_1+2n_2\\). \u8054\u7acb\u53ef\u5f97\u5230 \\(n_0=n_2+1\\).  </p> </li> </ul>"},{"location":"ds/tree/#adt","title":"\u67e5\u627e\u6811ADT\u2014\u2014\u4e8c\u53c9\u67e5\u627e\u6811","text":""},{"location":"ds/tree/#_10","title":"\u5b9a\u4e49","text":"<p>\u4e00\u68f5\u4e8c\u53c9\u67e5\u627e\u6811\u662f\u4e8c\u53c9\u7684\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u90a3\u4e48\u6ee1\u8db3\u4e0b\u5217\u6027\u8d28:</p> <ul> <li>\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u662f\u5404\u4e0d\u76f8\u540c\u7684\u6574\u6570</li> <li>\u5982\u679c\u5de6\u5b50\u6811\u975e\u7a7a\uff0c\u90a3\u4e48\u5de6\u5b50\u6811\u6240\u6709\u5173\u952e\u5b57\u7684\u503c\u5fc5\u987b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u5173\u952e\u5b57</li> <li>\u5982\u679c\u53f3\u5b50\u6811\u975e\u7a7a\uff0c\u90a3\u4e48\u53f3\u5b50\u6811\u6240\u6709\u5173\u952e\u5b57\u7684\u503c\u5fc5\u987b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u5173\u952e\u5b57</li> <li>\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4ecd\u662f\u4e8c\u53c9\u67e5\u627e\u6811</li> </ul>"},{"location":"ds/tree/#adt_1","title":"ADT \u6a21\u578b","text":"<ul> <li>\u5bf9\u8c61: \u4e00\u4e2a\u6709\u9650\u7684\u6709\u5e8f\u96c6</li> <li>\u64cd\u4f5c:<ul> <li>\u521d\u59cb\u5316</li> <li>\u67e5\u627e\u5173\u952e\u5b57</li> <li>\u67e5\u627e\u6700\u5927/\u6700\u5c0f\u7684\u5173\u952e\u5b57</li> <li>\u63d2\u5165\u5173\u952e\u5b57</li> <li>\u5220\u9664\u5173\u952e\u5b57</li> <li>\u68c0\u7d22\u4f4d\u7f6e</li> </ul> </li> </ul>"},{"location":"ds/tree/#_11","title":"\u5b9e\u73b0","text":"<ul> <li>\u67e5\u627e\u5173\u952e\u5b57 \u8fd4\u56de\u6811 T \u4e2d\u5177\u6709\u5173\u952e\u5b57 X \u8282\u70b9\u7684\u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6811 T \u7684\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811\u8fdb\u884c\u9012\u5f52\u8c03\u7528\uff0c\u67e5\u627e\u54ea\u4e2a\u5b50\u6811\u53d6\u51b3\u4e8e X \u4e0e\u5f53\u524d\u6839\u8282\u70b9\u5173\u952e\u5b57\u7684\u5927\u5c0f\u5173\u7cfb\u3002 \\(T(N)=S(N)=O(d)\\), \u8fd9\u91cc d \u662f\u6811\u7684\u6df1\u5ea6  </li> </ul> <pre><code>Position  Find( ElementType X,  SearchTree T ) { if ( T == NULL ) return  NULL;  /* not found in an empty tree */\nif ( X &lt; T-&gt;Element )  /* if smaller than root */\nreturn  Find( X, T-&gt;Left );  /* search left subtree */\nelse if ( X &gt; T-&gt;Element )  /* if larger than root */\nreturn  Find( X, T-&gt;Right );  /* search right subtree */\nelse   /* if X == root */\nreturn  T;  /* found */\n} </code></pre> <p>\u6ce8\u610f\u5230\u8fd9\u662f\u4e00\u4e2a\u5c3e\u9012\u5f52\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f18\u5316\u4e3a\u8fed\u4ee3\u7248\u672c</p> <pre><code>Position  Iter_Find( ElementType X,  SearchTree T ) { /* iterative version of Find */\nwhile  ( T )   {\nif  ( X == T-&gt;Element )  return T ;  /* found */\nif  ( X &lt; T-&gt;Element )\nT = T-&gt;Left ; /*move down along left path */\nelse\nT = T-&gt; Right ; /* move down along right path */\n}  /* end while-loop */\nreturn  NULL ;   /* not found */\n} </code></pre> <ul> <li>\u67e5\u627e\u6700\u5c0f/\u6700\u5927\u5173\u952e\u5b57 \u67e5\u627e\u6700\u5c0f\u5143\u7d20\uff0c\u53ea\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u53ea\u8981\u6709\u5de6\u513f\u5b50\u5c31\u5411\u5de6\u8fdb\u884c\uff0c\u7ec8\u6b62\u70b9\u5c31\u662f\u6700\u5c0f\u7684\u5143\u7d20\u4e86\u3002\u67e5\u627e\u6700\u5927\u5143\u7d20\u7c7b\u4f3c\u3002 \\(T(N)=O(d)\\)</li> </ul> <pre><code>Position  FindMin( SearchTree T ) { if ( T == NULL )   return  NULL; /* not found in an empty tree */\nelse if ( T-&gt;Left == NULL )   return  T;  /* found left most */\nelse   return  FindMin( T-&gt;Left );   /* keep moving to left */\n} Position  FindMax( SearchTree T ) { if ( T != NULL ) while ( T-&gt;Right != NULL )   T = T-&gt;Right;   /* keep moving to find right most */\nreturn T;  /* return NULL or the right most */\n} </code></pre> <ul> <li>\u63d2\u5165 \u63d2\u5165\u53ef\u4ee5\u7528\u67e5\u627e\u7684\u601d\u8def\uff0c\u5982\u679c\u627e\u5230 X \u90a3\u4e48\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff08\u6216\u8005\u505a\u4e00\u4e9b\u66f4\u65b0\uff09\uff0c\u5426\u5219\u5c31\u5c06 X \u63d2\u5165\u5230\u904d\u5386\u8def\u5f84\u4e0a\u7684\u6700\u540e\u4e00\u70b9\u4e0a\u3002 \\(T(N)=O(d)\\) </li> </ul> <pre><code>SearchTree  Insert( ElementType X, SearchTree T ) { if ( T == NULL ) { /* Create and return a one-node tree */ T = malloc( sizeof( struct TreeNode ) ); if ( T == NULL ) FatalError( \"Out of space!!!\" ); else { T-&gt;Element = X; T-&gt;Left = T-&gt;Right = NULL; } }  /* End creating a one-node tree */\nelse  /* If there is a tree */\nif ( X &lt; T-&gt;Element ) T-&gt;Left = Insert( X, T-&gt;Left ); else if ( X &gt; T-&gt;Element ) T-&gt;Right = Insert( X, T-&gt;Right ); /* Else X is in the tree already; we'll do nothing */ return  T;   /* Do not forget this line!! */ }\n</code></pre> <ul> <li>\u5220\u9664 \u5982\u679c\u8981\u5220\u9664\u7684\u8282\u70b9\u662f\u6811\u53f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u5220\u9664\uff0c\u5982\u679c\u8282\u70b9\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u53ef\u4ee5\u5728\u7236\u8282\u70b9\u8c03\u6574\u6307\u9488\u540e\u7ed5\u8fc7\u8be5\u8282\u70b9\u5e76\u5220\u9664\u3002 \u4f46\u5982\u679c\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u4e00\u822c\u7684\u5220\u9664\u7b56\u7565\u662f\u7528\u5176\u53f3\u5b50\u6811\u4e2d\u6700\u5c0f\u5143\uff08\u6216\u8005\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u5143\uff09\u4ee3\u66ff\u8be5\u8282\u70b9\u7684\u6570\u636e\u5e76\u9012\u5f52\u5730\u5220\u9664\u90a3\u4e2a\u8282\u70b9\u3002 \\(T(N)=O(h)\\), \u5176\u4e2d h \u662f\u6811\u7684\u9ad8\u5ea6\u3002   </li> </ul> <pre><code>SearchTree  Delete( ElementType X, SearchTree T ) {    Position  TmpCell; if ( T == NULL )   Error( \"Element not found\" ); else  if ( X &lt; T-&gt;Element )  /* Go left */ T-&gt;Left = Delete( X, T-&gt;Left ); else  if ( X &gt; T-&gt;Element )  /* Go right */ T-&gt;Right = Delete( X, T-&gt;Right ); else  /* Found element to be deleted */ if ( T-&gt;Left &amp;&amp; T-&gt;Right ) {  /* Two children */ /* Replace with smallest in right subtree */ TmpCell = FindMin( T-&gt;Right ); T-&gt;Element = TmpCell-&gt;Element; T-&gt;Right = Delete( T-&gt;Element, T-&gt;Right );  } /* End if */\nelse {  /* One or zero child */ TmpCell = T; if ( T-&gt;Left == NULL ) /* Also handles 0 child */ T = T-&gt;Right; else  if ( T-&gt;Right == NULL )  T = T-&gt;Left; free( TmpCell );  }  /* End else 1 or 0 child */\nreturn  T; </code></pre> <p>Note</p> <p>\u5982\u679c\u8fd9\u91cc\u6ca1\u6709\u5f88\u591a\u5220\u9664\u64cd\u4f5c\uff0c\u901a\u5e38\u4f7f\u7528\u61d2\u60f0\u64cd\u4f5c\u7684\u7b56\u7565\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u88ab\u5220\u9664\u65f6\uff0c\u6211\u4eec\u4e0d\u5220\u9664\u5b83\uff0c\u505a\u4e00\u4e2a\u5220\u9664\u7684\u8bb0\u53f7\uff0c\u8fd9\u6837\u7684\u597d\u5904\u662f\u5728\u6709\u91cd\u590d\u5173\u952e\u5b57\u65f6\u53ef\u4ee5\u76f4\u63a5\u5728\u9891\u7387\u4e0a\u52a0\u51cf\u3002  </p>"},{"location":"ds/tree/#_12","title":"\u5e73\u5747\u60c5\u5f62\u5206\u6790","text":"<p>Q. \u628a n \u4e2a\u5143\u7d20\u653e\u5728\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\uff0c\u8fd9\u68f5\u6811\u53ef\u4ee5\u6709\u591a\u9ad8\uff1f A. \u9ad8\u5ea6\u53d6\u51b3\u4e8e\u63d2\u5165\u7684\u987a\u5e8f\u3002\u6700\u574f\u53ef\u4ee5\u8fbe\u5230 \\(N\\)</p> Example <ul> <li>\u63d2\u5165\u987a\u5e8f 4, 2, 1, 3, 6, 5, 7 </li> </ul> <p> </p> <ul> <li>\u63d2\u5165\u987a\u5e8f 1, 2, 3, 4, 5, 6, 7</li> </ul> <p> </p> <p>Info</p> <p>\u5144\u5f1f: sibling \u64cd\u4f5c\u6570: operand \u524d\u5e8f\u904d\u5386: preorder traversal \u540e\u5e8f\u904d\u5386: postorder traversal \u5c42\u5e8f\u904d\u5386: levelorder traversal \u4e2d\u5e8f\u904d\u5386: inorder traversal \u7ebf\u7d22\u4e8c\u53c9\u6811: Threaded Binary Trees</p>"}]}