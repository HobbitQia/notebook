{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HobbitQia's Notebook! \u00b6 \u8ffd\u98ce\u8d76\u6708\u83ab\u505c\u7559\uff0c\u5e73\u829c\u5c3d\u5904\u662f\u6625\u5c71~ About me \u00b6 My GitHub \u00b6 My Blog \u00b6 My ZhiHu \u00b6 My Telegram \u00b6 My Gmail and My ZJU Email \u00b6","title":"Welcome to HobbitQia's Notebook!"},{"location":"#welcome-to-hobbitqias-notebook","text":"\u8ffd\u98ce\u8d76\u6708\u83ab\u505c\u7559\uff0c\u5e73\u829c\u5c3d\u5904\u662f\u6625\u5c71~","title":"Welcome to HobbitQia's Notebook!"},{"location":"#about-me","text":"","title":"About me"},{"location":"#my-github","text":"","title":" My GitHub"},{"location":"#my-blog","text":"","title":" My Blog"},{"location":"#my-zhihu","text":"","title":" My ZhiHu"},{"location":"#my-telegram","text":"","title":" My Telegram"},{"location":"#my-gmail-and-my-zju-email","text":"","title":" My Gmail   and My ZJU Email"},{"location":"link/","text":"","title":"Link"},{"location":"CO/","text":"\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1 \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u6559\u6750: Computer Organization and Design The Hardware Software Interface [RISC-V Edition] \u8001\u5e08: \u5218\u6d77\u98ce/TA: \u90ed\u5bb6\u8c6a \u867d\u7136\u4e0a\u7684\u662f\u5218\u8001\u5e08\u7684\u8bfe\uff0c\u4f46\u672c\u7b14\u8bb0\u5185\u5bb9\u5747\u6765\u81ea\u9a6c\u5fb7\u8001\u5e08\u7684 PPT \u548c\u667a\u4e91\u8bfe\u5802\uff08\u9003\u3002 Cheating Sheet \u7ed8\u5236\u4e2d...","title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1"},{"location":"CO/#_1","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u6559\u6750: Computer Organization and Design The Hardware Software Interface [RISC-V Edition] \u8001\u5e08: \u5218\u6d77\u98ce/TA: \u90ed\u5bb6\u8c6a \u867d\u7136\u4e0a\u7684\u662f\u5218\u8001\u5e08\u7684\u8bfe\uff0c\u4f46\u672c\u7b14\u8bb0\u5185\u5bb9\u5747\u6765\u81ea\u9a6c\u5fb7\u8001\u5e08\u7684 PPT \u548c\u667a\u4e91\u8bfe\u5802\uff08\u9003\u3002 Cheating Sheet \u7ed8\u5236\u4e2d...","title":"\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1"},{"location":"CO/co1/","text":"Computer Abstractions and Technology \u00b6 8 Ideas in Computer Architecture \u00b6 Moore's Law The integrate circuit resource double every 18-24 months. User abstraction to simplify design Lower-level details are hidden to higher levels Instruction set architecture -- the interface between HW and SW. Make the common cases fast Performance via Parallelism Performance via Pipelining Performance via Prediction Hierarchy of memory Dependability via redundancy Performance \u00b6 Response time : How long it takes to do a task. Throughput (\u541e\u5410\u91cf) : Total work done per unit time. Define \\(Performance = \\dfrac{1}{Execution\\ Time}\\) Execution time \u00b6 Elapsed Time Total response time, including all aspects e.g. Processing, I/O, OS overhead, idle time. CPU Time Discounts I/O time, other jobs\u2019 shares \u8fd9\u91cc\u6211\u4eec\u53ea\u8003\u8651 CPU \u65f6\u95f4 CPU Clocking \u00b6 Clock period: duration of a clock cycle. \u7528\u65f6\u949f\u5468\u671f\u4ee3\u66ff\u5177\u4f53\u7684\u79d2\u6570\u3002 Clock frequency(rate): cycles per second. \\[ \\begin{align*} CPU\\ Time &= CPU\\ Clock\\ Cycles \\times Clock\\ Cycle\\ Time \\\\ &=\\dfrac{ CPU\\ Clock\\ Cycles}{Clock\\ Rates} \\end{align*} \\] Performance improved by * Reducing number of clock cycles * Increasing clock rate * Hardware designer must often trade off clock rate against cycle count \\[ \\begin{align*} Clock\\ Cycles &= Instruction\\ Count \\times Cycles\\ per\\ Instruction(CPI)\\\\ CPU\\ Time & = Instruction\\ Count \\times CPI\\times CPI\\ Cycle\\ Time\\\\ & = \\dfrac{Instruction\\ Count \\times CPI}{Clock\\ Rate} \\end{align*} \\] CPI is determined by CPU hardware. \u5982\u679c\u4e0d\u540c\u6307\u4ee4\u6709\u4e0d\u540c\u7684 CPI, \u6211\u4eec\u53ef\u4ee5\u7528 Average CPI. \u7efc\u4e0a, \\(CPU\\ Time = \\dfrac{Instructions}{Program}\\times \\dfrac{Clock\\ Cycles}{Instruction}\\times \\dfrac{Seconds}{Clock Cycle}\\) Performance depends on Algorithm: affects IC, possibly CPI Programming language: affects IC, CPI Compiler: affects IC, CPI Instruction set architecture Incredible performance improvement \u00b6 Uniprocessor \u00b6 Three Walls Power Wall \\(Power = Capactive\\ load \\times Voltage^2\\ Frequency\\) \u4e3b\u9891\u63d0\u9ad8\u4e86\u5f88\u591a\uff0c\u4f46\u529f\u8017\u5e76\u6ca1\u6709\u5f97\u5230\u8fd9\u4e48\u591a\u7684\u63d0\u5347\uff0c\u56e0\u4e3a\u6211\u4eec\u964d\u4f4e\u4e86\u5de5\u4f5c\u7535\u538b (5V-1V) \u73b0\u5728\u5de5\u4f5c\u7535\u538b\u4e0d\u80fd\u518d\u964d\u4f4e\u4e86\uff08\u5426\u5219\u6cc4\u6f0f\u7535\u6d41\u5360\u6bd4\u592a\u5927\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u518d\u63d0\u9ad8\u529f\u7387\u4e86\u3002 Memory Wall Memory \u7684\u6027\u80fd\u589e\u957f\u4e0d\u5982 CPU \u7684\u6027\u80fd\u589e\u957f\uff0c\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u8bfb\u5199\u5185\u5b58\u4e86\uff0c\u5f71\u54cd\u6574\u4f53\u6027\u80fd\u3002 ITP Wall difficulty to find enough parallelism in the instructions stream of a single process to keep higher performance processor cores busy. \u6307\u4ee4\u96c6\u5e76\u884c\u7a0b\u5ea6 Multiprocessors \u00b6 requires explicitly parallel programming . Amdahl's Law: Improve an aspect of a computer and expecting improvement in overall performance. \u5b9e\u9645\u4e0a, \\(T_{improved}=\\dfrac{T_{affected}}{improvement\\ factor}+T_{unaffected}\\) . e.g. \u5bf9\u67d0\u4e00\u65b9\u9762\u4f18\u5316 90%, \u5e76\u4e0d\u80fd\u4f7f CPU \u6574\u4f53\u6027\u80fd\u4f18\u5316 90%. Corollary: make the common case fast. Low Power Not at Idle. \u673a\u5668\u5728\u6ca1\u6709\u5de5\u4f5c\u65f6\u4e5f\u6709\u529f\u8017\u635f\u5931\u3002 MIPS as a Performance Metric MIPS: Millions of Instructions Per Second \u8fd9\u4e2a\u53c2\u6570\u9700\u8981\u5728\u5176\u4ed6\u53c2\u6570\u4e00\u81f4\u65f6\uff0c\u624d\u6709\u6bd4\u8f83\u610f\u4e49\u3002\u4e0d\u540c\u7684 ISA \u4e4b\u95f4\u4e0d\u80fd\u4ec5\u51ed MIPS \u6bd4\u8f83\u3002","title":"\u8ba1\u7b97\u673a\u6982\u8981\u4e0e\u6280\u672f"},{"location":"CO/co1/#computer-abstractions-and-technology","text":"","title":"Computer Abstractions and Technology"},{"location":"CO/co1/#8-ideas-in-computer-architecture","text":"Moore's Law The integrate circuit resource double every 18-24 months. User abstraction to simplify design Lower-level details are hidden to higher levels Instruction set architecture -- the interface between HW and SW. Make the common cases fast Performance via Parallelism Performance via Pipelining Performance via Prediction Hierarchy of memory Dependability via redundancy","title":"8 Ideas in Computer Architecture"},{"location":"CO/co1/#performance","text":"Response time : How long it takes to do a task. Throughput (\u541e\u5410\u91cf) : Total work done per unit time. Define \\(Performance = \\dfrac{1}{Execution\\ Time}\\)","title":"Performance"},{"location":"CO/co1/#execution-time","text":"Elapsed Time Total response time, including all aspects e.g. Processing, I/O, OS overhead, idle time. CPU Time Discounts I/O time, other jobs\u2019 shares \u8fd9\u91cc\u6211\u4eec\u53ea\u8003\u8651 CPU \u65f6\u95f4","title":"Execution time"},{"location":"CO/co1/#cpu-clocking","text":"Clock period: duration of a clock cycle. \u7528\u65f6\u949f\u5468\u671f\u4ee3\u66ff\u5177\u4f53\u7684\u79d2\u6570\u3002 Clock frequency(rate): cycles per second. \\[ \\begin{align*} CPU\\ Time &= CPU\\ Clock\\ Cycles \\times Clock\\ Cycle\\ Time \\\\ &=\\dfrac{ CPU\\ Clock\\ Cycles}{Clock\\ Rates} \\end{align*} \\] Performance improved by * Reducing number of clock cycles * Increasing clock rate * Hardware designer must often trade off clock rate against cycle count \\[ \\begin{align*} Clock\\ Cycles &= Instruction\\ Count \\times Cycles\\ per\\ Instruction(CPI)\\\\ CPU\\ Time & = Instruction\\ Count \\times CPI\\times CPI\\ Cycle\\ Time\\\\ & = \\dfrac{Instruction\\ Count \\times CPI}{Clock\\ Rate} \\end{align*} \\] CPI is determined by CPU hardware. \u5982\u679c\u4e0d\u540c\u6307\u4ee4\u6709\u4e0d\u540c\u7684 CPI, \u6211\u4eec\u53ef\u4ee5\u7528 Average CPI. \u7efc\u4e0a, \\(CPU\\ Time = \\dfrac{Instructions}{Program}\\times \\dfrac{Clock\\ Cycles}{Instruction}\\times \\dfrac{Seconds}{Clock Cycle}\\) Performance depends on Algorithm: affects IC, possibly CPI Programming language: affects IC, CPI Compiler: affects IC, CPI Instruction set architecture","title":"CPU Clocking"},{"location":"CO/co1/#incredible-performance-improvement","text":"","title":"Incredible performance improvement"},{"location":"CO/co1/#uniprocessor","text":"Three Walls Power Wall \\(Power = Capactive\\ load \\times Voltage^2\\ Frequency\\) \u4e3b\u9891\u63d0\u9ad8\u4e86\u5f88\u591a\uff0c\u4f46\u529f\u8017\u5e76\u6ca1\u6709\u5f97\u5230\u8fd9\u4e48\u591a\u7684\u63d0\u5347\uff0c\u56e0\u4e3a\u6211\u4eec\u964d\u4f4e\u4e86\u5de5\u4f5c\u7535\u538b (5V-1V) \u73b0\u5728\u5de5\u4f5c\u7535\u538b\u4e0d\u80fd\u518d\u964d\u4f4e\u4e86\uff08\u5426\u5219\u6cc4\u6f0f\u7535\u6d41\u5360\u6bd4\u592a\u5927\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u518d\u63d0\u9ad8\u529f\u7387\u4e86\u3002 Memory Wall Memory \u7684\u6027\u80fd\u589e\u957f\u4e0d\u5982 CPU \u7684\u6027\u80fd\u589e\u957f\uff0c\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u8bfb\u5199\u5185\u5b58\u4e86\uff0c\u5f71\u54cd\u6574\u4f53\u6027\u80fd\u3002 ITP Wall difficulty to find enough parallelism in the instructions stream of a single process to keep higher performance processor cores busy. \u6307\u4ee4\u96c6\u5e76\u884c\u7a0b\u5ea6","title":"Uniprocessor"},{"location":"CO/co1/#multiprocessors","text":"requires explicitly parallel programming . Amdahl's Law: Improve an aspect of a computer and expecting improvement in overall performance. \u5b9e\u9645\u4e0a, \\(T_{improved}=\\dfrac{T_{affected}}{improvement\\ factor}+T_{unaffected}\\) . e.g. \u5bf9\u67d0\u4e00\u65b9\u9762\u4f18\u5316 90%, \u5e76\u4e0d\u80fd\u4f7f CPU \u6574\u4f53\u6027\u80fd\u4f18\u5316 90%. Corollary: make the common case fast. Low Power Not at Idle. \u673a\u5668\u5728\u6ca1\u6709\u5de5\u4f5c\u65f6\u4e5f\u6709\u529f\u8017\u635f\u5931\u3002 MIPS as a Performance Metric MIPS: Millions of Instructions Per Second \u8fd9\u4e2a\u53c2\u6570\u9700\u8981\u5728\u5176\u4ed6\u53c2\u6570\u4e00\u81f4\u65f6\uff0c\u624d\u6709\u6bd4\u8f83\u610f\u4e49\u3002\u4e0d\u540c\u7684 ISA \u4e4b\u95f4\u4e0d\u80fd\u4ec5\u51ed MIPS \u6bd4\u8f83\u3002","title":"Multiprocessors"},{"location":"CO/co2/","text":"Instructions: Language of the Computer \u00b6 Introduction \u00b6 Language of the machine Instructions (Statement) Instruction Set (Syntax) Design goal Maximize performance \u540c\u6837\u8d44\u6e90\u7684\u60c5\u51b5\u4e0b\u6027\u80fd\u5927 Minimize cost \u540c\u6837\u6027\u80fd\u7684\u60c5\u51b5\u4e0b\u6210\u672c\u4f4e Reduce design time \u6307\u4ee4\u96c6\u7b80\u5355\uff0c\u6613\u4e8e\u7406\u89e3 \u6211\u4eec\u4f7f\u7528\u7684\u662f RISC-V \u67b6\u6784 Instruction Characteristics \u6307\u4ee4\u96c6\u57fa\u672c\u7684\u7ed3\u6784\uff1aOperation \u64cd\u4f5c; Operand \u64cd\u4f5c\u6570 \u4e0d\u540c\u6307\u4ee4\u96c6\uff0c\u6307\u4ee4\u7684\u7f16\u7801\u53ef\u4ee5\u4e0d\u540c\u3002\u5982 000 \u8868\u793a\u52a0\u6cd5\uff0c\u8fd9\u4e5f\u53eb\u6307\u4ee4\u7684 Encoding. \u64cd\u4f5c\u6570\u4f4d\u5bbd\u53ef\u4ee5\u4e0d\u540c\uff0c\u53ef\u4ee5\u662f\u7acb\u5373\u6570/\u5bc4\u5b58\u5668/\u5185\u5b58\u3002 \u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\uff1a \u6307\u4ee4\u7531\u6570\u5b57\u65b9\u5f0f\u88ab\u5b58\u50a8\uff0c\u53ef\u4ee5\u8fdb\u884c\u8bfb\u5199\u3002\uff1f\uff1f Operation \u00b6 Every computer must be able to perform arithmetic . Only one operation per instruction Exactly 3 variables e.g. add a, b, c \u5373 \\(a\\leftarrow b+c\\) \u6ce8\u610f\u7ed3\u679c\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u6837\u6613\u4e8e\u89e3\u7801 Design Principle 1 - Simplicity favors regularity. Example C code f = ( g + h ) - ( i + j ); RISC-V code add t0 , g , h add t1 , i , j sub f , t0 , t1 Operands of the Computer Hardware \u00b6 Register Operands \u00b6 Arithmetic instructions use register operands. RISC-V has a \\(32\\times 64\\) -bit register file Use for frequently accessed data 32-bit data is called a word . 64-bit is called a doubleword . we call them x0 to x31 Design Principle 2 - Smaller is faster. \u5bc4\u5b58\u5668\u4e0d\u662f\u8d8a\u591a\u8d8a\u597d\uff0c\u591a\u4e86\u4e4b\u540e\u8bbf\u95ee\u6162\u3002 Name Register Name Usage Preserved or call? x0 0 The constant value 0 n.a. x1(ra) 1 Return address(link register) yes x2(sp) 2 Stack pointer yes x3(gp) 3 Global pointer yes x4(tp) 4 Thread pointer yes x5-x7 5-7 Temporaries no x8-x9 8-9 Saved yes x10-x17 10-17 Arguments/results no x18-x27 18-27 Saved yes x28-x31 28-31 Temporaries noW \u4e3a\u4ec0\u4e48\u5bc4\u5b58\u5668 x0 \u4e00\u76f4\u4e3a 0 Make the common fast. \u56e0\u4e3a\u7ecf\u5e38\u6709 0 \u53c2\u4e0e\u8ba1\u7b97\uff0c\u5c06\u5176\u5b58\u5728\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u4fbf\u4e8e\u8ba1\u7b97\u3002 Example add x5 , x20 , x21 add x6 , x22 , x23 sub x19 , x5 , x6 Memory Operands \u00b6 Data transfer instructions Load: Load values from memory to register Store: Store result from register to memory; store doubleword Memory is byte addressed . RISC-V is Little Endian Little vs Big Endian \u5c0f\u7aef\uff1a\u4f4e\u4f4d\u653e\u5728\u5730\u5740\u8f83\u5c0f\u5904\uff1b\u5927\u7aef\u76f8\u53cd RISC-V dose not require words to be aligned in memory words align: \u4e00\u4e2a\u5b57\u662f 4 \u5b57\u8282\uff0c\u6211\u4eec\u8981\u6c42\u5b57\u7684\u8d77\u59cb\u5730\u5740\u4e00\u5b9a\u8981\u662f 4 \u7684\u500d\u6570\u3002 Memory Alignment \u7b2c\u4e00\u4e2a\u662f\u5bf9\u9f50\u7684\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e0d\u5bf9\u9f50\u7684\u3002 \u4e0d\u5bf9\u9f50\u7684\u597d\u5904\u662f\u7701\u7a7a\u95f4 Memory Operand Example A [ 12 ] = h + A [ 8 ]; (\u9ed8\u8ba4\u6570\u7ec4\u662f\u53cc\u5b57\u7684, h in x21 , base address of A in x22 ) \u7ffb\u8bd1\u4e3a RISC-V \u4ee3\u7801\u5f97\u5230 ld x9 , 64 ( x22 ) add x9 , x21 , x9 sd x9 , 96 ( x22 ) \u5730\u5740\u662f\u4ee5 byte \u4e3a\u5355\u4f4d\uff0c\u6240\u4ee5\u8981\u504f\u79fb \\(8\\times 8=64\\) bytes. load \u548c store \u662f\u552f\u4e8c\u53ef\u4ee5\u8bbf\u95ee\u5b58\u50a8\u5668\u7684\u6307\u4ee4\u3002 Registers vs. Memory \u00b6 Registers are faster to access than memory Operating on memory data requires loads and stores Compiler must use registers for variables as much as possible \u7f16\u8bd1\u5668\u5c3d\u91cf\u4f7f\u7528\u5bc4\u5b58\u5668\u5b58\u53d8\u91cf\u3002\u53ea\u6709\u5728\u5bc4\u5b58\u5668\u4e0d\u591f\u7528\u65f6\uff0c\u624d\u4f1a\u628a\u4e0d\u592a\u7528\u7684\u503c\u653e\u56de\u5185\u5b58\u3002 Constant or Immediate Operands \u00b6 Immediate : Other method for adding constant Avoids the load instruction Offer versions of the instruction e.g. addi x22, x22, 4 Design Principle 3 - Make the common case fast. Summary \u4e3a\u4ec0\u4e48\u5185\u5b58\u662f \\(2^{61}\\) \u4e2a doublewords? \u53ef\u4ee5\u8868\u793a\u7684\u5730\u5740\u6709\u8fd9\u4e48\u591a\uff0c\u56e0\u4e3a\u6211\u4eec\u4ee5 64 \u4f4d\u5bc4\u5b58\u5668\u4e3a\u57fa\u5740\uff0c\u53ef\u4ee5\u8868\u793a\u7684\u53cc\u5b57\u5c31\u662f \\(2^{64}/2^3=2^{61}\\) (\u8fd9\u91cc \\(2^3\\) \u8868\u793a 8 \u4e2a\u5b57\u8282\uff0c\u5373\u53cc\u5b57). \u5373\u6211\u4eec\u7684 load \u6307\u4ee4\u53ef\u4ee5\u8bbf\u95ee\u7684\u8303\u56f4\u6709\u8fd9\u4e48\u5927\u3002 Signed and Unsigned Number \u00b6 Representing Instructions in the Computer \u00b6 All information in computer consists of binary bits. Instructions are encoded in binary called machine code (\u673a\u5668\u7801) Mapping registers into numbers 0 for register x0 , 31 for register x31 . e.t.c. RISC-V instructions 32 \u4f4d\u6307\u4ee4\u7f16\u7801\u3002\u6240\u6709\u6307\u4ee4\u90fd\u662f\u89c4\u5219\u5316\u7684\uff0c\u5373\u4e00\u90e8\u5206\u662f opcode, \u4e00\u90e8\u5206\u662f operands \u7b49\u7b49\u3002 Summary of RISC-V architecture R-format \u00b6 opcode : operaion code rd : destination register number funct3 : 3-bit function code(additional opcode) \u4f8b\u5982\uff0c\u6211\u4eec\u52a0\u6cd5\u51cf\u6cd5\u53ef\u4ee5\u505a\u6210\u4e00\u4e2a opcode, \u7136\u540e\u5229\u7528 funct \u8fdb\u884c\u9009\u62e9\u3002 rs1/rs2 : the first/second source register number funct7 : 7-bit function code(additional opcode) All instructions in RISC-V have the same length Design Principle 4 - Good design demands good compromises I-format \u00b6 Immediate arithmetic and load instructions e.g. addi , ld rs1 : source or base address register number immediate : constant operand, or offset added to base address \u5c06 rs2, funct7 \u5408\u5e76\u4e86\uff0c\u5f97\u5230 12 \u4f4d\u7acb\u5373\u6570 S-format \u00b6 rs1 : base address register number rs2 : source opearand register number immediate: Split so that rs1 and rs2 fields always in the same place. Example Stored Program Computer Instructions represented in binary, like data. Instructions and data stored in memory. Programs can operate on programs. e.g. compiplers, linkers. Binary compatibility allows compiled programs to work on different computers Logical Operations \u00b6 Operation C Java RISC-V Shift left << << slli Shift right >> >>> srli Bit-by-by AND & & and, andi Bit-by-by OR | | or, ori Bit-by-by XOR ^ ^ xor, xori Bit-by-by NOT ~ ~ - bitwise NOT \u8981\u7528\u5f02\u6216\u5b9e\u73b0\uff08\u4e0e\u5168 F \u5f02\u6216\uff09 Shift \u00b6 I \u578b\u6307\u4ee4 \u4e3a\u4ec0\u4e48\u8fd8\u6709 funct6 \u79fb\u4f4d\u4e0d\u9700\u8981\u8fd9\u4e48\u591a\u7acb\u5373\u6570\uff0c\u53ea\u8981\u516d\u4f4d ( \\(2^6=64\\) ) \u5373\u53ef\u3002 \u5de6\u79fb i \u4f4d\u76f8\u5f53\u4e8e\u4e58 \\(2^i\\) , \u53f3\u79fb i \u4f4d\u76f8\u5f53\u4e8e\u9664 \\(2^i\\) . AND \u00b6 OR \u00b6 XOR \u00b6 Instructions for making decisions \u00b6 Branch instructions \u00b6 beq reg1, reg2, Label \u76f8\u7b49\u5219\u8df3\u8f6c bne reg1, reg2, Label \u4e0d\u76f8\u7b49\u5219\u8df3\u8f6c Example store \u7684\u7acb\u5373\u6570\u662f\u4f5c\u4e3a\u6570\u636e\u7684\u5730\u5740, beq \u7684\u7acb\u5373\u6570\u662f\u4f5c\u4e3a\u8fd0\u7b97\u7684\u5730\u5740\uff08\u52a0\u5230 PC \u4e0a\uff09\u56e0\u6b64\u4e8c\u8005\u7684\u6307\u4ee4\u7c7b\u578b\u4e0d\u540c\u3002 \u8df3\u8f6c\u7684\u8303\u56f4\u6709\u9650\u5236\uff0c\u56e0\u4e3a\u7acb\u5373\u6570\u53ea\u6709 12 \u4f4d\u3002\uff08PC \u76f8\u5bf9\u5bfb\u5740\uff0c\u4ee5\u5f53\u524d\u7a0b\u5e8f\u4f4d\u7f6e\u4e3a\u57fa\u51c6\u524d\u540e\u8df3\uff09 Loop slt instruction \u00b6 set on if less than. slt x2, x3, x4 # x2=1 if x3 < x4 R \u578b\u6307\u4ee4 Example More Conditional Operations \u00b6 blt rs1, rs2, L1 \u82e5 rs1<rs2 \u5219\u8df3\u5230 L1 bge rs1, rs2, L1 \u82e5 rs1>=rs2 \u5219\u8df3\u5230 L1 Signed vs. Unsigned \u00b6 \u9ed8\u8ba4\u662f\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 Signed comparison: blt , bge Unsigned comparison: bltu , bgeu Case/Switch \u00b6 Compiling a switch using jump address table \\(x_6\\) \u662f\u8df3\u8f6c\u8868\u7684\u57fa\u5730\u5740\uff0c \\(x_7\\leftarrow x_6+8*k\\) jalr x1, 0(x7) \u628a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 PC+4 \u653e\u5165 x1 \u5bc4\u5b58\u5668\uff0c\u968f\u540e\u8df3\u5411 [x7] + 0 \u7684\u5730\u65b9\u3002 \u8fd9\u91cc\u6211\u4eec jalr x0, ... \u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u6539\u53d8 x0` \u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u8fd9\u91cc\u4ec5\u7528\u4f5c\u5360\u4f4d\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u3002 I \u578b\u6307\u4ee4 A basic block is a sequence of instructions with No embedded branches (except at end) No branch targets (except at beginning) Supporting Procedures in Computer Hardware \u00b6 Procedure/function --- be used to structure programs \u4e3a\u4e86\u5b8c\u6210\u7279\u5b9a\u4efb\u52a1\u3002\u6613\u4e8e\u7406\u89e3\uff0c\u53ef\u4ee5\u590d\u7528\u3002 \u8c03\u7528\u51fd\u6570\u7684\u6b65\u9aa4 Place Parameters in a place where the procedure can access them (in registers x10~x17 ) \u4f20\u53c2 Transfer control to the procedure \u63a7\u5236\u6743\u7ed9\u5b50\u7a0b\u5e8f Acquire the storage resources needed for the procedure Perform the desired task Place the result value in a place where the calling program can access it Return control to the point of origin (address in x1 ) Procedure Call Instructions \u00b6 Procedure call : jump and link jal x1, ProcedureLabel Address of following instruction put in x1 Jumps to target address Procedure return : jump and link register jalr x0, 0(x1) Like jal, but jumps to 0 + address in x1 Use x0 as rd ( x0 cannot be changed) Can also be used for computed jump \u4e0d\u80fd\u7528 jal \u8df3\u56de\u6765\uff0c\u8df3\u8fdb\u51fd\u6570\u7684\u5730\u5740\u7684\u662f\u56fa\u5b9a\u7684, Label \u4e00\u5b9a\u3002\u4f46\u662f\u8df3\u56de\u6765\u7684\u5730\u5740\u4e0d\u4e00\u5b9a\uff0c\u8981\u7528 x1 \u5b58\u50a8\u624d\u80fd\u8df3\u56de\u3002 Using More Registers \u00b6 Registers for procedure calling x10~x17 ( a0~a7 ): eight argument registers to pass parameters or return values \u7528\u6765\u4f20\u53c2\u7684 x1 : one return address register to return to origin point Stack\uff1aIdeal data structure for spilling registers Push, pop Stack pointer ( sp ): x2 \u6307\u5411\u6700\u6808\u9876\uff0c\u5373\u6700\u540e\u4e00\u4e2a\u6709\u6548\u6570\u636e\u6240\u5728\u7684\u4f4d\u7f6e Stack grow from higher address to lower address Push: sp = sp - 8 Pop: sp = sp + 8 Compiling a leaf procedure Name Register Name Usage Preserved or call? x0(zero) 0 The constant value 0 n.a. x1(ra) 1 Return address(link register) yes x2(sp) 2 Stack pointer yes x3(gp) 3 Global pointer yes x4(tp) 4 Thread pointer yes x5-x7(t0-t2) 5-7 Temporaries no x8(s0/fp) 8 Saved/frame pointer yes x9(s1) 9 Saved yes x10-x17(a0-a7) 10-17 Arguments/results no x18-x27(s2-s11) 18-27 Saved yes x28-x31(t3-t6) 28-31 Temporaries no PC - Auipc(Add Upper Immediate to PC) yes t0~t6 \u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u4e0d\u9700\u8981\u5728\u51fd\u6570\u4e2d\u4fdd\u5b58 s0~s11 saved registers \u6807\u6709 Preserved \u8868\u660e\u6211\u4eec\u9700\u8981\u5728\u51fd\u6570\u5f00\u59cb\u65f6\u4fdd\u5b58\u8be5\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5e76\u5728\u79bb\u5f00\u51fd\u6570\u524d\u6062\u590d\u5bc4\u5b58\u5668\u7684\u503c\u3002 Nested Procedure \u00b6 Example Preserved or not \u5bc4\u5b58\u5668\u4e00\u822c\u9760\u5806\u6808\u4fdd\u5b58, sp \u9760\u52a0\u51cf\u4fdd\u5b58\u3002 Local Data on the Stack Communicating with People \u00b6 Byte-encoded character sets e.g. ASCII, Latin-1 Unicode: 32-bit character set e.g. UTF-8, UTF-16 \u7f16\u7801\u4e2d\u6709\u4e0d\u540c\u957f\u5ea6\u7684\u6570\u636e\uff0c\u56e0\u6b64\u4e5f\u9700\u8981\u6709\u4e0d\u540c\u957f\u5ea6\u7684 load \u548c store. Load byte/halfword/word: Sign extend to 64 bits in rd \u6211\u4eec\u7684\u5bc4\u5b58\u5668\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64\u9700\u8981\u6269\u5145\u3002 lb rd, offset(rs1) lh rd, offset(rs1) lw rd, offset(rs1) ld rd, offset(rs1) Example \u540c\u6837\u662f\u53d6 A[4] \u7684\u503c\uff0c\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b offset \u4e0d\u540c\u3002 char \u4e3a 4, short int \u4e3a 8, int \u4e3a 16. Load byte/halfword/word unsigned: 0 extend to 64 bits in rd lbu rd, offset(rs1) lhu rd, offset(rs1) lwu rd, offset(rs1) Store byte/halfword/word: Store rightmost 8/16/32 bits sb rs2, offset(rs1) sh rs2, offset(rs1) sw rs2, offset(rs1) \u5b58\u50a8\u5c31\u4e0d\u9700\u8981\u8003\u8651\u6269\u5145\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u505a\u8fd0\u7b97\uff0c\u53ea\u662f\u628a\u5bf9\u5e94\u90e8\u5206\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u3002 offset \u53ef\u4ee5\u662f 3. \u56e0\u4e3a RISC-V \u662f\u53ef\u4ee5\u4e0d\u5bf9\u9f50\u7684\u3002\uff08\u5b9e\u9645\u4e0a sh offset \u4e00\u822c\u662f 2 \u7684\u500d\u6570, sw \u662f 4 \u7684\u500d\u6570\uff09 Compiling a string copy procedure i \u4e0d\u5e94\u8be5\u5206\u914d\u7ed9 s3, \u5206\u914d\u7ed9\u4e00\u4e2a\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u5c31\u53ef\u4ee5\u4e0d\u7528\u5806\u6808\u4fdd\u5b58 s3 \u4e86\u3002 \u5bf9\u4e8e\u4e00\u4e2a leaf procedure(\u4e0d\u518d\u8c03\u7528\u5176\u4ed6 procedure) \u7f16\u8bd1\u5668\u8981\u5c3d\u53ef\u80fd\u7528\u5b8c\u6240\u6709\u7684\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u518d\u53bb\u7528\u5176\u4ed6\u7684\u5bc4\u5b58\u5668\u3002 \u4e3a\u4ec0\u4e48\u5f3a\u8c03 leaf procedure? - \u56e0\u4e3a\u5bf9\u4e8e\u975e leaf \u7684\u51fd\u6570\uff0c\u53ef\u80fd\u4e34\u65f6\u53d8\u91cf\u4f1a\u88ab\u8c03\u7528\u540e\u7684\u51fd\u6570\u6539\u53d8\uff0c\u8fd9\u6837\u5c31\u4e0d\u80fd\u7ee7\u7eed\u7528\u4e86\u3002 RISC-V Addressing for 32-Bit Immediate and Addresses \u00b6 Wide Bit Immediate addressing \u00b6 \u5982\u4f55\u5c06\u4e00\u4e2a\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u4efb\u610f\u7684\u7acb\u5373\u6570\u3002 lui reg, imm \u53ef\u4ee5\u628a 20 \u4f4d\u7684\u5e38\u6570\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\u3002(U-type) \u6ce8\u610f\u8fd9\u91cc\uff0c\u6211\u4eec\u4f1a\u628a\u7acb\u5373\u6570\u653e\u5165\u5bc4\u5b58\u5668\u7684 [31:12] \u4f4d\uff0c\u4f4e\u4f4d\u4f1a\u586b\u5145\u4e3a 0. Loading a 32-bit constant \u6211\u4eec\u6700\u7ec8\u60f3\u653e\u5165\u5bc4\u5b58\u5668\u7684\u503c\u662f 32 \u4f4d\u5e38\u6570 0x003D0 . \u5148\u5229\u7528 lui \u5c06\u9ad8 20 \u4f4d 976 \u653e\u5165\u5bc4\u5b58\u5668\u4e2d\uff0c\u968f\u540e\u5229\u7528\u52a0\u6cd5\u6307\u4ee4\u52a0\u4e0a \u4f4e 12 \u4f4d\uff0c\u5373 2304. Branch Addressing \u00b6 SB-type PC-relative addressing \\(Target\\ address = PC + Branch\\ offset = PC + immediate \\times 2\\) \u8fd9\u91cc\u4f4e\u4f4d\u4f1a\u9ed8\u8ba4\u8865 0. \u8fd9\u6837\u53ef\u4ee5\u628a\u5730\u5740\u8303\u56f4\u6269\u5927\u4e00\u500d\u3002 Jump Addressing \u00b6 UJ-type(\u53ea\u6709 jal \u6307\u4ee4) 20-bit immediate for larger range, \u4f4e\u4f4d\u9ed8\u8ba4\u8865 0, \u6545\u5b9e\u9645\u8868\u793a\u7acb\u5373\u6570\u4e3a [20:0] \u5171 21 \u4f4d\u3002 Example RISC-V \u76f4\u63a5\u7528 PC \u7b97 offset, \u800c\u975e PC+4. All RISC-V instructions are 4 bytes long PC-relative addressing refers to the number of halfwords While branch target is far away * Inserts an unconditional jump to target Invert the condition so that the branch decides whether to skip the jump. Branching far away RISC-V Addressing Summary \u00b6 \u5bfb\u5740\u65b9\u5f0f\u662f\u6307\u4ee4\u96c6\u7684\u6838\u5fc3\u533a\u522b\u3002 \u7acb\u5373\u6570\u5bfb\u5740 addi x5, x6, 4 \u5bc4\u5b58\u5668\u5bfb\u5740 add x5, x6, x7 \u57fa\u5740\u5bfb\u5740 ld x5,100(x6) PC \u76f8\u5bf9\u5bfb\u5740 beq x5,x6,L1 Example RISC-V Disassembly \u00b6 \u628a\u673a\u5668\u7801\u7ffb\u8bd1\u4e3a\u6c47\u7f16\u6307\u4ee4\u3002 opcode \u5148\u770b opcode, \u786e\u5b9a\u662f\u54ea\u7c7b\u6307\u4ee4\uff0c\u968f\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u5177\u4f53\u5212\u5206\u4e86\u3002 Example Synchronization in RISC-V \u00b6 Two processors sharing an area of memory P1 writes, then P2 reads Data race if P1 and P2 don\u2019t synchronize Result depends of order of accesses Hardware support required Atomic read/write memory operation No other access to the location allowed between the read and write Could be a single instruction e.g. atomic swap * of register \u2194 memory Or an atomic pair of instructions Load reserved: lr.d rd,(rs1) \u628a\u5730\u5740 rs1 \u7684\u503c\u653e\u5230\u5bc4\u5b58\u5668 rd \u4e2d\uff0c\u540c\u65f6 Store conditional: sc.d rd,(rs1),rs2 \u628a\u5bc4\u5b58\u5668 rs2 \u7684\u503c\u653e\u5165\u5730\u5740 rs1. \u5982\u679c\u6210\u529f\u90a3\u4e48 rd \u91cc\u9762\u662f 0. \u5982\u679c\u4e0a\u6761\u6307\u4ee4 load \u540e\uff0c\u8fd9\u4e2a\u5730\u65b9\u7684\u503c\u88ab\u6539\u53d8\u4e86\uff0c\u90a3\u4e48\u5c31\u5931\u8d25\u4e86\uff0c\u8fd4\u56de 0. atomic swap lock \u5730\u5740 x20 \u653e\u7684\u662f\u9501\uff0c\u5982\u679c\u9501\u4e3a 0, \u8bf4\u660e\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5b58\u5165\u6570\u636e\uff0c\u5219\u6211\u4eec\u83b7\u5f97\u9501\u968f\u540e\u5b58\u5165\uff0c\u5e76\u91ca\u653e\u9501\u3002\u5426\u5219\u9700\u8981\u7b49\u9501\u91ca\u653e\u4e86\u624d\u80fd\u5b58\u3002 Translating and starting a program \u00b6 Producing an Object Module \u00b6 Provides information for building a complete program from the pieces(Header). Text segment: translated instructions Static data segment: data allocated for the life of the program Relocation info: for contents that depend on absolute location of loaded program Symbol table: global definitions and external refs Debug info: for associating with source cod Link \u00b6 Object modules(including library routine) \\(\\rightarrow\\) executable program Place code and data modules symbolically in memory Determine the addresses of data and instruction labels Patch both the internal and external references (Address of invoke) Loading a Program \u00b6 Load from image file on disk into memory Read header to determine segment sizes Create virtual address space Copy text and initialized data into memory Or set page table entries so they can be faulted in Set up arguments on stack Initialize registers (including sp, fp, gp) Jump to startup routine Copies arguments to x10, \u2026 and calls main pWhen main returns, do exit syscall Dynamic Linking \u00b6 Only link/load library procedure when it is called. \u9759\u6001\u94fe\u63a5\u5df2\u7ecf\u7f16\u5165\u6587\u4ef6\u4e86\uff0c\u52a8\u6001\u94fe\u63a5\u662f\u5728\u8fd0\u884c\u65f6\u94fe\u63a5\uff0c\u53ef\u4ee5\u7528\u5230\u6700\u65b0\u7684\u4ee3\u7801 Requires procedure code to be relocatable Avoids image bloat caused by static linking of all (transitively) referenced libraries Automatically picks up new library versions Arrays versus Pointers \u00b6 \u6307\u9488\u662f\u53ef\u4ee5\u6539\u53d8\u7684\uff0c\u4f46\u662f\u6570\u7ec4\u9996\u5730\u5740\u4e0d\u80fd\u6539\u53d8\uff0c\u56e0\u6b64\u7ffb\u8bd1\u6210\u6c47\u7f16\u7684\u7ed3\u679c\u4e5f\u6709\u6240\u4e0d\u540c\u3002 Clearing an Array Real Stuff: MIPS Instructions \u00b6 MIPS: commercial predecessor to RISC-V Similar basic set of instructions 32-bit instructions 32 general purpose registers, register 0 is always 0 32 floating-point registers Memory accessed only by load/store instructions Consistent use of addressing modes for all data sizes Different conditional branches For <, <=, >, >= RISC-V: blt, bge, bltu, bgeu MIPS: slt, sltu (set less than, result is 0 or 1) Then use beq , bne to complete the branch Real Stuff: The Intel x86 ISA \u00b6 Other RISC-V Instructions \u00b6 Base integer instructions (RV64I) Those previously described, plus auipc rd, immed // rd = (imm<<12) + pc follow by jalr (adds 12-bit immed) for long jump slt, sltu, slti, sltui : set less than (like MIPS) addw, subw, addiw : 32-bit add/sub sllw, srlw, srlw, slliw, srliw, sraiw : 32-bit shift 32-bit variant: RV32I registers are 32-bits wide, 32-bit operations RV64I \u662f\u6700\u57fa\u672c\u7684\u3002\u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u5f53\u524d\u6267\u884c\u662f\u57fa\u4e8e\u591a\u5c11\u4f4d\u7684\u5904\u7406\u5668\u3002 Instruction Set Extensions M: integer multiply, divide, remainder A: atomic memory operations F: single-precision floating point D: double-precision floating point C: compressed instructions 16 \u4f4d\u7684\u6307\u4ee4\uff0c\u7528\u4e8e\u4f4e\u6210\u672c\u4ea7\u54c1\uff08\u5d4c\u5165\u5f0f\uff09 Fallacies (\u8c2c\u8bef) Powerful instruction \\(\\Rightarrow\\) higher performance Use assembly code for high performance Backward compatibility \\(\\Rightarrow\\) instruction set doesn\u2019t change Pifalls (\u9677\u9631) Sequential words are not at sequential addresses (\u5e94\u8be5 +4) Keeping a pointer to an automatic variable after procedure returns","title":"\u6307\u4ee4\uff1a\u8ba1\u7b97\u673a\u7684\u8bed\u8a00"},{"location":"CO/co2/#instructions-language-of-the-computer","text":"","title":"Instructions: Language of the Computer"},{"location":"CO/co2/#introduction","text":"Language of the machine Instructions (Statement) Instruction Set (Syntax) Design goal Maximize performance \u540c\u6837\u8d44\u6e90\u7684\u60c5\u51b5\u4e0b\u6027\u80fd\u5927 Minimize cost \u540c\u6837\u6027\u80fd\u7684\u60c5\u51b5\u4e0b\u6210\u672c\u4f4e Reduce design time \u6307\u4ee4\u96c6\u7b80\u5355\uff0c\u6613\u4e8e\u7406\u89e3 \u6211\u4eec\u4f7f\u7528\u7684\u662f RISC-V \u67b6\u6784 Instruction Characteristics \u6307\u4ee4\u96c6\u57fa\u672c\u7684\u7ed3\u6784\uff1aOperation \u64cd\u4f5c; Operand \u64cd\u4f5c\u6570 \u4e0d\u540c\u6307\u4ee4\u96c6\uff0c\u6307\u4ee4\u7684\u7f16\u7801\u53ef\u4ee5\u4e0d\u540c\u3002\u5982 000 \u8868\u793a\u52a0\u6cd5\uff0c\u8fd9\u4e5f\u53eb\u6307\u4ee4\u7684 Encoding. \u64cd\u4f5c\u6570\u4f4d\u5bbd\u53ef\u4ee5\u4e0d\u540c\uff0c\u53ef\u4ee5\u662f\u7acb\u5373\u6570/\u5bc4\u5b58\u5668/\u5185\u5b58\u3002 \u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\uff1a \u6307\u4ee4\u7531\u6570\u5b57\u65b9\u5f0f\u88ab\u5b58\u50a8\uff0c\u53ef\u4ee5\u8fdb\u884c\u8bfb\u5199\u3002\uff1f\uff1f","title":"Introduction"},{"location":"CO/co2/#operation","text":"Every computer must be able to perform arithmetic . Only one operation per instruction Exactly 3 variables e.g. add a, b, c \u5373 \\(a\\leftarrow b+c\\) \u6ce8\u610f\u7ed3\u679c\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u6837\u6613\u4e8e\u89e3\u7801 Design Principle 1 - Simplicity favors regularity. Example C code f = ( g + h ) - ( i + j ); RISC-V code add t0 , g , h add t1 , i , j sub f , t0 , t1","title":"Operation"},{"location":"CO/co2/#operands-of-the-computer-hardware","text":"","title":"Operands of the Computer Hardware"},{"location":"CO/co2/#register-operands","text":"Arithmetic instructions use register operands. RISC-V has a \\(32\\times 64\\) -bit register file Use for frequently accessed data 32-bit data is called a word . 64-bit is called a doubleword . we call them x0 to x31 Design Principle 2 - Smaller is faster. \u5bc4\u5b58\u5668\u4e0d\u662f\u8d8a\u591a\u8d8a\u597d\uff0c\u591a\u4e86\u4e4b\u540e\u8bbf\u95ee\u6162\u3002 Name Register Name Usage Preserved or call? x0 0 The constant value 0 n.a. x1(ra) 1 Return address(link register) yes x2(sp) 2 Stack pointer yes x3(gp) 3 Global pointer yes x4(tp) 4 Thread pointer yes x5-x7 5-7 Temporaries no x8-x9 8-9 Saved yes x10-x17 10-17 Arguments/results no x18-x27 18-27 Saved yes x28-x31 28-31 Temporaries noW \u4e3a\u4ec0\u4e48\u5bc4\u5b58\u5668 x0 \u4e00\u76f4\u4e3a 0 Make the common fast. \u56e0\u4e3a\u7ecf\u5e38\u6709 0 \u53c2\u4e0e\u8ba1\u7b97\uff0c\u5c06\u5176\u5b58\u5728\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u4fbf\u4e8e\u8ba1\u7b97\u3002 Example add x5 , x20 , x21 add x6 , x22 , x23 sub x19 , x5 , x6","title":"Register Operands"},{"location":"CO/co2/#memory-operands","text":"Data transfer instructions Load: Load values from memory to register Store: Store result from register to memory; store doubleword Memory is byte addressed . RISC-V is Little Endian Little vs Big Endian \u5c0f\u7aef\uff1a\u4f4e\u4f4d\u653e\u5728\u5730\u5740\u8f83\u5c0f\u5904\uff1b\u5927\u7aef\u76f8\u53cd RISC-V dose not require words to be aligned in memory words align: \u4e00\u4e2a\u5b57\u662f 4 \u5b57\u8282\uff0c\u6211\u4eec\u8981\u6c42\u5b57\u7684\u8d77\u59cb\u5730\u5740\u4e00\u5b9a\u8981\u662f 4 \u7684\u500d\u6570\u3002 Memory Alignment \u7b2c\u4e00\u4e2a\u662f\u5bf9\u9f50\u7684\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4e0d\u5bf9\u9f50\u7684\u3002 \u4e0d\u5bf9\u9f50\u7684\u597d\u5904\u662f\u7701\u7a7a\u95f4 Memory Operand Example A [ 12 ] = h + A [ 8 ]; (\u9ed8\u8ba4\u6570\u7ec4\u662f\u53cc\u5b57\u7684, h in x21 , base address of A in x22 ) \u7ffb\u8bd1\u4e3a RISC-V \u4ee3\u7801\u5f97\u5230 ld x9 , 64 ( x22 ) add x9 , x21 , x9 sd x9 , 96 ( x22 ) \u5730\u5740\u662f\u4ee5 byte \u4e3a\u5355\u4f4d\uff0c\u6240\u4ee5\u8981\u504f\u79fb \\(8\\times 8=64\\) bytes. load \u548c store \u662f\u552f\u4e8c\u53ef\u4ee5\u8bbf\u95ee\u5b58\u50a8\u5668\u7684\u6307\u4ee4\u3002","title":"Memory Operands"},{"location":"CO/co2/#registers-vs-memory","text":"Registers are faster to access than memory Operating on memory data requires loads and stores Compiler must use registers for variables as much as possible \u7f16\u8bd1\u5668\u5c3d\u91cf\u4f7f\u7528\u5bc4\u5b58\u5668\u5b58\u53d8\u91cf\u3002\u53ea\u6709\u5728\u5bc4\u5b58\u5668\u4e0d\u591f\u7528\u65f6\uff0c\u624d\u4f1a\u628a\u4e0d\u592a\u7528\u7684\u503c\u653e\u56de\u5185\u5b58\u3002","title":"Registers vs. Memory"},{"location":"CO/co2/#constant-or-immediate-operands","text":"Immediate : Other method for adding constant Avoids the load instruction Offer versions of the instruction e.g. addi x22, x22, 4 Design Principle 3 - Make the common case fast. Summary \u4e3a\u4ec0\u4e48\u5185\u5b58\u662f \\(2^{61}\\) \u4e2a doublewords? \u53ef\u4ee5\u8868\u793a\u7684\u5730\u5740\u6709\u8fd9\u4e48\u591a\uff0c\u56e0\u4e3a\u6211\u4eec\u4ee5 64 \u4f4d\u5bc4\u5b58\u5668\u4e3a\u57fa\u5740\uff0c\u53ef\u4ee5\u8868\u793a\u7684\u53cc\u5b57\u5c31\u662f \\(2^{64}/2^3=2^{61}\\) (\u8fd9\u91cc \\(2^3\\) \u8868\u793a 8 \u4e2a\u5b57\u8282\uff0c\u5373\u53cc\u5b57). \u5373\u6211\u4eec\u7684 load \u6307\u4ee4\u53ef\u4ee5\u8bbf\u95ee\u7684\u8303\u56f4\u6709\u8fd9\u4e48\u5927\u3002","title":"Constant or Immediate Operands"},{"location":"CO/co2/#signed-and-unsigned-number","text":"","title":"Signed and Unsigned Number"},{"location":"CO/co2/#representing-instructions-in-the-computer","text":"All information in computer consists of binary bits. Instructions are encoded in binary called machine code (\u673a\u5668\u7801) Mapping registers into numbers 0 for register x0 , 31 for register x31 . e.t.c. RISC-V instructions 32 \u4f4d\u6307\u4ee4\u7f16\u7801\u3002\u6240\u6709\u6307\u4ee4\u90fd\u662f\u89c4\u5219\u5316\u7684\uff0c\u5373\u4e00\u90e8\u5206\u662f opcode, \u4e00\u90e8\u5206\u662f operands \u7b49\u7b49\u3002 Summary of RISC-V architecture","title":"Representing Instructions in the Computer"},{"location":"CO/co2/#r-format","text":"opcode : operaion code rd : destination register number funct3 : 3-bit function code(additional opcode) \u4f8b\u5982\uff0c\u6211\u4eec\u52a0\u6cd5\u51cf\u6cd5\u53ef\u4ee5\u505a\u6210\u4e00\u4e2a opcode, \u7136\u540e\u5229\u7528 funct \u8fdb\u884c\u9009\u62e9\u3002 rs1/rs2 : the first/second source register number funct7 : 7-bit function code(additional opcode) All instructions in RISC-V have the same length Design Principle 4 - Good design demands good compromises","title":"R-format"},{"location":"CO/co2/#i-format","text":"Immediate arithmetic and load instructions e.g. addi , ld rs1 : source or base address register number immediate : constant operand, or offset added to base address \u5c06 rs2, funct7 \u5408\u5e76\u4e86\uff0c\u5f97\u5230 12 \u4f4d\u7acb\u5373\u6570","title":"I-format"},{"location":"CO/co2/#s-format","text":"rs1 : base address register number rs2 : source opearand register number immediate: Split so that rs1 and rs2 fields always in the same place. Example Stored Program Computer Instructions represented in binary, like data. Instructions and data stored in memory. Programs can operate on programs. e.g. compiplers, linkers. Binary compatibility allows compiled programs to work on different computers","title":"S-format"},{"location":"CO/co2/#logical-operations","text":"Operation C Java RISC-V Shift left << << slli Shift right >> >>> srli Bit-by-by AND & & and, andi Bit-by-by OR | | or, ori Bit-by-by XOR ^ ^ xor, xori Bit-by-by NOT ~ ~ - bitwise NOT \u8981\u7528\u5f02\u6216\u5b9e\u73b0\uff08\u4e0e\u5168 F \u5f02\u6216\uff09","title":"Logical Operations"},{"location":"CO/co2/#shift","text":"I \u578b\u6307\u4ee4 \u4e3a\u4ec0\u4e48\u8fd8\u6709 funct6 \u79fb\u4f4d\u4e0d\u9700\u8981\u8fd9\u4e48\u591a\u7acb\u5373\u6570\uff0c\u53ea\u8981\u516d\u4f4d ( \\(2^6=64\\) ) \u5373\u53ef\u3002 \u5de6\u79fb i \u4f4d\u76f8\u5f53\u4e8e\u4e58 \\(2^i\\) , \u53f3\u79fb i \u4f4d\u76f8\u5f53\u4e8e\u9664 \\(2^i\\) .","title":"Shift"},{"location":"CO/co2/#and","text":"","title":"AND"},{"location":"CO/co2/#or","text":"","title":"OR"},{"location":"CO/co2/#xor","text":"","title":"XOR"},{"location":"CO/co2/#instructions-for-making-decisions","text":"","title":"Instructions for making decisions"},{"location":"CO/co2/#branch-instructions","text":"beq reg1, reg2, Label \u76f8\u7b49\u5219\u8df3\u8f6c bne reg1, reg2, Label \u4e0d\u76f8\u7b49\u5219\u8df3\u8f6c Example store \u7684\u7acb\u5373\u6570\u662f\u4f5c\u4e3a\u6570\u636e\u7684\u5730\u5740, beq \u7684\u7acb\u5373\u6570\u662f\u4f5c\u4e3a\u8fd0\u7b97\u7684\u5730\u5740\uff08\u52a0\u5230 PC \u4e0a\uff09\u56e0\u6b64\u4e8c\u8005\u7684\u6307\u4ee4\u7c7b\u578b\u4e0d\u540c\u3002 \u8df3\u8f6c\u7684\u8303\u56f4\u6709\u9650\u5236\uff0c\u56e0\u4e3a\u7acb\u5373\u6570\u53ea\u6709 12 \u4f4d\u3002\uff08PC \u76f8\u5bf9\u5bfb\u5740\uff0c\u4ee5\u5f53\u524d\u7a0b\u5e8f\u4f4d\u7f6e\u4e3a\u57fa\u51c6\u524d\u540e\u8df3\uff09 Loop","title":"Branch instructions"},{"location":"CO/co2/#slt-instruction","text":"set on if less than. slt x2, x3, x4 # x2=1 if x3 < x4 R \u578b\u6307\u4ee4 Example","title":"slt instruction"},{"location":"CO/co2/#more-conditional-operations","text":"blt rs1, rs2, L1 \u82e5 rs1<rs2 \u5219\u8df3\u5230 L1 bge rs1, rs2, L1 \u82e5 rs1>=rs2 \u5219\u8df3\u5230 L1","title":"More Conditional Operations"},{"location":"CO/co2/#signed-vs-unsigned","text":"\u9ed8\u8ba4\u662f\u6709\u7b26\u53f7\u6570\u8fdb\u884c\u6bd4\u8f83 Signed comparison: blt , bge Unsigned comparison: bltu , bgeu","title":"Signed vs. Unsigned"},{"location":"CO/co2/#caseswitch","text":"Compiling a switch using jump address table \\(x_6\\) \u662f\u8df3\u8f6c\u8868\u7684\u57fa\u5730\u5740\uff0c \\(x_7\\leftarrow x_6+8*k\\) jalr x1, 0(x7) \u628a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 PC+4 \u653e\u5165 x1 \u5bc4\u5b58\u5668\uff0c\u968f\u540e\u8df3\u5411 [x7] + 0 \u7684\u5730\u65b9\u3002 \u8fd9\u91cc\u6211\u4eec jalr x0, ... \u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u6539\u53d8 x0` \u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u8fd9\u91cc\u4ec5\u7528\u4f5c\u5360\u4f4d\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u3002 I \u578b\u6307\u4ee4 A basic block is a sequence of instructions with No embedded branches (except at end) No branch targets (except at beginning)","title":"Case/Switch"},{"location":"CO/co2/#supporting-procedures-in-computer-hardware","text":"Procedure/function --- be used to structure programs \u4e3a\u4e86\u5b8c\u6210\u7279\u5b9a\u4efb\u52a1\u3002\u6613\u4e8e\u7406\u89e3\uff0c\u53ef\u4ee5\u590d\u7528\u3002 \u8c03\u7528\u51fd\u6570\u7684\u6b65\u9aa4 Place Parameters in a place where the procedure can access them (in registers x10~x17 ) \u4f20\u53c2 Transfer control to the procedure \u63a7\u5236\u6743\u7ed9\u5b50\u7a0b\u5e8f Acquire the storage resources needed for the procedure Perform the desired task Place the result value in a place where the calling program can access it Return control to the point of origin (address in x1 )","title":"Supporting Procedures in Computer Hardware"},{"location":"CO/co2/#procedure-call-instructions","text":"Procedure call : jump and link jal x1, ProcedureLabel Address of following instruction put in x1 Jumps to target address Procedure return : jump and link register jalr x0, 0(x1) Like jal, but jumps to 0 + address in x1 Use x0 as rd ( x0 cannot be changed) Can also be used for computed jump \u4e0d\u80fd\u7528 jal \u8df3\u56de\u6765\uff0c\u8df3\u8fdb\u51fd\u6570\u7684\u5730\u5740\u7684\u662f\u56fa\u5b9a\u7684, Label \u4e00\u5b9a\u3002\u4f46\u662f\u8df3\u56de\u6765\u7684\u5730\u5740\u4e0d\u4e00\u5b9a\uff0c\u8981\u7528 x1 \u5b58\u50a8\u624d\u80fd\u8df3\u56de\u3002","title":"Procedure Call Instructions"},{"location":"CO/co2/#using-more-registers","text":"Registers for procedure calling x10~x17 ( a0~a7 ): eight argument registers to pass parameters or return values \u7528\u6765\u4f20\u53c2\u7684 x1 : one return address register to return to origin point Stack\uff1aIdeal data structure for spilling registers Push, pop Stack pointer ( sp ): x2 \u6307\u5411\u6700\u6808\u9876\uff0c\u5373\u6700\u540e\u4e00\u4e2a\u6709\u6548\u6570\u636e\u6240\u5728\u7684\u4f4d\u7f6e Stack grow from higher address to lower address Push: sp = sp - 8 Pop: sp = sp + 8 Compiling a leaf procedure Name Register Name Usage Preserved or call? x0(zero) 0 The constant value 0 n.a. x1(ra) 1 Return address(link register) yes x2(sp) 2 Stack pointer yes x3(gp) 3 Global pointer yes x4(tp) 4 Thread pointer yes x5-x7(t0-t2) 5-7 Temporaries no x8(s0/fp) 8 Saved/frame pointer yes x9(s1) 9 Saved yes x10-x17(a0-a7) 10-17 Arguments/results no x18-x27(s2-s11) 18-27 Saved yes x28-x31(t3-t6) 28-31 Temporaries no PC - Auipc(Add Upper Immediate to PC) yes t0~t6 \u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u4e0d\u9700\u8981\u5728\u51fd\u6570\u4e2d\u4fdd\u5b58 s0~s11 saved registers \u6807\u6709 Preserved \u8868\u660e\u6211\u4eec\u9700\u8981\u5728\u51fd\u6570\u5f00\u59cb\u65f6\u4fdd\u5b58\u8be5\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5e76\u5728\u79bb\u5f00\u51fd\u6570\u524d\u6062\u590d\u5bc4\u5b58\u5668\u7684\u503c\u3002","title":"Using More Registers"},{"location":"CO/co2/#nested-procedure","text":"Example Preserved or not \u5bc4\u5b58\u5668\u4e00\u822c\u9760\u5806\u6808\u4fdd\u5b58, sp \u9760\u52a0\u51cf\u4fdd\u5b58\u3002 Local Data on the Stack","title":"Nested Procedure"},{"location":"CO/co2/#communicating-with-people","text":"Byte-encoded character sets e.g. ASCII, Latin-1 Unicode: 32-bit character set e.g. UTF-8, UTF-16 \u7f16\u7801\u4e2d\u6709\u4e0d\u540c\u957f\u5ea6\u7684\u6570\u636e\uff0c\u56e0\u6b64\u4e5f\u9700\u8981\u6709\u4e0d\u540c\u957f\u5ea6\u7684 load \u548c store. Load byte/halfword/word: Sign extend to 64 bits in rd \u6211\u4eec\u7684\u5bc4\u5b58\u5668\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64\u9700\u8981\u6269\u5145\u3002 lb rd, offset(rs1) lh rd, offset(rs1) lw rd, offset(rs1) ld rd, offset(rs1) Example \u540c\u6837\u662f\u53d6 A[4] \u7684\u503c\uff0c\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b offset \u4e0d\u540c\u3002 char \u4e3a 4, short int \u4e3a 8, int \u4e3a 16. Load byte/halfword/word unsigned: 0 extend to 64 bits in rd lbu rd, offset(rs1) lhu rd, offset(rs1) lwu rd, offset(rs1) Store byte/halfword/word: Store rightmost 8/16/32 bits sb rs2, offset(rs1) sh rs2, offset(rs1) sw rs2, offset(rs1) \u5b58\u50a8\u5c31\u4e0d\u9700\u8981\u8003\u8651\u6269\u5145\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u505a\u8fd0\u7b97\uff0c\u53ea\u662f\u628a\u5bf9\u5e94\u90e8\u5206\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u3002 offset \u53ef\u4ee5\u662f 3. \u56e0\u4e3a RISC-V \u662f\u53ef\u4ee5\u4e0d\u5bf9\u9f50\u7684\u3002\uff08\u5b9e\u9645\u4e0a sh offset \u4e00\u822c\u662f 2 \u7684\u500d\u6570, sw \u662f 4 \u7684\u500d\u6570\uff09 Compiling a string copy procedure i \u4e0d\u5e94\u8be5\u5206\u914d\u7ed9 s3, \u5206\u914d\u7ed9\u4e00\u4e2a\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u5c31\u53ef\u4ee5\u4e0d\u7528\u5806\u6808\u4fdd\u5b58 s3 \u4e86\u3002 \u5bf9\u4e8e\u4e00\u4e2a leaf procedure(\u4e0d\u518d\u8c03\u7528\u5176\u4ed6 procedure) \u7f16\u8bd1\u5668\u8981\u5c3d\u53ef\u80fd\u7528\u5b8c\u6240\u6709\u7684\u4e34\u65f6\u5bc4\u5b58\u5668\uff0c\u518d\u53bb\u7528\u5176\u4ed6\u7684\u5bc4\u5b58\u5668\u3002 \u4e3a\u4ec0\u4e48\u5f3a\u8c03 leaf procedure? - \u56e0\u4e3a\u5bf9\u4e8e\u975e leaf \u7684\u51fd\u6570\uff0c\u53ef\u80fd\u4e34\u65f6\u53d8\u91cf\u4f1a\u88ab\u8c03\u7528\u540e\u7684\u51fd\u6570\u6539\u53d8\uff0c\u8fd9\u6837\u5c31\u4e0d\u80fd\u7ee7\u7eed\u7528\u4e86\u3002","title":"Communicating with People"},{"location":"CO/co2/#risc-v-addressing-for-32-bit-immediate-and-addresses","text":"","title":"RISC-V Addressing for 32-Bit Immediate and Addresses"},{"location":"CO/co2/#wide-bit-immediate-addressing","text":"\u5982\u4f55\u5c06\u4e00\u4e2a\u5bc4\u5b58\u5668\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u4efb\u610f\u7684\u7acb\u5373\u6570\u3002 lui reg, imm \u53ef\u4ee5\u628a 20 \u4f4d\u7684\u5e38\u6570\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\u3002(U-type) \u6ce8\u610f\u8fd9\u91cc\uff0c\u6211\u4eec\u4f1a\u628a\u7acb\u5373\u6570\u653e\u5165\u5bc4\u5b58\u5668\u7684 [31:12] \u4f4d\uff0c\u4f4e\u4f4d\u4f1a\u586b\u5145\u4e3a 0. Loading a 32-bit constant \u6211\u4eec\u6700\u7ec8\u60f3\u653e\u5165\u5bc4\u5b58\u5668\u7684\u503c\u662f 32 \u4f4d\u5e38\u6570 0x003D0 . \u5148\u5229\u7528 lui \u5c06\u9ad8 20 \u4f4d 976 \u653e\u5165\u5bc4\u5b58\u5668\u4e2d\uff0c\u968f\u540e\u5229\u7528\u52a0\u6cd5\u6307\u4ee4\u52a0\u4e0a \u4f4e 12 \u4f4d\uff0c\u5373 2304.","title":"Wide Bit Immediate addressing"},{"location":"CO/co2/#branch-addressing","text":"SB-type PC-relative addressing \\(Target\\ address = PC + Branch\\ offset = PC + immediate \\times 2\\) \u8fd9\u91cc\u4f4e\u4f4d\u4f1a\u9ed8\u8ba4\u8865 0. \u8fd9\u6837\u53ef\u4ee5\u628a\u5730\u5740\u8303\u56f4\u6269\u5927\u4e00\u500d\u3002","title":"Branch Addressing"},{"location":"CO/co2/#jump-addressing","text":"UJ-type(\u53ea\u6709 jal \u6307\u4ee4) 20-bit immediate for larger range, \u4f4e\u4f4d\u9ed8\u8ba4\u8865 0, \u6545\u5b9e\u9645\u8868\u793a\u7acb\u5373\u6570\u4e3a [20:0] \u5171 21 \u4f4d\u3002 Example RISC-V \u76f4\u63a5\u7528 PC \u7b97 offset, \u800c\u975e PC+4. All RISC-V instructions are 4 bytes long PC-relative addressing refers to the number of halfwords While branch target is far away * Inserts an unconditional jump to target Invert the condition so that the branch decides whether to skip the jump. Branching far away","title":"Jump Addressing"},{"location":"CO/co2/#risc-v-addressing-summary","text":"\u5bfb\u5740\u65b9\u5f0f\u662f\u6307\u4ee4\u96c6\u7684\u6838\u5fc3\u533a\u522b\u3002 \u7acb\u5373\u6570\u5bfb\u5740 addi x5, x6, 4 \u5bc4\u5b58\u5668\u5bfb\u5740 add x5, x6, x7 \u57fa\u5740\u5bfb\u5740 ld x5,100(x6) PC \u76f8\u5bf9\u5bfb\u5740 beq x5,x6,L1 Example","title":"RISC-V Addressing Summary"},{"location":"CO/co2/#risc-v-disassembly","text":"\u628a\u673a\u5668\u7801\u7ffb\u8bd1\u4e3a\u6c47\u7f16\u6307\u4ee4\u3002 opcode \u5148\u770b opcode, \u786e\u5b9a\u662f\u54ea\u7c7b\u6307\u4ee4\uff0c\u968f\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u5177\u4f53\u5212\u5206\u4e86\u3002 Example","title":"RISC-V Disassembly"},{"location":"CO/co2/#synchronization-in-risc-v","text":"Two processors sharing an area of memory P1 writes, then P2 reads Data race if P1 and P2 don\u2019t synchronize Result depends of order of accesses Hardware support required Atomic read/write memory operation No other access to the location allowed between the read and write Could be a single instruction e.g. atomic swap * of register \u2194 memory Or an atomic pair of instructions Load reserved: lr.d rd,(rs1) \u628a\u5730\u5740 rs1 \u7684\u503c\u653e\u5230\u5bc4\u5b58\u5668 rd \u4e2d\uff0c\u540c\u65f6 Store conditional: sc.d rd,(rs1),rs2 \u628a\u5bc4\u5b58\u5668 rs2 \u7684\u503c\u653e\u5165\u5730\u5740 rs1. \u5982\u679c\u6210\u529f\u90a3\u4e48 rd \u91cc\u9762\u662f 0. \u5982\u679c\u4e0a\u6761\u6307\u4ee4 load \u540e\uff0c\u8fd9\u4e2a\u5730\u65b9\u7684\u503c\u88ab\u6539\u53d8\u4e86\uff0c\u90a3\u4e48\u5c31\u5931\u8d25\u4e86\uff0c\u8fd4\u56de 0. atomic swap lock \u5730\u5740 x20 \u653e\u7684\u662f\u9501\uff0c\u5982\u679c\u9501\u4e3a 0, \u8bf4\u660e\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5b58\u5165\u6570\u636e\uff0c\u5219\u6211\u4eec\u83b7\u5f97\u9501\u968f\u540e\u5b58\u5165\uff0c\u5e76\u91ca\u653e\u9501\u3002\u5426\u5219\u9700\u8981\u7b49\u9501\u91ca\u653e\u4e86\u624d\u80fd\u5b58\u3002","title":"Synchronization in RISC-V"},{"location":"CO/co2/#translating-and-starting-a-program","text":"","title":"Translating and starting a program"},{"location":"CO/co2/#producing-an-object-module","text":"Provides information for building a complete program from the pieces(Header). Text segment: translated instructions Static data segment: data allocated for the life of the program Relocation info: for contents that depend on absolute location of loaded program Symbol table: global definitions and external refs Debug info: for associating with source cod","title":"Producing an Object Module"},{"location":"CO/co2/#link","text":"Object modules(including library routine) \\(\\rightarrow\\) executable program Place code and data modules symbolically in memory Determine the addresses of data and instruction labels Patch both the internal and external references (Address of invoke)","title":"Link"},{"location":"CO/co2/#loading-a-program","text":"Load from image file on disk into memory Read header to determine segment sizes Create virtual address space Copy text and initialized data into memory Or set page table entries so they can be faulted in Set up arguments on stack Initialize registers (including sp, fp, gp) Jump to startup routine Copies arguments to x10, \u2026 and calls main pWhen main returns, do exit syscall","title":"Loading a Program"},{"location":"CO/co2/#dynamic-linking","text":"Only link/load library procedure when it is called. \u9759\u6001\u94fe\u63a5\u5df2\u7ecf\u7f16\u5165\u6587\u4ef6\u4e86\uff0c\u52a8\u6001\u94fe\u63a5\u662f\u5728\u8fd0\u884c\u65f6\u94fe\u63a5\uff0c\u53ef\u4ee5\u7528\u5230\u6700\u65b0\u7684\u4ee3\u7801 Requires procedure code to be relocatable Avoids image bloat caused by static linking of all (transitively) referenced libraries Automatically picks up new library versions","title":"Dynamic Linking"},{"location":"CO/co2/#arrays-versus-pointers","text":"\u6307\u9488\u662f\u53ef\u4ee5\u6539\u53d8\u7684\uff0c\u4f46\u662f\u6570\u7ec4\u9996\u5730\u5740\u4e0d\u80fd\u6539\u53d8\uff0c\u56e0\u6b64\u7ffb\u8bd1\u6210\u6c47\u7f16\u7684\u7ed3\u679c\u4e5f\u6709\u6240\u4e0d\u540c\u3002 Clearing an Array","title":"Arrays versus Pointers"},{"location":"CO/co2/#real-stuff-mips-instructions","text":"MIPS: commercial predecessor to RISC-V Similar basic set of instructions 32-bit instructions 32 general purpose registers, register 0 is always 0 32 floating-point registers Memory accessed only by load/store instructions Consistent use of addressing modes for all data sizes Different conditional branches For <, <=, >, >= RISC-V: blt, bge, bltu, bgeu MIPS: slt, sltu (set less than, result is 0 or 1) Then use beq , bne to complete the branch","title":"Real Stuff: MIPS Instructions"},{"location":"CO/co2/#real-stuff-the-intel-x86-isa","text":"","title":"Real Stuff: The Intel x86 ISA"},{"location":"CO/co2/#other-risc-v-instructions","text":"Base integer instructions (RV64I) Those previously described, plus auipc rd, immed // rd = (imm<<12) + pc follow by jalr (adds 12-bit immed) for long jump slt, sltu, slti, sltui : set less than (like MIPS) addw, subw, addiw : 32-bit add/sub sllw, srlw, srlw, slliw, srliw, sraiw : 32-bit shift 32-bit variant: RV32I registers are 32-bits wide, 32-bit operations RV64I \u662f\u6700\u57fa\u672c\u7684\u3002\u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u5f53\u524d\u6267\u884c\u662f\u57fa\u4e8e\u591a\u5c11\u4f4d\u7684\u5904\u7406\u5668\u3002 Instruction Set Extensions M: integer multiply, divide, remainder A: atomic memory operations F: single-precision floating point D: double-precision floating point C: compressed instructions 16 \u4f4d\u7684\u6307\u4ee4\uff0c\u7528\u4e8e\u4f4e\u6210\u672c\u4ea7\u54c1\uff08\u5d4c\u5165\u5f0f\uff09 Fallacies (\u8c2c\u8bef) Powerful instruction \\(\\Rightarrow\\) higher performance Use assembly code for high performance Backward compatibility \\(\\Rightarrow\\) instruction set doesn\u2019t change Pifalls (\u9677\u9631) Sequential words are not at sequential addresses (\u5e94\u8be5 +4) Keeping a pointer to an automatic variable after procedure returns","title":"Other RISC-V Instructions"},{"location":"CO/co3/","text":"Arithmetic for Computer \u00b6 Introduction \u00b6 Instructions can be divided into 3 categories memory-reference instructions e.g. lw, sw \u9700\u8981 ALU \u8ba1\u7b97\u5185\u5b58\u5730\u5740 arithmetic-logical instructions e.g. add, sub, and, or, xor, slt \u9700\u8981 ALU \u8fdb\u884c\u8ba1\u7b97 control flow instructions e.g. beq, bne, jal \u9700\u8981 ALU \u8fdb\u884c\u6761\u4ef6\u5224\u65ad Signed Number Formats \u00b6 Sign and magnitude 2's Complement 1's Complement Biased notation Why we need biased notation \u4e0a\u56fe\u662f 32 \u4f4d\u7684\u4e8c\u8fdb\u5236\u8865\u7801\u8868\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5de6\u4fa7\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u5982\u679c\u770b\u4f5c\u65e0\u7b26\u53f7\u6570\uff0c\u90a3\u4ed6\u4eec\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684\uff1b\u4f46\u53f3\u4fa7\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6574\u6570\u786e\u5b9e\u5206\u6bb5\u5355\u589e\u7684\u3002 \u6211\u4eec\u5e0c\u671b\u6709\u4e00\u79cd\u8fd9\u6837\u7684\u8868\u793a\uff0c\u80fd\u591f\u8ba9\u53f3\u4fa7\u7684\u5bf9\u5e94\u7684\u503c\u4e5f\u5355\u8c03\u9012\u589e\u3002 \u4e00\u4e2a\u60f3\u6cd5\u662f\u5bf9\u53f3\u4fa7\u6570\u52a0\u4e0a \\(2^31\\) , \u76f8\u5f53\u4e8e\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u6700\u9ad8\u4f4d\u7ffb\u8f6c\u3002 \\([X]_b = 2^n + X\\) \u4ece\u4e8c\u8fdb\u5236\u8865\u7801\u5230\u79fb\u7801\uff0c\u53ea\u9700\u8981\u7ffb\u8f6c\u7b26\u53f7\u4f4d\u5373\u53ef\u3002 Arithmetic \u00b6 Addition Substraction Overflow detection: \\(C_n \\oplus C_{n-1}\\) Constructing an ALU \u6ce8: RISC-V \u4e0d\u652f\u6301 nor \u6307\u4ee4\u3002 Multiplication \u00b6 Unsigned multiplication \u00b6 Multiplicand (\u88ab\u4e58\u6570) \\(\\times\\) Multiplier (\u4e58\u6570) \u5982\u679c\u4e58\u6570\u672b\u4f4d\u662f 1, \u52a0\u88ab\u4e58\u6570\uff0c\u5426\u5219\u52a0 0. \u968f\u540e\u5c06\u88ab\u4e58\u6570\u5de6\u79fb 1 \u4f4d\u3002 \u9700\u8981 128+128+64 bit \u7684\u5bc4\u5b58\u5668\uff0c\u548c\u4e00\u4e2a 128 bit ALU. \u4e0d\u79fb\u88ab\u4e58\u6570\uff0c\u800c\u662f\u79fb\u79ef (product). \u8fd9\u6837 ALU \u53ea\u9700\u8981 64 \u4f4d\u3002 Example \u8fd9\u91cc\u79ef\u6700\u5f00\u59cb\u53ea\u4fdd\u5b58\u5728\u5de6\u534a\u90e8\u5206\uff0c\u53f3\u534a\u90e8\u5206\u4e3a\u7a7a\u3002\u800c\u4e58\u6570\u4e5f\u8981\u53f3\u79fb\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u628a\u4e24\u4e2a\u6570\u62fc\u5230\u4e00\u8d77\uff0c\u540c\u65f6\u53f3\u79fb\u3002 Signed multiplication \u00b6 \u6709\u7b26\u53f7\u76f8\u4e58\u4e0d\u80fd\u76f4\u63a5\u4e58\uff0c\u53ef\u4ee5\u5148\u7528\u7b26\u53f7\u4f4d\u51b3\u5b9a\u7ed3\u679c\u7b26\u53f7\uff0c\u518d\u5bf9\u7edd\u5bf9\u503c\u8fdb\u884c\u4e58\u6cd5\u3002 Booth's Algorithm \u601d\u60f3\uff1a\u5982\u679c\u6709\u4e00\u4e32 1, \u51cf\u6389\u4e58\u6570\u7684\u7b2c\u4e00\u4e2a 1, \u540e\u9762\u7684 1 \u7684\u5e8f\u5217\u8fdb\u884c\u79fb\u4f4d\uff0c\u5f53\u4e0a\u4e00\u6b65\u662f\u6700\u540e\u4e00\u4e2a 1 \u65f6\u52a0\u3002 \u6700\u5f00\u59cb\u628a\u79ef\u653e\u5728\u9ad8\u4f4d\uff0c\u88ab\u4e58\u6570\u653e\u5728\u4f4e\u4f4d\u3002\uff08\u6570\u636e\u4fdd\u5b58\u65b9\u6cd5\u540c 2.1.1\uff09\u9ed8\u8ba4 \\(bit_{-1}=0\\) Action 10 - subtract multiplicand from left 11 - nop 01 - add multiplicand to left half 00 - nop \u6bcf\u4e2a\u64cd\u4f5c\u7ed3\u675f\u540e\u90fd\u8981\u79fb\u4f4d\uff0c\u548c 2.1.1 \u4e2d\u7c7b\u4f3c \u6ce8\u610f\u79fb\u4f4d\u65f6\u4e0d\u8981\u6539\u53d8\u7b26\u53f7\u4f4d\u3002 Example \u88ab\u4e58\u6570 Multiplicand \u662f 0010, \u4e58\u6570 Multiplier \u662f 1101. \u6700\u5f00\u59cb\u5c06\u79ef 0000 \u653e\u5728\u9ad8\u56db\u4f4d, 1101 \u4f5c\u4e3a\u4e58\u6570\u653e\u5728\u4f4e\u56db\u4f4d\u3002 \u6700\u5f00\u59cb 10, \u5373\u6267\u884c\u51cf\u64cd\u4f5c, \\(0000-0010=1110\\) . \u7b54\u6848\u4f9d\u7136\u653e\u5728\u9ad8\u56db\u4f4d\uff0c\u968f\u540e\u53f3\u79fb\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u6ce8\u610f\u53f3\u79fb\u7684\u65f6\u5019\u662f \u7b97\u672f\u53f3\u79fb , \\(bit_{-1}\\) \u4e5f\u53ef\u80fd\u4f1a\u6539\u53d8\u3002 Faster Multiplication \u00b6 32 \u4f4d\u6570\u4e58 32 \u4f4d\u6570\uff0c\u76f8\u5f53\u4e8e 32 \u4e2a 32 \u4f4d\u6570\u76f8\u52a0\u3002\uff08\u5e76\u884c\u52a0\u901f\uff09 Division \u00b6 Dividend (\u88ab\u9664\u6570) \\(\\div\\) Divisor (\u9664\u6570) \u5c06\u9664\u6570\u653e\u5230\u9ad8\u4f4d\u3002\u4ece\u9ad8\u4f4d\u5f00\u59cb\u51cf\uff0c\u51cf\u5b8c\u5c06\u9664\u6570\u53f3\u79fb\u3002\u5546\u4e5f\u968f\u4e4b\u4e0d\u65ad\u5de6\u79fb\u3002\u5982\u679c\u51cf\u5b8c\u4e4b\u540e\u662f\u8d1f\u6570\uff0c\u9700\u8981\u8fd8\u56de\u53bb\u3002 7\u00f72 \u9664\u6570\u4e0d\u52a8\uff0c\u88ab\u9664\u6570\u4e0d\u505c\u5730\u5f80\u5de6\u79fb\u3002\u51cf\u5230\u6700\u540e\u4e00\u6b21\uff0c\u5982\u679c\u662f\u5c0f\u4e8e 0 \u7684\uff0c\u8bf4\u660e\u4e0d\u7528\u51cf\u4e86\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u4f59\u6570\uff0c\u9700\u8981\u53f3\u79fb\u79fb\u56de\u6765\u3002\uff08\u5373\u5c06\u5de6\u534a\u90e8\u5206\u53f3\u79fb\u4e00\u4f4d\uff09 \u56e0\u4e3a\u6bcf\u6b21\u90fd\u662f\u5c06\u9664\u6570\u548c\u88ab\u9664\u6570\u6700\u9ad8\u4f4d\u51cf\uff0c\u51cf\u4e86\u4e4b\u540e\u9ad8\u4f4d\u5c31\u6ca1\u7528\u4e86\uff0c\u53ef\u4ee5\u79fb\u51fa\u53bb\u3002 \u5b9e\u9645\u4e0a\u8fd9\u91cc\u7ed3\u679c\u662f 129 \u4f4d\uff0c\u9632\u6b62 carry \u4e22\u5931 ??? Example <div align=center> <img src=\"http://cdn.hobbitqia.cc/202303102303764.png\" width = 60%/> </div> \u8fd9\u91cc\u6700\u5f00\u59cb\u4f59\u6570\u5c31\u662f\u6574\u4e2a\u88ab\u9664\u6570\u3002 \u7c7b\u4f3c\u4e58\u6cd5\uff0c\u8fd9\u91cc\u7684\u9664\u6570\u53ea\u548c\u88ab\u9664\u6570\u7684\u9ad8\u4f4d\u76f8\u51cf\u3002\u5982\u679c\u51cf\u51fa\u6765\u662f\u8d1f\u6570\uff0c\u9700\u8981\u52a0\u56de\u53bb\u3002\u6bcf\u6b21\u51cf\u5b8c\u4e4b\u540e\u5148\u5de6\u79fb\uff0c\u7136\u540e\u6700\u53f3\u8fb9\u7684\u4e00\u4f4d\u653e\u5546\u3002 4.1 \u65f6\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u7ed3\u675f\u4e86\u9664\u6cd5\u64cd\u4f5c\uff0c\u6b64\u65f6\u7684\u9ad8\u4f4d\u5c31\u662f\u6211\u4eec\u7684\u4f59\u6570\uff0c\u4f46\u662f\u8fd9\u6700\u540e\u4e00\u6b21\u7684\u7ed3\u679c\u8fd8\u6ca1\u6709\u653e\u56de\u5230 Reminder \u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u518d\u5f80\u5de6\u79fb\u4e00\u4f4d\u4e3a\u5546\u7559\u51fa\u7a7a\u95f4\uff0c\u653e\u5165\u540e\uff0c\u518d\u628a\u9ad8\u4f4d\u4f59\u6570\u5f80\u53f3\u79fb\u52a8\u4ee5\u62b5\u6d88\u5f71\u54cd\u3002\uff08\u4e2a\u4eba\u8ba4\u4e3a\u53ef\u4ee5\u76f4\u63a5\u5bf9\u4f4e\u4f4d\u5de6\u79fb\u4e00\u4f4d\u5373\u53ef\uff09 \u5e26\u7b26\u53f7\u7684\u9664\u6cd5\uff1a\u8981\u6c42\u4f59\u6570\u548c\u88ab\u9664\u6570\u7b26\u53f7\u76f8\u540c\u3002 \u9664\u96f6\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff0c\u7531\u8f6f\u4ef6\u68c0\u6d4b\u3002 Floating point number \u00b6 \u53ef\u89c1 ICS Notes S exp frac Float 1 8 23 Double 1 11 52 Normalized form: \\(N=(-1)^S\\times M\\times 2^E\\) S: sign. \\(S=1\\) indicates the number is negative. M: \u5c3e\u6570. Normally, \\(M=1.frac=1+frac\\) . E: \u9636\u7801. Normally, \\(E=exp-Bias\\) where \\(Bias=127\\) for floating point numbers. \\(Bias = 1023\\) for double. \u4e3a\u4ec0\u4e48\u8981\u628a exponent \u653e\u5728\u524d\u9762\uff1f \u56e0\u4e3a\u6570\u7684\u5927\u5c0f\u4e3b\u8981\u7531 exponent \u51b3\u5b9a\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981 Bias -> \u79fb\u7801 \u4e0d\u8981\u5fd8\u4e86\u524d\u5bfc 1 Precision \u00b6 signle: approx \\(2^{-23}\\) \\(23\\times \\log_{10}{2} \\approx 23\\times 0.3 \\approx 7\\) demical digits of precision. double: approx \\(2^{-52}\\) \\(52\\times \\log_{10}{2}\\approx 52\\times 0.3 \\approx 16\\) demical digits of preicsion. Limitations \u00b6 Overflow: The number is too big to be represented Underflow: The number is too small to be represented Denormal Numbers \u00b6 \\(Exponent=000\\ldots 0\\) \u975e\u89c4\u683c\u5316\u6570\uff0c\u8ba9\u6570\u5728\u8f83\u5c0f\u65f6\u80fd\u9010\u6e10\u4e0b\u6ea2\u51fa\u3002 \\(x=(-1)^s\\times((0+Fraction)\\times 2^{1-Bias})\\) \u6ce8\u610f\u6b64\u65f6\u6307\u6570\u662f \\(1-Bias=-126/-1022\\) . Denormal with \\(Fraction = 000...0\\) we define \\(x=0\\) \\(Exponent=111\\ldots 1, Fraction=000\\ldots 0\\) \u8868\u793a \\(\\pm \\inf\\) \\(Exponent=111\\ldots 1, Fraction\\neq 000\\ldots 0\\) \u8868\u793a NaN (Not-a-Number) Floating-Point Addition \u00b6 Alignment \u7edf\u4e00\u6307\u6570\uff0c\u4e00\u822c\u5c0f\u7684\u5f80\u5927\u7684\u53d8\u3002\u56e0\u4e3a\u7cfb\u7edf\u7cbe\u5ea6\u4f4d\u6570\u6709\u9650\uff0c\u5982\u679c\u5c06\u5927\u7684\u5f80\u5c0f\u7684\u53d8\uff0c\u90a3\u53ef\u80fd\u4f1a\u56e0\u6b64\u635f\u5931\u8f83\u5927\u3002 Example The proper digits have to be added Addition of significands Normalization of the result Rounding Example FP Adder Hardware step 1 \u5728\u9009\u62e9\u6307\u6570\u5927\u7684\uff0c\u5e76\u8fdb\u884c\u5bf9\u9f50\u3002\u540c\u65f6\u5c3e\u6570\u53ef\u80fd\u8fd8\u8981\u52a0\u4e0a\u524d\u5bfc 1. step 3 \u662f\u5bf9\u7ed3\u679c\u8fdb\u884c\u6807\u51c6\u5316\u3002 \u84dd\u8272\u7ebf\u4e3a\u63a7\u5236\u901a\u8def\uff0c\u9ed1\u8272\u7ebf\u4e3a\u6570\u636e\u901a\u8def\u3002 Floating-Point Multiplication \u00b6 \\((s1\\cdot 2^{e1}) \\cdot (s2\\cdot 2^{s2}) = (s1\\cdot s2)\\cdot 2^{e1+e2}\\) Add exponents Multiply the significands Normalize Over/Underflow? \u6709\u7684\u8bdd\u8981\u629b\u51fa\u5f02\u5e38\uff0c\u901a\u8fc7\u7ed3\u679c\u7684\u6307\u6570\u5224\u65ad\u3002 Rounding Sign \u6ce8\u610f Exponet \u4e2d\u662f\u6709 Bias \u7684\uff0c\u4e24\u4e2a\u6570\u7684 exp \u90e8\u5206\u76f8\u52a0\u540e\u8fd8\u8981\u518d\u51cf\u53bb Bias. Example Data Flow \u53f3\u8fb9\u5f80\u56de\u7684\u7bad\u5934: Rounding \u540e\u53ef\u80fd\u4f1a\u8fdb\u4f4d\u3002 Incr \u7528\u4e8e\u6807\u51c6\u5316\u7ed3\u679c\uff0c\u4e0e\u53f3\u4fa7 Shift Right \u914d\u5408\u3002 Accurate Arithmetic \u00b6 Extra bits of precision (guard, round, sticky) guard, round \u4e3a\u4e86\u4fdd\u8bc1\u56db\u820d\u4e94\u5165\u7684\u7cbe\u5ea6\u3002 \u7ed3\u679c\u6ca1\u6709\uff0c\u53ea\u5728\u8fd0\u7b97\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u7559\u3002 Example sticky \u672b\u5c3e\u5982\u679c\u4e0d\u4e3a\u5168 0, \u5219 sticky \u4f4d\u4e3a 1, \u5426\u5219\u4e3a 0. \u635f\u5931\u4e0d\u4f1a\u8d85\u8fc7 0.5 \u4e2a ulp.","title":"\u8ba1\u7b97\u673a\u7684\u7b97\u672f\u8fd0\u7b97"},{"location":"CO/co3/#arithmetic-for-computer","text":"","title":"Arithmetic for Computer"},{"location":"CO/co3/#introduction","text":"Instructions can be divided into 3 categories memory-reference instructions e.g. lw, sw \u9700\u8981 ALU \u8ba1\u7b97\u5185\u5b58\u5730\u5740 arithmetic-logical instructions e.g. add, sub, and, or, xor, slt \u9700\u8981 ALU \u8fdb\u884c\u8ba1\u7b97 control flow instructions e.g. beq, bne, jal \u9700\u8981 ALU \u8fdb\u884c\u6761\u4ef6\u5224\u65ad","title":"Introduction"},{"location":"CO/co3/#signed-number-formats","text":"Sign and magnitude 2's Complement 1's Complement Biased notation Why we need biased notation \u4e0a\u56fe\u662f 32 \u4f4d\u7684\u4e8c\u8fdb\u5236\u8865\u7801\u8868\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5de6\u4fa7\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u5982\u679c\u770b\u4f5c\u65e0\u7b26\u53f7\u6570\uff0c\u90a3\u4ed6\u4eec\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684\uff1b\u4f46\u53f3\u4fa7\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6574\u6570\u786e\u5b9e\u5206\u6bb5\u5355\u589e\u7684\u3002 \u6211\u4eec\u5e0c\u671b\u6709\u4e00\u79cd\u8fd9\u6837\u7684\u8868\u793a\uff0c\u80fd\u591f\u8ba9\u53f3\u4fa7\u7684\u5bf9\u5e94\u7684\u503c\u4e5f\u5355\u8c03\u9012\u589e\u3002 \u4e00\u4e2a\u60f3\u6cd5\u662f\u5bf9\u53f3\u4fa7\u6570\u52a0\u4e0a \\(2^31\\) , \u76f8\u5f53\u4e8e\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u6700\u9ad8\u4f4d\u7ffb\u8f6c\u3002 \\([X]_b = 2^n + X\\) \u4ece\u4e8c\u8fdb\u5236\u8865\u7801\u5230\u79fb\u7801\uff0c\u53ea\u9700\u8981\u7ffb\u8f6c\u7b26\u53f7\u4f4d\u5373\u53ef\u3002","title":"Signed Number Formats"},{"location":"CO/co3/#arithmetic","text":"Addition Substraction Overflow detection: \\(C_n \\oplus C_{n-1}\\) Constructing an ALU \u6ce8: RISC-V \u4e0d\u652f\u6301 nor \u6307\u4ee4\u3002","title":"Arithmetic"},{"location":"CO/co3/#multiplication","text":"","title":"Multiplication"},{"location":"CO/co3/#unsigned-multiplication","text":"Multiplicand (\u88ab\u4e58\u6570) \\(\\times\\) Multiplier (\u4e58\u6570) \u5982\u679c\u4e58\u6570\u672b\u4f4d\u662f 1, \u52a0\u88ab\u4e58\u6570\uff0c\u5426\u5219\u52a0 0. \u968f\u540e\u5c06\u88ab\u4e58\u6570\u5de6\u79fb 1 \u4f4d\u3002 \u9700\u8981 128+128+64 bit \u7684\u5bc4\u5b58\u5668\uff0c\u548c\u4e00\u4e2a 128 bit ALU. \u4e0d\u79fb\u88ab\u4e58\u6570\uff0c\u800c\u662f\u79fb\u79ef (product). \u8fd9\u6837 ALU \u53ea\u9700\u8981 64 \u4f4d\u3002 Example \u8fd9\u91cc\u79ef\u6700\u5f00\u59cb\u53ea\u4fdd\u5b58\u5728\u5de6\u534a\u90e8\u5206\uff0c\u53f3\u534a\u90e8\u5206\u4e3a\u7a7a\u3002\u800c\u4e58\u6570\u4e5f\u8981\u53f3\u79fb\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u628a\u4e24\u4e2a\u6570\u62fc\u5230\u4e00\u8d77\uff0c\u540c\u65f6\u53f3\u79fb\u3002","title":"Unsigned multiplication"},{"location":"CO/co3/#signed-multiplication","text":"\u6709\u7b26\u53f7\u76f8\u4e58\u4e0d\u80fd\u76f4\u63a5\u4e58\uff0c\u53ef\u4ee5\u5148\u7528\u7b26\u53f7\u4f4d\u51b3\u5b9a\u7ed3\u679c\u7b26\u53f7\uff0c\u518d\u5bf9\u7edd\u5bf9\u503c\u8fdb\u884c\u4e58\u6cd5\u3002 Booth's Algorithm \u601d\u60f3\uff1a\u5982\u679c\u6709\u4e00\u4e32 1, \u51cf\u6389\u4e58\u6570\u7684\u7b2c\u4e00\u4e2a 1, \u540e\u9762\u7684 1 \u7684\u5e8f\u5217\u8fdb\u884c\u79fb\u4f4d\uff0c\u5f53\u4e0a\u4e00\u6b65\u662f\u6700\u540e\u4e00\u4e2a 1 \u65f6\u52a0\u3002 \u6700\u5f00\u59cb\u628a\u79ef\u653e\u5728\u9ad8\u4f4d\uff0c\u88ab\u4e58\u6570\u653e\u5728\u4f4e\u4f4d\u3002\uff08\u6570\u636e\u4fdd\u5b58\u65b9\u6cd5\u540c 2.1.1\uff09\u9ed8\u8ba4 \\(bit_{-1}=0\\) Action 10 - subtract multiplicand from left 11 - nop 01 - add multiplicand to left half 00 - nop \u6bcf\u4e2a\u64cd\u4f5c\u7ed3\u675f\u540e\u90fd\u8981\u79fb\u4f4d\uff0c\u548c 2.1.1 \u4e2d\u7c7b\u4f3c \u6ce8\u610f\u79fb\u4f4d\u65f6\u4e0d\u8981\u6539\u53d8\u7b26\u53f7\u4f4d\u3002 Example \u88ab\u4e58\u6570 Multiplicand \u662f 0010, \u4e58\u6570 Multiplier \u662f 1101. \u6700\u5f00\u59cb\u5c06\u79ef 0000 \u653e\u5728\u9ad8\u56db\u4f4d, 1101 \u4f5c\u4e3a\u4e58\u6570\u653e\u5728\u4f4e\u56db\u4f4d\u3002 \u6700\u5f00\u59cb 10, \u5373\u6267\u884c\u51cf\u64cd\u4f5c, \\(0000-0010=1110\\) . \u7b54\u6848\u4f9d\u7136\u653e\u5728\u9ad8\u56db\u4f4d\uff0c\u968f\u540e\u53f3\u79fb\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u6ce8\u610f\u53f3\u79fb\u7684\u65f6\u5019\u662f \u7b97\u672f\u53f3\u79fb , \\(bit_{-1}\\) \u4e5f\u53ef\u80fd\u4f1a\u6539\u53d8\u3002","title":"Signed multiplication"},{"location":"CO/co3/#faster-multiplication","text":"32 \u4f4d\u6570\u4e58 32 \u4f4d\u6570\uff0c\u76f8\u5f53\u4e8e 32 \u4e2a 32 \u4f4d\u6570\u76f8\u52a0\u3002\uff08\u5e76\u884c\u52a0\u901f\uff09","title":"Faster Multiplication"},{"location":"CO/co3/#division","text":"Dividend (\u88ab\u9664\u6570) \\(\\div\\) Divisor (\u9664\u6570) \u5c06\u9664\u6570\u653e\u5230\u9ad8\u4f4d\u3002\u4ece\u9ad8\u4f4d\u5f00\u59cb\u51cf\uff0c\u51cf\u5b8c\u5c06\u9664\u6570\u53f3\u79fb\u3002\u5546\u4e5f\u968f\u4e4b\u4e0d\u65ad\u5de6\u79fb\u3002\u5982\u679c\u51cf\u5b8c\u4e4b\u540e\u662f\u8d1f\u6570\uff0c\u9700\u8981\u8fd8\u56de\u53bb\u3002 7\u00f72 \u9664\u6570\u4e0d\u52a8\uff0c\u88ab\u9664\u6570\u4e0d\u505c\u5730\u5f80\u5de6\u79fb\u3002\u51cf\u5230\u6700\u540e\u4e00\u6b21\uff0c\u5982\u679c\u662f\u5c0f\u4e8e 0 \u7684\uff0c\u8bf4\u660e\u4e0d\u7528\u51cf\u4e86\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u4f59\u6570\uff0c\u9700\u8981\u53f3\u79fb\u79fb\u56de\u6765\u3002\uff08\u5373\u5c06\u5de6\u534a\u90e8\u5206\u53f3\u79fb\u4e00\u4f4d\uff09 \u56e0\u4e3a\u6bcf\u6b21\u90fd\u662f\u5c06\u9664\u6570\u548c\u88ab\u9664\u6570\u6700\u9ad8\u4f4d\u51cf\uff0c\u51cf\u4e86\u4e4b\u540e\u9ad8\u4f4d\u5c31\u6ca1\u7528\u4e86\uff0c\u53ef\u4ee5\u79fb\u51fa\u53bb\u3002 \u5b9e\u9645\u4e0a\u8fd9\u91cc\u7ed3\u679c\u662f 129 \u4f4d\uff0c\u9632\u6b62 carry \u4e22\u5931 ??? Example <div align=center> <img src=\"http://cdn.hobbitqia.cc/202303102303764.png\" width = 60%/> </div> \u8fd9\u91cc\u6700\u5f00\u59cb\u4f59\u6570\u5c31\u662f\u6574\u4e2a\u88ab\u9664\u6570\u3002 \u7c7b\u4f3c\u4e58\u6cd5\uff0c\u8fd9\u91cc\u7684\u9664\u6570\u53ea\u548c\u88ab\u9664\u6570\u7684\u9ad8\u4f4d\u76f8\u51cf\u3002\u5982\u679c\u51cf\u51fa\u6765\u662f\u8d1f\u6570\uff0c\u9700\u8981\u52a0\u56de\u53bb\u3002\u6bcf\u6b21\u51cf\u5b8c\u4e4b\u540e\u5148\u5de6\u79fb\uff0c\u7136\u540e\u6700\u53f3\u8fb9\u7684\u4e00\u4f4d\u653e\u5546\u3002 4.1 \u65f6\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u7ed3\u675f\u4e86\u9664\u6cd5\u64cd\u4f5c\uff0c\u6b64\u65f6\u7684\u9ad8\u4f4d\u5c31\u662f\u6211\u4eec\u7684\u4f59\u6570\uff0c\u4f46\u662f\u8fd9\u6700\u540e\u4e00\u6b21\u7684\u7ed3\u679c\u8fd8\u6ca1\u6709\u653e\u56de\u5230 Reminder \u4e2d\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u518d\u5f80\u5de6\u79fb\u4e00\u4f4d\u4e3a\u5546\u7559\u51fa\u7a7a\u95f4\uff0c\u653e\u5165\u540e\uff0c\u518d\u628a\u9ad8\u4f4d\u4f59\u6570\u5f80\u53f3\u79fb\u52a8\u4ee5\u62b5\u6d88\u5f71\u54cd\u3002\uff08\u4e2a\u4eba\u8ba4\u4e3a\u53ef\u4ee5\u76f4\u63a5\u5bf9\u4f4e\u4f4d\u5de6\u79fb\u4e00\u4f4d\u5373\u53ef\uff09 \u5e26\u7b26\u53f7\u7684\u9664\u6cd5\uff1a\u8981\u6c42\u4f59\u6570\u548c\u88ab\u9664\u6570\u7b26\u53f7\u76f8\u540c\u3002 \u9664\u96f6\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff0c\u7531\u8f6f\u4ef6\u68c0\u6d4b\u3002","title":"Division"},{"location":"CO/co3/#floating-point-number","text":"\u53ef\u89c1 ICS Notes S exp frac Float 1 8 23 Double 1 11 52 Normalized form: \\(N=(-1)^S\\times M\\times 2^E\\) S: sign. \\(S=1\\) indicates the number is negative. M: \u5c3e\u6570. Normally, \\(M=1.frac=1+frac\\) . E: \u9636\u7801. Normally, \\(E=exp-Bias\\) where \\(Bias=127\\) for floating point numbers. \\(Bias = 1023\\) for double. \u4e3a\u4ec0\u4e48\u8981\u628a exponent \u653e\u5728\u524d\u9762\uff1f \u56e0\u4e3a\u6570\u7684\u5927\u5c0f\u4e3b\u8981\u7531 exponent \u51b3\u5b9a\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981 Bias -> \u79fb\u7801 \u4e0d\u8981\u5fd8\u4e86\u524d\u5bfc 1","title":"Floating point number"},{"location":"CO/co3/#precision","text":"signle: approx \\(2^{-23}\\) \\(23\\times \\log_{10}{2} \\approx 23\\times 0.3 \\approx 7\\) demical digits of precision. double: approx \\(2^{-52}\\) \\(52\\times \\log_{10}{2}\\approx 52\\times 0.3 \\approx 16\\) demical digits of preicsion.","title":"Precision"},{"location":"CO/co3/#limitations","text":"Overflow: The number is too big to be represented Underflow: The number is too small to be represented","title":"Limitations"},{"location":"CO/co3/#denormal-numbers","text":"\\(Exponent=000\\ldots 0\\) \u975e\u89c4\u683c\u5316\u6570\uff0c\u8ba9\u6570\u5728\u8f83\u5c0f\u65f6\u80fd\u9010\u6e10\u4e0b\u6ea2\u51fa\u3002 \\(x=(-1)^s\\times((0+Fraction)\\times 2^{1-Bias})\\) \u6ce8\u610f\u6b64\u65f6\u6307\u6570\u662f \\(1-Bias=-126/-1022\\) . Denormal with \\(Fraction = 000...0\\) we define \\(x=0\\) \\(Exponent=111\\ldots 1, Fraction=000\\ldots 0\\) \u8868\u793a \\(\\pm \\inf\\) \\(Exponent=111\\ldots 1, Fraction\\neq 000\\ldots 0\\) \u8868\u793a NaN (Not-a-Number)","title":"Denormal Numbers"},{"location":"CO/co3/#floating-point-addition","text":"Alignment \u7edf\u4e00\u6307\u6570\uff0c\u4e00\u822c\u5c0f\u7684\u5f80\u5927\u7684\u53d8\u3002\u56e0\u4e3a\u7cfb\u7edf\u7cbe\u5ea6\u4f4d\u6570\u6709\u9650\uff0c\u5982\u679c\u5c06\u5927\u7684\u5f80\u5c0f\u7684\u53d8\uff0c\u90a3\u53ef\u80fd\u4f1a\u56e0\u6b64\u635f\u5931\u8f83\u5927\u3002 Example The proper digits have to be added Addition of significands Normalization of the result Rounding Example FP Adder Hardware step 1 \u5728\u9009\u62e9\u6307\u6570\u5927\u7684\uff0c\u5e76\u8fdb\u884c\u5bf9\u9f50\u3002\u540c\u65f6\u5c3e\u6570\u53ef\u80fd\u8fd8\u8981\u52a0\u4e0a\u524d\u5bfc 1. step 3 \u662f\u5bf9\u7ed3\u679c\u8fdb\u884c\u6807\u51c6\u5316\u3002 \u84dd\u8272\u7ebf\u4e3a\u63a7\u5236\u901a\u8def\uff0c\u9ed1\u8272\u7ebf\u4e3a\u6570\u636e\u901a\u8def\u3002","title":"Floating-Point Addition"},{"location":"CO/co3/#floating-point-multiplication","text":"\\((s1\\cdot 2^{e1}) \\cdot (s2\\cdot 2^{s2}) = (s1\\cdot s2)\\cdot 2^{e1+e2}\\) Add exponents Multiply the significands Normalize Over/Underflow? \u6709\u7684\u8bdd\u8981\u629b\u51fa\u5f02\u5e38\uff0c\u901a\u8fc7\u7ed3\u679c\u7684\u6307\u6570\u5224\u65ad\u3002 Rounding Sign \u6ce8\u610f Exponet \u4e2d\u662f\u6709 Bias \u7684\uff0c\u4e24\u4e2a\u6570\u7684 exp \u90e8\u5206\u76f8\u52a0\u540e\u8fd8\u8981\u518d\u51cf\u53bb Bias. Example Data Flow \u53f3\u8fb9\u5f80\u56de\u7684\u7bad\u5934: Rounding \u540e\u53ef\u80fd\u4f1a\u8fdb\u4f4d\u3002 Incr \u7528\u4e8e\u6807\u51c6\u5316\u7ed3\u679c\uff0c\u4e0e\u53f3\u4fa7 Shift Right \u914d\u5408\u3002","title":"Floating-Point Multiplication"},{"location":"CO/co3/#accurate-arithmetic","text":"Extra bits of precision (guard, round, sticky) guard, round \u4e3a\u4e86\u4fdd\u8bc1\u56db\u820d\u4e94\u5165\u7684\u7cbe\u5ea6\u3002 \u7ed3\u679c\u6ca1\u6709\uff0c\u53ea\u5728\u8fd0\u7b97\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u7559\u3002 Example sticky \u672b\u5c3e\u5982\u679c\u4e0d\u4e3a\u5168 0, \u5219 sticky \u4f4d\u4e3a 1, \u5426\u5219\u4e3a 0. \u635f\u5931\u4e0d\u4f1a\u8d85\u8fc7 0.5 \u4e2a ulp.","title":"Accurate Arithmetic"},{"location":"CO/co4/","text":"The Processor \u00b6 Introduction \u00b6 Instruction Execution Overview \u00b6 CPU performance factors Instruction count Determined by ISA and compiler \u5982\u540c\u6837\u7684\u529f\u80fd\u7528 Intel \u548c RISC-V \u7684\u5904\u7406\u5668\u5b9e\u73b0\uff0c\u82f1\u7279\u5c14\u7684\u6307\u4ee4\u7528\u7684\u66f4\u5c11\uff08\u56e0\u4e3a\u66f4\u590d\u6742\uff09 CPI and Cycle time Determined by CPU hardware For every instruction, the first two steps are identical Fetch the instruction from the memory Decode and read the registers Next steps depend on the instruction class Memory-reference load, store Arithmetic-logical branches CPU Overview \u00b6 Use ALU to calculate Arithmetic result Memory address for load/store Branch comparison \u56e0\u4e3a\u6211\u4eec\u662f\u5355\u5468\u671f\uff0c\u56e0\u6b64 ALU \u53ea\u80fd\u505a\u6bd4\u8f83\uff0c\u5177\u4f53\u8df3\u8f6c\u7684\u5730\u5740\u7531\u5355\u72ec\u7684 Adder \u8ba1\u7b97\u3002 Access data memory for load/store PC \\(\\leftarrow\\) target address or PC + 4 Question \u4e3a\u4ec0\u4e48\u6307\u4ee4\u8981\u548c\u5185\u5b58\u5206\u5f00\uff1f \u56e0\u4e3a\u6211\u4eec\u662f\u5355\u5468\u671f\uff0c\u6211\u4eec\u65e0\u6cd5\u5728\u540c\u4e00\u4e2a\u5468\u671f\u5185\u65e2\u8bfb\u6307\u4ee4\u53c8\u8bfb\u6570\u636e\u3002 Can\u2019t just join wires together -- Use multiplexers . Control \u00b6 different sources for unit read/write memory Logical Design Convention \u00b6 Information encoded in binary Low voltage = 0, High voltage = 1 One wire per bit Multi-bit data encoded on multi-wire buses Combinational element Operate on data Output is a function of input State (sequential) elements Store information \u903b\u8f91\u7535\u8def\u5185\u5bb9\u7b80\u8981\u590d\u4e60 Building a datapath \u00b6 Elements that process data and addresses in the CPU. \u540c\u7c7b\u6307\u4ee4\u7684 opcode \u662f\u4e00\u6837\u7684\uff08I \u578b\u6307\u4ee4\u7684\u91cc\u903b\u8f91\u8fd0\u7b97\u3001load \u6307\u4ee4\u3001jal \u4e0d\u540c\uff09\uff0c\u5177\u4f53\u529f\u80fd\u7531 Func \u51b3\u5b9a\u3002\uff08\u56e0\u6b64\u4e0d\u628a\u6240\u6709\u64cd\u4f5c\u7f16\u5230 opcode \u5185\uff09 Instruction execution in RISC-V \u00b6 Fetch : Take instructions from the instruction memory Modify PC to point the next instruction Instruction decoding & Read Operand : Will be translated into machine control command Reading Register Operands, whether or not to use Executive Control : Control the implementation of the corresponding ALU operation Memory access : Write or Read data from memory Only ld/sd Write results to register : If it is R-type instructions, ALU results are written to rd If it is I-type instructions, memory data are written to rd Modify PC for branch instructions Instruction fetching \u00b6 R-format Instructions Read 2 register operands Perform arithmetic/logical operation Write register result Load/Store Instructions Read register operands Calculate address using 12-bit offset Use ALU, but sign-extend offset Load: Read memory and update register Store: Write register value to memory Branch Instructions Read 2 register operands Compare operands use ALU, substract and check Zero output Calculate target address Sign-extend displacement Shift left 1 place (halfword displacement) Add to PC value First-cut data path does an instruction in one clock cycle Each datapath element can only do one function at a time Hence, we need separate instruction and data memories Path Built using Multiplexer \u00b6 R-type instruction Datapath I-type instruction Datapath For ALU For load S-type (store) instruction Datapath SB-type (branch) instruction Datapath UJ-type instruction Datapath Full datapath A simple Implementation Scheme \u00b6 Analyse for cause and effect Information comes from the 32 bits of the instruction Selecting the operations to perform (ALU, read/write, etc.) Controlling the flow of data (multiplexor inputs) ALU's operation based on instruction type and function code 7 \u4e2a\u63a7\u5236\u4fe1\u53f7\u548c\u4e00\u4e2a 4 \u4f4d\u7684 ALU_operation . MemToReg \u6709\u4e09\u4e2a\u6e90\uff0c\u5206\u522b\u662f load \u6307\u4ee4\uff0cPC \u6765\u7684( jal, jalr \u5b58 PC+4), ALU \u51fa\u6765\u7684\uff08R \u578b\uff0cI \u578b\uff09 ALU symbol & Control \u00b6 ALU used for Load/Store: F = add Branch: F = subtract R-type: F depends on opcode \u56e0\u6b64\u6211\u4eec\u8fdb\u884c\u4e24\u7ea7\u89e3\u7801 2-level decode. First level \u00b6 \u4e00\u7ea7\u89e3\u7801\u540e\uff0c\u53ef\u4ee5\u51b3\u5b9a\u9664\u4e86 ALU_opration \u4ee5\u5916\u7684\u63a7\u5236\u4fe1\u53f7 \u540c\u65f6\u6211\u4eec\u4f1a\u89e3\u7801\u51fa 2 \u4f4d\u7684 ALU_op . second level \u00b6 ALU operation is decided by 2-bit ALUOp derived from opcode, and funct7 & funct3 fields of the instruction. Datapath with Control \u00b6 \u84dd\u7ebf\u4e3a\u63a7\u5236\u901a\u8def\uff0c\u4f1a\u51b3\u5b9a\u6570\u636e\u7684\u6d41\u5411\u3002 An overview of pipelining \u00b6 Performance \u00b6 \u5bf9\u4e8e\u5355\u5468\u671f CPU, CPI \u662f 1, \u4f46\u65f6\u949f\u5468\u671f\u4f1a\u5f88\u957f\u3002 \u5047\u8bbe\u53d6\u6307\u4ee4 200ps, \u5bc4\u5b58\u5668\u8bfb 100ps, ALU \u8ba1\u7b97 200ps, \u5185\u5b58\u8bbf\u95ee 200ps, \u5bc4\u5b58\u5668\u5199 100ps. \u90a3\u4e48 add \u9700\u8981 600ps, ld \u9700\u8981 800ps, sd \u9700\u8981 700ps, beq \u9700\u8981 500ps. Longest delay determines clock period. ( ld ) We will improve performance by pipelining. Pipelining \u00b6 \u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u6761\u6307\u4ee4\u90fd\u5212\u5206\u4e3a\u8fd9\u4e48\u51e0\u6b65\uff1a IF : Instruction fetch from memory ID : Instruction decode & register read EX : Execute operation or calculate address MEM : Access memory operand WB : Write result back to register \\(CPI \\approx 1\\) One instruction will be issued (or finished) each cycle. During any cycle, one instruction is present in each stage. Pipeline Performance \u00b6 \u4e0d\u540c\u64cd\u4f5c\u7684\u65f6\u95f4\u4e5f\u4e0d\u540c\uff0c\u6d41\u6c34\u7ebf CPU \u7684\u65f6\u949f\u5468\u671f\u4e3a\u6700\u957f\u7684\u64cd\u4f5c\u65f6\u95f4\u3002 \u6d41\u6c34\u7ebf\u53ef\u4ee5\u63d0\u9ad8\u541e\u5410\u91cf(throughput) \u4f46\u5e76\u6ca1\u6709\u6539\u53d8\u6bcf\u6761\u6307\u4ee4\u7684\u6267\u884c\u65f6\u95f4(Latency)\u3002 RISC-V ISA designed for pipelining \u00b6 RISC-V \u9002\u5408\u6d41\u6c34\u7ebf\u8bbe\u8ba1\u3002 All instructions are 32-bits Easier to fetch and decode in one cycle Few and regular instruction formats Can decode and read registers in one step Load/store addressing Can calculate address in 3 rd stage, access memory in 4 th stage Hazards \u00b6 \u5192\u9669/\u7ade\u4e89 \u5f53\u524d\u8fd9\u6761\u6307\u4ee4\u4e0d\u80fd\u8fdb\u5165\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u8981\u7b49\u5f85\u3002 Structure hazards A required resource is busy. Data hazard Need to wait for previous instruction to complete its data read/write. Control hazard Deciding on control action depends on previous instruction. Structure Hazards \u00b6 \u5982\u679c\u53ea\u6709\u4e00\u5757\u5185\u5b58\uff0c\u4f46 IF \u548c MEM \u9636\u6bb5\u90fd\u9700\u8981\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\uff0c\u90a3\u4e48 IF \u5c31\u4f1a\u88ab stall \u6682\u505c\uff0c\u9020\u6210\u4e00\u4e2a bubble. (\u5373\u6d41\u6c34\u7ebf\u5185\u6709\u4e00\u4e2a\u65f6\u523b\u662f\u6e05\u7a7a\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u6211\u4eec\u6ca1\u6709\u53bb\u53d6\u6307\u4ee4) Pipelined datapaths require separate instruction/data memories. (Or separate instruction/data caches) Data Hazards \u00b6 An instruction depends on completion of data access by a previous instruction. Example \u6ce8\u610f\u8fd9\u91cc WB \u662f\u5728\u524d\u534a\u4e2a\u5468\u671f\u5c06\u6570\u636e\u5199\u5165\u5bc4\u5b58\u5668, ID \u662f\u5728\u540e\u534a\u4e2a\u5468\u671f\u5c06\u6570\u636e\u4ece\u5bc4\u5b58\u5668\u4e2d\u53d6\u51fa\u3002 \u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u8981\u7528\u7684\u7ed3\u679c\u5728 EX \u65f6\u5df2\u7ecf\u4ea7\u751f\u4e86\u3002 Forwarding(Bypassing) Use result when it is computed Don\u2019t wait for it to be stored in a register Requires extra connections in the datapath Example Load-Use Data Hazard Example \u6d41\u6c34\u7ebf\u7684 CPI \u4e0d\u53ef\u80fd\u7b49\u4e8e 1, \u56e0\u4e3a\u4e0a\u56fe\u8fd9\u79cd\u60c5\u51b5\u4e00\u5b9a\u4f1a\u53d1\u751f( ld \u65e0\u6cd5\u907f\u514d)\u3002 \u53ef\u4ee5\u628a\u540e\u7eed\u4e0e\u8fd9\u4e9b\u5bc4\u5b58\u5668\u65e0\u5173\u7684\u6307\u4ee4\u5148\u62ff\u5230\u8fd9\u91cc\u6267\u884c\u3002\uff08\u4e71\u5e8f\u6267\u884c\uff09 Example \u4fee\u6539\u540e, ld x2, 8(x0) \u5df2\u7ecf\u4ece\u5185\u5b58\u4e2d\u8bfb\u51fa\u6570\u636e\u8fd8\u6ca1\u6709\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u53ef\u4ee5\u76f4\u63a5\u9001\u5230 add x3, x1, x2 \u4e2d\u53bb\u3002 Control Hazards \u00b6 Branch determines flow of control Fetching next instruction depends on branch outcome Pipeline can\u2019t always fetch correct instruction \u53ef\u4ee5\u9884\u6d4b\uff0c\u6216\u8005\u5c06\u6bd4\u8f83\u653e\u5728 ID \u7ea7\u3002 Example Branch Prediction \u66f4\u957f\u7684\u6d41\u6c34\u7ebf\u4e0d\u80fd\u5f88\u65e9\u5730\u51b3\u5b9a\u5206\u652f\u7ed3\u679c\u3002 \u53ef\u4ee5\u9884\u6d4b branch \u547d\u4e2d\u6216\u8005\u4e0d\u547d\u4e2d\u3002 Static branch prediction \u5047\u8bbe\u603b\u662f\u547d\u4e2d/\u4e0d\u547d\u4e2d Dynamic branch prediction \u8bb0\u5f55\u4e0a\u6b21\u8dd1\u5230\u8fd9\u91cc\u662f\u5426\u547d\u4e2d\uff0c\u7136\u540e\u4e0b\u6b21\u6309\u7167\u4e4b\u524d\u7684\u7ed3\u679c\u9884\u6d4b\u3002 Summary Pipelining improves performance by increasing instruction throughput Executes multiple instructions in parallel Each instruction has the same latency Subject to hazards(Structure, data, control) Instruction set design affects complexity of pipeline implementation RISC-V Pipelined Datapath \u00b6 \u4e0d\u540c\u9636\u6bb5\u4e4b\u95f4\uff0c\u6211\u4eec\u9700\u8981\u5bc4\u5b58\u5668\u6765\u4fdd\u5b58\u4e4b\u524d\u9636\u6bb5\u5f97\u5230\u7684\u503c\u3002 \u7ade\u4e89\u53ea\u4f1a\u53d1\u751f\u5728\u4ece\u53f3\u5f80\u5de6\u7684\u9636\u6bb5\u3002 \u6ce8\u610f\u5230\uff0c\u7b2c\u4e94\u4e2a\u9636\u6bb5\u5199\u56de\u65f6\uff0c\u5199\u5bc4\u5b58\u5668\u53f7\u5e94\u8be5\u662f\u4ece MEM/WB \u4e2d\u7684\uff0c\u800c\u4e0d\u662f IF \u51fa\u7684\u5bc4\u5b58\u5668\u53f7\u3002 Single-clock-cycle pipeline diagram : Shows pipeline usage in a single cycle; Highlight resources used multi-clock-cycle diagram : Graph of operation over time Pipelined Control \u00b6 \u63a7\u5236\u4fe1\u53f7 ID \u9636\u6bb5\u5168\u90e8\u8bd1\u51fa\uff0c\u968f\u540e\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u5230\u540e\u7eed\u9636\u6bb5\u4e2d\u53bb\u3002 \u6709\u4e9b\u4fe1\u53f7\u5728 WB \u9636\u6bb5\u7528\uff0c\u6709\u4e9b\u5728 M \u9636\u6bb5\u7528\uff0c\u6709\u4e9b\u5728 EX. \u4f7f\u7528\u4e4b\u540e\u5c31\u4e0d\u518d\u9700\u8981\u628a\u4fe1\u53f7\u4f20\u9012\u4e0b\u53bb\u3002 Data Hazards \u00b6 Forwarding \u00b6 Example and \u8bed\u53e5\u4e2d\u5c06 EX \u7684\u7ed3\u679c\u524d\u9012, or \u8bed\u53e5\u4e2d\u8981\u5c06 DM \u7684\u7ed3\u679c\u524d\u9012\uff08\u6b64\u65f6 EX \u7684\u503c\u5df2\u7ecf\u4e0d\u662f\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\u4e86\uff09 \u5982\u4f55\u5224\u65ad\u662f\u5426\u9700\u8981\u524d\u9012\uff1f Rd \u8981\u4e00\u76f4\u4f20\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u6b64\u5224\u65ad\u8981\u8bfb\u51fa\u7684\u5bc4\u5b58\u5668\u662f\u5426\u662f\u4e4b\u524d\u6307\u4ee4\u8981\u5199\u56de\u7684\u5bc4\u5b58\u5668\u3002 Data hazards when EX/MEM.RegisterRd = ID/EX.RegisterRs1 \u5728\u7b2c\u56db\u4e2a\u65f6\u949f\u5468\u671f\u65f6\u628a EX/MEM \u7684\u5bc4\u5b58\u5668\u503c\u9001\u5230 ALU. EX/MEM.RegisterRd = ID/EX.RegisterRs2 MEM/WB.RegisterRd = ID/EX.RegisterRs1 MEM/WB.RegisterRd = ID/EX.RegisterRs2 \u53ea\u6709\u5728\u6211\u4eec\u8981\u6539\u53d8\u5bc4\u5b58\u5668\u7684\u503c\u7684\u65f6\u5019\u624d\u80fd\u7528\u524d\u9012\u7684\u503c\uff08\u6709\u4e9b\u6307\u4ee4\u53ef\u80fd\u6839\u672c\u5c31\u4e0d\u4f1a\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u6ca1\u6709\u6709\u6548\u7684 Rd\uff09 EX/MEM.RegWrite, MEM/WB.RegWrite \u4e0d\u4e3a 0. \u6b64\u5916 EX/MEM.RegisterRd, MEM/WB.RegisterRd \u4e5f\u4e0d\u80fd\u4e3a 0. Mux control Source Explanation ForwardA = 00 ID/EX The first ALU operand comes from the register file. ForwardA = 10 EX/MEM The first ALU operand is forwarded from the prior ALU result. ForwardA = 01 MEM/WB The first ALU operand is forwarded from data memory or an earlier ALU result. Double Data Hazard \u6211\u4eec\u524d\u9012\u65f6\u8981\u52a0\u4e00\u4e2a\u6761\u4ef6\uff0c \u53ea\u6709\u5728 EX/MEM \u7684\u6761\u4ef6\u4e0d\u6210\u7acb\u65f6 \uff0c\u624d\u80fd\u67e5\u770b MEM/WB \u7684\u6761\u4ef6\u3002 Load-Use Hazard Detection \u00b6 \u5982\u679c\u6211\u4eec\u5728 ld \u6307\u4ee4 EX/MEM \u65f6\u6682\u505c\uff0c\u6b64\u65f6 ld \u540e\u9762\u6709\u4e24\u6761\u6307\u4ee4\u9700\u8981\u6682\u505c\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u66f4\u65e9\u7684\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u3002 Load-use hazard when ID/EX.MemRead and ((ID/EX.RegisterRd = IF/ID.RegisterRs1) or (ID/EX.RegisterRd = IF/ID.RegisterRs2)) If detected, stall and insert bubble Stall \u00b6 \u5728 ld \u540e\u9762 stall\uff0c\u4f7f\u5f97\u8fd9\u7ea7\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a 0, \u540c\u65f6\u963b\u6b62 PC, IF/ID \u5bc4\u5b58\u5668\u7684\u66f4\u65b0\u3002 \u76f8\u5f53\u4e8e\u53c8\u8fdb\u884c\u4e86\u4e00\u6b21 decode. Example Stalls reduce performance But are required to get correct results Compiler can arrange code to avoid hazards and stalls Branch Hazards \u00b6 \u662f\u5426\u8df3\u8f6c\u5728 MEM \u9636\u6bb5\u51b3\u5b9a\u3002 \u6700\u6734\u7d20\u7684\u65b9\u6cd5\u662f\u65e0\u89c6\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u524d\u4e09\u4e2a\u9636\u6bb5\u5e76\u4e0d\u6d89\u53ca\u5bf9\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u4fee\u6539\uff0c\u5373\u4f7f\u6211\u4eec\u9884\u6d4b\u540e\u7eed\u4e0d\u6267\u884c\u8fd9\u4e9b\u6307\u4ee4\u4e5f\u4e0d\u4f1a\u5e26\u6765\u5f71\u54cd\u3002\u4f46\u8fd9\u6837\u53ef\u80fd\u5e26\u6765 CPI \u7684\u663e\u8457\u964d\u4f4e\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u5728 ID \u7ea7\u51b3\u5b9a\u662f\u5426\u8df3\u8f6c\uff08\u6b64\u65f6\u5df2\u7ecf\u6709\u4e86\u4e24\u4e2a\u6e90\u64cd\u4f5c\u6570\u548c\u7acb\u5373\u6570\uff09 Example \u8fd9\u6837\u6211\u4eec\u53ea\u53ef\u80fd\u591a\u4f59\u4e00\u6761\u6307\u4ee4\uff0c\u63d2\u5165 bubble \u5373\u53ef\u3002\u4f46\u662f\u8fd9\u6837\u4e5f\u4e0d\u53ef\u63a5\u53d7\u3002 Dynamic Branch Prediction \u00b6 In deeper and superscalar(\u591a\u53d1\u5c04) pipelines, branch penalty is more significant. Use dynamic prediction . Branch prediction buffer (aka branch history table) \u8bb0\u5f55\u524d\u51e0\u6b21\u662f\u5426\u547d\u4e2d Indexed by recent branch instruction addresses Stores outcome (taken/not taken) To execute a branch Check table, expect the same outcome Start fetching from fall-through or target If wrong, flush pipeline and flip prediction \u53ef\u4ee5\u5904\u7406 for \u5faa\u73af\u7684\u9884\u6d4b\u3002 1-Bit Predictor \u4f46\u4e5f\u5b58\u5728\u95ee\u9898\uff0c\u5bf9\u4e8e\u53cc\u5c42\u5faa\u73af\uff0c\u5f53\u5185\u5c42\u5faa\u73af\u8981\u7ed3\u675f\u65f6\u4f1a\u9519\u4e24\u6b21\u3002 Mispredict as taken on last iteration of inner loop Then mispredict as not taken on first iteration of inner loop next time around \u53ef\u4ee5\u4fee\u6539\u9884\u6d4b\u65b9\u5f0f\uff1a\u53ea\u6709\u8fde\u7eed\u9519\u8bef\u4e24\u6b21\u624d\u4f1a\u4fee\u6539\u6211\u4eec\u7684\u9884\u6d4b\u3002\u5373 2-Bit Predictor. Calculating the Branch Target \u00b6 \u5373\u4f7f branch \u547d\u4e2d\u4e86\uff0c\u6211\u4eec\u4e5f\u6709\u4e00\u4e2a\u65f6\u949f\u7684 bubble \u6765\u8ba1\u7b97\u5730\u5740\u3002 \u4f46 branch \u8981\u8df3\u8f6c\u7684\u5730\u5740\u5176\u5b9e\u662f\u53ef\u4ee5\u5b58\u4e0b\u6765\u7684\u3002 Branch target buffer Cache of target addresses Indexed by PC when instruction fetched If hit and instruction is branch predicted taken, can fetch target immediately Exceptions and Interrupts \u00b6 \u201cUnexpected\u201d events requiring change in flow of control. Exception \u5f02\u5e38 Arises within the CPU e.g. undefined opcode, syscall, \u2026 Interrupt \u4e2d\u65ad From an external I/O controller Handling Exceptions \u00b6 Save PC of offending (or interrupted) instruction In RISC-V: Supervisor Exception Program Counter(SEPC) Save indication of the problem In RISC-V: Supervisor Exception Cause Register(SCAUSE) 64 bits, but most bits unused e.g. Exception code field: 2 for undefined opcode, 12 for hardware malfunction... Jump to handler \u5fc5\u987b\u7531\u786c\u4ef6\u8df3\u5230\u8fd9\u4e2a\u5730\u5740\u3002 Direct \u6240\u6709\u5f02\u5e38\u8df3\u5230\u56fa\u5b9a\u5730\u5740\u3002 Vectored Interrupts \u4e2d\u65ad\u5411\u91cf Handler address determined by the cause. Exception vector address to be added to a vector table base register \u5f53\u591a\u4e2a\u5f02\u5e38/\u4e2d\u65ad\u540c\u65f6\u6765\u65f6\uff0c\u5982\u4f55\u5904\u7406\uff1f Handler Actions \u00b6 \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f Read cause, and transfer to relevant handler Determine action required If restartable Take corrective action use SEPC to return to program Otherwise Terminate program Report error using SEPC, SCAUSE, ... Exceptions in a Pipeline \u00b6 Another form of control hazard. Consider malfunction on add in EX stage. add x1, x2, x1 Prevent x1 from being clobbered Complete previous instructions Flush add and subsequent instructions Set SEPC and SCAUSE register values Transfer control to handler Instruction-Level Parallelism (ILP) \u00b6 Pipelining: executing multiple instructions in parallel \u6307\u4ee4\u7ea7\u5e76\u884c To increase ILP Deeper pipeline \u8ba9\u6bcf\u4e00\u7ea7\u6d41\u6c34\u7ebf\u505a\u66f4\u5c11\u7684\u4e8b\u60c5\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u63d0\u9ad8\u5de5\u4f5c\u9891\u7387\u3002 \u4f46\u6d41\u6c34\u7ebf\u4e0d\u80fd\u65e0\u9650\u7ec6\u5206\uff0c\u56e0\u4e3a\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e5f\u4f1a\u5e26\u6765\u5f00\u9500\u3002 Multiple issue \u591a\u53d1\u5c04 \u8fd9\u6837\u53ef\u4ee5\u505a\u5230 CPI < 1. \u4f7f\u7528 Instructions Per Cycle (IPC) Multiple issue \u00b6 Static multiple issue \u7f16\u8bd1\u5668\u628a\u80fd\u591f\u540c\u65f6\u653e\u5230\u6d41\u6c34\u7ebf\u7684\u6307\u4ee4\u6392\u597d \u7f16\u8bd1\u5668\u8981\u80fd\u68c0\u6d4b\uff0c\u907f\u514d\u7ade\u4e89 Dynamic multiple issue CPU \u81ea\u5df1\u51b3\u5b9a\u6267\u884c\u90a3\u4e9b\u6307\u4ee4\uff0c\u7f16\u8bd1\u5668\u4f1a\u5e2e\u5fd9\u91cd\u6392\u6307\u4ee4\uff0c\u4f46\u8fd8\u662f\u7531 CPU \u89e3\u51b3\u7ade\u4e89\u3002 Static multiple issue \u00b6 RISC-V with Static Dual Issue ALU/branch \u6307\u4ee4\u4e0d\u7528\u8bbf\u95ee\u5185\u5b58\u3002 \u6240\u4ee5\u8fd9\u4e24\u6761\u4e0d\u80fd\u540c\u65f6\u53d1\u51fa\uff0c\u56e0\u4e3a\u5b58\u5728\u7ade\u4e89\u5173\u7cfb\u3002 Loop Unrolling \u5faa\u73af\u5c55\u5f00\uff08\u4f46\u6ce8\u610f\u6307\u4ee4\u95f4\u8981\u5c3d\u91cf\u51cf\u5c11\u76f8\u540c\u5bc4\u5b58\u5668\u7684\u4f9d\u8d56\uff09 Use different registers per replication Called \u201cregister renaming\u201d Avoid loop-carried \u201canti-dependencies\u201d Loop Unrolling Example","title":"\u5904\u7406\u5668"},{"location":"CO/co4/#the-processor","text":"","title":"The Processor"},{"location":"CO/co4/#introduction","text":"","title":"Introduction"},{"location":"CO/co4/#instruction-execution-overview","text":"CPU performance factors Instruction count Determined by ISA and compiler \u5982\u540c\u6837\u7684\u529f\u80fd\u7528 Intel \u548c RISC-V \u7684\u5904\u7406\u5668\u5b9e\u73b0\uff0c\u82f1\u7279\u5c14\u7684\u6307\u4ee4\u7528\u7684\u66f4\u5c11\uff08\u56e0\u4e3a\u66f4\u590d\u6742\uff09 CPI and Cycle time Determined by CPU hardware For every instruction, the first two steps are identical Fetch the instruction from the memory Decode and read the registers Next steps depend on the instruction class Memory-reference load, store Arithmetic-logical branches","title":"Instruction Execution Overview"},{"location":"CO/co4/#cpu-overview","text":"Use ALU to calculate Arithmetic result Memory address for load/store Branch comparison \u56e0\u4e3a\u6211\u4eec\u662f\u5355\u5468\u671f\uff0c\u56e0\u6b64 ALU \u53ea\u80fd\u505a\u6bd4\u8f83\uff0c\u5177\u4f53\u8df3\u8f6c\u7684\u5730\u5740\u7531\u5355\u72ec\u7684 Adder \u8ba1\u7b97\u3002 Access data memory for load/store PC \\(\\leftarrow\\) target address or PC + 4 Question \u4e3a\u4ec0\u4e48\u6307\u4ee4\u8981\u548c\u5185\u5b58\u5206\u5f00\uff1f \u56e0\u4e3a\u6211\u4eec\u662f\u5355\u5468\u671f\uff0c\u6211\u4eec\u65e0\u6cd5\u5728\u540c\u4e00\u4e2a\u5468\u671f\u5185\u65e2\u8bfb\u6307\u4ee4\u53c8\u8bfb\u6570\u636e\u3002 Can\u2019t just join wires together -- Use multiplexers .","title":"CPU Overview"},{"location":"CO/co4/#control","text":"different sources for unit read/write memory","title":"Control"},{"location":"CO/co4/#logical-design-convention","text":"Information encoded in binary Low voltage = 0, High voltage = 1 One wire per bit Multi-bit data encoded on multi-wire buses Combinational element Operate on data Output is a function of input State (sequential) elements Store information \u903b\u8f91\u7535\u8def\u5185\u5bb9\u7b80\u8981\u590d\u4e60","title":"Logical Design Convention"},{"location":"CO/co4/#building-a-datapath","text":"Elements that process data and addresses in the CPU. \u540c\u7c7b\u6307\u4ee4\u7684 opcode \u662f\u4e00\u6837\u7684\uff08I \u578b\u6307\u4ee4\u7684\u91cc\u903b\u8f91\u8fd0\u7b97\u3001load \u6307\u4ee4\u3001jal \u4e0d\u540c\uff09\uff0c\u5177\u4f53\u529f\u80fd\u7531 Func \u51b3\u5b9a\u3002\uff08\u56e0\u6b64\u4e0d\u628a\u6240\u6709\u64cd\u4f5c\u7f16\u5230 opcode \u5185\uff09","title":"Building a datapath"},{"location":"CO/co4/#instruction-execution-in-risc-v","text":"Fetch : Take instructions from the instruction memory Modify PC to point the next instruction Instruction decoding & Read Operand : Will be translated into machine control command Reading Register Operands, whether or not to use Executive Control : Control the implementation of the corresponding ALU operation Memory access : Write or Read data from memory Only ld/sd Write results to register : If it is R-type instructions, ALU results are written to rd If it is I-type instructions, memory data are written to rd Modify PC for branch instructions","title":"Instruction execution in RISC-V"},{"location":"CO/co4/#instruction-fetching","text":"R-format Instructions Read 2 register operands Perform arithmetic/logical operation Write register result Load/Store Instructions Read register operands Calculate address using 12-bit offset Use ALU, but sign-extend offset Load: Read memory and update register Store: Write register value to memory Branch Instructions Read 2 register operands Compare operands use ALU, substract and check Zero output Calculate target address Sign-extend displacement Shift left 1 place (halfword displacement) Add to PC value First-cut data path does an instruction in one clock cycle Each datapath element can only do one function at a time Hence, we need separate instruction and data memories","title":"Instruction fetching"},{"location":"CO/co4/#path-built-using-multiplexer","text":"R-type instruction Datapath I-type instruction Datapath For ALU For load S-type (store) instruction Datapath SB-type (branch) instruction Datapath UJ-type instruction Datapath Full datapath","title":"Path Built using Multiplexer"},{"location":"CO/co4/#a-simple-implementation-scheme","text":"Analyse for cause and effect Information comes from the 32 bits of the instruction Selecting the operations to perform (ALU, read/write, etc.) Controlling the flow of data (multiplexor inputs) ALU's operation based on instruction type and function code 7 \u4e2a\u63a7\u5236\u4fe1\u53f7\u548c\u4e00\u4e2a 4 \u4f4d\u7684 ALU_operation . MemToReg \u6709\u4e09\u4e2a\u6e90\uff0c\u5206\u522b\u662f load \u6307\u4ee4\uff0cPC \u6765\u7684( jal, jalr \u5b58 PC+4), ALU \u51fa\u6765\u7684\uff08R \u578b\uff0cI \u578b\uff09","title":"A simple Implementation Scheme"},{"location":"CO/co4/#alu-symbol-control","text":"ALU used for Load/Store: F = add Branch: F = subtract R-type: F depends on opcode \u56e0\u6b64\u6211\u4eec\u8fdb\u884c\u4e24\u7ea7\u89e3\u7801 2-level decode.","title":"ALU symbol &amp; Control"},{"location":"CO/co4/#first-level","text":"\u4e00\u7ea7\u89e3\u7801\u540e\uff0c\u53ef\u4ee5\u51b3\u5b9a\u9664\u4e86 ALU_opration \u4ee5\u5916\u7684\u63a7\u5236\u4fe1\u53f7 \u540c\u65f6\u6211\u4eec\u4f1a\u89e3\u7801\u51fa 2 \u4f4d\u7684 ALU_op .","title":"First level"},{"location":"CO/co4/#second-level","text":"ALU operation is decided by 2-bit ALUOp derived from opcode, and funct7 & funct3 fields of the instruction.","title":"second level"},{"location":"CO/co4/#datapath-with-control","text":"\u84dd\u7ebf\u4e3a\u63a7\u5236\u901a\u8def\uff0c\u4f1a\u51b3\u5b9a\u6570\u636e\u7684\u6d41\u5411\u3002","title":"Datapath with Control"},{"location":"CO/co4/#an-overview-of-pipelining","text":"","title":"An overview of pipelining"},{"location":"CO/co4/#performance","text":"\u5bf9\u4e8e\u5355\u5468\u671f CPU, CPI \u662f 1, \u4f46\u65f6\u949f\u5468\u671f\u4f1a\u5f88\u957f\u3002 \u5047\u8bbe\u53d6\u6307\u4ee4 200ps, \u5bc4\u5b58\u5668\u8bfb 100ps, ALU \u8ba1\u7b97 200ps, \u5185\u5b58\u8bbf\u95ee 200ps, \u5bc4\u5b58\u5668\u5199 100ps. \u90a3\u4e48 add \u9700\u8981 600ps, ld \u9700\u8981 800ps, sd \u9700\u8981 700ps, beq \u9700\u8981 500ps. Longest delay determines clock period. ( ld ) We will improve performance by pipelining.","title":"Performance"},{"location":"CO/co4/#pipelining","text":"\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u6761\u6307\u4ee4\u90fd\u5212\u5206\u4e3a\u8fd9\u4e48\u51e0\u6b65\uff1a IF : Instruction fetch from memory ID : Instruction decode & register read EX : Execute operation or calculate address MEM : Access memory operand WB : Write result back to register \\(CPI \\approx 1\\) One instruction will be issued (or finished) each cycle. During any cycle, one instruction is present in each stage.","title":"Pipelining"},{"location":"CO/co4/#pipeline-performance","text":"\u4e0d\u540c\u64cd\u4f5c\u7684\u65f6\u95f4\u4e5f\u4e0d\u540c\uff0c\u6d41\u6c34\u7ebf CPU \u7684\u65f6\u949f\u5468\u671f\u4e3a\u6700\u957f\u7684\u64cd\u4f5c\u65f6\u95f4\u3002 \u6d41\u6c34\u7ebf\u53ef\u4ee5\u63d0\u9ad8\u541e\u5410\u91cf(throughput) \u4f46\u5e76\u6ca1\u6709\u6539\u53d8\u6bcf\u6761\u6307\u4ee4\u7684\u6267\u884c\u65f6\u95f4(Latency)\u3002","title":"Pipeline Performance"},{"location":"CO/co4/#risc-v-isa-designed-for-pipelining","text":"RISC-V \u9002\u5408\u6d41\u6c34\u7ebf\u8bbe\u8ba1\u3002 All instructions are 32-bits Easier to fetch and decode in one cycle Few and regular instruction formats Can decode and read registers in one step Load/store addressing Can calculate address in 3 rd stage, access memory in 4 th stage","title":"RISC-V ISA designed for pipelining"},{"location":"CO/co4/#hazards","text":"\u5192\u9669/\u7ade\u4e89 \u5f53\u524d\u8fd9\u6761\u6307\u4ee4\u4e0d\u80fd\u8fdb\u5165\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u8981\u7b49\u5f85\u3002 Structure hazards A required resource is busy. Data hazard Need to wait for previous instruction to complete its data read/write. Control hazard Deciding on control action depends on previous instruction.","title":"Hazards"},{"location":"CO/co4/#structure-hazards","text":"\u5982\u679c\u53ea\u6709\u4e00\u5757\u5185\u5b58\uff0c\u4f46 IF \u548c MEM \u9636\u6bb5\u90fd\u9700\u8981\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\uff0c\u90a3\u4e48 IF \u5c31\u4f1a\u88ab stall \u6682\u505c\uff0c\u9020\u6210\u4e00\u4e2a bubble. (\u5373\u6d41\u6c34\u7ebf\u5185\u6709\u4e00\u4e2a\u65f6\u523b\u662f\u6e05\u7a7a\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u6211\u4eec\u6ca1\u6709\u53bb\u53d6\u6307\u4ee4) Pipelined datapaths require separate instruction/data memories. (Or separate instruction/data caches)","title":"Structure Hazards"},{"location":"CO/co4/#data-hazards","text":"An instruction depends on completion of data access by a previous instruction. Example \u6ce8\u610f\u8fd9\u91cc WB \u662f\u5728\u524d\u534a\u4e2a\u5468\u671f\u5c06\u6570\u636e\u5199\u5165\u5bc4\u5b58\u5668, ID \u662f\u5728\u540e\u534a\u4e2a\u5468\u671f\u5c06\u6570\u636e\u4ece\u5bc4\u5b58\u5668\u4e2d\u53d6\u51fa\u3002 \u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u8981\u7528\u7684\u7ed3\u679c\u5728 EX \u65f6\u5df2\u7ecf\u4ea7\u751f\u4e86\u3002 Forwarding(Bypassing) Use result when it is computed Don\u2019t wait for it to be stored in a register Requires extra connections in the datapath Example Load-Use Data Hazard Example \u6d41\u6c34\u7ebf\u7684 CPI \u4e0d\u53ef\u80fd\u7b49\u4e8e 1, \u56e0\u4e3a\u4e0a\u56fe\u8fd9\u79cd\u60c5\u51b5\u4e00\u5b9a\u4f1a\u53d1\u751f( ld \u65e0\u6cd5\u907f\u514d)\u3002 \u53ef\u4ee5\u628a\u540e\u7eed\u4e0e\u8fd9\u4e9b\u5bc4\u5b58\u5668\u65e0\u5173\u7684\u6307\u4ee4\u5148\u62ff\u5230\u8fd9\u91cc\u6267\u884c\u3002\uff08\u4e71\u5e8f\u6267\u884c\uff09 Example \u4fee\u6539\u540e, ld x2, 8(x0) \u5df2\u7ecf\u4ece\u5185\u5b58\u4e2d\u8bfb\u51fa\u6570\u636e\u8fd8\u6ca1\u6709\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u53ef\u4ee5\u76f4\u63a5\u9001\u5230 add x3, x1, x2 \u4e2d\u53bb\u3002","title":"Data Hazards"},{"location":"CO/co4/#control-hazards","text":"Branch determines flow of control Fetching next instruction depends on branch outcome Pipeline can\u2019t always fetch correct instruction \u53ef\u4ee5\u9884\u6d4b\uff0c\u6216\u8005\u5c06\u6bd4\u8f83\u653e\u5728 ID \u7ea7\u3002 Example Branch Prediction \u66f4\u957f\u7684\u6d41\u6c34\u7ebf\u4e0d\u80fd\u5f88\u65e9\u5730\u51b3\u5b9a\u5206\u652f\u7ed3\u679c\u3002 \u53ef\u4ee5\u9884\u6d4b branch \u547d\u4e2d\u6216\u8005\u4e0d\u547d\u4e2d\u3002 Static branch prediction \u5047\u8bbe\u603b\u662f\u547d\u4e2d/\u4e0d\u547d\u4e2d Dynamic branch prediction \u8bb0\u5f55\u4e0a\u6b21\u8dd1\u5230\u8fd9\u91cc\u662f\u5426\u547d\u4e2d\uff0c\u7136\u540e\u4e0b\u6b21\u6309\u7167\u4e4b\u524d\u7684\u7ed3\u679c\u9884\u6d4b\u3002 Summary Pipelining improves performance by increasing instruction throughput Executes multiple instructions in parallel Each instruction has the same latency Subject to hazards(Structure, data, control) Instruction set design affects complexity of pipeline implementation","title":"Control Hazards"},{"location":"CO/co4/#risc-v-pipelined-datapath","text":"\u4e0d\u540c\u9636\u6bb5\u4e4b\u95f4\uff0c\u6211\u4eec\u9700\u8981\u5bc4\u5b58\u5668\u6765\u4fdd\u5b58\u4e4b\u524d\u9636\u6bb5\u5f97\u5230\u7684\u503c\u3002 \u7ade\u4e89\u53ea\u4f1a\u53d1\u751f\u5728\u4ece\u53f3\u5f80\u5de6\u7684\u9636\u6bb5\u3002 \u6ce8\u610f\u5230\uff0c\u7b2c\u4e94\u4e2a\u9636\u6bb5\u5199\u56de\u65f6\uff0c\u5199\u5bc4\u5b58\u5668\u53f7\u5e94\u8be5\u662f\u4ece MEM/WB \u4e2d\u7684\uff0c\u800c\u4e0d\u662f IF \u51fa\u7684\u5bc4\u5b58\u5668\u53f7\u3002 Single-clock-cycle pipeline diagram : Shows pipeline usage in a single cycle; Highlight resources used multi-clock-cycle diagram : Graph of operation over time","title":"RISC-V Pipelined Datapath"},{"location":"CO/co4/#pipelined-control","text":"\u63a7\u5236\u4fe1\u53f7 ID \u9636\u6bb5\u5168\u90e8\u8bd1\u51fa\uff0c\u968f\u540e\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u5230\u540e\u7eed\u9636\u6bb5\u4e2d\u53bb\u3002 \u6709\u4e9b\u4fe1\u53f7\u5728 WB \u9636\u6bb5\u7528\uff0c\u6709\u4e9b\u5728 M \u9636\u6bb5\u7528\uff0c\u6709\u4e9b\u5728 EX. \u4f7f\u7528\u4e4b\u540e\u5c31\u4e0d\u518d\u9700\u8981\u628a\u4fe1\u53f7\u4f20\u9012\u4e0b\u53bb\u3002","title":"Pipelined Control"},{"location":"CO/co4/#data-hazards_1","text":"","title":"Data Hazards"},{"location":"CO/co4/#forwarding","text":"Example and \u8bed\u53e5\u4e2d\u5c06 EX \u7684\u7ed3\u679c\u524d\u9012, or \u8bed\u53e5\u4e2d\u8981\u5c06 DM \u7684\u7ed3\u679c\u524d\u9012\uff08\u6b64\u65f6 EX \u7684\u503c\u5df2\u7ecf\u4e0d\u662f\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\u4e86\uff09 \u5982\u4f55\u5224\u65ad\u662f\u5426\u9700\u8981\u524d\u9012\uff1f Rd \u8981\u4e00\u76f4\u4f20\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u6b64\u5224\u65ad\u8981\u8bfb\u51fa\u7684\u5bc4\u5b58\u5668\u662f\u5426\u662f\u4e4b\u524d\u6307\u4ee4\u8981\u5199\u56de\u7684\u5bc4\u5b58\u5668\u3002 Data hazards when EX/MEM.RegisterRd = ID/EX.RegisterRs1 \u5728\u7b2c\u56db\u4e2a\u65f6\u949f\u5468\u671f\u65f6\u628a EX/MEM \u7684\u5bc4\u5b58\u5668\u503c\u9001\u5230 ALU. EX/MEM.RegisterRd = ID/EX.RegisterRs2 MEM/WB.RegisterRd = ID/EX.RegisterRs1 MEM/WB.RegisterRd = ID/EX.RegisterRs2 \u53ea\u6709\u5728\u6211\u4eec\u8981\u6539\u53d8\u5bc4\u5b58\u5668\u7684\u503c\u7684\u65f6\u5019\u624d\u80fd\u7528\u524d\u9012\u7684\u503c\uff08\u6709\u4e9b\u6307\u4ee4\u53ef\u80fd\u6839\u672c\u5c31\u4e0d\u4f1a\u5199\u56de\u5bc4\u5b58\u5668\uff0c\u6ca1\u6709\u6709\u6548\u7684 Rd\uff09 EX/MEM.RegWrite, MEM/WB.RegWrite \u4e0d\u4e3a 0. \u6b64\u5916 EX/MEM.RegisterRd, MEM/WB.RegisterRd \u4e5f\u4e0d\u80fd\u4e3a 0. Mux control Source Explanation ForwardA = 00 ID/EX The first ALU operand comes from the register file. ForwardA = 10 EX/MEM The first ALU operand is forwarded from the prior ALU result. ForwardA = 01 MEM/WB The first ALU operand is forwarded from data memory or an earlier ALU result. Double Data Hazard \u6211\u4eec\u524d\u9012\u65f6\u8981\u52a0\u4e00\u4e2a\u6761\u4ef6\uff0c \u53ea\u6709\u5728 EX/MEM \u7684\u6761\u4ef6\u4e0d\u6210\u7acb\u65f6 \uff0c\u624d\u80fd\u67e5\u770b MEM/WB \u7684\u6761\u4ef6\u3002","title":"Forwarding"},{"location":"CO/co4/#load-use-hazard-detection","text":"\u5982\u679c\u6211\u4eec\u5728 ld \u6307\u4ee4 EX/MEM \u65f6\u6682\u505c\uff0c\u6b64\u65f6 ld \u540e\u9762\u6709\u4e24\u6761\u6307\u4ee4\u9700\u8981\u6682\u505c\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u66f4\u65e9\u7684\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u3002 Load-use hazard when ID/EX.MemRead and ((ID/EX.RegisterRd = IF/ID.RegisterRs1) or (ID/EX.RegisterRd = IF/ID.RegisterRs2)) If detected, stall and insert bubble","title":"Load-Use Hazard Detection"},{"location":"CO/co4/#stall","text":"\u5728 ld \u540e\u9762 stall\uff0c\u4f7f\u5f97\u8fd9\u7ea7\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a 0, \u540c\u65f6\u963b\u6b62 PC, IF/ID \u5bc4\u5b58\u5668\u7684\u66f4\u65b0\u3002 \u76f8\u5f53\u4e8e\u53c8\u8fdb\u884c\u4e86\u4e00\u6b21 decode. Example Stalls reduce performance But are required to get correct results Compiler can arrange code to avoid hazards and stalls","title":"Stall"},{"location":"CO/co4/#branch-hazards","text":"\u662f\u5426\u8df3\u8f6c\u5728 MEM \u9636\u6bb5\u51b3\u5b9a\u3002 \u6700\u6734\u7d20\u7684\u65b9\u6cd5\u662f\u65e0\u89c6\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a\u524d\u4e09\u4e2a\u9636\u6bb5\u5e76\u4e0d\u6d89\u53ca\u5bf9\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u4fee\u6539\uff0c\u5373\u4f7f\u6211\u4eec\u9884\u6d4b\u540e\u7eed\u4e0d\u6267\u884c\u8fd9\u4e9b\u6307\u4ee4\u4e5f\u4e0d\u4f1a\u5e26\u6765\u5f71\u54cd\u3002\u4f46\u8fd9\u6837\u53ef\u80fd\u5e26\u6765 CPI \u7684\u663e\u8457\u964d\u4f4e\u3002 \u4e00\u79cd\u65b9\u6cd5\u662f\u5728 ID \u7ea7\u51b3\u5b9a\u662f\u5426\u8df3\u8f6c\uff08\u6b64\u65f6\u5df2\u7ecf\u6709\u4e86\u4e24\u4e2a\u6e90\u64cd\u4f5c\u6570\u548c\u7acb\u5373\u6570\uff09 Example \u8fd9\u6837\u6211\u4eec\u53ea\u53ef\u80fd\u591a\u4f59\u4e00\u6761\u6307\u4ee4\uff0c\u63d2\u5165 bubble \u5373\u53ef\u3002\u4f46\u662f\u8fd9\u6837\u4e5f\u4e0d\u53ef\u63a5\u53d7\u3002","title":"Branch Hazards"},{"location":"CO/co4/#dynamic-branch-prediction","text":"In deeper and superscalar(\u591a\u53d1\u5c04) pipelines, branch penalty is more significant. Use dynamic prediction . Branch prediction buffer (aka branch history table) \u8bb0\u5f55\u524d\u51e0\u6b21\u662f\u5426\u547d\u4e2d Indexed by recent branch instruction addresses Stores outcome (taken/not taken) To execute a branch Check table, expect the same outcome Start fetching from fall-through or target If wrong, flush pipeline and flip prediction \u53ef\u4ee5\u5904\u7406 for \u5faa\u73af\u7684\u9884\u6d4b\u3002 1-Bit Predictor \u4f46\u4e5f\u5b58\u5728\u95ee\u9898\uff0c\u5bf9\u4e8e\u53cc\u5c42\u5faa\u73af\uff0c\u5f53\u5185\u5c42\u5faa\u73af\u8981\u7ed3\u675f\u65f6\u4f1a\u9519\u4e24\u6b21\u3002 Mispredict as taken on last iteration of inner loop Then mispredict as not taken on first iteration of inner loop next time around \u53ef\u4ee5\u4fee\u6539\u9884\u6d4b\u65b9\u5f0f\uff1a\u53ea\u6709\u8fde\u7eed\u9519\u8bef\u4e24\u6b21\u624d\u4f1a\u4fee\u6539\u6211\u4eec\u7684\u9884\u6d4b\u3002\u5373 2-Bit Predictor.","title":"Dynamic Branch Prediction"},{"location":"CO/co4/#calculating-the-branch-target","text":"\u5373\u4f7f branch \u547d\u4e2d\u4e86\uff0c\u6211\u4eec\u4e5f\u6709\u4e00\u4e2a\u65f6\u949f\u7684 bubble \u6765\u8ba1\u7b97\u5730\u5740\u3002 \u4f46 branch \u8981\u8df3\u8f6c\u7684\u5730\u5740\u5176\u5b9e\u662f\u53ef\u4ee5\u5b58\u4e0b\u6765\u7684\u3002 Branch target buffer Cache of target addresses Indexed by PC when instruction fetched If hit and instruction is branch predicted taken, can fetch target immediately","title":"Calculating the Branch Target"},{"location":"CO/co4/#exceptions-and-interrupts","text":"\u201cUnexpected\u201d events requiring change in flow of control. Exception \u5f02\u5e38 Arises within the CPU e.g. undefined opcode, syscall, \u2026 Interrupt \u4e2d\u65ad From an external I/O controller","title":"Exceptions and Interrupts"},{"location":"CO/co4/#handling-exceptions","text":"Save PC of offending (or interrupted) instruction In RISC-V: Supervisor Exception Program Counter(SEPC) Save indication of the problem In RISC-V: Supervisor Exception Cause Register(SCAUSE) 64 bits, but most bits unused e.g. Exception code field: 2 for undefined opcode, 12 for hardware malfunction... Jump to handler \u5fc5\u987b\u7531\u786c\u4ef6\u8df3\u5230\u8fd9\u4e2a\u5730\u5740\u3002 Direct \u6240\u6709\u5f02\u5e38\u8df3\u5230\u56fa\u5b9a\u5730\u5740\u3002 Vectored Interrupts \u4e2d\u65ad\u5411\u91cf Handler address determined by the cause. Exception vector address to be added to a vector table base register \u5f53\u591a\u4e2a\u5f02\u5e38/\u4e2d\u65ad\u540c\u65f6\u6765\u65f6\uff0c\u5982\u4f55\u5904\u7406\uff1f","title":"Handling Exceptions"},{"location":"CO/co4/#handler-actions","text":"\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f Read cause, and transfer to relevant handler Determine action required If restartable Take corrective action use SEPC to return to program Otherwise Terminate program Report error using SEPC, SCAUSE, ...","title":"Handler Actions"},{"location":"CO/co4/#exceptions-in-a-pipeline","text":"Another form of control hazard. Consider malfunction on add in EX stage. add x1, x2, x1 Prevent x1 from being clobbered Complete previous instructions Flush add and subsequent instructions Set SEPC and SCAUSE register values Transfer control to handler","title":"Exceptions in a Pipeline"},{"location":"CO/co4/#instruction-level-parallelism-ilp","text":"Pipelining: executing multiple instructions in parallel \u6307\u4ee4\u7ea7\u5e76\u884c To increase ILP Deeper pipeline \u8ba9\u6bcf\u4e00\u7ea7\u6d41\u6c34\u7ebf\u505a\u66f4\u5c11\u7684\u4e8b\u60c5\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u63d0\u9ad8\u5de5\u4f5c\u9891\u7387\u3002 \u4f46\u6d41\u6c34\u7ebf\u4e0d\u80fd\u65e0\u9650\u7ec6\u5206\uff0c\u56e0\u4e3a\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u4e5f\u4f1a\u5e26\u6765\u5f00\u9500\u3002 Multiple issue \u591a\u53d1\u5c04 \u8fd9\u6837\u53ef\u4ee5\u505a\u5230 CPI < 1. \u4f7f\u7528 Instructions Per Cycle (IPC)","title":"Instruction-Level Parallelism (ILP)"},{"location":"CO/co4/#multiple-issue","text":"Static multiple issue \u7f16\u8bd1\u5668\u628a\u80fd\u591f\u540c\u65f6\u653e\u5230\u6d41\u6c34\u7ebf\u7684\u6307\u4ee4\u6392\u597d \u7f16\u8bd1\u5668\u8981\u80fd\u68c0\u6d4b\uff0c\u907f\u514d\u7ade\u4e89 Dynamic multiple issue CPU \u81ea\u5df1\u51b3\u5b9a\u6267\u884c\u90a3\u4e9b\u6307\u4ee4\uff0c\u7f16\u8bd1\u5668\u4f1a\u5e2e\u5fd9\u91cd\u6392\u6307\u4ee4\uff0c\u4f46\u8fd8\u662f\u7531 CPU \u89e3\u51b3\u7ade\u4e89\u3002","title":"Multiple issue"},{"location":"CO/co4/#static-multiple-issue","text":"RISC-V with Static Dual Issue ALU/branch \u6307\u4ee4\u4e0d\u7528\u8bbf\u95ee\u5185\u5b58\u3002 \u6240\u4ee5\u8fd9\u4e24\u6761\u4e0d\u80fd\u540c\u65f6\u53d1\u51fa\uff0c\u56e0\u4e3a\u5b58\u5728\u7ade\u4e89\u5173\u7cfb\u3002 Loop Unrolling \u5faa\u73af\u5c55\u5f00\uff08\u4f46\u6ce8\u610f\u6307\u4ee4\u95f4\u8981\u5c3d\u91cf\u51cf\u5c11\u76f8\u540c\u5bc4\u5b58\u5668\u7684\u4f9d\u8d56\uff09 Use different registers per replication Called \u201cregister renaming\u201d Avoid loop-carried \u201canti-dependencies\u201d Loop Unrolling Example","title":"Static multiple issue"},{"location":"CO/co5/","text":"Large and Fast: Exploiting Memory Hierarchy \u00b6 Abstract Memory Technologies Memory Hierarchy Introduction The basics of Cache Measuring and improving cache performance Dependable Memory Hierarchy Virtual Machines Virtual Memory A common Framework for Memory Hierarchy Using FSM to Control a simple Cache Memory Technologies \u00b6 SRAM value is stored on a pair of inverting gates very fast but takes up more space than DRAM DRAM value is stored as a charge on capacitor (must be refreshed) very small but slower than SRAM (factor of 5 to 10 \u89c1 \u8ba1\u903b\u90e8\u5206 Memory Hierarchy Introduction \u00b6 Programs access a small proportion of their address space at any time Temporal locality Items accessed recently are likely to be accessed again soon \u5982 for \u5faa\u73af\uff0c\u8dd1\u8fc7\u4e00\u6b21\u540e\u6211\u4eec\u5927\u6982\u7387\u8fd8\u8981\u6267\u884c\u5faa\u73af\u4f53\u91cc\u7684\u4ee3\u7801 Spatial locality Items near those accessed recently are likely to be accessed soon \u5982\u6570\u7ec4\uff0c\u6211\u4eec\u8bbf\u95ee\u4e86\u8fd9\u4e2a\u5143\u7d20\u540e\u5927\u6982\u7387\u8fd8\u8981\u8bbf\u95ee\u540e\u9762\u7684\u5143\u7d20 \u5229\u7528\u5c40\u90e8\u6027\uff1a Memory hierarchy Store everything on disk Copy recently accessed (and nearby) items from disk to smaller DRAM memory Main memory Copy more recently accessed (and nearby) items from DRAM to smaller SRAM memory Cache memory attached to CPU Block (aka line ): unit of copying \u5411\u4e0a\u7ea7\u5b58\u50a8\u5668\u642c\u6570\u636e\u7684\u6700\u5c0f\u5355\u4f4d\uff08\u53ef\u80fd\u6709\u5f88\u591a\u4e2a\u5b57\uff09 Hit : If accessed data is present in upper level \u547d\u4e2d - \u4e0a\u5c42\u7684\u5b58\u50a8\u5668\u6709\u6211\u4eec\u8981\u7684\u6570\u636e\uff0c\u4e0d\u9700\u8981\u53bb\u4e0b\u5c42\u5b58\u50a8\u5668\u5bfb\u627e hit ratio: hits/accesses hit time: \u8bbf\u95ee\u4e0a\u5c42\u5b58\u50a8\u7684\u65f6\u95f4\u4ee5\u53ca\u51b3\u5b9a\u662f\u5426\u547d\u4e2d\u7684\u65f6\u95f4 Miss : If accessed data is absent \u9700\u8981\u4ece\u4e0b\u5c42\u5b58\u50a8\u5668\u4e2d\u628a\u5bf9\u5e94\u6570\u636e\u7684\u5757\u642c\u5230\u4e0a\u5c42\uff0c\u63a5\u7740\u4ece\u4e0a\u5c42\u628a\u6570\u636e\u8bfb\u8d70 miss penalty miss rate: 1 - hit ratio miss time: \u66ff\u4ee3\u4e0a\u5c42\u5b58\u50a8\u5668\u7684\u5757\u7684\u65f6\u95f4\u548c\u628a\u8fd9\u4e2a\u5757\u7ed9\u5904\u7406\u5668\u7684\u65f6\u95f4 Exploiting Memory Hierarchy \u63a5\u4e0b\u6765\u6211\u4eec\u5173\u6ce8\u4e24\u90e8\u5206\uff1a The basics of Cache: SRAM and DRAM(main memory) \u89e3\u51b3\u901f\u5ea6\u95ee\u9898 Virtual Memory: DRAM and DISK \u89e3\u51b3\u5bb9\u91cf\u95ee\u9898 The basics of Cache \u00b6 For each item of data at the lower level, there is exactly one location in the cache where it might be. So, lots of items at the lower level share locations in the upper level. \u591a\u4e2a\u5757\u4f1a\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u4f4d\u7f6e\u3002 How do we know if a data item is in the cache? \u5982\u4f55\u77e5\u9053\u6570\u636e\u662f\u5426\u5728 cache \u4e2d\uff1f If it is, how do we find it? \u5982\u679c\u6709\uff0c\u5982\u4f55\u627e\u5230\u6570\u636e\uff1f Direct Mapped Cache \u00b6 memory address is modulo the number of blocks in the cache \u53d6\u6a21\u3002 Store block address as well as the data \u6211\u4eec\u9700\u8981\u77e5\u9053 cache \u653e\u7684\u662f\u54ea\u4e2a\u5757\u3002 Actually, only need the high-order bits Called the tag Valid bit: 1 = present, 0 = not present \u6211\u4eec\u9700\u8981\u77e5\u9053 cache \u91cc\u662f\u5426\u6709\u653e\u6709\u6548\u7684\u5757\u3002 byte offset \u5730\u5740 \u5982\u679c\u4e00\u4e2a block \u662f\u4e00\u4e2a\u5b57\uff0c\u90a3\u4e48 byte offset \u5e94\u8be5\u6709 2 \u4f4d\u3002 \u6ce8\u610f CPU \u7ed9\u51fa\u7684\u5730\u5740\u90fd\u662f\u4ee5 byte \u4e3a\u6700\u5c0f\u5bfb\u5740\u5355\u5143\u7684\u3002 Example \u8fd9\u91cc\u7701\u7565\u4e86\u540e\u9762\u7684 byte offset. byte offset \u4f4d\u5bbd\u7531 block size \u51b3\u5b9a\u3002 index \u4f4d\u5bbd\u7531 cache size \u51b3\u5b9a tag \u4f4d\u5bbd\u7531\u603b\u7684\u5730\u5740\u4f4d\u5bbd\u51cf\u6389\u5176\u4ed6\u4f4d\u51b3\u5b9a Bits in Cache Mapping an Address to Multiword Cache Block Handling Cache hit and Misses \u00b6 Read hits Read misses\u2014two kinds of misses data cache miss instruction cache miss Stall the CPU, fetch block from memory, deliver to cache, restart CPU read 1. Send the original PC value (current PC-4) to the memory. \u56e0\u4e3a PC \u53d6\u503c\u5b8c\u5c31\u53d8\u6210 +4 \u4e86\uff0c\u6240\u4ee5\u5f53\u524d\u6267\u884c\u7684\u5176\u5b9e\u662f PC-4 2. Instruct main memory to perform a read and wait for the memory to complete its access. 3. Write the cache entry, putting the data from memory in the data portion of the entry, writing the upper bits of the address (from the ALU) into the tag field, and turning the valid bit on. 4. Restart the instruction execution at the first step, which will refetch the instruction again, this time finding it in the cache. Write hits write-back : Cause Inconsistent \u53ea\u628a\u6570\u636e\u5199\u5230 cache \u4e2d\u3002\u4ee5\u540e\u518d\u628a block \u642c\u56de\u5230\u5185\u5b58\u3002 write-through : Ensuring Consistent \u65e2\u628a\u6570\u636e\u5199\u5230 cache \u4e2d\u53c8\u5199\u5230\u5185\u5b58\u4e2d\u3002 Slower! -- write buffer Write misses read the entire block into the cache, then write the word Deep concept in Cache \u00b6 Q1: Where can a block be placed in the upper level? (Block placement) Q2: How is a block found if it is in the upper level? (Block identification) Q3: Which block should be replaced on a miss? (Block replacement) Q4: What happens on a write? (Write strategy) Block Placement \u00b6 Direct mapped Block can only go in one place in the cache \u5757\u53ea\u80fd\u53bb\u4e00\u4e2a\u5730\u65b9\uff0c\u901a\u5e38\u53d6\u6a21 Fully associative \u5168\u76f8\u8054 Block can go anywhere in cache. \u54ea\u91cc\u7a7a\u4e86\u53bb\u54ea\u91cc Set associative \u7ea7\u76f8\u8054 Block can go in one of a set of places in the cache. A set is a group of blocks in the cache. \u4e0a\u4e24\u79cd\u65b9\u6cd5\u7684\u7ed3\u5408\u3002\u628a\u4e00\u7ec4\u5757\u7ec4\u5408\u6210 set, \u4e00\u4e2a\u5757\u53d6\u6a21\u627e\u5230\u8fd9\u4e2a\u7ec4\u53f7\uff0c\u53ef\u4ee5\u53bb\u7ec4\u91cc\u7684\u4efb\u610f\u4e00\u4e2a\u5757\u3002 Direct mapped \u76f8\u5f53\u4e8e 1-way set associative, Fully associative \u76f8\u5f53\u4e8e m-way set-associative(m blocks) Example Block Identification \u00b6 Tag \u76f4\u63a5\u6620\u5c04\u53ea\u9700\u8981\u6bd4\u8f83\u4e00\u4e2a\u5757\u7684 tag, \u7ea7\u76f8\u8054\u9700\u8981\u6bd4\u8f83 set \u91cc\u6240\u6709\u5757\u7684 tag. Valid bit The Format of the Physical Address The Index field selects \u5168\u76f8\u8054\u6ca1\u6709 index. The set, in case of a set-associative cache \u7ea7\u76f8\u8054 \\(\\log_2(sets)\\) The block, in case of a direct-mapped cache \u76f4\u63a5\u6620\u5c04 \\(\\log_2(blocks)\\) The Byte Offset field selects \u7531\u4e00\u4e2a\u5757\u5185 byte \u7684\u6570\u76ee\u51b3\u5b9a. \\(\\log_2(size of block)\\) The Tag is used to find the matching block within a set or in the cache Direct-mapped Cache Example (1-word Blocks) Fully-Associative Cache example (1-word Blocks) 2-Way Set-Associative Cache \u6ce8\u610f\u8fd9\u91cc\u5e94\u8be5\u662f\u5bf9 Set0 \u91cc\u9762\u7684 tag \u6bd4\u8f83\u3002 Block Replacement \u00b6 In a direct-mapped cache, there is only one block that can be replaced. In set-associative and fully-associative caches, there are N blocks (where N is the degree of associativity). Random replacement - randomly pick any block Easy to implement in hardware, just requires a random number generator Spreads allocation uniformly across cache May evict a block that is about to be accessed Least-recently used (LRU) - pick the block in the set which was least recently accessed Assumed more recently accessed blocks more likely to be referenced again This requires extra bits in the cache to keep track of accesses. \u9700\u8981\u989d\u5916\u7684\u4f4d\u6570\uff01 First in,first out(FIFO) - Choose a block from the set which was first came into the cache Write Strategy \u00b6 If the data is written to memory, the cache is called a write through cache Can always discard cached data - most up-to-date data is in memory \u597d\u5904\u662f\u53ef\u4ee5\u968f\u65f6\u628a cache \u7684\u5185\u5bb9\u4e22\u6389\u3002 Cache control bit: only a valid bit memory (or other processors) always have latest data If the data is NOT written to memory, the cache is called a write-back cache Can\u2019t just discard cached data - may have to write it back to memory Cache control bits: both valid and dirty bits much lower bandwidth, since data often overwritten multiple times \u5199\u56de\u9700\u8981\u65f6\u95f4\uff0c\u6211\u4eec\u9700\u8981 write stall. Write stall -- When the CPU must wait for writes to complete during write through. \u6211\u4eec\u5f80\u5f80\u4f7f\u7528 write buffer. A small cache that can hold a few values waiting to go to main memory. It does not entirely eliminate stalls since it is possible for the buffer to fill if the burst is larger than the buffer. buffer \u53ef\u80fd\u88ab\u586b\u6ee1\uff0c\u4e0d\u80fd\u5b8c\u5168\u907f\u514d write stall. \u5b58\u5728\u95ee\u9898\uff1a\u5f53\u6211\u5982\u679c\u8981\u8bfb\u7684\u65f6\u5019\uff0c\u6570\u636e\u8fd8\u5728 buffer \u91cc\u6ca1\u6709\u88ab\u5199\u5165\u5185\u5b58\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u5728 buffer \u91cc\u9762\u6bd4\u8f83\uff0c\u5982\u679c\u6ca1\u6709\u518d\u5728\u5185\u5b58\u91cc\u627e\u3002 Write misses Write allocate The block is loaded into the cache on a miss before anything else occurs. \u5e38\u4e0e write back \u642d\u914d Write around (no write allocate) \u5e38\u4e0e write through \u642d\u914d The block is only written to main memory It is not stored in the cache. Larger blocks exploit spatial locality Designing the Memory system to Support Cache \u00b6 \u4e3a\u4e86\u63d0\u9ad8 cache \u7684\u6027\u80fd\uff0c\u6211\u4eec\u6709\u4e0d\u540c\u7684 memory \u7ec4\u7ec7\u67b6\u6784 Performance basic memory organization Performance in Wider Main Memory \u4e00\u6b21\u53ef\u4ee5\u8bfb\u51fa\u4e24\u4e2a word. \u4f46\u8fd9\u65f6\u5185\u5b58\u592a\u5927\u4e86\uff0c\u5f00\u9500\u5927\u3002 * Performance in Four-way interleaved memory \u5185\u5b58\u5206\u4e3a\u591a\u4e2a banks, \u5e76\u884c\u8bbf\u95ee\u3002 Measuring and improving cache performance \u00b6 How to measure cache performance? How to improve performance? Reducing cache misses by more flexible placement of blocks Reducing the miss penalty using multilevel caches Average Memory Assess time = hit time + miss time = hit rate \\(\\times\\) Cache time + miss rate \\(\\times\\) memory time Measuring cache performance \u00b6 We use CPU time to measure cache performance. $ CPU Time = CPU execution clock cycles + Memory-stall clock cycles \\times Clock cycle time $ \u8fd9\u91cc CPU \u7684\u6267\u884c\u65f6\u95f4\u5728\u8bbe\u8ba1\u6d41\u6c34\u7ebf\u7684\u65f6\u5019\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u6211\u4eec\u65e0\u9700\u8003\u8651\u3002 \\[ \\begin{align*} Memory-stall\\ clock\\ cycles & = instructions \\times miss\\ ratio \\times miss \\ penalty \\\\ & = Read-stall\\ cycles + Write-stall\\ cycles \\end{align*} \\] For Read-stall \\(Read-stall\\ cycles = \\dfrac{Read}{Program}\\times Read\\ miss\\ rate \\times Read\\ miss\\ penalty\\) \u5305\u62ec\u53d6\u6307\u548c\u6570\u636e\u52a0\u8f7d\u3002 For a write-through plus write buffer scheme \\(Write-stall\\ cycles = \\left(\\dfrac{Write}{Program} \\times Write\\ miss\\ rate \\times Write\\ miss\\ penalty\\right)+Write\\ buffer\\ stalls\\) If the write buffer stalls are small, we can safely ignore them. \u4e00\u822c\u6765\u8bf4 buffer \u4e0d\u4f1a\u6ea2\u51fa\u3002 If the cache block size is one word, the write miss penalty is 0. \u5927\u5c0f\u662f\u4e00\u4e2a word, \u66ff\u6362\u51fa\u53bb\u5c31\u76f4\u63a5\u5199\u4e86\u3002 In most write-through cache organizations, the read and write miss penalties are the same.(\u4e3a\u4e86\u7b80\u4fbf\uff0c\u6211\u4eec\u8fd9\u91cc\u8fd9\u4e48\u5047\u8bbe) If we neglect the write buffer stalls, we get the following equation: \\[ \\begin{align*} Memory-stall\\ clock\\ cycles & =\\dfrac{Memory\\ accesses}{Program}\\times Miss\\ rate\\times Miss\\ penalty\\\\ & =\\dfrac{Instructions}{Program}\\times \\dfrac{Misses}{Instructions}\\times Miss\\ penalty \\end{align*} \\] Example \u5185\u5b58\u5360\u4e86\u6027\u80fd\u74f6\u9888\u3002 \u5047\u8bbe\u6211\u4eec\u628a\u65f6\u949f\u9891\u7387\u63d0\u9ad8\u4e24\u500d\u3002\u8fd9\u6837 penalty \u9700\u8981\u7684\u65f6\u949f\u5468\u671f\u7ffb\u500d\u3002 \u6b64\u65f6 CPU \u6027\u80fd\u5b9e\u9645\u53ea\u63d0\u5347 1.23 \u500d\u3002 Improving \u00b6 \u63d0\u9ad8 cache \u547d\u4e2d\u7387\uff1b\u51cf\u5c0f penalty. Reducing cache misses by more flexible placement of blocks \u00b6 \u5982\u679c\u6211\u4eec\u6b63\u597d\u4ee5\u6a21\u957f\u4e3a\u6b65\u8ddd\u8bbf\u95ee\uff0c\u5c31\u4f1a\u4e00\u76f4 miss. \u4f46\u5176\u5b9e\u6b64\u65f6 cache \u4e2d\u8fd8\u6709\u5f88\u591a\u7a7a\u4f4d\u3002 The disadvantage of a direct-mapped cache Miss rate versus set-associative \u6ce8\u610f block addr \u662f\u5ffd\u7565\u4e86\u5730\u4f4d\u7684 byte offset \u7684\u3002 Size of tags versus set associativity Decreasing miss penalty with multilevel caches \u00b6 Add a second level cache: often primary cache is on the same chip as the processor use SRAMs to add another cache above primary memory (DRAM) miss penalty goes down if data is in 2 nd level cache Example Using multilevel caches: try and optimize the hit time on the 1 st level cache try and optimize the miss rate on the 2 nd level cache Virtual Memory \u00b6 Main Memory act as a \u201cCache\u201d for the secondary storage. \u628a\u4e3b\u5b58\u5f53\u4f5c\u78c1\u76d8\u7684\u7f13\u5b58\u3002 Efficient and safe sharing of memory among multiple programs. \u4e0d\u540c\u7a0b\u5e8f\u6709\u81ea\u5df1\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6211\u4eec\u5e0c\u671b\u53ea\u8003\u8651\u81ea\u5df1\u7684\u7a7a\u95f4\uff0c\u4e0d\u5728\u4e4e\u5176\u4ed6\u7a0b\u5e8f\u653e\u5728\u54ea\u91cc\u3002\u8ba9\u8fdb\u7a0b\u8ba4\u4e3a\u662f\u81ea\u5df1\u72ec\u6709\u8fd9\u5757\u5730\u5740\u7a7a\u95f4\u3002 Remove the programming burdens of a small, limited amount of main memory. Translation of a program\u2019s address space to physical address. \u865a\u62df\u5185\u5b58\u7684\u4f5c\u7528\u5c31\u662f\u7ffb\u8bd1\u3002\uff08\u5185\u5b58\u662f\u788e\u7247\u5316\u7684\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u7a0b\u5e8f\u8ba4\u4e3a\u5730\u5740\u662f\u8fde\u7eed\u7684\uff09 Advantages: illusion of having more physical memory program relocation protection Pages: virtual memory blocks \u00b6 page \u662f\u6620\u5c04\u7684\u6700\u5c0f\u5355\u4f4d\u3002 \u865a\u62df\u9875\u7684\u6570\u91cf\u6bd4\u7269\u7406\u9875\u591a\uff08\u73b0\u5728\u4e0d\u4e00\u5b9a\uff09\u3002 Page faults : the data is not in memory, retrieve it from disk huge miss penalty, thus pages should be fairly large e.g. 4KB reducing page faults is important \u8981\u51cf\u5c11 miss can handle the faults in software instead of hardware \u7f3a\u9875\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u5904\u7406\u7684\uff0c\u800c\u4e0d\u662f\u786c\u4ef6(cache \u662f\u786c\u4ef6\u505a\u7684) using write-through is too expensive so we use *write back * \u786c\u76d8\u64cd\u4f5c\u592a\u6162\u4e86\uff0c\u6211\u4eec\u53ea\u5728\u88ab\u8e22\u51fa\u7684\u65f6\u5019\u5199\u56de\u3002\u56e0\u6b64\u7a81\u7136\u65ad\u7535\u7684\u65f6\u5019\u6570\u636e\u4f1a\u4e22\u5931\u3002 Page Tables \u00b6 pgtbl \u672c\u8eab\u5b58\u5728 memory \u91cc\uff0c\u8bb0\u5f55\u5730\u5740\u7684\u6620\u5c04\u5173\u7cfb\u3002\uff08\u7d22\u5f15\u662f\u865a\u62df\u5730\u5740\u7684\u9ad8\u4f4d\uff0c\u627e\u5230\u8868\u4e2d\u5bf9\u5e94\u9879\uff0c\u5c31\u662f\u7269\u7406\u5730\u5740\uff09 \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684 Page table , Program counter and the page table register . \u8fdb\u7a0b\u4e4b\u95f4\u5207\u6362\uff0c\u5207\u6362\u9875\u8868\u5c31\u53ef\u4ee5\u4e86\u3002 Virtual memory systems use fully associative mapping method. \u4e3a\u4e86\u63d0\u9ad8\u547d\u4e2d\u7387\uff0c\u6211\u4eec\u91c7\u7528\u5168\u76f8\u8054\u7684\u65b9\u5f0f\u3002\u8fd9\u5bfc\u81f4\u66ff\u6362\u7b56\u7565\uff08\u6bd4\u5982 LRU\uff09\u5f88\u590d\u6742\uff0c\u4f46\u56e0\u4e3a\u662f OS \u7f16\u5199\uff0c\u6240\u4ee5\u95ee\u9898\u4e0d\u5927\u3002 How larger page table? entry size \u6307\u7684\u662f\u9875\u8868\u91cc\u6bcf\u6761\u7684\u5927\u5c0f\u3002 \u9875\u8868\u8981\u80fd\u628a\u6240\u6709\u7684\u9875\u90fd\u80fd\u653e\u4e0b\u3002\uff08\u6bcf\u4e2a\u865a\u62df\u9875\u90fd\u9700\u8981\u5b58\u653e\u5bf9\u5e94\u7684\u7269\u7406\u9875\uff09 \u6211\u4eec\u9700\u8981\u51cf\u5c0f\u9875\u8868\u7684\u5927\u5c0f\u3002 disk write \u5f88\u6162\uff0c\u56e0\u6b64\u6211\u4eec\u7528 write-back \u7684\u7b56\u7565\uff0c\u9700\u8981\u6709\u4e00\u4e2a dirty bit. The dirty bit is set when a page is first written. If the dirty bit of a page is set, the page must be written back to disk before being replaced. Making Address Translation Fast--TLB \u00b6 \u5728 pgtbl \u4e0a\u627e\u4e5f\u662f\u5f88\u6162\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5f15\u5165\u4e86 TLB.(CPU \u5185) The TLB (Translation-lookaside Buffer) acts as Cache on the page table \u865a\u62df\u5730\u5740\uff0c\u5148\u5728 TLB \u627e\uff0c\u627e\u4e0d\u5230\u518d\u53bb\u5185\u5b58\u91cc\u7684\u9875\u8868\u627e\u3002\u4e00\u822c 16~512 entries. FastMATH Memory Hierarchy Possible combinations of Event \u6700\u540e\u4e09\u4e2a\u4e0d\u53ef\u80fd\u3002\u4e0d\u5728 pgtbl \u4e2d\u90a3\u80af\u5b9a\u4e5f\u4e0d\u5728 TLB \u4e2d\uff0c\u8bf4\u660e\u6570\u636e\u9875\u8fd8\u6ca1\u6709\u8fdb\u5165\u5185\u5b58\uff0c\u90a3 cache \u91cc\u9762\u80af\u5b9a\u4e5f\u4e0d\u80fd\u6709\u6570\u636e\u3002 Page faults \u00b6 When the OS creates a process, it usually creates the space on disk for all the pages of a process. OS \u542f\u52a8\u65f6\uff0c\u628a\u8981\u7528\u7684 page \u5168\u90e8\u653e\u5230\u4e00\u4e2a\u5730\u65b9(swap space) \u4fbf\u4e8e\u67e5\u627e\uff0c\u8bb0\u5f55\u9875\u5728\u786c\u76d8\u7684\u4ec0\u4e48\u4f4d\u7f6e\u3002\uff08\u6709\u7684 OS \u53ef\u80fd\u7528\u53e6\u5916\u7684\u8868\u6765\u7ef4\u62a4\u9875\u5728\u786c\u76d8\u7684\u4f4d\u7f6e\uff09 When a page fault occurs, the OS will be given control through exception mechanism. The OS will find the page in the disk by the page table. Next, the OS will bring the requested page into main memory. If all the pages in main memory are in use, the OS will use LRU strategy to choose a page to replace Protection in the virtual memory System \u00b6 \u53ea\u6709\u64cd\u4f5c\u7cfb\u7edf\u77e5\u9053\u5176\u4ed6\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002","title":"\u5185\u5b58\u5c42\u6b21\u67b6\u6784"},{"location":"CO/co5/#large-and-fast-exploiting-memory-hierarchy","text":"Abstract Memory Technologies Memory Hierarchy Introduction The basics of Cache Measuring and improving cache performance Dependable Memory Hierarchy Virtual Machines Virtual Memory A common Framework for Memory Hierarchy Using FSM to Control a simple Cache","title":"Large and Fast: Exploiting Memory Hierarchy"},{"location":"CO/co5/#memory-technologies","text":"SRAM value is stored on a pair of inverting gates very fast but takes up more space than DRAM DRAM value is stored as a charge on capacitor (must be refreshed) very small but slower than SRAM (factor of 5 to 10 \u89c1 \u8ba1\u903b\u90e8\u5206","title":"Memory Technologies"},{"location":"CO/co5/#memory-hierarchy-introduction","text":"Programs access a small proportion of their address space at any time Temporal locality Items accessed recently are likely to be accessed again soon \u5982 for \u5faa\u73af\uff0c\u8dd1\u8fc7\u4e00\u6b21\u540e\u6211\u4eec\u5927\u6982\u7387\u8fd8\u8981\u6267\u884c\u5faa\u73af\u4f53\u91cc\u7684\u4ee3\u7801 Spatial locality Items near those accessed recently are likely to be accessed soon \u5982\u6570\u7ec4\uff0c\u6211\u4eec\u8bbf\u95ee\u4e86\u8fd9\u4e2a\u5143\u7d20\u540e\u5927\u6982\u7387\u8fd8\u8981\u8bbf\u95ee\u540e\u9762\u7684\u5143\u7d20 \u5229\u7528\u5c40\u90e8\u6027\uff1a Memory hierarchy Store everything on disk Copy recently accessed (and nearby) items from disk to smaller DRAM memory Main memory Copy more recently accessed (and nearby) items from DRAM to smaller SRAM memory Cache memory attached to CPU Block (aka line ): unit of copying \u5411\u4e0a\u7ea7\u5b58\u50a8\u5668\u642c\u6570\u636e\u7684\u6700\u5c0f\u5355\u4f4d\uff08\u53ef\u80fd\u6709\u5f88\u591a\u4e2a\u5b57\uff09 Hit : If accessed data is present in upper level \u547d\u4e2d - \u4e0a\u5c42\u7684\u5b58\u50a8\u5668\u6709\u6211\u4eec\u8981\u7684\u6570\u636e\uff0c\u4e0d\u9700\u8981\u53bb\u4e0b\u5c42\u5b58\u50a8\u5668\u5bfb\u627e hit ratio: hits/accesses hit time: \u8bbf\u95ee\u4e0a\u5c42\u5b58\u50a8\u7684\u65f6\u95f4\u4ee5\u53ca\u51b3\u5b9a\u662f\u5426\u547d\u4e2d\u7684\u65f6\u95f4 Miss : If accessed data is absent \u9700\u8981\u4ece\u4e0b\u5c42\u5b58\u50a8\u5668\u4e2d\u628a\u5bf9\u5e94\u6570\u636e\u7684\u5757\u642c\u5230\u4e0a\u5c42\uff0c\u63a5\u7740\u4ece\u4e0a\u5c42\u628a\u6570\u636e\u8bfb\u8d70 miss penalty miss rate: 1 - hit ratio miss time: \u66ff\u4ee3\u4e0a\u5c42\u5b58\u50a8\u5668\u7684\u5757\u7684\u65f6\u95f4\u548c\u628a\u8fd9\u4e2a\u5757\u7ed9\u5904\u7406\u5668\u7684\u65f6\u95f4 Exploiting Memory Hierarchy \u63a5\u4e0b\u6765\u6211\u4eec\u5173\u6ce8\u4e24\u90e8\u5206\uff1a The basics of Cache: SRAM and DRAM(main memory) \u89e3\u51b3\u901f\u5ea6\u95ee\u9898 Virtual Memory: DRAM and DISK \u89e3\u51b3\u5bb9\u91cf\u95ee\u9898","title":"Memory Hierarchy Introduction"},{"location":"CO/co5/#the-basics-of-cache","text":"For each item of data at the lower level, there is exactly one location in the cache where it might be. So, lots of items at the lower level share locations in the upper level. \u591a\u4e2a\u5757\u4f1a\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u4f4d\u7f6e\u3002 How do we know if a data item is in the cache? \u5982\u4f55\u77e5\u9053\u6570\u636e\u662f\u5426\u5728 cache \u4e2d\uff1f If it is, how do we find it? \u5982\u679c\u6709\uff0c\u5982\u4f55\u627e\u5230\u6570\u636e\uff1f","title":"The basics of Cache"},{"location":"CO/co5/#direct-mapped-cache","text":"memory address is modulo the number of blocks in the cache \u53d6\u6a21\u3002 Store block address as well as the data \u6211\u4eec\u9700\u8981\u77e5\u9053 cache \u653e\u7684\u662f\u54ea\u4e2a\u5757\u3002 Actually, only need the high-order bits Called the tag Valid bit: 1 = present, 0 = not present \u6211\u4eec\u9700\u8981\u77e5\u9053 cache \u91cc\u662f\u5426\u6709\u653e\u6709\u6548\u7684\u5757\u3002 byte offset \u5730\u5740 \u5982\u679c\u4e00\u4e2a block \u662f\u4e00\u4e2a\u5b57\uff0c\u90a3\u4e48 byte offset \u5e94\u8be5\u6709 2 \u4f4d\u3002 \u6ce8\u610f CPU \u7ed9\u51fa\u7684\u5730\u5740\u90fd\u662f\u4ee5 byte \u4e3a\u6700\u5c0f\u5bfb\u5740\u5355\u5143\u7684\u3002 Example \u8fd9\u91cc\u7701\u7565\u4e86\u540e\u9762\u7684 byte offset. byte offset \u4f4d\u5bbd\u7531 block size \u51b3\u5b9a\u3002 index \u4f4d\u5bbd\u7531 cache size \u51b3\u5b9a tag \u4f4d\u5bbd\u7531\u603b\u7684\u5730\u5740\u4f4d\u5bbd\u51cf\u6389\u5176\u4ed6\u4f4d\u51b3\u5b9a Bits in Cache Mapping an Address to Multiword Cache Block","title":"Direct Mapped Cache"},{"location":"CO/co5/#handling-cache-hit-and-misses","text":"Read hits Read misses\u2014two kinds of misses data cache miss instruction cache miss Stall the CPU, fetch block from memory, deliver to cache, restart CPU read 1. Send the original PC value (current PC-4) to the memory. \u56e0\u4e3a PC \u53d6\u503c\u5b8c\u5c31\u53d8\u6210 +4 \u4e86\uff0c\u6240\u4ee5\u5f53\u524d\u6267\u884c\u7684\u5176\u5b9e\u662f PC-4 2. Instruct main memory to perform a read and wait for the memory to complete its access. 3. Write the cache entry, putting the data from memory in the data portion of the entry, writing the upper bits of the address (from the ALU) into the tag field, and turning the valid bit on. 4. Restart the instruction execution at the first step, which will refetch the instruction again, this time finding it in the cache. Write hits write-back : Cause Inconsistent \u53ea\u628a\u6570\u636e\u5199\u5230 cache \u4e2d\u3002\u4ee5\u540e\u518d\u628a block \u642c\u56de\u5230\u5185\u5b58\u3002 write-through : Ensuring Consistent \u65e2\u628a\u6570\u636e\u5199\u5230 cache \u4e2d\u53c8\u5199\u5230\u5185\u5b58\u4e2d\u3002 Slower! -- write buffer Write misses read the entire block into the cache, then write the word","title":"Handling Cache hit and Misses"},{"location":"CO/co5/#deep-concept-in-cache","text":"Q1: Where can a block be placed in the upper level? (Block placement) Q2: How is a block found if it is in the upper level? (Block identification) Q3: Which block should be replaced on a miss? (Block replacement) Q4: What happens on a write? (Write strategy)","title":"Deep concept in Cache"},{"location":"CO/co5/#block-placement","text":"Direct mapped Block can only go in one place in the cache \u5757\u53ea\u80fd\u53bb\u4e00\u4e2a\u5730\u65b9\uff0c\u901a\u5e38\u53d6\u6a21 Fully associative \u5168\u76f8\u8054 Block can go anywhere in cache. \u54ea\u91cc\u7a7a\u4e86\u53bb\u54ea\u91cc Set associative \u7ea7\u76f8\u8054 Block can go in one of a set of places in the cache. A set is a group of blocks in the cache. \u4e0a\u4e24\u79cd\u65b9\u6cd5\u7684\u7ed3\u5408\u3002\u628a\u4e00\u7ec4\u5757\u7ec4\u5408\u6210 set, \u4e00\u4e2a\u5757\u53d6\u6a21\u627e\u5230\u8fd9\u4e2a\u7ec4\u53f7\uff0c\u53ef\u4ee5\u53bb\u7ec4\u91cc\u7684\u4efb\u610f\u4e00\u4e2a\u5757\u3002 Direct mapped \u76f8\u5f53\u4e8e 1-way set associative, Fully associative \u76f8\u5f53\u4e8e m-way set-associative(m blocks) Example","title":"Block Placement"},{"location":"CO/co5/#block-identification","text":"Tag \u76f4\u63a5\u6620\u5c04\u53ea\u9700\u8981\u6bd4\u8f83\u4e00\u4e2a\u5757\u7684 tag, \u7ea7\u76f8\u8054\u9700\u8981\u6bd4\u8f83 set \u91cc\u6240\u6709\u5757\u7684 tag. Valid bit The Format of the Physical Address The Index field selects \u5168\u76f8\u8054\u6ca1\u6709 index. The set, in case of a set-associative cache \u7ea7\u76f8\u8054 \\(\\log_2(sets)\\) The block, in case of a direct-mapped cache \u76f4\u63a5\u6620\u5c04 \\(\\log_2(blocks)\\) The Byte Offset field selects \u7531\u4e00\u4e2a\u5757\u5185 byte \u7684\u6570\u76ee\u51b3\u5b9a. \\(\\log_2(size of block)\\) The Tag is used to find the matching block within a set or in the cache Direct-mapped Cache Example (1-word Blocks) Fully-Associative Cache example (1-word Blocks) 2-Way Set-Associative Cache \u6ce8\u610f\u8fd9\u91cc\u5e94\u8be5\u662f\u5bf9 Set0 \u91cc\u9762\u7684 tag \u6bd4\u8f83\u3002","title":"Block Identification"},{"location":"CO/co5/#block-replacement","text":"In a direct-mapped cache, there is only one block that can be replaced. In set-associative and fully-associative caches, there are N blocks (where N is the degree of associativity). Random replacement - randomly pick any block Easy to implement in hardware, just requires a random number generator Spreads allocation uniformly across cache May evict a block that is about to be accessed Least-recently used (LRU) - pick the block in the set which was least recently accessed Assumed more recently accessed blocks more likely to be referenced again This requires extra bits in the cache to keep track of accesses. \u9700\u8981\u989d\u5916\u7684\u4f4d\u6570\uff01 First in,first out(FIFO) - Choose a block from the set which was first came into the cache","title":"Block Replacement"},{"location":"CO/co5/#write-strategy","text":"If the data is written to memory, the cache is called a write through cache Can always discard cached data - most up-to-date data is in memory \u597d\u5904\u662f\u53ef\u4ee5\u968f\u65f6\u628a cache \u7684\u5185\u5bb9\u4e22\u6389\u3002 Cache control bit: only a valid bit memory (or other processors) always have latest data If the data is NOT written to memory, the cache is called a write-back cache Can\u2019t just discard cached data - may have to write it back to memory Cache control bits: both valid and dirty bits much lower bandwidth, since data often overwritten multiple times \u5199\u56de\u9700\u8981\u65f6\u95f4\uff0c\u6211\u4eec\u9700\u8981 write stall. Write stall -- When the CPU must wait for writes to complete during write through. \u6211\u4eec\u5f80\u5f80\u4f7f\u7528 write buffer. A small cache that can hold a few values waiting to go to main memory. It does not entirely eliminate stalls since it is possible for the buffer to fill if the burst is larger than the buffer. buffer \u53ef\u80fd\u88ab\u586b\u6ee1\uff0c\u4e0d\u80fd\u5b8c\u5168\u907f\u514d write stall. \u5b58\u5728\u95ee\u9898\uff1a\u5f53\u6211\u5982\u679c\u8981\u8bfb\u7684\u65f6\u5019\uff0c\u6570\u636e\u8fd8\u5728 buffer \u91cc\u6ca1\u6709\u88ab\u5199\u5165\u5185\u5b58\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u5728 buffer \u91cc\u9762\u6bd4\u8f83\uff0c\u5982\u679c\u6ca1\u6709\u518d\u5728\u5185\u5b58\u91cc\u627e\u3002 Write misses Write allocate The block is loaded into the cache on a miss before anything else occurs. \u5e38\u4e0e write back \u642d\u914d Write around (no write allocate) \u5e38\u4e0e write through \u642d\u914d The block is only written to main memory It is not stored in the cache. Larger blocks exploit spatial locality","title":"Write Strategy"},{"location":"CO/co5/#designing-the-memory-system-to-support-cache","text":"\u4e3a\u4e86\u63d0\u9ad8 cache \u7684\u6027\u80fd\uff0c\u6211\u4eec\u6709\u4e0d\u540c\u7684 memory \u7ec4\u7ec7\u67b6\u6784 Performance basic memory organization Performance in Wider Main Memory \u4e00\u6b21\u53ef\u4ee5\u8bfb\u51fa\u4e24\u4e2a word. \u4f46\u8fd9\u65f6\u5185\u5b58\u592a\u5927\u4e86\uff0c\u5f00\u9500\u5927\u3002 * Performance in Four-way interleaved memory \u5185\u5b58\u5206\u4e3a\u591a\u4e2a banks, \u5e76\u884c\u8bbf\u95ee\u3002","title":"Designing the Memory system to Support Cache"},{"location":"CO/co5/#measuring-and-improving-cache-performance","text":"How to measure cache performance? How to improve performance? Reducing cache misses by more flexible placement of blocks Reducing the miss penalty using multilevel caches Average Memory Assess time = hit time + miss time = hit rate \\(\\times\\) Cache time + miss rate \\(\\times\\) memory time","title":"Measuring and improving cache performance"},{"location":"CO/co5/#measuring-cache-performance","text":"We use CPU time to measure cache performance. $ CPU Time = CPU execution clock cycles + Memory-stall clock cycles \\times Clock cycle time $ \u8fd9\u91cc CPU \u7684\u6267\u884c\u65f6\u95f4\u5728\u8bbe\u8ba1\u6d41\u6c34\u7ebf\u7684\u65f6\u5019\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u6211\u4eec\u65e0\u9700\u8003\u8651\u3002 \\[ \\begin{align*} Memory-stall\\ clock\\ cycles & = instructions \\times miss\\ ratio \\times miss \\ penalty \\\\ & = Read-stall\\ cycles + Write-stall\\ cycles \\end{align*} \\] For Read-stall \\(Read-stall\\ cycles = \\dfrac{Read}{Program}\\times Read\\ miss\\ rate \\times Read\\ miss\\ penalty\\) \u5305\u62ec\u53d6\u6307\u548c\u6570\u636e\u52a0\u8f7d\u3002 For a write-through plus write buffer scheme \\(Write-stall\\ cycles = \\left(\\dfrac{Write}{Program} \\times Write\\ miss\\ rate \\times Write\\ miss\\ penalty\\right)+Write\\ buffer\\ stalls\\) If the write buffer stalls are small, we can safely ignore them. \u4e00\u822c\u6765\u8bf4 buffer \u4e0d\u4f1a\u6ea2\u51fa\u3002 If the cache block size is one word, the write miss penalty is 0. \u5927\u5c0f\u662f\u4e00\u4e2a word, \u66ff\u6362\u51fa\u53bb\u5c31\u76f4\u63a5\u5199\u4e86\u3002 In most write-through cache organizations, the read and write miss penalties are the same.(\u4e3a\u4e86\u7b80\u4fbf\uff0c\u6211\u4eec\u8fd9\u91cc\u8fd9\u4e48\u5047\u8bbe) If we neglect the write buffer stalls, we get the following equation: \\[ \\begin{align*} Memory-stall\\ clock\\ cycles & =\\dfrac{Memory\\ accesses}{Program}\\times Miss\\ rate\\times Miss\\ penalty\\\\ & =\\dfrac{Instructions}{Program}\\times \\dfrac{Misses}{Instructions}\\times Miss\\ penalty \\end{align*} \\] Example \u5185\u5b58\u5360\u4e86\u6027\u80fd\u74f6\u9888\u3002 \u5047\u8bbe\u6211\u4eec\u628a\u65f6\u949f\u9891\u7387\u63d0\u9ad8\u4e24\u500d\u3002\u8fd9\u6837 penalty \u9700\u8981\u7684\u65f6\u949f\u5468\u671f\u7ffb\u500d\u3002 \u6b64\u65f6 CPU \u6027\u80fd\u5b9e\u9645\u53ea\u63d0\u5347 1.23 \u500d\u3002","title":"Measuring cache performance"},{"location":"CO/co5/#improving","text":"\u63d0\u9ad8 cache \u547d\u4e2d\u7387\uff1b\u51cf\u5c0f penalty.","title":"Improving"},{"location":"CO/co5/#reducing-cache-misses-by-more-flexible-placement-of-blocks","text":"\u5982\u679c\u6211\u4eec\u6b63\u597d\u4ee5\u6a21\u957f\u4e3a\u6b65\u8ddd\u8bbf\u95ee\uff0c\u5c31\u4f1a\u4e00\u76f4 miss. \u4f46\u5176\u5b9e\u6b64\u65f6 cache \u4e2d\u8fd8\u6709\u5f88\u591a\u7a7a\u4f4d\u3002 The disadvantage of a direct-mapped cache Miss rate versus set-associative \u6ce8\u610f block addr \u662f\u5ffd\u7565\u4e86\u5730\u4f4d\u7684 byte offset \u7684\u3002 Size of tags versus set associativity","title":"Reducing cache misses by more flexible placement of blocks"},{"location":"CO/co5/#decreasing-miss-penalty-with-multilevel-caches","text":"Add a second level cache: often primary cache is on the same chip as the processor use SRAMs to add another cache above primary memory (DRAM) miss penalty goes down if data is in 2 nd level cache Example Using multilevel caches: try and optimize the hit time on the 1 st level cache try and optimize the miss rate on the 2 nd level cache","title":"Decreasing miss penalty with multilevel caches"},{"location":"CO/co5/#virtual-memory","text":"Main Memory act as a \u201cCache\u201d for the secondary storage. \u628a\u4e3b\u5b58\u5f53\u4f5c\u78c1\u76d8\u7684\u7f13\u5b58\u3002 Efficient and safe sharing of memory among multiple programs. \u4e0d\u540c\u7a0b\u5e8f\u6709\u81ea\u5df1\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6211\u4eec\u5e0c\u671b\u53ea\u8003\u8651\u81ea\u5df1\u7684\u7a7a\u95f4\uff0c\u4e0d\u5728\u4e4e\u5176\u4ed6\u7a0b\u5e8f\u653e\u5728\u54ea\u91cc\u3002\u8ba9\u8fdb\u7a0b\u8ba4\u4e3a\u662f\u81ea\u5df1\u72ec\u6709\u8fd9\u5757\u5730\u5740\u7a7a\u95f4\u3002 Remove the programming burdens of a small, limited amount of main memory. Translation of a program\u2019s address space to physical address. \u865a\u62df\u5185\u5b58\u7684\u4f5c\u7528\u5c31\u662f\u7ffb\u8bd1\u3002\uff08\u5185\u5b58\u662f\u788e\u7247\u5316\u7684\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u7a0b\u5e8f\u8ba4\u4e3a\u5730\u5740\u662f\u8fde\u7eed\u7684\uff09 Advantages: illusion of having more physical memory program relocation protection","title":"Virtual Memory"},{"location":"CO/co5/#pages-virtual-memory-blocks","text":"page \u662f\u6620\u5c04\u7684\u6700\u5c0f\u5355\u4f4d\u3002 \u865a\u62df\u9875\u7684\u6570\u91cf\u6bd4\u7269\u7406\u9875\u591a\uff08\u73b0\u5728\u4e0d\u4e00\u5b9a\uff09\u3002 Page faults : the data is not in memory, retrieve it from disk huge miss penalty, thus pages should be fairly large e.g. 4KB reducing page faults is important \u8981\u51cf\u5c11 miss can handle the faults in software instead of hardware \u7f3a\u9875\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u5904\u7406\u7684\uff0c\u800c\u4e0d\u662f\u786c\u4ef6(cache \u662f\u786c\u4ef6\u505a\u7684) using write-through is too expensive so we use *write back * \u786c\u76d8\u64cd\u4f5c\u592a\u6162\u4e86\uff0c\u6211\u4eec\u53ea\u5728\u88ab\u8e22\u51fa\u7684\u65f6\u5019\u5199\u56de\u3002\u56e0\u6b64\u7a81\u7136\u65ad\u7535\u7684\u65f6\u5019\u6570\u636e\u4f1a\u4e22\u5931\u3002","title":"Pages: virtual memory blocks"},{"location":"CO/co5/#page-tables","text":"pgtbl \u672c\u8eab\u5b58\u5728 memory \u91cc\uff0c\u8bb0\u5f55\u5730\u5740\u7684\u6620\u5c04\u5173\u7cfb\u3002\uff08\u7d22\u5f15\u662f\u865a\u62df\u5730\u5740\u7684\u9ad8\u4f4d\uff0c\u627e\u5230\u8868\u4e2d\u5bf9\u5e94\u9879\uff0c\u5c31\u662f\u7269\u7406\u5730\u5740\uff09 \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684 Page table , Program counter and the page table register . \u8fdb\u7a0b\u4e4b\u95f4\u5207\u6362\uff0c\u5207\u6362\u9875\u8868\u5c31\u53ef\u4ee5\u4e86\u3002 Virtual memory systems use fully associative mapping method. \u4e3a\u4e86\u63d0\u9ad8\u547d\u4e2d\u7387\uff0c\u6211\u4eec\u91c7\u7528\u5168\u76f8\u8054\u7684\u65b9\u5f0f\u3002\u8fd9\u5bfc\u81f4\u66ff\u6362\u7b56\u7565\uff08\u6bd4\u5982 LRU\uff09\u5f88\u590d\u6742\uff0c\u4f46\u56e0\u4e3a\u662f OS \u7f16\u5199\uff0c\u6240\u4ee5\u95ee\u9898\u4e0d\u5927\u3002 How larger page table? entry size \u6307\u7684\u662f\u9875\u8868\u91cc\u6bcf\u6761\u7684\u5927\u5c0f\u3002 \u9875\u8868\u8981\u80fd\u628a\u6240\u6709\u7684\u9875\u90fd\u80fd\u653e\u4e0b\u3002\uff08\u6bcf\u4e2a\u865a\u62df\u9875\u90fd\u9700\u8981\u5b58\u653e\u5bf9\u5e94\u7684\u7269\u7406\u9875\uff09 \u6211\u4eec\u9700\u8981\u51cf\u5c0f\u9875\u8868\u7684\u5927\u5c0f\u3002 disk write \u5f88\u6162\uff0c\u56e0\u6b64\u6211\u4eec\u7528 write-back \u7684\u7b56\u7565\uff0c\u9700\u8981\u6709\u4e00\u4e2a dirty bit. The dirty bit is set when a page is first written. If the dirty bit of a page is set, the page must be written back to disk before being replaced.","title":"Page Tables"},{"location":"CO/co5/#making-address-translation-fast-tlb","text":"\u5728 pgtbl \u4e0a\u627e\u4e5f\u662f\u5f88\u6162\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5f15\u5165\u4e86 TLB.(CPU \u5185) The TLB (Translation-lookaside Buffer) acts as Cache on the page table \u865a\u62df\u5730\u5740\uff0c\u5148\u5728 TLB \u627e\uff0c\u627e\u4e0d\u5230\u518d\u53bb\u5185\u5b58\u91cc\u7684\u9875\u8868\u627e\u3002\u4e00\u822c 16~512 entries. FastMATH Memory Hierarchy Possible combinations of Event \u6700\u540e\u4e09\u4e2a\u4e0d\u53ef\u80fd\u3002\u4e0d\u5728 pgtbl \u4e2d\u90a3\u80af\u5b9a\u4e5f\u4e0d\u5728 TLB \u4e2d\uff0c\u8bf4\u660e\u6570\u636e\u9875\u8fd8\u6ca1\u6709\u8fdb\u5165\u5185\u5b58\uff0c\u90a3 cache \u91cc\u9762\u80af\u5b9a\u4e5f\u4e0d\u80fd\u6709\u6570\u636e\u3002","title":"Making Address Translation Fast--TLB"},{"location":"CO/co5/#page-faults","text":"When the OS creates a process, it usually creates the space on disk for all the pages of a process. OS \u542f\u52a8\u65f6\uff0c\u628a\u8981\u7528\u7684 page \u5168\u90e8\u653e\u5230\u4e00\u4e2a\u5730\u65b9(swap space) \u4fbf\u4e8e\u67e5\u627e\uff0c\u8bb0\u5f55\u9875\u5728\u786c\u76d8\u7684\u4ec0\u4e48\u4f4d\u7f6e\u3002\uff08\u6709\u7684 OS \u53ef\u80fd\u7528\u53e6\u5916\u7684\u8868\u6765\u7ef4\u62a4\u9875\u5728\u786c\u76d8\u7684\u4f4d\u7f6e\uff09 When a page fault occurs, the OS will be given control through exception mechanism. The OS will find the page in the disk by the page table. Next, the OS will bring the requested page into main memory. If all the pages in main memory are in use, the OS will use LRU strategy to choose a page to replace","title":"Page faults"},{"location":"CO/co5/#protection-in-the-virtual-memory-system","text":"\u53ea\u6709\u64cd\u4f5c\u7cfb\u7edf\u77e5\u9053\u5176\u4ed6\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002","title":"Protection in the virtual memory System"},{"location":"CO/co6/","text":"Storage, Networks and Other Peripherals \u00b6 Abstract Introduction Disk Storage and Dependability Networks (Skim) Buses and Other Connections between Processors Memory, and I/O Devices Interfacing I/O Devices to the Memory, Processor, and Operating System I/O Performance Measures: Examples from Disk and File Systems Designing an I/O system Real Stuff: A Typical Desktop I/O System Introduction \u00b6 \u9664\u4e86 CPU \u7684\u8bbe\u5907\u6211\u4eec\u90fd\u8ba4\u4e3a\u662f I/O. Assessing I/O system performance is very difficult. \u4e0d\u540c\u7684\u573a\u666f\u6709\u4e0d\u540c\u7684\u8bc4\u4f30\u3002 Performance of I/O system depends on: connection between devices and the system the memory hierarchy the operating system CPU \u548c I/O \u7531\u603b\u7ebf\u8fde\u63a5. I/O \u5f80\u5f80\u901a\u8fc7\u4e2d\u65ad\u7684\u65b9\u5f0f\u901a\u77e5 CPU \u6709\u4e8b\u4ef6\u5904\u7406\u3002 \u4e0d\u540c\u7684\u8bbe\u5907\u6709\u4e0d\u540c\u7684\u9a71\u52a8(I/O controller) Three characters of IO Behavior Input (read once), output (write only, cannot read) ,or storage (can be reread and usually rewritten) \u8f93\u5165/\u8f93\u51fa/\u5b58\u50a8 Partner Either a human or a machine is at the other end of the I/O device, either feeding data on input or reading data on output. \u548c\u8c01\u5bf9\u63a5\uff1f\u4eba/\u673a\u5668 Data rate The peak rate at which data can be transferred between the I/O device and the main memory or processor. \u6570\u636e\u4f20\u8f93\u901f\u7387 I/O performance depends on the application. Throughput \u5355\u4f4d\u65f6\u95f4\u4f20\u8f93\u7684\u6570\u636e\u91cf\uff1b\u5355\u4f4d\u65f6\u95f4 I/O \u7684\u64cd\u4f5c\u6570\u3002 Response time e.g. , workstation and PC both throughput and response time e.g. , ATM \u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u5173\u5fc3\u4e0d\u540c\u7684\u65b9\u9762\u3002 Amdahl\u2019s law \u00b6 Sequential part can limit speedup Example \u60f3\u7528 100 \u4e2a CPU \u5b8c\u6210 90 \u500d\u7684\u52a0\u901f\u3002\u8fd9\u8981\u6c42\u4e0d\u80fd\u88ab\u5e76\u884c\u6267\u884c\u7684\u90e8\u5206\u6700\u591a\u5360 0.1%. Remind us that ignoring I/O is dangerous. Example Disk Storage and Dependability \u00b6 Two major types of magnetic disks floppy disks \u8f6f\u76d8\uff08\u5185\u5b58\uff09 hard disks larger higher density higher data rate more than one platter The organization of hard disk \u00b6 platters: disk consists of a collection of platters, each of which has two recordable disk surfaces \u76d8 tracks: each disk surface is divided into concentric circles \u76d8\u4e0a\u6709\u5f88\u591a\u4e2a\u8f68\u9053 sectors: each track is in turn divided into sectors, which is the smallest unit that can be read or written \u6bcf\u6761\u8f68\u9053\u88ab\u5206\u4e3a\u82e5\u5e72\u4e2a\u6247\u533a To access data of disk \u00b6 Seek : position read/write head over the proper track \u6570\u636e\u4e0d\u4e00\u5b9a\u521a\u597d\u5728\u5708\u4e0a\uff0c\u9700\u8981\u627e\u5230\u6570\u636e\u5bf9\u5e94\u7684\u5708\u3002 Rotational latency : wait for desired sector \u627e\u5230\u5708\u540e\uff0c\u7b49\u5f85\u65cb\u8f6c\u5230\u6570\u636e\u8d77\u70b9\u3002 Example Transfer : time to transfer a sector (1 KB/sector) function of rotation speed \u628a\u786c\u76d8\u6570\u636e\u642c\u5230\u5185\u5b58\u3002 Disk Read Time Flash Storage \u00b6 Nonvolatile semiconductor storage 100\u00d7 \u2013 1000\u00d7 faster than disk Smaller, lower power, more robust But more $/GB (between disk and DRAM) Flash Types NOR flash : bit cell like a NOR gate Random read/write access \u53ef\u4ee5\u968f\u610f\u8bfb\u5199 Used for instruction memory in embedded systems \u56e0\u6b64\u5728\u5d4c\u5165\u5f0f\u4e2d\u4f5c\u4e3a\u6307\u4ee4\u5b58\u50a8 NAND flash : bit cell like a NAND gate Denser (bits/area), but block-at-a-time access \u5bc6\u5ea6\u53ef\u4ee5\u66f4\u9ad8\uff0c\u4f46\u662f\u8bfb\u5199\u8981\u4ee5 block \u4e3a\u5355\u4f4d\u3002 Cheaper per GB Used for USB keys, media storage Flash bits wears out after 100000\u2019s of accesses. \u56e0\u6b64\u4e0d\u9002\u5408\u505a RAM/\u786c\u76d8\u7684\u66ff\u4ee3\u3002 \u5f53\u5df2\u7ecf\u88ab\u78e8\u635f\u65f6\uff0c\u5c31\u628a\u672c\u6765\u7684\u6570\u636e\u6620\u5c04\u5230\u5176\u4ed6\u5185\u5b58\u3002 Disk Performance Issues \u00b6 \u4e00\u822c\u5f97\u5230\u7684\u662f average seek time. Dependability \u00b6 \u8861\u91cf\u786c\u76d8\u7684\u6307\u6807\u5c31\u662f\u53ef\u9760\u6027 Dependability(Reliability). Computer system dependability is the quality of delivered service such that reliance can justifiably be placed on this service. \u8fde\u7eed\u63d0\u4f9b\u670d\u52a1\u7684\u65f6\u95f4\u3002 MTTF mean time to failure \u5e73\u5747\u65e0\u6545\u969c\u65f6\u95f4 MTTR mean time to repair \u5e73\u5747\u4fee\u590d\u65f6\u95f4 MTBF (Mean Time Between Failures) \u5e73\u5747\u6545\u969c\u95f4\u9694\u65f6\u95f4 = MTTF+ MTTR \u56e0\u6b64\u53ef\u7528\u7684\u65f6\u95f4\u5c31\u662f \\(\\dfrac{MTTF}{MTTF+MTTR}\\) improve MTTF Fault avoidance preventing fault occurrence by construction \u5728\u786c\u76d8\u5bff\u547d\u5230\u8fbe\u524d\u66ff\u6362\u786c\u76d8 Fault tolerance using redundancy to allow the service to comply with the service specification despite faults occurring, which applies primarily to hardware faults \u591a\u4e2a\u5730\u65b9\u5907\u4efd Fault forecasting predicting the presence and creation of faults, which applies to hardware and software faults \u9884\u89c1\u6545\u969c\uff0c\u91c7\u53d6\u63aa\u65bd Redundant Arrays of (Inexpensive) Disks \u00b6 \u4e0d\u540c\u8bbe\u5907\u5bf9\u786c\u76d8\u7684\u9700\u6c42\u91cf\u4e0d\u540c\u3002 \u80fd\u4e0d\u80fd\u7528\u5c0f\u786c\u76d8\u7ec4\u5408\u6210\u5927\u786c\u76d8\uff1f \u597d\u5904\u662f\u53ef\u4ee5\u6709\u591a\u4e2a\u8bfb\u5199\u53e3\uff0c\u540c\u65f6\u8bbf\u95ee\u3002\u574f\u5904\u662f\u574f\u6389\u7684\u6982\u7387\u66f4\u5927\u4e86\u3002 Hot spares support reconstruction in parallel with access: very high media availability can be achieved. \u70ed\u5907\u4efd\u53ef\u4ee5\u652f\u6301\u6570\u636e\u91cd\u5efa\u3002 Files are \"striped\" across multiple disks Redundancy yields high data availability Disks will still fail Contents reconstructed from data redundantly stored in the array \u6570\u636e\u53ef\u4ee5\u4ece\u5197\u4f59\u7684\u7528\u4e8e\u5907\u4efd\u7684\u786c\u76d8\u91cc\u6062\u590d\uff0c\u4ee3\u4ef7\u662f\u5bb9\u91cf\u4f1a\u6709\u635f\u5931\u3002 RAID RAID 0: No Redundancy \u00b6 Data is striped across a disk array but there is no redundancy to tolerate disk failure. \u6570\u636e\u88ab\u653e\u5728\u591a\u4e2a\u76d8\u91cc\u63d0\u9ad8\u5e76\u884c\uff0c\u901f\u5ea6\u53ef\u4ee5\u63d0\u9ad8\uff08\u56e0\u4e3a\u80fd\u540c\u65f6\u8bbf\u95ee\uff09 RAID 0 something of a misnomer as there is no Redundancy RAID 1: Disk Mirroring/Shadowing \u00b6 Each disk is fully duplicated onto its \u201cmirror\u201d \u6bcf\u4e00\u4e2a\u76d8\u7684\u5185\u5bb9\u90fd\u88ab\u590d\u5236\u653e\u5230\u53e6\u4e00\u4e2a\u76d8\u91cc\u3002 Bandwidth sacrifice on write \u5199\u7684\u65f6\u5019\u9700\u8981\u540c\u65f6\u5199\u4e24\u4e2a\u76d8\uff0c\u8bfb\u53ef\u80fd\u88ab\u4f18\u5316\u3002 Most expensive solution: 100% capacity overhead RAID 3: Bit-Interleaved Parity Disk \u00b6 P contains sum of other disks per stripe mod 2 (\u201cparity\u201d) \u5982\u7b2c 1\u30012\u30013 \u4e2a\u76d8\u7684\u7b2c\u4e00\u4e2a bit \u505a\u5947\u5076\u6821\u9a8c\u653e\u5728\u7b2c 4 \u4e2a\u76d8\u3002 \u5f53\u5176\u4e2d\u4e00\u4e2a\u76d8\u6302\u6389\u7684\u65f6\u5019\uff0c\u8bfb\u51fa\u5176\u4ed6\u76d8\u7684\u6570\u636e\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u539f\u6765\u76d8\u7684\u6570\u636e\u3002 \u54ea\u4e2a\u76d8\u574f\u4e86\uff1f\uff08\u4e0d\u77e5\u9053x RAID 4: Block-Interleaved Parity \u00b6 RAID 3 relies on parity disk to discover errors on Read. \u6211\u4eec\u5e0c\u671b\u81ea\u5df1\u7684\u76d8\u6709\u81ea\u5df1\u7684 error detection, \u4e0d\u9700\u8981\u6821\u9a8c\u76d8\u6765\u68c0\u9a8c\u81ea\u5df1\u5bf9\u4e0d\u5bf9\uff0c\u76d8\u4e0e\u76d8\u4e4b\u95f4\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\u3002 \u628a\u81ea\u5df1\u6bcf\u4e2a block \u505a\u4e86\u6821\u9a8c\u4f4d\uff0c\u653e\u5230\u5907\u4efd\u76d8\u4e2d\u3002 \u5f53\u6211\u4eec\u540c\u65f6\u8bfb D0, D5 \u65f6 Paritybit \u4f1a\u88ab\u8bfb\u4e24\u6b21\u3002 Small Write \u589e\u52a0\u5f00\u9500\u3002 RAID 5: High I/O Rate Interleaved Parity \u00b6 P \u76d8\u662f\u4e0d\u5b9a\u7684\u3002 RAID 6: P+Q Redundancy \u00b6 \u6709 P, Q \u4e24\u4f4d\uff0c\u53ef\u4ee5\u6062\u590d\u51fa\u4e24\u4e2a\u76d8\u7684\u5185\u5bb9\u3002 RAID Techniques Buses and Other Connections between Processors Memory, and I/O Devices \u00b6 Bus : Shared communication link (one or more wires) \u4e00\u6761\u9ad8\u901f\u516c\u8def\u548c\u5404\u6761\u5c0f\u9053\uff0c\u7ed9\u4e0d\u540c\u8f66\u8f86\u5171\u4eab\u901a\u884c\u3002 Difficult Design: may be bottleneck \u5f88\u5bb9\u6613\u6210\u4e3a\u6027\u80fd\u7684 bottleneck(\u74f6\u9888). length of the bus number of devices tradeoffs (fast bus accesses and high bandwidth) support for many different devices cost Bus Basics \u00b6 \u603b\u7ebf\u4e0d\u662f\u4e00\u6761\u7ebf\uff0c\u800c\u662f\u591a\u6761\u7ebf\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u628a\u5404\u79cd\u8def\u3001\u8bbe\u5907\u8fde\u63a5\u8d77\u6765\u3002 A bus contains two types of lines Control lines: signal requests and acknowledgments, and to indicate what types of information is on the data lines. \u6bd4\u5982\u7ed9\u5916\u8bbe\u53d1\u9001\u8bfb\u53d6\u547d\u4ee4\uff0c\u5916\u8bbe\u53d1\u9001\u53ef\u4ee5\u8bfb\u7684\u4fe1\u53f7\u3002 Data lines: carry information ( e.g. , data, addresses, and complex commands) between the source and the destination. Bus transaction sending the address and receiving or sending the data \u603b\u7ebf\u4f20\u8f93\u7684\u4e24\u90e8\u5206\uff0c\u9001\u5730\u5740\uff0c\u9001\u6570\u636e\u3002 Types of buses processor-memory : short high speed, custom design) backplane : high speed, often standardized, e.g. , PCI) I/O : lengthy, different devices, standardized, e.g. , SCSI) \u4ee5\u524d\u7684 CPU \u53ea\u6709\u4e00\u6761\u603b\u7ebf\uff0c\u5982\u679c IO \u8bbe\u5907\u548c Memory \u63a5\u5728\u4e00\u8d77\uff0c\u4ed6\u4eec\u7684\u901f\u5ea6\u9700\u8981\u9075\u5b88\u4e00\u6837\u7684\u534f\u8bae\u3002 IO \u8bbe\u5907\u662f\u5f88\u6162\u7684\uff0c\u4f1a\u5360\u7528 Bus, \u73b0\u5728\u6211\u4eec\u628a\u4efb\u52a1\u4e22\u8fc7\u53bb\u540e\u53ef\u4ee5\u7b49\u5904\u7406\u597d\u4e86\u518d\u6765\u62ff\u3002 \u4e0d\u540c IO \u8bbe\u5907\u4e4b\u95f4\u6570\u636e\u4f20\u8f93\u4e0d\u9700\u8981\u5360\u7528\u603b\u7ebf\u3002 Synchronous vs. Asynchronous \u00b6 \u540c\u6b65\u603b\u7ebf\u6216\u8005\u5f02\u6b65\u603b\u7ebf Synchronous bus : use a clock and a fixed protocol , fast and small but every device must operate at same rate and clock skew requires the bus to be short \u6240\u6709\u8bbe\u5907\u9700\u8981\u4ee5\u540c\u6837\u7684\u9891\u7387\u3002 clock skew, \u5373\u4e0a\u5347\u6cbf\u65e0\u6cd5\u5bf9\u9f50 Asynchronous bus : don\u2019t use a clock and instead use handshaking A serial of steps used to coordinate asynchronous bus transfers. Example When memory sees the ReadReq line, it reads the address from the data bus, begin the memory read operation\uff0cthen raises Ack to tell the device that the ReadReq signal has been seen. I/O device sees the Ack line high and releases the ReadReq data lines. Memory sees that ReadReq is low and drops the Ack line. When the memory has the data ready, it places the data on the data lines and raises DataRdy. The I/O device sees DataRdy, reads the data from the bus , and signals that it has the data by raising ACK. The memory sees Ack signals, drops DataRdy, and releases the data lines. Finally, the I/O device, seeing DataRdy go low, drops the ACK line, which indicates that the transmission is completed. \u8bfb\u6570\u636e\u65f6, CPU \u628a read request \u62c9\u8d77\u6765\u3002\u5185\u5b58\u770b\u5230\u540e\uff0c\u4f1a\u628a Data \u603b\u7ebf\u4e0a\u7684\u8bfb\u8d70\uff08\u5373\u5730\u5740\uff09\uff0c\u968f\u540e\u8fdb\u884c\u5185\u5b58\u8bfb\u53d6\uff0c\u540c\u65f6\u628a Ack \u4fe1\u53f7\u62c9\u8d77\u6765\uff0c\u544a\u8bc9 IO \u8bbe\u5907\u6211\u4eec\u5df2\u7ecf\u63a5\u6536\u5230 read request \u4e86. IO \u8bbe\u5907\u770b\u5230 Ack \u540e\u628a\u81ea\u5df1\u7684 read request \u653e\u4e0b\uff0c\u5185\u5b58\u770b\u5230 read request \u653e\u4e0b\u540e\uff0c\u628a Ack \u4e5f\u653e\u4e0b\u3002 \u5185\u5b58\u8bfb\u51fa\u6570\u636e\u540e\uff0c\u4f1a\u628a data ready \u62c9\u8d77\u6765\uff0c\u628a\u6570\u636e\u653e\u5728 data line \u4e0a. IO \u8bbe\u5907\u770b\u5230 data ready \u540e\u4f1a\u628a\u6570\u636e\u53d6\u8d70\uff0c\u5e76\u628a Ack \u4fe1\u53f7\u62c9\u8d77\u3002\u5185\u5b58\u770b\u5230 Ack \u4fe1\u53f7\u540e\u4f1a\u653e\u4e0b data ready \u4fe1\u53f7\uff0c\u968f\u540e IO \u8bbe\u5907\u653e\u4e0b ack \u4fe1\u53f7\u3002 Bus Arbitration \u00b6 \u603b\u7ebf\u4e0a\u6709\u5f88\u591a\u8bbe\u5907\uff0c\u591a\u4e2a\u8bbe\u5907\u8981\u8bbf\u95ee\u540c\u4e00\u4e2a\u5185\u5b58\u65f6\uff0c\u9700\u8981\u603b\u7ebf\u4ef2\u88c1\uff0c\u83b7\u5f97\u603b\u7ebf\u7684\u6240\u6709\u6743\u3002 multiple device desiring to communicate could each try to assert the control and data lines for different transfers. a bus master is needed. Bus masters initiate and control all bus requests. \u5b9e\u9645\u4e0a\u73b0\u5728 master \u7684\u8bbe\u5907\u4e5f\u6709\u591a\u4e2a\uff0c\u4e0d\u540c master \u4e4b\u95f4\u4e5f\u6709\u7ade\u4e89\uff08CPU, \u663e\u5b58\u7b49\u90fd\u662f\u4e00\u4e2a master\uff09\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u53ea\u6709\u4e00\u4e2a CPU \u662f master, \u53ef\u4ee5\u5360\u9886\u603b\u7ebf\uff0c\u5e76\u8ba9 IO \u8bbe\u5907\u6267\u884c\u64cd\u4f5c\u3002 \u80fd\u4e3b\u52a8\u53d1\u8d77\u64cd\u4f5c\uff08\u64cd\u4f5c Bus\uff09\u7684\u8bbe\u5907\u53eb\u505a Bus Master, \u4e00\u822c\u662f CPU. \u51b3\u5b9a\u54ea\u4e2a master \u80fd\u591f\u64cd\u4f5c\u603b\u7ebf\u7684\u8bbe\u5907\u53eb\u505a\u603b\u7ebf\u4ef2\u88c1\u3002 Two factors in choosing which device to grant the bus: bus priority fairness \u516c\u5e73\u6027\uff0c\u4e0d\u8ba9\u67d0\u4e2a\u8bbe\u5907\u4e00\u76f4\u5360\u7528\u603b\u7ebf\u3002 Performance analysis of Synchronous versus Asynchronous buses \u00b6 \u8bc4\u4ef7\u603b\u7ebf\u7684\u6027\u80fd - \u5e26\u5bbd bandwidth Example \u5f02\u6b65\u65f6\u949f step1 \u7ed3\u675f\u65f6\u5185\u5b58\u5df2\u7ecf\u62ff\u5230\u5730\u5740\u4e86\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d step234 \u53ef\u4ee5\u540c\u65f6\u505a\u3002 Increasing data bus width Use separate address and data lines transfer multiple words \u4e00\u6b21\u4f20\u8f93\u591a\u4e2a\u6570\u636e Increasing the Bus Bandwidth burst \u4f20\u8f93\uff0c\u5730\u5740\u53d1\u4e00\u6b21\uff0c\u8bfb\u591a\u4e2a\u6570\u636e\u3002\u5982\u8bfb\u5730\u5740 4, \u6211\u4eec\u53ef\u4ee5\u8fd4\u56de 4 5 6 7 \u7684\u6570\u636e\u3002 the 4-word block transfers the 16-word block transfers Interfacing I/O Devices to the Memory, Processor, and Operating System \u00b6 IO \u8bbe\u5907\uff08\u9700\u8981\u9a71\u52a8\uff09\u600e\u4e48\u548c OS \u901a\u4fe1 The OS must be able to give commands to the I/O devices. OS \u8981\u80fd\u7ed9 IO \u8bbe\u5907\u53d1\u51fa\u547d\u4ee4\uff0c\u6bd4\u5982\u542f\u52a8\u3001\u5173\u673a\u3002 The device must be able to notify the OS, when I/O device completed an operation or has encountered an error. IO \u6709\u65b9\u5f0f\uff0c\u5728\u8bbe\u5907\u5b8c\u6210\u64cd\u4f5c\u6216\u8005\u9047\u5230\u9519\u8bef\u65f6\uff0c\u8981\u80fd\u901a\u77e5 OS. \u6bd4\u5982\u6253\u5370\u7ed3\u675f\uff0c\u53ef\u4ee5\u7ee7\u7eed\u4f20\u8f93\u6570\u636e\u4e86\u3002 Data must be transferred between memory and an I/O device. \u6570\u636e\u8981\u80fd\u5728\u5185\u5b58\u548c IO \u8bbe\u5907\u4e4b\u95f4\u4f20\u8f93\u3002 CPU \u8981\u80fd\u8bbf\u95ee\u5230 IO \u8bbe\u5907\uff0c\u9700\u8981\u6709\u4e00\u4e2a\u5730\u5740\u3002\uff08\u6ce8\u610f\u8fd9\u4e2a\u5730\u5740\u4e0d\u80fd\u8fdb\u5165 cache, \u5426\u5219\u6211\u4eec\u5c31\u65e0\u6cd5\u83b7\u5f97 IO \u8bbe\u5907\u7684\u6700\u65b0\u72b6\u6001\u4e86\uff09 memory-mapped I/O \u628a\u5185\u5b58\u5730\u5740\u4e2d\u7684\u4e00\u90e8\u5206\u5206\u51fa\u6765\u7ed9 IO \u8bbe\u5907\u7528\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528 ld sd \u6765\u8bbf\u95ee\u3002 special I/O instructions e.g. x86 \u4e2d in al,port out port,al. RISC-V \u4e2d\u6ca1\u6709 IO \u8bbe\u5907\u9700\u8981\u6709\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u5b58\u50a8\u72b6\u6001 The Status register (a done bit, an error bit...) The Data register, The command register Communication with the Processor \u00b6 Polling: The processor periodically checks status bit to see if it is time for the next I/O operation. \u5b9a\u671f\u68c0\u67e5\u8bbe\u5907\uff0c\u4f46\u662f\u4f1a\u5360\u7528 CPU. Interrupt: When an I/O device wants to notify processor that it has completed some operation or needs attentions, it causes processor to be interrupted. \u5f53 IO \u8bbe\u5907\u5b8c\u6210\u64cd\u4f5c\u7ed9 CPU \u4e00\u4e2a\u4e2d\u65ad\uff0c\u7b49\u5f85\u5176\u54cd\u5e94\u3002\u597d\u5904\u662f CPU \u53ef\u4ee5\u4e00\u76f4\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u3002 DMA (direct memory access): the device controller transfer data directly to or from memory without involving processor. IO \u8bbe\u5907\u76f4\u63a5\u548c\u5185\u5b58\u4ea4\u4e92\uff0c\u4e0d\u9700\u8981 CPU \u53c2\u4e0e\u3002 Interrupt-Driven I/O mode \u00b6 \u5047\u8bbe IO \u662f\u4e2a\u6253\u5370\u673a\u3002\u6bcf\u6b21\u6253\u5370\u4e00\u4e2a\u5b57\u7b26\uff0c\u5c31\u4f1a\u7ed9 CPU \u53d1\u4e00\u4e2a\u4e2d\u65ad\u3002CPU \u4f1a\u53bb\u8bfb\u53d6\u6253\u5370\u673a\u7684\u72b6\u6001\uff0c\u770b\u662f\u5426\u5b8c\u6210\u3002\u5b8c\u6210\u540e CPU \u7ee7\u7eed\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u3002 DMA transfer mode \u00b6 CPU \u9700\u8981\u914d\u7f6e DMA. DMA \u4f1a\u548c IO \u8bbe\u5907\u4ea4\u4e92\uff0c\u628a\u6570\u636e\u642c\u5230\u5185\u5b58\uff0c\u4e0d\u9700\u8981 CPU \u53c2\u4e0e\u3002 A DMA transfer need three steps: The processor sets up the DMA by supplying some information, including the identity of the device, the operation, the memory address that is the source or destination of the data to be transferred, and the number of bytes to transfer. CPU \u914d\u7f6e DMA\uff0c\u5305\u62ec\u54ea\u4e2a\u8bbe\u5907\u3001\u505a\u4ec0\u4e48\u64cd\u4f5c\u3001\u5185\u5b58\u5730\u5740\u3001\u6570\u636e\u5927\u5c0f\u7b49\u3002 The DMA starts the operation on the device and arbitrates for the bus. If the request requires more than one transfer on the bus, the DMA unit generates the next memory address and initiates the next transfer. DMA \u5f00\u59cb\u64cd\u4f5c\u8bbe\u5907\uff0c\u5360\u7528\u603b\u7ebf\u3002\u5982\u679c\u9700\u8981\u591a\u6b21\u4f20\u8f93\uff0cDMA \u4f1a\u751f\u6210\u4e0b\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff0c\u5f00\u59cb\u4e0b\u4e00\u6b21\u4f20\u8f93\u3002 DMA \u4e5f\u662f\u6302\u5728\u603b\u7ebf\u4e0a\u7684 master, \u4f18\u5148\u7ea7\u6ca1\u6709 CPU \u9ad8\u3002\u56e0\u6b64\u4ed6\u4f1a\u8d81 CPU \u7a7a\u95f2\u7684\u65f6\u5019\u642c\u8fd0\u6570\u636e\uff0c\u53ef\u4ee5\u5145\u5206\u5229\u7528\u603b\u7ebf\u3002 Once the DMA transfer is complete, the controller interrupts the processor, which then examines whether errors occur. DMA \u5b8c\u6210\u540e\uff0c\u7ed9 CPU \u53d1\u4e2d\u65ad\uff0cCPU \u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef\u3002 Compare polling, interrupts, DMA The disadvantage of polling is that it wastes a lot of processor time. When the CPU polls the I/O device periodically, the I/O devices maybe have no request or have not get ready. polling \u7684\u574f\u5904\u662f\u6d6a\u8d39\u4e86\u5927\u91cf\u7684 CPU \u7684\u65f6\u95f4\u3002CPU \u5b9a\u671f\u8f6e\u8be2 IO \u8bbe\u5907\u53ef\u80fd\u6ca1\u6709\u8bf7\u6c42\u6216\u8005\u6ca1\u6709\u51c6\u5907\u597d\u3002 If the I/O operations is interrupt driven, the OS can work on other tasks while data is being read from or written to the device. \u5982\u679c IO \u64cd\u4f5c\u662f\u4e2d\u65ad\u9a71\u52a8\u7684\uff0cOS \u53ef\u4ee5\u5728\u6570\u636e\u4ece\u8bbe\u5907\u8bfb\u53d6\u6216\u5199\u5165\u65f6\u5904\u7406\u5176\u4ed6\u4efb\u52a1\u3002 Because DMA doesn\u2019t need the control of processor, it will not consume much of processor time. DMA \u4e0d\u9700\u8981 CPU \u63a7\u5236\uff0c\u4e0d\u4f1a\u6d88\u8017 CPU \u65f6\u95f4\u3002 \u4f46 DMA \u5176\u5b9e\u53ea\u662f\u642c\u8fd0\u6570\u636e\u65f6\u6709\u7528\uff0c\u5176\u5b9e\u548c polling interrupt \u4e0d\u5bf9\u7acb\u3002 Overhead of Polling in an I/O System Overhead of Interrupt-Driven I/O polling \u5fc5\u987b\u65f6\u65f6\u523b\u523b\u67e5\u8be2\uff0c\u4e2d\u65ad\u53ea\u9700\u8981\u5728\u771f\u6b63\u6709\u6570\u636e\u4f20\u8f93\uff08\u6bd4\u5982 5% \u7684\u65f6\u95f4\uff09\u65f6\u518d\u53bb\u5904\u7406\u3002 Overhead of I/O Using DMA I/O Performance Measures: Examples from Disk and File Systems \u00b6 CPU \u6709 benchmark, IO \u4e5f\u6709 benchmark \u6765\u8861\u91cf\u6027\u80fd\u3002 I/O rate : the number of disk access per second, as opposed to data rate Designing an I/O system \u00b6 \u6574\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf CPU+bus+I/O Find the weakest link in the I/O system, which is the component in the I/O path that will constrain the design. Both the workload and configuration limits may dictate where the weakest link is located. \u901f\u5ea6\u7531\u6700\u6162\u7684\u51b3\u5b9a\u3002 \u770b\u54ea\u4e2a\u90e8\u5206\u6700\u5f31\uff0c\u5176\u4ed6\u90e8\u5206\u4fdd\u8bc1\u53ef\u4ee5\u6ee1\u8db3\u6700\u5f31\u7684\u6761\u4ef6\u5373\u53ef\u3002 Configure this component to sustain the required bandwidth. Determine the requirements for the rest of the system and configure them to support this bandwidth. Example","title":"\u5b58\u50a8\u548c IO"},{"location":"CO/co6/#storage-networks-and-other-peripherals","text":"Abstract Introduction Disk Storage and Dependability Networks (Skim) Buses and Other Connections between Processors Memory, and I/O Devices Interfacing I/O Devices to the Memory, Processor, and Operating System I/O Performance Measures: Examples from Disk and File Systems Designing an I/O system Real Stuff: A Typical Desktop I/O System","title":"Storage, Networks and Other Peripherals"},{"location":"CO/co6/#introduction","text":"\u9664\u4e86 CPU \u7684\u8bbe\u5907\u6211\u4eec\u90fd\u8ba4\u4e3a\u662f I/O. Assessing I/O system performance is very difficult. \u4e0d\u540c\u7684\u573a\u666f\u6709\u4e0d\u540c\u7684\u8bc4\u4f30\u3002 Performance of I/O system depends on: connection between devices and the system the memory hierarchy the operating system CPU \u548c I/O \u7531\u603b\u7ebf\u8fde\u63a5. I/O \u5f80\u5f80\u901a\u8fc7\u4e2d\u65ad\u7684\u65b9\u5f0f\u901a\u77e5 CPU \u6709\u4e8b\u4ef6\u5904\u7406\u3002 \u4e0d\u540c\u7684\u8bbe\u5907\u6709\u4e0d\u540c\u7684\u9a71\u52a8(I/O controller) Three characters of IO Behavior Input (read once), output (write only, cannot read) ,or storage (can be reread and usually rewritten) \u8f93\u5165/\u8f93\u51fa/\u5b58\u50a8 Partner Either a human or a machine is at the other end of the I/O device, either feeding data on input or reading data on output. \u548c\u8c01\u5bf9\u63a5\uff1f\u4eba/\u673a\u5668 Data rate The peak rate at which data can be transferred between the I/O device and the main memory or processor. \u6570\u636e\u4f20\u8f93\u901f\u7387 I/O performance depends on the application. Throughput \u5355\u4f4d\u65f6\u95f4\u4f20\u8f93\u7684\u6570\u636e\u91cf\uff1b\u5355\u4f4d\u65f6\u95f4 I/O \u7684\u64cd\u4f5c\u6570\u3002 Response time e.g. , workstation and PC both throughput and response time e.g. , ATM \u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u5173\u5fc3\u4e0d\u540c\u7684\u65b9\u9762\u3002","title":"Introduction"},{"location":"CO/co6/#amdahls-law","text":"Sequential part can limit speedup Example \u60f3\u7528 100 \u4e2a CPU \u5b8c\u6210 90 \u500d\u7684\u52a0\u901f\u3002\u8fd9\u8981\u6c42\u4e0d\u80fd\u88ab\u5e76\u884c\u6267\u884c\u7684\u90e8\u5206\u6700\u591a\u5360 0.1%. Remind us that ignoring I/O is dangerous. Example","title":"Amdahl\u2019s law"},{"location":"CO/co6/#disk-storage-and-dependability","text":"Two major types of magnetic disks floppy disks \u8f6f\u76d8\uff08\u5185\u5b58\uff09 hard disks larger higher density higher data rate more than one platter","title":"Disk Storage and Dependability"},{"location":"CO/co6/#the-organization-of-hard-disk","text":"platters: disk consists of a collection of platters, each of which has two recordable disk surfaces \u76d8 tracks: each disk surface is divided into concentric circles \u76d8\u4e0a\u6709\u5f88\u591a\u4e2a\u8f68\u9053 sectors: each track is in turn divided into sectors, which is the smallest unit that can be read or written \u6bcf\u6761\u8f68\u9053\u88ab\u5206\u4e3a\u82e5\u5e72\u4e2a\u6247\u533a","title":"The organization of hard disk"},{"location":"CO/co6/#to-access-data-of-disk","text":"Seek : position read/write head over the proper track \u6570\u636e\u4e0d\u4e00\u5b9a\u521a\u597d\u5728\u5708\u4e0a\uff0c\u9700\u8981\u627e\u5230\u6570\u636e\u5bf9\u5e94\u7684\u5708\u3002 Rotational latency : wait for desired sector \u627e\u5230\u5708\u540e\uff0c\u7b49\u5f85\u65cb\u8f6c\u5230\u6570\u636e\u8d77\u70b9\u3002 Example Transfer : time to transfer a sector (1 KB/sector) function of rotation speed \u628a\u786c\u76d8\u6570\u636e\u642c\u5230\u5185\u5b58\u3002 Disk Read Time","title":"To access data of disk"},{"location":"CO/co6/#flash-storage","text":"Nonvolatile semiconductor storage 100\u00d7 \u2013 1000\u00d7 faster than disk Smaller, lower power, more robust But more $/GB (between disk and DRAM) Flash Types NOR flash : bit cell like a NOR gate Random read/write access \u53ef\u4ee5\u968f\u610f\u8bfb\u5199 Used for instruction memory in embedded systems \u56e0\u6b64\u5728\u5d4c\u5165\u5f0f\u4e2d\u4f5c\u4e3a\u6307\u4ee4\u5b58\u50a8 NAND flash : bit cell like a NAND gate Denser (bits/area), but block-at-a-time access \u5bc6\u5ea6\u53ef\u4ee5\u66f4\u9ad8\uff0c\u4f46\u662f\u8bfb\u5199\u8981\u4ee5 block \u4e3a\u5355\u4f4d\u3002 Cheaper per GB Used for USB keys, media storage Flash bits wears out after 100000\u2019s of accesses. \u56e0\u6b64\u4e0d\u9002\u5408\u505a RAM/\u786c\u76d8\u7684\u66ff\u4ee3\u3002 \u5f53\u5df2\u7ecf\u88ab\u78e8\u635f\u65f6\uff0c\u5c31\u628a\u672c\u6765\u7684\u6570\u636e\u6620\u5c04\u5230\u5176\u4ed6\u5185\u5b58\u3002","title":"Flash Storage"},{"location":"CO/co6/#disk-performance-issues","text":"\u4e00\u822c\u5f97\u5230\u7684\u662f average seek time.","title":"Disk Performance Issues"},{"location":"CO/co6/#dependability","text":"\u8861\u91cf\u786c\u76d8\u7684\u6307\u6807\u5c31\u662f\u53ef\u9760\u6027 Dependability(Reliability). Computer system dependability is the quality of delivered service such that reliance can justifiably be placed on this service. \u8fde\u7eed\u63d0\u4f9b\u670d\u52a1\u7684\u65f6\u95f4\u3002 MTTF mean time to failure \u5e73\u5747\u65e0\u6545\u969c\u65f6\u95f4 MTTR mean time to repair \u5e73\u5747\u4fee\u590d\u65f6\u95f4 MTBF (Mean Time Between Failures) \u5e73\u5747\u6545\u969c\u95f4\u9694\u65f6\u95f4 = MTTF+ MTTR \u56e0\u6b64\u53ef\u7528\u7684\u65f6\u95f4\u5c31\u662f \\(\\dfrac{MTTF}{MTTF+MTTR}\\) improve MTTF Fault avoidance preventing fault occurrence by construction \u5728\u786c\u76d8\u5bff\u547d\u5230\u8fbe\u524d\u66ff\u6362\u786c\u76d8 Fault tolerance using redundancy to allow the service to comply with the service specification despite faults occurring, which applies primarily to hardware faults \u591a\u4e2a\u5730\u65b9\u5907\u4efd Fault forecasting predicting the presence and creation of faults, which applies to hardware and software faults \u9884\u89c1\u6545\u969c\uff0c\u91c7\u53d6\u63aa\u65bd","title":"Dependability"},{"location":"CO/co6/#redundant-arrays-of-inexpensive-disks","text":"\u4e0d\u540c\u8bbe\u5907\u5bf9\u786c\u76d8\u7684\u9700\u6c42\u91cf\u4e0d\u540c\u3002 \u80fd\u4e0d\u80fd\u7528\u5c0f\u786c\u76d8\u7ec4\u5408\u6210\u5927\u786c\u76d8\uff1f \u597d\u5904\u662f\u53ef\u4ee5\u6709\u591a\u4e2a\u8bfb\u5199\u53e3\uff0c\u540c\u65f6\u8bbf\u95ee\u3002\u574f\u5904\u662f\u574f\u6389\u7684\u6982\u7387\u66f4\u5927\u4e86\u3002 Hot spares support reconstruction in parallel with access: very high media availability can be achieved. \u70ed\u5907\u4efd\u53ef\u4ee5\u652f\u6301\u6570\u636e\u91cd\u5efa\u3002 Files are \"striped\" across multiple disks Redundancy yields high data availability Disks will still fail Contents reconstructed from data redundantly stored in the array \u6570\u636e\u53ef\u4ee5\u4ece\u5197\u4f59\u7684\u7528\u4e8e\u5907\u4efd\u7684\u786c\u76d8\u91cc\u6062\u590d\uff0c\u4ee3\u4ef7\u662f\u5bb9\u91cf\u4f1a\u6709\u635f\u5931\u3002 RAID","title":"Redundant Arrays of (Inexpensive) Disks"},{"location":"CO/co6/#raid-0-no-redundancy","text":"Data is striped across a disk array but there is no redundancy to tolerate disk failure. \u6570\u636e\u88ab\u653e\u5728\u591a\u4e2a\u76d8\u91cc\u63d0\u9ad8\u5e76\u884c\uff0c\u901f\u5ea6\u53ef\u4ee5\u63d0\u9ad8\uff08\u56e0\u4e3a\u80fd\u540c\u65f6\u8bbf\u95ee\uff09 RAID 0 something of a misnomer as there is no Redundancy","title":"RAID 0: No Redundancy"},{"location":"CO/co6/#raid-1-disk-mirroringshadowing","text":"Each disk is fully duplicated onto its \u201cmirror\u201d \u6bcf\u4e00\u4e2a\u76d8\u7684\u5185\u5bb9\u90fd\u88ab\u590d\u5236\u653e\u5230\u53e6\u4e00\u4e2a\u76d8\u91cc\u3002 Bandwidth sacrifice on write \u5199\u7684\u65f6\u5019\u9700\u8981\u540c\u65f6\u5199\u4e24\u4e2a\u76d8\uff0c\u8bfb\u53ef\u80fd\u88ab\u4f18\u5316\u3002 Most expensive solution: 100% capacity overhead","title":"RAID 1: Disk Mirroring/Shadowing"},{"location":"CO/co6/#raid-3-bit-interleaved-parity-disk","text":"P contains sum of other disks per stripe mod 2 (\u201cparity\u201d) \u5982\u7b2c 1\u30012\u30013 \u4e2a\u76d8\u7684\u7b2c\u4e00\u4e2a bit \u505a\u5947\u5076\u6821\u9a8c\u653e\u5728\u7b2c 4 \u4e2a\u76d8\u3002 \u5f53\u5176\u4e2d\u4e00\u4e2a\u76d8\u6302\u6389\u7684\u65f6\u5019\uff0c\u8bfb\u51fa\u5176\u4ed6\u76d8\u7684\u6570\u636e\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u539f\u6765\u76d8\u7684\u6570\u636e\u3002 \u54ea\u4e2a\u76d8\u574f\u4e86\uff1f\uff08\u4e0d\u77e5\u9053x","title":"RAID 3: Bit-Interleaved Parity Disk"},{"location":"CO/co6/#raid-4-block-interleaved-parity","text":"RAID 3 relies on parity disk to discover errors on Read. \u6211\u4eec\u5e0c\u671b\u81ea\u5df1\u7684\u76d8\u6709\u81ea\u5df1\u7684 error detection, \u4e0d\u9700\u8981\u6821\u9a8c\u76d8\u6765\u68c0\u9a8c\u81ea\u5df1\u5bf9\u4e0d\u5bf9\uff0c\u76d8\u4e0e\u76d8\u4e4b\u95f4\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\u3002 \u628a\u81ea\u5df1\u6bcf\u4e2a block \u505a\u4e86\u6821\u9a8c\u4f4d\uff0c\u653e\u5230\u5907\u4efd\u76d8\u4e2d\u3002 \u5f53\u6211\u4eec\u540c\u65f6\u8bfb D0, D5 \u65f6 Paritybit \u4f1a\u88ab\u8bfb\u4e24\u6b21\u3002 Small Write \u589e\u52a0\u5f00\u9500\u3002","title":"RAID 4: Block-Interleaved Parity"},{"location":"CO/co6/#raid-5-high-io-rate-interleaved-parity","text":"P \u76d8\u662f\u4e0d\u5b9a\u7684\u3002","title":"RAID 5: High I/O Rate Interleaved Parity"},{"location":"CO/co6/#raid-6-pq-redundancy","text":"\u6709 P, Q \u4e24\u4f4d\uff0c\u53ef\u4ee5\u6062\u590d\u51fa\u4e24\u4e2a\u76d8\u7684\u5185\u5bb9\u3002 RAID Techniques","title":"RAID 6: P+Q Redundancy"},{"location":"CO/co6/#buses-and-other-connections-between-processors-memory-and-io-devices","text":"Bus : Shared communication link (one or more wires) \u4e00\u6761\u9ad8\u901f\u516c\u8def\u548c\u5404\u6761\u5c0f\u9053\uff0c\u7ed9\u4e0d\u540c\u8f66\u8f86\u5171\u4eab\u901a\u884c\u3002 Difficult Design: may be bottleneck \u5f88\u5bb9\u6613\u6210\u4e3a\u6027\u80fd\u7684 bottleneck(\u74f6\u9888). length of the bus number of devices tradeoffs (fast bus accesses and high bandwidth) support for many different devices cost","title":"Buses and Other Connections between Processors Memory, and I/O Devices"},{"location":"CO/co6/#bus-basics","text":"\u603b\u7ebf\u4e0d\u662f\u4e00\u6761\u7ebf\uff0c\u800c\u662f\u591a\u6761\u7ebf\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u628a\u5404\u79cd\u8def\u3001\u8bbe\u5907\u8fde\u63a5\u8d77\u6765\u3002 A bus contains two types of lines Control lines: signal requests and acknowledgments, and to indicate what types of information is on the data lines. \u6bd4\u5982\u7ed9\u5916\u8bbe\u53d1\u9001\u8bfb\u53d6\u547d\u4ee4\uff0c\u5916\u8bbe\u53d1\u9001\u53ef\u4ee5\u8bfb\u7684\u4fe1\u53f7\u3002 Data lines: carry information ( e.g. , data, addresses, and complex commands) between the source and the destination. Bus transaction sending the address and receiving or sending the data \u603b\u7ebf\u4f20\u8f93\u7684\u4e24\u90e8\u5206\uff0c\u9001\u5730\u5740\uff0c\u9001\u6570\u636e\u3002 Types of buses processor-memory : short high speed, custom design) backplane : high speed, often standardized, e.g. , PCI) I/O : lengthy, different devices, standardized, e.g. , SCSI) \u4ee5\u524d\u7684 CPU \u53ea\u6709\u4e00\u6761\u603b\u7ebf\uff0c\u5982\u679c IO \u8bbe\u5907\u548c Memory \u63a5\u5728\u4e00\u8d77\uff0c\u4ed6\u4eec\u7684\u901f\u5ea6\u9700\u8981\u9075\u5b88\u4e00\u6837\u7684\u534f\u8bae\u3002 IO \u8bbe\u5907\u662f\u5f88\u6162\u7684\uff0c\u4f1a\u5360\u7528 Bus, \u73b0\u5728\u6211\u4eec\u628a\u4efb\u52a1\u4e22\u8fc7\u53bb\u540e\u53ef\u4ee5\u7b49\u5904\u7406\u597d\u4e86\u518d\u6765\u62ff\u3002 \u4e0d\u540c IO \u8bbe\u5907\u4e4b\u95f4\u6570\u636e\u4f20\u8f93\u4e0d\u9700\u8981\u5360\u7528\u603b\u7ebf\u3002","title":"Bus Basics"},{"location":"CO/co6/#synchronous-vs-asynchronous","text":"\u540c\u6b65\u603b\u7ebf\u6216\u8005\u5f02\u6b65\u603b\u7ebf Synchronous bus : use a clock and a fixed protocol , fast and small but every device must operate at same rate and clock skew requires the bus to be short \u6240\u6709\u8bbe\u5907\u9700\u8981\u4ee5\u540c\u6837\u7684\u9891\u7387\u3002 clock skew, \u5373\u4e0a\u5347\u6cbf\u65e0\u6cd5\u5bf9\u9f50 Asynchronous bus : don\u2019t use a clock and instead use handshaking A serial of steps used to coordinate asynchronous bus transfers. Example When memory sees the ReadReq line, it reads the address from the data bus, begin the memory read operation\uff0cthen raises Ack to tell the device that the ReadReq signal has been seen. I/O device sees the Ack line high and releases the ReadReq data lines. Memory sees that ReadReq is low and drops the Ack line. When the memory has the data ready, it places the data on the data lines and raises DataRdy. The I/O device sees DataRdy, reads the data from the bus , and signals that it has the data by raising ACK. The memory sees Ack signals, drops DataRdy, and releases the data lines. Finally, the I/O device, seeing DataRdy go low, drops the ACK line, which indicates that the transmission is completed. \u8bfb\u6570\u636e\u65f6, CPU \u628a read request \u62c9\u8d77\u6765\u3002\u5185\u5b58\u770b\u5230\u540e\uff0c\u4f1a\u628a Data \u603b\u7ebf\u4e0a\u7684\u8bfb\u8d70\uff08\u5373\u5730\u5740\uff09\uff0c\u968f\u540e\u8fdb\u884c\u5185\u5b58\u8bfb\u53d6\uff0c\u540c\u65f6\u628a Ack \u4fe1\u53f7\u62c9\u8d77\u6765\uff0c\u544a\u8bc9 IO \u8bbe\u5907\u6211\u4eec\u5df2\u7ecf\u63a5\u6536\u5230 read request \u4e86. IO \u8bbe\u5907\u770b\u5230 Ack \u540e\u628a\u81ea\u5df1\u7684 read request \u653e\u4e0b\uff0c\u5185\u5b58\u770b\u5230 read request \u653e\u4e0b\u540e\uff0c\u628a Ack \u4e5f\u653e\u4e0b\u3002 \u5185\u5b58\u8bfb\u51fa\u6570\u636e\u540e\uff0c\u4f1a\u628a data ready \u62c9\u8d77\u6765\uff0c\u628a\u6570\u636e\u653e\u5728 data line \u4e0a. IO \u8bbe\u5907\u770b\u5230 data ready \u540e\u4f1a\u628a\u6570\u636e\u53d6\u8d70\uff0c\u5e76\u628a Ack \u4fe1\u53f7\u62c9\u8d77\u3002\u5185\u5b58\u770b\u5230 Ack \u4fe1\u53f7\u540e\u4f1a\u653e\u4e0b data ready \u4fe1\u53f7\uff0c\u968f\u540e IO \u8bbe\u5907\u653e\u4e0b ack \u4fe1\u53f7\u3002","title":"Synchronous vs. Asynchronous"},{"location":"CO/co6/#bus-arbitration","text":"\u603b\u7ebf\u4e0a\u6709\u5f88\u591a\u8bbe\u5907\uff0c\u591a\u4e2a\u8bbe\u5907\u8981\u8bbf\u95ee\u540c\u4e00\u4e2a\u5185\u5b58\u65f6\uff0c\u9700\u8981\u603b\u7ebf\u4ef2\u88c1\uff0c\u83b7\u5f97\u603b\u7ebf\u7684\u6240\u6709\u6743\u3002 multiple device desiring to communicate could each try to assert the control and data lines for different transfers. a bus master is needed. Bus masters initiate and control all bus requests. \u5b9e\u9645\u4e0a\u73b0\u5728 master \u7684\u8bbe\u5907\u4e5f\u6709\u591a\u4e2a\uff0c\u4e0d\u540c master \u4e4b\u95f4\u4e5f\u6709\u7ade\u4e89\uff08CPU, \u663e\u5b58\u7b49\u90fd\u662f\u4e00\u4e2a master\uff09\u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u53ea\u6709\u4e00\u4e2a CPU \u662f master, \u53ef\u4ee5\u5360\u9886\u603b\u7ebf\uff0c\u5e76\u8ba9 IO \u8bbe\u5907\u6267\u884c\u64cd\u4f5c\u3002 \u80fd\u4e3b\u52a8\u53d1\u8d77\u64cd\u4f5c\uff08\u64cd\u4f5c Bus\uff09\u7684\u8bbe\u5907\u53eb\u505a Bus Master, \u4e00\u822c\u662f CPU. \u51b3\u5b9a\u54ea\u4e2a master \u80fd\u591f\u64cd\u4f5c\u603b\u7ebf\u7684\u8bbe\u5907\u53eb\u505a\u603b\u7ebf\u4ef2\u88c1\u3002 Two factors in choosing which device to grant the bus: bus priority fairness \u516c\u5e73\u6027\uff0c\u4e0d\u8ba9\u67d0\u4e2a\u8bbe\u5907\u4e00\u76f4\u5360\u7528\u603b\u7ebf\u3002","title":"Bus Arbitration"},{"location":"CO/co6/#performance-analysis-of-synchronous-versus-asynchronous-buses","text":"\u8bc4\u4ef7\u603b\u7ebf\u7684\u6027\u80fd - \u5e26\u5bbd bandwidth Example \u5f02\u6b65\u65f6\u949f step1 \u7ed3\u675f\u65f6\u5185\u5b58\u5df2\u7ecf\u62ff\u5230\u5730\u5740\u4e86\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d step234 \u53ef\u4ee5\u540c\u65f6\u505a\u3002 Increasing data bus width Use separate address and data lines transfer multiple words \u4e00\u6b21\u4f20\u8f93\u591a\u4e2a\u6570\u636e Increasing the Bus Bandwidth burst \u4f20\u8f93\uff0c\u5730\u5740\u53d1\u4e00\u6b21\uff0c\u8bfb\u591a\u4e2a\u6570\u636e\u3002\u5982\u8bfb\u5730\u5740 4, \u6211\u4eec\u53ef\u4ee5\u8fd4\u56de 4 5 6 7 \u7684\u6570\u636e\u3002 the 4-word block transfers the 16-word block transfers","title":"Performance analysis of Synchronous versus Asynchronous buses"},{"location":"CO/co6/#interfacing-io-devices-to-the-memory-processor-and-operating-system","text":"IO \u8bbe\u5907\uff08\u9700\u8981\u9a71\u52a8\uff09\u600e\u4e48\u548c OS \u901a\u4fe1 The OS must be able to give commands to the I/O devices. OS \u8981\u80fd\u7ed9 IO \u8bbe\u5907\u53d1\u51fa\u547d\u4ee4\uff0c\u6bd4\u5982\u542f\u52a8\u3001\u5173\u673a\u3002 The device must be able to notify the OS, when I/O device completed an operation or has encountered an error. IO \u6709\u65b9\u5f0f\uff0c\u5728\u8bbe\u5907\u5b8c\u6210\u64cd\u4f5c\u6216\u8005\u9047\u5230\u9519\u8bef\u65f6\uff0c\u8981\u80fd\u901a\u77e5 OS. \u6bd4\u5982\u6253\u5370\u7ed3\u675f\uff0c\u53ef\u4ee5\u7ee7\u7eed\u4f20\u8f93\u6570\u636e\u4e86\u3002 Data must be transferred between memory and an I/O device. \u6570\u636e\u8981\u80fd\u5728\u5185\u5b58\u548c IO \u8bbe\u5907\u4e4b\u95f4\u4f20\u8f93\u3002 CPU \u8981\u80fd\u8bbf\u95ee\u5230 IO \u8bbe\u5907\uff0c\u9700\u8981\u6709\u4e00\u4e2a\u5730\u5740\u3002\uff08\u6ce8\u610f\u8fd9\u4e2a\u5730\u5740\u4e0d\u80fd\u8fdb\u5165 cache, \u5426\u5219\u6211\u4eec\u5c31\u65e0\u6cd5\u83b7\u5f97 IO \u8bbe\u5907\u7684\u6700\u65b0\u72b6\u6001\u4e86\uff09 memory-mapped I/O \u628a\u5185\u5b58\u5730\u5740\u4e2d\u7684\u4e00\u90e8\u5206\u5206\u51fa\u6765\u7ed9 IO \u8bbe\u5907\u7528\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528 ld sd \u6765\u8bbf\u95ee\u3002 special I/O instructions e.g. x86 \u4e2d in al,port out port,al. RISC-V \u4e2d\u6ca1\u6709 IO \u8bbe\u5907\u9700\u8981\u6709\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u5b58\u50a8\u72b6\u6001 The Status register (a done bit, an error bit...) The Data register, The command register","title":"Interfacing I/O Devices to the Memory, Processor, and Operating System"},{"location":"CO/co6/#communication-with-the-processor","text":"Polling: The processor periodically checks status bit to see if it is time for the next I/O operation. \u5b9a\u671f\u68c0\u67e5\u8bbe\u5907\uff0c\u4f46\u662f\u4f1a\u5360\u7528 CPU. Interrupt: When an I/O device wants to notify processor that it has completed some operation or needs attentions, it causes processor to be interrupted. \u5f53 IO \u8bbe\u5907\u5b8c\u6210\u64cd\u4f5c\u7ed9 CPU \u4e00\u4e2a\u4e2d\u65ad\uff0c\u7b49\u5f85\u5176\u54cd\u5e94\u3002\u597d\u5904\u662f CPU \u53ef\u4ee5\u4e00\u76f4\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u3002 DMA (direct memory access): the device controller transfer data directly to or from memory without involving processor. IO \u8bbe\u5907\u76f4\u63a5\u548c\u5185\u5b58\u4ea4\u4e92\uff0c\u4e0d\u9700\u8981 CPU \u53c2\u4e0e\u3002","title":"Communication with the Processor"},{"location":"CO/co6/#interrupt-driven-io-mode","text":"\u5047\u8bbe IO \u662f\u4e2a\u6253\u5370\u673a\u3002\u6bcf\u6b21\u6253\u5370\u4e00\u4e2a\u5b57\u7b26\uff0c\u5c31\u4f1a\u7ed9 CPU \u53d1\u4e00\u4e2a\u4e2d\u65ad\u3002CPU \u4f1a\u53bb\u8bfb\u53d6\u6253\u5370\u673a\u7684\u72b6\u6001\uff0c\u770b\u662f\u5426\u5b8c\u6210\u3002\u5b8c\u6210\u540e CPU \u7ee7\u7eed\u505a\u81ea\u5df1\u7684\u4e8b\u60c5\u3002","title":"Interrupt-Driven I/O mode"},{"location":"CO/co6/#dma-transfer-mode","text":"CPU \u9700\u8981\u914d\u7f6e DMA. DMA \u4f1a\u548c IO \u8bbe\u5907\u4ea4\u4e92\uff0c\u628a\u6570\u636e\u642c\u5230\u5185\u5b58\uff0c\u4e0d\u9700\u8981 CPU \u53c2\u4e0e\u3002 A DMA transfer need three steps: The processor sets up the DMA by supplying some information, including the identity of the device, the operation, the memory address that is the source or destination of the data to be transferred, and the number of bytes to transfer. CPU \u914d\u7f6e DMA\uff0c\u5305\u62ec\u54ea\u4e2a\u8bbe\u5907\u3001\u505a\u4ec0\u4e48\u64cd\u4f5c\u3001\u5185\u5b58\u5730\u5740\u3001\u6570\u636e\u5927\u5c0f\u7b49\u3002 The DMA starts the operation on the device and arbitrates for the bus. If the request requires more than one transfer on the bus, the DMA unit generates the next memory address and initiates the next transfer. DMA \u5f00\u59cb\u64cd\u4f5c\u8bbe\u5907\uff0c\u5360\u7528\u603b\u7ebf\u3002\u5982\u679c\u9700\u8981\u591a\u6b21\u4f20\u8f93\uff0cDMA \u4f1a\u751f\u6210\u4e0b\u4e00\u4e2a\u5185\u5b58\u5730\u5740\uff0c\u5f00\u59cb\u4e0b\u4e00\u6b21\u4f20\u8f93\u3002 DMA \u4e5f\u662f\u6302\u5728\u603b\u7ebf\u4e0a\u7684 master, \u4f18\u5148\u7ea7\u6ca1\u6709 CPU \u9ad8\u3002\u56e0\u6b64\u4ed6\u4f1a\u8d81 CPU \u7a7a\u95f2\u7684\u65f6\u5019\u642c\u8fd0\u6570\u636e\uff0c\u53ef\u4ee5\u5145\u5206\u5229\u7528\u603b\u7ebf\u3002 Once the DMA transfer is complete, the controller interrupts the processor, which then examines whether errors occur. DMA \u5b8c\u6210\u540e\uff0c\u7ed9 CPU \u53d1\u4e2d\u65ad\uff0cCPU \u68c0\u67e5\u662f\u5426\u6709\u9519\u8bef\u3002 Compare polling, interrupts, DMA The disadvantage of polling is that it wastes a lot of processor time. When the CPU polls the I/O device periodically, the I/O devices maybe have no request or have not get ready. polling \u7684\u574f\u5904\u662f\u6d6a\u8d39\u4e86\u5927\u91cf\u7684 CPU \u7684\u65f6\u95f4\u3002CPU \u5b9a\u671f\u8f6e\u8be2 IO \u8bbe\u5907\u53ef\u80fd\u6ca1\u6709\u8bf7\u6c42\u6216\u8005\u6ca1\u6709\u51c6\u5907\u597d\u3002 If the I/O operations is interrupt driven, the OS can work on other tasks while data is being read from or written to the device. \u5982\u679c IO \u64cd\u4f5c\u662f\u4e2d\u65ad\u9a71\u52a8\u7684\uff0cOS \u53ef\u4ee5\u5728\u6570\u636e\u4ece\u8bbe\u5907\u8bfb\u53d6\u6216\u5199\u5165\u65f6\u5904\u7406\u5176\u4ed6\u4efb\u52a1\u3002 Because DMA doesn\u2019t need the control of processor, it will not consume much of processor time. DMA \u4e0d\u9700\u8981 CPU \u63a7\u5236\uff0c\u4e0d\u4f1a\u6d88\u8017 CPU \u65f6\u95f4\u3002 \u4f46 DMA \u5176\u5b9e\u53ea\u662f\u642c\u8fd0\u6570\u636e\u65f6\u6709\u7528\uff0c\u5176\u5b9e\u548c polling interrupt \u4e0d\u5bf9\u7acb\u3002 Overhead of Polling in an I/O System Overhead of Interrupt-Driven I/O polling \u5fc5\u987b\u65f6\u65f6\u523b\u523b\u67e5\u8be2\uff0c\u4e2d\u65ad\u53ea\u9700\u8981\u5728\u771f\u6b63\u6709\u6570\u636e\u4f20\u8f93\uff08\u6bd4\u5982 5% \u7684\u65f6\u95f4\uff09\u65f6\u518d\u53bb\u5904\u7406\u3002 Overhead of I/O Using DMA","title":"DMA transfer mode"},{"location":"CO/co6/#io-performance-measures-examples-from-disk-and-file-systems","text":"CPU \u6709 benchmark, IO \u4e5f\u6709 benchmark \u6765\u8861\u91cf\u6027\u80fd\u3002 I/O rate : the number of disk access per second, as opposed to data rate","title":"I/O Performance Measures: Examples from Disk and File Systems"},{"location":"CO/co6/#designing-an-io-system","text":"\u6574\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf CPU+bus+I/O Find the weakest link in the I/O system, which is the component in the I/O path that will constrain the design. Both the workload and configuration limits may dictate where the weakest link is located. \u901f\u5ea6\u7531\u6700\u6162\u7684\u51b3\u5b9a\u3002 \u770b\u54ea\u4e2a\u90e8\u5206\u6700\u5f31\uff0c\u5176\u4ed6\u90e8\u5206\u4fdd\u8bc1\u53ef\u4ee5\u6ee1\u8db3\u6700\u5f31\u7684\u6761\u4ef6\u5373\u53ef\u3002 Configure this component to sustain the required bandwidth. Determine the requirements for the rest of the system and configure them to support this bandwidth. Example","title":"Designing an I/O system"},{"location":"CSAPP/5/","text":"\u4f18\u5316\u7a0b\u5e8f\u6027\u80fd \u00b6 Abstract \u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u5de5\u4f5c \u7406\u89e3\u73b0\u4ee3\u5904\u7406\u5668 \u6570\u636e\u6d41\u56fe \u7406\u89e3\u5185\u5b58\u6027\u80fd \u4f18\u5316\u7f16\u8bd1\u5668\u7684\u80fd\u529b\u548c\u5c40\u9650 \u00b6 GCC\u4f18\u5316\u6307\u4ee4 -Og:\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4e0d\u4f18\u5316\u3002 -O1:\u7f16\u8bd1\u5668\u8bd5\u56fe\u4f18\u5316\u4ee3\u7801\u5927\u5c0f\u548c\u6267\u884c\u65f6\u95f4\uff0c\u5b83\u4e3b\u8981\u5bf9\u4ee3\u7801\u7684\u5206\u652f\uff0c\u5e38\u91cf\u4ee5\u53ca\u8868\u8fbe\u5f0f\u7b49\u8fdb\u884c\u4f18\u5316\uff0c\u4f46\u4e0d\u6267\u884c\u4efb\u4f55\u4f1a\u5360\u7528\u5927\u91cf\u7f16\u8bd1\u65f6\u95f4\u7684\u4f18\u5316\u3002 -O2:GCC\u6267\u884c\u51e0\u4e4e\u6240\u6709\u4e0d\u5305\u542b\u65f6\u95f4\u548c\u7a7a\u95f4\u6743\u8861\u7684\u4f18\u5316\uff08\u6bd4\u5982\uff0c\u5c1d\u8bd5\u66f4\u591a\u7684\u5bc4\u5b58\u5668\u7ea7\u7684\u4f18\u5316\u4ee5\u53ca\u6307\u4ee4\u7ea7\u7684\u4f18\u5316\uff09\u3002\u4e0e-O\u76f8\u6bd4\uff0c\u6b64\u9009\u9879\u589e\u52a0\u4e86\u7f16\u8bd1\u65f6\u95f4\uff0c\u4f46\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u6548\u7387\u3002 -O3:\u6bd4-O2\u66f4\u4f18\u5316\uff0c\u5bf9\u4e8e-O3\u7f16\u8bd1\u9009\u9879\uff0c\u5728-O2\u7684\u57fa\u7840\u4e0a\uff0c\u6253\u5f00\u4e86\u66f4\u591a\u7684\u4f18\u5316\u9879\uff08\u6bd4\u5982\uff0c\u4f7f\u7528\u4f2a\u5bc4\u5b58\u5668\u7f51\u7edc\uff0c\u666e\u901a\u51fd\u6570\u7684\u5185\u8054\uff0c\u4ee5\u53ca\u9488\u5bf9\u5faa\u73af\u7684\u66f4\u591a\u4f18\u5316\uff09\u3002\u4e0d\u8fc7\u53ef\u80fd\u5bfc\u81f4\u7f16\u8bd1\u51fa\u6765\u7684\u4e8c\u7ea7\u5236\u7a0b\u5e8f\u4e0d\u80fddebug\u3002 -Os:\u4e3b\u8981\u662f\u5bf9\u4ee3\u7801\u5927\u5c0f\u7684\u4f18\u5316\uff0c\u6211\u4eec\u57fa\u672c\u4e0d\u7528\u505a\u66f4\u591a\u7684\u5173\u5fc3\u3002 \u901a\u5e38\u5404\u79cd\u4f18\u5316\u90fd\u4f1a\u6253\u4e71\u7a0b\u5e8f\u7684\u7ed3\u6784\uff0c\u8ba9\u8c03\u8bd5\u5de5\u4f5c\u53d8\u5f97\u65e0\u4ece\u7740\u624b\u3002\u5e76\u4e14\u4f1a\u6253\u4e71\u6267\u884c\u987a\u5e8f\uff0c\u4f9d\u8d56\u5185\u5b58\u64cd\u4f5c\u987a\u5e8f\u7684\u7a0b\u5e8f\u9700\u8981\u505a\u76f8\u5173\u5904\u7406\u624d\u80fd\u786e\u4fdd\u7a0b\u5e8f\u7684\u6b63\u786e\u6027\u3002 \u59a8\u788d\u4f18\u5316\u7684\u56e0\u7d20: \u5185\u5b58\u522b\u540d\u4f7f\u7528(memory aliasing) \u5728\u53ea\u6267\u884c\u5b89\u5168\u7684\u4f18\u5316\u4e2d, \u7f16\u8bd1\u5668\u5fc5\u987b\u5047\u8bbe \u4e0d\u540c\u7684\u6307\u9488 \u53ef\u80fd\u4f1a\u6307\u5411\u5185\u5b58\u4e2d\u7684 \u540c\u4e00\u4e2a\u4f4d\u7f6e . Example void twiddle1 ( long * xp , long * yp ) { * xp + = * yp ; * xp + = * yp ; } void twiddle2 ( long * xp , long * yp ) { * xp + = 2 * * yp ; } \u8868\u9762\u4e0a, twiddle1 \u9700\u8981 6 \u6b21\u5185\u5b58\u5f15\u7528(2 \u6b21\u8bfb xp, 2 \u6b21\u8bfb yp, 2 \u6b21\u5199 xp), \u800c twiddle2 \u53ea\u9700\u8981 3 \u6b21\u5185\u5b58\u5f15\u7528(1 \u6b21\u8bfb xp, 1 \u6b21\u8bfb yp, 1 \u6b21\u5199 xp). \u4f46\u5f53 xp \u548c yp \u5f15\u7528\u7684\u662f\u540c\u4e00\u5730\u5740\u65f6, twiddle1 \u4f1a\u8ba9 xp \u53d8\u4e3a\u539f\u6765\u7684 4 \u500d, \u800c twiddle2 \u4f1a\u8ba9 xp \u53d8\u4e3a\u539f\u6765\u7684 3 \u500d, \u56e0\u6b64\u7f16\u8bd1\u5668\u4e0d\u4f1a\u4ea7\u751f twiddle2 \u7684\u4ee3\u7801\u4f5c\u4e3a twiddle1 \u7684\u4f18\u5316\u7248\u672c. \u51fd\u6570\u8c03\u7528 Example long f (); long func1 () { return f () + f () + f () + f (); } long func2 () { return 4 * f (); } func2 \u53ea\u8c03\u7528 f \u4e00\u6b21, \u4f46 func1 \u4f1a\u8c03\u7528\u56db\u6b21. \u4f46\u662f\u5f53\u51fd\u6570\u6709\u526f\u4f5c\u7528\u65f6--\u5b83\u4f1a\u6539\u53d8\u5168\u5c40\u7a0b\u5e8f\u72b6\u6001\u7684\u4e00\u90e8\u5206, \u90a3\u4e48\u6539\u53d8\u8c03\u7528\u5b83\u7684\u6b21\u6570\u4f1a\u6539\u53d8\u7a0b\u5e8f\u7684\u884c\u4e3a. \u56e0\u6b64\u5927\u591a\u6570\u7f16\u8bd1\u5668\u4e5f\u4e0d\u4f1a\u5bf9\u6b64\u505a\u4f18\u5316. \u8868\u793a\u7a0b\u5e8f\u6027\u80fd \u00b6 \u7a0b\u5e8f\u6027\u80fd\u8861\u91cf\u6807\u51c6: \u6bcf\u5143\u7d20\u7684\u5468\u671f\u6570(CPE i.e. Cycles Per Element). Example // Compute prefix sum of vector a void psum1 ( float a [], float p [], long n ) { long i ; p [ 0 ] = a [ 0 ]; for ( i = 1 ; i < n ; i ++ ) p [ i ] = p [ i -1 ] + a [ i ]; } void psum2 ( float a [], float p [], long n ) { long i ; p [ 0 ] = a [ 0 ]; for ( i = 1 ; i < n -1 ; i += 2 ) { float mid_val = p [ i -1 ] + a [ i ]; p [ i ] = mid_val ; p [ i + 1 ] = mid_val + a [ i + 1 ]; } if ( i < n ) p [ i ] = p [ i -1 ] + a [ i ]; } psum1 \u6bcf\u6b21\u8ba1\u7b97\u5411\u91cf\u7684\u4e00\u4e2a\u5143\u7d20, psum2 \u6bcf\u6b21\u8ba1\u7b97\u4e24\u4e2a\u5143\u7d20(\u5faa\u73af\u5c55\u5f00). \u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\u6240\u9700\u8981\u7684\u65f6\u95f4\u6211\u4eec\u53ef\u4ee5\u7528 \u6700\u5c0f\u4e8c\u4e58\u6cd5 \u6765\u62df\u5408. \u5176\u4e2d psum1: 368+9.0n, psum2: 368+6.0n. \u8fd9\u4e9b\u9879\u4e2d\u7684\u7cfb\u6570\u79f0\u4e3a CPE . \u6d88\u9664\u5faa\u73af\u7684\u4f4e\u6548\u7387 \u00b6 Example void lower1 ( char * s ) { size_t i ; for ( i = 0 ; i < strlen ( s ); i ++ ) if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) s [ i ] -= ( 'A' - 'a' ); } void lower2 ( char * s ) { size_t i ; size_t len = strlen ( s ); /*\u653e\u5728\u51fd\u6570\u4f53\u5916*/ for ( i = 0 ; i < len ; i ++ ) if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) s [ i ] -= ( 'A' - 'a' ); } \u7531\u4e8e\u5faa\u73af\u7ed3\u6784\u7684\u6548\u7387\u6bd4\u8f83\u4f4e, \u521d\u59cb\u4ee3\u7801 lower1 \u7684\u8fd0\u884c\u65f6\u95f4\u662f\u4e8c\u6b21\u9879\u7684, \u4fee\u6539\u8fc7\u7684\u4ee3\u7801 lower2 \u7684\u8fd0\u884c\u65f6\u95f4\u662f\u7ebf\u6027\u7684. \u56e0\u4e3a lower1 \u7684 n \u6b21\u8fed\u4ee3\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u8c03\u7528 strlen \u51fd\u6570, \u800c strlen \u6240\u7528\u65f6\u95f4\u53c8\u4e0e n \u6210\u6b63\u6bd4, \u56e0\u6b64\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u662f n^2. \u540c\u65f6\u56e0\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u5728\u8fd0\u884c\u4e2d\u6539\u53d8, \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06 strlen \u51fd\u6570\u79fb\u5230\u5faa\u73af\u5916. \u4e0a\u8ff0\u65b9\u6cd5\u79f0\u4e3a \u4ee3\u7801\u79fb\u52a8(code motion) . \u5373\u8bc6\u522b\u8981\u6267\u884c\u591a\u6b21(\u4f8b\u5982\u5728\u5faa\u73af\u91cc)\u4f46\u662f\u8ba1\u7b97\u7ed3\u679c\u4e0d\u4f1a\u6539\u53d8\u7684\u8ba1\u7b97, \u56e0\u800c\u8bb2\u8ba1\u7b97\u79fb\u52a8\u5230\u4ee3\u7801\u524d\u9762\u4e0d\u4f1a\u88ab\u591a\u6b21\u6c42\u503c\u7684\u90e8\u5206. \u4f18\u5316\u7f16\u8bd1\u5668\u4e0d\u80fd\u53ef\u9760\u5730\u53d1\u73b0\u51fd\u6570\u662f\u5426\u6709\u526f\u4f5c\u7528, \u6240\u4ee5\u7a0b\u5e8f\u5458\u5fc5\u987b\u5e2e\u52a9\u7f16\u8bd1\u5668\u663e\u793a\u5730\u5b8c\u6210\u4ee3\u7801\u7684\u79fb\u52a8. \u51cf\u5c11\u8fc7\u7a0b\u8c03\u7528 \u00b6 Example int get_vec_element ( vec_ptr v , long index , data_t * dest ) { if ( index < 0 || index >= v -> len ) return 0 ; // \u8fb9\u754c\u68c0\u67e5 * dest = v -> data [ next ]; return 1 ; } /* Move call to vec_length out of loop */ void combine2 ( vec_ptr v , data_t * dest ) { long i ; long length vec_length ( v ); * dest = IDENT ; for ( i = 0 ; i < length ; i ++ ) { data_t val ; get_vec_element ( v , i , & val ); * dest = * dest OP val ; } } \u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u90fd\u4f1a\u8c03\u7528 get_vec_element \u6765\u83b7\u53d6\u4e0b\u4e00\u4e2a\u5411\u91cf\u5143\u7d20, \u800c\u6bcf\u6b21\u5411\u91cf\u8c03\u7528\u90fd\u6709\u8fb9\u754c\u68c0\u67e5, \u4f1a\u9020\u6210\u4f4e\u6548\u7387. \u4e8e\u662f\u6211\u4eec\u6539\u4e3a\u5982\u4e0b\u7248\u672c: data_t * get_vec_start ( vec_ptr v ) { return v - data ; } /* Move call to vec_length out of loop */ void combine3 ( vec_ptr v , data_t * dest ) { long i ; long length vec_length ( v ); data_t * data = get_vec_start ( v ); * dest = IDENT ; for ( i = 0 ; i < length ; i ++ ) { * dest = * dest OP data [ i ]; } } \u4f46\u8fd9\u6837\u505a\u6ca1\u6709\u5e26\u6765\u6027\u80fd\u4e0a\u660e\u663e\u7684\u63d0\u5347. \u8bf4\u660e\u5185\u5faa\u73af\u4e2d\u7684\u5176\u4ed6\u64cd\u4f5c\u5f62\u6210\u4e86\u5e73\u9759, \u9650\u5236\u6027\u80fd\u8d85\u8fc7\u4e86 get_vec_element. \u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5f15\u7528 \u00b6 Example #Inner loop of combines. data_t double, OP = #dest in %rbx, data+i in %rdx, data+length in %rax . L17 : vmovsd ( % rbx ), % xmm () # Read product from dest vmulsd ( % rdx ), % xmm0 , % xmm0 # Multiply product by data [ i ] vmovsd % xmm , ( % rbx \uff09 # Store product at dest addq $8 , % rdx # Increment data + i cmp % rax , % rdx # Compare to data + length jne . L17 \u6211\u4eec\u53d1\u73b0 combine3 \u7684\u4ee3\u7801, \u6bcf\u6b21\u8fed\u4ee3\u65f6, \u7d2f\u79ef\u53d8\u91cf\u7684\u6570\u503c\u90fd\u8981\u4ece\u5185\u5b58\u8bfb\u51fa\u518d\u5199\u5165\u5230\u5185\u5b58. \u4e8e\u662f\u6211\u4eec\u5f15\u7528\u4e00\u4e2a\u5386\u53f2\u53d8\u91cf acc \u6765\u8868\u793a\u5728\u5faa\u73af\u4e2d\u7d2f\u79ef\u8ba1\u7b97\u7684\u503c. #Inner loop of combines. data_t double, OP = #dest in %rbx, data+i in %rdx, data+length in %rax . L25 : vmulsd ( % rdx ), % xmm0 , % xmm0 # Multiply product by data [ i ] addq $8 , % rdx # Increment data + i cmp % rax , % rdx # Compare to data + length jne . L25 \u5176\u4fee\u6539\u90e8\u5206: // combine4 * data acc = IDENT ; for ( i = 0 ; i < length ; i ++ ) { acc = acc OP data [ i ]; } \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u505a\u7a0b\u5e8f\u6027\u80fd\u6709\u4e86\u663e\u8457\u63d0\u9ad8: \u6ce8\u610f\u7684\u662f, \u7531\u4e8e\u5185\u5b58\u522b\u540d\u4f7f\u7528, \u4f18\u5316\u540e\u51fd\u6570\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u884c\u4e3a(\u5982\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u82e5\u6211\u4eec\u5c06\u7b54\u6848\u5b58\u5728\u5411\u91cf\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e, combine3 \u548c combine4 \u5c31\u4e0d\u4f1a\u5f97\u5230\u76f8\u540c\u7684\u7b54\u6848), \u56e0\u6b64\u4e00\u822c\u6765\u8bf4\u7f16\u8bd1\u5668\u4e0d\u4f1a\u4e3a\u6211\u4eec\u505a\u8fd9\u4e00\u6b65\u4f18\u5316. \u7406\u89e3\u73b0\u4ee3\u5904\u7406\u5668 \u00b6 \u4e0a\u8ff0\u4f18\u5316\u90fd\u4e0d\u4f9d\u8d56\u4e8e\u76ee\u6807\u673a\u5668\u7684\u4efb\u4f55\u7279\u6027, \u53ea\u662f\u7b80\u5355\u964d\u4f4e\u4e86\u8fc7\u7a0b\u8c03\u7528\u7684\u5f00\u9500, \u4ee5\u53ca\u6d88\u9664\u4e86\u4e00\u4e9b\u91cd\u5927\u7684\u59a8\u788d\u4f18\u5316\u7684\u56e0\u7d20. \u8981\u8fdb\u4e00\u6b65\u63d0\u9ad8\u6027\u80fd, \u5fc5\u987b\u8003\u8651\u5229\u7528\u5904\u7406\u5668 \u5fae\u4f53\u7cfb\u7ed3\u6784 \u7684\u4f18\u5316. \u5728\u5b9e\u9645\u5904\u7406\u5668\u4e2d\u662f\u540c\u65f6\u5bf9\u591a\u6761\u6307\u4ee4\u6c42\u503c\u7684, \u8fd9\u4e2a\u73b0\u8c61\u79f0\u4e3a \u6307\u4ee4\u7ea7\u5e76\u884c \u6574\u4f53\u64cd\u4f5c \u00b6 \u5982\u4e0a\u56fe\u6240\u793a\u662f\u4e00\u4e2a\u7b80\u5316\u7684 Intel \u5904\u7406\u5668\u7684\u7ed3\u6784\uff0c\u5305\u542b\u4e24\u4e2a\u7279\u70b9\uff1a \u8d85\u6807\u91cf(Superscalar) \uff1a\u5904\u7406\u5668\u53ef\u4ee5\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u6267\u884c\u591a\u4e2a\u64cd\u4f5c \u4e71\u5e8f(Out-of-order) \uff1a\u6307\u4ee4\u6267\u884c\u7684\u987a\u5e8f\u4e0d\u4e00\u5b9a\u548c\u673a\u5668\u4ee3\u7801\u7684\u987a\u5e8f\u76f8\u540c\uff0c\u63d0\u9ad8\u6307\u4ee4\u7ea7\u5e76\u884c \u6574\u4e2a\u8bbe\u8ba1\u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206: \u6307\u4ee4\u63a7\u5236\u5355\u5143(Instruction Control Unit) \u901a\u8fc7\u53d6\u503c\u63a7\u5236\u903b\u8f91\u4ece\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\u4e2d\u8bfb\u51fa\u6307\u4ee4\u5e8f\u5217, \u5e76\u6839\u636e\u8fd9\u4e9b\u5e8f\u5217\u751f\u6210\u4e00\u7ec4\u9488\u5bf9\u7a0b\u5e8f\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c, \u7136\u540e\u53d1\u9001\u5230 EU \u4e2d. \u53d6\u503c\u63a7\u5236\u903b\u8f91 \u5206\u652f\u9884\u6d4b, \u731c\u6d4b\u662f\u5426\u4f1a\u9009\u62e9\u5206\u652f, \u540c\u65f6\u8fd8\u9884\u6d4b\u5206\u652f\u7684\u76ee\u6807\u5730\u5740. \u6307\u4ee4\u9ad8\u901f\u7f13\u5b58(instruction cache) \u4e00\u4e2a\u7279\u6b8a\u7684\u9ad8\u901f\u5b58\u50a8\u5668, \u5305\u542b\u6700\u8fd1\u8bbf\u95ee\u7684\u6307\u4ee4. ICU \u4f1a\u5728\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u5f88\u65e9\u4e4b\u524d\u53d6\u6307, \u8fd9\u6837\u5b83\u624d\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5bf9\u6307\u4ee4\u8bd1\u7801. \u6307\u4ee4\u8bd1\u7801\u903b\u8f91 \u63a5\u53d7\u5b9e\u9645\u7684\u7a0b\u5e8f\u6307\u4ee4, \u5e76\u5c06\u5b83\u4eec\u8f6c\u6362\u6210\u4e00\u7ec4\u57fa\u672c\u64cd\u4f5c(\u5fae\u64cd\u4f5c). \u6bcf\u4e2a\u8fd9\u6837\u7684\u64cd\u4f5c\u90fd\u5b8c\u6210\u67d0\u4e2a\u7b80\u5355\u7684\u8ba1\u7b97\u4efb\u52a1. e.g. x86 \u4e2d addq %rax, %rdx \u4f1a\u88ab\u8f6c\u5316\u6210\u4e00\u4e2a\u64cd\u4f5c\u4f46 addq %rax, 8(%rdx) \u4f1a\u88ab\u8bd1\u7801\u4e3a\u4e09\u4e2a\u64cd\u4f5c: \u8bfb\u5185\u5b58\u503c, \u505a\u52a0\u6cd5, \u5b58\u56de\u5185\u5b58. \u9000\u5f79\u5355\u5143 \u8bb0\u5f55\u6b63\u5728\u8fdb\u884c\u7684\u5904\u7406, \u5e76\u786e\u4fdd\u5b83\u9075\u5b88\u673a\u5668\u7ea7\u7a0b\u5e8f\u7684\u987a\u5e8f\u8bed\u4e49. \u5b83\u5305\u542b\u5e76\u63a7\u5236\u7740\u5bc4\u5b58\u5668\u6587\u4ef6\u7684\u66f4\u65b0. \u6307\u4ee4\u5728\u8bd1\u7801\u65f6, \u6307\u4ee4\u4fe1\u606f\u88ab\u653e\u5728\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7684\u961f\u5217\u4e2d. \u4e00\u65e6\u4e00\u6761\u6307\u4ee4\u7684\u64cd\u4f5c\u5b8c\u6210, \u800c\u4e14\u6240\u6709\u5f15\u8d77\u8fd9\u6761\u6307\u4ee4\u7684\u5206\u652f\u70b9\u4e5f\u90fd\u9884\u6d4b\u6b63\u786e, \u90a3\u4e48\u8fd9\u6761\u6307\u4ee4\u5c31\u53ef\u4ee5\u9000\u5f79\u4e86, \u6240\u6709\u8fd9\u6761\u6307\u4ee4\u6709\u5173\u7684\u5bf9\u7a0b\u5e8f\u5bc4\u5b58\u5668\u7684\u66f4\u65b0\u90fd\u53ef\u4ee5\u5b9e\u9645\u6267\u884c\u4e86; \u5982\u679c\u67d0\u4e2a\u5206\u652f\u70b9\u9884\u6d4b\u9519\u8bef, \u8fd9\u6761\u6307\u4ee4\u4f1a\u88ab\u6e05\u7a7a, \u4e22\u5f03\u6240\u6709\u8ba1\u7b97\u7ed3\u679c. Note \u4efb\u4f55\u5bf9\u7a0b\u5e8f\u5bc4\u5b58\u5668\u7684\u66f4\u65b0\u90fd\u53ea\u4f1a\u5728\u6307\u4ee4\u9000\u5f79\u65f6\u624d\u4f1a\u53d1\u751f. \u4e3a\u4e86\u52a0\u901f\u6307\u4ee4\u5230\u6307\u4ee4\u95f4\u7ed3\u679c\u7684\u4f20\u9001, \u8bb8\u591a\u6b64\u7c7b\u4fe1\u606f\u662f\u5728\u6267\u884c\u5355\u5143\u95f4\u4ea4\u6362\u7684, \u5373\u56fe\u4e2d\u7684\"\u64cd\u4f5c\u7ed3\u679c\". \u6267\u884c\u5355\u5143(Execution Unit) \u63a5\u6536\u6765\u81ea\u53d6\u6307\u5355\u5143\u7684\u64cd\u4f5c, \u901a\u5e38\u6bcf\u4e2a\u5468\u671f\u4f1a\u63a5\u53d7\u591a\u4e2a\u64cd\u4f5c, \u8fd9\u4e9b\u64cd\u4f5c\u4f1a\u88ab\u5206\u6d3e\u5230\u4e00\u7ec4 \u529f\u80fd\u5355\u5143 \u4e2d. \u529f\u80fd\u5355\u5143 \u4e13\u95e8\u7528\u6765\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u64cd\u4f5c. \u4e00\u4e2a\u529f\u80fd\u5355\u5143\u53ef\u4ee5\u6267\u884c\u591a\u79cd\u64cd\u4f5c, \u591a\u4e2a\u529f\u80fd\u5355\u5143\u53ef\u4ee5\u6267\u884c\u540c\u4e00\u79cd\u64cd\u4f5c. \u8bfb\u5199\u5185\u5b58\u662f\u901a\u8fc7 \u52a0\u8f7d/\u5b58\u50a8\u6a21\u5757 \u5b8c\u6210\u7684. \u8fd9\u4e24\u4e2a\u5355\u5143\u5404\u5305\u542b\u4e00\u4e2a\u52a0\u6cd5\u5668\u6765\u5b8c\u6210\u5730\u5740\u8ba1\u7b97, \u5e76\u901a\u8fc7\u6570\u636e\u9ad8\u901f\u7f13\u5b58\u6765\u8bfb\u5199\u5185\u5b58. \u7b97\u672f\u8fd0\u7b97\u6a21\u5757 \u5206\u652f\u6a21\u5757 \u786e\u5b9a\u5206\u652f\u9884\u6d4b\u662f\u5426\u6b63\u786e(\u800c\u975e\u5206\u652f\u5f80\u54ea\u6267\u884c), \u5982\u679c\u9884\u6d4b\u9519\u8bef, \u6267\u884c\u5355\u5143\u4f1a\u4e22\u5f03\u5206\u652f\u70b9\u4e4b\u540e\u8ba1\u7b97\u51fa\u6765\u7684\u7ed3\u679c, \u5e76\u53d1\u4fe1\u53f7\u7ed9\u5206\u652f\u5355\u5143, \u5e76\u6307\u51fa\u6b63\u786e\u7684\u5206\u652f\u76ee\u7684. \u8fd9\u6837\u5206\u652f\u5355\u5143\u4f1a\u5728\u65b0\u7684\u4f4d\u7f6e\u53d6\u503c. \u5bc4\u5b58\u5668\u91cd\u547d\u540d \u63a7\u5236\u64cd\u4f5c\u6570\u5728\u6267\u884c\u5355\u5143\u95f4\u4f20\u9001\u7684\u6700\u5e38\u89c1\u673a\u5236\u662f \u5bc4\u5b58\u5668\u91cd\u547d\u540d(register renaming) . \u5f53\u6267\u884c\u4e00\u6761\u66f4\u65b0\u5bc4\u5b58\u5668r\u7684\u6307\u4ee4I1\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6307\u5411\u8be5\u64cd\u4f5c\u7ed3\u679c\u7684\u552f\u4e00\u6807\u8bc6\u7b26t\uff0c\u7136\u540e\u5c06(r, t)\u52a0\u5165\u91cd\u547d\u540d\u8868\u4e2d. \u5f53\u540e\u7eed\u6709\u9700\u8981\u7528\u5230\u5bc4\u5b58\u5668r\u4f5c\u4e3a\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\u65f6\uff0c\u4f1a\u5c06t\u4f5c\u4e3a\u64cd\u4f5c\u6570\u6e90\u7684\u503c\u8f93\u5165\u5230\u5355\u5143\u4e2d\u8fdb\u884c\u6267\u884c, \u5f53I1\u6267\u884c\u5b8c\u6210\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7ed3\u679c(v, t)\uff0c\u8868\u793a\u6807\u8bc6\u7b26t\u7684\u64cd\u4f5c\u4ea7\u751f\u4e86\u7ed3\u679cv\uff0c\u7136\u540e\u6240\u6709\u7b49\u5f85t\u4f5c\u4e3a\u6e90\u7684\u64cd\u4f5c\u90fd\u4f1a\u4f7f\u7528v\u4f5c\u4e3a\u6e90\u503c\u3002 \u610f\u4e49 \uff1a\u4f7f\u7528\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u673a\u5236\uff0c\u53ef\u4ee5\u5c06\u503c\u4ece\u4e00\u4e2a\u64cd\u4f5c\u76f4\u63a5\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a\u64cd\u4f5c\uff0c\u800c\u65e0\u9700\u8fdb\u884c\u5bc4\u5b58\u5668\u6587\u4ef6\u7684\u8bfb\u5199\uff0c\u4f7f\u5f97\u540e\u7eed\u7684\u64cd\u4f5c\u80fd\u5728\u7b2c\u4e00\u4e2a\u64cd\u4f5cI1\u5b8c\u6210\u540e\u5c3d\u5feb\u5f00\u59cb\u3002\u5e76\u4e14\u6295\u673a\u6267\u884c\u4e2d\uff0c\u5728\u9884\u6d4b\u6b63\u786e\u4e4b\u524d\u4e0d\u4f1a\u5c06\u7ed3\u679c\u5199\u5165\u5bc4\u5b58\u5668\u4e2d\uff0c\u800c\u901a\u8fc7\u8be5\u673a\u5236\u5c31\u53ef\u4ee5\u9884\u6d4b\u7740\u6267\u884c\u64cd\u4f5c\u7684\u6574\u4e2a\u5e8f\u5217. \u6ce8\u610f \uff1a\u91cd\u547d\u540d\u8868\u53ea\u5305\u542b\u672a\u8fdb\u884c\u5bc4\u5b58\u5668\u5199\u64cd\u4f5c\u7684\u5bc4\u5b58\u5668\uff0c\u5982\u679c\u6709\u4e2a\u64cd\u4f5c\u9700\u8981\u7684\u5bc4\u5b58\u5668\u6ca1\u6709\u5728\u91cd\u547d\u540d\u8868\u4e2d\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u5bc4\u5b58\u5668\u6587\u4ef6\u4e2d\u83b7\u53d6\u503c. \u6027\u80fd \u00b6 \u523b\u753b\u6027\u80fd: \u5ef6\u8fdf(latency): \u8868\u793a\u5b8c\u6210\u8fd0\u7b97\u6240\u9700\u8981\u7684\u603b\u65f6\u95f4 \u53d1\u5c04\u65f6\u95f4(issue time): \u8868\u793a\u4e24\u4e2a\u8fde\u7eed\u7684\u540c\u7c7b\u578b\u7684\u8fd0\u7b97\u4e4b\u95f4\u9700\u8981\u7684\u6700\u5c0f\u5468\u671f\u6570 \u5bb9\u91cf(capacity) *: \u8868\u793a\u80fd\u591f\u6267\u884c\u8be5\u8fd0\u7b97\u7684\u529f\u80fd\u5355\u5143\u7684\u6570\u91cf \u53c2\u8003\u673a\u7684\u6027\u80fd \u53d1\u5c04\u65f6\u95f4\u4e3a 1 \u7684\u529f\u80fd\u5355\u5143\u88ab\u79f0\u4e3a \u5b8c\u5168\u6d41\u6c34\u5316\u7684(fully pipelined): \u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u90fd\u53ef\u4ee5\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u8fd0\u7b97. e.g. \u4e00\u4e2a\u5178\u578b\u7684\u6d6e\u70b9\u52a0\u6cd5\u5668(\u6240\u4ee5\u5ef6\u8fdf\u662f 3 \u4e2a\u5468\u671f): \u4e00\u4e2a\u9636\u6bb5\u5904\u7406\u6307\u6570, \u4e00\u4e2a\u9636\u6bb5\u76f8\u52a0\u5c0f\u6570, \u4e00\u4e2a\u9636\u6bb5\u5bf9\u7ed3\u679c\u820d\u5165. \u7b97\u672f\u8fd0\u7b97\u53ef\u4ee5\u8fde\u7eed\u5730\u901a\u8fc7\u5404\u4e2a\u9636\u6bb5, \u4e0d\u7528\u7b49\u4e00\u4e2a\u64cd\u4f5c\u5b8c\u6210\u540e\u518d\u8fdb\u884c\u4e0b\u4e00\u4e2a. \u53ea\u6709\u5f53\u8981\u6267\u884c\u7684\u8fd0\u7b97\u662f\u8fde\u7eed, \u903b\u8f91\u4e0a\u72ec\u7acb\u7684\u65f6\u5019\u624d\u80fd\u5229\u7528\u8fd9\u79cd\u529f\u80fd. \u6ce8\u610f\u5230\u9664\u6cd5\u5668\u7684\u53d1\u5c04\u65f6\u95f4\u7b49\u4e8e\u5ef6\u8fdf, \u56e0\u6b64\u5fc5\u987b\u5728\u5b8c\u6210\u6574\u4e2a\u9664\u6cd5\u540e\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u4e2a\u9664\u6cd5. \u6211\u4eec\u66f4\u503e\u5411\u4e8e\u4f7f\u7528 \u6700\u5927\u541e\u5410\u91cf \u6765\u8868\u793a\u53d1\u5c04\u65f6\u95f4, \u5b9a\u4e49\u4e3a\u53d1\u5c04\u65f6\u95f4\u7684\u5012\u6570. \u5bf9\u4e8e\u4e00\u4e2a\u5bb9\u91cf\u4e3a C\uff0c\u53d1\u5c04\u65f6\u95f4\u4e3a I \u7684\u64cd\u4f5c\u800c\u8a00\uff0c\u5176\u541e\u5410\u91cf\u4e3a C/I. \u6839\u636e\u4ee5\u4e0a\u6027\u80fd, \u6211\u4eec\u5f97\u5230 CPE \u7684\u4e24\u4e2a\u57fa\u672c\u754c\u9650: \u5ef6\u8fdf\u754c\u9650 \u5ef6\u8fdf\u754c\u9650\u7ed9\u51fa\u4e86\u4efb\u4f55\u5fc5\u987b\u6309\u7167\u4e25\u683c\u987a\u5e8f\u5b8c\u6210\u5408\u5e76\u8fd0\u7b97\u7684\u51fd\u6570\u6240\u9700\u8981\u7684\u6700\u5c0f CPE \u503c. \u5f53\u5b58\u5728 \u6570\u636e\u76f8\u5173 \u65f6\uff0c\u6307\u4ee4\u662f\u4e25\u683c\u987a\u5e8f\u6267\u884c\u7684\uff0c\u610f\u5473\u7740\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7\u6307\u4ee4\u5e76\u884c\u6765\u8fdb\u884c\u52a0\u901f\u3002\u800c\u901a\u8fc7\u53c2\u8003\u673a\u7684\u8fd0\u7b97\u6027\u80fd\u77e5\u9053\u6267\u884c\u6bcf\u79cd\u8fd0\u7b97\u6240\u9700\u7684\u5ef6\u8fdf\uff0c\u5c31\u786e\u5b9a\u4e86\u6267\u884c\u8be5\u8fd0\u7b97\u6240\u9700\u7684\u6700\u5c0f\u65f6\u949f\u5468\u671f\u6570\uff0c\u6b64\u65f6CPE\u7684\u5ef6\u8fdf\u754c\u9650\u5c31\u662f\u8fd0\u7b97\u64cd\u4f5c\u7684\u5ef6\u8fdf. \u541e\u5410\u91cf\u754c\u9650 \u6839\u636e\u529f\u80fd\u5355\u5143\u4ea7\u751f\u7ed3\u679c\u7684\u6700\u5927\u901f\u7387, \u541e\u5410\u91cf\u754c\u9650\u7ed9\u51fa\u4e86 CPE \u7684\u6700\u5c0f\u754c\u9650. \u8868\u793a\u6211\u4eec\u8003\u8651\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7684\u529f\u80fd\u5355\u5143\uff0c\u8ba1\u7b97\u51fa\u6765\u8fd0\u7b97\u7ed3\u679c\u7684\u6700\u5927\u901f\u7387. \u53c2\u8003\u673a\u7684\u4e24\u4e2a\u754c\u9650 \u6574\u6570\u4e58\u6cd5\u7684\u5ef6\u8fdf\u4e3a3\u4e2a\u65f6\u949f\u5468\u671f\uff0c\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u75283\u4e2a\u65f6\u949f\u5468\u671f\u624d\u80fd\u5b8c\u6210\u4e00\u4e2a\u6574\u6570\u4e58\u6cd5\u8fd0\u7b97\uff0c\u4e0d\u53ef\u80fd\u66f4\u5feb\u4e86\uff0c\u6240\u4ee5\u5f53\u524d\u7684CPE\u503c\u4e3a3. \u53c2\u8003\u673a\u542b\u67094\u4e2a\u53ef\u4ee5\u6267\u884c\u6574\u6570\u52a0\u6cd5\u7684\u529f\u80fd\u5355\u5143\uff0c\u4e14\u6574\u6570\u52a0\u6cd5\u7684\u53d1\u5c04\u65f6\u95f4\u4e3a1\uff0c\u6240\u4ee5\u7cfb\u7edf\u6267\u884c\u6574\u6570\u52a0\u6cd5\u7684\u541e\u5410\u91cf\u4e3a4\uff0c\u610f\u5473\u7740CPE\u503c\u4e3a0.25\uff0c\u4f46\u662f\u53c2\u8003\u673a\u4e2d\u53ea\u6709\u4e24\u4e2a\u652f\u6301\u52a0\u8f7d\u7684\u529f\u80fd\u5355\u5143\uff0c\u610f\u5473\u7740\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u53ea\u80fd\u8bfb\u53d6\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u541e\u5410\u91cf\u5c31\u53d7\u5230\u4e86\u52a0\u8f7d\u7684\u9650\u5236\uff0cCPE\u503c\u4e3a0.5\u3002\u518d\u6bd4\u5982\u53c2\u8003\u673a\u5185\u53ea\u542b\u6709\u4e00\u4e2a\u80fd\u6267\u884c\u6574\u6570\u4e58\u6cd5\u7684\u529f\u80fd\u5355\u5143\uff0c\u8bf4\u660e\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u6574\u6570\u4e58\u6cd5\uff0c\u6b64\u65f6\u6027\u80fd\u541e\u5410\u91cf\u5c31\u53d7\u5230\u4e86\u529f\u80fd\u5355\u5143\u8fd0\u7b97\u7684\u9650\u5236\uff0cCPE\u503c\u4e3a1. \u5904\u7406\u5668\u64cd\u4f5c\u7684\u62bd\u8c61\u6a21\u578b \u00b6 \u6211\u4eec\u4f7f\u7528\u7a0b\u5e8f\u7684 \u6570\u636e\u6d41(data-flow) \u8868\u793a, \u5c55\u793a\u4e86\u4e0d\u540c\u64cd\u4f5c\u4e4b\u95f4\u7684\u6570\u636e\u76f8\u5173\u662f\u5982\u4f55\u9650\u5236\u4ed6\u4eec\u7684\u6267\u884c\u5355\u5143\u7684. \u8fd9\u4e9b\u9650\u5236\u5f62\u6210\u4e86\u56fe\u4e2d\u7684 \u5173\u952e\u8def\u5f84(critical path) , \u8fd9\u662f\u6267\u884c\u4e00\u7ec4\u673a\u5668\u6307\u4ee4\u6240\u9700\u65f6\u949f\u5468\u671f\u6570\u7684\u4e00\u4e2a\u4e0b\u754c. \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u770b\u5230\u9664\u4e86\u6574\u6570\u52a0\u6cd5, \u6d4b\u91cf\u503c\u4e0e\u5904\u7406\u5668\u7684\u5ef6\u8fdf\u754c\u9650\u662f\u4e00\u6837\u7684, \u8fd9\u8868\u660e\u8fd9\u4e9b\u51fd\u6570\u7684\u6027\u80fd\u662f\u7531\u6c42\u548c/\u4e58\u79ef\u8fd0\u7b97\u4e3b\u5bfc, \u800c\u4e14\u5b58\u5728\u6570\u636e\u76f8\u5173. \u4ece\u673a\u5668\u7ea7\u4ee3\u7801\u5230\u6570\u636e\u6d41\u56fe \u00b6 \u5bf9\u4e8e\u5f62\u6210\u5faa\u73af\u7684\u4ee3\u7801\u7247\u6bb5, \u6211\u4eec\u5c06\u8bbf\u95ee\u5230\u7684\u5bc4\u5b58\u5668\u5206\u4e3a\u56db\u7c7b: \u53ea\u8bfb: \u8fd9\u4e9b\u5bc4\u5b58\u5668\u53ea\u7528\u4e8e\u6e90\u503c, \u5728\u5faa\u73af\u4e2d\u4e0d\u4f1a\u88ab\u4fee\u6539. \u53ea\u5199: \u8fd9\u4e9b\u5bc4\u5b58\u5668\u4f5c\u4e3a\u6570\u636e\u4f20\u9001\u64cd\u4f5c\u7684\u76ee\u7684. \u5c40\u90e8: \u8fd9\u4e9b\u5bc4\u5b58\u5668\u5728\u5faa\u73af\u5185\u90e8\u88ab\u4fee\u6539\u548c\u4f7f\u7528, \u8fed\u4ee3\u548c\u8fed\u4ee3\u4e4b\u95f4\u4e0d\u76f8\u5173. \u5faa\u73af: \u5bf9\u5faa\u73af\u6765\u8bf4\u8fd9\u4e9b\u5bc4\u5b58\u5668\u65e2\u4f5c\u4e3a\u6e90\u503c, \u53c8\u4f5c\u4e3a\u76ee\u7684, \u4e00\u6b21\u8fed\u4ee3\u4e2d\u4ea7\u751f\u7684\u503c\u4f1a\u5728\u53e6\u4e00\u6b21\u8fed\u4ee3\u4e2d\u7528\u5230. \u4ee5 combine4 \u4e3a\u4f8b \u8f6c\u5316\u4e3a\u6570\u636e\u6d41\u56fe: \u4e0a\u65b9\u5bc4\u5b58\u5668\u4e3a\u8f93\u5165\u7684\u5bc4\u5b58\u5668\uff0c\u4e0b\u65b9\u5bc4\u5b58\u5668\u4e3a\u8f93\u51fa\u7684\u5bc4\u5b58\u5668\uff0c\u4ece\u5bc4\u5b58\u5668\u6307\u5411\u64cd\u4f5c\u7684\u7bad\u5934\u8868\u793a\u8be5\u64cd\u4f5c\u8bfb\u53d6\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u64cd\u4f5c\u6307\u5411\u5bc4\u5b58\u5668\u8868\u793a\u64cd\u4f5c\u7684\u7ed3\u679c\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u5982\u679c\u67d0\u4e9b\u64cd\u4f5c\u4ea7\u751f\u7684\u503c\u4e0d\u5bf9\u5e94\u4e8e\u4efb\u4f55\u5bc4\u5b58\u5668\uff0c\u5c31\u5728\u64cd\u4f5c\u95f4\u7528\u5f27\u7ebf\u8fde\u63a5\u8d77\u6765\u3002\u5176\u4e2d vmulsd (%rdx), %xmm0, %xmm0 \u5305\u542b\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6(%rdx)\u7684\u503c\uff0c\u7136\u540e\u8ba1\u7b97\u6d6e\u70b9\u6570\u4e58\u6cd5\u7684\u57fa\u672c\u64cd\u4f5c. \u5176\u4e2d %rax \u662f\u53ea\u8bfb\u5bc4\u5b58\u5668, %rdx \u548c %xmm0 \u662f\u5faa\u73af\u5bc4\u5b58\u5668. \u6211\u4eec\u5c06\u6570\u636e\u6d41\u56fe\u505a\u4fee\u6539, \u5220\u9664\u975e\u5faa\u73af\u5bc4\u5b58\u5668\u4ee5\u5916\u7684\u5bc4\u5b58\u5668\uff0c\u5e76\u5220\u9664\u4e0d\u5728\u5faa\u73af\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u64cd\u4f5c\uff0c\u5f97\u5230\u4ee5\u4e0b\u7b80\u5316\u7684\u6570\u636e\u6d41\u56fe. \u6211\u4eec\u5c06 combine4 \u7684\u5185\u5faa\u73af\u91cd\u590d n \u6b21, \u5373\u53ef\u5f97\u5230\u5faa\u73af\u7684\u6570\u636e\u6d41\u8868\u793a. \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u6709\u4e24\u6761\u6570\u636e\u76f8\u5173\u94fe. \u5047\u8bbe\u6d6e\u70b9\u4e58\u6cd5\u5ef6\u8fdf\u4e3a 5 \u4e2a\u5468\u671f, \u6574\u6570\u52a0\u6cd5\u5ef6\u8fdf\u4e3a 1 \u4e2a\u5468\u671f, \u90a3\u4e48\u5de6\u8fb9\u7684\u94fe\u4f1a\u6210\u4e3a\u5173\u952e\u8def\u5f84. \u81f3\u5c11\u9700\u8981 5n \u4e2a\u5468\u671f\u6267\u884c. \u5faa\u73af\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u64cd\u4f5c\u94fe\u51b3\u5b9a\u4e86\u9650\u5236\u6027\u80fd\u7684\u6570\u636e\u76f8\u5173. \u5176\u4ed6\u6027\u80fd\u56e0\u7d20 \u00b6 \u6570\u636e\u6d41\u4e2d\u7684\u5173\u952e\u8def\u5f84\u53ea\u662f\u63d0\u4f9b\u7a0b\u5e8f\u9700\u8981\u5468\u671f\u6570\u7684 \u4e0b\u754c \uff0c\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u56e0\u7d20\u4f1a\u9650\u5236\u6027\u80fd\u3002 e.g. combine4 \u4e2d\u5f53\u6211\u4eec\u5c06\u5de6\u4fa7\u7684\u64cd\u4f5c\u53d8\u4e3a\u6574\u6570\u52a0\u6cd5\u65f6\uff0c\u6839\u636e\u6570\u636e\u6d41\u9884\u6d4b\u7684CPE\u5e94\u8be5\u4e3a1\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u91cc\u7684\u64cd\u4f5c\u53d8\u5f97\u5f88\u5feb\uff0c\u4f7f\u5f97\u5176\u4ed6\u64cd\u4f5c\u4f9b\u5e94\u6570\u636e\u7684\u901f\u5ea6\u4e0d\u591f\u5feb\uff0c\u9020\u6210\u5b9e\u9645\u5f97\u5230\u7684CPE\u4e3a1.27. \u7ec3\u4e60\u9898 5.5 & 5.6 double poly ( double a [], double x , long degree ) { long i ; double result = a [ 0 ]; double xpwr = x ; for ( i = 1 ; i <= degree ; i ++ ){ result += a [ i ] * xpwr ; xpwr = x * xpwr ; } return result ; } double polyh ( double a [], double x , long degree ) { long i ; double result = a [ degree ]; for ( i = degree -1 ; i >= 0 ; i -- ){ result = a [ i ] + x * result ; } return result ; } \u6211\u4eec\u6d4b\u91cf\u53d1\u73b0 poly \u7684 CPE \u4e3a 5.00, \u4f46 polyh \u7684 CPE \u4e3a 8.00, \u4e3a\u4ec0\u4e48? polyh \u4e0d\u96be\u7406\u89e3, \u56e0\u4e3a\u4e58\u6cd5\u5fc5\u987b\u5728\u52a0\u6cd5\u5b8c\u6210\u540e\u624d\u80fd\u6267\u884c, \u6240\u4ee5\u662f 5+3=8. \u800c poly \u51fd\u6570\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0, a[i] * xpwr \u548c x * xpwe \u7684\u8ba1\u7b97\u548c result \u65e0\u5173, \u6211\u4eec\u53ef\u4ee5\u628a result \u653e\u5728\u4e0b\u4e00\u6b21\u5faa\u73af\u4e2d\u548c\u4e24\u4e2a\u4e58\u6cd5\u5e76\u884c\u8ba1\u7b97, \u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5728\u8fd9\u6b21\u5faa\u73af\u4e2d\u5148\u4e58\u6cd5\u518d\u52a0\u6cd5\u4e86. be like: \u56e0\u6b64\u5bf9\u4e00\u4e2a\u6570\u636e\u6d41\u56fe, \u6211\u4eec \u53ea\u9700\u8981\u5173\u6ce8\u5faa\u73af\u5bc4\u5b58\u5668\u7684\u6570\u636e\u76f8\u5173\u94fe , \u5373\u5b83 \u5173\u952e\u8def\u5f84\u4e0a\u7684\u64cd\u4f5c\u6570 . \u4e0a\u9762\u7684\u4f8b\u5b50\u544a\u8bc9\u6211\u4eec, \u51fd\u6570\u5177\u6709\u66f4\u5c11\u7684\u64cd\u4f5c\u4e0d\u610f\u5473\u7740\u5177\u6709\u66f4\u597d\u7684\u6027\u80fd. \u5faa\u73af\u5c55\u5f00 \u00b6 \u5faa\u73af\u5c55\u5f00\u662f\u4e00\u79cd\u7a0b\u5e8f\u53d8\u6362, \u901a\u8fc7\u589e\u52a0\u6bcf\u6b21\u8fed\u4ee3\u8ba1\u7b97\u7684\u5143\u7d20\u7684\u6570\u91cf, \u51cf\u5c11\u5faa\u73af\u7684\u8fed\u4ee3\u6b21\u6570. \u5b83\u51cf\u5c11\u4e86\u4e0d\u76f4\u63a5\u6709\u52a9\u4e8e\u7a0b\u5e8f\u7ed3\u679c\u7684\u64cd\u4f5c\u7684\u6570\u91cf, \u4f8b\u5982\u5faa\u73af\u7d22\u5f15\u8ba1\u7b97\u548c\u6761\u4ef6\u5206\u652f; \u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u6765\u8fdb\u4e00\u6b65\u53d8\u5316\u4ee3\u7801, \u51cf\u5c11\u6574\u4e2a\u8ba1\u7b97\u4e2d\u5173\u952e\u8def\u5f84\u4e0a\u7684\u64cd\u4f5c\u6570\u91cf. \u8fd9\u91cc\u4f7f\u7528\u4e00\u79cd\"k*1 \u5faa\u73af\u5c55\u5f00\"\u7684\u65b9\u6cd5, \u7b2c\u4e00\u4e2a\u5faa\u73af\u6bcf\u6b21\u5904\u7406\u6570\u7ec4\u7684 k \u4e2a\u5143\u7d20, \u7b2c\u4e8c\u4e2a\u5faa\u73af\u5904\u7406\u5269\u4e0b\u8fd8\u6ca1\u5904\u7406\u7684\u5143\u7d20(\u56e0\u4e3a\u6570\u7ec4\u957f\u5ea6\u4e0d\u4e00\u5b9a\u662f k \u7684\u500d\u6570). Example // 2 * 1 loop unrolling void combine5 ( vec_ptr v , data_t * dest ) { long i ; long length = vec_length ( v ); long limit = length -1 ; data_t * data = get_vec_start ( v ); data_t acc = IDENT ; for ( i = 0 ; i < limit ; i += 2 ){ acc = ( acc OP data [ i ]) OP data [ i + 1 ]; } for (; i < length ; i ++ ){ acc = acc OP data [ i ]; } return acc ; } \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230, \u6574\u6570\u52a0\u6cd5\u7684\u4e00\u4e2a\u5468\u671f\u7684\u5ef6\u8fdf\u6210\u4e3a\u4e86\u9650\u5236\u6027\u80fd\u7684\u56e0\u7d20. \u5f53\u6211\u4eec\u4e0d\u65ad\u589e\u52a0 k \u7684\u5927\u5c0f\u65f6, \u6211\u4eec\u53d1\u73b0 CPE \u7684\u6d4b\u91cf\u503c\u6ca1\u6709\u4e00\u4e2a\u4f4e\u4e8e\u5ef6\u8fdf\u754c\u9650. \u6211\u4eec\u753b\u51fa\u4ed6\u7b80\u5316\u540e\u7684\u6570\u636e\u6d41\u56fe: \u867d\u7136\u5faa\u73af\u5c55\u5f00\u4e86 2 \u6b21, \u4f46\u5173\u952e\u8def\u5f84\u8fd8\u662f n \u4e2a mul \u64cd\u4f5c. Info \u7f16\u8bd1\u5668\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u505a\u5230\u5faa\u73af\u5c55\u5f00. \u7528\u4f18\u5316\u7b49\u7ea7 3 \u6216\u66f4\u9ad8\u7b49\u7ea7\u8c03\u7528 GCC, \u5b83\u5c31\u4f1a\u6267\u884c\u5faa\u73af\u5c55\u5f00. \u63d0\u9ad8\u5e76\u884c\u6027 \u00b6 \u591a\u4e2a\u7d2f\u79ef\u53d8\u91cf \u00b6 \u5047\u8bbe\u8fd9\u91cc\u6709 \\(a_0,a_1,\\ldots,a_{n-1}\\) \u4e2a\u5143\u7d20, \u6211\u4eec\u8981\u8ba1\u7b97 \\(P_n=\\prod\\limits_{i=0}^{n-1}a_i\\) . \u53ef\u4ee5\u901a\u8fc7 \\(PE_n=\\prod\\limits_{i=0}^{n/2-1}a_{2i}\\quad PO_n=\\prod\\limits_{i=0}^{n/2-1}a_{2i+1}\\) \u5219 \\(P_n=PE_n\\times PO_n\\) \u5f97\u5230. \u63a8\u5e7f\u4e0a\u8ff0\u601d\u8def, \u6211\u4eec\u5f97\u5230\u4e00\u79cd \"k*k \u5faa\u73af\u5c55\u5f00\u65b9\u6cd5\"\uff0c\u5c06\u4e00\u4e2a\u5faa\u73af\u5c55\u5f00\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u6bcf\u6b21\u5faa\u73af\u5904\u7406k\u4e2a\u5143\u7d20\uff0c\u80fd\u591f\u51cf\u5c11\u5faa\u73af\u6b21\u6570\uff0c\u5e76\u4e14\u5f15\u5165k\u4e2a\u53d8\u91cf\u4fdd\u5b58\u7ed3\u679c\uff1b\u7b2c\u4e8c\u90e8\u5206\u5904\u7406\u5269\u4e0b\u8fd8\u6ca1\u8ba1\u7b97\u7684\u5143\u7d20\uff0c\u662f\u9010\u4e2a\u8fdb\u884c\u8ba1\u7b97\u7684. Example ``` C // 2 * 2 loop unrolling void combine5(vec_ptr v, data_t dest) { long i; long length = vec_length(v); long limit = length-1; data_t data = get_vec_start(v); data_t acc0 = IDENT; data_t acc1 = IDENT; for(i=0; i<limit; i+=2){ acc0 = acc0 OP data[i]; acc1 = acc1 OP data[i+1]; } for(; i<length; i++){ acc0 = acc0 OP data[i]; } *dest = acc0 OP acc1; } ``` \u6211\u4eec\u53d1\u73b0\u6211\u4eec\u7a81\u7834\u4e86\u5ef6\u8fdf\u754c\u9650. \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u6709\u4e24\u6761\u5173\u952e\u8def\u5f84, \u4e00\u6761\u8ba1\u7b97\u7d22\u5f15\u4e3a\u5076\u6570\u7684\u5143\u7d20(acc0) \u53e6\u4e00\u6761\u8ba1\u7b97\u7d22\u5f15\u4e3a\u5947\u6570\u7684\u5143\u7d20(acc1), \u6bcf\u6761\u5173\u952e\u8def\u5f84\u53ea\u5305\u542b n/2 \u4e2a\u64cd\u4f5c, \u56e0\u6b64\u7406\u60f3\u72b6\u6001\u53ef\u4ee5\u4f7f CPE \u51cf\u534a. \u5f53 k \u8db3\u591f\u5927\u65f6, \u7a0b\u5e8f\u5728\u6240\u6709\u60c5\u51b5\u51e0\u4e4e\u90fd\u80fd\u8fbe\u5230 \u541e\u5410\u91cf\u754c\u9650 . \u4e3a\u4e86\u63a5\u8fd1\u541e\u5410\u91cf\u754c\u9650\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u529f\u80fd\u5355\u5143\uff0c\u5e76\u4e14\u4fdd\u8bc1\u529f\u80fd\u5355\u5143\u7684\u6d41\u6c34\u7ebf\u59cb\u7ec8\u662f\u6162\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5bb9\u91cf\u4e3a C\u3001\u5ef6\u8fdf\u4e3a L \u7684\u64cd\u4f5c\u800c\u8a00\uff0c\u9700\u8981\u8bbe\u7f6e \\(k\\geq C\\cdot L\\) (\u6700\u5feb\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c). \u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f, \u6211\u4eec\u9700\u8981\u7533\u8bf7 k \u4e2a\u5c40\u90e8\u53d8\u91cf\u6765\u4fdd\u5b58\u4e2d\u95f4\u7ed3\u679c. \u4f46\u5982\u679c k \u5927\u4e8e\u4e86\u5bc4\u5b58\u5668\u7684\u6570\u76ee, \u7ed3\u679c\u5c31\u4f1a\u88ab\u4fdd\u5b58\u5728\u5806\u6808\u4e2d, \u8fd9\u5c31\u9700\u8981\u6211\u4eec\u53cd\u590d\u8bfb\u5199\u5185\u5b58, \u9020\u6210\u6027\u80fd\u635f\u5931. \u91cd\u65b0\u7ed3\u5408\u53d8\u6362 \u00b6 \u6211\u4eec\u6539\u53d8\u5408\u5e76\u6267\u884c\u7684\u65b9\u5f0f, \u4e5f\u80fd\u6781\u5927\u5730\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd. Example \u6211\u4eec\u5c06 combine5(2 1 \u5c55\u5f00)\u4e2d acc = (acc OP data[i]) OP data[i+1]; \u53d8\u4e3a combine7 \u4e2d\u7684 acc = acc OP (data[i] OP data[i+1]; \u8fd9\u79f0\u4e3a \"2 1a \u5faa\u73af\u5c55\u5f00\", \u6211\u4eec\u89c2\u5bdf\u5b83\u7684\u6027\u80fd, \u53d1\u73b0\u5b83\u4e5f\u7a81\u7834\u4e86\u5ef6\u8fdf\u754c\u9650: \u5176\u6570\u636e\u6d41\u56fe: \u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u5173\u952e\u8def\u5f84\u4e0a\u53ea\u6709\u4e00\u4e2a mul (\u53e6\u4e00\u4e2a mul \u53ef\u4ee5\u5229\u7528\u7ec3\u4e60\u9898 5.5 \u7c7b\u4f3c\u7684\u601d\u8def), \u800c\u4e14\u5173\u952e\u8def\u5f84\u4e0a\u53ea\u6709 n/2 \u4e2a\u64cd\u4f5c, \u56e0\u6b64\u6700\u5c0f\u53ef\u80fd\u7684 CPE \u51cf\u534a. \u9650\u5236\u56e0\u7d20 \u00b6 \u5bc4\u5b58\u5668\u6ea2\u51fa \u00b6 \u5982\u679c\u6211\u4eec\u7684\u5e76\u884c\u5ea6 p \u8d85\u8fc7\u4e86\u53ef\u7528\u7684\u5bc4\u5b58\u5668\u7684\u6570\u91cf, \u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u8bc9\u8bf8\u6ea2\u51fa, \u5c06\u67d0\u4e9b\u4e34\u65f6\u4e4b\u5b58\u653e\u5230\u5185\u5b58\u4e2d, \u901a\u5e38\u662f\u5728\u5806\u6808\u4e0a\u5206\u914d\u7a7a\u95f4. \u5206\u652f\u9884\u6d4b\u548c\u9884\u6d4b\u9519\u8bef\u60e9\u7f5a \u00b6 \u5f53\u5206\u652f\u9884\u6d4b\u903b\u8f91\u4e0d\u80fd\u6b63\u786e\u9884\u6d4b\u4e00\u4e2a\u5206\u652f\u662f\u5426\u8981\u8df3\u8f6c\u65f6, \u6761\u4ef6\u5206\u652f\u53ef\u80fd\u4f1a\u62db\u81f4\u5f88\u5927\u7684\u9884\u6d4b\u9519\u8bef\u60e9\u7f5a. \u4e0d\u8981\u8fc7\u5206\u5173\u5fc3\u53ef\u9884\u6d4b\u7684\u5206\u652f \u00b6 \u5b9e\u9645\u4e0a, \u73b0\u4ee3\u5904\u7406\u5668\u4e2d\u7684\u5206\u652f\u9884\u6d4b\u903b\u8f91\u975e\u5e38\u5584\u4e8e\u8fa8\u522b\u4e0d\u540c\u5206\u652f\u6307\u4ee4\u7684\u6709\u89c4\u5f8b\u7684\u6a21\u5f0f\u548c\u957f\u671f\u8d8b\u52bf. \u800c\u4e14\u6267\u884c\u8fb9\u754c\u68c0\u6d4b\u6240\u9700\u7684\u989d\u5916\u8fd0\u53ef\u4ee5\u4e0e\u5408\u5e76\u64cd\u4f5c\u5e76\u5b58\u6267\u884c, \u6240\u4ee5\u8fd9\u4e9b\u6c42\u503c\u90fd\u4e0d\u4f1a\u5bf9\u5f62\u6210\u7a0b\u5e8f\u6267\u884c\u4e2d\u5173\u952e\u8def\u5f84\u7684\u6307\u4ee4\u7684\u53d6\u503c\u548c\u5904\u7406\u4ea7\u751f\u592a\u5927\u7684\u5f71\u54cd. \u4e66\u5199\u9002\u5408\u4f7f\u7528\u6761\u4ef6\u4f20\u9001\u5b9e\u73b0\u7684\u4ee3\u7801 \u00b6 \u5bf9\u4e8e\u672c\u8d28\u65e0\u6cd5\u9884\u6d4b\u7684\u60c5\u51b5, \u5982\u679c\u7f16\u8bd1\u5668\u80fd\u4ea7\u751f\u4f7f\u7528\u6761\u4ef6\u4f20\u9001\u800c\u4e0d\u662f\u4f7f\u7528\u6761\u4ef6\u63a7\u5236\u8f6c\u79fb\u7684\u4ee3\u7801, \u53ef\u4ee5\u6781\u5927\u5730\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd. \u4f46\u8981\u6ce8\u610f, \u4e0d\u662f\u6240\u6709\u7684\u6761\u4ef6\u884c\u4e3a\u90fd\u80fd\u7528\u6761\u4ef6\u6570\u636e\u4f20\u9001\u6765\u5b9e\u73b0. \u7406\u89e3\u5185\u5b58\u6027\u80fd \u00b6 \u52a0\u8f7d\u7684\u6027\u80fd \u00b6 \u4e00\u4e2a\u5305\u542b\u52a0\u8f7d\u64cd\u4f5c\u7684\u7a0b\u5e8f\u7684\u6027\u80fd\u65e2\u4f9d\u8d56\u4e8e\u6d41\u6c34\u7ebf\u7684\u80fd\u529b, \u4e5f\u4f9d\u8d56\u4e8e\u52a0\u8f7d\u5355\u5143\u7684\u5ef6\u8fdf. e.g. \u6211\u4eec\u7684\u53c2\u8003\u673a\u5305\u542b\u4e24\u4e2a\u52a0\u8f7d\u529f\u80fd\u5355\u5143\uff0c\u610f\u5473\u7740\u5f53\u6d41\u6c34\u7ebf\u5b8c\u5168\u65f6\uff0c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u6700\u591a\u80fd\u591f\u6267\u884c\u4e24\u4e2a\u52a0\u8f7d\u64cd\u4f5c\uff0c\u7531\u4e8e\u6bcf\u4e2a\u5143\u7d20\u7684\u8ba1\u7b97\u9700\u8981\u52a0\u8f7d\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5CPE\u7684\u6700\u5c0f\u503c\u53ea\u80fd\u662f0.5\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u7684\u8ba1\u7b97\u9700\u8981\u52a0\u8f7dk\u4e2a\u503c\u7684\u5e94\u7528\u800c\u8a00\uff0cCPE\u7684\u6700\u5c0f\u503c\u53ea\u80fd\u662fk/2. \u5728\u4e4b\u524d\u6211\u4eec\u7684\u793a\u4f8b\u4e2d, \u52a0\u8f7d\u64cd\u4f5c\u53ea\u4f9d\u8d56\u5faa\u73af\u7d22\u5f15 i, \u4e0d\u5b58\u5728\u6570\u636e\u76f8\u5173, \u56e0\u6b64\u52a0\u8f7d\u4e0d\u4f1a\u79f0\u4e3a\u5173\u952e\u8def\u5f84\u4e0a\u7684\u64cd\u4f5c. \u94fe\u8868 typedef struct ELE { struct ELE * next ; long data ; } list_ele , * list_ptr ; long list_len ( list_ptr ls ) { long len = 0 ; while ( ls ) { len ++ ; ls = ls -> next ; } return len ; } \u5176\u6570\u636e\u6d41\u56fe: \u56e0\u6b64\u52a0\u8f7d\u64cd\u4f5c\u51fa\u73b0\u5728\u5173\u952e\u8def\u5f84\u4e0a. \u8fd9\u4e2a\u4f8b\u5b50\u6d4b\u51fa CPE \u4e3a 4.0. \u5b58\u50a8\u7684\u6027\u80fd \u00b6 \u5b58\u50a8\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u4efb\u4f55\u5bc4\u5b58\u5668, \u56e0\u6b64\u4e00\u7cfb\u5217\u5b58\u50a8\u64cd\u4f5c\u4e0d\u4f1a\u4ea7\u751f\u6570\u636e\u76f8\u5173. \u53ea\u6709\u52a0\u8f7d\u64cd\u4f5c\u4f1a\u53d7\u5b58\u50a8\u64cd\u4f5c\u5f71\u54cd. \u4e00\u4e2a\u5185\u5b58\u8bfb\u7684\u7ed3\u679c\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u6700\u8fd1\u7684\u5185\u5b58\u5199, \u6211\u4eec\u79f0\u4e4b\u4e3a \u5199/\u8bfb\u76f8\u5173 . \u5b58\u50a8\u5355\u5143\u5305\u542b\u4e00\u4e2a \u5b58\u50a8\u7f13\u51b2\u533a , \u5b83\u5305\u542b\u5df2\u7ecf\u88ab\u53d1\u5c04\u5230\u5b58\u50a8\u5355\u5143\u800c\u53c8\u6ca1\u6709\u5b8c\u6210\u7684\u5b58\u50a8\u64cd\u4f5c\u7684\u5730\u5740\u548c\u64cd\u4f5c, \u8fd9\u91cc\u7684\u5b8c\u6210\u5305\u62ec\u66f4\u65b0\u6570\u636e\u9ad8\u901f\u7f13\u5b58. \u5f53\u4e00\u4e2a\u52a0\u8f7d\u64cd\u4f5c\u53d1\u751f\u65f6, \u5b83\u5fc5\u987b\u68c0\u67e5\u5b58\u50a8\u7f13\u51b2\u533a\u4e2d\u7684\u6761\u76ee, \u770b\u662f\u5426\u6709\u5730\u5740\u76f8\u5339\u914d. \u82e5\u6709(\u5b58\u5728\u5199/\u8bfb\u76f8\u5173)\u5c31\u53d6\u51fa\u5bf9\u5e94\u6570\u636e\u6761\u76ee\u4f5c\u4e3a\u52a0\u8f7d\u64cd\u4f5c\u7684\u7ed3\u679c. Example \u6570\u636e\u6d41\u56fe: \u6ce8\u610f\u8fd9\u91cc\u7684\u865a\u7ebf\u6307, \u82e5\u5b58\u5728\u6570\u636e\u76f8\u5173, \u9700\u8981\u5c06\u8981\u5b58\u50a8\u7684\u503c\u8f6c\u53d1\u5230\u52a0\u8f7d\u5f53\u4e2d. \u6807\u53f7 1 \u8868\u793a\u5b58\u50a8\u5730\u5740\u5fc5\u987b\u5728\u6570\u636e\u88ab\u5b58\u50a8\u4e4b\u524d\u8ba1\u7b97\u51fa\u6765, 2 \u8868\u793a load \u64cd\u4f5c\u8981\u5c06\u5b83\u7684\u5730\u5740\u548c\u6240\u6709\u672a\u5b8c\u6210\u7684\u5b58\u50a8\u64cd\u4f5c\u7684\u5730\u5740\u6bd4\u8f83, 3 \u8868\u793a\u6570\u636e\u76f8\u5173. \u7b80\u5316\u540e: \u5f53\u6ca1\u6709\u6570\u636e\u76f8\u5173\u65f6(A), CPE \u4e3a 1.00. \u6570\u636e\u76f8\u5173\u65f6(B), CPE \u4e3a 7.00.","title":"\u4f18\u5316\u7a0b\u5e8f\u6027\u80fd"},{"location":"CSAPP/5/#_1","text":"Abstract \u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u5de5\u4f5c \u7406\u89e3\u73b0\u4ee3\u5904\u7406\u5668 \u6570\u636e\u6d41\u56fe \u7406\u89e3\u5185\u5b58\u6027\u80fd","title":"\u4f18\u5316\u7a0b\u5e8f\u6027\u80fd"},{"location":"CSAPP/5/#_2","text":"GCC\u4f18\u5316\u6307\u4ee4 -Og:\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4e0d\u4f18\u5316\u3002 -O1:\u7f16\u8bd1\u5668\u8bd5\u56fe\u4f18\u5316\u4ee3\u7801\u5927\u5c0f\u548c\u6267\u884c\u65f6\u95f4\uff0c\u5b83\u4e3b\u8981\u5bf9\u4ee3\u7801\u7684\u5206\u652f\uff0c\u5e38\u91cf\u4ee5\u53ca\u8868\u8fbe\u5f0f\u7b49\u8fdb\u884c\u4f18\u5316\uff0c\u4f46\u4e0d\u6267\u884c\u4efb\u4f55\u4f1a\u5360\u7528\u5927\u91cf\u7f16\u8bd1\u65f6\u95f4\u7684\u4f18\u5316\u3002 -O2:GCC\u6267\u884c\u51e0\u4e4e\u6240\u6709\u4e0d\u5305\u542b\u65f6\u95f4\u548c\u7a7a\u95f4\u6743\u8861\u7684\u4f18\u5316\uff08\u6bd4\u5982\uff0c\u5c1d\u8bd5\u66f4\u591a\u7684\u5bc4\u5b58\u5668\u7ea7\u7684\u4f18\u5316\u4ee5\u53ca\u6307\u4ee4\u7ea7\u7684\u4f18\u5316\uff09\u3002\u4e0e-O\u76f8\u6bd4\uff0c\u6b64\u9009\u9879\u589e\u52a0\u4e86\u7f16\u8bd1\u65f6\u95f4\uff0c\u4f46\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u6548\u7387\u3002 -O3:\u6bd4-O2\u66f4\u4f18\u5316\uff0c\u5bf9\u4e8e-O3\u7f16\u8bd1\u9009\u9879\uff0c\u5728-O2\u7684\u57fa\u7840\u4e0a\uff0c\u6253\u5f00\u4e86\u66f4\u591a\u7684\u4f18\u5316\u9879\uff08\u6bd4\u5982\uff0c\u4f7f\u7528\u4f2a\u5bc4\u5b58\u5668\u7f51\u7edc\uff0c\u666e\u901a\u51fd\u6570\u7684\u5185\u8054\uff0c\u4ee5\u53ca\u9488\u5bf9\u5faa\u73af\u7684\u66f4\u591a\u4f18\u5316\uff09\u3002\u4e0d\u8fc7\u53ef\u80fd\u5bfc\u81f4\u7f16\u8bd1\u51fa\u6765\u7684\u4e8c\u7ea7\u5236\u7a0b\u5e8f\u4e0d\u80fddebug\u3002 -Os:\u4e3b\u8981\u662f\u5bf9\u4ee3\u7801\u5927\u5c0f\u7684\u4f18\u5316\uff0c\u6211\u4eec\u57fa\u672c\u4e0d\u7528\u505a\u66f4\u591a\u7684\u5173\u5fc3\u3002 \u901a\u5e38\u5404\u79cd\u4f18\u5316\u90fd\u4f1a\u6253\u4e71\u7a0b\u5e8f\u7684\u7ed3\u6784\uff0c\u8ba9\u8c03\u8bd5\u5de5\u4f5c\u53d8\u5f97\u65e0\u4ece\u7740\u624b\u3002\u5e76\u4e14\u4f1a\u6253\u4e71\u6267\u884c\u987a\u5e8f\uff0c\u4f9d\u8d56\u5185\u5b58\u64cd\u4f5c\u987a\u5e8f\u7684\u7a0b\u5e8f\u9700\u8981\u505a\u76f8\u5173\u5904\u7406\u624d\u80fd\u786e\u4fdd\u7a0b\u5e8f\u7684\u6b63\u786e\u6027\u3002 \u59a8\u788d\u4f18\u5316\u7684\u56e0\u7d20: \u5185\u5b58\u522b\u540d\u4f7f\u7528(memory aliasing) \u5728\u53ea\u6267\u884c\u5b89\u5168\u7684\u4f18\u5316\u4e2d, \u7f16\u8bd1\u5668\u5fc5\u987b\u5047\u8bbe \u4e0d\u540c\u7684\u6307\u9488 \u53ef\u80fd\u4f1a\u6307\u5411\u5185\u5b58\u4e2d\u7684 \u540c\u4e00\u4e2a\u4f4d\u7f6e . Example void twiddle1 ( long * xp , long * yp ) { * xp + = * yp ; * xp + = * yp ; } void twiddle2 ( long * xp , long * yp ) { * xp + = 2 * * yp ; } \u8868\u9762\u4e0a, twiddle1 \u9700\u8981 6 \u6b21\u5185\u5b58\u5f15\u7528(2 \u6b21\u8bfb xp, 2 \u6b21\u8bfb yp, 2 \u6b21\u5199 xp), \u800c twiddle2 \u53ea\u9700\u8981 3 \u6b21\u5185\u5b58\u5f15\u7528(1 \u6b21\u8bfb xp, 1 \u6b21\u8bfb yp, 1 \u6b21\u5199 xp). \u4f46\u5f53 xp \u548c yp \u5f15\u7528\u7684\u662f\u540c\u4e00\u5730\u5740\u65f6, twiddle1 \u4f1a\u8ba9 xp \u53d8\u4e3a\u539f\u6765\u7684 4 \u500d, \u800c twiddle2 \u4f1a\u8ba9 xp \u53d8\u4e3a\u539f\u6765\u7684 3 \u500d, \u56e0\u6b64\u7f16\u8bd1\u5668\u4e0d\u4f1a\u4ea7\u751f twiddle2 \u7684\u4ee3\u7801\u4f5c\u4e3a twiddle1 \u7684\u4f18\u5316\u7248\u672c. \u51fd\u6570\u8c03\u7528 Example long f (); long func1 () { return f () + f () + f () + f (); } long func2 () { return 4 * f (); } func2 \u53ea\u8c03\u7528 f \u4e00\u6b21, \u4f46 func1 \u4f1a\u8c03\u7528\u56db\u6b21. \u4f46\u662f\u5f53\u51fd\u6570\u6709\u526f\u4f5c\u7528\u65f6--\u5b83\u4f1a\u6539\u53d8\u5168\u5c40\u7a0b\u5e8f\u72b6\u6001\u7684\u4e00\u90e8\u5206, \u90a3\u4e48\u6539\u53d8\u8c03\u7528\u5b83\u7684\u6b21\u6570\u4f1a\u6539\u53d8\u7a0b\u5e8f\u7684\u884c\u4e3a. \u56e0\u6b64\u5927\u591a\u6570\u7f16\u8bd1\u5668\u4e5f\u4e0d\u4f1a\u5bf9\u6b64\u505a\u4f18\u5316.","title":"\u4f18\u5316\u7f16\u8bd1\u5668\u7684\u80fd\u529b\u548c\u5c40\u9650"},{"location":"CSAPP/5/#_3","text":"\u7a0b\u5e8f\u6027\u80fd\u8861\u91cf\u6807\u51c6: \u6bcf\u5143\u7d20\u7684\u5468\u671f\u6570(CPE i.e. Cycles Per Element). Example // Compute prefix sum of vector a void psum1 ( float a [], float p [], long n ) { long i ; p [ 0 ] = a [ 0 ]; for ( i = 1 ; i < n ; i ++ ) p [ i ] = p [ i -1 ] + a [ i ]; } void psum2 ( float a [], float p [], long n ) { long i ; p [ 0 ] = a [ 0 ]; for ( i = 1 ; i < n -1 ; i += 2 ) { float mid_val = p [ i -1 ] + a [ i ]; p [ i ] = mid_val ; p [ i + 1 ] = mid_val + a [ i + 1 ]; } if ( i < n ) p [ i ] = p [ i -1 ] + a [ i ]; } psum1 \u6bcf\u6b21\u8ba1\u7b97\u5411\u91cf\u7684\u4e00\u4e2a\u5143\u7d20, psum2 \u6bcf\u6b21\u8ba1\u7b97\u4e24\u4e2a\u5143\u7d20(\u5faa\u73af\u5c55\u5f00). \u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\u6240\u9700\u8981\u7684\u65f6\u95f4\u6211\u4eec\u53ef\u4ee5\u7528 \u6700\u5c0f\u4e8c\u4e58\u6cd5 \u6765\u62df\u5408. \u5176\u4e2d psum1: 368+9.0n, psum2: 368+6.0n. \u8fd9\u4e9b\u9879\u4e2d\u7684\u7cfb\u6570\u79f0\u4e3a CPE .","title":"\u8868\u793a\u7a0b\u5e8f\u6027\u80fd"},{"location":"CSAPP/5/#_4","text":"Example void lower1 ( char * s ) { size_t i ; for ( i = 0 ; i < strlen ( s ); i ++ ) if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) s [ i ] -= ( 'A' - 'a' ); } void lower2 ( char * s ) { size_t i ; size_t len = strlen ( s ); /*\u653e\u5728\u51fd\u6570\u4f53\u5916*/ for ( i = 0 ; i < len ; i ++ ) if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) s [ i ] -= ( 'A' - 'a' ); } \u7531\u4e8e\u5faa\u73af\u7ed3\u6784\u7684\u6548\u7387\u6bd4\u8f83\u4f4e, \u521d\u59cb\u4ee3\u7801 lower1 \u7684\u8fd0\u884c\u65f6\u95f4\u662f\u4e8c\u6b21\u9879\u7684, \u4fee\u6539\u8fc7\u7684\u4ee3\u7801 lower2 \u7684\u8fd0\u884c\u65f6\u95f4\u662f\u7ebf\u6027\u7684. \u56e0\u4e3a lower1 \u7684 n \u6b21\u8fed\u4ee3\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u8c03\u7528 strlen \u51fd\u6570, \u800c strlen \u6240\u7528\u65f6\u95f4\u53c8\u4e0e n \u6210\u6b63\u6bd4, \u56e0\u6b64\u6574\u4f53\u8fd0\u884c\u65f6\u95f4\u662f n^2. \u540c\u65f6\u56e0\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u5728\u8fd0\u884c\u4e2d\u6539\u53d8, \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06 strlen \u51fd\u6570\u79fb\u5230\u5faa\u73af\u5916. \u4e0a\u8ff0\u65b9\u6cd5\u79f0\u4e3a \u4ee3\u7801\u79fb\u52a8(code motion) . \u5373\u8bc6\u522b\u8981\u6267\u884c\u591a\u6b21(\u4f8b\u5982\u5728\u5faa\u73af\u91cc)\u4f46\u662f\u8ba1\u7b97\u7ed3\u679c\u4e0d\u4f1a\u6539\u53d8\u7684\u8ba1\u7b97, \u56e0\u800c\u8bb2\u8ba1\u7b97\u79fb\u52a8\u5230\u4ee3\u7801\u524d\u9762\u4e0d\u4f1a\u88ab\u591a\u6b21\u6c42\u503c\u7684\u90e8\u5206. \u4f18\u5316\u7f16\u8bd1\u5668\u4e0d\u80fd\u53ef\u9760\u5730\u53d1\u73b0\u51fd\u6570\u662f\u5426\u6709\u526f\u4f5c\u7528, \u6240\u4ee5\u7a0b\u5e8f\u5458\u5fc5\u987b\u5e2e\u52a9\u7f16\u8bd1\u5668\u663e\u793a\u5730\u5b8c\u6210\u4ee3\u7801\u7684\u79fb\u52a8.","title":"\u6d88\u9664\u5faa\u73af\u7684\u4f4e\u6548\u7387"},{"location":"CSAPP/5/#_5","text":"Example int get_vec_element ( vec_ptr v , long index , data_t * dest ) { if ( index < 0 || index >= v -> len ) return 0 ; // \u8fb9\u754c\u68c0\u67e5 * dest = v -> data [ next ]; return 1 ; } /* Move call to vec_length out of loop */ void combine2 ( vec_ptr v , data_t * dest ) { long i ; long length vec_length ( v ); * dest = IDENT ; for ( i = 0 ; i < length ; i ++ ) { data_t val ; get_vec_element ( v , i , & val ); * dest = * dest OP val ; } } \u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u90fd\u4f1a\u8c03\u7528 get_vec_element \u6765\u83b7\u53d6\u4e0b\u4e00\u4e2a\u5411\u91cf\u5143\u7d20, \u800c\u6bcf\u6b21\u5411\u91cf\u8c03\u7528\u90fd\u6709\u8fb9\u754c\u68c0\u67e5, \u4f1a\u9020\u6210\u4f4e\u6548\u7387. \u4e8e\u662f\u6211\u4eec\u6539\u4e3a\u5982\u4e0b\u7248\u672c: data_t * get_vec_start ( vec_ptr v ) { return v - data ; } /* Move call to vec_length out of loop */ void combine3 ( vec_ptr v , data_t * dest ) { long i ; long length vec_length ( v ); data_t * data = get_vec_start ( v ); * dest = IDENT ; for ( i = 0 ; i < length ; i ++ ) { * dest = * dest OP data [ i ]; } } \u4f46\u8fd9\u6837\u505a\u6ca1\u6709\u5e26\u6765\u6027\u80fd\u4e0a\u660e\u663e\u7684\u63d0\u5347. \u8bf4\u660e\u5185\u5faa\u73af\u4e2d\u7684\u5176\u4ed6\u64cd\u4f5c\u5f62\u6210\u4e86\u5e73\u9759, \u9650\u5236\u6027\u80fd\u8d85\u8fc7\u4e86 get_vec_element.","title":"\u51cf\u5c11\u8fc7\u7a0b\u8c03\u7528"},{"location":"CSAPP/5/#_6","text":"Example #Inner loop of combines. data_t double, OP = #dest in %rbx, data+i in %rdx, data+length in %rax . L17 : vmovsd ( % rbx ), % xmm () # Read product from dest vmulsd ( % rdx ), % xmm0 , % xmm0 # Multiply product by data [ i ] vmovsd % xmm , ( % rbx \uff09 # Store product at dest addq $8 , % rdx # Increment data + i cmp % rax , % rdx # Compare to data + length jne . L17 \u6211\u4eec\u53d1\u73b0 combine3 \u7684\u4ee3\u7801, \u6bcf\u6b21\u8fed\u4ee3\u65f6, \u7d2f\u79ef\u53d8\u91cf\u7684\u6570\u503c\u90fd\u8981\u4ece\u5185\u5b58\u8bfb\u51fa\u518d\u5199\u5165\u5230\u5185\u5b58. \u4e8e\u662f\u6211\u4eec\u5f15\u7528\u4e00\u4e2a\u5386\u53f2\u53d8\u91cf acc \u6765\u8868\u793a\u5728\u5faa\u73af\u4e2d\u7d2f\u79ef\u8ba1\u7b97\u7684\u503c. #Inner loop of combines. data_t double, OP = #dest in %rbx, data+i in %rdx, data+length in %rax . L25 : vmulsd ( % rdx ), % xmm0 , % xmm0 # Multiply product by data [ i ] addq $8 , % rdx # Increment data + i cmp % rax , % rdx # Compare to data + length jne . L25 \u5176\u4fee\u6539\u90e8\u5206: // combine4 * data acc = IDENT ; for ( i = 0 ; i < length ; i ++ ) { acc = acc OP data [ i ]; } \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u6837\u505a\u7a0b\u5e8f\u6027\u80fd\u6709\u4e86\u663e\u8457\u63d0\u9ad8: \u6ce8\u610f\u7684\u662f, \u7531\u4e8e\u5185\u5b58\u522b\u540d\u4f7f\u7528, \u4f18\u5316\u540e\u51fd\u6570\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u884c\u4e3a(\u5982\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u82e5\u6211\u4eec\u5c06\u7b54\u6848\u5b58\u5728\u5411\u91cf\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e, combine3 \u548c combine4 \u5c31\u4e0d\u4f1a\u5f97\u5230\u76f8\u540c\u7684\u7b54\u6848), \u56e0\u6b64\u4e00\u822c\u6765\u8bf4\u7f16\u8bd1\u5668\u4e0d\u4f1a\u4e3a\u6211\u4eec\u505a\u8fd9\u4e00\u6b65\u4f18\u5316.","title":"\u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5f15\u7528"},{"location":"CSAPP/5/#_7","text":"\u4e0a\u8ff0\u4f18\u5316\u90fd\u4e0d\u4f9d\u8d56\u4e8e\u76ee\u6807\u673a\u5668\u7684\u4efb\u4f55\u7279\u6027, \u53ea\u662f\u7b80\u5355\u964d\u4f4e\u4e86\u8fc7\u7a0b\u8c03\u7528\u7684\u5f00\u9500, \u4ee5\u53ca\u6d88\u9664\u4e86\u4e00\u4e9b\u91cd\u5927\u7684\u59a8\u788d\u4f18\u5316\u7684\u56e0\u7d20. \u8981\u8fdb\u4e00\u6b65\u63d0\u9ad8\u6027\u80fd, \u5fc5\u987b\u8003\u8651\u5229\u7528\u5904\u7406\u5668 \u5fae\u4f53\u7cfb\u7ed3\u6784 \u7684\u4f18\u5316. \u5728\u5b9e\u9645\u5904\u7406\u5668\u4e2d\u662f\u540c\u65f6\u5bf9\u591a\u6761\u6307\u4ee4\u6c42\u503c\u7684, \u8fd9\u4e2a\u73b0\u8c61\u79f0\u4e3a \u6307\u4ee4\u7ea7\u5e76\u884c","title":"\u7406\u89e3\u73b0\u4ee3\u5904\u7406\u5668"},{"location":"CSAPP/5/#_8","text":"\u5982\u4e0a\u56fe\u6240\u793a\u662f\u4e00\u4e2a\u7b80\u5316\u7684 Intel \u5904\u7406\u5668\u7684\u7ed3\u6784\uff0c\u5305\u542b\u4e24\u4e2a\u7279\u70b9\uff1a \u8d85\u6807\u91cf(Superscalar) \uff1a\u5904\u7406\u5668\u53ef\u4ee5\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u6267\u884c\u591a\u4e2a\u64cd\u4f5c \u4e71\u5e8f(Out-of-order) \uff1a\u6307\u4ee4\u6267\u884c\u7684\u987a\u5e8f\u4e0d\u4e00\u5b9a\u548c\u673a\u5668\u4ee3\u7801\u7684\u987a\u5e8f\u76f8\u540c\uff0c\u63d0\u9ad8\u6307\u4ee4\u7ea7\u5e76\u884c \u6574\u4e2a\u8bbe\u8ba1\u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206: \u6307\u4ee4\u63a7\u5236\u5355\u5143(Instruction Control Unit) \u901a\u8fc7\u53d6\u503c\u63a7\u5236\u903b\u8f91\u4ece\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\u4e2d\u8bfb\u51fa\u6307\u4ee4\u5e8f\u5217, \u5e76\u6839\u636e\u8fd9\u4e9b\u5e8f\u5217\u751f\u6210\u4e00\u7ec4\u9488\u5bf9\u7a0b\u5e8f\u6570\u636e\u7684\u57fa\u672c\u64cd\u4f5c, \u7136\u540e\u53d1\u9001\u5230 EU \u4e2d. \u53d6\u503c\u63a7\u5236\u903b\u8f91 \u5206\u652f\u9884\u6d4b, \u731c\u6d4b\u662f\u5426\u4f1a\u9009\u62e9\u5206\u652f, \u540c\u65f6\u8fd8\u9884\u6d4b\u5206\u652f\u7684\u76ee\u6807\u5730\u5740. \u6307\u4ee4\u9ad8\u901f\u7f13\u5b58(instruction cache) \u4e00\u4e2a\u7279\u6b8a\u7684\u9ad8\u901f\u5b58\u50a8\u5668, \u5305\u542b\u6700\u8fd1\u8bbf\u95ee\u7684\u6307\u4ee4. ICU \u4f1a\u5728\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u5f88\u65e9\u4e4b\u524d\u53d6\u6307, \u8fd9\u6837\u5b83\u624d\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5bf9\u6307\u4ee4\u8bd1\u7801. \u6307\u4ee4\u8bd1\u7801\u903b\u8f91 \u63a5\u53d7\u5b9e\u9645\u7684\u7a0b\u5e8f\u6307\u4ee4, \u5e76\u5c06\u5b83\u4eec\u8f6c\u6362\u6210\u4e00\u7ec4\u57fa\u672c\u64cd\u4f5c(\u5fae\u64cd\u4f5c). \u6bcf\u4e2a\u8fd9\u6837\u7684\u64cd\u4f5c\u90fd\u5b8c\u6210\u67d0\u4e2a\u7b80\u5355\u7684\u8ba1\u7b97\u4efb\u52a1. e.g. x86 \u4e2d addq %rax, %rdx \u4f1a\u88ab\u8f6c\u5316\u6210\u4e00\u4e2a\u64cd\u4f5c\u4f46 addq %rax, 8(%rdx) \u4f1a\u88ab\u8bd1\u7801\u4e3a\u4e09\u4e2a\u64cd\u4f5c: \u8bfb\u5185\u5b58\u503c, \u505a\u52a0\u6cd5, \u5b58\u56de\u5185\u5b58. \u9000\u5f79\u5355\u5143 \u8bb0\u5f55\u6b63\u5728\u8fdb\u884c\u7684\u5904\u7406, \u5e76\u786e\u4fdd\u5b83\u9075\u5b88\u673a\u5668\u7ea7\u7a0b\u5e8f\u7684\u987a\u5e8f\u8bed\u4e49. \u5b83\u5305\u542b\u5e76\u63a7\u5236\u7740\u5bc4\u5b58\u5668\u6587\u4ef6\u7684\u66f4\u65b0. \u6307\u4ee4\u5728\u8bd1\u7801\u65f6, \u6307\u4ee4\u4fe1\u606f\u88ab\u653e\u5728\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7684\u961f\u5217\u4e2d. \u4e00\u65e6\u4e00\u6761\u6307\u4ee4\u7684\u64cd\u4f5c\u5b8c\u6210, \u800c\u4e14\u6240\u6709\u5f15\u8d77\u8fd9\u6761\u6307\u4ee4\u7684\u5206\u652f\u70b9\u4e5f\u90fd\u9884\u6d4b\u6b63\u786e, \u90a3\u4e48\u8fd9\u6761\u6307\u4ee4\u5c31\u53ef\u4ee5\u9000\u5f79\u4e86, \u6240\u6709\u8fd9\u6761\u6307\u4ee4\u6709\u5173\u7684\u5bf9\u7a0b\u5e8f\u5bc4\u5b58\u5668\u7684\u66f4\u65b0\u90fd\u53ef\u4ee5\u5b9e\u9645\u6267\u884c\u4e86; \u5982\u679c\u67d0\u4e2a\u5206\u652f\u70b9\u9884\u6d4b\u9519\u8bef, \u8fd9\u6761\u6307\u4ee4\u4f1a\u88ab\u6e05\u7a7a, \u4e22\u5f03\u6240\u6709\u8ba1\u7b97\u7ed3\u679c. Note \u4efb\u4f55\u5bf9\u7a0b\u5e8f\u5bc4\u5b58\u5668\u7684\u66f4\u65b0\u90fd\u53ea\u4f1a\u5728\u6307\u4ee4\u9000\u5f79\u65f6\u624d\u4f1a\u53d1\u751f. \u4e3a\u4e86\u52a0\u901f\u6307\u4ee4\u5230\u6307\u4ee4\u95f4\u7ed3\u679c\u7684\u4f20\u9001, \u8bb8\u591a\u6b64\u7c7b\u4fe1\u606f\u662f\u5728\u6267\u884c\u5355\u5143\u95f4\u4ea4\u6362\u7684, \u5373\u56fe\u4e2d\u7684\"\u64cd\u4f5c\u7ed3\u679c\". \u6267\u884c\u5355\u5143(Execution Unit) \u63a5\u6536\u6765\u81ea\u53d6\u6307\u5355\u5143\u7684\u64cd\u4f5c, \u901a\u5e38\u6bcf\u4e2a\u5468\u671f\u4f1a\u63a5\u53d7\u591a\u4e2a\u64cd\u4f5c, \u8fd9\u4e9b\u64cd\u4f5c\u4f1a\u88ab\u5206\u6d3e\u5230\u4e00\u7ec4 \u529f\u80fd\u5355\u5143 \u4e2d. \u529f\u80fd\u5355\u5143 \u4e13\u95e8\u7528\u6765\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u64cd\u4f5c. \u4e00\u4e2a\u529f\u80fd\u5355\u5143\u53ef\u4ee5\u6267\u884c\u591a\u79cd\u64cd\u4f5c, \u591a\u4e2a\u529f\u80fd\u5355\u5143\u53ef\u4ee5\u6267\u884c\u540c\u4e00\u79cd\u64cd\u4f5c. \u8bfb\u5199\u5185\u5b58\u662f\u901a\u8fc7 \u52a0\u8f7d/\u5b58\u50a8\u6a21\u5757 \u5b8c\u6210\u7684. \u8fd9\u4e24\u4e2a\u5355\u5143\u5404\u5305\u542b\u4e00\u4e2a\u52a0\u6cd5\u5668\u6765\u5b8c\u6210\u5730\u5740\u8ba1\u7b97, \u5e76\u901a\u8fc7\u6570\u636e\u9ad8\u901f\u7f13\u5b58\u6765\u8bfb\u5199\u5185\u5b58. \u7b97\u672f\u8fd0\u7b97\u6a21\u5757 \u5206\u652f\u6a21\u5757 \u786e\u5b9a\u5206\u652f\u9884\u6d4b\u662f\u5426\u6b63\u786e(\u800c\u975e\u5206\u652f\u5f80\u54ea\u6267\u884c), \u5982\u679c\u9884\u6d4b\u9519\u8bef, \u6267\u884c\u5355\u5143\u4f1a\u4e22\u5f03\u5206\u652f\u70b9\u4e4b\u540e\u8ba1\u7b97\u51fa\u6765\u7684\u7ed3\u679c, \u5e76\u53d1\u4fe1\u53f7\u7ed9\u5206\u652f\u5355\u5143, \u5e76\u6307\u51fa\u6b63\u786e\u7684\u5206\u652f\u76ee\u7684. \u8fd9\u6837\u5206\u652f\u5355\u5143\u4f1a\u5728\u65b0\u7684\u4f4d\u7f6e\u53d6\u503c. \u5bc4\u5b58\u5668\u91cd\u547d\u540d \u63a7\u5236\u64cd\u4f5c\u6570\u5728\u6267\u884c\u5355\u5143\u95f4\u4f20\u9001\u7684\u6700\u5e38\u89c1\u673a\u5236\u662f \u5bc4\u5b58\u5668\u91cd\u547d\u540d(register renaming) . \u5f53\u6267\u884c\u4e00\u6761\u66f4\u65b0\u5bc4\u5b58\u5668r\u7684\u6307\u4ee4I1\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6307\u5411\u8be5\u64cd\u4f5c\u7ed3\u679c\u7684\u552f\u4e00\u6807\u8bc6\u7b26t\uff0c\u7136\u540e\u5c06(r, t)\u52a0\u5165\u91cd\u547d\u540d\u8868\u4e2d. \u5f53\u540e\u7eed\u6709\u9700\u8981\u7528\u5230\u5bc4\u5b58\u5668r\u4f5c\u4e3a\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\u65f6\uff0c\u4f1a\u5c06t\u4f5c\u4e3a\u64cd\u4f5c\u6570\u6e90\u7684\u503c\u8f93\u5165\u5230\u5355\u5143\u4e2d\u8fdb\u884c\u6267\u884c, \u5f53I1\u6267\u884c\u5b8c\u6210\u65f6\uff0c\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7ed3\u679c(v, t)\uff0c\u8868\u793a\u6807\u8bc6\u7b26t\u7684\u64cd\u4f5c\u4ea7\u751f\u4e86\u7ed3\u679cv\uff0c\u7136\u540e\u6240\u6709\u7b49\u5f85t\u4f5c\u4e3a\u6e90\u7684\u64cd\u4f5c\u90fd\u4f1a\u4f7f\u7528v\u4f5c\u4e3a\u6e90\u503c\u3002 \u610f\u4e49 \uff1a\u4f7f\u7528\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u673a\u5236\uff0c\u53ef\u4ee5\u5c06\u503c\u4ece\u4e00\u4e2a\u64cd\u4f5c\u76f4\u63a5\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a\u64cd\u4f5c\uff0c\u800c\u65e0\u9700\u8fdb\u884c\u5bc4\u5b58\u5668\u6587\u4ef6\u7684\u8bfb\u5199\uff0c\u4f7f\u5f97\u540e\u7eed\u7684\u64cd\u4f5c\u80fd\u5728\u7b2c\u4e00\u4e2a\u64cd\u4f5cI1\u5b8c\u6210\u540e\u5c3d\u5feb\u5f00\u59cb\u3002\u5e76\u4e14\u6295\u673a\u6267\u884c\u4e2d\uff0c\u5728\u9884\u6d4b\u6b63\u786e\u4e4b\u524d\u4e0d\u4f1a\u5c06\u7ed3\u679c\u5199\u5165\u5bc4\u5b58\u5668\u4e2d\uff0c\u800c\u901a\u8fc7\u8be5\u673a\u5236\u5c31\u53ef\u4ee5\u9884\u6d4b\u7740\u6267\u884c\u64cd\u4f5c\u7684\u6574\u4e2a\u5e8f\u5217. \u6ce8\u610f \uff1a\u91cd\u547d\u540d\u8868\u53ea\u5305\u542b\u672a\u8fdb\u884c\u5bc4\u5b58\u5668\u5199\u64cd\u4f5c\u7684\u5bc4\u5b58\u5668\uff0c\u5982\u679c\u6709\u4e2a\u64cd\u4f5c\u9700\u8981\u7684\u5bc4\u5b58\u5668\u6ca1\u6709\u5728\u91cd\u547d\u540d\u8868\u4e2d\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u5bc4\u5b58\u5668\u6587\u4ef6\u4e2d\u83b7\u53d6\u503c.","title":"\u6574\u4f53\u64cd\u4f5c"},{"location":"CSAPP/5/#_9","text":"\u523b\u753b\u6027\u80fd: \u5ef6\u8fdf(latency): \u8868\u793a\u5b8c\u6210\u8fd0\u7b97\u6240\u9700\u8981\u7684\u603b\u65f6\u95f4 \u53d1\u5c04\u65f6\u95f4(issue time): \u8868\u793a\u4e24\u4e2a\u8fde\u7eed\u7684\u540c\u7c7b\u578b\u7684\u8fd0\u7b97\u4e4b\u95f4\u9700\u8981\u7684\u6700\u5c0f\u5468\u671f\u6570 \u5bb9\u91cf(capacity) *: \u8868\u793a\u80fd\u591f\u6267\u884c\u8be5\u8fd0\u7b97\u7684\u529f\u80fd\u5355\u5143\u7684\u6570\u91cf \u53c2\u8003\u673a\u7684\u6027\u80fd \u53d1\u5c04\u65f6\u95f4\u4e3a 1 \u7684\u529f\u80fd\u5355\u5143\u88ab\u79f0\u4e3a \u5b8c\u5168\u6d41\u6c34\u5316\u7684(fully pipelined): \u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u90fd\u53ef\u4ee5\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u8fd0\u7b97. e.g. \u4e00\u4e2a\u5178\u578b\u7684\u6d6e\u70b9\u52a0\u6cd5\u5668(\u6240\u4ee5\u5ef6\u8fdf\u662f 3 \u4e2a\u5468\u671f): \u4e00\u4e2a\u9636\u6bb5\u5904\u7406\u6307\u6570, \u4e00\u4e2a\u9636\u6bb5\u76f8\u52a0\u5c0f\u6570, \u4e00\u4e2a\u9636\u6bb5\u5bf9\u7ed3\u679c\u820d\u5165. \u7b97\u672f\u8fd0\u7b97\u53ef\u4ee5\u8fde\u7eed\u5730\u901a\u8fc7\u5404\u4e2a\u9636\u6bb5, \u4e0d\u7528\u7b49\u4e00\u4e2a\u64cd\u4f5c\u5b8c\u6210\u540e\u518d\u8fdb\u884c\u4e0b\u4e00\u4e2a. \u53ea\u6709\u5f53\u8981\u6267\u884c\u7684\u8fd0\u7b97\u662f\u8fde\u7eed, \u903b\u8f91\u4e0a\u72ec\u7acb\u7684\u65f6\u5019\u624d\u80fd\u5229\u7528\u8fd9\u79cd\u529f\u80fd. \u6ce8\u610f\u5230\u9664\u6cd5\u5668\u7684\u53d1\u5c04\u65f6\u95f4\u7b49\u4e8e\u5ef6\u8fdf, \u56e0\u6b64\u5fc5\u987b\u5728\u5b8c\u6210\u6574\u4e2a\u9664\u6cd5\u540e\u624d\u80fd\u8fdb\u884c\u4e0b\u4e00\u4e2a\u9664\u6cd5. \u6211\u4eec\u66f4\u503e\u5411\u4e8e\u4f7f\u7528 \u6700\u5927\u541e\u5410\u91cf \u6765\u8868\u793a\u53d1\u5c04\u65f6\u95f4, \u5b9a\u4e49\u4e3a\u53d1\u5c04\u65f6\u95f4\u7684\u5012\u6570. \u5bf9\u4e8e\u4e00\u4e2a\u5bb9\u91cf\u4e3a C\uff0c\u53d1\u5c04\u65f6\u95f4\u4e3a I \u7684\u64cd\u4f5c\u800c\u8a00\uff0c\u5176\u541e\u5410\u91cf\u4e3a C/I. \u6839\u636e\u4ee5\u4e0a\u6027\u80fd, \u6211\u4eec\u5f97\u5230 CPE \u7684\u4e24\u4e2a\u57fa\u672c\u754c\u9650: \u5ef6\u8fdf\u754c\u9650 \u5ef6\u8fdf\u754c\u9650\u7ed9\u51fa\u4e86\u4efb\u4f55\u5fc5\u987b\u6309\u7167\u4e25\u683c\u987a\u5e8f\u5b8c\u6210\u5408\u5e76\u8fd0\u7b97\u7684\u51fd\u6570\u6240\u9700\u8981\u7684\u6700\u5c0f CPE \u503c. \u5f53\u5b58\u5728 \u6570\u636e\u76f8\u5173 \u65f6\uff0c\u6307\u4ee4\u662f\u4e25\u683c\u987a\u5e8f\u6267\u884c\u7684\uff0c\u610f\u5473\u7740\u6211\u4eec\u65e0\u6cd5\u901a\u8fc7\u6307\u4ee4\u5e76\u884c\u6765\u8fdb\u884c\u52a0\u901f\u3002\u800c\u901a\u8fc7\u53c2\u8003\u673a\u7684\u8fd0\u7b97\u6027\u80fd\u77e5\u9053\u6267\u884c\u6bcf\u79cd\u8fd0\u7b97\u6240\u9700\u7684\u5ef6\u8fdf\uff0c\u5c31\u786e\u5b9a\u4e86\u6267\u884c\u8be5\u8fd0\u7b97\u6240\u9700\u7684\u6700\u5c0f\u65f6\u949f\u5468\u671f\u6570\uff0c\u6b64\u65f6CPE\u7684\u5ef6\u8fdf\u754c\u9650\u5c31\u662f\u8fd0\u7b97\u64cd\u4f5c\u7684\u5ef6\u8fdf. \u541e\u5410\u91cf\u754c\u9650 \u6839\u636e\u529f\u80fd\u5355\u5143\u4ea7\u751f\u7ed3\u679c\u7684\u6700\u5927\u901f\u7387, \u541e\u5410\u91cf\u754c\u9650\u7ed9\u51fa\u4e86 CPE \u7684\u6700\u5c0f\u754c\u9650. \u8868\u793a\u6211\u4eec\u8003\u8651\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u7684\u529f\u80fd\u5355\u5143\uff0c\u8ba1\u7b97\u51fa\u6765\u8fd0\u7b97\u7ed3\u679c\u7684\u6700\u5927\u901f\u7387. \u53c2\u8003\u673a\u7684\u4e24\u4e2a\u754c\u9650 \u6574\u6570\u4e58\u6cd5\u7684\u5ef6\u8fdf\u4e3a3\u4e2a\u65f6\u949f\u5468\u671f\uff0c\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u75283\u4e2a\u65f6\u949f\u5468\u671f\u624d\u80fd\u5b8c\u6210\u4e00\u4e2a\u6574\u6570\u4e58\u6cd5\u8fd0\u7b97\uff0c\u4e0d\u53ef\u80fd\u66f4\u5feb\u4e86\uff0c\u6240\u4ee5\u5f53\u524d\u7684CPE\u503c\u4e3a3. \u53c2\u8003\u673a\u542b\u67094\u4e2a\u53ef\u4ee5\u6267\u884c\u6574\u6570\u52a0\u6cd5\u7684\u529f\u80fd\u5355\u5143\uff0c\u4e14\u6574\u6570\u52a0\u6cd5\u7684\u53d1\u5c04\u65f6\u95f4\u4e3a1\uff0c\u6240\u4ee5\u7cfb\u7edf\u6267\u884c\u6574\u6570\u52a0\u6cd5\u7684\u541e\u5410\u91cf\u4e3a4\uff0c\u610f\u5473\u7740CPE\u503c\u4e3a0.25\uff0c\u4f46\u662f\u53c2\u8003\u673a\u4e2d\u53ea\u6709\u4e24\u4e2a\u652f\u6301\u52a0\u8f7d\u7684\u529f\u80fd\u5355\u5143\uff0c\u610f\u5473\u7740\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u53ea\u80fd\u8bfb\u53d6\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u541e\u5410\u91cf\u5c31\u53d7\u5230\u4e86\u52a0\u8f7d\u7684\u9650\u5236\uff0cCPE\u503c\u4e3a0.5\u3002\u518d\u6bd4\u5982\u53c2\u8003\u673a\u5185\u53ea\u542b\u6709\u4e00\u4e2a\u80fd\u6267\u884c\u6574\u6570\u4e58\u6cd5\u7684\u529f\u80fd\u5355\u5143\uff0c\u8bf4\u660e\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u6574\u6570\u4e58\u6cd5\uff0c\u6b64\u65f6\u6027\u80fd\u541e\u5410\u91cf\u5c31\u53d7\u5230\u4e86\u529f\u80fd\u5355\u5143\u8fd0\u7b97\u7684\u9650\u5236\uff0cCPE\u503c\u4e3a1.","title":"\u6027\u80fd"},{"location":"CSAPP/5/#_10","text":"\u6211\u4eec\u4f7f\u7528\u7a0b\u5e8f\u7684 \u6570\u636e\u6d41(data-flow) \u8868\u793a, \u5c55\u793a\u4e86\u4e0d\u540c\u64cd\u4f5c\u4e4b\u95f4\u7684\u6570\u636e\u76f8\u5173\u662f\u5982\u4f55\u9650\u5236\u4ed6\u4eec\u7684\u6267\u884c\u5355\u5143\u7684. \u8fd9\u4e9b\u9650\u5236\u5f62\u6210\u4e86\u56fe\u4e2d\u7684 \u5173\u952e\u8def\u5f84(critical path) , \u8fd9\u662f\u6267\u884c\u4e00\u7ec4\u673a\u5668\u6307\u4ee4\u6240\u9700\u65f6\u949f\u5468\u671f\u6570\u7684\u4e00\u4e2a\u4e0b\u754c. \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u770b\u5230\u9664\u4e86\u6574\u6570\u52a0\u6cd5, \u6d4b\u91cf\u503c\u4e0e\u5904\u7406\u5668\u7684\u5ef6\u8fdf\u754c\u9650\u662f\u4e00\u6837\u7684, \u8fd9\u8868\u660e\u8fd9\u4e9b\u51fd\u6570\u7684\u6027\u80fd\u662f\u7531\u6c42\u548c/\u4e58\u79ef\u8fd0\u7b97\u4e3b\u5bfc, \u800c\u4e14\u5b58\u5728\u6570\u636e\u76f8\u5173.","title":"\u5904\u7406\u5668\u64cd\u4f5c\u7684\u62bd\u8c61\u6a21\u578b"},{"location":"CSAPP/5/#_11","text":"\u5bf9\u4e8e\u5f62\u6210\u5faa\u73af\u7684\u4ee3\u7801\u7247\u6bb5, \u6211\u4eec\u5c06\u8bbf\u95ee\u5230\u7684\u5bc4\u5b58\u5668\u5206\u4e3a\u56db\u7c7b: \u53ea\u8bfb: \u8fd9\u4e9b\u5bc4\u5b58\u5668\u53ea\u7528\u4e8e\u6e90\u503c, \u5728\u5faa\u73af\u4e2d\u4e0d\u4f1a\u88ab\u4fee\u6539. \u53ea\u5199: \u8fd9\u4e9b\u5bc4\u5b58\u5668\u4f5c\u4e3a\u6570\u636e\u4f20\u9001\u64cd\u4f5c\u7684\u76ee\u7684. \u5c40\u90e8: \u8fd9\u4e9b\u5bc4\u5b58\u5668\u5728\u5faa\u73af\u5185\u90e8\u88ab\u4fee\u6539\u548c\u4f7f\u7528, \u8fed\u4ee3\u548c\u8fed\u4ee3\u4e4b\u95f4\u4e0d\u76f8\u5173. \u5faa\u73af: \u5bf9\u5faa\u73af\u6765\u8bf4\u8fd9\u4e9b\u5bc4\u5b58\u5668\u65e2\u4f5c\u4e3a\u6e90\u503c, \u53c8\u4f5c\u4e3a\u76ee\u7684, \u4e00\u6b21\u8fed\u4ee3\u4e2d\u4ea7\u751f\u7684\u503c\u4f1a\u5728\u53e6\u4e00\u6b21\u8fed\u4ee3\u4e2d\u7528\u5230. \u4ee5 combine4 \u4e3a\u4f8b \u8f6c\u5316\u4e3a\u6570\u636e\u6d41\u56fe: \u4e0a\u65b9\u5bc4\u5b58\u5668\u4e3a\u8f93\u5165\u7684\u5bc4\u5b58\u5668\uff0c\u4e0b\u65b9\u5bc4\u5b58\u5668\u4e3a\u8f93\u51fa\u7684\u5bc4\u5b58\u5668\uff0c\u4ece\u5bc4\u5b58\u5668\u6307\u5411\u64cd\u4f5c\u7684\u7bad\u5934\u8868\u793a\u8be5\u64cd\u4f5c\u8bfb\u53d6\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u64cd\u4f5c\u6307\u5411\u5bc4\u5b58\u5668\u8868\u793a\u64cd\u4f5c\u7684\u7ed3\u679c\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u5982\u679c\u67d0\u4e9b\u64cd\u4f5c\u4ea7\u751f\u7684\u503c\u4e0d\u5bf9\u5e94\u4e8e\u4efb\u4f55\u5bc4\u5b58\u5668\uff0c\u5c31\u5728\u64cd\u4f5c\u95f4\u7528\u5f27\u7ebf\u8fde\u63a5\u8d77\u6765\u3002\u5176\u4e2d vmulsd (%rdx), %xmm0, %xmm0 \u5305\u542b\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6(%rdx)\u7684\u503c\uff0c\u7136\u540e\u8ba1\u7b97\u6d6e\u70b9\u6570\u4e58\u6cd5\u7684\u57fa\u672c\u64cd\u4f5c. \u5176\u4e2d %rax \u662f\u53ea\u8bfb\u5bc4\u5b58\u5668, %rdx \u548c %xmm0 \u662f\u5faa\u73af\u5bc4\u5b58\u5668. \u6211\u4eec\u5c06\u6570\u636e\u6d41\u56fe\u505a\u4fee\u6539, \u5220\u9664\u975e\u5faa\u73af\u5bc4\u5b58\u5668\u4ee5\u5916\u7684\u5bc4\u5b58\u5668\uff0c\u5e76\u5220\u9664\u4e0d\u5728\u5faa\u73af\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u64cd\u4f5c\uff0c\u5f97\u5230\u4ee5\u4e0b\u7b80\u5316\u7684\u6570\u636e\u6d41\u56fe. \u6211\u4eec\u5c06 combine4 \u7684\u5185\u5faa\u73af\u91cd\u590d n \u6b21, \u5373\u53ef\u5f97\u5230\u5faa\u73af\u7684\u6570\u636e\u6d41\u8868\u793a. \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u6709\u4e24\u6761\u6570\u636e\u76f8\u5173\u94fe. \u5047\u8bbe\u6d6e\u70b9\u4e58\u6cd5\u5ef6\u8fdf\u4e3a 5 \u4e2a\u5468\u671f, \u6574\u6570\u52a0\u6cd5\u5ef6\u8fdf\u4e3a 1 \u4e2a\u5468\u671f, \u90a3\u4e48\u5de6\u8fb9\u7684\u94fe\u4f1a\u6210\u4e3a\u5173\u952e\u8def\u5f84. \u81f3\u5c11\u9700\u8981 5n \u4e2a\u5468\u671f\u6267\u884c. \u5faa\u73af\u5bc4\u5b58\u5668\u4e4b\u95f4\u7684\u64cd\u4f5c\u94fe\u51b3\u5b9a\u4e86\u9650\u5236\u6027\u80fd\u7684\u6570\u636e\u76f8\u5173.","title":"\u4ece\u673a\u5668\u7ea7\u4ee3\u7801\u5230\u6570\u636e\u6d41\u56fe"},{"location":"CSAPP/5/#_12","text":"\u6570\u636e\u6d41\u4e2d\u7684\u5173\u952e\u8def\u5f84\u53ea\u662f\u63d0\u4f9b\u7a0b\u5e8f\u9700\u8981\u5468\u671f\u6570\u7684 \u4e0b\u754c \uff0c\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u56e0\u7d20\u4f1a\u9650\u5236\u6027\u80fd\u3002 e.g. combine4 \u4e2d\u5f53\u6211\u4eec\u5c06\u5de6\u4fa7\u7684\u64cd\u4f5c\u53d8\u4e3a\u6574\u6570\u52a0\u6cd5\u65f6\uff0c\u6839\u636e\u6570\u636e\u6d41\u9884\u6d4b\u7684CPE\u5e94\u8be5\u4e3a1\uff0c\u4f46\u662f\u7531\u4e8e\u8fd9\u91cc\u7684\u64cd\u4f5c\u53d8\u5f97\u5f88\u5feb\uff0c\u4f7f\u5f97\u5176\u4ed6\u64cd\u4f5c\u4f9b\u5e94\u6570\u636e\u7684\u901f\u5ea6\u4e0d\u591f\u5feb\uff0c\u9020\u6210\u5b9e\u9645\u5f97\u5230\u7684CPE\u4e3a1.27. \u7ec3\u4e60\u9898 5.5 & 5.6 double poly ( double a [], double x , long degree ) { long i ; double result = a [ 0 ]; double xpwr = x ; for ( i = 1 ; i <= degree ; i ++ ){ result += a [ i ] * xpwr ; xpwr = x * xpwr ; } return result ; } double polyh ( double a [], double x , long degree ) { long i ; double result = a [ degree ]; for ( i = degree -1 ; i >= 0 ; i -- ){ result = a [ i ] + x * result ; } return result ; } \u6211\u4eec\u6d4b\u91cf\u53d1\u73b0 poly \u7684 CPE \u4e3a 5.00, \u4f46 polyh \u7684 CPE \u4e3a 8.00, \u4e3a\u4ec0\u4e48? polyh \u4e0d\u96be\u7406\u89e3, \u56e0\u4e3a\u4e58\u6cd5\u5fc5\u987b\u5728\u52a0\u6cd5\u5b8c\u6210\u540e\u624d\u80fd\u6267\u884c, \u6240\u4ee5\u662f 5+3=8. \u800c poly \u51fd\u6570\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0, a[i] * xpwr \u548c x * xpwe \u7684\u8ba1\u7b97\u548c result \u65e0\u5173, \u6211\u4eec\u53ef\u4ee5\u628a result \u653e\u5728\u4e0b\u4e00\u6b21\u5faa\u73af\u4e2d\u548c\u4e24\u4e2a\u4e58\u6cd5\u5e76\u884c\u8ba1\u7b97, \u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5728\u8fd9\u6b21\u5faa\u73af\u4e2d\u5148\u4e58\u6cd5\u518d\u52a0\u6cd5\u4e86. be like: \u56e0\u6b64\u5bf9\u4e00\u4e2a\u6570\u636e\u6d41\u56fe, \u6211\u4eec \u53ea\u9700\u8981\u5173\u6ce8\u5faa\u73af\u5bc4\u5b58\u5668\u7684\u6570\u636e\u76f8\u5173\u94fe , \u5373\u5b83 \u5173\u952e\u8def\u5f84\u4e0a\u7684\u64cd\u4f5c\u6570 . \u4e0a\u9762\u7684\u4f8b\u5b50\u544a\u8bc9\u6211\u4eec, \u51fd\u6570\u5177\u6709\u66f4\u5c11\u7684\u64cd\u4f5c\u4e0d\u610f\u5473\u7740\u5177\u6709\u66f4\u597d\u7684\u6027\u80fd.","title":"\u5176\u4ed6\u6027\u80fd\u56e0\u7d20"},{"location":"CSAPP/5/#_13","text":"\u5faa\u73af\u5c55\u5f00\u662f\u4e00\u79cd\u7a0b\u5e8f\u53d8\u6362, \u901a\u8fc7\u589e\u52a0\u6bcf\u6b21\u8fed\u4ee3\u8ba1\u7b97\u7684\u5143\u7d20\u7684\u6570\u91cf, \u51cf\u5c11\u5faa\u73af\u7684\u8fed\u4ee3\u6b21\u6570. \u5b83\u51cf\u5c11\u4e86\u4e0d\u76f4\u63a5\u6709\u52a9\u4e8e\u7a0b\u5e8f\u7ed3\u679c\u7684\u64cd\u4f5c\u7684\u6570\u91cf, \u4f8b\u5982\u5faa\u73af\u7d22\u5f15\u8ba1\u7b97\u548c\u6761\u4ef6\u5206\u652f; \u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u65b9\u6cd5\u6765\u8fdb\u4e00\u6b65\u53d8\u5316\u4ee3\u7801, \u51cf\u5c11\u6574\u4e2a\u8ba1\u7b97\u4e2d\u5173\u952e\u8def\u5f84\u4e0a\u7684\u64cd\u4f5c\u6570\u91cf. \u8fd9\u91cc\u4f7f\u7528\u4e00\u79cd\"k*1 \u5faa\u73af\u5c55\u5f00\"\u7684\u65b9\u6cd5, \u7b2c\u4e00\u4e2a\u5faa\u73af\u6bcf\u6b21\u5904\u7406\u6570\u7ec4\u7684 k \u4e2a\u5143\u7d20, \u7b2c\u4e8c\u4e2a\u5faa\u73af\u5904\u7406\u5269\u4e0b\u8fd8\u6ca1\u5904\u7406\u7684\u5143\u7d20(\u56e0\u4e3a\u6570\u7ec4\u957f\u5ea6\u4e0d\u4e00\u5b9a\u662f k \u7684\u500d\u6570). Example // 2 * 1 loop unrolling void combine5 ( vec_ptr v , data_t * dest ) { long i ; long length = vec_length ( v ); long limit = length -1 ; data_t * data = get_vec_start ( v ); data_t acc = IDENT ; for ( i = 0 ; i < limit ; i += 2 ){ acc = ( acc OP data [ i ]) OP data [ i + 1 ]; } for (; i < length ; i ++ ){ acc = acc OP data [ i ]; } return acc ; } \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230, \u6574\u6570\u52a0\u6cd5\u7684\u4e00\u4e2a\u5468\u671f\u7684\u5ef6\u8fdf\u6210\u4e3a\u4e86\u9650\u5236\u6027\u80fd\u7684\u56e0\u7d20. \u5f53\u6211\u4eec\u4e0d\u65ad\u589e\u52a0 k \u7684\u5927\u5c0f\u65f6, \u6211\u4eec\u53d1\u73b0 CPE \u7684\u6d4b\u91cf\u503c\u6ca1\u6709\u4e00\u4e2a\u4f4e\u4e8e\u5ef6\u8fdf\u754c\u9650. \u6211\u4eec\u753b\u51fa\u4ed6\u7b80\u5316\u540e\u7684\u6570\u636e\u6d41\u56fe: \u867d\u7136\u5faa\u73af\u5c55\u5f00\u4e86 2 \u6b21, \u4f46\u5173\u952e\u8def\u5f84\u8fd8\u662f n \u4e2a mul \u64cd\u4f5c. Info \u7f16\u8bd1\u5668\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u505a\u5230\u5faa\u73af\u5c55\u5f00. \u7528\u4f18\u5316\u7b49\u7ea7 3 \u6216\u66f4\u9ad8\u7b49\u7ea7\u8c03\u7528 GCC, \u5b83\u5c31\u4f1a\u6267\u884c\u5faa\u73af\u5c55\u5f00.","title":"\u5faa\u73af\u5c55\u5f00"},{"location":"CSAPP/5/#_14","text":"","title":"\u63d0\u9ad8\u5e76\u884c\u6027"},{"location":"CSAPP/5/#_15","text":"\u5047\u8bbe\u8fd9\u91cc\u6709 \\(a_0,a_1,\\ldots,a_{n-1}\\) \u4e2a\u5143\u7d20, \u6211\u4eec\u8981\u8ba1\u7b97 \\(P_n=\\prod\\limits_{i=0}^{n-1}a_i\\) . \u53ef\u4ee5\u901a\u8fc7 \\(PE_n=\\prod\\limits_{i=0}^{n/2-1}a_{2i}\\quad PO_n=\\prod\\limits_{i=0}^{n/2-1}a_{2i+1}\\) \u5219 \\(P_n=PE_n\\times PO_n\\) \u5f97\u5230. \u63a8\u5e7f\u4e0a\u8ff0\u601d\u8def, \u6211\u4eec\u5f97\u5230\u4e00\u79cd \"k*k \u5faa\u73af\u5c55\u5f00\u65b9\u6cd5\"\uff0c\u5c06\u4e00\u4e2a\u5faa\u73af\u5c55\u5f00\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u6bcf\u6b21\u5faa\u73af\u5904\u7406k\u4e2a\u5143\u7d20\uff0c\u80fd\u591f\u51cf\u5c11\u5faa\u73af\u6b21\u6570\uff0c\u5e76\u4e14\u5f15\u5165k\u4e2a\u53d8\u91cf\u4fdd\u5b58\u7ed3\u679c\uff1b\u7b2c\u4e8c\u90e8\u5206\u5904\u7406\u5269\u4e0b\u8fd8\u6ca1\u8ba1\u7b97\u7684\u5143\u7d20\uff0c\u662f\u9010\u4e2a\u8fdb\u884c\u8ba1\u7b97\u7684. Example ``` C // 2 * 2 loop unrolling void combine5(vec_ptr v, data_t dest) { long i; long length = vec_length(v); long limit = length-1; data_t data = get_vec_start(v); data_t acc0 = IDENT; data_t acc1 = IDENT; for(i=0; i<limit; i+=2){ acc0 = acc0 OP data[i]; acc1 = acc1 OP data[i+1]; } for(; i<length; i++){ acc0 = acc0 OP data[i]; } *dest = acc0 OP acc1; } ``` \u6211\u4eec\u53d1\u73b0\u6211\u4eec\u7a81\u7834\u4e86\u5ef6\u8fdf\u754c\u9650. \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u6709\u4e24\u6761\u5173\u952e\u8def\u5f84, \u4e00\u6761\u8ba1\u7b97\u7d22\u5f15\u4e3a\u5076\u6570\u7684\u5143\u7d20(acc0) \u53e6\u4e00\u6761\u8ba1\u7b97\u7d22\u5f15\u4e3a\u5947\u6570\u7684\u5143\u7d20(acc1), \u6bcf\u6761\u5173\u952e\u8def\u5f84\u53ea\u5305\u542b n/2 \u4e2a\u64cd\u4f5c, \u56e0\u6b64\u7406\u60f3\u72b6\u6001\u53ef\u4ee5\u4f7f CPE \u51cf\u534a. \u5f53 k \u8db3\u591f\u5927\u65f6, \u7a0b\u5e8f\u5728\u6240\u6709\u60c5\u51b5\u51e0\u4e4e\u90fd\u80fd\u8fbe\u5230 \u541e\u5410\u91cf\u754c\u9650 . \u4e3a\u4e86\u63a5\u8fd1\u541e\u5410\u91cf\u754c\u9650\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u529f\u80fd\u5355\u5143\uff0c\u5e76\u4e14\u4fdd\u8bc1\u529f\u80fd\u5355\u5143\u7684\u6d41\u6c34\u7ebf\u59cb\u7ec8\u662f\u6162\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5bb9\u91cf\u4e3a C\u3001\u5ef6\u8fdf\u4e3a L \u7684\u64cd\u4f5c\u800c\u8a00\uff0c\u9700\u8981\u8bbe\u7f6e \\(k\\geq C\\cdot L\\) (\u6700\u5feb\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c). \u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f, \u6211\u4eec\u9700\u8981\u7533\u8bf7 k \u4e2a\u5c40\u90e8\u53d8\u91cf\u6765\u4fdd\u5b58\u4e2d\u95f4\u7ed3\u679c. \u4f46\u5982\u679c k \u5927\u4e8e\u4e86\u5bc4\u5b58\u5668\u7684\u6570\u76ee, \u7ed3\u679c\u5c31\u4f1a\u88ab\u4fdd\u5b58\u5728\u5806\u6808\u4e2d, \u8fd9\u5c31\u9700\u8981\u6211\u4eec\u53cd\u590d\u8bfb\u5199\u5185\u5b58, \u9020\u6210\u6027\u80fd\u635f\u5931.","title":"\u591a\u4e2a\u7d2f\u79ef\u53d8\u91cf"},{"location":"CSAPP/5/#_16","text":"\u6211\u4eec\u6539\u53d8\u5408\u5e76\u6267\u884c\u7684\u65b9\u5f0f, \u4e5f\u80fd\u6781\u5927\u5730\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd. Example \u6211\u4eec\u5c06 combine5(2 1 \u5c55\u5f00)\u4e2d acc = (acc OP data[i]) OP data[i+1]; \u53d8\u4e3a combine7 \u4e2d\u7684 acc = acc OP (data[i] OP data[i+1]; \u8fd9\u79f0\u4e3a \"2 1a \u5faa\u73af\u5c55\u5f00\", \u6211\u4eec\u89c2\u5bdf\u5b83\u7684\u6027\u80fd, \u53d1\u73b0\u5b83\u4e5f\u7a81\u7834\u4e86\u5ef6\u8fdf\u754c\u9650: \u5176\u6570\u636e\u6d41\u56fe: \u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u5173\u952e\u8def\u5f84\u4e0a\u53ea\u6709\u4e00\u4e2a mul (\u53e6\u4e00\u4e2a mul \u53ef\u4ee5\u5229\u7528\u7ec3\u4e60\u9898 5.5 \u7c7b\u4f3c\u7684\u601d\u8def), \u800c\u4e14\u5173\u952e\u8def\u5f84\u4e0a\u53ea\u6709 n/2 \u4e2a\u64cd\u4f5c, \u56e0\u6b64\u6700\u5c0f\u53ef\u80fd\u7684 CPE \u51cf\u534a.","title":"\u91cd\u65b0\u7ed3\u5408\u53d8\u6362"},{"location":"CSAPP/5/#_17","text":"","title":"\u9650\u5236\u56e0\u7d20"},{"location":"CSAPP/5/#_18","text":"\u5982\u679c\u6211\u4eec\u7684\u5e76\u884c\u5ea6 p \u8d85\u8fc7\u4e86\u53ef\u7528\u7684\u5bc4\u5b58\u5668\u7684\u6570\u91cf, \u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u8bc9\u8bf8\u6ea2\u51fa, \u5c06\u67d0\u4e9b\u4e34\u65f6\u4e4b\u5b58\u653e\u5230\u5185\u5b58\u4e2d, \u901a\u5e38\u662f\u5728\u5806\u6808\u4e0a\u5206\u914d\u7a7a\u95f4.","title":"\u5bc4\u5b58\u5668\u6ea2\u51fa"},{"location":"CSAPP/5/#_19","text":"\u5f53\u5206\u652f\u9884\u6d4b\u903b\u8f91\u4e0d\u80fd\u6b63\u786e\u9884\u6d4b\u4e00\u4e2a\u5206\u652f\u662f\u5426\u8981\u8df3\u8f6c\u65f6, \u6761\u4ef6\u5206\u652f\u53ef\u80fd\u4f1a\u62db\u81f4\u5f88\u5927\u7684\u9884\u6d4b\u9519\u8bef\u60e9\u7f5a.","title":"\u5206\u652f\u9884\u6d4b\u548c\u9884\u6d4b\u9519\u8bef\u60e9\u7f5a"},{"location":"CSAPP/5/#_20","text":"\u5b9e\u9645\u4e0a, \u73b0\u4ee3\u5904\u7406\u5668\u4e2d\u7684\u5206\u652f\u9884\u6d4b\u903b\u8f91\u975e\u5e38\u5584\u4e8e\u8fa8\u522b\u4e0d\u540c\u5206\u652f\u6307\u4ee4\u7684\u6709\u89c4\u5f8b\u7684\u6a21\u5f0f\u548c\u957f\u671f\u8d8b\u52bf. \u800c\u4e14\u6267\u884c\u8fb9\u754c\u68c0\u6d4b\u6240\u9700\u7684\u989d\u5916\u8fd0\u53ef\u4ee5\u4e0e\u5408\u5e76\u64cd\u4f5c\u5e76\u5b58\u6267\u884c, \u6240\u4ee5\u8fd9\u4e9b\u6c42\u503c\u90fd\u4e0d\u4f1a\u5bf9\u5f62\u6210\u7a0b\u5e8f\u6267\u884c\u4e2d\u5173\u952e\u8def\u5f84\u7684\u6307\u4ee4\u7684\u53d6\u503c\u548c\u5904\u7406\u4ea7\u751f\u592a\u5927\u7684\u5f71\u54cd.","title":"\u4e0d\u8981\u8fc7\u5206\u5173\u5fc3\u53ef\u9884\u6d4b\u7684\u5206\u652f"},{"location":"CSAPP/5/#_21","text":"\u5bf9\u4e8e\u672c\u8d28\u65e0\u6cd5\u9884\u6d4b\u7684\u60c5\u51b5, \u5982\u679c\u7f16\u8bd1\u5668\u80fd\u4ea7\u751f\u4f7f\u7528\u6761\u4ef6\u4f20\u9001\u800c\u4e0d\u662f\u4f7f\u7528\u6761\u4ef6\u63a7\u5236\u8f6c\u79fb\u7684\u4ee3\u7801, \u53ef\u4ee5\u6781\u5927\u5730\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd. \u4f46\u8981\u6ce8\u610f, \u4e0d\u662f\u6240\u6709\u7684\u6761\u4ef6\u884c\u4e3a\u90fd\u80fd\u7528\u6761\u4ef6\u6570\u636e\u4f20\u9001\u6765\u5b9e\u73b0.","title":"\u4e66\u5199\u9002\u5408\u4f7f\u7528\u6761\u4ef6\u4f20\u9001\u5b9e\u73b0\u7684\u4ee3\u7801"},{"location":"CSAPP/5/#_22","text":"","title":"\u7406\u89e3\u5185\u5b58\u6027\u80fd"},{"location":"CSAPP/5/#_23","text":"\u4e00\u4e2a\u5305\u542b\u52a0\u8f7d\u64cd\u4f5c\u7684\u7a0b\u5e8f\u7684\u6027\u80fd\u65e2\u4f9d\u8d56\u4e8e\u6d41\u6c34\u7ebf\u7684\u80fd\u529b, \u4e5f\u4f9d\u8d56\u4e8e\u52a0\u8f7d\u5355\u5143\u7684\u5ef6\u8fdf. e.g. \u6211\u4eec\u7684\u53c2\u8003\u673a\u5305\u542b\u4e24\u4e2a\u52a0\u8f7d\u529f\u80fd\u5355\u5143\uff0c\u610f\u5473\u7740\u5f53\u6d41\u6c34\u7ebf\u5b8c\u5168\u65f6\uff0c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u6700\u591a\u80fd\u591f\u6267\u884c\u4e24\u4e2a\u52a0\u8f7d\u64cd\u4f5c\uff0c\u7531\u4e8e\u6bcf\u4e2a\u5143\u7d20\u7684\u8ba1\u7b97\u9700\u8981\u52a0\u8f7d\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5CPE\u7684\u6700\u5c0f\u503c\u53ea\u80fd\u662f0.5\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u7684\u8ba1\u7b97\u9700\u8981\u52a0\u8f7dk\u4e2a\u503c\u7684\u5e94\u7528\u800c\u8a00\uff0cCPE\u7684\u6700\u5c0f\u503c\u53ea\u80fd\u662fk/2. \u5728\u4e4b\u524d\u6211\u4eec\u7684\u793a\u4f8b\u4e2d, \u52a0\u8f7d\u64cd\u4f5c\u53ea\u4f9d\u8d56\u5faa\u73af\u7d22\u5f15 i, \u4e0d\u5b58\u5728\u6570\u636e\u76f8\u5173, \u56e0\u6b64\u52a0\u8f7d\u4e0d\u4f1a\u79f0\u4e3a\u5173\u952e\u8def\u5f84\u4e0a\u7684\u64cd\u4f5c. \u94fe\u8868 typedef struct ELE { struct ELE * next ; long data ; } list_ele , * list_ptr ; long list_len ( list_ptr ls ) { long len = 0 ; while ( ls ) { len ++ ; ls = ls -> next ; } return len ; } \u5176\u6570\u636e\u6d41\u56fe: \u56e0\u6b64\u52a0\u8f7d\u64cd\u4f5c\u51fa\u73b0\u5728\u5173\u952e\u8def\u5f84\u4e0a. \u8fd9\u4e2a\u4f8b\u5b50\u6d4b\u51fa CPE \u4e3a 4.0.","title":"\u52a0\u8f7d\u7684\u6027\u80fd"},{"location":"CSAPP/5/#_24","text":"\u5b58\u50a8\u64cd\u4f5c\u4e0d\u4f1a\u5f71\u54cd\u4efb\u4f55\u5bc4\u5b58\u5668, \u56e0\u6b64\u4e00\u7cfb\u5217\u5b58\u50a8\u64cd\u4f5c\u4e0d\u4f1a\u4ea7\u751f\u6570\u636e\u76f8\u5173. \u53ea\u6709\u52a0\u8f7d\u64cd\u4f5c\u4f1a\u53d7\u5b58\u50a8\u64cd\u4f5c\u5f71\u54cd. \u4e00\u4e2a\u5185\u5b58\u8bfb\u7684\u7ed3\u679c\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u6700\u8fd1\u7684\u5185\u5b58\u5199, \u6211\u4eec\u79f0\u4e4b\u4e3a \u5199/\u8bfb\u76f8\u5173 . \u5b58\u50a8\u5355\u5143\u5305\u542b\u4e00\u4e2a \u5b58\u50a8\u7f13\u51b2\u533a , \u5b83\u5305\u542b\u5df2\u7ecf\u88ab\u53d1\u5c04\u5230\u5b58\u50a8\u5355\u5143\u800c\u53c8\u6ca1\u6709\u5b8c\u6210\u7684\u5b58\u50a8\u64cd\u4f5c\u7684\u5730\u5740\u548c\u64cd\u4f5c, \u8fd9\u91cc\u7684\u5b8c\u6210\u5305\u62ec\u66f4\u65b0\u6570\u636e\u9ad8\u901f\u7f13\u5b58. \u5f53\u4e00\u4e2a\u52a0\u8f7d\u64cd\u4f5c\u53d1\u751f\u65f6, \u5b83\u5fc5\u987b\u68c0\u67e5\u5b58\u50a8\u7f13\u51b2\u533a\u4e2d\u7684\u6761\u76ee, \u770b\u662f\u5426\u6709\u5730\u5740\u76f8\u5339\u914d. \u82e5\u6709(\u5b58\u5728\u5199/\u8bfb\u76f8\u5173)\u5c31\u53d6\u51fa\u5bf9\u5e94\u6570\u636e\u6761\u76ee\u4f5c\u4e3a\u52a0\u8f7d\u64cd\u4f5c\u7684\u7ed3\u679c. Example \u6570\u636e\u6d41\u56fe: \u6ce8\u610f\u8fd9\u91cc\u7684\u865a\u7ebf\u6307, \u82e5\u5b58\u5728\u6570\u636e\u76f8\u5173, \u9700\u8981\u5c06\u8981\u5b58\u50a8\u7684\u503c\u8f6c\u53d1\u5230\u52a0\u8f7d\u5f53\u4e2d. \u6807\u53f7 1 \u8868\u793a\u5b58\u50a8\u5730\u5740\u5fc5\u987b\u5728\u6570\u636e\u88ab\u5b58\u50a8\u4e4b\u524d\u8ba1\u7b97\u51fa\u6765, 2 \u8868\u793a load \u64cd\u4f5c\u8981\u5c06\u5b83\u7684\u5730\u5740\u548c\u6240\u6709\u672a\u5b8c\u6210\u7684\u5b58\u50a8\u64cd\u4f5c\u7684\u5730\u5740\u6bd4\u8f83, 3 \u8868\u793a\u6570\u636e\u76f8\u5173. \u7b80\u5316\u540e: \u5f53\u6ca1\u6709\u6570\u636e\u76f8\u5173\u65f6(A), CPE \u4e3a 1.00. \u6570\u636e\u76f8\u5173\u65f6(B), CPE \u4e3a 7.00.","title":"\u5b58\u50a8\u7684\u6027\u80fd"},{"location":"CSAPP/6/","text":"\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 \u00b6 \u5b58\u50a8\u6280\u672f \u00b6 \u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668 \u00b6 \u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668(Random-Access Memory, RAM) \u6839\u636e\u5b58\u50a8\u5355\u5143\u53ef\u5206\u4e3a\u4e24\u7c7b: \u9759\u6001\u7684 RAM(SRAM) \u548c\u52a8\u6001\u7684 RAM(DRAM) . SRAM \u00b6 SRAM \u5c06\u6bcf\u4e2a\u4f4d\u5b58\u50a8\u5728\u4e00\u4e2a \u53cc\u7a33\u6001(bistable) \u7684\u5b58\u50a8\u5355\u5143\u91cc. \u6bcf\u4e2a\u5355\u5143\u7528\u4e00\u4e2a\u516d\u6676\u4f53\u7ba1\u7535\u8def\u5b9e\u73b0. \u5b83\u53ef\u4ee5\u65e0\u9650\u671f\u5730\u4fdd\u6301\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7535\u538b\u914d\u7f6e\u6216\u8005\u72b6\u6001\u4e4b\u4e00, \u5176\u4ed6\u4efb\u4f55\u72b6\u6001\u90fd\u662f\u4e0d\u7a33\u5b9a\u7684, \u7535\u8def\u4f1a\u8fc5\u901f\u5730\u8f6c\u79fb\u5230\u4e24\u4e2a\u7a33\u5b9a\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a. \u6ce8 : \u5f53\u949f\u6446\u5728\u5782\u76f4\u7684\u4f4d\u7f6e\u65f6, \u5904\u4e8e \u4e9a\u7a33\u6001 , \u6700\u7ec6\u5fae\u7684\u6270\u52a8\u4e5f\u80fd\u4f7f\u5b83\u5012\u4e0b, \u4e14\u65e0\u6cd5\u6062\u590d. \u7279\u70b9 \u53ea\u8981\u6709\u7535, \u5b83\u5c31\u80fd\u6c38\u8fdc\u4fdd\u6301\u5b83\u7684\u503c, \u5373\u4f7f\u6709\u5e72\u6270\u6765\u6270\u4e71\u7535\u538b, \u5f53\u5e72\u6270\u6d88\u9664\u65f6\u7535\u8def\u5c31\u4f1a\u6062\u590d\u5230\u7a33\u5b9a\u503c. DRAM \u00b6 DRAM \u5c06\u6bcf\u4e2a\u4f4d\u5b58\u50a8\u4e3a\u5bf9\u4e00\u4e2a\u7535\u5bb9\u7684\u5145\u7535. \u6bcf\u4e2a\u5355\u5143\u7531\u4e00\u4e2a\u7535\u5bb9\u548c\u4e00\u4e2a\u8bbf\u95ee\u6676\u4f53\u7ba1\u7ec4\u6210. \u7279\u70b9: \u6bcf\u4e2a\u7535\u5bb9\u975e\u5e38\u5c0f, \u56e0\u6b64\u53ef\u4ee5 DRAM \u5b58\u50a8\u5668\u53ef\u4ee5\u5236\u9020\u5f97\u975e\u5e38\u5bc6\u96c6. DRAM \u5b58\u50a8\u5668\u5bf9\u5e72\u6270\u975e\u5e38\u654f\u611f, \u5f53\u7535\u5bb9\u7535\u538b\u88ab\u6270\u4e71\u540e\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u6062\u590d\u4e86. \u66b4\u9732\u5728\u5149\u7ebf\u4e2d\u4f1a\u5bfc\u81f4\u7535\u5bb9\u7535\u538b\u6539\u53d8. \u5f88\u591a\u539f\u56e0\u4f1a\u5bfc\u81f4\u6f0f\u7535, \u4f7f\u5f97 DRAM \u5355\u5143\u5728 10~100 \u6beb\u79d2\u65f6\u95f4\u5185\u5931\u53bb\u7535\u8377. \u56e0\u6b64\u5185\u5b58\u5fc5\u987b\u5468\u671f\u6027\u5730\u901a\u8fc7\u8bfb\u51fa, \u7136\u540e\u91cd\u5199\u6765\u5237\u65b0\u5185\u5b58\u6bcf\u4e00\u4f4d. \u4f20\u7edf\u7684 DRAM \u82af\u7247\u4e2d\u7684\u5355\u5143(\u4f4d)\u88ab\u5206\u6210 \\(d\\) \u4e2a\u8d85\u5355\u5143(supercell), \u6bcf\u4e2a\u8d85\u5355\u5143\u90fd\u7531 \\(w\\) \u4e2a DRAM \u5355\u5143\u7ec4\u6210. \u4e00\u4e2a \\(d\\times w\\) \u7684 DRAM \u603b\u5171\u5b58\u50a8\u4e86 \\(dw\\) \u4f4d\u4fe1\u606f. \u8d85\u5355\u5143\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a \\(r\\) \u884c \\(c\\) \u5217\u957f\u65b9\u5f62\u9635\u5217, \u8fd9\u91cc \\(rc=d\\) . \u4fe1\u606f\u901a\u8fc7\u79f0\u4e3a addr \u548c data \u5f15\u811a(pin) \u7684\u5916\u90e8\u8fde\u63a5\u5668\u6d41\u5165\u548c\u6d41\u51fa\u82af\u7247. \u6bcf\u4e2a DRAM \u82af\u7247\u88ab\u8fde\u63a5\u5230 \u5185\u5b58\u63a7\u5236\u5668 \u7684\u7535\u8def, \u8fd9\u4e2a\u7535\u8def\u53ef\u4ee5\u4e00\u6b21\u4f20\u9001 \\(w\\) \u4f4d\u5230\u6bcf\u4e2a DRAM \u82af\u7247\u6216\u4e00\u6b21\u4ece DRAM \u82af\u7247\u4f20\u51fa \\(w\\) \u4f4d. \u4e3a\u4e86\u8bfb\u51fa (i,j) \u7684\u5185\u5bb9, \u5185\u5b58\u63a7\u5236\u5668\u5c06\u884c\u5730\u5740 i \u53d1\u9001\u5230 DRAM, \u7136\u540e\u662f\u5217\u5730\u5740 j. DRAM \u628a\u8d85\u5355\u5143 (i,j) \u7684\u5185\u5bb9\u53d1\u56de\u7ed9\u63a7\u5236\u5668\u4f5c\u4e3a\u76f8\u5e94. \u884c\u5730\u5740 i \u79f0\u4e3a RAS(Row Access Strobe) , \u5217\u5730\u5740\u79f0\u4e3a CAS(Column Access Strobe) . \u4e00\u4e2a 128 \u4f4d\u7684 \\(16\\times 8\\) \u7684 DRAM \u82af\u7247 \u6709 \\(d=16\\) \u4e2a\u8d85\u5355\u5143, \u6bcf\u4e2a\u8d85\u5355\u5143\u5b58\u50a8 \\(w=8\\) \u4f4d\u4fe1\u606f. \u4f8b\u5982\u6211\u4eec\u8981\u53d6 (2,1) \u7684\u5185\u5bb9, \u5148\u901a\u8fc7 addr \u53d1\u9001\u884c\u5730\u5740 2, DRAM \u4f1a\u5c06\u8be5\u884c\u5185\u5bb9\u590d\u5236\u5230\u4e00\u4e2a\u5185\u90e8\u884c\u7f13\u51b2\u533a, \u63a5\u4e0b\u6765\u53d1\u9001\u5217\u5730\u5740 1, DRAM \u5c06\u8d85\u5355\u5143(2,1) \u53d6\u51fa\u5e76\u901a\u8fc7 data \u53d1\u9001\u56de\u5185\u5b58\u63a7\u5236\u5668. \u7535\u8def\u8bbe\u8ba1\u8005\u5c06 DRAM \u7ec4\u7ec7\u6210\u4e8c\u7ef4\u9635\u5217\u800c\u4e0d\u662f\u7ebf\u6027\u6570\u7ec4\u7684\u4e00\u4e2a\u539f\u56e0\u662f\u964d\u4f4e\u82af\u7247\u4e0a\u5730\u5740\u5f15\u811a\u7684\u6570\u91cf. i.e. \\(\\max(\\lceil \\log_2{r} \\rceil,\\lceil \\log_2{c} \\rceil)\\) DRAM \u82af\u7247\u5c01\u88c5\u5728 \u5185\u5b58\u6a21\u5757 \u4e2d, \u5b83\u63d2\u5230\u4e3b\u677f\u7684\u6269\u5c55\u69fd\u4e0a. 8 \u4e2a 8M \\(\\times\\) 8 \u7684 DRAM \u7ec4\u6210\u7684\u5185\u5b58\u6a21\u5757 \u8981\u4ece\u5185\u5b58\u5730\u5740 A \u53d6\u4e00\u4e2a\u5b57, \u5185\u5b58\u63a7\u5236\u5668\u5c06 A \u8f6c\u5316\u4e3a\u4e00\u4e2a\u8d85\u5355\u5143\u5730\u5740 (i,j), \u5e76\u5c06\u5b83\u53d1\u9001\u5230\u5185\u5b58\u6a21\u5757, \u7136\u540e\u5185\u5b58\u6a21\u5757\u518d\u5c06 i \u548c j \u5e7f\u64ad\u5230\u6bcf\u4e2a DRAM. \u6bcf\u4e2a DRAM \u8f93\u51fa\u5b83\u7684 (i,j) \u8d85\u5355\u5143\u7684 8 \u4f4d\u5185\u5bb9, \u6a21\u5757\u4e2d\u7684\u7535\u8def\u6536\u96c6\u8fd9\u4e9b\u8f93\u51fa\u5e76\u5c06\u5b83\u4eec\u5408\u5e76\u4e3a\u4e00\u4e2a 64 \u4f4d\u7684\u5b57, \u518d\u8fd4\u56de\u5185\u5b58\u63a7\u5236\u5668. \u6211\u4eec\u53ef\u4ee5\u5c06\u591a\u4e2a\u5185\u5b58\u6a21\u5757\u8fde\u63a5\u5230\u5185\u5b58\u63a7\u5236\u5668, \u805a\u5408\u6210\u4e3b\u5b58. \u8fd9\u79cd\u60c5\u51b5\u4e0b\u5185\u5b58\u63a7\u5236\u5668\u6536\u5230\u5730\u5740 A \u65f6\u4f1a\u5148\u627e\u5230\u5305\u542b\u5730\u5740 A \u7684\u5185\u5b58\u6a21\u5757 A, \u7136\u540e\u6309\u7167\u4e0a\u8ff0\u6b65\u9aa4\u5f97\u5230\u5b57. \u589e\u5f3a\u7684 DRAM \u5feb\u9875\u6a21\u5f0f DRAM(Fast Page Mode DRAM, FPM DRAM) \u4f20\u7edf\u7684 DRAM \u5c06\u8d85\u5355\u5143\u4e00\u6574\u884c\u590d\u5236\u5230\u5b83\u7684\u5185\u90e8\u884c\u7f13\u51b2\u533a, \u4f7f\u7528\u4e00\u4e2a\u7136\u540e\u4e22\u5f03\u5269\u4f59\u7684. FPM DRAM \u5141\u8bb8\u5bf9\u540c\u4e00\u884c\u8fde\u7eed\u5730\u8bbf\u95ee\u53ef\u4ee5\u76f4\u63a5\u4ece\u884c\u7f13\u51b2\u533a\u5f97\u5230\u670d\u52a1. \u6269\u5c55\u6570\u636e\u8f93\u51fa\u7684 DRAM(Extended Data Out DRAM, EDO DRAM) FPM DRAM \u7684\u589e\u5f3a\u5f62\u5f0f, \u5141\u8bb8\u5404\u4e2a CAS \u4fe1\u53f7\u5728\u65f6\u95f4\u4e0a\u9760\u5f97\u66f4\u7d27\u5bc6\u4e00\u70b9. \u540c\u6b65 DRAM(Synchronous DRAM, SDRAM) \u4ed6\u4eec\u4e0e\u5185\u5b58\u63a7\u5236\u5668\u901a\u4fe1\u4f7f\u7528\u4e00\u7ec4\u663e\u5f0f\u7684\u63a7\u5236\u4fe1\u53f7(FPM EDO\u90fd\u662f\u5f02\u6b65\u7684), \u6700\u7ec8\u6548\u679c\u662f SDRAM \u80fd\u6bd4\u5f02\u6b65\u7684\u5b58\u50a8\u5668\u66f4\u5feb\u5730\u8f93\u51fa\u8d85\u5355\u5143\u7684\u5185\u5bb9. \u53cc\u500d\u6570\u636e\u901f\u7387\u540c\u6b65 DRAM(Double Data-Rate Synchronous DRAM, DDR SDRAM) \u4f7f\u7528\u4e24\u4e2a\u65f6\u949f\u6cbf\u4f5c\u4e3a\u63a7\u5236\u4fe1\u53f7, \u4ece\u800c\u4f7f DRAM \u7684\u901f\u5ea6\u7ffb\u500d. \u89c6\u9891 RAM(Video RAM, VVRAM) \u975e\u6613\u5931\u5b58\u50a8\u5668 \u00b6 \u5982\u679c\u65ad\u7535, DRAM \u548c SRAM \u4f1a\u4e22\u5931\u4ed6\u4eec\u7684\u4fe1\u606f, \u56e0\u6b64\u4ed6\u4eec\u662f \u6613\u5931\u7684(volatile) . \u800c \u975e\u6613\u5931\u5b58\u50a8\u5668(Nonvolatile Memory) \u5373\u4f7f\u65ad\u7535\u4e5f\u80fd\u4fdd\u5b58\u4ed6\u4eec\u7684\u4fe1\u606f, \u8fd9\u7c7b\u5b58\u50a8\u5668\u79f0\u4e3a \u53ea\u8bfb\u5b58\u50a8\u5668(Read-Only Memory, ROM) .(\u90e8\u5206\u5b58\u50a8\u5668\u53ef\u4ee5\u8bfb\u5199, \u5386\u53f2\u539f\u56e0\u6211\u4eec\u4fdd\u7559\u540d\u5b57) PROM(Programmable ROM, \u53ef\u7f16\u7a0bROM) : \u53ea\u80fd\u88ab\u7f16\u7a0b\u4e00\u6b21, PROM \u6bcf\u4e2a\u5b58\u50a8\u5668\u5355\u5143\u90fd\u6709\u4e00\u79cd\u7194\u4e1d, \u53ea\u80fd\u7528\u9ad8\u7535\u6d41\u7194\u65ad\u4e00\u6b21. \u53ef\u64e6\u5199\u53ef\u7f16\u7a0b ROM(Erasable Programmable ROM, EPROM) : \u53ef\u4ee5\u6279\u91cf\u64e6\u9664 \u95ea\u5b58(Flash Memory) : \u5177\u6709\u90e8\u5206(\u5757\u7ea7)\u64e6\u9664\u529f\u80fd, \u5927\u7ea6\u64e6\u9664\u5341\u4e07\u6b21\u540e\u4f1a\u8017\u5c3d \u5b58\u50a8\u5728 ROM \u8bbe\u5907\u4e2d\u7684\u7a0b\u5e8f\u79f0\u4e3a \u56fa\u4ef6(firmware) . \u5f53\u4e00\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u901a\u7535\u540e, \u5b83\u4f1a\u8fd0\u884c\u5b58\u50a8\u5728 ROM \u4e2d\u7684\u56fa\u4ef6. \u8bbf\u95ee\u4e3b\u5b58 \u00b6 \u6570\u636e\u6d41\u901a\u8fc7 \u603b\u7ebf(bus) \u7684\u5171\u4eab\u7535\u5b50\u7535\u8def\u5728\u5904\u7406\u5668\u548c DRAM \u4e3b\u5b58\u4e4b\u95f4\u6765\u56de\u56de\u4f20\u9012\u6570\u636e. \u6bcf\u6b21 CPU \u548c\u4e3b\u5b58\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u9001\u90fd\u662f\u901a\u8fc7 \u603b\u7ebf\u4e8b\u52a1(bus transaction) \u6765\u5b8c\u6210. \u603b\u7ebf \u662f\u4e00\u7ec4\u5e76\u884c\u7684\u5bfc\u7ebf, \u80fd\u643a\u5e26\u5730\u5740, \u6570\u636e\u548c\u63a7\u5236\u4fe1\u53f7. \u5176\u4e2d I/O \u6865\u63a5\u5668\u4e2d\u5305\u62ec\u5185\u5b58\u63a7\u5236\u5668, \u80fd\u591f\u5c06\u7cfb\u7edf\u603b\u7ebf\u7684\u7535\u5b50\u4fe1\u53f7\u548c\u5185\u5b58\u603b\u7ebf\u7684\u7535\u5b50\u4fe1\u53f7\u4e92\u76f8\u7ffb\u8bd1, \u4e5f\u80fd\u5c06\u7cfb\u7edf\u603b\u7ebf\u548c\u5185\u5b58\u603b\u7ebf\u8fde\u63a5\u5230I/O\u603b\u7ebf. \u8bfb\u4e8b\u52a1&\u5199\u4e8b\u52a1 \u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u6570\u636e\u5230\u5bc4\u5b58\u5668: movq A, %rax CPU \u5c06 \u5730\u5740 A \u653e\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a, I/O \u6865\u5c06\u4fe1\u53f7\u4f20\u9012\u5230\u5185\u5b58\u603b\u7ebf. \u4e3b\u5b58\u611f\u77e5\u5230\u5185\u5b58\u603b\u7ebf\u4e0a\u7684\u5730\u5740\u4fe1\u53f7, \u4ece\u5185\u5b58\u603b\u7ebf\u8bfb\u5730\u5740, \u4ece DRAM \u53d6\u51fa\u6570\u636e\u5b57, \u5e76\u5c06\u6570\u636e\u5199\u5230\u5185\u5b58\u603b\u7ebf. I/O \u603b\u7ebf\u5c06\u5185\u5b58\u603b\u7ebf\u4fe1\u53f7\u7ffb\u8bd1\u6210\u7cfb\u7edf\u603b\u7ebf\u4fe1\u53f7, \u7136\u540e\u6cbf\u7740\u7cfb\u7edf\u603b\u7ebf\u4f20\u9012. CPU \u611f\u77e5\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a\u7684\u6570\u636e, \u4ece\u603b\u7ebf\u4e0a\u8bfb\u6570\u636e, \u5e76\u5c06\u6570\u636e\u590d\u5236\u5230\u5bc4\u5b58\u5668 %rax. \u5199\u5185\u5b58\u7c7b\u4f3c: \u78c1\u76d8\u5b58\u50a8 \u00b6 \u78c1\u76d8(disk) \u662f\u5e7f\u4e3a\u5e94\u7528\u7684\u4fdd\u5b58\u5927\u91cf\u6570\u636e\u7684\u5b58\u50a8\u8bbe\u5907, \u5b58\u50a8\u6570\u636e\u7684\u6570\u91cf\u7ea7\u53ef\u4ee5\u8fbe\u5230\u51e0\u767e\u5230\u51e0\u5343\u5343\u5146\u5b57\u8282. \u78c1\u76d8\u6784\u9020 \u00b6 \u78c1\u76d8\u662f\u7531 \u76d8\u7247(platter) \u6784\u6210\u7684, \u6bcf\u4e2a\u76d8\u7247\u6709\u4e24\u4e2a \u8868\u9762 . \u8868\u9762\u8986\u76d6\u7740\u78c1\u6027\u8bb0\u5f55\u6750\u6599. \u76d8\u7247\u4e2d\u592e\u6709\u4e00\u4e2a\u53ef\u4ee5\u65cb\u8f6c\u7684 \u4e3b\u8f74(spindle) , \u5b83\u4f7f\u5f97\u76d8\u7247\u4ee5\u56fa\u5b9a\u7684\u65cb\u8f6c\u901f\u7387\u65cb\u8f6c. \u6bcf\u4e2a\u8868\u9762\u662f\u7531\u4e00\u7ec4 \u78c1\u9053(track) \u7684\u540c\u5fc3\u5706\u7ec4\u6210\u7684. \u6bcf\u4e2a\u78c1\u9053\u88ab\u5212\u5206\u4e3a\u4e00\u7ec4 \u6247\u533a(sector) . \u6bcf\u4e2a\u6247\u533a\u5305\u542b\u76f8\u7b49\u6570\u91cf\u7684\u6570\u636e\u4f4d(\u901a\u5e38\u662f 512 \u5b57\u8282). \u6247\u533a\u4e4b\u95f4\u7531\u4e00\u4e9b \u95f4\u9699 \u5206\u9694\u5f00, \u95f4\u9699\u4e0d\u5b58\u50a8\u6570\u636e\u4f4d, \u95f4\u9699\u5b58\u50a8\u7528\u6765\u6807\u8bc6\u6247\u533a\u7684\u683c\u5f0f\u5316\u4f4d. \u901a\u5e38\u4f7f\u7528 \u67f1\u9762(cyclinder) \u6765\u63cf\u8ff0\u591a\u4e2a\u76d8\u7247\u9a71\u52a8\u5668\u7684\u6784\u9020, \u67f1\u9762\u662f\u6240\u6709\u76d8\u7247\u8868\u9762\u4e0a\u5230\u4e3b\u8f74\u4e2d\u5fc3\u7684\u8ddd\u79bb\u76f8\u7b49\u7684\u78c1\u9053\u7684\u96c6\u5408. \u78c1\u76d8\u5bb9\u91cf \u00b6 \u4e00\u4e2a\u78c1\u76d8\u4e0a\u53ef\u4ee5\u8bb0\u5f55\u7684\u6700\u5927\u4f4d\u6570\u79f0\u4e3a\u4ed6\u7684\u6700\u5927\u5bb9\u91cf, \u4e3b\u8981\u7531\u4e0b\u5217\u6280\u672f\u56e0\u7d20\u51b3\u5b9a: \u8bb0\u5f55\u5bc6\u5ea6 (\u4f4d/\u82f1\u5bf8): \u78c1\u9053\u4e00\u82f1\u5bf8\u7684\u6bb5\u4e2d\u53ef\u4ee5\u653e\u5165\u7684\u4f4d\u6570. \u78c1\u9053\u5bc6\u5ea6 (\u9053/\u82f1\u5bf8): \u4ece\u76d8\u7247\u4e2d\u5fc3\u51fa\u53d1\u534a\u5f84\u4e0a\u4e00\u82f1\u5bf8\u7684\u6bb5\u5185\u53ef\u4ee5\u6709\u7684\u78c1\u9053\u6570. \u9762\u5bc6\u5ea6 (\u4f4d/\u5e73\u65b9\u82f1\u5c3a): \u8bb0\u5f55\u5bc6\u5ea6\u4e0e\u78c1\u9053\u5bc6\u5ea6\u7684\u4e58\u79ef. \u4e3a\u4e86\u4fdd\u6301\u6bcf\u4e2a\u78c1\u9053\u6709\u56fa\u5b9a\u7684\u6247\u533a\u6570, \u8d8a\u5f80\u5916\u7684\u78c1\u9053\u6247\u533a\u9694\u5f97\u8d8a\u5f00. \u73b0\u4ee3\u5927\u5bb9\u91cf\u78c1\u76d8\u4f7f\u7528\u4e00\u79cd \u591a\u533a\u8bb0\u5f55 \u7684\u6280\u672f, \u67f1\u9762\u7684\u96c6\u5408\u88ab\u5206\u5272\u6210\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6\u5408, \u79f0\u4e3a \u8bb0\u5f55\u533a . \u78c1\u76d8\u5bb9\u91cf\u8ba1\u7b97\u516c\u5f0f: \u78c1\u76d8\u64cd\u4f5c \u00b6 \u78c1\u76d8\u7528 \u8bfb/\u5199\u5934 \u6765\u8bfb\u5199\u5b58\u50a8\u5728\u78c1\u6027\u8868\u9762\u7684\u4f4d, \u800c\u8bfb\u5199\u5934\u8fde\u63a5\u5230\u4e00\u4e2a \u4f20\u52a8\u81c2 \u4e00\u7aef. \u78c1\u76d8\u4ee5\u6247\u533a\u5927\u5c0f\u7684\u5757\u6765\u8bfb\u5199\u6570\u636e, \u5bf9\u6247\u533a\u7684 \u8bbf\u95ee\u65f6\u95f4 \u6709\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u7ec4\u6210: \u5bfb\u9053\u65f6\u95f4 : \u4e3a\u4e86\u8bfb\u53d6\u67d0\u4e2a\u76ee\u6807\u6247\u533a\u7684\u5185\u5bb9, \u4f20\u9001\u81c2\u9996\u5148\u5c06\u8bfb/\u5199\u5934\u5b9a\u4f4d\u5230\u5305\u542b\u76ee\u6807\u6247\u533a\u7684\u78c1\u9053\u4e0a. \u79fb\u52a8\u4f20\u9001\u81c2\u7684\u65f6\u95f4\u79f0\u4e3a\u5bfb\u9053\u65f6\u95f4. \u5bfb\u9053\u65f6\u95f4 \\(T_{seek}\\) \u4f9d\u8d56\u4e8e\u8bfb/\u5199\u5934\u4ee5\u524d\u7684\u4f4d\u7f6e\u548c\u4f20\u9001\u81c2\u5728\u76d8\u9762\u4e0a\u79fb\u52a8\u7684\u901f\u5ea6. \u65cb\u8f6c\u65f6\u95f4 : \u8bfb/\u5199\u5934\u5230\u671f\u671b\u7684\u78c1\u9053\u540e, \u9a71\u52a8\u5668\u7b49\u5f85\u76ee\u6807\u6247\u533a\u7684\u7b2c\u4e00\u4e2a\u4f4d\u65cb\u8f6c\u5230\u8bfb/\u5199\u5934\u4e0b. \u8fd9\u4e2a\u6b65\u9aa4\u7684\u6027\u80fd\u4f9d\u8d56\u4e8e\u8bfb/\u5199\u5934\u5230\u8fbe\u76ee\u6807\u6247\u533a\u76d8\u9762\u7684\u4f4d\u7f6e\u4ee5\u53ca\u78c1\u76d8\u7684\u65cb\u8f6c\u901f\u5ea6. \u6700\u5927\u65cb\u8f6c\u5ef6\u8fdf \\(T_{max_rotation}=\\frac{1}{RPM}\\times \\frac{60s}{1min}\\) (\u6574\u5468\u671f), \u5e73\u5747\u65cb\u8f6c\u65f6\u95f4\u662f\u6700\u5927\u5ef6\u8fdf\u7684\u4e00\u534a. \u4f20\u9001\u65f6\u95f4 : \u5f53\u8bfb/\u5199\u5934\u5904\u4e8e\u76ee\u6807\u6247\u533a\u7684\u7b2c\u4e00\u4f4d\u65f6, \u5c31\u53ef\u4ee5\u8fdb\u884c\u4f20\u9001\u4e86. \u4e00\u4e2a\u6247\u533a\u7684\u4f20\u9001\u65f6\u95f4\u4f9d\u8d56\u4e8e\u65cb\u8f6c\u901f\u5ea6\u548c\u6bcf\u6761\u78c1\u9053\u7684\u6247\u533a\u6570\u76ee. \\(T_{avg\\_transfer}=\\frac{1}{RPM}\\times \\frac{1}{\u5e73\u5747\u6247\u533a\u6570/\u78c1\u9053}\\times \\frac{60s}{1min}\\) \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0, \u5bfb\u9053\u65f6\u95f4\u548c\u65cb\u8f6c\u65f6\u95f4\u662f\u4e3b\u8981\u7684\u5f71\u54cd\u90e8\u5206, \u800c\u4e14\u4e24\u8005\u5927\u81f4\u76f8\u7b49, \u53ef\u4ee5\u636e\u6b64\u4f30\u8ba1\u4f7f\u7528\u65f6\u95f4. \u903b\u8f91\u78c1\u76d8\u5757 \u00b6 \u4e3a\u4e86\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u9690\u85cf\u590d\u6742\u6027, \u73b0\u4ee3\u78c1\u76d8\u5c06\u5b83\u4eec\u7684\u6784\u9020\u5448\u73b0\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u89c6\u56fe, \u4e00\u5171 B \u4e2a\u6247\u533a\u5927\u5c0f\u7684 \u903b\u8f91\u5757 \u7684\u5e8f\u5217, \u7f16\u53f7\u4e3a \\(0,1,\\ldots,B-1\\) . \u78c1\u76d8\u5c01\u88c5\u4e2d\u6709\u4e00\u4e2a\u5c0f\u7684\u786c\u4ef6/\u56fa\u4ef6\u8bbe\u5907, \u79f0\u4e3a \u78c1\u76d8\u63a7\u5236\u5668 , \u7ef4\u62a4\u903b\u8f91\u5757\u53f7\u548c\u5b9e\u9645\u78c1\u76d8\u6247\u533a\u7684\u6620\u5c04\u5173\u7cfb. \u5f53\u64cd\u4f5c\u7cfb\u7edf\u60f3\u8981\u6267\u884c\u4e00\u4e2a I/O \u64cd\u4f5c\u65f6, \u5982\u4ece\u78c1\u76d8\u8bfb\u53d6\u6570\u636e\u5230\u4e3b\u5b58: \u64cd\u4f5c\u7cfb\u7edf\u53d1\u9001\u4e00\u4e2a\u547d\u4ee4\u9053\u78c1\u76d8\u63a7\u5236\u5668, \u8ba9\u5b83\u8bfb\u67d0\u4e2a\u903b\u8f91\u5757\u53f7. \u786c\u76d8\u63a7\u5236\u5668\u4e0a\u7684\u56fa\u4ef6\u6267\u884c\u5feb\u901f\u8868\u67e5\u627e, \u4f7f\u5f97\u8be5\u903b\u8f91\u5757\u53f7\u7ffb\u8bd1\u6210\u4e00\u4e2a\u4e09\u5143\u7ec4 (\u76d8\u9762, \u78c1\u9053, \u6247\u533a) \u7684\u4e09\u5143\u7ec4 \u78c1\u76d8\u63a7\u5236\u5668\u89e3\u91ca\u4e09\u5143\u7ec4\u4fe1\u606f, \u5c06\u8bfb/\u5199\u5934\u79fb\u52a8\u5230\u5bf9\u5e94\u7684\u6247\u533a \u5c06\u8bfb\u53d6\u5230\u7684\u4fe1\u606f\u653e\u5230\u78c1\u76d8\u63a7\u5236\u5668\u7684\u7f13\u51b2\u533a\u4e2d \u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u590d\u5236\u5230\u4e3b\u5b58\u4e2d \u78c1\u76d8\u683c\u5f0f\u5316 \u78c1\u76d8\u63a7\u5236\u5668\u5fc5\u987b\u5bf9\u78c1\u76d8\u8fdb\u884c\u683c\u5f0f\u5316, \u7136\u540e\u624d\u80fd\u5728\u8be5\u78c1\u76d8\u4e0a\u5b58\u50a8\u6570\u636e. \u683c\u5f0f\u5316\u5305\u62ec: \u7528\u6807\u8bc6\u6247\u533a\u7684\u4fe1\u606f\u586b\u5199\u6247\u533a\u4e4b\u95f4\u7684\u95f4\u9699 \u6807\u8bc6\u51fa\u8868\u9762\u6709\u6545\u969c\u7684\u67f1\u9762\u5e76\u4e14\u4e0d\u4f7f\u7528\u4ed6\u4eec \u5728\u6bcf\u4e2a\u533a\u4e2d\u9884\u7559\u51fa\u4e00\u7ec4\u67f1\u9762\u4f5c\u4e3a\u5907\u7528(\u56e0\u6b64\u683c\u5f0f\u5316\u5bb9\u91cf\u6bd4\u6700\u5927\u5bb9\u91cf\u8981\u5c0f) \u8fde\u63a5 I/O \u8bbe\u5907 \u00b6 \u5982\u4e0a\u56fe, \u56fe\u5f62\u5361/\u76d1\u89c6\u5668/\u9f20\u6807/\u952e\u76d8/\u78c1\u76d8\u8fd9\u6837\u7684\u8f93\u5165/\u8f93\u51fa(I/O)\u8bbe\u5907, \u90fd\u662f\u901a\u8fc7 I/O \u603b\u7ebf\u8fde\u63a5\u5230 CPU \u548c\u4e3b\u5b58. \u901a\u7528\u4e32\u884c(Universal Serial Bus, USB)\u63a7\u5236\u5668 \u662f\u4e00\u4e2a\u8fde\u63a5\u5230 USB \u603b\u7ebf\u7684\u8bbe\u5907\u7684\u4e2d\u8f6c\u673a\u6784, USB \u603b\u7ebf\u662f\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u6807\u51c6, \u8fde\u63a5\u5404\u79cd\u5916\u56f4 I/O \u8bbe\u5907. \u56fe\u5f62\u5361(\u6216\u9002\u914d\u5668) \u5305\u542b\u786c\u4ef6\u548c\u8f6f\u4ef6\u903b\u8f91, \u5b83\u4eec\u8d1f\u8d23\u4ee3\u8868 CPU \u5728\u663e\u793a\u5668\u4e0a\u9762\u753b\u50cf\u7d20. \u4e3b\u673a\u603b\u7ebf\u9002\u914d\u5668 \u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u78c1\u76d8\u8fde\u63a5\u5230 I/O \u603b\u7ebf, \u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u7279\u522b\u7684\u4e3b\u673a\u603b\u7ebf\u63a5\u53e3\u5b9a\u4e49\u7684\u901a\u4fe1\u534f\u8bae. \u7f51\u7edc\u9002\u914d\u5668 : \u53ef\u4ee5\u901a\u8fc7\u5c06\u9002\u914d\u5668\u63d2\u5165\u4e3b\u677f\u4e0a\u7a7a\u7684\u6269\u5c55\u69fd\u4e2d, \u4ece\u800c\u8fde\u63a5\u5230 I/O \u603b\u7ebf. \u8bbf\u95ee\u78c1\u76d8 \u00b6 CPU \u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a \u5185\u5b58\u6620\u5c04I/O \u7684\u6280\u672f\u6765\u5411 I/O \u8bbe\u5907\u53d1\u5c04\u547d\u4ee4, \u5730\u5740\u7a7a\u95f4\u4e2d\u6709\u4e00\u5757\u5730\u5740\u662f\u4e3a\u4e0e I/O \u8bbe\u5907\u901a\u4fe1\u4fdd\u7559\u7684. \u6bcf\u4e2a\u8fd9\u6837\u7684\u5730\u5740\u79f0\u4e3a\u4e00\u4e2a I/O \u7aef\u53e3 . \u8bbe\u5907\u53ef\u4ee5\u81ea\u5df1\u6267\u884c\u8bfb\u6216\u8005\u5199\u603b\u7ebf\u4e8b\u52a1\u800c\u4e0d\u9700\u8981 CPU \u5e72\u6d89\u7684\u8fc7\u7a0b, \u79f0\u4e3a \u76f4\u63a5\u5185\u5b58\u8bbf\u95ee(Direct Memory Access, DMA) , \u8fd9\u79cd\u6570\u636e\u4f20\u9001\u79f0\u4e3a DMA \u4f20\u9001 . \u78c1\u76d8\u8bfb\u53d6 \u5047\u8bbe\u78c1\u76d8\u63a7\u5236\u5668\u6620\u5c04\u5230\u7aef\u53e3 0xa0 . CPU\u4f1a\u901a\u8fc7\u5bf9\u5730\u5740 0xa0 \u6267\u884c\u4e09\u4e2a\u5b58\u50a8\u6307\u4ee4\uff0c\u5c06\u5730\u5740 0xa0 \u7684\u5185\u5bb9\u4fdd\u5b58\u5230\u5185\u5b58\u4e2d\uff0c\u5b8c\u6210\u5bf9\u78c1\u76d8\u7684\u8bfb\u53d6\u3002\u53d1\u9001\u5b8c\u6307\u4ee4\u540e\uff0c\u7531\u4e8e\u78c1\u76d8\u8bfb\u53d6\u901f\u5ea6\u6bd4 CPU \u6267\u884c\u901f\u5ea6\u6162\u5f88\u591a\uff0c\u6240\u4ee5 CPU \u4f1a\u5148\u53bb\u6267\u884c\u5176\u4ed6\u5de5\u4f5c. \u6307\u4ee41\uff1a\u53d1\u9001\u4e00\u4e2a\u547d\u4ee4\u5b57\uff0c\u544a\u8bc9\u78c1\u76d8\u53d1\u8d77\u4e00\u4e2a Read \u6307\u4ee42\uff1a\u6307\u660e\u5e94\u8be5\u8bfb\u53d6\u7684\u903b\u8f91\u5757\u53f7 \u6307\u4ee43\uff1a\u6307\u660e\u4fdd\u5b58\u7684\u5185\u5b58\u5730\u5740 \u78c1\u76d8\u63a7\u5236\u5668\u63a5\u6536\u5230Read\u547d\u4ee4\u540e\uff0c\u4f1a\u901a\u8fc7\u4e0a\u8ff0\u65b9\u6cd5\u76f4\u63a5\u5c06\u78c1\u76d8\u5185\u5bb9\u4f20\u9001\u5230\u4e3b\u5b58\u4e2d.(DMA \u4f20\u9001) \u78c1\u76d8\u53d1\u9001\u5b8c\u6570\u636e\u540e\uff0c\u4f1a\u7ed9 CPU \u53d1\u9001\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\uff0c\u6682\u505c CPU \u6b63\u5728\u505a\u7684\u5de5\u4f5c\uff0c\u7136\u540e\u5c06\u63a7\u5236\u8fd4\u56de\u5230 CPU \u88ab\u4e2d\u65ad\u7684\u5730\u65b9. \u56fa\u6001\u786c\u76d8 \u00b6 \u56fa\u6001\u786c\u76d8(Solid State Disk, SSD) \u662f\u4e00\u79cd\u57fa\u4e8e\u95ea\u5b58\u7684\u5b58\u50a8\u6280\u672f. SSD \u5c01\u88c5\u63d2\u5728 I/O \u603b\u7ebf\u4e0a\u6807\u51c6\u786c\u76d8\u63d2\u69fd, \u884c\u4e3a\u5c31\u548c\u5176\u4ed6\u786c\u76d8\u4e00\u6837. \u4e0a\u56fe\u662f\u5178\u578b SSD \u7684\u6027\u80fd\u7279\u5f81. \u5b83\u7531 \u95ea\u5b58 \u548c \u95ea\u5b58\u7ffb\u8bd1\u5c42 \u7ec4\u6210. \u95ea\u5b58\u7ffb\u8bd1\u5c42 : \u662f\u4e00\u4e2a\u786c\u4ef6/\u56fa\u4ef6\u8bbe\u5907, \u626e\u6f14\u4e0e\u78c1\u76d8\u63a7\u5236\u5668\u76f8\u540c\u7684\u89d2\u8272, \u5c06\u5bf9\u903b\u8f91\u5757\u7684\u8bf7\u6c42\u7ffb\u8bd1\u6210\u5bf9\u5e95\u5c42\u7269\u7406\u8bbe\u5907\u7684\u8bbf\u95ee. \u95ea\u5b58 : \u95ea\u5b58\u7684\u57fa\u672c\u5c5e\u6027\u51b3\u5b9a\u4e86 SSD \u968f\u673a\u8bfb\u5199\u7684\u6027\u80fd, \u901a\u5e38\u7531 B \u4e2a\u5757\u7684\u5e8f\u5217\u7ec4\u6210, \u6bcf\u4e2a\u5757\u7531 P \u9875\u7ec4\u6210, \u9875 \u4f5c\u4e3a\u6570\u636e\u7684\u5355\u4f4d\u8fdb\u884c\u8bfb\u5199. \u901a\u5e38\u9875\u5927\u5c0f\u4e3a 512 \u5b57\u8282-4KB\uff0c\u5757\u4e2d\u5305\u542b 32-128 \u9875, \u5219\u5757\u7684\u5927\u5c0f\u6709 16KB-512KB. \u53ea\u6709\u5728\u4e00\u9875\u6240\u5c5e\u7684\u5757\u6574\u4e2a\u88ab\u64e6\u9664\u4e4b\u540e, \u624d\u80fd\u5199\u8fd9\u4e00\u9875. \u56e0\u6b64\u8bfb SSD \u6bd4\u5199\u8981\u5feb. \u968f\u673a\u5199\u5f88\u6162, \u56e0\u4e3a\u64e6\u9664\u5757\u9700\u8981\u76f8\u5bf9\u8f83\u957f\u7684\u65f6\u95f4, \u800c\u4e14\u5982\u679c\u5199\u64cd\u4f5c\u8bd5\u56fe\u4fee\u6539\u4e00\u4e2a\u5305\u542b\u5df2\u7ecf\u6709\u6570\u636e\u7684\u9875 p, \u90a3\u4e48\u8fd9\u4e2a\u5757\u79cd\u6240\u6709\u5e26\u6709\u7528\u6570\u636e\u7684\u9875\u5fc5\u987b\u88ab\u590d\u5236\u5230\u4e00\u4e2a\u65b0(\u64e6\u9664\u8fc7\u7684)\u5757. \u95ea\u5b58\u5757\u4f1a\u78e8\u635f, \u6240\u4ee5 SSD \u4e5f\u5bb9\u6613\u78e8\u635f. \u95ea\u5b58\u7ffb\u8bd1\u5c42\u4e2d\u7684 \u5e73\u5747\u78e8\u635f\u903b\u8f91 \u8bd5\u56fe\u901a\u8fc7\u5c06\u64e6\u9664\u5e73\u5747\u5206\u5e03\u5728\u6240\u6709\u7684\u5757\u4e0a\u6765\u6700\u5927\u5316\u6bcf\u4e2a\u5757\u7684\u5bff\u547d. SSD\u7684\u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9 : \u7531\u4e8e\u95ea\u5b58\u662f\u534a\u5bfc\u4f53\u5b58\u50a8\u5668\uff0c\u6ca1\u6709\u79fb\u52a8\u7684\u90e8\u4ef6\uff0c\u6240\u4ee5\u901f\u5ea6\u6bd4\u78c1\u76d8\u66f4\u5feb\u4e14\u78e8\u635f\u5c0f\uff0c\u80fd\u8017\u4f4e. \u7f3a\u70b9 : SSD\u6bcf\u5b57\u8282\u6bd4\u78c1\u76d8\u8d35\u5927\u7ea630\u500d\uff0c\u6240\u4ee5\u5e38\u7528\u7684\u5b58\u50a8\u5bb9\u91cf\u6bd4\u78c1\u76d8\u5c0f100\u500d\u5de6\u53f3. \u5b58\u50a8\u6280\u672f\u8d8b\u52bf \u00b6 \u4e0d\u540c\u7684\u5b58\u50a8\u6280\u672f\u6709\u4e0d\u540c\u7684\u4ef7\u683c\u548c\u6027\u80fd\u6298\u4e2d . SRAM \u6bd4 DRAM \u5feb\u4e00\u70b9, \u800c DRAM \u6bd4 \u78c1\u76d8\u5757\u5f88\u591a. \u53e6\u4e00\u65b9\u9762, \u5feb\u901f\u5b58\u50a8\u603b\u662f\u6bd4\u6162\u901f\u5b58\u50a8\u8981\u8d35\u7684. \u4e0d\u540c\u5b58\u50a8\u6280\u672f\u7684\u4ef7\u683c\u548c\u6027\u80fd\u5c5e\u6027\u4ee5\u622a\u7136\u4e0d\u540c\u7684\u5c5e\u6027\u53d8\u5316\u7740 DRAM \u548c\u78c1\u76d8\u7684\u6027\u80fd\u6ede\u540e\u4e8e CPU \u7684\u6027\u80fd. \u800cSRAM\u7684\u6027\u80fd\u867d\u7136\u4e5f\u6ede\u540e\u4e8eCPU\u6027\u80fd, \u4f46\u662f\u8fd8\u4fdd\u6301\u589e\u957f, \u6240\u4ee5\u73b0\u4ee3\u8ba1\u7b97\u673a\u4f1a\u4f7f\u7528\u57fa\u4e8eSRAM\u7684\u9ad8\u901f\u7f13\u5b58, \u6765\u5f25\u8865CPU\u548c\u5185\u5b58\u4e4b\u95f4\u7684\u5dee\u8ddd. \u5c40\u90e8\u6027 \u00b6 \u5177\u6709\u826f\u597d \u5c40\u90e8\u6027(locality) \u7684\u7a0b\u5e8f, \u5373\u5b83\u4eec\u503e\u5411\u4e8e\u5f15\u7528\u6700\u8fd1\u5f15\u7528\u8fc7\u7684\u6570\u636e\u9879\u5468\u56f4\u7684\u6570\u636e\u9879, \u6216\u8005\u6700\u8fd1\u5f15\u7528\u8fc7\u7684\u6570\u636e\u9879, \u8fd9\u88ab\u79f0\u4e3a \u5c40\u90e8\u6027\u539f\u7406 . \u5c40\u90e8\u6027\u6709\u4e24\u79cd\u5f62\u5f0f: \u65f6\u95f4\u5c40\u90e8\u6027(temporal locality) : \u88ab\u5f15\u7528\u8fc7\u4e00\u6b21\u7684\u5185\u5b58\u4f4d\u7f6e\u5f88\u53ef\u80fd\u5728\u4e0d\u8fdc\u7684\u5c06\u6765\u518d\u88ab\u591a\u6b21\u5f15\u7528. \u7a7a\u95f4\u5c40\u90e8\u6027(space locality) : \u5982\u679c\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u88ab\u5f15\u7528\u4e86\u4e00\u6b21, \u90a3\u4e48\u7a0b\u5e8f\u5f88\u53ef\u80fd\u5728\u4e0d\u8fdc\u7684\u5c06\u6765\u5f15\u7528\u9644\u8fd1\u7684\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e. \u4e00\u822c\u800c\u8a00, \u6709\u826f\u597d\u5c40\u90e8\u6027\u7684\u7a0b\u5e8f\u6bd4\u5c40\u90e8\u6027\u5dee\u7684\u7a0b\u5e8f\u8fd0\u884c\u5f97\u66f4\u5feb . \u5c40\u90e8\u6027\u7684\u5e94\u7528 \u4ece\u786c\u4ef6\u5230\u64cd\u4f5c\u7cfb\u7edf\uff0c\u518d\u5230\u5e94\u7528\u7a0b\u5e8f\uff0c\u90fd\u5229\u7528\u4e86\u5c40\u90e8\u6027. \u786c\u4ef6 : \u5728\u5904\u7406\u5668\u548c\u4e3b\u5b58\u4e4b\u95f4\u5f15\u5165\u4e00\u4e2a\u5c0f\u800c\u5feb\u901f\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668, \u6765\u4fdd\u5b58\u6700\u8fd1\u5f15\u7528\u7684\u6307\u4ee4\u548c\u6570\u636e, \u4ece\u800c\u63d0\u9ad8\u5bf9\u4e3b\u5b58\u7684\u8bbf\u95ee\u901f\u5ea6. \u64cd\u4f5c\u7cfb\u7edf : \u7528\u4e3b\u5b58\u6765\u7f13\u5b58\u865a\u62df\u7a7a\u95f4\u4e2d\u6700\u8fd1\u88ab\u5f15\u7528\u7684\u6570\u636e\u5757. \u5e94\u7528\u7a0b\u5e8f : \u6bd4\u5982Web\u6d4f\u89c8\u5668\u4f1a\u5c06\u6700\u8fd1\u5f15\u7528\u7684\u6587\u6863\u653e\u5165\u672c\u5730\u78c1\u76d8\u4e2d, \u6765\u7f13\u5b58\u670d\u52a1\u5668\u7684\u6570\u636e. Example \u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u53d8\u91cf sum \u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u4e2d\u90fd\u4f1a\u88ab\u5f15\u7528\u4e00\u6b21, \u56e0\u6b64\u6709\u8f83\u597d\u7684\u65f6\u95f4\u5c40\u9650\u6027. \u56e0\u4e3a sum \u662f\u6807\u91cf\u6240\u4ee5\u4ed6\u6ca1\u6709\u7a7a\u95f4\u5c40\u9650\u6027. \u5bf9\u4e8e\u53d8\u91cf v \u6765\u8bf4\u6709\u826f\u597d\u7684\u7a7a\u95f4\u5c40\u9650\u6027, \u4f46\u65f6\u95f4\u5c40\u9650\u6027\u5f88\u5dee, \u56e0\u4e3a\u6bcf\u4e2a\u5411\u91cf\u5143\u7d20\u53ea\u80fd\u88ab\u8bbf\u95ee\u4e00\u6b21. \u7efc\u4e0a, \u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u51fd\u6570\u6709\u826f\u597d\u7684\u5c40\u9650\u6027. \u5bf9\u4e8e\u4e00\u4e2a\u5411\u91cf, \u5982\u679c\u6bcf\u4e00\u8f6e\u5f15\u7528\u7684\u6570\u636e\u9879\u4e4b\u95f4\u5728\u5185\u5b58\u7a7a\u95f4\u4e2d\u76f8\u9694 k, \u5219\u79f0\u8be5\u7a0b\u5e8f\u5177\u6709 \u6b65\u957f\u4e3a k \u7684\u5f15\u7528\u6a21\u5f0f(Stride-k Reference Pattern) . \u6b65\u957f k \u8d8a\u5927, \u5219\u6bcf\u4e00\u8f6e\u5f15\u7528\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u95f4\u9694\u5f88\u5927, \u5219\u7a7a\u95f4\u5c40\u90e8\u6027\u8d8a\u5dee. Example \u7b2c\u4e00\u4e2a\u7c7b\u4f3c\u4e0a\u6587\u7684\u4f8b\u5b50. \u7b2c\u4e8c\u4e2a\u4e2d\u53d8\u91cf v \u5177\u6709\u6b65\u957f\u4e3a N \u7684\u5f15\u7528\u6a21\u5f0f, \u7a7a\u95f4\u5c40\u90e8\u6027\u8f83\u5dee. \u53d6\u6307\u4ee4\u65b9\u9762, \u56e0\u4e3a\u7a0b\u5e8f\u6307\u4ee4\u662f\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684, CPU \u5fc5\u987b\u53d6\u51fa\u8fd9\u4e9b\u6307\u4ee4, \u6240\u4ee5\u6211\u4eec\u4e5f\u80fd\u8003\u8651\u53d6\u6307\u7684\u5c40\u9650\u6027. for \u5faa\u73af\u4f53\u4e2d\u7684\u6307\u4ee4\u662f\u6309\u8fde\u7eed\u7684\u5185\u5b58\u987a\u5e8f\u6267\u884c\u7684, \u56e0\u6b64\u5faa\u73af\u5177\u6709\u826f\u597d\u7684\u7a7a\u95f4\u5c40\u9650\u6027. \u56e0\u4e3a\u5faa\u73af\u4f53\u4f1a\u6267\u884c\u591a\u6b21, \u56e0\u6b64\u4ed6\u4e5f\u5177\u6709\u826f\u597d\u7684\u65f6\u95f4\u5c40\u9650\u6027. \u603b\u7684\u6765\u8bf4: \u91cd\u590d\u5f15\u7528\u76f8\u540c\u53d8\u91cf\u7684\u7a0b\u5e8f\u6709\u826f\u597d\u7684\u65f6\u95f4\u5c40\u90e8\u6027. \u5bf9\u4e8e\u5177\u6709\u6b65\u957f\u4e3a k \u7684\u5f15\u7528\u6a21\u5f0f\u7684\u7a0b\u5e8f, \u6b65\u957f\u8d8a\u5c0f, \u7a7a\u95f4\u5c40\u90e8\u6027\u8d8a\u597d. \u5bf9\u4e8e\u53d6\u6307\u4ee4\u6765\u8bf4, \u5faa\u73af\u6709\u597d\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5c40\u90e8\u6027. \u5faa\u73af\u4f53\u8d8a\u5c0f, \u5faa\u73af\u8fed\u4ee3\u6b21\u6570\u8d8a\u591a, \u5c40\u90e8\u6027\u8d8a\u597d. \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 \u00b6 \u901a\u8fc7\u4e0a\u9762\u4e24\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5b58\u50a8\u6280\u672f\u548c\u8f6f\u4ef6\u7684\u57fa\u672c\u5c5e\u6027\uff1a \u4e0d\u540c\u5b58\u50a8\u6280\u672f\u7684\u8bbf\u95ee\u65f6\u95f4\u76f8\u5dee\u8f83\u5927, \u901f\u5ea6\u5feb\u7684\u6280\u672f\u6bcf\u5b57\u8282\u7684\u6210\u672c\u6bd4\u901f\u5ea6\u6162\u7684\u6280\u672f\u9ad8, \u4e14\u5bb9\u91cf\u5c0f. \u5e76\u4e14CPU\u548c\u4e3b\u5b58\u4e4b\u95f4\u7684\u5dee\u8ddd\u5728\u53d8\u5927. \u7f16\u5199\u826f\u597d\u7684\u7a0b\u5e8f\u5177\u6709\u826f\u597d\u7684\u5c40\u90e8\u6027. \u6211\u4eec\u5f97\u5230\u4e00\u79cd\u7ec4\u7ec7\u5b58\u50a8\u5668\u7cfb\u7edf\u7684\u65b9\u6cd5, \u79f0\u4e3a \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784(memory hierarchy) . \u4e00\u822c\u800c\u8a00, \u4ece\u9ad8\u5c42\u5f80\u4f4e\u5c42\u8d70, \u5b58\u50a8\u8bbe\u5907\u53d8\u5f97\u66f4\u6162, \u66f4\u4fbf\u5b9c\u548c\u66f4\u5927. \u7f13\u5b58 \u00b6 \u9ad8\u901f\u7f13\u5b58(cache) \u662f\u4e00\u4e2a\u5c0f\u800c\u5feb\u901f\u7684\u5b58\u50a8\u8bbe\u5907, \u5b83\u4f5c\u4e3a\u5b58\u50a8\u5728\u66f4\u5927, \u4e5f\u66f4\u6162\u7684\u8bbe\u5907\u4e2d\u7684\u6570\u636e\u5bf9\u8c61\u7684\u7f13\u51b2\u533a\u57df. \u4f7f\u7528\u9ad8\u901f\u7f13\u5b58\u7684\u8fc7\u7a0b\u79f0\u4e3a \u7f13\u5b58(caching) . \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u7684\u4e2d\u5fc3\u601d\u60f3\u662f: \u5bf9\u4e8e\u6bcf\u4e2a k, \u4f4d\u4e8e k \u5c42\u7684\u66f4\u5feb\u66f4\u5c0f\u7684\u5b58\u50a8\u8bbe\u5907\u4f5c\u4e3a\u4f4d\u4e8e k+1 \u5c42\u7684\u66f4\u5927\u66f4\u6162\u7684\u5b58\u50a8\u8bbe\u5907\u7684\u7f13\u5b58 . \u8be5\u7ed3\u6784\u4e3a\u4ec0\u4e48\u6709\u6548 \u56e0\u4e3a\u7a0b\u5e8f\u7684\u5c40\u90e8\u6027\u539f\u7406. \u76f8\u6bd4\u4e8e\u7b2ck+1\u5c42\u7684\u6570\u636e\uff0c\u7a0b\u5e8f\u4f1a\u503e\u5411\u4e8e\u8bbf\u95ee\u5b58\u50a8\u5728\u7b2ck\u5c42\u7684\u6570\u636e\u3002\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u7b2ck+1\u5c42\u5b58\u50a8\u7684\u6570\u636e\uff0c\u6211\u4eec\u4f1a\u5c06\u5176\u62f7\u8d1d\u5230\u7b2ck\u5c42\uff0c\u56e0\u4e3a\u6839\u636e\u5c40\u90e8\u6027\u539f\u7406\u6211\u4eec\u5f88\u6709\u53ef\u80fd\u5c06\u518d\u6b21\u8bbf\u95ee\u8be5\u6570\u636e\uff0c\u7531\u6b64\u6211\u4eec\u5c31\u80fd\u4ee5\u7b2ck\u5c42\u7684\u8bbf\u95ee\u901f\u5ea6\u6765\u8bbf\u95ee\u6570\u636e\u3002\u800c\u4e14\u56e0\u4e3a\u6211\u4eec\u4e0d\u7ecf\u5e38\u8bbf\u95ee\u7b2ck+1\u5c42\u7684\u6570\u636e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u901f\u5ea6\u66f4\u6162\u4e14\u66f4\u4fbf\u5b9c\u7684\u5b58\u50a8\u8bbe\u5907. \u7b2c k+1 \u5c42\u7684\u5b58\u50a8\u5668\u88ab\u5212\u5206\u4e3a\u8fde\u7eed\u7684\u6570\u636e\u5bf9\u8c61\u7ec4\u5757(chunk), \u79f0\u4e3a \u5757(block) . \u6bcf\u4e2a\u5757\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5730\u5740\u6216\u540d\u5b57. \u5757\u53ef\u4ee5\u662f\u56fa\u5b9a\u5927\u5c0f, \u4e5f\u53ef\u4ee5\u662f\u53ef\u53d8\u5927\u5c0f. \u6570\u636e\u603b\u662f\u4ee5\u5757\u5927\u5c0f\u4e3a \u4f20\u9001\u5355\u5143 \u5728\u7b2c k \u5c42\u548c k+1 \u5c42\u4e4b\u95f4\u6765\u56de\u590d\u5236. \u5c42\u6b21\u7ed3\u6784\u4e2d\u8f83\u4f4e\u5c42(\u79bb CPU \u8f83\u8fdc)\u7684\u8bbe\u5907\u7684\u8bbf\u95ee\u65f6\u95f4\u8f83\u957f, \u4e3a\u4e86\u8865\u507f\u8f83\u957f\u7684\u8bbf\u95ee\u65f6\u95f4, \u503e\u5411\u4e8e\u4f7f\u7528\u8f83\u5927\u7684\u5757. \u7f13\u5b58\u547d\u4e2d \u00b6 \u5f53\u7a0b\u5e8f\u9700\u8981 k+1 \u5c42\u7684\u67d0\u4e2a\u6570\u636e\u5bf9\u8c61 d \u65f6, \u5b83\u9996\u5148\u5728\u5f53\u524d\u5b58\u50a8\u5728 k \u5c42\u7684\u4e00\u4e2a\u5757\u4e2d\u67e5\u627e d. \u5982\u679c d \u521a\u597d\u7f13\u5b58\u5728\u7b2c k \u5c42, \u90a3\u4e48\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684 \u7f13\u5b58\u547d\u4e2d(cache hit) . \u7f13\u5b58\u4e0d\u547d\u4e2d \u00b6 \u82e5\u7b2c k \u5c42\u4e2d\u6ca1\u6709 d, \u5c31\u662f \u7f13\u5b58\u4e0d\u547d\u4e2d(cache miss) . \u6b64\u65f6\u7b2c k \u5c42\u7684\u7f13\u5b58\u4ece k+1 \u5c42\u7684\u7f13\u5b58\u4e2d\u53d6\u51fa\u5305\u542b d \u7684\u90a3\u4e2a\u5757. \u5982\u679c\u7b2c k \u5c42\u7684\u7f13\u5b58\u5df2\u7ecf\u6ee1\u4e86, \u5c31\u4f1a\u8986\u76d6\u73b0\u5b58\u7684\u4e00\u4e2a\u5757. \u8986\u76d6\u73b0\u5b58\u5757\u7684\u8fc7\u7a0b\u79f0\u4e3a \u66ff\u6362 \u6216 \u9a71\u9010 \u8fd9\u4e2a\u5757. \u88ab\u9a71\u9010\u7684\u5757\u4e5f\u79f0\u4e3a \u727a\u7272\u5feb(victim block) . \u51b3\u5b9a\u66ff\u6362\u54ea\u4e2a\u5757\u662f\u7531\u7f13\u5b58\u7684 \u66ff\u6362\u7b56\u7565 \u63a7\u5236\u7684. \u4e00\u4e2a\u7a7a\u7684\u7f13\u5b58\u79f0\u4e3a \u51b7\u7f13\u5b58(cold cache) , \u6b64\u65f6\u7684\u4e0d\u547d\u4e2d\u79f0\u4e3a \u5f3a\u5236\u6027\u4e0d\u547d\u4e2d \u6216\u8005 \u51b7\u4e0d\u547d\u4e2d . \u53ea\u8981\u53d1\u751f\u4e86\u4e0d\u547d\u4e2d, \u7f13\u5b58\u5c31\u8981\u6267\u884c\u67d0\u4e2a \u653e\u7f6e\u7b56\u7565 . \u4f46\u8fd9\u79cd\u9650\u5236\u6027\u7684\u653e\u7f6e\u7b56\u7565\u4f1a\u5f15\u8d77\u4e00\u4e2d\u4e0d\u547d\u4e2d, \u5373 \u51b2\u7a81\u4e0d\u547d\u4e2d . e.g. \u6211\u4eec\u5c06 k+1 \u5c42\u7684\u5757 i \u653e\u5728 k \u5c42\u7684 \\(i mod 4\\) \u7684\u5757\u4e2d. \u6b64\u65f6\u6211\u4eec\u5982\u679c\u8fde\u7eed\u8bf7\u6c42\u5757 0 \u548c\u5757 8, \u4e24\u6b21\u5f15\u7528\u90fd\u4f1a\u4e0d\u547d\u4e2d. \u5757\u7684\u96c6\u5408\u79f0\u4e3a\u8fd9\u4e2a\u9636\u6bb5\u7684 \u5de5\u4f5c\u96c6 . \u5f53\u5de5\u4f5c\u96c6\u5927\u5c0f\u8d85\u8fc7\u7f13\u5b58\u7684\u5927\u5c0f\u65f6, \u7f13\u5b58\u4f1a\u7ecf\u5386 \u5bb9\u91cf\u4e0d\u547d\u4e2d . \u901a\u8fc7\u4ee5\u4e0a\u5185\u5bb9\uff0c\u5c31\u80fd\u89e3\u91ca\u5c40\u90e8\u6027\u597d\u7684\u7a0b\u5e8f\u7684\u4f18\u52bf: \u65f6\u95f4\u5c40\u90e8\u6027 : \u5f53\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\u5728\u7b2c\u4e00\u6b21\u4e0d\u547d\u4e2d\u88ab\u590d\u5236\u5230\u7f13\u5b58\u4e2d\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u7684\u65f6\u95f4\u5c40\u90e8\u6027\u597d\uff0c\u5219\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5c31\u80fd\u53cd\u590d\u5728\u7b2ck\u5c42\u8bbf\u95ee\u5230\u8be5\u5757\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u8fd0\u884c\u66f4\u5feb. \u7a7a\u95f4\u5c40\u90e8\u6027 : \u7531\u4e8e\u7f13\u5b58\u4e2d\u4e00\u4e2a\u5757\u5305\u542b\u591a\u4e2a\u6570\u636e\u5bf9\u8c61\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u7684\u7a7a\u95f4\u5c40\u90e8\u6027\u597d\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u7b2ck\u5c42\u7684\u6570\u636e\u5757\uff0c\u907f\u514d\u518d\u4ece\u7b2ck+1\u5c42\u4f20\u8f93\u5757\u5230\u7b2ck\u5c42. \u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668 \u00b6 \u901a\u7528\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668\u7ec4\u7ec7\u67b6\u6784 \u00b6 \u8003\u8651\u4e00\u4e2a\u7cfb\u7edf, \u6bcf\u4e2a\u5b58\u50a8\u5668\u5730\u5740\u6709 m \u4f4d, \u5f62\u6210 \\(M=2^m\\) \u4e2a\u4e0d\u540c\u7684\u5730\u5740. \u9ad8\u901f\u7f13\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a \\(S=2^s\\) \u4e2a \u9ad8\u901f\u7f13\u5b58\u7ec4 \u7684\u6570\u7ec4. \u6bcf\u4e2a\u7ec4\u6709 E \u4e2a\u9ad8\u901f\u7f13\u5b58\u884c, \u6bcf\u4e2a\u884c\u662f\u7531\u4e00\u4e2a \\(B=2^b\\) \u7684\u6570\u636e\u5757, \u4e00\u4e2a \u6709\u6548\u4f4d , \u548c \\(t=m-(b+s)\\) \u4e2a \u6807\u8bb0\u4f4d \u7ec4\u6210. \u9ad8\u901f\u7f13\u5b58\u7684\u7ed3\u6784\u53ef\u4ee5\u901a\u8fc7\u5143\u7ec4 \\((S, E, B, m)\\) \u9ad8\u901f\u7f13\u5b58\u7684\u5927\u5c0f \\(C=S\\times E\\times B\\) . \u5982\u4e0a\u56fe, m \u4f4d\u7684\u5730\u5740\u88ab\u5206\u4e3a\u4e09\u90e8\u5206: s \u4f4d : \u7ec4\u7d22\u5f15. t \u4f4d : \u6bcf\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u6709\u4e00\u4e2a t \u4f4d\u7684\u6807\u8bb0\u4f4d, \u552f\u4e00\u6807\u8bc6\u6570\u636e\u5757. \u5f53\u6211\u4eec\u901a\u8fc7\u7ec4\u7d22\u5f15\u5b9a\u4f4d\u5230\u7ec4\u65f6, \u6807\u8bb0\u4f4d\u544a\u8bc9\u6211\u4eec\u9700\u8981\u7ec4\u4e2d\u7684\u54ea\u4e00\u884c. \u53ea\u6709\u5f53\u5730\u5740\u7684\u6807\u8bb0\u548c\u884c\u7684\u6807\u8bb0\u4f4d\u76f8\u540c, \u800c\u4e14\u8bbe\u7f6e\u4e86\u884c\u7684\u6709\u6548\u4f4d, \u624d\u80fd\u7f13\u51b2\u547d\u4e2d. b \u4f4d : \u5728 B \u4e2a\u5b57\u8282\u4e2d\u7684\u5b57\u504f\u79fb. \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58 \u00b6 \u5f53 \\(E=1\\) \u65f6, \u9ad8\u901f\u7f13\u5b58\u88ab\u79f0\u4e3a \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58(direct-mapped cache) . \u4ece\u5757\u4e2d\u62bd\u53d6\u51fa\u5b57\u7684\u6d41\u7a0b: \u7ec4\u9009\u62e9 : \u4ece w \u7684\u5730\u5740\u4e2d\u95f4\u62bd\u51fa s \u4e2a\u7d22\u5f15\u4f4d, \u8fd9\u4e9b\u4f4d\u88ab\u89e3\u91ca\u4f4d\u4e3a\u4e00\u4e2a\u5bf9\u5e94\u7ec4\u53f7\u7684\u65e0\u7b26\u53f7\u6574\u6570. \u884c\u5339\u914d : \u56e0\u4e3a\u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c, \u5f53\u4e14\u4ec5\u5f53\u8bbe\u7f6e\u4e86\u6709\u6548\u4f4d, \u800c\u4e14\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u7684\u6807\u8bb0\u4e0e w \u5730\u5740\u4e2d\u7684\u6807\u8bb0\u76f8\u5339\u914d\u65f6, \u8fd9\u4e00\u884c\u624d\u5305\u542b w \u7684\u4e00\u4e2a\u526f\u672c. \u5b57\u9009\u62e9 : \u628a\u5757\u770b\u6210\u4e00\u4e2a\u5b57\u7684\u6570\u7ec4, \u5b57\u8282\u504f\u79fb\u5c31\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u4e00\u4e2a\u7d22\u5f15. \u4e0d\u547d\u4e2d\u65f6\u7684\u884c\u66ff\u6362 : \u5982\u679c\u7f13\u5b58\u4e0d\u547d\u4e2d, \u5b83\u5c31\u4ece\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e0b\u4e00\u5c42\u53d6\u51fa\u88ab\u8bf7\u6c42\u7684\u5757, \u7136\u540e\u5c06\u65b0\u7684\u5757\u5b58\u50a8\u5728\u7ec4\u7d22\u5f15\u4f4d\u6307\u793a\u7684\u7ec4\u4e2d\u7684\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d. \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u51b2\u7a81\u4e0d\u547d\u4e2d \u5f53\u7a0b\u5e8f\u8bbf\u95ee\u5927\u5c0f\u4e3a 2 \u7684\u5e42\u6b21\u7684\u6570\u7ec4\u65f6, \u901a\u5e38\u4f1a\u53d1\u751f\u51b2\u7a81\u4e0d\u547d\u4e2d. float dotprod ( float x [ 8 ], float y [ 8 ]) { float sum = 0.0 ; int i ; for ( i = 0 ; i < 8 ; i ++ ) sum += x [ i ] * y [ i ]; return sum ; } \u5047\u8bbe\u6d6e\u70b9\u6570\u662f 4 \u4e2a\u5b57\u8282, x \u88ab\u52a0\u8f7d\u5230 0 \u5f00\u59cb\u7684 32 \u5b57\u8282\u8fde\u7eed\u5185\u5b58\u4e2d, y \u4ece\u5730\u5740 32 \u5f00\u59cb. \u5047\u8bbe\u4e00\u4e2a\u5757\u662f 16 \u4e2a\u5b57\u8282, \u7531\u4e24\u4e2a\u7ec4\u7ec4\u6210. \u90a3\u4e48 x[i] \u548c y[i] \u4f1a\u88ab\u6620\u5c04\u5230\u76f8\u540c\u7684\u5185\u5b58\u7ec4: \u8fd9\u6837\u6211\u4eec\u4f1a\u5728 x \u548c y \u7684\u5757\u4e4b\u95f4 \u6296\u52a8(thrash) , \u5373\u9ad8\u901f\u7f13\u5b58\u53cd\u590d\u5730\u52a0\u8f7d\u548c\u9a71\u9010\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u5757\u7684\u7ec4. \u53ef\u4ee5\u53d1\u73b0: \u5373\u4f7f\u7a0b\u5e8f\u7684\u5c40\u90e8\u6027\u826f\u597d, \u4e14\u5de5\u4f5c\u96c6\u7684\u5927\u5c0f\u6ca1\u6709\u8d85\u8fc7\u9ad8\u901f\u7f13\u5b58\u5bb9\u91cf, \u4f46\u662f\u7531\u4e8e\u8fd9\u4e9b\u6570\u636e\u5757\u90fd\u88ab\u6620\u5c04\u5230\u4e86\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d, \u4e14\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u6bcf\u4e2a\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c, \u6240\u4ee5\u4f1a\u51fa\u73b0\u6296\u52a8, \u4e0d\u65ad\u51fa\u73b0\u7f13\u5b58\u4e0d\u547d\u4e2d. \u6211\u4eec\u53ef\u4ee5\u4fee\u6b63\u6296\u52a8\u95ee\u9898: \u5728\u6bcf\u4e2a\u6570\u7ec4\u7684\u7ed3\u5c3e\u653e B \u5b57\u8282\u7684\u586b\u5145. \u4e3a\u4ec0\u4e48\u7528\u4e2d\u95f4\u7684\u4f4d\u6765\u505a\u7d22\u5f15 \u5982\u679c\u7528\u9ad8\u4f4d\u505a\u7d22\u5f15, \u90a3\u4e48\u4e00\u4e9b\u8fde\u7eed\u7684\u5185\u5b58\u5757\u5c31\u4f1a\u6620\u5c04\u5230\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u51b2\u5757. \u987a\u5e8f\u626b\u63cf\u4e00\u4e2a\u6570\u7ec4\u7684\u5143\u7d20, \u90a3\u4e48\u9ad8\u901f\u7f13\u5b58\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u5757\u5927\u5c0f\u7684\u6570\u7ec4\u5185\u5bb9, \u8fd9\u6837\u7684\u4f7f\u7528\u6548\u7387\u5f88\u4f4e. \u7ea7\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 \u00b6 \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u51b2\u7a81\u4e0d\u547d\u4e2d\u7684\u6839\u6e90\u5c31\u662f\u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c. \u7ea7\u76f8\u8054\u9ad8\u901f\u7f13\u5b58(set associative cache) \u653e\u9001\u4e86\u8fd9\u4e2a\u9650\u5236. \u4e00\u4e2a \\(1<E<C/B\\) \u7684\u9ad8\u901f\u7f13\u5b58\u79f0\u4e3a E \u8def\u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 . \u62bd\u5b57\u8fc7\u7a0b\u5982\u4e0a. \u5f53\u7f13\u5b58\u4e0d\u547d\u4e2d\u65f6\u9700\u8981\u7f13\u5b58\u884c\u66ff\u6362. \u5982\u679c\u5bf9\u5e94\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d\u6709\u7a7a\u884c, \u76f4\u63a5\u4fdd\u5b58\u5230\u7a7a\u884c, \u5426\u5219\u8003\u8651\u5408\u9002\u7684 \u66ff\u6362\u7b56\u7565 . \u6700\u4e0d\u5e38\u4f7f\u7528(Least-Frequently-Used, LFU) : \u66ff\u6362\u8fc7\u53bb\u67d0\u4e2a\u65f6\u95f4\u7a97\u53e3\u5185\u5f15\u7528\u6b21\u6570\u6700\u5c11\u7684\u4e00\u884c. \u6700\u8fd1\u6700\u5c11\u539f\u7406(Least-Recently-Used, LRU) : \u66ff\u6362\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u95f4\u6700\u4e45\u8fdc\u7684\u90a3\u4e00\u884c. \u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 \u00b6 \u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58(Full Associative Cache) \u662f\u7528\u4e00\u4e2a\u5305\u542b\u6240\u6709\u9ad8\u901f\u7f13\u5b58\u884c\u7684\u7ec4\u7ec4\u6210\u7684, \u5176\u4e2d \\(E=C/B\\) \u5373 \\(E=1\\) . \u6ce8\u610f\u5730\u5740\u4e2d\u4e0d\u9700\u8981\u7ec4\u7d22\u5f15\u4f4d, \u5730\u5740\u53ea\u88ab\u5212\u5206\u4e3a\u4e00\u4e2a\u6807\u8bb0\u548c\u4e00\u4e2a\u5757\u504f\u79fb. \u56e0\u4e3a\u9ad8\u901f\u7f13\u5b58\u7535\u8def\u5fc5\u987b\u5e76\u884c\u5730\u641c\u7d22\u8bb8\u591a\u76f8\u5339\u914d\u7684\u6807\u8bb0, \u6784\u9020\u4e00\u4e2a\u53c8\u5927\u53c8\u5feb\u7684\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u5f88\u56f0\u96be, \u800c\u4e14\u5f88\u6602\u8d35. \u56e0\u6b64\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u53ea\u9002\u5408\u505a\u5f88\u5c0f\u7684\u7f13\u5b58. \u5199\u64cd\u4f5c \u00b6 \u5f53 CPU \u60f3\u8981\u5bf9\u5730\u5740 A \u8fdb\u884c\u5199\u64cd\u4f5c\u65f6, \u4f1a\u901a\u8fc7\u5730\u5740 A \u5224\u65ad\u662f\u5426\u7f13\u5b58\u4e86\u8be5\u5730\u5740, \u5982\u679c\u7f13\u5b58\u4e86\u79f0\u4e3a \u5199\u547d\u4e2d(Write Hit) ,\u5426\u5219\u79f0\u4e3a \u5199\u4e0d\u547d\u4e2d(Write Miss) . \u5199\u547d\u4e2d : \u9ad8\u901f\u7f13\u5b58\u4f1a\u5148\u66f4\u65b0\u5728\u7f13\u5b58\u4e2d\u7684\u7248\u672c, \u7136\u540e\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u6cd5\u66f4\u65b0\u4e0b\u4e00\u7248\u672c. \u76f4\u5199(write-through) : \u7acb\u5373\u5c06 w \u7684\u9ad8\u901f\u7f13\u5b58\u5757\u5199\u56de\u5230\u7d27\u6328\u7740\u7684\u4f4e\u4e00\u5c42\u4e2d. \u7f3a\u70b9\u662f\u6bcf\u6b21\u5199\u90fd\u4f1a\u5f15\u8d77\u603b\u7ebf\u6d41\u91cf. \u5199\u56de(write-back) : \u5c3d\u53ef\u80fd\u5730\u63a8\u8fdf\u66f4\u65b0, \u53ea\u6709\u5f53\u66ff\u6362\u7b97\u6cd5\u8981\u9a71\u9010\u8fd9\u4e2a\u66f4\u65b0\u8fc7\u7684\u5757\u65f6\u624d\u628a\u5b83\u5199\u5230\u7d27\u6328\u7740\u7684\u4f4e\u4e00\u5c42\u4e2d. \u4e3a\u6b64\u6211\u4eec\u8981\u4e3a\u9ad8\u901f\u7f13\u5b58\u7ef4\u62a4\u4e00\u4e2a\u989d\u5916\u7684\u4fee\u6539\u4f4d. \u5b83\u663e\u8457\u5730\u51cf\u5c11\u4e86\u603b\u7ebf\u6d41\u91cf, \u4f46\u7f3a\u70b9\u662f\u589e\u52a0\u4e86\u590d\u6742\u6027. \u5199\u4e0d\u547d\u4e2d : \u5199\u5206\u914d(write-allocate) : \u52a0\u8f7d\u76f8\u5e94\u7684\u4f4e\u4e00\u5c42\u4e2d\u7684\u5757\u5230\u9ad8\u901f\u7f13\u5b58\u4e2d, \u7136\u540e\u66f4\u65b0\u8fd9\u4e2a\u9ad8\u901f\u7f13\u5b58\u5757. \u5199\u5206\u914d\u8bd5\u56fe\u5229\u7528\u7a7a\u95f4\u5c40\u90e8\u6027, \u4f46\u7f3a\u70b9\u662f\u6bcf\u6b21\u4e0d\u547d\u4e2d\u90fd\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u5757\u4ece\u4f4e\u5230\u9ad8\u7684\u4f20\u9001. \u975e\u5199\u5206\u914d : \u907f\u5f00\u9ad8\u901f\u7f13\u5b58, \u76f4\u63a5\u5c06\u8fd9\u4e2a\u5b57\u5199\u5230\u4f4e\u4e00\u5c42\u4e2d. \u76f4\u5199\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u4e3a\u5199\u4e0d\u5206\u914d\u7684, \u5199\u56de\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u4e3a\u5199\u5206\u914d\u7684. \u5efa\u8bae\u91c7\u7528\u5199\u56de\u548c\u5199\u5206\u914d. \u771f\u5b9e\u7684\u9ad8\u901f\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784 \u00b6 \u5b9e\u9645\u4e0a, \u9ad8\u901f\u7f13\u5b58\u65e2\u4fdd\u5b58\u6570\u636e, \u4e5f\u4fdd\u5b58\u6307\u4ee4 i-cache : \u53ea\u4fdd\u5b58\u6307\u4ee4\u7684\u9ad8\u901f\u7f13\u5b58. d-cache : \u53ea\u4fdd\u5b58\u7a0b\u5e8f\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58. \u7edf\u4e00\u7684\u9ad8\u901f\u7f13\u5b58(unified cache) : \u65e2\u4fdd\u5b58\u6307\u4ee4\u53c8\u4fdd\u5b58\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58. \u8fd9\u6837\u505a\u7684\u539f\u56e0: \u5c06\u6570\u636e\u548c\u6307\u4ee4\u5206\u522b\u4fdd\u5b58\u5728\u4e24\u4e2a\u9ad8\u901f\u7f13\u5b58\u4e2d, \u4f7f\u5f97\u5904\u7406\u5668\u53ef\u4ee5\u540c\u65f6\u8bfb\u4e00\u4e2a\u6307\u4ee4\u5b57\u548c\u4e00\u4e2a\u6570\u636e\u5b57. i-cache \u901a\u5e38\u662f\u53ea\u8bfb\u7684, \u6240\u4ee5\u4f1a\u6bd4\u8f83\u7b80\u5355. \u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u7684\u8bbf\u95ee\u6a21\u5f0f\u4f18\u5316\u8fd9\u4e24\u4e2a\u9ad8\u901f\u7f13\u5b58, \u4f7f\u7528\u4e0d\u540c\u7684\u5757\u5927\u5c0f\u3001\u76f8\u8054\u5ea6\u548c\u5bb9\u91cf. \u786e\u4fdd\u6570\u636e\u8bbf\u95ee\u548c\u6307\u4ee4\u8bbf\u95ee\u4e4b\u95f4\u4e0d\u5f62\u6210\u51b2\u7a81\u4e0d\u547d\u4e2d. \u4ee3\u4ef7\u5c31\u662f\u4f1a\u5bfc\u81f4\u9ad8\u901f\u7f13\u5b58\u5bb9\u91cf\u53d8\u5c0f, \u63d0\u9ad8\u51fa\u73b0\u5bb9\u91cf\u4e0d\u547d\u4e2d\u7684\u53ef\u80fd\u6027. \u9ad8\u901f\u7f13\u5b58\u53c2\u6570\u5bf9\u6027\u80fd\u7684\u5f71\u54cd \u00b6 \u8861\u91cf\u9ad8\u901f\u7f13\u5b58\u6027\u80fd\u7684\u6307\u6807: \u4e0d\u547d\u4e2d\u7387 : \u4e0d\u547d\u4e2d\u6570\u91cf/\u5f15\u7528\u6570\u91cf \u547d\u4e2d\u7387 : 1 - \u4e0d\u547d\u4e2d\u7387 \u547d\u4e2d\u65f6\u95f4 : \u4ece\u9ad8\u901f\u7f13\u5b58\u4f20\u9001\u4e00\u4e2a\u5b57\u5230 CPU \u6240\u9700\u7684\u65f6\u95f4 \u4e0d\u547d\u4e2d\u5904\u7f5a : \u7531\u4e8e\u4e0d\u547d\u4e2d\u6240\u9700\u8981\u7684\u989d\u5916\u7684\u65f6\u95f4 \u53c2\u6570 \u4f18\u70b9 \u7f3a\u70b9 \u5efa\u8bae \u9ad8\u901f\u7f13\u5b58\u5927\u5c0f(\u8d8a\u5927) \u63d0\u9ad8\u547d\u4e2d\u7387 \u589e\u52a0\u547d\u4e2d\u65f6\u95f4 L1<L2<L3 \u5757\u5927\u5c0f(\u8d8a\u5927) \u5229\u7528\u7a7a\u95f4\u5c40\u9650\u6027, \u63d0\u9ad8\u547d\u4e2d\u7387 \u9ad8\u901f\u7f13\u5b58\u884c\u8d8a\u5c11, \u635f\u5bb3\u65f6\u95f4\u5c40\u9650\u6027; \u5bf9\u4e0d\u547d\u4e2d\u5904\u7f5a\u6709\u8d1f\u9762\u5f71\u54cd, \u4f20\u9001\u65f6\u95f4\u8d8a\u957f \u73b0\u4ee3\u7cfb\u7edf\u6298\u4e2d\u8bbe\u7f6e\u5757\u5305\u542b64\u4e2a\u5b57\u8282 \u76f8\u8054\u5ea6(\u8d8a\u9ad8, \u5373 E \u8d8a\u5927) \u964d\u4f4e\u4e86\u9ad8\u901f\u7f13\u5b58\u7531\u4e8e\u51b2\u7a81\u4e0d\u547d\u4e2d\u51fa\u73b0\u6296\u52a8\u7684\u53ef\u80fd \u8f83\u9ad8\u7684\u6210\u672c; \u9700\u8981\u66f4\u591a\u6807\u8bb0\u4f4d; \u589e\u52a0\u547d\u4e2d\u65f6\u95f4; \u589e\u52a0\u4e0d\u547d\u4e2d\u60e9\u7f5a L1 \u548c L2 \u4f7f\u7528 8 \u8def\u7ec4\u76f8\u8054, L3 \u4f7f\u7528 16 \u8def\u7ec4\u76f8\u8054 \u5199\u7b56\u7565(\u76f4\u5199) \u5bb9\u6613\u5b9e\u73b0; \u80fd\u4f7f\u7528\u72ec\u7acb\u4e8e\u9ad8\u901f\u7f13\u5b58\u7684\u5199\u7f13\u51b2\u533a\u6765\u66f4\u65b0\u5185\u5b58;\u8bfb\u4e0d\u547d\u4e2d\u7684\u5f00\u9500\u4e0d\u5927 \u5f15\u8d77\u7684\u4f20\u9001\u6b21\u6570\u591a \u9ad8\u901f\u7f13\u5b58\u8d8a\u5f80\u4e0b\u5c42, \u8d8a\u53ef\u80fd\u4f7f\u7528\u5199\u56de\u800c\u4e0d\u662f\u76f4\u5199 \u7531\u6b64, \u7f16\u5199\u9ad8\u901f\u7f13\u5b58\u53cb\u597d\u7684\u4ee3\u7801\u9700\u8981: \u8ba9\u6700\u5e38\u89c1\u7684\u4ee3\u7801\u8fd0\u884c\u5f97\u5feb. \u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u53cd\u590d\u5f15\u7528\u662f\u597d\u7684, \u56e0\u4e3a\u7f16\u8bd1\u5668\u80fd\u591f\u628a\u5b83\u4eec\u7f13\u5b58\u5728\u5bc4\u5b58\u5668\u4e4b\u4e2d(\u65f6\u95f4\u5c40\u90e8\u6027). \u6b65\u957f\u4e3a 1 \u7684\u5f15\u7528\u6a21\u5f0f\u662f\u597d\u7684, \u56e0\u4e3a\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u6240\u6709\u5c42\u6b21\u4e0a\u7684\u7f13\u5b58\u90fd\u662f\u5c06\u6570\u636e\u7f13\u5b58\u4e3a\u8fde\u7eed\u7684\u5757.(\u7a7a\u95f4\u5c40\u90e8\u6027) \u5c3d\u91cf\u51cf\u5c11\u6bcf\u4e2a\u5faa\u73af\u5185\u7684\u7f13\u5b58\u4e0d\u547d\u4e2d\u6570\u91cf, \u8f83\u9ad8\u7684\u4e0d\u547d\u4e2d\u7387\u961f\u8fd0\u884c\u65f6\u95f4\u53ef\u4ee5\u6709\u663e\u8457\u7684\u5f71\u54cd. \u5b58\u50a8\u5668\u5c71 \u00b6 \u4e00\u4e2a\u7a0b\u5e8f\u4ece\u5b58\u50a8\u5668\u7cfb\u7edf\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u901f\u7387\u79f0\u4e3a \u8bfb\u541e\u5410\u91cf(Read Throughput) \u6216 \u8bfb\u5e26\u5bbd(Read Bandwidth) \uff0c\u5355\u4f4d\u4e3aMB/s. \u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u6765\u8861\u91cf\u7a7a\u95f4\u5c40\u90e8\u6027\u548c\u65f6\u95f4\u5c40\u90e8\u6027\u5bf9\u7a0b\u5e8f\u541e\u5410\u91cf\u7684\u5f71\u54cd. \u901a\u8fc7\u8c03\u6574 size(\u65f6\u95f4\u5c40\u90e8\u6027. size \u5c0f\u5219\u653e\u8fdb L1 \u9ad8\u901f\u7f13\u5b58, size \u5927\u5219\u653e\u8fdb L3) \u548c stride(\u7a7a\u95f4\u5c40\u90e8\u6027, \u6b65\u957f) \u6765\u5ea6\u91cf\u7a0b\u5e8f\u7684\u541e\u5410\u91cf\uff0c\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u5b58\u50a8\u5668\u5c71(Memory Mountain). \u4fdd\u6301 stride \u4e0d\u53d8, \u89c2\u5bdf\u9ad8\u901f\u7f13\u5b58\u5927\u5c0f\u548c\u65f6\u95f4\u5c40\u90e8\u6027\u5bf9\u6027\u80fd\u7684\u5f71\u54cd: \u4fdd\u6301\u5de5\u4f5c\u96c6\u4e3a 4MB, \u6cbf\u7740 L3 \u5c71\u810a\u67e5\u770b\u7a7a\u95f4\u5c40\u90e8\u6027\u5bf9\u6027\u80fd\u7684\u5f71\u54cd: \u7efc\u4e0a\u6240\u8ff0\uff1a\u4f7f\u9891\u7e41\u4f7f\u7528\u7684\u5b57\u4ece L1 \u4e2d\u53d6\u51fa\uff0c\u8fd8\u9700\u8981\u5229\u7528\u7a7a\u95f4\u5c40\u90e8\u6027\uff0c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u591a\u7684\u5b57\u4ece\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u8bfb\u53d6\u5230. \u91cd\u65b0\u6392\u5217\u5faa\u73af\u4ee5\u63d0\u9ad8\u7a7a\u95f4\u5c40\u90e8\u6027 \u00b6 \u77e9\u9635\u4e58\u6cd5 \u5047\u8bbe\u4e24\u4e2a\u77e9\u9635\u90fd\u662f n*n \u7684 double \u578b\u6570\u7ec4. sizeof(double) == 8. \u53ea\u6709\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58, \u5176\u5757\u5927\u5c0f\u4e3a 32 \u5b57\u8282. n \u5f88\u5927\u4ee5\u81f3\u4e8e\u77e9\u9635\u7684\u4e00\u884c\u90fd\u4e0d\u80fd\u5b8c\u5168\u88c5\u8fdb L1 \u9ad8\u901f\u7f13\u5b58\u4e2d. \u7f16\u8bd1\u5668\u5c06\u5c40\u90e8\u53d8\u91cf\u5b58\u50a8\u5230\u5bc4\u5b58\u5668\u4e2d, \u56e0\u6b64\u5faa\u73af\u5185\u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528\u4e0d\u9700\u8981\u4efb\u4f55\u5b58\u50a8\u548c\u52a0\u8f7d\u6307\u4ee4. \u5176\u7ed3\u679c:(\u5185\u5faa\u73af) \u4f7f\u7528\u5206\u5757\u63d0\u9ad8\u65f6\u95f4\u5c40\u90e8\u6027 \u00b6","title":"\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784"},{"location":"CSAPP/6/#_1","text":"","title":"\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784"},{"location":"CSAPP/6/#_2","text":"","title":"\u5b58\u50a8\u6280\u672f"},{"location":"CSAPP/6/#_3","text":"\u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668(Random-Access Memory, RAM) \u6839\u636e\u5b58\u50a8\u5355\u5143\u53ef\u5206\u4e3a\u4e24\u7c7b: \u9759\u6001\u7684 RAM(SRAM) \u548c\u52a8\u6001\u7684 RAM(DRAM) .","title":"\u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668"},{"location":"CSAPP/6/#sram","text":"SRAM \u5c06\u6bcf\u4e2a\u4f4d\u5b58\u50a8\u5728\u4e00\u4e2a \u53cc\u7a33\u6001(bistable) \u7684\u5b58\u50a8\u5355\u5143\u91cc. \u6bcf\u4e2a\u5355\u5143\u7528\u4e00\u4e2a\u516d\u6676\u4f53\u7ba1\u7535\u8def\u5b9e\u73b0. \u5b83\u53ef\u4ee5\u65e0\u9650\u671f\u5730\u4fdd\u6301\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7535\u538b\u914d\u7f6e\u6216\u8005\u72b6\u6001\u4e4b\u4e00, \u5176\u4ed6\u4efb\u4f55\u72b6\u6001\u90fd\u662f\u4e0d\u7a33\u5b9a\u7684, \u7535\u8def\u4f1a\u8fc5\u901f\u5730\u8f6c\u79fb\u5230\u4e24\u4e2a\u7a33\u5b9a\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a. \u6ce8 : \u5f53\u949f\u6446\u5728\u5782\u76f4\u7684\u4f4d\u7f6e\u65f6, \u5904\u4e8e \u4e9a\u7a33\u6001 , \u6700\u7ec6\u5fae\u7684\u6270\u52a8\u4e5f\u80fd\u4f7f\u5b83\u5012\u4e0b, \u4e14\u65e0\u6cd5\u6062\u590d. \u7279\u70b9 \u53ea\u8981\u6709\u7535, \u5b83\u5c31\u80fd\u6c38\u8fdc\u4fdd\u6301\u5b83\u7684\u503c, \u5373\u4f7f\u6709\u5e72\u6270\u6765\u6270\u4e71\u7535\u538b, \u5f53\u5e72\u6270\u6d88\u9664\u65f6\u7535\u8def\u5c31\u4f1a\u6062\u590d\u5230\u7a33\u5b9a\u503c.","title":"SRAM"},{"location":"CSAPP/6/#dram","text":"DRAM \u5c06\u6bcf\u4e2a\u4f4d\u5b58\u50a8\u4e3a\u5bf9\u4e00\u4e2a\u7535\u5bb9\u7684\u5145\u7535. \u6bcf\u4e2a\u5355\u5143\u7531\u4e00\u4e2a\u7535\u5bb9\u548c\u4e00\u4e2a\u8bbf\u95ee\u6676\u4f53\u7ba1\u7ec4\u6210. \u7279\u70b9: \u6bcf\u4e2a\u7535\u5bb9\u975e\u5e38\u5c0f, \u56e0\u6b64\u53ef\u4ee5 DRAM \u5b58\u50a8\u5668\u53ef\u4ee5\u5236\u9020\u5f97\u975e\u5e38\u5bc6\u96c6. DRAM \u5b58\u50a8\u5668\u5bf9\u5e72\u6270\u975e\u5e38\u654f\u611f, \u5f53\u7535\u5bb9\u7535\u538b\u88ab\u6270\u4e71\u540e\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u6062\u590d\u4e86. \u66b4\u9732\u5728\u5149\u7ebf\u4e2d\u4f1a\u5bfc\u81f4\u7535\u5bb9\u7535\u538b\u6539\u53d8. \u5f88\u591a\u539f\u56e0\u4f1a\u5bfc\u81f4\u6f0f\u7535, \u4f7f\u5f97 DRAM \u5355\u5143\u5728 10~100 \u6beb\u79d2\u65f6\u95f4\u5185\u5931\u53bb\u7535\u8377. \u56e0\u6b64\u5185\u5b58\u5fc5\u987b\u5468\u671f\u6027\u5730\u901a\u8fc7\u8bfb\u51fa, \u7136\u540e\u91cd\u5199\u6765\u5237\u65b0\u5185\u5b58\u6bcf\u4e00\u4f4d. \u4f20\u7edf\u7684 DRAM \u82af\u7247\u4e2d\u7684\u5355\u5143(\u4f4d)\u88ab\u5206\u6210 \\(d\\) \u4e2a\u8d85\u5355\u5143(supercell), \u6bcf\u4e2a\u8d85\u5355\u5143\u90fd\u7531 \\(w\\) \u4e2a DRAM \u5355\u5143\u7ec4\u6210. \u4e00\u4e2a \\(d\\times w\\) \u7684 DRAM \u603b\u5171\u5b58\u50a8\u4e86 \\(dw\\) \u4f4d\u4fe1\u606f. \u8d85\u5355\u5143\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a \\(r\\) \u884c \\(c\\) \u5217\u957f\u65b9\u5f62\u9635\u5217, \u8fd9\u91cc \\(rc=d\\) . \u4fe1\u606f\u901a\u8fc7\u79f0\u4e3a addr \u548c data \u5f15\u811a(pin) \u7684\u5916\u90e8\u8fde\u63a5\u5668\u6d41\u5165\u548c\u6d41\u51fa\u82af\u7247. \u6bcf\u4e2a DRAM \u82af\u7247\u88ab\u8fde\u63a5\u5230 \u5185\u5b58\u63a7\u5236\u5668 \u7684\u7535\u8def, \u8fd9\u4e2a\u7535\u8def\u53ef\u4ee5\u4e00\u6b21\u4f20\u9001 \\(w\\) \u4f4d\u5230\u6bcf\u4e2a DRAM \u82af\u7247\u6216\u4e00\u6b21\u4ece DRAM \u82af\u7247\u4f20\u51fa \\(w\\) \u4f4d. \u4e3a\u4e86\u8bfb\u51fa (i,j) \u7684\u5185\u5bb9, \u5185\u5b58\u63a7\u5236\u5668\u5c06\u884c\u5730\u5740 i \u53d1\u9001\u5230 DRAM, \u7136\u540e\u662f\u5217\u5730\u5740 j. DRAM \u628a\u8d85\u5355\u5143 (i,j) \u7684\u5185\u5bb9\u53d1\u56de\u7ed9\u63a7\u5236\u5668\u4f5c\u4e3a\u76f8\u5e94. \u884c\u5730\u5740 i \u79f0\u4e3a RAS(Row Access Strobe) , \u5217\u5730\u5740\u79f0\u4e3a CAS(Column Access Strobe) . \u4e00\u4e2a 128 \u4f4d\u7684 \\(16\\times 8\\) \u7684 DRAM \u82af\u7247 \u6709 \\(d=16\\) \u4e2a\u8d85\u5355\u5143, \u6bcf\u4e2a\u8d85\u5355\u5143\u5b58\u50a8 \\(w=8\\) \u4f4d\u4fe1\u606f. \u4f8b\u5982\u6211\u4eec\u8981\u53d6 (2,1) \u7684\u5185\u5bb9, \u5148\u901a\u8fc7 addr \u53d1\u9001\u884c\u5730\u5740 2, DRAM \u4f1a\u5c06\u8be5\u884c\u5185\u5bb9\u590d\u5236\u5230\u4e00\u4e2a\u5185\u90e8\u884c\u7f13\u51b2\u533a, \u63a5\u4e0b\u6765\u53d1\u9001\u5217\u5730\u5740 1, DRAM \u5c06\u8d85\u5355\u5143(2,1) \u53d6\u51fa\u5e76\u901a\u8fc7 data \u53d1\u9001\u56de\u5185\u5b58\u63a7\u5236\u5668. \u7535\u8def\u8bbe\u8ba1\u8005\u5c06 DRAM \u7ec4\u7ec7\u6210\u4e8c\u7ef4\u9635\u5217\u800c\u4e0d\u662f\u7ebf\u6027\u6570\u7ec4\u7684\u4e00\u4e2a\u539f\u56e0\u662f\u964d\u4f4e\u82af\u7247\u4e0a\u5730\u5740\u5f15\u811a\u7684\u6570\u91cf. i.e. \\(\\max(\\lceil \\log_2{r} \\rceil,\\lceil \\log_2{c} \\rceil)\\) DRAM \u82af\u7247\u5c01\u88c5\u5728 \u5185\u5b58\u6a21\u5757 \u4e2d, \u5b83\u63d2\u5230\u4e3b\u677f\u7684\u6269\u5c55\u69fd\u4e0a. 8 \u4e2a 8M \\(\\times\\) 8 \u7684 DRAM \u7ec4\u6210\u7684\u5185\u5b58\u6a21\u5757 \u8981\u4ece\u5185\u5b58\u5730\u5740 A \u53d6\u4e00\u4e2a\u5b57, \u5185\u5b58\u63a7\u5236\u5668\u5c06 A \u8f6c\u5316\u4e3a\u4e00\u4e2a\u8d85\u5355\u5143\u5730\u5740 (i,j), \u5e76\u5c06\u5b83\u53d1\u9001\u5230\u5185\u5b58\u6a21\u5757, \u7136\u540e\u5185\u5b58\u6a21\u5757\u518d\u5c06 i \u548c j \u5e7f\u64ad\u5230\u6bcf\u4e2a DRAM. \u6bcf\u4e2a DRAM \u8f93\u51fa\u5b83\u7684 (i,j) \u8d85\u5355\u5143\u7684 8 \u4f4d\u5185\u5bb9, \u6a21\u5757\u4e2d\u7684\u7535\u8def\u6536\u96c6\u8fd9\u4e9b\u8f93\u51fa\u5e76\u5c06\u5b83\u4eec\u5408\u5e76\u4e3a\u4e00\u4e2a 64 \u4f4d\u7684\u5b57, \u518d\u8fd4\u56de\u5185\u5b58\u63a7\u5236\u5668. \u6211\u4eec\u53ef\u4ee5\u5c06\u591a\u4e2a\u5185\u5b58\u6a21\u5757\u8fde\u63a5\u5230\u5185\u5b58\u63a7\u5236\u5668, \u805a\u5408\u6210\u4e3b\u5b58. \u8fd9\u79cd\u60c5\u51b5\u4e0b\u5185\u5b58\u63a7\u5236\u5668\u6536\u5230\u5730\u5740 A \u65f6\u4f1a\u5148\u627e\u5230\u5305\u542b\u5730\u5740 A \u7684\u5185\u5b58\u6a21\u5757 A, \u7136\u540e\u6309\u7167\u4e0a\u8ff0\u6b65\u9aa4\u5f97\u5230\u5b57. \u589e\u5f3a\u7684 DRAM \u5feb\u9875\u6a21\u5f0f DRAM(Fast Page Mode DRAM, FPM DRAM) \u4f20\u7edf\u7684 DRAM \u5c06\u8d85\u5355\u5143\u4e00\u6574\u884c\u590d\u5236\u5230\u5b83\u7684\u5185\u90e8\u884c\u7f13\u51b2\u533a, \u4f7f\u7528\u4e00\u4e2a\u7136\u540e\u4e22\u5f03\u5269\u4f59\u7684. FPM DRAM \u5141\u8bb8\u5bf9\u540c\u4e00\u884c\u8fde\u7eed\u5730\u8bbf\u95ee\u53ef\u4ee5\u76f4\u63a5\u4ece\u884c\u7f13\u51b2\u533a\u5f97\u5230\u670d\u52a1. \u6269\u5c55\u6570\u636e\u8f93\u51fa\u7684 DRAM(Extended Data Out DRAM, EDO DRAM) FPM DRAM \u7684\u589e\u5f3a\u5f62\u5f0f, \u5141\u8bb8\u5404\u4e2a CAS \u4fe1\u53f7\u5728\u65f6\u95f4\u4e0a\u9760\u5f97\u66f4\u7d27\u5bc6\u4e00\u70b9. \u540c\u6b65 DRAM(Synchronous DRAM, SDRAM) \u4ed6\u4eec\u4e0e\u5185\u5b58\u63a7\u5236\u5668\u901a\u4fe1\u4f7f\u7528\u4e00\u7ec4\u663e\u5f0f\u7684\u63a7\u5236\u4fe1\u53f7(FPM EDO\u90fd\u662f\u5f02\u6b65\u7684), \u6700\u7ec8\u6548\u679c\u662f SDRAM \u80fd\u6bd4\u5f02\u6b65\u7684\u5b58\u50a8\u5668\u66f4\u5feb\u5730\u8f93\u51fa\u8d85\u5355\u5143\u7684\u5185\u5bb9. \u53cc\u500d\u6570\u636e\u901f\u7387\u540c\u6b65 DRAM(Double Data-Rate Synchronous DRAM, DDR SDRAM) \u4f7f\u7528\u4e24\u4e2a\u65f6\u949f\u6cbf\u4f5c\u4e3a\u63a7\u5236\u4fe1\u53f7, \u4ece\u800c\u4f7f DRAM \u7684\u901f\u5ea6\u7ffb\u500d. \u89c6\u9891 RAM(Video RAM, VVRAM)","title":"DRAM"},{"location":"CSAPP/6/#_4","text":"\u5982\u679c\u65ad\u7535, DRAM \u548c SRAM \u4f1a\u4e22\u5931\u4ed6\u4eec\u7684\u4fe1\u606f, \u56e0\u6b64\u4ed6\u4eec\u662f \u6613\u5931\u7684(volatile) . \u800c \u975e\u6613\u5931\u5b58\u50a8\u5668(Nonvolatile Memory) \u5373\u4f7f\u65ad\u7535\u4e5f\u80fd\u4fdd\u5b58\u4ed6\u4eec\u7684\u4fe1\u606f, \u8fd9\u7c7b\u5b58\u50a8\u5668\u79f0\u4e3a \u53ea\u8bfb\u5b58\u50a8\u5668(Read-Only Memory, ROM) .(\u90e8\u5206\u5b58\u50a8\u5668\u53ef\u4ee5\u8bfb\u5199, \u5386\u53f2\u539f\u56e0\u6211\u4eec\u4fdd\u7559\u540d\u5b57) PROM(Programmable ROM, \u53ef\u7f16\u7a0bROM) : \u53ea\u80fd\u88ab\u7f16\u7a0b\u4e00\u6b21, PROM \u6bcf\u4e2a\u5b58\u50a8\u5668\u5355\u5143\u90fd\u6709\u4e00\u79cd\u7194\u4e1d, \u53ea\u80fd\u7528\u9ad8\u7535\u6d41\u7194\u65ad\u4e00\u6b21. \u53ef\u64e6\u5199\u53ef\u7f16\u7a0b ROM(Erasable Programmable ROM, EPROM) : \u53ef\u4ee5\u6279\u91cf\u64e6\u9664 \u95ea\u5b58(Flash Memory) : \u5177\u6709\u90e8\u5206(\u5757\u7ea7)\u64e6\u9664\u529f\u80fd, \u5927\u7ea6\u64e6\u9664\u5341\u4e07\u6b21\u540e\u4f1a\u8017\u5c3d \u5b58\u50a8\u5728 ROM \u8bbe\u5907\u4e2d\u7684\u7a0b\u5e8f\u79f0\u4e3a \u56fa\u4ef6(firmware) . \u5f53\u4e00\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u901a\u7535\u540e, \u5b83\u4f1a\u8fd0\u884c\u5b58\u50a8\u5728 ROM \u4e2d\u7684\u56fa\u4ef6.","title":"\u975e\u6613\u5931\u5b58\u50a8\u5668"},{"location":"CSAPP/6/#_5","text":"\u6570\u636e\u6d41\u901a\u8fc7 \u603b\u7ebf(bus) \u7684\u5171\u4eab\u7535\u5b50\u7535\u8def\u5728\u5904\u7406\u5668\u548c DRAM \u4e3b\u5b58\u4e4b\u95f4\u6765\u56de\u56de\u4f20\u9012\u6570\u636e. \u6bcf\u6b21 CPU \u548c\u4e3b\u5b58\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u9001\u90fd\u662f\u901a\u8fc7 \u603b\u7ebf\u4e8b\u52a1(bus transaction) \u6765\u5b8c\u6210. \u603b\u7ebf \u662f\u4e00\u7ec4\u5e76\u884c\u7684\u5bfc\u7ebf, \u80fd\u643a\u5e26\u5730\u5740, \u6570\u636e\u548c\u63a7\u5236\u4fe1\u53f7. \u5176\u4e2d I/O \u6865\u63a5\u5668\u4e2d\u5305\u62ec\u5185\u5b58\u63a7\u5236\u5668, \u80fd\u591f\u5c06\u7cfb\u7edf\u603b\u7ebf\u7684\u7535\u5b50\u4fe1\u53f7\u548c\u5185\u5b58\u603b\u7ebf\u7684\u7535\u5b50\u4fe1\u53f7\u4e92\u76f8\u7ffb\u8bd1, \u4e5f\u80fd\u5c06\u7cfb\u7edf\u603b\u7ebf\u548c\u5185\u5b58\u603b\u7ebf\u8fde\u63a5\u5230I/O\u603b\u7ebf. \u8bfb\u4e8b\u52a1&\u5199\u4e8b\u52a1 \u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u6570\u636e\u5230\u5bc4\u5b58\u5668: movq A, %rax CPU \u5c06 \u5730\u5740 A \u653e\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a, I/O \u6865\u5c06\u4fe1\u53f7\u4f20\u9012\u5230\u5185\u5b58\u603b\u7ebf. \u4e3b\u5b58\u611f\u77e5\u5230\u5185\u5b58\u603b\u7ebf\u4e0a\u7684\u5730\u5740\u4fe1\u53f7, \u4ece\u5185\u5b58\u603b\u7ebf\u8bfb\u5730\u5740, \u4ece DRAM \u53d6\u51fa\u6570\u636e\u5b57, \u5e76\u5c06\u6570\u636e\u5199\u5230\u5185\u5b58\u603b\u7ebf. I/O \u603b\u7ebf\u5c06\u5185\u5b58\u603b\u7ebf\u4fe1\u53f7\u7ffb\u8bd1\u6210\u7cfb\u7edf\u603b\u7ebf\u4fe1\u53f7, \u7136\u540e\u6cbf\u7740\u7cfb\u7edf\u603b\u7ebf\u4f20\u9012. CPU \u611f\u77e5\u5230\u7cfb\u7edf\u603b\u7ebf\u4e0a\u7684\u6570\u636e, \u4ece\u603b\u7ebf\u4e0a\u8bfb\u6570\u636e, \u5e76\u5c06\u6570\u636e\u590d\u5236\u5230\u5bc4\u5b58\u5668 %rax. \u5199\u5185\u5b58\u7c7b\u4f3c:","title":"\u8bbf\u95ee\u4e3b\u5b58"},{"location":"CSAPP/6/#_6","text":"\u78c1\u76d8(disk) \u662f\u5e7f\u4e3a\u5e94\u7528\u7684\u4fdd\u5b58\u5927\u91cf\u6570\u636e\u7684\u5b58\u50a8\u8bbe\u5907, \u5b58\u50a8\u6570\u636e\u7684\u6570\u91cf\u7ea7\u53ef\u4ee5\u8fbe\u5230\u51e0\u767e\u5230\u51e0\u5343\u5343\u5146\u5b57\u8282.","title":"\u78c1\u76d8\u5b58\u50a8"},{"location":"CSAPP/6/#_7","text":"\u78c1\u76d8\u662f\u7531 \u76d8\u7247(platter) \u6784\u6210\u7684, \u6bcf\u4e2a\u76d8\u7247\u6709\u4e24\u4e2a \u8868\u9762 . \u8868\u9762\u8986\u76d6\u7740\u78c1\u6027\u8bb0\u5f55\u6750\u6599. \u76d8\u7247\u4e2d\u592e\u6709\u4e00\u4e2a\u53ef\u4ee5\u65cb\u8f6c\u7684 \u4e3b\u8f74(spindle) , \u5b83\u4f7f\u5f97\u76d8\u7247\u4ee5\u56fa\u5b9a\u7684\u65cb\u8f6c\u901f\u7387\u65cb\u8f6c. \u6bcf\u4e2a\u8868\u9762\u662f\u7531\u4e00\u7ec4 \u78c1\u9053(track) \u7684\u540c\u5fc3\u5706\u7ec4\u6210\u7684. \u6bcf\u4e2a\u78c1\u9053\u88ab\u5212\u5206\u4e3a\u4e00\u7ec4 \u6247\u533a(sector) . \u6bcf\u4e2a\u6247\u533a\u5305\u542b\u76f8\u7b49\u6570\u91cf\u7684\u6570\u636e\u4f4d(\u901a\u5e38\u662f 512 \u5b57\u8282). \u6247\u533a\u4e4b\u95f4\u7531\u4e00\u4e9b \u95f4\u9699 \u5206\u9694\u5f00, \u95f4\u9699\u4e0d\u5b58\u50a8\u6570\u636e\u4f4d, \u95f4\u9699\u5b58\u50a8\u7528\u6765\u6807\u8bc6\u6247\u533a\u7684\u683c\u5f0f\u5316\u4f4d. \u901a\u5e38\u4f7f\u7528 \u67f1\u9762(cyclinder) \u6765\u63cf\u8ff0\u591a\u4e2a\u76d8\u7247\u9a71\u52a8\u5668\u7684\u6784\u9020, \u67f1\u9762\u662f\u6240\u6709\u76d8\u7247\u8868\u9762\u4e0a\u5230\u4e3b\u8f74\u4e2d\u5fc3\u7684\u8ddd\u79bb\u76f8\u7b49\u7684\u78c1\u9053\u7684\u96c6\u5408.","title":"\u78c1\u76d8\u6784\u9020"},{"location":"CSAPP/6/#_8","text":"\u4e00\u4e2a\u78c1\u76d8\u4e0a\u53ef\u4ee5\u8bb0\u5f55\u7684\u6700\u5927\u4f4d\u6570\u79f0\u4e3a\u4ed6\u7684\u6700\u5927\u5bb9\u91cf, \u4e3b\u8981\u7531\u4e0b\u5217\u6280\u672f\u56e0\u7d20\u51b3\u5b9a: \u8bb0\u5f55\u5bc6\u5ea6 (\u4f4d/\u82f1\u5bf8): \u78c1\u9053\u4e00\u82f1\u5bf8\u7684\u6bb5\u4e2d\u53ef\u4ee5\u653e\u5165\u7684\u4f4d\u6570. \u78c1\u9053\u5bc6\u5ea6 (\u9053/\u82f1\u5bf8): \u4ece\u76d8\u7247\u4e2d\u5fc3\u51fa\u53d1\u534a\u5f84\u4e0a\u4e00\u82f1\u5bf8\u7684\u6bb5\u5185\u53ef\u4ee5\u6709\u7684\u78c1\u9053\u6570. \u9762\u5bc6\u5ea6 (\u4f4d/\u5e73\u65b9\u82f1\u5c3a): \u8bb0\u5f55\u5bc6\u5ea6\u4e0e\u78c1\u9053\u5bc6\u5ea6\u7684\u4e58\u79ef. \u4e3a\u4e86\u4fdd\u6301\u6bcf\u4e2a\u78c1\u9053\u6709\u56fa\u5b9a\u7684\u6247\u533a\u6570, \u8d8a\u5f80\u5916\u7684\u78c1\u9053\u6247\u533a\u9694\u5f97\u8d8a\u5f00. \u73b0\u4ee3\u5927\u5bb9\u91cf\u78c1\u76d8\u4f7f\u7528\u4e00\u79cd \u591a\u533a\u8bb0\u5f55 \u7684\u6280\u672f, \u67f1\u9762\u7684\u96c6\u5408\u88ab\u5206\u5272\u6210\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6\u5408, \u79f0\u4e3a \u8bb0\u5f55\u533a . \u78c1\u76d8\u5bb9\u91cf\u8ba1\u7b97\u516c\u5f0f:","title":"\u78c1\u76d8\u5bb9\u91cf"},{"location":"CSAPP/6/#_9","text":"\u78c1\u76d8\u7528 \u8bfb/\u5199\u5934 \u6765\u8bfb\u5199\u5b58\u50a8\u5728\u78c1\u6027\u8868\u9762\u7684\u4f4d, \u800c\u8bfb\u5199\u5934\u8fde\u63a5\u5230\u4e00\u4e2a \u4f20\u52a8\u81c2 \u4e00\u7aef. \u78c1\u76d8\u4ee5\u6247\u533a\u5927\u5c0f\u7684\u5757\u6765\u8bfb\u5199\u6570\u636e, \u5bf9\u6247\u533a\u7684 \u8bbf\u95ee\u65f6\u95f4 \u6709\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u7ec4\u6210: \u5bfb\u9053\u65f6\u95f4 : \u4e3a\u4e86\u8bfb\u53d6\u67d0\u4e2a\u76ee\u6807\u6247\u533a\u7684\u5185\u5bb9, \u4f20\u9001\u81c2\u9996\u5148\u5c06\u8bfb/\u5199\u5934\u5b9a\u4f4d\u5230\u5305\u542b\u76ee\u6807\u6247\u533a\u7684\u78c1\u9053\u4e0a. \u79fb\u52a8\u4f20\u9001\u81c2\u7684\u65f6\u95f4\u79f0\u4e3a\u5bfb\u9053\u65f6\u95f4. \u5bfb\u9053\u65f6\u95f4 \\(T_{seek}\\) \u4f9d\u8d56\u4e8e\u8bfb/\u5199\u5934\u4ee5\u524d\u7684\u4f4d\u7f6e\u548c\u4f20\u9001\u81c2\u5728\u76d8\u9762\u4e0a\u79fb\u52a8\u7684\u901f\u5ea6. \u65cb\u8f6c\u65f6\u95f4 : \u8bfb/\u5199\u5934\u5230\u671f\u671b\u7684\u78c1\u9053\u540e, \u9a71\u52a8\u5668\u7b49\u5f85\u76ee\u6807\u6247\u533a\u7684\u7b2c\u4e00\u4e2a\u4f4d\u65cb\u8f6c\u5230\u8bfb/\u5199\u5934\u4e0b. \u8fd9\u4e2a\u6b65\u9aa4\u7684\u6027\u80fd\u4f9d\u8d56\u4e8e\u8bfb/\u5199\u5934\u5230\u8fbe\u76ee\u6807\u6247\u533a\u76d8\u9762\u7684\u4f4d\u7f6e\u4ee5\u53ca\u78c1\u76d8\u7684\u65cb\u8f6c\u901f\u5ea6. \u6700\u5927\u65cb\u8f6c\u5ef6\u8fdf \\(T_{max_rotation}=\\frac{1}{RPM}\\times \\frac{60s}{1min}\\) (\u6574\u5468\u671f), \u5e73\u5747\u65cb\u8f6c\u65f6\u95f4\u662f\u6700\u5927\u5ef6\u8fdf\u7684\u4e00\u534a. \u4f20\u9001\u65f6\u95f4 : \u5f53\u8bfb/\u5199\u5934\u5904\u4e8e\u76ee\u6807\u6247\u533a\u7684\u7b2c\u4e00\u4f4d\u65f6, \u5c31\u53ef\u4ee5\u8fdb\u884c\u4f20\u9001\u4e86. \u4e00\u4e2a\u6247\u533a\u7684\u4f20\u9001\u65f6\u95f4\u4f9d\u8d56\u4e8e\u65cb\u8f6c\u901f\u5ea6\u548c\u6bcf\u6761\u78c1\u9053\u7684\u6247\u533a\u6570\u76ee. \\(T_{avg\\_transfer}=\\frac{1}{RPM}\\times \\frac{1}{\u5e73\u5747\u6247\u533a\u6570/\u78c1\u9053}\\times \\frac{60s}{1min}\\) \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0, \u5bfb\u9053\u65f6\u95f4\u548c\u65cb\u8f6c\u65f6\u95f4\u662f\u4e3b\u8981\u7684\u5f71\u54cd\u90e8\u5206, \u800c\u4e14\u4e24\u8005\u5927\u81f4\u76f8\u7b49, \u53ef\u4ee5\u636e\u6b64\u4f30\u8ba1\u4f7f\u7528\u65f6\u95f4.","title":"\u78c1\u76d8\u64cd\u4f5c"},{"location":"CSAPP/6/#_10","text":"\u4e3a\u4e86\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u9690\u85cf\u590d\u6742\u6027, \u73b0\u4ee3\u78c1\u76d8\u5c06\u5b83\u4eec\u7684\u6784\u9020\u5448\u73b0\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u89c6\u56fe, \u4e00\u5171 B \u4e2a\u6247\u533a\u5927\u5c0f\u7684 \u903b\u8f91\u5757 \u7684\u5e8f\u5217, \u7f16\u53f7\u4e3a \\(0,1,\\ldots,B-1\\) . \u78c1\u76d8\u5c01\u88c5\u4e2d\u6709\u4e00\u4e2a\u5c0f\u7684\u786c\u4ef6/\u56fa\u4ef6\u8bbe\u5907, \u79f0\u4e3a \u78c1\u76d8\u63a7\u5236\u5668 , \u7ef4\u62a4\u903b\u8f91\u5757\u53f7\u548c\u5b9e\u9645\u78c1\u76d8\u6247\u533a\u7684\u6620\u5c04\u5173\u7cfb. \u5f53\u64cd\u4f5c\u7cfb\u7edf\u60f3\u8981\u6267\u884c\u4e00\u4e2a I/O \u64cd\u4f5c\u65f6, \u5982\u4ece\u78c1\u76d8\u8bfb\u53d6\u6570\u636e\u5230\u4e3b\u5b58: \u64cd\u4f5c\u7cfb\u7edf\u53d1\u9001\u4e00\u4e2a\u547d\u4ee4\u9053\u78c1\u76d8\u63a7\u5236\u5668, \u8ba9\u5b83\u8bfb\u67d0\u4e2a\u903b\u8f91\u5757\u53f7. \u786c\u76d8\u63a7\u5236\u5668\u4e0a\u7684\u56fa\u4ef6\u6267\u884c\u5feb\u901f\u8868\u67e5\u627e, \u4f7f\u5f97\u8be5\u903b\u8f91\u5757\u53f7\u7ffb\u8bd1\u6210\u4e00\u4e2a\u4e09\u5143\u7ec4 (\u76d8\u9762, \u78c1\u9053, \u6247\u533a) \u7684\u4e09\u5143\u7ec4 \u78c1\u76d8\u63a7\u5236\u5668\u89e3\u91ca\u4e09\u5143\u7ec4\u4fe1\u606f, \u5c06\u8bfb/\u5199\u5934\u79fb\u52a8\u5230\u5bf9\u5e94\u7684\u6247\u533a \u5c06\u8bfb\u53d6\u5230\u7684\u4fe1\u606f\u653e\u5230\u78c1\u76d8\u63a7\u5236\u5668\u7684\u7f13\u51b2\u533a\u4e2d \u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u590d\u5236\u5230\u4e3b\u5b58\u4e2d \u78c1\u76d8\u683c\u5f0f\u5316 \u78c1\u76d8\u63a7\u5236\u5668\u5fc5\u987b\u5bf9\u78c1\u76d8\u8fdb\u884c\u683c\u5f0f\u5316, \u7136\u540e\u624d\u80fd\u5728\u8be5\u78c1\u76d8\u4e0a\u5b58\u50a8\u6570\u636e. \u683c\u5f0f\u5316\u5305\u62ec: \u7528\u6807\u8bc6\u6247\u533a\u7684\u4fe1\u606f\u586b\u5199\u6247\u533a\u4e4b\u95f4\u7684\u95f4\u9699 \u6807\u8bc6\u51fa\u8868\u9762\u6709\u6545\u969c\u7684\u67f1\u9762\u5e76\u4e14\u4e0d\u4f7f\u7528\u4ed6\u4eec \u5728\u6bcf\u4e2a\u533a\u4e2d\u9884\u7559\u51fa\u4e00\u7ec4\u67f1\u9762\u4f5c\u4e3a\u5907\u7528(\u56e0\u6b64\u683c\u5f0f\u5316\u5bb9\u91cf\u6bd4\u6700\u5927\u5bb9\u91cf\u8981\u5c0f)","title":"\u903b\u8f91\u78c1\u76d8\u5757"},{"location":"CSAPP/6/#io","text":"\u5982\u4e0a\u56fe, \u56fe\u5f62\u5361/\u76d1\u89c6\u5668/\u9f20\u6807/\u952e\u76d8/\u78c1\u76d8\u8fd9\u6837\u7684\u8f93\u5165/\u8f93\u51fa(I/O)\u8bbe\u5907, \u90fd\u662f\u901a\u8fc7 I/O \u603b\u7ebf\u8fde\u63a5\u5230 CPU \u548c\u4e3b\u5b58. \u901a\u7528\u4e32\u884c(Universal Serial Bus, USB)\u63a7\u5236\u5668 \u662f\u4e00\u4e2a\u8fde\u63a5\u5230 USB \u603b\u7ebf\u7684\u8bbe\u5907\u7684\u4e2d\u8f6c\u673a\u6784, USB \u603b\u7ebf\u662f\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u6807\u51c6, \u8fde\u63a5\u5404\u79cd\u5916\u56f4 I/O \u8bbe\u5907. \u56fe\u5f62\u5361(\u6216\u9002\u914d\u5668) \u5305\u542b\u786c\u4ef6\u548c\u8f6f\u4ef6\u903b\u8f91, \u5b83\u4eec\u8d1f\u8d23\u4ee3\u8868 CPU \u5728\u663e\u793a\u5668\u4e0a\u9762\u753b\u50cf\u7d20. \u4e3b\u673a\u603b\u7ebf\u9002\u914d\u5668 \u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u78c1\u76d8\u8fde\u63a5\u5230 I/O \u603b\u7ebf, \u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u7279\u522b\u7684\u4e3b\u673a\u603b\u7ebf\u63a5\u53e3\u5b9a\u4e49\u7684\u901a\u4fe1\u534f\u8bae. \u7f51\u7edc\u9002\u914d\u5668 : \u53ef\u4ee5\u901a\u8fc7\u5c06\u9002\u914d\u5668\u63d2\u5165\u4e3b\u677f\u4e0a\u7a7a\u7684\u6269\u5c55\u69fd\u4e2d, \u4ece\u800c\u8fde\u63a5\u5230 I/O \u603b\u7ebf.","title":"\u8fde\u63a5 I/O \u8bbe\u5907"},{"location":"CSAPP/6/#_11","text":"CPU \u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a \u5185\u5b58\u6620\u5c04I/O \u7684\u6280\u672f\u6765\u5411 I/O \u8bbe\u5907\u53d1\u5c04\u547d\u4ee4, \u5730\u5740\u7a7a\u95f4\u4e2d\u6709\u4e00\u5757\u5730\u5740\u662f\u4e3a\u4e0e I/O \u8bbe\u5907\u901a\u4fe1\u4fdd\u7559\u7684. \u6bcf\u4e2a\u8fd9\u6837\u7684\u5730\u5740\u79f0\u4e3a\u4e00\u4e2a I/O \u7aef\u53e3 . \u8bbe\u5907\u53ef\u4ee5\u81ea\u5df1\u6267\u884c\u8bfb\u6216\u8005\u5199\u603b\u7ebf\u4e8b\u52a1\u800c\u4e0d\u9700\u8981 CPU \u5e72\u6d89\u7684\u8fc7\u7a0b, \u79f0\u4e3a \u76f4\u63a5\u5185\u5b58\u8bbf\u95ee(Direct Memory Access, DMA) , \u8fd9\u79cd\u6570\u636e\u4f20\u9001\u79f0\u4e3a DMA \u4f20\u9001 . \u78c1\u76d8\u8bfb\u53d6 \u5047\u8bbe\u78c1\u76d8\u63a7\u5236\u5668\u6620\u5c04\u5230\u7aef\u53e3 0xa0 . CPU\u4f1a\u901a\u8fc7\u5bf9\u5730\u5740 0xa0 \u6267\u884c\u4e09\u4e2a\u5b58\u50a8\u6307\u4ee4\uff0c\u5c06\u5730\u5740 0xa0 \u7684\u5185\u5bb9\u4fdd\u5b58\u5230\u5185\u5b58\u4e2d\uff0c\u5b8c\u6210\u5bf9\u78c1\u76d8\u7684\u8bfb\u53d6\u3002\u53d1\u9001\u5b8c\u6307\u4ee4\u540e\uff0c\u7531\u4e8e\u78c1\u76d8\u8bfb\u53d6\u901f\u5ea6\u6bd4 CPU \u6267\u884c\u901f\u5ea6\u6162\u5f88\u591a\uff0c\u6240\u4ee5 CPU \u4f1a\u5148\u53bb\u6267\u884c\u5176\u4ed6\u5de5\u4f5c. \u6307\u4ee41\uff1a\u53d1\u9001\u4e00\u4e2a\u547d\u4ee4\u5b57\uff0c\u544a\u8bc9\u78c1\u76d8\u53d1\u8d77\u4e00\u4e2a Read \u6307\u4ee42\uff1a\u6307\u660e\u5e94\u8be5\u8bfb\u53d6\u7684\u903b\u8f91\u5757\u53f7 \u6307\u4ee43\uff1a\u6307\u660e\u4fdd\u5b58\u7684\u5185\u5b58\u5730\u5740 \u78c1\u76d8\u63a7\u5236\u5668\u63a5\u6536\u5230Read\u547d\u4ee4\u540e\uff0c\u4f1a\u901a\u8fc7\u4e0a\u8ff0\u65b9\u6cd5\u76f4\u63a5\u5c06\u78c1\u76d8\u5185\u5bb9\u4f20\u9001\u5230\u4e3b\u5b58\u4e2d.(DMA \u4f20\u9001) \u78c1\u76d8\u53d1\u9001\u5b8c\u6570\u636e\u540e\uff0c\u4f1a\u7ed9 CPU \u53d1\u9001\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\uff0c\u6682\u505c CPU \u6b63\u5728\u505a\u7684\u5de5\u4f5c\uff0c\u7136\u540e\u5c06\u63a7\u5236\u8fd4\u56de\u5230 CPU \u88ab\u4e2d\u65ad\u7684\u5730\u65b9.","title":"\u8bbf\u95ee\u78c1\u76d8"},{"location":"CSAPP/6/#_12","text":"\u56fa\u6001\u786c\u76d8(Solid State Disk, SSD) \u662f\u4e00\u79cd\u57fa\u4e8e\u95ea\u5b58\u7684\u5b58\u50a8\u6280\u672f. SSD \u5c01\u88c5\u63d2\u5728 I/O \u603b\u7ebf\u4e0a\u6807\u51c6\u786c\u76d8\u63d2\u69fd, \u884c\u4e3a\u5c31\u548c\u5176\u4ed6\u786c\u76d8\u4e00\u6837. \u4e0a\u56fe\u662f\u5178\u578b SSD \u7684\u6027\u80fd\u7279\u5f81. \u5b83\u7531 \u95ea\u5b58 \u548c \u95ea\u5b58\u7ffb\u8bd1\u5c42 \u7ec4\u6210. \u95ea\u5b58\u7ffb\u8bd1\u5c42 : \u662f\u4e00\u4e2a\u786c\u4ef6/\u56fa\u4ef6\u8bbe\u5907, \u626e\u6f14\u4e0e\u78c1\u76d8\u63a7\u5236\u5668\u76f8\u540c\u7684\u89d2\u8272, \u5c06\u5bf9\u903b\u8f91\u5757\u7684\u8bf7\u6c42\u7ffb\u8bd1\u6210\u5bf9\u5e95\u5c42\u7269\u7406\u8bbe\u5907\u7684\u8bbf\u95ee. \u95ea\u5b58 : \u95ea\u5b58\u7684\u57fa\u672c\u5c5e\u6027\u51b3\u5b9a\u4e86 SSD \u968f\u673a\u8bfb\u5199\u7684\u6027\u80fd, \u901a\u5e38\u7531 B \u4e2a\u5757\u7684\u5e8f\u5217\u7ec4\u6210, \u6bcf\u4e2a\u5757\u7531 P \u9875\u7ec4\u6210, \u9875 \u4f5c\u4e3a\u6570\u636e\u7684\u5355\u4f4d\u8fdb\u884c\u8bfb\u5199. \u901a\u5e38\u9875\u5927\u5c0f\u4e3a 512 \u5b57\u8282-4KB\uff0c\u5757\u4e2d\u5305\u542b 32-128 \u9875, \u5219\u5757\u7684\u5927\u5c0f\u6709 16KB-512KB. \u53ea\u6709\u5728\u4e00\u9875\u6240\u5c5e\u7684\u5757\u6574\u4e2a\u88ab\u64e6\u9664\u4e4b\u540e, \u624d\u80fd\u5199\u8fd9\u4e00\u9875. \u56e0\u6b64\u8bfb SSD \u6bd4\u5199\u8981\u5feb. \u968f\u673a\u5199\u5f88\u6162, \u56e0\u4e3a\u64e6\u9664\u5757\u9700\u8981\u76f8\u5bf9\u8f83\u957f\u7684\u65f6\u95f4, \u800c\u4e14\u5982\u679c\u5199\u64cd\u4f5c\u8bd5\u56fe\u4fee\u6539\u4e00\u4e2a\u5305\u542b\u5df2\u7ecf\u6709\u6570\u636e\u7684\u9875 p, \u90a3\u4e48\u8fd9\u4e2a\u5757\u79cd\u6240\u6709\u5e26\u6709\u7528\u6570\u636e\u7684\u9875\u5fc5\u987b\u88ab\u590d\u5236\u5230\u4e00\u4e2a\u65b0(\u64e6\u9664\u8fc7\u7684)\u5757. \u95ea\u5b58\u5757\u4f1a\u78e8\u635f, \u6240\u4ee5 SSD \u4e5f\u5bb9\u6613\u78e8\u635f. \u95ea\u5b58\u7ffb\u8bd1\u5c42\u4e2d\u7684 \u5e73\u5747\u78e8\u635f\u903b\u8f91 \u8bd5\u56fe\u901a\u8fc7\u5c06\u64e6\u9664\u5e73\u5747\u5206\u5e03\u5728\u6240\u6709\u7684\u5757\u4e0a\u6765\u6700\u5927\u5316\u6bcf\u4e2a\u5757\u7684\u5bff\u547d. SSD\u7684\u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9 : \u7531\u4e8e\u95ea\u5b58\u662f\u534a\u5bfc\u4f53\u5b58\u50a8\u5668\uff0c\u6ca1\u6709\u79fb\u52a8\u7684\u90e8\u4ef6\uff0c\u6240\u4ee5\u901f\u5ea6\u6bd4\u78c1\u76d8\u66f4\u5feb\u4e14\u78e8\u635f\u5c0f\uff0c\u80fd\u8017\u4f4e. \u7f3a\u70b9 : SSD\u6bcf\u5b57\u8282\u6bd4\u78c1\u76d8\u8d35\u5927\u7ea630\u500d\uff0c\u6240\u4ee5\u5e38\u7528\u7684\u5b58\u50a8\u5bb9\u91cf\u6bd4\u78c1\u76d8\u5c0f100\u500d\u5de6\u53f3.","title":"\u56fa\u6001\u786c\u76d8"},{"location":"CSAPP/6/#_13","text":"\u4e0d\u540c\u7684\u5b58\u50a8\u6280\u672f\u6709\u4e0d\u540c\u7684\u4ef7\u683c\u548c\u6027\u80fd\u6298\u4e2d . SRAM \u6bd4 DRAM \u5feb\u4e00\u70b9, \u800c DRAM \u6bd4 \u78c1\u76d8\u5757\u5f88\u591a. \u53e6\u4e00\u65b9\u9762, \u5feb\u901f\u5b58\u50a8\u603b\u662f\u6bd4\u6162\u901f\u5b58\u50a8\u8981\u8d35\u7684. \u4e0d\u540c\u5b58\u50a8\u6280\u672f\u7684\u4ef7\u683c\u548c\u6027\u80fd\u5c5e\u6027\u4ee5\u622a\u7136\u4e0d\u540c\u7684\u5c5e\u6027\u53d8\u5316\u7740 DRAM \u548c\u78c1\u76d8\u7684\u6027\u80fd\u6ede\u540e\u4e8e CPU \u7684\u6027\u80fd. \u800cSRAM\u7684\u6027\u80fd\u867d\u7136\u4e5f\u6ede\u540e\u4e8eCPU\u6027\u80fd, \u4f46\u662f\u8fd8\u4fdd\u6301\u589e\u957f, \u6240\u4ee5\u73b0\u4ee3\u8ba1\u7b97\u673a\u4f1a\u4f7f\u7528\u57fa\u4e8eSRAM\u7684\u9ad8\u901f\u7f13\u5b58, \u6765\u5f25\u8865CPU\u548c\u5185\u5b58\u4e4b\u95f4\u7684\u5dee\u8ddd.","title":"\u5b58\u50a8\u6280\u672f\u8d8b\u52bf"},{"location":"CSAPP/6/#_14","text":"\u5177\u6709\u826f\u597d \u5c40\u90e8\u6027(locality) \u7684\u7a0b\u5e8f, \u5373\u5b83\u4eec\u503e\u5411\u4e8e\u5f15\u7528\u6700\u8fd1\u5f15\u7528\u8fc7\u7684\u6570\u636e\u9879\u5468\u56f4\u7684\u6570\u636e\u9879, \u6216\u8005\u6700\u8fd1\u5f15\u7528\u8fc7\u7684\u6570\u636e\u9879, \u8fd9\u88ab\u79f0\u4e3a \u5c40\u90e8\u6027\u539f\u7406 . \u5c40\u90e8\u6027\u6709\u4e24\u79cd\u5f62\u5f0f: \u65f6\u95f4\u5c40\u90e8\u6027(temporal locality) : \u88ab\u5f15\u7528\u8fc7\u4e00\u6b21\u7684\u5185\u5b58\u4f4d\u7f6e\u5f88\u53ef\u80fd\u5728\u4e0d\u8fdc\u7684\u5c06\u6765\u518d\u88ab\u591a\u6b21\u5f15\u7528. \u7a7a\u95f4\u5c40\u90e8\u6027(space locality) : \u5982\u679c\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u88ab\u5f15\u7528\u4e86\u4e00\u6b21, \u90a3\u4e48\u7a0b\u5e8f\u5f88\u53ef\u80fd\u5728\u4e0d\u8fdc\u7684\u5c06\u6765\u5f15\u7528\u9644\u8fd1\u7684\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e. \u4e00\u822c\u800c\u8a00, \u6709\u826f\u597d\u5c40\u90e8\u6027\u7684\u7a0b\u5e8f\u6bd4\u5c40\u90e8\u6027\u5dee\u7684\u7a0b\u5e8f\u8fd0\u884c\u5f97\u66f4\u5feb . \u5c40\u90e8\u6027\u7684\u5e94\u7528 \u4ece\u786c\u4ef6\u5230\u64cd\u4f5c\u7cfb\u7edf\uff0c\u518d\u5230\u5e94\u7528\u7a0b\u5e8f\uff0c\u90fd\u5229\u7528\u4e86\u5c40\u90e8\u6027. \u786c\u4ef6 : \u5728\u5904\u7406\u5668\u548c\u4e3b\u5b58\u4e4b\u95f4\u5f15\u5165\u4e00\u4e2a\u5c0f\u800c\u5feb\u901f\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668, \u6765\u4fdd\u5b58\u6700\u8fd1\u5f15\u7528\u7684\u6307\u4ee4\u548c\u6570\u636e, \u4ece\u800c\u63d0\u9ad8\u5bf9\u4e3b\u5b58\u7684\u8bbf\u95ee\u901f\u5ea6. \u64cd\u4f5c\u7cfb\u7edf : \u7528\u4e3b\u5b58\u6765\u7f13\u5b58\u865a\u62df\u7a7a\u95f4\u4e2d\u6700\u8fd1\u88ab\u5f15\u7528\u7684\u6570\u636e\u5757. \u5e94\u7528\u7a0b\u5e8f : \u6bd4\u5982Web\u6d4f\u89c8\u5668\u4f1a\u5c06\u6700\u8fd1\u5f15\u7528\u7684\u6587\u6863\u653e\u5165\u672c\u5730\u78c1\u76d8\u4e2d, \u6765\u7f13\u5b58\u670d\u52a1\u5668\u7684\u6570\u636e. Example \u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u53d8\u91cf sum \u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u4e2d\u90fd\u4f1a\u88ab\u5f15\u7528\u4e00\u6b21, \u56e0\u6b64\u6709\u8f83\u597d\u7684\u65f6\u95f4\u5c40\u9650\u6027. \u56e0\u4e3a sum \u662f\u6807\u91cf\u6240\u4ee5\u4ed6\u6ca1\u6709\u7a7a\u95f4\u5c40\u9650\u6027. \u5bf9\u4e8e\u53d8\u91cf v \u6765\u8bf4\u6709\u826f\u597d\u7684\u7a7a\u95f4\u5c40\u9650\u6027, \u4f46\u65f6\u95f4\u5c40\u9650\u6027\u5f88\u5dee, \u56e0\u4e3a\u6bcf\u4e2a\u5411\u91cf\u5143\u7d20\u53ea\u80fd\u88ab\u8bbf\u95ee\u4e00\u6b21. \u7efc\u4e0a, \u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u51fd\u6570\u6709\u826f\u597d\u7684\u5c40\u9650\u6027. \u5bf9\u4e8e\u4e00\u4e2a\u5411\u91cf, \u5982\u679c\u6bcf\u4e00\u8f6e\u5f15\u7528\u7684\u6570\u636e\u9879\u4e4b\u95f4\u5728\u5185\u5b58\u7a7a\u95f4\u4e2d\u76f8\u9694 k, \u5219\u79f0\u8be5\u7a0b\u5e8f\u5177\u6709 \u6b65\u957f\u4e3a k \u7684\u5f15\u7528\u6a21\u5f0f(Stride-k Reference Pattern) . \u6b65\u957f k \u8d8a\u5927, \u5219\u6bcf\u4e00\u8f6e\u5f15\u7528\u7684\u6570\u636e\u5728\u5185\u5b58\u4e2d\u95f4\u9694\u5f88\u5927, \u5219\u7a7a\u95f4\u5c40\u90e8\u6027\u8d8a\u5dee. Example \u7b2c\u4e00\u4e2a\u7c7b\u4f3c\u4e0a\u6587\u7684\u4f8b\u5b50. \u7b2c\u4e8c\u4e2a\u4e2d\u53d8\u91cf v \u5177\u6709\u6b65\u957f\u4e3a N \u7684\u5f15\u7528\u6a21\u5f0f, \u7a7a\u95f4\u5c40\u90e8\u6027\u8f83\u5dee. \u53d6\u6307\u4ee4\u65b9\u9762, \u56e0\u4e3a\u7a0b\u5e8f\u6307\u4ee4\u662f\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684, CPU \u5fc5\u987b\u53d6\u51fa\u8fd9\u4e9b\u6307\u4ee4, \u6240\u4ee5\u6211\u4eec\u4e5f\u80fd\u8003\u8651\u53d6\u6307\u7684\u5c40\u9650\u6027. for \u5faa\u73af\u4f53\u4e2d\u7684\u6307\u4ee4\u662f\u6309\u8fde\u7eed\u7684\u5185\u5b58\u987a\u5e8f\u6267\u884c\u7684, \u56e0\u6b64\u5faa\u73af\u5177\u6709\u826f\u597d\u7684\u7a7a\u95f4\u5c40\u9650\u6027. \u56e0\u4e3a\u5faa\u73af\u4f53\u4f1a\u6267\u884c\u591a\u6b21, \u56e0\u6b64\u4ed6\u4e5f\u5177\u6709\u826f\u597d\u7684\u65f6\u95f4\u5c40\u9650\u6027. \u603b\u7684\u6765\u8bf4: \u91cd\u590d\u5f15\u7528\u76f8\u540c\u53d8\u91cf\u7684\u7a0b\u5e8f\u6709\u826f\u597d\u7684\u65f6\u95f4\u5c40\u90e8\u6027. \u5bf9\u4e8e\u5177\u6709\u6b65\u957f\u4e3a k \u7684\u5f15\u7528\u6a21\u5f0f\u7684\u7a0b\u5e8f, \u6b65\u957f\u8d8a\u5c0f, \u7a7a\u95f4\u5c40\u90e8\u6027\u8d8a\u597d. \u5bf9\u4e8e\u53d6\u6307\u4ee4\u6765\u8bf4, \u5faa\u73af\u6709\u597d\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5c40\u90e8\u6027. \u5faa\u73af\u4f53\u8d8a\u5c0f, \u5faa\u73af\u8fed\u4ee3\u6b21\u6570\u8d8a\u591a, \u5c40\u90e8\u6027\u8d8a\u597d.","title":"\u5c40\u90e8\u6027"},{"location":"CSAPP/6/#_15","text":"\u901a\u8fc7\u4e0a\u9762\u4e24\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5b58\u50a8\u6280\u672f\u548c\u8f6f\u4ef6\u7684\u57fa\u672c\u5c5e\u6027\uff1a \u4e0d\u540c\u5b58\u50a8\u6280\u672f\u7684\u8bbf\u95ee\u65f6\u95f4\u76f8\u5dee\u8f83\u5927, \u901f\u5ea6\u5feb\u7684\u6280\u672f\u6bcf\u5b57\u8282\u7684\u6210\u672c\u6bd4\u901f\u5ea6\u6162\u7684\u6280\u672f\u9ad8, \u4e14\u5bb9\u91cf\u5c0f. \u5e76\u4e14CPU\u548c\u4e3b\u5b58\u4e4b\u95f4\u7684\u5dee\u8ddd\u5728\u53d8\u5927. \u7f16\u5199\u826f\u597d\u7684\u7a0b\u5e8f\u5177\u6709\u826f\u597d\u7684\u5c40\u90e8\u6027. \u6211\u4eec\u5f97\u5230\u4e00\u79cd\u7ec4\u7ec7\u5b58\u50a8\u5668\u7cfb\u7edf\u7684\u65b9\u6cd5, \u79f0\u4e3a \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784(memory hierarchy) . \u4e00\u822c\u800c\u8a00, \u4ece\u9ad8\u5c42\u5f80\u4f4e\u5c42\u8d70, \u5b58\u50a8\u8bbe\u5907\u53d8\u5f97\u66f4\u6162, \u66f4\u4fbf\u5b9c\u548c\u66f4\u5927.","title":"\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784"},{"location":"CSAPP/6/#_16","text":"\u9ad8\u901f\u7f13\u5b58(cache) \u662f\u4e00\u4e2a\u5c0f\u800c\u5feb\u901f\u7684\u5b58\u50a8\u8bbe\u5907, \u5b83\u4f5c\u4e3a\u5b58\u50a8\u5728\u66f4\u5927, \u4e5f\u66f4\u6162\u7684\u8bbe\u5907\u4e2d\u7684\u6570\u636e\u5bf9\u8c61\u7684\u7f13\u51b2\u533a\u57df. \u4f7f\u7528\u9ad8\u901f\u7f13\u5b58\u7684\u8fc7\u7a0b\u79f0\u4e3a \u7f13\u5b58(caching) . \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u7684\u4e2d\u5fc3\u601d\u60f3\u662f: \u5bf9\u4e8e\u6bcf\u4e2a k, \u4f4d\u4e8e k \u5c42\u7684\u66f4\u5feb\u66f4\u5c0f\u7684\u5b58\u50a8\u8bbe\u5907\u4f5c\u4e3a\u4f4d\u4e8e k+1 \u5c42\u7684\u66f4\u5927\u66f4\u6162\u7684\u5b58\u50a8\u8bbe\u5907\u7684\u7f13\u5b58 . \u8be5\u7ed3\u6784\u4e3a\u4ec0\u4e48\u6709\u6548 \u56e0\u4e3a\u7a0b\u5e8f\u7684\u5c40\u90e8\u6027\u539f\u7406. \u76f8\u6bd4\u4e8e\u7b2ck+1\u5c42\u7684\u6570\u636e\uff0c\u7a0b\u5e8f\u4f1a\u503e\u5411\u4e8e\u8bbf\u95ee\u5b58\u50a8\u5728\u7b2ck\u5c42\u7684\u6570\u636e\u3002\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u7b2ck+1\u5c42\u5b58\u50a8\u7684\u6570\u636e\uff0c\u6211\u4eec\u4f1a\u5c06\u5176\u62f7\u8d1d\u5230\u7b2ck\u5c42\uff0c\u56e0\u4e3a\u6839\u636e\u5c40\u90e8\u6027\u539f\u7406\u6211\u4eec\u5f88\u6709\u53ef\u80fd\u5c06\u518d\u6b21\u8bbf\u95ee\u8be5\u6570\u636e\uff0c\u7531\u6b64\u6211\u4eec\u5c31\u80fd\u4ee5\u7b2ck\u5c42\u7684\u8bbf\u95ee\u901f\u5ea6\u6765\u8bbf\u95ee\u6570\u636e\u3002\u800c\u4e14\u56e0\u4e3a\u6211\u4eec\u4e0d\u7ecf\u5e38\u8bbf\u95ee\u7b2ck+1\u5c42\u7684\u6570\u636e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u901f\u5ea6\u66f4\u6162\u4e14\u66f4\u4fbf\u5b9c\u7684\u5b58\u50a8\u8bbe\u5907. \u7b2c k+1 \u5c42\u7684\u5b58\u50a8\u5668\u88ab\u5212\u5206\u4e3a\u8fde\u7eed\u7684\u6570\u636e\u5bf9\u8c61\u7ec4\u5757(chunk), \u79f0\u4e3a \u5757(block) . \u6bcf\u4e2a\u5757\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5730\u5740\u6216\u540d\u5b57. \u5757\u53ef\u4ee5\u662f\u56fa\u5b9a\u5927\u5c0f, \u4e5f\u53ef\u4ee5\u662f\u53ef\u53d8\u5927\u5c0f. \u6570\u636e\u603b\u662f\u4ee5\u5757\u5927\u5c0f\u4e3a \u4f20\u9001\u5355\u5143 \u5728\u7b2c k \u5c42\u548c k+1 \u5c42\u4e4b\u95f4\u6765\u56de\u590d\u5236. \u5c42\u6b21\u7ed3\u6784\u4e2d\u8f83\u4f4e\u5c42(\u79bb CPU \u8f83\u8fdc)\u7684\u8bbe\u5907\u7684\u8bbf\u95ee\u65f6\u95f4\u8f83\u957f, \u4e3a\u4e86\u8865\u507f\u8f83\u957f\u7684\u8bbf\u95ee\u65f6\u95f4, \u503e\u5411\u4e8e\u4f7f\u7528\u8f83\u5927\u7684\u5757.","title":"\u7f13\u5b58"},{"location":"CSAPP/6/#_17","text":"\u5f53\u7a0b\u5e8f\u9700\u8981 k+1 \u5c42\u7684\u67d0\u4e2a\u6570\u636e\u5bf9\u8c61 d \u65f6, \u5b83\u9996\u5148\u5728\u5f53\u524d\u5b58\u50a8\u5728 k \u5c42\u7684\u4e00\u4e2a\u5757\u4e2d\u67e5\u627e d. \u5982\u679c d \u521a\u597d\u7f13\u5b58\u5728\u7b2c k \u5c42, \u90a3\u4e48\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684 \u7f13\u5b58\u547d\u4e2d(cache hit) .","title":"\u7f13\u5b58\u547d\u4e2d"},{"location":"CSAPP/6/#_18","text":"\u82e5\u7b2c k \u5c42\u4e2d\u6ca1\u6709 d, \u5c31\u662f \u7f13\u5b58\u4e0d\u547d\u4e2d(cache miss) . \u6b64\u65f6\u7b2c k \u5c42\u7684\u7f13\u5b58\u4ece k+1 \u5c42\u7684\u7f13\u5b58\u4e2d\u53d6\u51fa\u5305\u542b d \u7684\u90a3\u4e2a\u5757. \u5982\u679c\u7b2c k \u5c42\u7684\u7f13\u5b58\u5df2\u7ecf\u6ee1\u4e86, \u5c31\u4f1a\u8986\u76d6\u73b0\u5b58\u7684\u4e00\u4e2a\u5757. \u8986\u76d6\u73b0\u5b58\u5757\u7684\u8fc7\u7a0b\u79f0\u4e3a \u66ff\u6362 \u6216 \u9a71\u9010 \u8fd9\u4e2a\u5757. \u88ab\u9a71\u9010\u7684\u5757\u4e5f\u79f0\u4e3a \u727a\u7272\u5feb(victim block) . \u51b3\u5b9a\u66ff\u6362\u54ea\u4e2a\u5757\u662f\u7531\u7f13\u5b58\u7684 \u66ff\u6362\u7b56\u7565 \u63a7\u5236\u7684. \u4e00\u4e2a\u7a7a\u7684\u7f13\u5b58\u79f0\u4e3a \u51b7\u7f13\u5b58(cold cache) , \u6b64\u65f6\u7684\u4e0d\u547d\u4e2d\u79f0\u4e3a \u5f3a\u5236\u6027\u4e0d\u547d\u4e2d \u6216\u8005 \u51b7\u4e0d\u547d\u4e2d . \u53ea\u8981\u53d1\u751f\u4e86\u4e0d\u547d\u4e2d, \u7f13\u5b58\u5c31\u8981\u6267\u884c\u67d0\u4e2a \u653e\u7f6e\u7b56\u7565 . \u4f46\u8fd9\u79cd\u9650\u5236\u6027\u7684\u653e\u7f6e\u7b56\u7565\u4f1a\u5f15\u8d77\u4e00\u4e2d\u4e0d\u547d\u4e2d, \u5373 \u51b2\u7a81\u4e0d\u547d\u4e2d . e.g. \u6211\u4eec\u5c06 k+1 \u5c42\u7684\u5757 i \u653e\u5728 k \u5c42\u7684 \\(i mod 4\\) \u7684\u5757\u4e2d. \u6b64\u65f6\u6211\u4eec\u5982\u679c\u8fde\u7eed\u8bf7\u6c42\u5757 0 \u548c\u5757 8, \u4e24\u6b21\u5f15\u7528\u90fd\u4f1a\u4e0d\u547d\u4e2d. \u5757\u7684\u96c6\u5408\u79f0\u4e3a\u8fd9\u4e2a\u9636\u6bb5\u7684 \u5de5\u4f5c\u96c6 . \u5f53\u5de5\u4f5c\u96c6\u5927\u5c0f\u8d85\u8fc7\u7f13\u5b58\u7684\u5927\u5c0f\u65f6, \u7f13\u5b58\u4f1a\u7ecf\u5386 \u5bb9\u91cf\u4e0d\u547d\u4e2d . \u901a\u8fc7\u4ee5\u4e0a\u5185\u5bb9\uff0c\u5c31\u80fd\u89e3\u91ca\u5c40\u90e8\u6027\u597d\u7684\u7a0b\u5e8f\u7684\u4f18\u52bf: \u65f6\u95f4\u5c40\u90e8\u6027 : \u5f53\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\u5728\u7b2c\u4e00\u6b21\u4e0d\u547d\u4e2d\u88ab\u590d\u5236\u5230\u7f13\u5b58\u4e2d\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u7684\u65f6\u95f4\u5c40\u90e8\u6027\u597d\uff0c\u5219\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5c31\u80fd\u53cd\u590d\u5728\u7b2ck\u5c42\u8bbf\u95ee\u5230\u8be5\u5757\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u8fd0\u884c\u66f4\u5feb. \u7a7a\u95f4\u5c40\u90e8\u6027 : \u7531\u4e8e\u7f13\u5b58\u4e2d\u4e00\u4e2a\u5757\u5305\u542b\u591a\u4e2a\u6570\u636e\u5bf9\u8c61\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u7684\u7a7a\u95f4\u5c40\u90e8\u6027\u597d\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u7b2ck\u5c42\u7684\u6570\u636e\u5757\uff0c\u907f\u514d\u518d\u4ece\u7b2ck+1\u5c42\u4f20\u8f93\u5757\u5230\u7b2ck\u5c42.","title":"\u7f13\u5b58\u4e0d\u547d\u4e2d"},{"location":"CSAPP/6/#_19","text":"","title":"\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668"},{"location":"CSAPP/6/#_20","text":"\u8003\u8651\u4e00\u4e2a\u7cfb\u7edf, \u6bcf\u4e2a\u5b58\u50a8\u5668\u5730\u5740\u6709 m \u4f4d, \u5f62\u6210 \\(M=2^m\\) \u4e2a\u4e0d\u540c\u7684\u5730\u5740. \u9ad8\u901f\u7f13\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a \\(S=2^s\\) \u4e2a \u9ad8\u901f\u7f13\u5b58\u7ec4 \u7684\u6570\u7ec4. \u6bcf\u4e2a\u7ec4\u6709 E \u4e2a\u9ad8\u901f\u7f13\u5b58\u884c, \u6bcf\u4e2a\u884c\u662f\u7531\u4e00\u4e2a \\(B=2^b\\) \u7684\u6570\u636e\u5757, \u4e00\u4e2a \u6709\u6548\u4f4d , \u548c \\(t=m-(b+s)\\) \u4e2a \u6807\u8bb0\u4f4d \u7ec4\u6210. \u9ad8\u901f\u7f13\u5b58\u7684\u7ed3\u6784\u53ef\u4ee5\u901a\u8fc7\u5143\u7ec4 \\((S, E, B, m)\\) \u9ad8\u901f\u7f13\u5b58\u7684\u5927\u5c0f \\(C=S\\times E\\times B\\) . \u5982\u4e0a\u56fe, m \u4f4d\u7684\u5730\u5740\u88ab\u5206\u4e3a\u4e09\u90e8\u5206: s \u4f4d : \u7ec4\u7d22\u5f15. t \u4f4d : \u6bcf\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u6709\u4e00\u4e2a t \u4f4d\u7684\u6807\u8bb0\u4f4d, \u552f\u4e00\u6807\u8bc6\u6570\u636e\u5757. \u5f53\u6211\u4eec\u901a\u8fc7\u7ec4\u7d22\u5f15\u5b9a\u4f4d\u5230\u7ec4\u65f6, \u6807\u8bb0\u4f4d\u544a\u8bc9\u6211\u4eec\u9700\u8981\u7ec4\u4e2d\u7684\u54ea\u4e00\u884c. \u53ea\u6709\u5f53\u5730\u5740\u7684\u6807\u8bb0\u548c\u884c\u7684\u6807\u8bb0\u4f4d\u76f8\u540c, \u800c\u4e14\u8bbe\u7f6e\u4e86\u884c\u7684\u6709\u6548\u4f4d, \u624d\u80fd\u7f13\u51b2\u547d\u4e2d. b \u4f4d : \u5728 B \u4e2a\u5b57\u8282\u4e2d\u7684\u5b57\u504f\u79fb.","title":"\u901a\u7528\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668\u7ec4\u7ec7\u67b6\u6784"},{"location":"CSAPP/6/#_21","text":"\u5f53 \\(E=1\\) \u65f6, \u9ad8\u901f\u7f13\u5b58\u88ab\u79f0\u4e3a \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58(direct-mapped cache) . \u4ece\u5757\u4e2d\u62bd\u53d6\u51fa\u5b57\u7684\u6d41\u7a0b: \u7ec4\u9009\u62e9 : \u4ece w \u7684\u5730\u5740\u4e2d\u95f4\u62bd\u51fa s \u4e2a\u7d22\u5f15\u4f4d, \u8fd9\u4e9b\u4f4d\u88ab\u89e3\u91ca\u4f4d\u4e3a\u4e00\u4e2a\u5bf9\u5e94\u7ec4\u53f7\u7684\u65e0\u7b26\u53f7\u6574\u6570. \u884c\u5339\u914d : \u56e0\u4e3a\u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c, \u5f53\u4e14\u4ec5\u5f53\u8bbe\u7f6e\u4e86\u6709\u6548\u4f4d, \u800c\u4e14\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u7684\u6807\u8bb0\u4e0e w \u5730\u5740\u4e2d\u7684\u6807\u8bb0\u76f8\u5339\u914d\u65f6, \u8fd9\u4e00\u884c\u624d\u5305\u542b w \u7684\u4e00\u4e2a\u526f\u672c. \u5b57\u9009\u62e9 : \u628a\u5757\u770b\u6210\u4e00\u4e2a\u5b57\u7684\u6570\u7ec4, \u5b57\u8282\u504f\u79fb\u5c31\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u4e00\u4e2a\u7d22\u5f15. \u4e0d\u547d\u4e2d\u65f6\u7684\u884c\u66ff\u6362 : \u5982\u679c\u7f13\u5b58\u4e0d\u547d\u4e2d, \u5b83\u5c31\u4ece\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e0b\u4e00\u5c42\u53d6\u51fa\u88ab\u8bf7\u6c42\u7684\u5757, \u7136\u540e\u5c06\u65b0\u7684\u5757\u5b58\u50a8\u5728\u7ec4\u7d22\u5f15\u4f4d\u6307\u793a\u7684\u7ec4\u4e2d\u7684\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d. \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u51b2\u7a81\u4e0d\u547d\u4e2d \u5f53\u7a0b\u5e8f\u8bbf\u95ee\u5927\u5c0f\u4e3a 2 \u7684\u5e42\u6b21\u7684\u6570\u7ec4\u65f6, \u901a\u5e38\u4f1a\u53d1\u751f\u51b2\u7a81\u4e0d\u547d\u4e2d. float dotprod ( float x [ 8 ], float y [ 8 ]) { float sum = 0.0 ; int i ; for ( i = 0 ; i < 8 ; i ++ ) sum += x [ i ] * y [ i ]; return sum ; } \u5047\u8bbe\u6d6e\u70b9\u6570\u662f 4 \u4e2a\u5b57\u8282, x \u88ab\u52a0\u8f7d\u5230 0 \u5f00\u59cb\u7684 32 \u5b57\u8282\u8fde\u7eed\u5185\u5b58\u4e2d, y \u4ece\u5730\u5740 32 \u5f00\u59cb. \u5047\u8bbe\u4e00\u4e2a\u5757\u662f 16 \u4e2a\u5b57\u8282, \u7531\u4e24\u4e2a\u7ec4\u7ec4\u6210. \u90a3\u4e48 x[i] \u548c y[i] \u4f1a\u88ab\u6620\u5c04\u5230\u76f8\u540c\u7684\u5185\u5b58\u7ec4: \u8fd9\u6837\u6211\u4eec\u4f1a\u5728 x \u548c y \u7684\u5757\u4e4b\u95f4 \u6296\u52a8(thrash) , \u5373\u9ad8\u901f\u7f13\u5b58\u53cd\u590d\u5730\u52a0\u8f7d\u548c\u9a71\u9010\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u5757\u7684\u7ec4. \u53ef\u4ee5\u53d1\u73b0: \u5373\u4f7f\u7a0b\u5e8f\u7684\u5c40\u90e8\u6027\u826f\u597d, \u4e14\u5de5\u4f5c\u96c6\u7684\u5927\u5c0f\u6ca1\u6709\u8d85\u8fc7\u9ad8\u901f\u7f13\u5b58\u5bb9\u91cf, \u4f46\u662f\u7531\u4e8e\u8fd9\u4e9b\u6570\u636e\u5757\u90fd\u88ab\u6620\u5c04\u5230\u4e86\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d, \u4e14\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u6bcf\u4e2a\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c, \u6240\u4ee5\u4f1a\u51fa\u73b0\u6296\u52a8, \u4e0d\u65ad\u51fa\u73b0\u7f13\u5b58\u4e0d\u547d\u4e2d. \u6211\u4eec\u53ef\u4ee5\u4fee\u6b63\u6296\u52a8\u95ee\u9898: \u5728\u6bcf\u4e2a\u6570\u7ec4\u7684\u7ed3\u5c3e\u653e B \u5b57\u8282\u7684\u586b\u5145. \u4e3a\u4ec0\u4e48\u7528\u4e2d\u95f4\u7684\u4f4d\u6765\u505a\u7d22\u5f15 \u5982\u679c\u7528\u9ad8\u4f4d\u505a\u7d22\u5f15, \u90a3\u4e48\u4e00\u4e9b\u8fde\u7eed\u7684\u5185\u5b58\u5757\u5c31\u4f1a\u6620\u5c04\u5230\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u51b2\u5757. \u987a\u5e8f\u626b\u63cf\u4e00\u4e2a\u6570\u7ec4\u7684\u5143\u7d20, \u90a3\u4e48\u9ad8\u901f\u7f13\u5b58\u53ea\u80fd\u4fdd\u5b58\u4e00\u4e2a\u5757\u5927\u5c0f\u7684\u6570\u7ec4\u5185\u5bb9, \u8fd9\u6837\u7684\u4f7f\u7528\u6548\u7387\u5f88\u4f4e.","title":"\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58"},{"location":"CSAPP/6/#_22","text":"\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u51b2\u7a81\u4e0d\u547d\u4e2d\u7684\u6839\u6e90\u5c31\u662f\u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c. \u7ea7\u76f8\u8054\u9ad8\u901f\u7f13\u5b58(set associative cache) \u653e\u9001\u4e86\u8fd9\u4e2a\u9650\u5236. \u4e00\u4e2a \\(1<E<C/B\\) \u7684\u9ad8\u901f\u7f13\u5b58\u79f0\u4e3a E \u8def\u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 . \u62bd\u5b57\u8fc7\u7a0b\u5982\u4e0a. \u5f53\u7f13\u5b58\u4e0d\u547d\u4e2d\u65f6\u9700\u8981\u7f13\u5b58\u884c\u66ff\u6362. \u5982\u679c\u5bf9\u5e94\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d\u6709\u7a7a\u884c, \u76f4\u63a5\u4fdd\u5b58\u5230\u7a7a\u884c, \u5426\u5219\u8003\u8651\u5408\u9002\u7684 \u66ff\u6362\u7b56\u7565 . \u6700\u4e0d\u5e38\u4f7f\u7528(Least-Frequently-Used, LFU) : \u66ff\u6362\u8fc7\u53bb\u67d0\u4e2a\u65f6\u95f4\u7a97\u53e3\u5185\u5f15\u7528\u6b21\u6570\u6700\u5c11\u7684\u4e00\u884c. \u6700\u8fd1\u6700\u5c11\u539f\u7406(Least-Recently-Used, LRU) : \u66ff\u6362\u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u95f4\u6700\u4e45\u8fdc\u7684\u90a3\u4e00\u884c.","title":"\u7ea7\u76f8\u8054\u9ad8\u901f\u7f13\u5b58"},{"location":"CSAPP/6/#_23","text":"\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58(Full Associative Cache) \u662f\u7528\u4e00\u4e2a\u5305\u542b\u6240\u6709\u9ad8\u901f\u7f13\u5b58\u884c\u7684\u7ec4\u7ec4\u6210\u7684, \u5176\u4e2d \\(E=C/B\\) \u5373 \\(E=1\\) . \u6ce8\u610f\u5730\u5740\u4e2d\u4e0d\u9700\u8981\u7ec4\u7d22\u5f15\u4f4d, \u5730\u5740\u53ea\u88ab\u5212\u5206\u4e3a\u4e00\u4e2a\u6807\u8bb0\u548c\u4e00\u4e2a\u5757\u504f\u79fb. \u56e0\u4e3a\u9ad8\u901f\u7f13\u5b58\u7535\u8def\u5fc5\u987b\u5e76\u884c\u5730\u641c\u7d22\u8bb8\u591a\u76f8\u5339\u914d\u7684\u6807\u8bb0, \u6784\u9020\u4e00\u4e2a\u53c8\u5927\u53c8\u5feb\u7684\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u5f88\u56f0\u96be, \u800c\u4e14\u5f88\u6602\u8d35. \u56e0\u6b64\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u53ea\u9002\u5408\u505a\u5f88\u5c0f\u7684\u7f13\u5b58.","title":"\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58"},{"location":"CSAPP/6/#_24","text":"\u5f53 CPU \u60f3\u8981\u5bf9\u5730\u5740 A \u8fdb\u884c\u5199\u64cd\u4f5c\u65f6, \u4f1a\u901a\u8fc7\u5730\u5740 A \u5224\u65ad\u662f\u5426\u7f13\u5b58\u4e86\u8be5\u5730\u5740, \u5982\u679c\u7f13\u5b58\u4e86\u79f0\u4e3a \u5199\u547d\u4e2d(Write Hit) ,\u5426\u5219\u79f0\u4e3a \u5199\u4e0d\u547d\u4e2d(Write Miss) . \u5199\u547d\u4e2d : \u9ad8\u901f\u7f13\u5b58\u4f1a\u5148\u66f4\u65b0\u5728\u7f13\u5b58\u4e2d\u7684\u7248\u672c, \u7136\u540e\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u6cd5\u66f4\u65b0\u4e0b\u4e00\u7248\u672c. \u76f4\u5199(write-through) : \u7acb\u5373\u5c06 w \u7684\u9ad8\u901f\u7f13\u5b58\u5757\u5199\u56de\u5230\u7d27\u6328\u7740\u7684\u4f4e\u4e00\u5c42\u4e2d. \u7f3a\u70b9\u662f\u6bcf\u6b21\u5199\u90fd\u4f1a\u5f15\u8d77\u603b\u7ebf\u6d41\u91cf. \u5199\u56de(write-back) : \u5c3d\u53ef\u80fd\u5730\u63a8\u8fdf\u66f4\u65b0, \u53ea\u6709\u5f53\u66ff\u6362\u7b97\u6cd5\u8981\u9a71\u9010\u8fd9\u4e2a\u66f4\u65b0\u8fc7\u7684\u5757\u65f6\u624d\u628a\u5b83\u5199\u5230\u7d27\u6328\u7740\u7684\u4f4e\u4e00\u5c42\u4e2d. \u4e3a\u6b64\u6211\u4eec\u8981\u4e3a\u9ad8\u901f\u7f13\u5b58\u7ef4\u62a4\u4e00\u4e2a\u989d\u5916\u7684\u4fee\u6539\u4f4d. \u5b83\u663e\u8457\u5730\u51cf\u5c11\u4e86\u603b\u7ebf\u6d41\u91cf, \u4f46\u7f3a\u70b9\u662f\u589e\u52a0\u4e86\u590d\u6742\u6027. \u5199\u4e0d\u547d\u4e2d : \u5199\u5206\u914d(write-allocate) : \u52a0\u8f7d\u76f8\u5e94\u7684\u4f4e\u4e00\u5c42\u4e2d\u7684\u5757\u5230\u9ad8\u901f\u7f13\u5b58\u4e2d, \u7136\u540e\u66f4\u65b0\u8fd9\u4e2a\u9ad8\u901f\u7f13\u5b58\u5757. \u5199\u5206\u914d\u8bd5\u56fe\u5229\u7528\u7a7a\u95f4\u5c40\u90e8\u6027, \u4f46\u7f3a\u70b9\u662f\u6bcf\u6b21\u4e0d\u547d\u4e2d\u90fd\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u5757\u4ece\u4f4e\u5230\u9ad8\u7684\u4f20\u9001. \u975e\u5199\u5206\u914d : \u907f\u5f00\u9ad8\u901f\u7f13\u5b58, \u76f4\u63a5\u5c06\u8fd9\u4e2a\u5b57\u5199\u5230\u4f4e\u4e00\u5c42\u4e2d. \u76f4\u5199\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u4e3a\u5199\u4e0d\u5206\u914d\u7684, \u5199\u56de\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u4e3a\u5199\u5206\u914d\u7684. \u5efa\u8bae\u91c7\u7528\u5199\u56de\u548c\u5199\u5206\u914d.","title":"\u5199\u64cd\u4f5c"},{"location":"CSAPP/6/#_25","text":"\u5b9e\u9645\u4e0a, \u9ad8\u901f\u7f13\u5b58\u65e2\u4fdd\u5b58\u6570\u636e, \u4e5f\u4fdd\u5b58\u6307\u4ee4 i-cache : \u53ea\u4fdd\u5b58\u6307\u4ee4\u7684\u9ad8\u901f\u7f13\u5b58. d-cache : \u53ea\u4fdd\u5b58\u7a0b\u5e8f\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58. \u7edf\u4e00\u7684\u9ad8\u901f\u7f13\u5b58(unified cache) : \u65e2\u4fdd\u5b58\u6307\u4ee4\u53c8\u4fdd\u5b58\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58. \u8fd9\u6837\u505a\u7684\u539f\u56e0: \u5c06\u6570\u636e\u548c\u6307\u4ee4\u5206\u522b\u4fdd\u5b58\u5728\u4e24\u4e2a\u9ad8\u901f\u7f13\u5b58\u4e2d, \u4f7f\u5f97\u5904\u7406\u5668\u53ef\u4ee5\u540c\u65f6\u8bfb\u4e00\u4e2a\u6307\u4ee4\u5b57\u548c\u4e00\u4e2a\u6570\u636e\u5b57. i-cache \u901a\u5e38\u662f\u53ea\u8bfb\u7684, \u6240\u4ee5\u4f1a\u6bd4\u8f83\u7b80\u5355. \u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u7684\u8bbf\u95ee\u6a21\u5f0f\u4f18\u5316\u8fd9\u4e24\u4e2a\u9ad8\u901f\u7f13\u5b58, \u4f7f\u7528\u4e0d\u540c\u7684\u5757\u5927\u5c0f\u3001\u76f8\u8054\u5ea6\u548c\u5bb9\u91cf. \u786e\u4fdd\u6570\u636e\u8bbf\u95ee\u548c\u6307\u4ee4\u8bbf\u95ee\u4e4b\u95f4\u4e0d\u5f62\u6210\u51b2\u7a81\u4e0d\u547d\u4e2d. \u4ee3\u4ef7\u5c31\u662f\u4f1a\u5bfc\u81f4\u9ad8\u901f\u7f13\u5b58\u5bb9\u91cf\u53d8\u5c0f, \u63d0\u9ad8\u51fa\u73b0\u5bb9\u91cf\u4e0d\u547d\u4e2d\u7684\u53ef\u80fd\u6027.","title":"\u771f\u5b9e\u7684\u9ad8\u901f\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784"},{"location":"CSAPP/6/#_26","text":"\u8861\u91cf\u9ad8\u901f\u7f13\u5b58\u6027\u80fd\u7684\u6307\u6807: \u4e0d\u547d\u4e2d\u7387 : \u4e0d\u547d\u4e2d\u6570\u91cf/\u5f15\u7528\u6570\u91cf \u547d\u4e2d\u7387 : 1 - \u4e0d\u547d\u4e2d\u7387 \u547d\u4e2d\u65f6\u95f4 : \u4ece\u9ad8\u901f\u7f13\u5b58\u4f20\u9001\u4e00\u4e2a\u5b57\u5230 CPU \u6240\u9700\u7684\u65f6\u95f4 \u4e0d\u547d\u4e2d\u5904\u7f5a : \u7531\u4e8e\u4e0d\u547d\u4e2d\u6240\u9700\u8981\u7684\u989d\u5916\u7684\u65f6\u95f4 \u53c2\u6570 \u4f18\u70b9 \u7f3a\u70b9 \u5efa\u8bae \u9ad8\u901f\u7f13\u5b58\u5927\u5c0f(\u8d8a\u5927) \u63d0\u9ad8\u547d\u4e2d\u7387 \u589e\u52a0\u547d\u4e2d\u65f6\u95f4 L1<L2<L3 \u5757\u5927\u5c0f(\u8d8a\u5927) \u5229\u7528\u7a7a\u95f4\u5c40\u9650\u6027, \u63d0\u9ad8\u547d\u4e2d\u7387 \u9ad8\u901f\u7f13\u5b58\u884c\u8d8a\u5c11, \u635f\u5bb3\u65f6\u95f4\u5c40\u9650\u6027; \u5bf9\u4e0d\u547d\u4e2d\u5904\u7f5a\u6709\u8d1f\u9762\u5f71\u54cd, \u4f20\u9001\u65f6\u95f4\u8d8a\u957f \u73b0\u4ee3\u7cfb\u7edf\u6298\u4e2d\u8bbe\u7f6e\u5757\u5305\u542b64\u4e2a\u5b57\u8282 \u76f8\u8054\u5ea6(\u8d8a\u9ad8, \u5373 E \u8d8a\u5927) \u964d\u4f4e\u4e86\u9ad8\u901f\u7f13\u5b58\u7531\u4e8e\u51b2\u7a81\u4e0d\u547d\u4e2d\u51fa\u73b0\u6296\u52a8\u7684\u53ef\u80fd \u8f83\u9ad8\u7684\u6210\u672c; \u9700\u8981\u66f4\u591a\u6807\u8bb0\u4f4d; \u589e\u52a0\u547d\u4e2d\u65f6\u95f4; \u589e\u52a0\u4e0d\u547d\u4e2d\u60e9\u7f5a L1 \u548c L2 \u4f7f\u7528 8 \u8def\u7ec4\u76f8\u8054, L3 \u4f7f\u7528 16 \u8def\u7ec4\u76f8\u8054 \u5199\u7b56\u7565(\u76f4\u5199) \u5bb9\u6613\u5b9e\u73b0; \u80fd\u4f7f\u7528\u72ec\u7acb\u4e8e\u9ad8\u901f\u7f13\u5b58\u7684\u5199\u7f13\u51b2\u533a\u6765\u66f4\u65b0\u5185\u5b58;\u8bfb\u4e0d\u547d\u4e2d\u7684\u5f00\u9500\u4e0d\u5927 \u5f15\u8d77\u7684\u4f20\u9001\u6b21\u6570\u591a \u9ad8\u901f\u7f13\u5b58\u8d8a\u5f80\u4e0b\u5c42, \u8d8a\u53ef\u80fd\u4f7f\u7528\u5199\u56de\u800c\u4e0d\u662f\u76f4\u5199 \u7531\u6b64, \u7f16\u5199\u9ad8\u901f\u7f13\u5b58\u53cb\u597d\u7684\u4ee3\u7801\u9700\u8981: \u8ba9\u6700\u5e38\u89c1\u7684\u4ee3\u7801\u8fd0\u884c\u5f97\u5feb. \u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u53cd\u590d\u5f15\u7528\u662f\u597d\u7684, \u56e0\u4e3a\u7f16\u8bd1\u5668\u80fd\u591f\u628a\u5b83\u4eec\u7f13\u5b58\u5728\u5bc4\u5b58\u5668\u4e4b\u4e2d(\u65f6\u95f4\u5c40\u90e8\u6027). \u6b65\u957f\u4e3a 1 \u7684\u5f15\u7528\u6a21\u5f0f\u662f\u597d\u7684, \u56e0\u4e3a\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u6240\u6709\u5c42\u6b21\u4e0a\u7684\u7f13\u5b58\u90fd\u662f\u5c06\u6570\u636e\u7f13\u5b58\u4e3a\u8fde\u7eed\u7684\u5757.(\u7a7a\u95f4\u5c40\u90e8\u6027) \u5c3d\u91cf\u51cf\u5c11\u6bcf\u4e2a\u5faa\u73af\u5185\u7684\u7f13\u5b58\u4e0d\u547d\u4e2d\u6570\u91cf, \u8f83\u9ad8\u7684\u4e0d\u547d\u4e2d\u7387\u961f\u8fd0\u884c\u65f6\u95f4\u53ef\u4ee5\u6709\u663e\u8457\u7684\u5f71\u54cd.","title":"\u9ad8\u901f\u7f13\u5b58\u53c2\u6570\u5bf9\u6027\u80fd\u7684\u5f71\u54cd"},{"location":"CSAPP/6/#_27","text":"\u4e00\u4e2a\u7a0b\u5e8f\u4ece\u5b58\u50a8\u5668\u7cfb\u7edf\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u901f\u7387\u79f0\u4e3a \u8bfb\u541e\u5410\u91cf(Read Throughput) \u6216 \u8bfb\u5e26\u5bbd(Read Bandwidth) \uff0c\u5355\u4f4d\u4e3aMB/s. \u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u6765\u8861\u91cf\u7a7a\u95f4\u5c40\u90e8\u6027\u548c\u65f6\u95f4\u5c40\u90e8\u6027\u5bf9\u7a0b\u5e8f\u541e\u5410\u91cf\u7684\u5f71\u54cd. \u901a\u8fc7\u8c03\u6574 size(\u65f6\u95f4\u5c40\u90e8\u6027. size \u5c0f\u5219\u653e\u8fdb L1 \u9ad8\u901f\u7f13\u5b58, size \u5927\u5219\u653e\u8fdb L3) \u548c stride(\u7a7a\u95f4\u5c40\u90e8\u6027, \u6b65\u957f) \u6765\u5ea6\u91cf\u7a0b\u5e8f\u7684\u541e\u5410\u91cf\uff0c\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u5b58\u50a8\u5668\u5c71(Memory Mountain). \u4fdd\u6301 stride \u4e0d\u53d8, \u89c2\u5bdf\u9ad8\u901f\u7f13\u5b58\u5927\u5c0f\u548c\u65f6\u95f4\u5c40\u90e8\u6027\u5bf9\u6027\u80fd\u7684\u5f71\u54cd: \u4fdd\u6301\u5de5\u4f5c\u96c6\u4e3a 4MB, \u6cbf\u7740 L3 \u5c71\u810a\u67e5\u770b\u7a7a\u95f4\u5c40\u90e8\u6027\u5bf9\u6027\u80fd\u7684\u5f71\u54cd: \u7efc\u4e0a\u6240\u8ff0\uff1a\u4f7f\u9891\u7e41\u4f7f\u7528\u7684\u5b57\u4ece L1 \u4e2d\u53d6\u51fa\uff0c\u8fd8\u9700\u8981\u5229\u7528\u7a7a\u95f4\u5c40\u90e8\u6027\uff0c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u591a\u7684\u5b57\u4ece\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u8bfb\u53d6\u5230.","title":"\u5b58\u50a8\u5668\u5c71"},{"location":"CSAPP/6/#_28","text":"\u77e9\u9635\u4e58\u6cd5 \u5047\u8bbe\u4e24\u4e2a\u77e9\u9635\u90fd\u662f n*n \u7684 double \u578b\u6570\u7ec4. sizeof(double) == 8. \u53ea\u6709\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58, \u5176\u5757\u5927\u5c0f\u4e3a 32 \u5b57\u8282. n \u5f88\u5927\u4ee5\u81f3\u4e8e\u77e9\u9635\u7684\u4e00\u884c\u90fd\u4e0d\u80fd\u5b8c\u5168\u88c5\u8fdb L1 \u9ad8\u901f\u7f13\u5b58\u4e2d. \u7f16\u8bd1\u5668\u5c06\u5c40\u90e8\u53d8\u91cf\u5b58\u50a8\u5230\u5bc4\u5b58\u5668\u4e2d, \u56e0\u6b64\u5faa\u73af\u5185\u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528\u4e0d\u9700\u8981\u4efb\u4f55\u5b58\u50a8\u548c\u52a0\u8f7d\u6307\u4ee4. \u5176\u7ed3\u679c:(\u5185\u5faa\u73af)","title":"\u91cd\u65b0\u6392\u5217\u5faa\u73af\u4ee5\u63d0\u9ad8\u7a7a\u95f4\u5c40\u90e8\u6027"},{"location":"CSAPP/6/#_29","text":"","title":"\u4f7f\u7528\u5206\u5757\u63d0\u9ad8\u65f6\u95f4\u5c40\u90e8\u6027"},{"location":"CSAPP/7/","text":"\u94fe\u63a5 \u00b6 \u94fe\u63a5(linking) \u662f\u5c06\u5404\u79cd\u4ee3\u7801\u548c\u6570\u636e\u7247\u6bb5\u6536\u96c6\u5e76\u7ec4\u5408\u6210\u4e3a\u4e00\u4e2a\u5355\u4e00\u6587\u4ef6\u7684\u8fc7\u7a0b, \u8fd9\u4e2a\u6587\u4ef6\u53ef\u88ab\u52a0\u8f7d(\u590d\u5236)\u5230\u5185\u5b58\u5e76\u6267\u884c. \u94fe\u63a5\u53ef\u88ab\u6267\u884c\u4e8e\u4e09\u4e2a\u9636\u6bb5: \u7f16\u8bd1\u65f6 : \u5728\u6e90\u4ee3\u7801\u7ffb\u8bd1\u6210\u673a\u5668\u4ee3\u7801\u65f6\u7684\u4f20\u7edf\u9759\u6001\u94fe\u63a5. \u52a0\u8f7d\u65f6 : \u5728\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u5668\u52a0\u8f7d\u5230\u5185\u5b58\u5e76\u6267\u884c\u65f6\u7684\u52a8\u6001\u94fe\u63a5. \u8fd0\u884c\u65f6 : \u7531\u5e94\u7528\u7a0b\u5e8f\u6765\u6267\u884c\u7684\u52a8\u6001\u94fe\u63a5. \u94fe\u63a5\u662f\u7531 \u94fe\u63a5\u5668(linker) \u7a0b\u5e8f\u81ea\u52a8\u6267\u884c, \u94fe\u63a5\u7684\u5b58\u5728\u4f7f\u5f97 \u5206\u79bb\u7f16\u8bd1 \u6210\u4e3a\u53ef\u80fd, \u4e00\u4e2a\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u5c0f\u7684\u6a21\u5757, \u53ea\u9700\u8981\u5bf9\u8fd9\u4e9b\u6a21\u5757\u8fdb\u884c\u4fee\u6539\u7f16\u8bd1, \u7136\u540e\u901a\u8fc7\u94fe\u63a5\u5668\u5c06\u5176\u7ec4\u5408\u6210\u5927\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5c31\u884c. \u57fa\u672c\u6982\u5ff5 \u00b6 \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f \u00b6 \u5927\u591a\u6570\u7f16\u8bd1\u7cfb\u7edf\u63d0\u4f9b \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f(compiler driver) , \u5b83\u4ee3\u8868\u7528\u6237\u5728\u9700\u8981\u65f6\u8c03\u7528\u8bed\u8a00\u5904\u7406\u5668, \u7f16\u8bd1\u5668, \u6c47\u7f16\u5668\u548c\u94fe\u63a5\u5668. \u6b64\u65f6\u6211\u4eec\u8f93\u5165 linux> gcc -Og -o prog main.c sum.c GCC\u9a71\u52a8\u7a0b\u5e8f \u9996\u5148\u8fd0\u884c C \u9884\u5904\u7406\u5668(cpp), \u5c06 C \u7684\u6e90\u7a0b\u5e8f main.c \u7ffb\u8bd1\u6210\u4e00\u4e2a ASCII \u7801\u7684\u4e2d\u95f4\u6587\u4ef6 main.i cpp [other argument] main.c /tmp/main.i \u7136\u540e\u8fd0\u884c C \u7f16\u8bd1\u5668(ccl), \u5c06 main.i \u7ffb\u8bd1\u6210\u4e00\u4e2a ASCII \u6c47\u7f16\u8bed\u8a00\u6587\u4ef6 main.s ccl /tmp/main.i -Og [other argument] -o /tmp/main.s \u8fd0\u884c\u6c47\u7f16\u5668(as), \u5b83\u5c06 main.s \u7ffb\u8bd1\u6210\u4e00\u4e2a \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 main.o as [other argument] -o /tmp/main.o /tmp/main.s \u5bf9 sum.c \u7ecf\u8fc7\u76f8\u540c\u7684\u8fc7\u7a0b\u751f\u6210 sum.o \u8fd0\u884c\u94fe\u63a5\u5668\u7a0b\u5e8f ld, \u5c06 main.o \u548c sum.o \u4ee5\u53ca\u4e00\u4e9b\u5fc5\u8981\u7684\u7cfb\u7edf\u76ee\u6807\u6587\u4ef6\u7ec4\u5408\u8d77\u6765, \u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 prog. ld -o prog [system object files and args] /tmp/main.o /tmp/sum.o shell \u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684 \u52a0\u8f7d\u5668 , \u5c06\u53ef\u6267\u884c\u6587\u4ef6 prog \u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u590d\u5236\u5230\u5185\u5b58, \u7136\u540e\u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u5f00\u5934. linux> ./prog \u76ee\u6807\u6587\u4ef6 \u00b6 \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 : \u5305\u542b\u4e8c\u8fdb\u5236\u4ee3\u7801\u548c\u6570\u636e, \u5176\u5f62\u5f0f\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u4e0e\u5176\u4ed6\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u5408\u5e76\u8d77\u6765, \u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u5171\u4eab\u76ee\u6807\u6587\u4ef6 : \u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6, \u53ef\u4ee5\u5728\u52a0\u8f7d\u6216\u8fd0\u884c\u65f6\u88ab\u52a8\u6001\u5730\u52a0\u8f7d\u8fdb\u5185\u5b58\u5e76\u94fe\u63a5. \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 : \u5305\u542b\u4e8c\u8fdb\u5236\u4ee3\u7801\u548c\u6570\u636e, \u5176\u5f62\u5f0f\u53ef\u4ee5\u88ab\u76f4\u63a5\u590d\u5236\u5230\u5185\u5b58\u5e76\u6267\u884c. \u7f16\u8bd1\u5668\u548c\u6c47\u7f16\u5668\u751f\u6210\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6(\u5305\u62ec\u5171\u4eab\u76ee\u6807\u6587\u4ef6), \u94fe\u63a5\u5668\u751f\u6210\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u4e00\u4e2a\u76ee\u6807\u6a21\u5757\u5c31\u662f\u4e00\u4e2a\u5b57\u8282\u5e8f\u5217, \u800c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u662f\u4e00\u4e2a\u4ee5\u6587\u4ef6\u5f62\u5f0f\u5b58\u653e\u5728\u78c1\u76d8\u7684\u76ee\u6807\u6a21\u5757. \u73b0\u4ee3 x86-64 Linux \u548c Unix \u7cfb\u7edf\u4f7f\u7528 \u53ef\u6267\u884c\u53ef\u94fe\u63a5\u683c\u5f0f(Executable and Linkable Format, ELF) . \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 \u00b6 ELF \u5934(header)\u4ee5\u4e00\u4e2a 16 \u5b57\u8282\u7684\u5e8f\u5217\u5f00\u59cb, \u8fd9\u4e2a\u5e8f\u5217\u63cf\u8ff0\u4e86\u751f\u6210\u8be5\u6587\u4ef6\u7684\u7cfb\u7edf\u7684\u5b57\u7684\u5927\u5c0f\u548c\u5b57\u8282\u987a\u5e8f. \u8fd8\u5305\u62ec\u4e86\u5e2e\u52a9\u94fe\u63a5\u5668\u8bed\u6cd5\u5206\u6790\u548c\u89e3\u91ca\u76ee\u6807\u6587\u4ef6\u7684\u4fe1\u606f, \u5982 ELF \u5934\u7684\u5927\u5c0f, \u76ee\u6807\u6587\u4ef6\u7684\u7c7b\u578b, \u673a\u5668\u7c7b\u578b(\u5982 x86-64), \u8282\u5934\u90e8\u8868 \u7684\u6587\u4ef6\u504f\u79fb, \u8282\u5934\u90e8\u8868\u4e2d\u6761\u76ee\u7684\u5927\u5c0f\u548c\u6570\u91cf. \u8282\u5934\u90e8\u8868(section header table) : \u63cf\u8ff0\u4e86\u4e0d\u540c\u8282\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f, \u76ee\u6807\u6587\u4ef6\u4e2d\u6bcf\u4e2a\u8282\u90fd\u6709\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u6761\u76ee\u5728\u8868\u4e2d. .text : \u5df2\u7f16\u8bd1\u7a0b\u5e8f\u7684\u673a\u5668\u4ee3\u7801 .rodata : \u53ea\u8bfb\u6570\u636e. \u5982\u8df3\u8f6c\u8868, printf \u4e2d\u7684\u683c\u5f0f\u4e32. .data : \u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u548c\u9759\u6001 C \u53d8\u91cf. .bss : \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u548c\u9759\u6001 C \u53d8\u91cf, \u4ee5\u53ca\u6240\u6709\u88ab\u521d\u59cb\u5316\u4e3a 0 \u7684\u5168\u5c40\u6216\u9759\u6001\u53d8\u91cf. \u76ee\u6807\u6587\u4ef6\u4e2d\u8fd9\u4e2a\u8282\u4e0d\u5360\u636e\u5b9e\u9645\u7a7a\u95f4, \u4ec5\u662f\u4e00\u4e2a\u5360\u4f4d\u7b26. \u533a\u5206\u5df2\u521d\u59cb\u5316\u548c\u672a\u521d\u59cb\u5316\u53d8\u91cf, \u662f\u56e0\u4e3a\u5728\u76ee\u6807\u6587\u4ef6\u4e2d, \u672a\u521d\u59cb\u5316\u53d8\u91cf\u4e0d\u9700\u8981\u5360\u636e\u4efb\u4f55\u5b9e\u9645\u7684\u78c1\u76d8\u7a7a\u95f4, \u8fd0\u884c\u65f6\u518d\u5728\u5185\u5b58\u4e2d\u5206\u914d\u8fd9\u4e9b\u53d8\u91cf, \u521d\u59cb\u503c\u4e3a0. \u5c40\u90e8 C \u53d8\u91cf\u5728\u8fd0\u884c\u65f6\u53ea\u4fdd\u5b58\u5728\u6808\u4e2d, \u4e0d\u51fa\u73b0\u5728 .data \u548c .bss \u4e2d. .symtab : \u4e00\u4e2a\u7b26\u53f7\u8868, \u5b83\u5b58\u653e\u5728\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u548c\u5f15\u7528\u7684\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\u7684\u4fe1\u606f. \u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u5728 .symtab \u90fd\u6709\u4e00\u5f20\u7b26\u53f7\u8868. \u4e0d\u5305\u542b\u5c40\u90e8\u53d8\u91cf\u7684\u6761\u76ee. .rel.text : .text \u8282\u7684\u91cd\u5b9a\u4f4d\u4fe1\u606f, \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u9700\u8981\u4fee\u6539\u7684\u6307\u4ee4\u5730\u5740 .rel.data : .data \u8282\u7684\u91cd\u5b9a\u4f4d\u4fe1\u606f, \u5408\u5e76\u540e\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u9700\u8981\u4fee\u6539\u7684\u6307\u9488\u6570\u636e\u7684\u5730\u5740 \u4e00\u822c\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf, \u5982\u679c\u521d\u59cb\u503c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u5730\u5740\u6216\u5916\u90e8\u5b9a\u4e49\u51fd\u6570\u7684\u5730\u5740, \u5c31\u9700\u8981\u88ab\u4fee\u6539. \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5df2\u5b8c\u6210\u91cd\u5b9a\u4f4d, \u5c31\u4e0d\u9700\u8981 .rel.text \u548c .rel.data \u6570\u636e\u8282. .debug : \u8c03\u8bd5\u7b26\u53f7\u8868, \u6761\u76ee\u662f\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u548c\u7c7b\u578b\u5b9a\u4e49, \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u548c\u5f15\u7528\u7684\u5168\u5c40\u53d8\u91cf, \u4ee5\u53ca\u539f\u59cb\u7684 C \u6e90\u6587\u4ef6. .line : \u539f\u59cb C \u6e90\u7a0b\u5e8f\u4e2d\u7684\u884c\u53f7\u548c .text \u8282\u4e2d\u673a\u5668\u6307\u4ee4\u4e4b\u95f4\u7684\u6620\u5c04. \u6ce8\u610f: \u53ea\u6709\u4ee5 -g \u9009\u9879\u8c03\u7528\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\uff0c\u624d\u4f1a\u51fa\u73b0 .debug \u548c .line .strtab \uff1a \u5b57\u7b26\u4e32\u8868, \u5305\u62ec .symtab \u548c .debug \u8282\u4e2d\u7684\u7b26\u53f7\u8868, \u4ee5\u53ca\u8282\u5934\u90e8\u4e2d\u7684\u8282\u540d\u5b57 \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 \u00b6 ELF \u5934\u63cf\u8ff0\u6587\u4ef6\u7684\u603b\u4f53\u683c\u5f0f, \u8fd8\u5305\u62ec\u7a0b\u5e8f\u7684 \u5165\u53e3\u70b9(entry point) , \u5373\u7a0b\u5e8f\u6267\u884c\u65f6\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740. .init \u8282\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5c0f\u51fd\u6570 _init , \u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u4ee3\u7801\u4f1a\u8c03\u7528\u5b83. \u56e0\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u662f \u5b8c\u5168\u94fe\u63a5\u7684(\u5df2\u88ab\u91cd\u5b9a\u4f4d) , \u56e0\u6b64\u5b83\u4e0d\u9700\u8981 rel \u8282. \u7a0b\u5e8f\u5934\u90e8\u8868 \u63cf\u8ff0\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u8fde\u7eed\u7684\u7247\u88ab\u6620\u5c04\u5230\u8fde\u7eed\u7684\u5185\u5b58\u6bb5\u7684\u6620\u5c04\u5173\u7cfb. off \u662f\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u504f\u79fb, \u8868\u793a\u8981\u4ece\u76ee\u6807\u6587\u4ef6\u7684\u4ec0\u4e48\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u8be5\u6bb5 vaddr/paddr \u662f\u5185\u5b58\u5730\u5740, \u8868\u793a\u8981\u5c06\u8be5\u6bb5\u52a0\u8f7d\u5230\u7684\u5185\u5b58\u5730\u5740 align \u662f\u5bf9\u9f50\u8981\u6c42 filesz \u662f\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6bb5\u5927\u5c0f, \u5219\u901a\u8fc7 off \u548c filesz \u5c31\u80fd\u786e\u5b9a\u6211\u4eec\u8981\u52a0\u8f7d\u7684\u6bb5\u7684\u5185\u5bb9 memsz \u662f\u5185\u5b58\u4e2d\u7684\u6bb5\u5927\u5c0f, \u8868\u793a\u6211\u4eec\u5c06\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u8be5\u6bb5\u52a0\u8f7d\u5230\u591a\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d flags \u8868\u793a\u8be5\u6bb5\u8fd0\u884c\u65f6\u7684\u8bbf\u95ee\u6743\u9650 \u5bf9\u4efb\u4f55\u6bb5 s, \u94fe\u63a5\u5668\u5fc5\u987b\u9009\u62e9\u4e00\u4e2a\u8d77\u59cb\u5730\u5740 vaddr, \u4f7f\u5f97 vaddr mod aligh = off mod align. \u8fd9\u79cd\u5bf9\u9f50\u662f\u4e00\u79cd\u4f18\u5316, \u4f7f\u5f97\u5f53\u7a0b\u5e8f\u6267\u884c\u65f6, \u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6bb5\u80fd\u6709\u6548\u7387\u5730\u4f20\u9001\u5230\u5185\u5b58\u4e2d. \u7b26\u53f7\u548c\u7b26\u53f7\u8868 \u00b6 \u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6a21\u5757 m \u90fd\u6709\u4e00\u4e2a\u7b26\u53f7\u8868. \u5b83\u5305\u542b m \u5b9a\u4e49\u548c\u5f15\u7528\u7684\u7b26\u53f7\u7684\u97f3\u7cfb. \u5168\u5c40\u94fe\u63a5\u5668\u7b26\u53f7 : \u7531\u6a21\u5757 m \u5b9a\u4e49\u5e76\u80fd\u88ab\u5176\u4ed6\u6a21\u5757\u5f15\u7528\u7684\u5168\u5c40\u7b26\u53f7. \u5bf9\u5e94\u975e\u9759\u6001\u7684 C \u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf. \u5916\u90e8\u7b26\u53f7 : \u7531\u5176\u4ed6\u6a21\u5757\u5b9a\u4e49\u5e76\u88ab m \u6a21\u5757\u5f15\u7528\u7684\u5168\u5c40\u7b26\u53f7. \u5bf9\u5e94\u5176\u4ed6\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u975e\u9759\u6001\u7684 C \u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf. \u5c40\u90e8\u7b26\u53f7 : \u53ea\u88ab\u6a21\u5757 m \u5b9a\u4e49\u548c\u5f15\u7528. \u5bf9\u5e94\u5e26 static \u5c5e\u6027\u7684 C \u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf. Note \u5c40\u90e8\u9759\u6001\u53d8\u91cf\u4e0d\u5728\u6808\u4e2d\u7ba1\u7406, \u56e0\u6b64\u9700\u8981\u7f16\u8bd1\u5668\u5728 .data \u6216 .bss \u4e2d\u4e3a\u6bcf\u4e2a\u5b9a\u4e49\u5206\u914d\u7a7a\u95f4, \u5e76\u5728\u7b26\u53f7\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u6709\u552f\u4e00\u540d\u5b57\u7684\u672c\u5730\u94fe\u63a5\u5668\u7b26\u53f7. .symtab \u4e2d\u6bcf\u4e2a\u6761\u76ee\u7684\u683c\u5f0f: name : \u7b26\u53f7\u7684\u540d\u5b57, \u662f\u5728\u5b57\u7b26\u4e32\u8868 .strtab \u4e2d\u7684\u5b57\u8282\u504f\u79fb. value : \u7b26\u53f7\u7684\u5730\u5740. \u5bf9\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u6765\u8bf4, value \u662f\u8ddd\u5b9a\u4e49\u76ee\u6807\u7684\u8282\u7684\u8d77\u59cb\u4f4d\u7f6e\u7684\u504f\u79fb(\u5982\u51fd\u6570\u88ab\u5b9a\u4e49\u5728 .text \u4e2d, value \u5c31\u662f\u5b9a\u4e49\u7684\u4f4d\u7f6e\u8ddd\u79bb\u6b64\u8282\u4e2d\u7684\u504f\u79fb); \u5bf9\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u6765\u8bf4, value \u662f\u7edd\u5bf9\u8fd0\u884c\u65f6\u7684\u5730\u5740. size : \u76ee\u6807\u7684\u5927\u5c0f(\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d) type : \u8bf4\u660e\u8be5\u7b26\u53f7\u7684\u7c7b\u578b, \u662f\u51fd\u6570, \u53d8\u91cf\u8fd8\u662f\u6570\u636e\u8282\u7b49\u7b49. binding : \u8bf4\u660e\u8be5\u7b26\u53f7\u662f\u672c\u5730\u7684\u8fd8\u662f\u5c40\u90e8\u7684. section : \u8bf4\u660e\u8be5\u7b26\u53f7\u4fdd\u5b58\u5728\u76ee\u6807\u6587\u4ef6\u7684\u54ea\u4e2a\u8282\u4e2d, \u4e5f\u662f\u8282\u5934\u90e8\u8868\u4e2d\u7684\u4e00\u4e2a\u7d22\u5f15(\u504f\u79fb\u91cf) \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u6709\u4e09\u4e2a\u65e0\u6cd5\u901a\u8fc7\u8282\u5934\u90e8\u8868\u7d22\u5f15\u7684\u6570\u636e\u8282, \u79f0\u4e3a \u4f2a\u8282(pseudosection) .(\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u6ca1\u6709) ABS : \u4ee3\u8868\u4e0d\u8be5\u88ab\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7 UNDEF : \u4ee3\u8868\u672a\u5b9a\u4e49\u7684\u7b26\u53f7, \u4e5f\u5c31\u662f\u5728\u672c\u76ee\u6807\u6a21\u5757\u4e2d\u5f15\u7528\u5374\u5728\u5176\u4ed6\u5730\u65b9\u5b9a\u4e49\u7684\u7b26\u53f7 COMMON : \u4ee3\u8868\u8fd8\u672a\u88ab\u5206\u914d\u4f4d\u7f6e\u7684\u672a\u521d\u59cb\u5316\u7684\u6570\u636e\u76ee\u6807.(\u5982\u672a\u88ab\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf) \u6b64\u65f6 value \u7ed9\u51fa\u5bf9\u9f50\u8981\u6c42, size \u7ed9\u51fa\u6700\u5c0f\u5927\u5c0f. \u9759\u6001\u94fe\u63a5 \u00b6 Linux LD \u7a0b\u5e8f\u8fd9\u6837\u7684 \u9759\u6001\u94fe\u63a5\u5668 \u4ee5\u4e00\u7ec4\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u53c2\u6570\u4f5c\u4e3a\u8f93\u5165, \u751f\u6210\u4e00\u4e2a\u5b8c\u5168\u94fe\u63a5\u7684, \u53ef\u4ee5\u52a0\u8f7d\u548c\u8fd0\u884c\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4f5c\u4e3a\u8f93\u51fa. \u4e3a\u4e86\u6784\u9020\u53ef\u6267\u884c\u6587\u4ef6, \u94fe\u63a5\u5668\u5fc5\u987b\u5b8c\u6210\u4e24\u4e2a\u4e3b\u8981\u4efb\u52a1: \u7b26\u53f7\u89e3\u6790(symbol resolution) : \u76ee\u6807\u6587\u4ef6\u5b9a\u4e49\u548c\u5f15\u7528\u7b26\u53f7, \u6bcf\u4e2a\u7b26\u53f7\u5bf9\u5e94\u4e00\u4e2a\u51fd\u6570, \u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6216\u4e00\u4e2a\u9759\u6001\u53d8\u91cf. \u7b26\u53f7\u89e3\u6790\u7684\u76ee\u7684\u662f\u5c06\u6bcf\u4e2a\u7b26\u53f7\u5f15\u7528\u6b63\u597d\u548c\u4e00\u4e2a\u7b26\u53f7\u5b9a\u4e49\u5173\u8054\u8d77\u6765. \u91cd\u5b9a\u4f4d(relocation) : \u7f16\u8bd1\u5668\u548c\u6c47\u7f16\u5668\u751f\u6210\u4ece\u5730\u5740 0 \u5f00\u59cb\u7684\u4ee3\u7801\u548c\u6570\u636e\u8282. \u8fde\u63a5\u5668\u901a\u8fc7\u628a\u6bcf\u4e2a\u7b26\u53f7\u5b9a\u4e49\u4e0e\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5173\u8054\u8d77\u6765, \u4ece\u800c\u91cd\u5b9a\u4f4d\u8fd9\u4e9b\u8282, \u7136\u540e\u4fee\u6539\u6240\u6709\u5bf9\u8fd9\u4e9b\u7b26\u53f7\u7684\u5f15\u7528, \u4f7f\u5f97\u5b83\u4eec\u6307\u5411\u8fd9\u4e2a\u5185\u5b58\u4f4d\u7f6e. \u7b26\u53f7\u89e3\u6790 \u00b6 \u94fe\u63a5\u5668\u89e3\u6790\u7b26\u53f7\u5f15\u7528\u7684\u65b9\u6cd5\u662f\u5c06\u6bcf\u4e2a\u5f15\u7528\u4e0e\u5b83\u8f93\u5165\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4e2d\u4e00\u4e2a\u786e\u5b9a\u7684\u7b26\u53f7\u5b9a\u4e49\u5173\u8054\u8d77\u6765. \u5bf9\u5c40\u90e8\u7b26\u53f7, \u5f15\u7528\u548c\u5b9a\u4e49\u90fd\u5728\u76f8\u540c\u6a21\u5757\u4e2d, \u7b26\u53f7\u89e3\u6790\u662f\u7b80\u5355\u660e\u4e86\u7684. \u7f16\u8bd1\u5668\u53ea\u5141\u8bb8\u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u6bcf\u4e2a\u5c40\u90e8\u7b26\u53f7\u53ea\u6709\u4e00\u4e2a\u5b9a\u4e49. \u800c\u5c40\u90e8\u9759\u6001\u53d8\u91cf(\u6839\u636e\u5b9a\u4e49\u4e0d\u5c5e\u4e8e\u5c40\u90e8\u7b26\u53f7)\u4e5f\u4f1a\u6709\u5c40\u90e8\u94fe\u63a5\u5668\u7b26\u53f7, \u6240\u4ee5\u7f16\u8bd1\u5668\u8fd8\u8981\u786e\u4fdd\u5b83\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u5b57. \u5bf9\u5168\u5c40\u6216\u5916\u90e8\u7b26\u53f7, \u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u78b0\u5230\u4e0d\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\uff0c\u5219\u4f1a\u5047\u8bbe\u8be5\u7b26\u53f7\u662f\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\uff0c\u5c31\u4f1a\u5728\u91cd\u5b9a\u4f4d\u8868\u4e2d\u4ea7\u751f\u8be5\u7b26\u53f7\u7684\u6761\u76ee\uff0c\u8ba9\u94fe\u63a5\u5668\u53bb\u89e3\u51b3. \u800c\u94fe\u63a5\u5668\u53ef\u80fd\u8fd8\u4f1a\u78b0\u5230\u5728\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u5b9a\u4e49\u76f8\u540c\u540d\u5b57\u7684\u5168\u5c40\u7b26\u53f7\uff0c\u4e5f\u8981\u89e3\u51b3\u8fd9\u4e9b\u51b2\u7a81. \u89e3\u6790\u591a\u91cd\u5b9a\u4e49\u7684\u5168\u5c40\u7b26\u53f7 \u00b6 \u5728\u7f16\u8bd1\u65f6, \u7f16\u8bd1\u5668\u4f1a\u5411\u6c47\u7f16\u5668\u8f93\u51fa\u6bcf\u4e2a\u5168\u5c40\u7b26\u53f7\u662f \u5f3a \u8fd8\u662f \u5f31 \u7684\u4fe1\u606f, \u6c47\u7f16\u5668\u5c06\u8fd9\u4e2a\u4fe1\u606f\u9690\u542b\u5730\u7f16\u7801\u5728\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u91cc. \u51fd\u6570\u548c\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u662f\u5f3a\u7b26\u53f7, \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u662f\u5f31\u7b26\u53f7 . \u89c4\u5219: \u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\u540c\u540d\u7684\u5f3a\u7b26\u53f7. \u5982\u679c\u6709\u4e00\u4e2a\u5f3a\u7b26\u53f7\u4e0e\u591a\u4e2a\u5f31\u7b26\u53f7\u540c\u540d, \u90a3\u4e48\u9009\u62e9\u5f3a\u7b26\u53f7. \u5982\u679c\u6709\u591a\u4e2a\u5f31\u7b26\u53f7\u540c\u540d, \u90a3\u4e48\u9009\u62e9\u4efb\u610f\u4e00\u4e2a. \u5f53\u7f16\u8bd1\u5668\u9047\u5230\u4e00\u4e2a\u5f31\u5168\u5c40\u7b26\u53f7\u65f6, \u5b83\u65e0\u6cd5\u786e\u5b9a\u5176\u4ed6\u6a21\u5757\u662f\u5426\u6709\u5b9a\u4e49, \u4e5f\u65e0\u6cd5\u786e\u5b9a\u94fe\u63a5\u5668\u4f1a\u91c7\u7528\u54ea\u4e2a\u5b9a\u4e49, \u6240\u4ee5\u7f16\u8bd1\u5668\u628a\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u7b26\u53f7\u653e\u5728 common \u8868\u4e2d, \u8ba9\u94fe\u63a5\u5668\u53bb\u51b3\u5b9a. \u800c\u5df2\u7ecf\u88ab\u521d\u59cb\u5316 0 \u7684\u5168\u5c40\u53d8\u91cf, \u4ed6\u5fc5\u7136\u662f\u552f\u4e00\u7684, \u7f16\u8bd1\u5668\u53ef\u4ee5\u81ea\u4fe1\u5730\u628a\u4ed6\u5206\u914d\u7ed9 .bss . \u9759\u6001\u7b26\u53f7\u4e5f\u662f\u552f\u4e00\u7684, \u7f16\u8bd1\u5668\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u653e\u5230 .data \u6216 .bss \u4e2d.(\u53d6\u51b3\u4e8e\u662f\u5426\u88ab\u521d\u59cb\u5316\u4ee5\u53ca\u662f\u5426\u88ab\u521d\u59cb\u5316\u4e3a0) \u9700\u8981\u6ce8\u610f\u7684\u662f, \u540c\u540d\u7b26\u53f7\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f\u4e0d\u540c\u7684, \u56e0\u6b64\u89c4\u5219 23 \u53ef\u80fd\u5e26\u6765\u610f\u60f3\u4e0d\u5230\u7684\u9519\u8bef. \u4e0e\u9759\u6001\u5e93\u94fe\u63a5 \u00b6 \u7f16\u8bd1\u7cfb\u7edf\u63d0\u4f9b\u4e00\u79cd\u673a\u5236, \u5c06\u6240\u6709\u76f8\u5173\u7684\u76ee\u6807\u6a21\u5757\u6253\u5305\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6, \u79f0\u4e3a \u9759\u6001\u5e93(static library) . \u5b83\u53ef\u4ee5\u7528\u4f5c\u94fe\u63a5\u5668\u7684\u8f93\u5165. \u5f53\u94fe\u63a5\u5668\u6784\u9020\u4e00\u4e2a\u8f93\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6\u65f6, \u5b83\u53ea\u590d\u5236\u9759\u6001\u5e93\u91cc\u88ab\u5e94\u7528\u7a0b\u5e8f\u5f15\u7528\u7684\u76ee\u6807\u6a21\u5757, \u8fd9\u51cf\u5c11\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e2d\u7684\u5927\u5c0f. \u5728 Linux \u7cfb\u7edf\u4e2d, \u9759\u6001\u5e93\u4ee5\u4e00\u79cd \u5b58\u6863(archive) \u7684\u7279\u6b8a\u6587\u4ef6\u683c\u5f0f\u5b58\u653e\u5728\u78c1\u76d8\u4e2d. \u5b58\u6863\u6587\u4ef6\u662f\u4e00\u7ec4\u8fde\u63a5\u8d77\u6765\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u96c6\u5408, \u6709\u4e00\u4e2a\u5934\u90e8\u6765\u63cf\u8ff0\u6bcf\u4e2a\u6210\u5458\u76ee\u6807\u6587\u4ef6\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e. \u5b58\u6863\u6587\u4ef6\u94ed\u7531\u540e\u7f00 .a \u6807\u8bc6. \u521b\u5efa\u9759\u6001\u5e93 \u8981\u628a\u8fd9\u4e9b\u51fd\u6570\u521b\u5efa\u4e3a\u4e00\u4e2a\u9759\u6001\u5e93, \u6211\u4eec\u4f7f\u7528 AR \u5de5\u5177. linux> gcc -c addvec.c multvec.c linux> ar rcs libvector.a addvec.o multvec.o \u7531\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u9759\u6001\u5e93 libvector.a \u4e0e\u9759\u6001\u5e93\u94fe\u63a5 // main2.c #include <stdio.h> #include \"vector.h\" int x [ 2 ] = { 1 , 2 }; int y [ 2 ] = { 3 , 4 }; int z [ 2 ]; int main () { addvec ( x , y , z , 2 ); printf ( \"z = [%d %d] \\n \" , z [ 0 ], z [ 1 ]); return 0 ; } \u4e3a\u4e86\u521b\u5efa\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6, \u6211\u4eec\u8981\u7f16\u8bd1\u548c\u94fe\u63a5\u8f93\u5165\u6587\u4ef6 main2.o \u548c libvector.a linux> gcc -c main2.c linux> gcc -static -o prog2c main2.o ./libvector.a \u6216\u8005\u7b2c\u4e8c\u884c\u4e5f\u53ef gcc -static -o prog2c main.o -L. -lvector \u8fd9\u91cc\u7684 -lvector \u662f libvector.a \u7684\u7f29\u5199, -L. \u544a\u8bc9\u94fe\u63a5\u5668\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u67e5\u627e libvector.a \u9759\u6001\u5e93. \u4f7f\u7528\u9759\u6001\u5e93\u89e3\u6790\u5f15\u7528 \u00b6 \u7b26\u53f7\u89e3\u6790\u9636\u6bb5, \u94fe\u63a5\u5668\u4ece\u5de6\u5230\u53f3\u6309\u7167\u5b83\u4eec\u5728\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\u547d\u4ee4\u884c\u4e0a\u51fa\u73b0\u7684\u987a\u5e8f\u626b\u63cf\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u548c\u5b58\u6863\u6587\u4ef6.(\u9a71\u52a8\u7a0b\u5e8f\u81ea\u52a8\u5c06 .c \u7ffb\u8bd1\u4e3a .o \u6587\u4ef6) \u626b\u63cf\u4e2d\u94fe\u63a5\u5668\u7ef4\u62a4\u4e00\u4e2a \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u96c6\u5408 E (\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u6587\u4ef6\u4f1a\u88ab\u5408\u5e76\u8d77\u6765\u5f62\u6210\u53ef\u6267\u884c\u6587\u4ef6), \u4e00\u4e2a \u672a\u89e3\u6790\u7684\u7b26\u53f7(\u5373\u5f15\u7528\u4e86\u4f46\u662f\u5c1a\u672a\u5b9a\u4e49\u7684\u7b26\u53f7)\u96c6\u5408 U , \u4ee5\u53ca\u4e00\u4e2a \u5728\u524d\u9762\u8f93\u5165\u6587\u4ef6\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u7684\u7b26\u53f7\u96c6\u5408 D . \u521d\u59cb\u65f6, E D U \u5747\u4e3a\u7a7a. \u5bf9\u4e8e\u547d\u4ee4\u884c\u4e0a\u6bcf\u4e2a\u8f93\u5165\u6587\u4ef6 f, \u94fe\u63a5\u5668\u4f1a\u5224\u65ad f \u662f\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u8fd8\u662f\u4e00\u4e2a\u5b58\u6863\u6587\u4ef6. \u76ee\u6807\u6587\u4ef6: \u628a f \u6dfb\u52a0\u5230 E, \u4fee\u6539 U \u548c D \u6765\u53cd\u6620 f \u4e2d\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u4f7f\u7528. \u5b58\u6863\u6587\u4ef6: \u94fe\u63a5\u5668\u5c1d\u8bd5\u5339\u914d U \u4e2d\u672a\u89e3\u6790\u7684\u7b26\u53f7\u548c\u7531\u5b58\u6863\u6587\u4ef6\u6210\u5458\u5b9a\u4e49\u7684\u7b26\u53f7. \u5982\u679c\u67d0\u4e2a\u5b58\u6863\u6587\u4ef6\u6210\u5458 m, \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b26\u53f7\u6765\u89e3\u6790 U \u4e2d\u7684\u5f15\u7528(\u5373 m \u5b9a\u4e49\u4e86\u4e00\u4e2a U \u4e2d\u7684\u7b26\u53f7), \u90a3\u4e48\u5c31\u5c06 m \u52a0\u5165\u5230 E \u4e2d, \u5e76\u4e14\u94fe\u63a5\u5668\u4fee\u6539 U \u548c D \u6765\u53cd\u6620 m \u4e2d\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u5f15\u7528. \u5176\u4ed6\u4e0d\u5305\u542b\u5728 E \u4e2d\u7684\u6210\u5458\u5c06\u88ab\u629b\u5f03. \u5982\u679c\u5f53\u94fe\u63a5\u5668\u5b8c\u6210\u5bf9\u6587\u4ef6\u7684\u626b\u63cf\u540e, U \u662f\u975e\u7a7a\u7684, \u90a3\u4e48\u94fe\u63a5\u5668\u5c31\u4f1a\u8f93\u51fa\u4e00\u4e2a\u9519\u8bef\u5e76\u7ec8\u6b62. \u5426\u5219\u5b83\u4f1a\u5408\u5e76\u548c\u91cd\u5b9a\u4f4d E \u4e2d\u7684\u76ee\u6807\u6587\u4ef6, \u6784\u5efa\u8f93\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6. \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5982\u679c\u5b9a\u4e49\u4e00\u4e2a\u7b26\u53f7\u7684\u5e93\u51fa\u73b0\u5728\u5f15\u7528\u8fd9\u4e2a\u7b26\u53f7\u7684\u76ee\u6807\u6587\u4ef6\u4e4b\u524d, \u90a3\u4e48\u5f15\u7528\u662f\u4e0d\u80fd\u88ab\u89e3\u6790\u7684, \u94fe\u63a5\u4f1a\u5931\u8d25. \u5173\u4e8e\u5e93\u7684\u4e00\u822c\u51c6\u5219\u662f \u628a\u5b83\u4eec\u653e\u5728\u547d\u4ee4\u884c\u7684\u7ed3\u5c3e . \u5982\u679c\u5e93\u4e0d\u662f\u76f8\u4e92\u72ec\u7acb\u7684, \u9700\u8981\u5bf9\u4ed6\u4eec\u6392\u5e8f. \u91cd\u5b9a\u4f4d \u00b6 \u5f53\u94fe\u63a5\u5668\u5b8c\u6210\u4e86\u7b26\u53f7\u89e3\u6790, \u5c31\u8981\u5f00\u59cb\u91cd\u5b9a\u4f4d. \u8fd9\u4e2a\u6b65\u9aa4\u4e2d, \u5c06\u5408\u5e76\u8f93\u5165\u6a21\u5757\u5e76\u4e3a\u6bcf\u4e2a\u7b26\u53f7\u5206\u914d\u8fd0\u884c\u65f6\u5730\u5740. \u91cd\u5b9a\u4f4d\u8282\u548c\u7b26\u53f7\u5b9a\u4e49 \u94fe\u63a5\u5668\u5c06\u6240\u6709\u76f8\u540c\u7c7b\u578b\u7684\u8282\u5408\u5e76\u4e3a\u540c\u4e00\u7c7b\u578b\u7684\u805a\u5408\u8282. \u4f8b\u5982\u6765\u81ea\u6240\u6709\u8f93\u5165\u6a21\u5757\u7684 .data \u8282\u88ab\u5168\u90e8\u5408\u5e76\u4e3a\u4e00\u4e2a\u8282, \u8fd9\u4e2a\u8282\u6210\u4e3a\u8f93\u51fa\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684 .data \u8282. \u7136\u540e\u94fe\u63a5\u5668\u5c06\u8fd0\u884c\u65f6\u5185\u5b58\u5730\u5740\u8d4b\u7ed9\u65b0\u7684\u805a\u5408\u8282, \u8d4b\u7ed9\u8f93\u5165\u6a21\u5757\u5b9a\u4e49\u7684\u6bcf\u4e2a\u8282, \u4ee5\u53ca\u8f93\u5165\u6a21\u5757\u5b9a\u4e49\u7684\u6bcf\u4e2a\u7b26\u53f7. \u91cd\u5b9a\u4f4d\u8282\u4e2d\u7684\u7b26\u53f7\u5f15\u7528 \u94fe\u63a5\u5668\u4fee\u6539\u4ee3\u7801\u8282\u548c\u6570\u636e\u8282\u4e2d\u5bf9\u6bcf\u4e2a\u7b26\u53f7\u7684\u5f15\u7528, \u4f7f\u5176\u6307\u5411\u6b63\u786e\u7684\u8fd0\u884c\u65f6\u4f4d\u7f6e. \u91cd\u5b9a\u4f4d\u6761\u76ee \u00b6 \u65e0\u8bba\u4f55\u65f6, \u6c47\u7f16\u5668\u9047\u5230\u5bf9\u6700\u7ec8\u4f4d\u7f6e\u672a\u77e5\u7684\u76ee\u6807\u5f15\u7528, \u5b83\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a\u91cd\u5b9a\u4f4d\u6761\u76ee, \u544a\u8bc9\u94fe\u63a5\u5668\u5728\u5c06\u76ee\u6807\u6587\u4ef6\u5408\u5e76\u6210\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u5982\u4f55\u4fee\u6539\u8fd9\u4e2a\u5f15\u7528. \u4ee3\u7801\u7684\u91cd\u5b9a\u4f4d\u6761\u76ee\u653e\u5728 .rel.text \u4e2d, \u5df2\u521d\u59cb\u5316\u7684\u6570\u636e\u7684\u91cd\u5b9a\u4f4d\u6761\u76ee\u653e\u5728 .rel.data \u4e2d. offset : \u9700\u8981\u88ab\u4fee\u6539\u7684\u5f15\u7528\u7684\u8282\u504f\u79fb symbol : \u88ab\u4fee\u6539\u5f15\u7528\u7684\u7b26\u53f7 type : \u544a\u77e5\u94fe\u63a5\u5668\u5982\u4f55\u4fee\u6539\u65b0\u7684\u5f15\u7528(\u76f8\u5bf9/\u7edd\u5bf9\u5bfb\u5740) addend : \u4e00\u4e2a\u6709\u7b26\u53f7\u5e38\u6570, \u4e00\u4e9b\u7c7b\u578b\u7684\u91cd\u5b9a\u4f4d\u9700\u8981\u4f7f\u7528\u5b83\u5bf9\u4fee\u6539\u5f15\u7528\u7684\u503c\u505a\u504f\u79fb\u8c03\u6574. ELF \u5b9a\u4e49\u4e86\u4e24\u79cd\u57fa\u672c\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b: R_X86_64_PC32 : \u4f7f\u7528 32 \u4f4d PC \u76f8\u5bf9\u5730\u5740\u7684\u5f15\u7528.(\u6ce8\u610f\u4e00\u822c PC \u662f\u4e0b\u4e00\u6761\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740) R_X86_64_32 : \u4f7f\u7528 32 \u4f4d\u7edd\u5bf9\u5730\u5740\u7684\u5f15\u7528. \u91cd\u5b9a\u4f4d\u7b26\u53f7\u5f15\u7528 \u00b6 int sum ( int * a , int n ) //defined in sum.c int array [ 2 ] = { 1 , 2 }; int main () { int val = sum ( array , 2 ); return val ; } \u5176\u53cd\u6c47\u7f16\u4ee3\u7801\u4e3a: \u91cd\u5b9a\u4f4d PC \u76f8\u5bf9\u5f15\u7528 \u8be5\u91cd\u5b9a\u4f4d\u6761\u76ee\u4e3b\u8981\u7528\u6765\u4ea7\u751f 32 \u4f4dPC\u76f8\u5bf9\u5730\u5740\u7684\u5f15\u7528, \u5373\u51fd\u6570\u8c03\u7528\u65f6\u7684\u91cd\u5b9a\u4f4d. \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, main \u8c03\u7528\u51fd\u6570 sum, \u4f46 sum \u51fd\u6570\u662f\u5728 sum.o \u4e2d\u5b9a\u4e49. (\u8d77\u521d call \u540e\u9762\u7684\u6570\u5b57\u662f\u5360\u4f4d\u7b26) \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5176\u91cd\u5b9a\u4f4d\u6761\u76ee: r . offset = 0xf r . symbol = sum r . type = R_X86_64_PC32 r . addend = -4 call \u6307\u4ee4\u5f00\u59cb\u4e8e\u8282\u504f\u79fb 0xe \u7684\u5730\u65b9, \u540c\u65f6 call \u672c\u8eab\u7684\u64cd\u4f5c\u7801 0xe8 \u5360\u4e86\u4e00\u4e2a\u5b57\u8282, \u56e0\u6b64 sum \u7684 offset \u4e3a 0xf. addend\u662f\u56e0\u4e3a, \u5f53\u6211\u4eec\u5728\u6267\u884c\u8fd9\u6761\u6307\u4ee4\u65f6, PC \u5df2\u7ecf\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4(0x13), \u9700\u8981\u901a\u8fc7\u8fd9\u4e2a\u504f\u79fb\u91cf\u6765\u8c03\u6574. \u6211\u4eec\u5047\u8bbe ADDR ( s ) = ADDR (. text ) = 0x4004d0 refaddr = ADDR ( s ) + r . offset = 0x4004d0 + 0xf = 0x4004df \u90a3\u4e48\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230 refptr = s + r . offset //\u5360\u4f4d\u7b26\u7684\u6307\u9488 ADDR ( r . symbol ) = ADDR ( sum ) = 0x4004e8 * refptr = ( unsigned )( ADDR ( s . symbol ) + r . addend - refaddr ) = ( unsigned )( 0x4004e8 + ( -4 ) - 0x4004df ) = ( unsigned ) 0x5 \u4e8e\u662f\u6211\u4eec\u6709 4004de: e8 05 00 00 00 callq 4004e8 <sum> \u91cd\u5b9a\u4f4d\u7edd\u5bf9\u5f15\u7528 \u8be5\u91cd\u5b9a\u4f4d\u6761\u76ee\u4e3b\u8981\u7528\u6765\u4ea7\u751f 32 \u4f4d\u7edd\u5bf9\u5730\u5740\u7684\u5f15\u7528, \u5373\u6570\u7ec4\u7684\u91cd\u5b9a\u4f4d. \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, \u5bf9 array \u7684\u5f15\u7528\u5c31\u4f7f\u7528\u7edd\u5bf9\u5f15\u7528. r . offset = 0xa r . symbol = array r . type = R_X86_64_32 r . addend = 0 \u4e8e\u662f refptr = s + r . offset //\u5360\u4f4d\u7b26\u7684\u6307\u9488 * refptr = ( unsigned )( ADDR ( r . symbol ) + r . addend ) = ( unsigned ) 0x601018 \u6700\u540e\u5f97\u5230 4004d9: bf 18 10 60 00 mov $0x601018, %edi \u52a0\u8f7d\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 \u00b6 \u5f53\u5f97\u5230\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 prog \u540e, \u8f93\u5165 linux> ./prog \u56e0\u4e3a prog \u4e0d\u662f\u4e00\u4e2a\u5185\u7f6e\u7684 shell \u547d\u4ee4, \u6240\u4ee5 shell \u4f1a\u8ba4\u4e3a prog \u662f\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6, \u901a\u8fc7\u8c03\u7528\u67d0\u4e2a\u9a7b\u7559\u5728\u5b58\u50a8\u5668\u4e2d\u88ab\u79f0\u4e3a\u52a0\u8f7d\u5668\u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\u6765\u8fd0\u884c\u5b83. \u52a0\u8f7d\u5668\u5c06\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u4ece\u78c1\u76d8\u590d\u5236\u5230\u5185\u5b58\u4e2d, \u7136\u540e\u901a\u8fc7\u8df3\u8f6c\u5230\u7a0b\u5e8f\u7b2c\u4e00\u6761\u6307\u4ee4\u6216\u5165\u53e3\u70b9\u6765\u8fd0\u884c\u8be5\u7a0b\u5e8f. \u8fd9\u4e2a\u5c06\u7a0b\u5e8f\u590d\u5236\u5230\u5185\u5b58\u5e76\u8fd0\u884c\u7684\u8fc7\u7a0b\u53eb \u52a0\u8f7d . \u5f53\u52a0\u8f7d\u5668\u8fd0\u884c\u65f6, \u5b83\u521b\u5efa\u7c7b\u4f3c\u4e0b\u56fe\u7684\u5185\u5b58\u6620\u50cf. \u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5 : x86-64 \u901a\u5e38\u5c06\u4ee3\u7801\u6bb5\u4fdd\u5b58\u5728 0x400000 \u5904, \u6240\u4ee5\u4f1a\u5c06\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u6620\u5c04\u4e3a\u5982\u4e0a\u5f62\u5f0f. \u6ce8\u610f: \u8fd9\u91cc\u6570\u636e\u6bb5\u4e3a\u4e86\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42, \u4f1a\u548c\u4ee3\u7801\u6bb5\u4e4b\u95f4\u5b58\u5728\u95f4\u9699. \u8fd0\u884c\u65f6\u5806 : \u5728\u6570\u636e\u6bb5\u4e4b\u540e\u4f1a\u6709\u4e00\u4e2a\u8fd0\u884c\u65f6\u5806\uff0c\u662f\u901a\u8fc7\u8c03\u7528 malloc \u5e93\u52a8\u6001\u5f80\u4e0a\u589e\u957f\u7684 \u5171\u4eab\u5e93 : \u5728\u5806\u4e4b\u540e\u662f\u4e00\u4e2a\u5171\u4eab\u5e93\u7684\u5185\u5b58\u6620\u5c04\u533a\u57df \u7528\u6237\u6808 : \u7528\u6237\u6808\u662f\u4ece\u6700\u5927\u7684\u5408\u6cd5\u7528\u6237\u5730\u5740\u5f00\u59cb, \u5411\u8f83\u5c0f\u7684\u5730\u5740\u589e\u957f \u5185\u6838 : \u6700\u4e0a\u65b9\u7684\u662f\u4f4d\u5185\u6838\u4e2d\u7684\u6570\u636e\u548c\u4ee3\u7801\u4fdd\u7559\u7684, \u662f\u64cd\u4f5c\u7cfb\u7edf\u9a7b\u7559\u5728\u5185\u5b58\u7684\u4f4d\u7f6e \u5171\u4eab\u5e93 \u00b6 \u9759\u6001\u5e93\u548c\u6240\u6709\u7684\u8f6f\u4ef6\u4e00\u6837, \u9700\u8981\u5b9a\u671f\u7ef4\u62a4\u548c\u66f4\u65b0. \u6b64\u5916\u51e0\u4e4e\u6bcf\u4e2a C \u7a0b\u5e8f\u90fd\u4f1a\u4f7f\u7528\u6807\u51c6 I/O \u51fd\u6570, \u5728\u8fd0\u884c\u65f6\u8fd9\u4e9b\u51fd\u6570\u88ab\u8d4b\u503c\u5230\u6bcf\u4e2a\u8fd0\u884c\u8fdb\u7a0b\u7684\u6587\u672c\u6bb5\u91cc, \u8fd9\u5bf9\u5185\u5b58\u662f\u6781\u5927\u7684\u6d6a\u8d39. \u5171\u4eab\u5e93(shared library) \u662f\u4e00\u4e2a\u76ee\u6807\u6a21\u5757, \u5728\u8fd0\u884c\u6216\u52a0\u8f7d\u65f6, \u53ef\u4ee5\u52a0\u8f7d\u5230\u4efb\u610f\u7684\u5185\u5b58\u5730\u5740, \u5e76\u548c\u4e00\u4e2a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u94fe\u63a5\u8d77\u6765. \u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u52a8\u6001\u94fe\u63a5 , \u662f\u7531 \u52a8\u6001\u94fe\u63a5\u5668 \u6267\u884c. \u5171\u4eab\u5e93\u4e5f\u88ab\u79f0\u4e3a \u5171\u4eab\u76ee\u6807 , linux \u7cfb\u7edf\u4e2d\u901a\u5e38\u7528 .so \u540e\u7f00\u6765\u8868\u793a. \u52a8\u6001\u94fe\u63a5\u5668\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807, Linux \u4e2d\u4e3a ld-linux.so \u5171\u4eab\u5e93\u4e2d\u7684\"\u5171\u4eab\"\u6709\u4e24\u79cd\u542b\u4e49: \u5728\u4efb\u610f\u6587\u4ef6\u7cfb\u7edf\u4e2d, \u5bf9\u4e8e\u4e00\u4e2a\u5e93\u53ea\u6709\u4e00\u4e2a .so \u6587\u4ef6. \u6240\u6709\u5f15\u7528\u8be5\u5e93\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5171\u4eab\u8fd9\u4e2a .so \u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e, \u800c\u4e0d\u662f\u50cf\u9759\u6001\u5e93\u90a3\u6837\u88ab\u590d\u5236\u548c\u5d4c\u5165\u5230\u5f15\u7528\u5b83\u4eec\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u53bb. \u5728\u5185\u5b58\u4e2d, \u4e00\u4e2a\u5171\u4eab\u5e93\u7684 .text \u8282\u7684\u4e00\u4e2a\u526f\u672c\u53ef\u4ee5\u88ab\u4e0d\u540c\u7684\u6b63\u5728\u8fdb\u884c\u7684\u8fdb\u7a0b\u5171\u4eab. \u52a0\u8f7d\u65f6\u52a8\u6001\u94fe\u63a5 \u00b6 \u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u751f\u6210\u5171\u4eab\u5e93: linux> gcc -shared -fpic -o libvector.so addvec.c multvec.c \u5176\u4e2d -fpic \u9009\u9879\u6307\u793a\u7f16\u8bd1\u5668\u751f\u6210\u4e0e\u4f4d\u7f6e\u65e0\u5173\u7684\u4ee3\u7801, -share \u9009\u9879\u6307\u793a\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u7684\u76ee\u6807\u6587\u4ef6. \u968f\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u8fd0\u7528\u5171\u4eab\u5e93: linux> gcc -o prog21 main2.c ./libvector.so \u7531\u6b64\u521b\u5efa\u4e86\u53ef\u6267\u884c\u6587\u4ef6 prog21. \u5728\u521b\u5efa\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6, \u94fe\u63a5\u5668\u4f1a\u590d\u5236\u5171\u4eab\u5e93\u4e2d\u7684\u91cd\u5b9a\u4f4d .rel \u548c\u7b26\u53f7\u8868 .symtab \u4fe1\u606f, \u4f7f\u5f97\u8fd0\u884c\u65f6\u53ef\u4ee5\u89e3\u6790\u5bf9\u5171\u4eab\u5e93\u4e2d\u4ee3\u7801\u548c\u6570\u636e\u7684\u5f15\u7528\uff0c\u7531\u6b64\u5f97\u5230\u90e8\u5206\u94fe\u63a5\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u6ce8\u610f: \u6b64\u65f6\u6ca1\u6709\u5c06\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u548c\u6570\u636e\u8282\u590d\u5236\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d. \u8c03\u7528\u52a0\u8f7d\u5668\u52a0\u8f7d\u90e8\u5206\u94fe\u63a5\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6, \u52a0\u8f7d\u5668\u4f1a\u5728\u6bb5\u5934\u90e8\u8868\u7684\u5f15\u5bfc\u4e0b, \u5c06\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u6bb5\u548c\u4ee3\u7801\u6bb5\u590d\u5236\u5230\u5bf9\u5e94\u7684\u5185\u5b58\u4f4d\u7f6e. \u52a0\u8f7d\u5668\u53ef\u4ee5\u5728 prog2l \u4e2d\u53d1\u73b0 .interp \u8282\uff0c\u5176\u4e2d\u4fdd\u5b58\u4e86\u52a8\u6001\u94fe\u63a5\u5668\u7684\u8def\u5f84\uff0c\u5219\u52a0\u8f7d\u5668\u4f1a\u52a0\u8f7d\u548c\u8fd0\u884c\u8fd9\u4e2a\u52a8\u6001\u94fe\u63a5\u5668 \u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5c06\u4e0d\u540c\u7684\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u548c\u6570\u636e\u4fdd\u5b58\u5230\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\u4e2d \u52a8\u6001\u94fe\u63a5\u5668\u8fd8\u4f1a\u6839\u636e\u5171\u4eab\u5e93\u5728\u5185\u5b58\u7684\u4f4d\u7f6e, \u6765\u91cd\u5b9a\u4f4d prog2l \u4e2d\u6240\u6709\u5bf9\u5171\u4eab\u5e93\u5b9a\u4e49\u7684\u7b26\u53f7\u7684\u5f15\u7528 \u6700\u540e\u52a0\u8f7d\u5668\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f, \u6b64\u65f6\u5171\u4eab\u5e93\u7684\u4f4d\u7f6e\u5c31\u56fa\u5b9a\u4e86, \u5e76\u5728\u7a0b\u5e8f\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u6539\u53d8. \u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5 \u00b6 #include <dlfcn.h> void * dlopen ( const char * filename , int flag ); dlopen \u51fd\u6570\u52a0\u8f7d\u548c\u94fe\u63a5\u5171\u4eab\u5e93 filename, \u5e76\u8fd4\u56de\u53e5\u67c4\u6307\u9488. \u53c2\u6570 flag \u53ef\u7528\u4e8e\u786e\u5b9a\u5171\u4eab\u5e93\u7684\u89e3\u6790\u65b9\u5f0f\u4ee5\u53ca\u4f5c\u7528\u8303\u56f4: RTLD_NOW : \u94fe\u63a5\u5668\u7acb\u5373\u89e3\u6790\u5bf9\u5916\u90e8\u7b26\u53f7\u7684\u5f15\u7528 RTLD_LAZY : \u94fe\u63a5\u5668\u63a8\u8fdf\u7b26\u53f7\u89e3\u6790\u76f4\u5230\u6267\u884c\u6765\u81ea\u5e93\u4e2d\u7684\u4ee3\u7801 RTLD_GLOBAL : \u5171\u4eab\u5e93\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\u53ef\u88ab\u5176\u540e\u6253\u5f00\u7684\u5176\u4ed6\u5e93\u7528\u4e8e\u7b26\u53f7\u89e3\u6790 RTLD_LOCAL : \u5171\u4eab\u5e93\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\u4e0d\u80fd\u88ab\u5176\u540e\u6253\u5f00\u7684\u5176\u4ed6\u5e93\u7528\u4e8e\u91cd\u5b9a\u4f4d, \u662f\u9ed8\u8ba4\u7684 #include <dlfcn.h> void * dlsym ( void * handle , char * symbol ); dlsym \u51fd\u6570\u8fd4\u56de\u4e4b\u524d\u6253\u5f00\u7684\u5171\u4eab\u5e93\u7684\u53e5\u67c4\u4e2dsymbol\u6307\u5b9a\u7684\u7b26\u53f7\u7684\u5730\u5740. #include <dlfcn.h> void dlclose ( void * handle ); \u7528\u6765\u5173\u95ed\u6253\u5f00\u7684\u5171\u4eab\u5e93\u53e5\u67c4 #include <dlfcn.h> const char * dlerror ( void ); \u5982\u679c dlopen, dlsym \u6216 dlclose \u51fd\u6570\u53d1\u751f\u9519\u8bef, \u5c31\u8fd4\u56de\u5b57\u7b26\u4e32. Example \u8be5\u7a0b\u5e8f\u5c31\u4f1a\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5e93 libvector.so, \u7136\u540e\u8c03\u7528 addvec \u51fd\u6570. linux> gcc -rdynamic -o prog2r dll.c -ldl \u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u7f16\u8bd1. \u5176\u4e2d -rdynamic \u901a\u77e5\u94fe\u63a5\u5668\u5c06\u5168\u90e8\u7b26\u53f7\u52a0\u5165\u5230\u52a8\u6001\u7b26\u53f7\u8868\u4e2d, \u5c31\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 dlopen \u6765\u5b9e\u73b0\u5411\u540e\u8ddf\u8e2a, -ldl \u8868\u793a\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f1a\u52a8\u6001\u52a0\u8f7d\u5171\u4eab\u5e93. \u4f4d\u7f6e\u65e0\u5173\u4ee3\u7801 \u00b6 \u5f53\u94fe\u63a5\u5668\u4ea7\u751f\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u5df2\u4e3a\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8282\u548c\u7b26\u53f7\u5206\u914d\u597d\u4e86\u5185\u5b58\u5730\u5740\uff0c\u5982\u679c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u6709\u5f15\u7528\u5171\u4eab\u5e93\u4e2d\u7684\u7b26\u53f7\u65f6\uff0c\u5c31\u9700\u8981\u5047\u8bbe\u5171\u4eab\u5e93\u7b26\u53f7\u7684\u5730\u5740\u3002\u8f83\u65e9\u5b58\u5728 \u9759\u6001\u5171\u4eab\u5e93(Static Shared Library) \u65b9\u6cd5\uff0c\u5373\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5728\u67d0\u4e2a\u7279\u5b9a\u7684\u5730\u5740\u4e2d\u5212\u5206\u4e00\u90e8\u5206\uff0c\u4e3a\u5df2\u77e5\u7684\u5171\u4eab\u5e93\u9884\u7559\u7a7a\u95f4\uff0c\u5219\u5171\u4eab\u5e93\u4f1a\u88ab\u52a0\u8f7d\u5230\u5bf9\u5e94\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u800c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5c31\u53ef\u4ee5\u5728\u5bf9\u5e94\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u627e\u5230\u60f3\u8981\u7684\u5171\u4eab\u5e93\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u4f1a\u9020\u6210\u5730\u5740\u51b2\u7a81\uff0c\u5e76\u9020\u6210\u5730\u5740\u7a7a\u95f4\u7684\u6d6a\u8d39\uff0c\u4ee5\u53ca\u7ef4\u62a4\u7684\u56f0\u96be. \u6240\u4ee5\u5c31\u60f3\u80fd\u5426\u5c06\u5171\u4eab\u5e93\u52a0\u8f7d\u5230\u4efb\u610f\u7684\u5185\u5b58\u4f4d\u7f6e\uff0c\u8fd8\u80fd\u4f7f\u5f97\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u80fd\u627e\u5230\u3002\u7c7b\u4f3c\u4e8e\u4f7f\u7528\u9759\u6001\u5e93\u65f6\uff0c\u94fe\u63a5\u5668\u4f1a\u6839\u636e\u91cd\u5b9a\u4f4d\u8868\u548c\u5206\u914d\u597d\u7684\u5185\u5b58\u5730\u5740\u6765\u66ff\u6362\u7f16\u8bd1\u65f6\u672a\u77e5\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528 \u52a0\u8f7d\u65f6\u91cd\u5b9a\u4f4d(Load Time Relocation) \u65b9\u6cd5\uff0c\u7531\u4e8e\u7f16\u8bd1\u3001\u6c47\u7f16\u548c\u94fe\u63a5\u65f6\u5bf9\u5171\u4eab\u5e93\u5728\u5185\u5b58\u7684\u4f4d\u7f6e\u662f\u672a\u77e5\u7684\uff0c\u6240\u4ee5\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5bf9\u5171\u4eab\u5e93\u7684\u7b26\u53f7\u7684\u5f15\u7528\u4e5f\u7528\u5360\u4f4d\u7b26\u4ee3\u66ff\uff0c\u5f53\u52a0\u8f7d\u5668\u52a0\u8f7d\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u52a0\u8f7d\u65f6\uff0c\u4f1a\u8c03\u7528\u52a8\u6001\u94fe\u63a5\u52a0\u8f7d\u5668\u5c06\u5171\u4eab\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u6b64\u65f6\u5c31\u80fd\u6839\u636e\u5171\u4eab\u5e93\u88ab\u52a0\u8f7d\u7684\u5185\u5b58\u5730\u5740\uff0c\u5bf9\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u5360\u4f4d\u7b26\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u4f1a\u5bf9\u5171\u4eab\u5e93\u4e2d\u7684\u6307\u4ee4\u8fdb\u884c\u4fee\u6539\uff0c\u7531\u4e8e\u6307\u4ee4\u88ab\u91cd\u5b9a\u4f4d\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\u662f\u4e0d\u540c\u7684\uff0c\u6240\u4ee5\u8be5\u5171\u4eab\u5e93\u65e0\u6cd5\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e2d\u5171\u4eab\u3002\u4f46\u662f\u5171\u4eab\u5e93\u4e2d\u7684\u6570\u636e\u90e8\u5206\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e2d\u662f\u6709\u81ea\u5df1\u5907\u4efd\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u8be5\u65b9\u6cd5\u6765\u89e3\u51b3. \u6211\u4eec\u7684\u76ee\u7684\u5176\u5b9e\u5c31\u662f\u5e0c\u671b\u5171\u4eab\u7684\u6307\u4ee4\u90e8\u5206\u5728\u88c5\u8f7d\u65f6\u4e0d\u9700\u8981\u56e0\u4e3a\u88c5\u8f7d\u5730\u5740\u7684\u6539\u53d8\u800c\u6539\u53d8\uff0c\u6240\u4ee5\u5b9e\u73b0\u7684\u57fa\u672c\u60f3\u6cd5\u5c31\u662f\u628a\u6307\u4ee4\u4e2d\u90a3\u4e9b\u9700\u8981\u88ab\u4fee\u6539\u7684\u90e8\u5206\u5206\u79bb\u51fa\u6765\uff0c\u8ddf\u6570\u636e\u90e8\u5206\u653e\u5728\u4e00\u8d77\uff0c\u8fd9\u6837\u6307\u4ee4\u90e8\u5206\u5c31\u53ef\u4ee5\u4fdd\u6301\u4e0d\u53d8\uff0c\u800c\u6570\u636e\u90e8\u5206\u53ef\u4ee5\u5728\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u62e5\u6709\u4e00\u4e2a\u526f\u672c\u3002\u8fd9\u79cd\u65b9\u6848\u5c31\u662f\u76ee\u524d\u88ab\u79f0\u4e3a \u5730\u5740\u65e0\u5173\u4ee3\u7801(PC, Position-independent Code) \u7684\u6280\u672f. PIC \u6570\u636e\u5f15\u7528 \u00b6 \u5f53\u4f60\u5728\u4ee3\u7801\u4e2d\u8c03\u7528\u5171\u4eab\u5e93\u4e2d\u7684\u51fd\u6570\u6216\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u3001\u6c47\u7f16\u5668\u4ee5\u53ca\u94fe\u63a5\u5668\u5e76\u4e0d\u77e5\u9053\u8be5\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff0c\u53ea\u6709\u5f53\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u52a0\u8f7d\u65f6\u6216\u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5e93\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u5171\u4eab\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u65f6\uff0c\u624d\u77e5\u9053\u5171\u4eab\u5e93\u4e2d\u7684\u5730\u5740. \u4f46\u662f\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u6bb5\u662f\u4e0d\u53ef\u5199\u7684\uff0c\u6240\u4ee5\u65e0\u6cd5\u901a\u8fc7\u52a8\u6001\u94fe\u63a5\u5668\u5bf9\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u5176\u6307\u5411\u5171\u4eab\u5e93\u7684\u51fd\u6570\u6216\u53d8\u91cf\u7684\u5730\u5740\uff1b\u5176\u6b21\uff0c\u6bd4\u5982\u52a8\u6001\u5e93A\u7684\u51fd\u6570\u8c03\u7528\u4e86\u52a8\u6001\u5e93glibc.so\u4e2d\u5b9a\u4e49\u7684printf\u51fd\u6570\u65f6\uff0c\u53ea\u6709\u5728\u52a8\u6001\u94fe\u63a5\u5668\u52a0\u8f7d\u4e86glibc.so\u65f6\uff0c\u52a8\u6001\u5e93A\u624d\u80fd\u77e5\u9053printf\u51fd\u6570\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff0c\u4f46\u662f\u6211\u4eec\u4e5f\u4e0d\u80fd\u5bf9\u52a8\u6001\u5e93A\u7684\u4ee3\u7801\u6bb5\u8fdb\u884c\u4fee\u6539\uff0c\u5426\u5219\u52a8\u6001\u5e93A\u5c31\u65e0\u6cd5\u5728\u5404\u4e2a\u8fdb\u7a0b\u4e2d\u5171\u4eab\u4e86. \u6211\u4eec\u5728\u6570\u636e\u6bb5\u7684\u5f00\u59cb\u7684\u5730\u65b9\u521b\u5efa\u4e86 \u5168\u5c40\u504f\u79fb\u91cf\u8868(Global Offset Table, GOT) . \u5728 GOT \u4e2d, \u6bcf\u4e2a\u88ab\u8fd9\u4e2a\u76ee\u6807\u6a21\u5757\u5f15\u7528\u7684\u5168\u5c40\u6570\u636e\u76ee\u6807(\u8fc7\u7a0b\u6216\u5168\u5c40\u53d8\u91cf)\u90fd\u4f1a\u6709\u4e00\u4e2a 8 \u5b57\u8282\u6761\u76ee. \u7f16\u8bd1\u5668\u8fd8\u4e3a\u5176\u4e2d\u6bcf\u4e2a\u6761\u76ee\u90fd\u751f\u6210\u4e86\u4e00\u4e2a\u91cd\u5b9a\u4f4d\u8bb0\u5f55, \u5728\u52a0\u8f7d\u65f6\u91cd\u5b9a\u4f4d GOT \u4e2d\u6bcf\u4e2a\u6761\u76ee, \u4f7f\u5f97\u5b83\u5305\u542b\u76ee\u6807\u7684\u6b63\u786e\u7684\u7edd\u5bf9\u5730\u5740. GOT \u7684\u8bbe\u8ba1\u5229\u7528\u4e86\u4e00\u4e2a\u4e8b\u5b9e: \u6570\u636e\u6bb5\u4e0e\u4ee3\u7801\u6bb5\u7684\u8ddd\u79bb\u603b\u662f\u4e0d\u53d8\u7684 . \u56e0\u6b64\u4ee3\u7801\u6bb5\u4e2d\u7684\u4efb\u610f\u6307\u4ee4\u5475\u6570\u636e\u6bb5\u4e2d\u4efb\u4f55\u53d8\u91cf\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u662f\u4e00\u4e2a\u8fd0\u884c\u65f6\u5e38\u91cf. Example PIC \u51fd\u6570\u8c03\u7528 \u00b6 \u5047\u8bbe\u7a0b\u5e8f\u8c03\u7528\u4e00\u4e2a\u7531\u5171\u4eab\u5e93\u5b9a\u4e49\u7684\u51fd\u6570, \u7f16\u8bd1\u5668\u6ca1\u6cd5\u6b63\u786e\u9884\u6d4b\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u5730\u5740. \u4e8e\u662f\u5b83\u751f\u6210\u4e00\u6761\u91cd\u5b9a\u4f4d\u8bb0\u5f55, \u7136\u540e\u52a8\u6001\u94fe\u63a5\u5668\u5728\u7a0b\u5e8f\u52a0\u8f7d\u65f6\u518d\u89e3\u6790\u5b83. GNU \u7f16\u8bd1\u7cfb\u7edf\u4f7f\u7528\u4e86 \u5ef6\u8fdf\u7ed1\u5b9a(lazy bindng) , \u5c06\u8fc7\u7a0b\u5730\u5740\u7684\u7ed1\u5b9a\u5ef6\u8fdf\u5230\u4e86\u7b2c\u4e00\u6b21\u8c03\u7528\u8be5\u8fc7\u7a0b\u7684\u65f6\u5019. \u6211\u4eec\u91c7\u7528 GOT \u548c \u8fc7\u7a0b\u94fe\u63a5\u8868(Procedure Linkage Table, PLT) \u7684\u65b9\u6cd5, \u5982\u679c\u4e00\u4e2a\u76ee\u6807\u6a21\u5757\u8c03\u7528\u5b9a\u4e49\u5728\u5171\u4eab\u5e93\u4e2d\u7684\u4efb\u4f55\u51fd\u6570, \u90a3\u4e48\u5b83\u5c31\u6709\u81ea\u5df1\u7684 GOT \u548c PLT. PLT : PLT \u662f\u4e00\u4e2a\u6570\u7ec4, \u5176\u4e2d\u6bcf\u4e2a\u6761\u76ee\u90fd\u662f 16 \u5b57\u8282\u4ee3\u7801. PLT[0] \u662f\u4e00\u4e2a\u7279\u6b8a\u6761\u76ee, \u5b83\u8df3\u8f6c\u5230\u52a8\u6001\u94fe\u63a5\u5668\u4e2d. PLT[1] \u8c03\u7528\u7cfb\u7edf\u542f\u52a8\u51fd\u6570\u521d\u59cb\u5316\u6267\u884c\u73af\u5883, \u5176\u4ed6\u6761\u76ee\u8c03\u7528\u7528\u6237\u4ee3\u7801\u8c03\u7528\u7684\u51fd\u6570. GOT : GOT \u662f\u4e00\u4e2a\u6570\u7ec4, \u6bcf\u4e2a\u6761\u76ee\u90fd\u662f 8 \u5b57\u8282\u5730\u5740. GOT[0] \u548c [1] \u662f\u5305\u542b\u52a8\u6001\u94fe\u63a5\u5668\u5728\u89e3\u6790\u51fd\u6570\u5730\u5740\u65f6\u4f1a\u4f7f\u7528\u7684\u4fe1\u606f, GOT[2] \u662f\u52a8\u6001\u94fe\u63a5\u5668\u5728 ld-linux.so \u6a21\u5757\u4e2d\u7684\u5165\u53e3, \u5176\u4f59\u6bcf\u4e2a\u6761\u76ee\u5bf9\u5e94\u4e00\u4e2a\u88ab\u8c03\u7528\u7684\u51fd\u6570. Example \u5e93\u6253\u6869 \u00b6 \u5e93\u6253\u6869(library interpositioning) , \u5141\u8bb8\u622a\u83b7\u5bf9\u5171\u4eab\u5e93\u51fd\u6570\u7684\u8c03\u7528, \u53d6\u800c\u4ee3\u4e4b\u6267\u884c\u81ea\u5df1\u7684\u4ee3\u7801. \u4f7f\u7528\u6253\u6869\u673a\u5236, \u6211\u4eec\u53ef\u4ee5\u8ffd\u8e2a\u5bf9\u67d0\u4e2a\u7279\u6b8a\u5e93\u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570, \u9a8c\u8bc1\u548c\u8ffd\u8e2a\u5b83\u7684\u8f93\u5165\u548c\u8f93\u51fa\u503c, \u6216\u8005\u751a\u81f3\u628a\u5b83\u66ff\u6362\u6210\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u5b9e\u73b0. \u57fa\u672c\u601d\u60f3: \u7ed9\u5b9a\u4e00\u4e2a\u9700\u8981\u6253\u6869\u7684\u76ee\u6807\u51fd\u6570, \u521b\u5efa\u4e00\u4e2a\u5305\u88c5\u51fd\u6570, \u5b83\u7684\u539f\u578b\u4e0e\u76ee\u6807\u51fd\u6570\u5b8c\u5168\u4e00\u6837. \u4f7f\u7528\u67d0\u79cd\u7279\u6b8a\u6253\u6869\u673a\u5236, \u4f60\u5c31\u53ef\u4ee5\u6b3a\u9a97\u7cfb\u7edf\u8c03\u7528\u5305\u88c5\u51fd\u6570\u800c\u4e0d\u662f\u76ee\u6807\u51fd\u6570\u4e86. \u7f16\u8bd1\u65f6\u6253\u6869 \u00b6 \u6211\u4eec\u8fd9\u6837\u7f16\u8bd1\u548c\u94fe\u63a5: linux> gcc -DCOMPILETIME -c mymalloc.c linux> gcc -I. -o intc int.c mymalloc.c \u7531\u4e8e\u6709 -I. \u53c2\u6570, \u6240\u4ee5\u4f1a\u8fdb\u884c\u6253\u6869. \u5b83\u544a\u8bc9 C \u9884\u5904\u7406\u5668\u5728\u641c\u7d22\u901a\u5e38\u7684\u7cfb\u7edf\u76ee\u5f55\u4e4b\u524d\u5148\u5728\u5f53\u524d\u76ee\u5f55\u67e5\u627e malloc.h. \u94fe\u63a5\u65f6\u6253\u6869 \u00b6 Linux \u9759\u6001\u94fe\u63a5\u5668\u652f\u6301\u7528 --wrap f \u6807\u5fd7\u8fdb\u884c\u94fe\u63a5\u65f6\u6253\u6869. \u8fd9\u4e2a\u7b26\u53f7\u544a\u8bc9\u94fe\u63a5\u5668\u628a\u7b26\u53f7 f \u7684\u5f15\u7528\u89e3\u6790\u6210 __wrap_f(\u524d\u7f00\u4e24\u4e2a\u4e0b\u5212\u7ebf), \u8fd8\u8981\u628a\u5bf9\u7b26\u53f7 __real_f \u7684\u5f15\u7528\u89e3\u6790\u4e3a f. \u7528\u4e0b\u8ff0\u65b9\u6cd5\u7f16\u8bd1: linux> gcc -DLINKTIME -c mymalloc.c linux> gcc -c int.c \u7136\u540e\u94fe\u63a5: linux> gcc -W1,--wrap,malloc -W1,--wrap,free -o int1 int.o mymalloc.i -W1,option \u6807\u5fd7\u628a option \u4f20\u9012\u7ed9\u94fe\u63a5\u5668. option \u4e2d\u6bcf\u4e2a\u90fd\u8981\u66ff\u6362\u4e3a\u4e00\u4e2a\u7a7a\u683c, \u56e0\u6b64 -W1,--wrap,malloc \u5c31\u628a --wrap malloc \u4f20\u9012\u7ed9\u94fe\u63a5\u5668. \u8fd0\u884c\u65f6\u6253\u6869 \u00b6 \u5982\u679c LD_PRELOAD \u73af\u5883\u53d8\u91cf\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5171\u4eab\u5e93\u8def\u5f84\u540d\u7684\u5217\u8868(\u4ee5\u7a7a\u683c\u6216\u5206\u53f7\u5206\u9694), \u90a3\u4e48\u5f53\u4f60\u52a0\u8f7d\u548c\u6267\u884c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u89e3\u6790\u672a\u5b9a\u4e49\u7684\u5f15\u7528\u65f6, \u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u5148\u641c\u7d22 LD_PRELOAD \u5171\u4eab\u5e93, \u7136\u540e\u624d\u641c\u7d22\u4efb\u4f55\u5176\u4ed6\u7684\u5e93. \u7f16\u8bd1: linux> gcc -DRUNTIME -shared -fpic -o mymalloc.so mymalloc.c -ldl linux> gcc -o intr int.c \u5f53\u8fd0\u884c\u65f6, linux> LD_PRELOAD=\"./mymalloc.so\" ./intr \u5c31\u5b9e\u73b0\u4e86\u6253\u6869.","title":"\u94fe\u63a5"},{"location":"CSAPP/7/#_1","text":"\u94fe\u63a5(linking) \u662f\u5c06\u5404\u79cd\u4ee3\u7801\u548c\u6570\u636e\u7247\u6bb5\u6536\u96c6\u5e76\u7ec4\u5408\u6210\u4e3a\u4e00\u4e2a\u5355\u4e00\u6587\u4ef6\u7684\u8fc7\u7a0b, \u8fd9\u4e2a\u6587\u4ef6\u53ef\u88ab\u52a0\u8f7d(\u590d\u5236)\u5230\u5185\u5b58\u5e76\u6267\u884c. \u94fe\u63a5\u53ef\u88ab\u6267\u884c\u4e8e\u4e09\u4e2a\u9636\u6bb5: \u7f16\u8bd1\u65f6 : \u5728\u6e90\u4ee3\u7801\u7ffb\u8bd1\u6210\u673a\u5668\u4ee3\u7801\u65f6\u7684\u4f20\u7edf\u9759\u6001\u94fe\u63a5. \u52a0\u8f7d\u65f6 : \u5728\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u5668\u52a0\u8f7d\u5230\u5185\u5b58\u5e76\u6267\u884c\u65f6\u7684\u52a8\u6001\u94fe\u63a5. \u8fd0\u884c\u65f6 : \u7531\u5e94\u7528\u7a0b\u5e8f\u6765\u6267\u884c\u7684\u52a8\u6001\u94fe\u63a5. \u94fe\u63a5\u662f\u7531 \u94fe\u63a5\u5668(linker) \u7a0b\u5e8f\u81ea\u52a8\u6267\u884c, \u94fe\u63a5\u7684\u5b58\u5728\u4f7f\u5f97 \u5206\u79bb\u7f16\u8bd1 \u6210\u4e3a\u53ef\u80fd, \u4e00\u4e2a\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u5c0f\u7684\u6a21\u5757, \u53ea\u9700\u8981\u5bf9\u8fd9\u4e9b\u6a21\u5757\u8fdb\u884c\u4fee\u6539\u7f16\u8bd1, \u7136\u540e\u901a\u8fc7\u94fe\u63a5\u5668\u5c06\u5176\u7ec4\u5408\u6210\u5927\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5c31\u884c.","title":"\u94fe\u63a5"},{"location":"CSAPP/7/#_2","text":"","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"CSAPP/7/#_3","text":"\u5927\u591a\u6570\u7f16\u8bd1\u7cfb\u7edf\u63d0\u4f9b \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f(compiler driver) , \u5b83\u4ee3\u8868\u7528\u6237\u5728\u9700\u8981\u65f6\u8c03\u7528\u8bed\u8a00\u5904\u7406\u5668, \u7f16\u8bd1\u5668, \u6c47\u7f16\u5668\u548c\u94fe\u63a5\u5668. \u6b64\u65f6\u6211\u4eec\u8f93\u5165 linux> gcc -Og -o prog main.c sum.c GCC\u9a71\u52a8\u7a0b\u5e8f \u9996\u5148\u8fd0\u884c C \u9884\u5904\u7406\u5668(cpp), \u5c06 C \u7684\u6e90\u7a0b\u5e8f main.c \u7ffb\u8bd1\u6210\u4e00\u4e2a ASCII \u7801\u7684\u4e2d\u95f4\u6587\u4ef6 main.i cpp [other argument] main.c /tmp/main.i \u7136\u540e\u8fd0\u884c C \u7f16\u8bd1\u5668(ccl), \u5c06 main.i \u7ffb\u8bd1\u6210\u4e00\u4e2a ASCII \u6c47\u7f16\u8bed\u8a00\u6587\u4ef6 main.s ccl /tmp/main.i -Og [other argument] -o /tmp/main.s \u8fd0\u884c\u6c47\u7f16\u5668(as), \u5b83\u5c06 main.s \u7ffb\u8bd1\u6210\u4e00\u4e2a \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 main.o as [other argument] -o /tmp/main.o /tmp/main.s \u5bf9 sum.c \u7ecf\u8fc7\u76f8\u540c\u7684\u8fc7\u7a0b\u751f\u6210 sum.o \u8fd0\u884c\u94fe\u63a5\u5668\u7a0b\u5e8f ld, \u5c06 main.o \u548c sum.o \u4ee5\u53ca\u4e00\u4e9b\u5fc5\u8981\u7684\u7cfb\u7edf\u76ee\u6807\u6587\u4ef6\u7ec4\u5408\u8d77\u6765, \u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 prog. ld -o prog [system object files and args] /tmp/main.o /tmp/sum.o shell \u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684 \u52a0\u8f7d\u5668 , \u5c06\u53ef\u6267\u884c\u6587\u4ef6 prog \u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u590d\u5236\u5230\u5185\u5b58, \u7136\u540e\u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u5f00\u5934. linux> ./prog","title":"\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f"},{"location":"CSAPP/7/#_4","text":"\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 : \u5305\u542b\u4e8c\u8fdb\u5236\u4ee3\u7801\u548c\u6570\u636e, \u5176\u5f62\u5f0f\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u4e0e\u5176\u4ed6\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u5408\u5e76\u8d77\u6765, \u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u5171\u4eab\u76ee\u6807\u6587\u4ef6 : \u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6, \u53ef\u4ee5\u5728\u52a0\u8f7d\u6216\u8fd0\u884c\u65f6\u88ab\u52a8\u6001\u5730\u52a0\u8f7d\u8fdb\u5185\u5b58\u5e76\u94fe\u63a5. \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 : \u5305\u542b\u4e8c\u8fdb\u5236\u4ee3\u7801\u548c\u6570\u636e, \u5176\u5f62\u5f0f\u53ef\u4ee5\u88ab\u76f4\u63a5\u590d\u5236\u5230\u5185\u5b58\u5e76\u6267\u884c. \u7f16\u8bd1\u5668\u548c\u6c47\u7f16\u5668\u751f\u6210\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6(\u5305\u62ec\u5171\u4eab\u76ee\u6807\u6587\u4ef6), \u94fe\u63a5\u5668\u751f\u6210\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u4e00\u4e2a\u76ee\u6807\u6a21\u5757\u5c31\u662f\u4e00\u4e2a\u5b57\u8282\u5e8f\u5217, \u800c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u662f\u4e00\u4e2a\u4ee5\u6587\u4ef6\u5f62\u5f0f\u5b58\u653e\u5728\u78c1\u76d8\u7684\u76ee\u6807\u6a21\u5757. \u73b0\u4ee3 x86-64 Linux \u548c Unix \u7cfb\u7edf\u4f7f\u7528 \u53ef\u6267\u884c\u53ef\u94fe\u63a5\u683c\u5f0f(Executable and Linkable Format, ELF) .","title":"\u76ee\u6807\u6587\u4ef6"},{"location":"CSAPP/7/#_5","text":"ELF \u5934(header)\u4ee5\u4e00\u4e2a 16 \u5b57\u8282\u7684\u5e8f\u5217\u5f00\u59cb, \u8fd9\u4e2a\u5e8f\u5217\u63cf\u8ff0\u4e86\u751f\u6210\u8be5\u6587\u4ef6\u7684\u7cfb\u7edf\u7684\u5b57\u7684\u5927\u5c0f\u548c\u5b57\u8282\u987a\u5e8f. \u8fd8\u5305\u62ec\u4e86\u5e2e\u52a9\u94fe\u63a5\u5668\u8bed\u6cd5\u5206\u6790\u548c\u89e3\u91ca\u76ee\u6807\u6587\u4ef6\u7684\u4fe1\u606f, \u5982 ELF \u5934\u7684\u5927\u5c0f, \u76ee\u6807\u6587\u4ef6\u7684\u7c7b\u578b, \u673a\u5668\u7c7b\u578b(\u5982 x86-64), \u8282\u5934\u90e8\u8868 \u7684\u6587\u4ef6\u504f\u79fb, \u8282\u5934\u90e8\u8868\u4e2d\u6761\u76ee\u7684\u5927\u5c0f\u548c\u6570\u91cf. \u8282\u5934\u90e8\u8868(section header table) : \u63cf\u8ff0\u4e86\u4e0d\u540c\u8282\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f, \u76ee\u6807\u6587\u4ef6\u4e2d\u6bcf\u4e2a\u8282\u90fd\u6709\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u6761\u76ee\u5728\u8868\u4e2d. .text : \u5df2\u7f16\u8bd1\u7a0b\u5e8f\u7684\u673a\u5668\u4ee3\u7801 .rodata : \u53ea\u8bfb\u6570\u636e. \u5982\u8df3\u8f6c\u8868, printf \u4e2d\u7684\u683c\u5f0f\u4e32. .data : \u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u548c\u9759\u6001 C \u53d8\u91cf. .bss : \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u548c\u9759\u6001 C \u53d8\u91cf, \u4ee5\u53ca\u6240\u6709\u88ab\u521d\u59cb\u5316\u4e3a 0 \u7684\u5168\u5c40\u6216\u9759\u6001\u53d8\u91cf. \u76ee\u6807\u6587\u4ef6\u4e2d\u8fd9\u4e2a\u8282\u4e0d\u5360\u636e\u5b9e\u9645\u7a7a\u95f4, \u4ec5\u662f\u4e00\u4e2a\u5360\u4f4d\u7b26. \u533a\u5206\u5df2\u521d\u59cb\u5316\u548c\u672a\u521d\u59cb\u5316\u53d8\u91cf, \u662f\u56e0\u4e3a\u5728\u76ee\u6807\u6587\u4ef6\u4e2d, \u672a\u521d\u59cb\u5316\u53d8\u91cf\u4e0d\u9700\u8981\u5360\u636e\u4efb\u4f55\u5b9e\u9645\u7684\u78c1\u76d8\u7a7a\u95f4, \u8fd0\u884c\u65f6\u518d\u5728\u5185\u5b58\u4e2d\u5206\u914d\u8fd9\u4e9b\u53d8\u91cf, \u521d\u59cb\u503c\u4e3a0. \u5c40\u90e8 C \u53d8\u91cf\u5728\u8fd0\u884c\u65f6\u53ea\u4fdd\u5b58\u5728\u6808\u4e2d, \u4e0d\u51fa\u73b0\u5728 .data \u548c .bss \u4e2d. .symtab : \u4e00\u4e2a\u7b26\u53f7\u8868, \u5b83\u5b58\u653e\u5728\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u548c\u5f15\u7528\u7684\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\u7684\u4fe1\u606f. \u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u5728 .symtab \u90fd\u6709\u4e00\u5f20\u7b26\u53f7\u8868. \u4e0d\u5305\u542b\u5c40\u90e8\u53d8\u91cf\u7684\u6761\u76ee. .rel.text : .text \u8282\u7684\u91cd\u5b9a\u4f4d\u4fe1\u606f, \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u9700\u8981\u4fee\u6539\u7684\u6307\u4ee4\u5730\u5740 .rel.data : .data \u8282\u7684\u91cd\u5b9a\u4f4d\u4fe1\u606f, \u5408\u5e76\u540e\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u9700\u8981\u4fee\u6539\u7684\u6307\u9488\u6570\u636e\u7684\u5730\u5740 \u4e00\u822c\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf, \u5982\u679c\u521d\u59cb\u503c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u5730\u5740\u6216\u5916\u90e8\u5b9a\u4e49\u51fd\u6570\u7684\u5730\u5740, \u5c31\u9700\u8981\u88ab\u4fee\u6539. \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5df2\u5b8c\u6210\u91cd\u5b9a\u4f4d, \u5c31\u4e0d\u9700\u8981 .rel.text \u548c .rel.data \u6570\u636e\u8282. .debug : \u8c03\u8bd5\u7b26\u53f7\u8868, \u6761\u76ee\u662f\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u548c\u7c7b\u578b\u5b9a\u4e49, \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u548c\u5f15\u7528\u7684\u5168\u5c40\u53d8\u91cf, \u4ee5\u53ca\u539f\u59cb\u7684 C \u6e90\u6587\u4ef6. .line : \u539f\u59cb C \u6e90\u7a0b\u5e8f\u4e2d\u7684\u884c\u53f7\u548c .text \u8282\u4e2d\u673a\u5668\u6307\u4ee4\u4e4b\u95f4\u7684\u6620\u5c04. \u6ce8\u610f: \u53ea\u6709\u4ee5 -g \u9009\u9879\u8c03\u7528\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\uff0c\u624d\u4f1a\u51fa\u73b0 .debug \u548c .line .strtab \uff1a \u5b57\u7b26\u4e32\u8868, \u5305\u62ec .symtab \u548c .debug \u8282\u4e2d\u7684\u7b26\u53f7\u8868, \u4ee5\u53ca\u8282\u5934\u90e8\u4e2d\u7684\u8282\u540d\u5b57","title":"\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6"},{"location":"CSAPP/7/#_6","text":"ELF \u5934\u63cf\u8ff0\u6587\u4ef6\u7684\u603b\u4f53\u683c\u5f0f, \u8fd8\u5305\u62ec\u7a0b\u5e8f\u7684 \u5165\u53e3\u70b9(entry point) , \u5373\u7a0b\u5e8f\u6267\u884c\u65f6\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740. .init \u8282\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5c0f\u51fd\u6570 _init , \u7a0b\u5e8f\u7684\u521d\u59cb\u5316\u4ee3\u7801\u4f1a\u8c03\u7528\u5b83. \u56e0\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u662f \u5b8c\u5168\u94fe\u63a5\u7684(\u5df2\u88ab\u91cd\u5b9a\u4f4d) , \u56e0\u6b64\u5b83\u4e0d\u9700\u8981 rel \u8282. \u7a0b\u5e8f\u5934\u90e8\u8868 \u63cf\u8ff0\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u8fde\u7eed\u7684\u7247\u88ab\u6620\u5c04\u5230\u8fde\u7eed\u7684\u5185\u5b58\u6bb5\u7684\u6620\u5c04\u5173\u7cfb. off \u662f\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u504f\u79fb, \u8868\u793a\u8981\u4ece\u76ee\u6807\u6587\u4ef6\u7684\u4ec0\u4e48\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u8be5\u6bb5 vaddr/paddr \u662f\u5185\u5b58\u5730\u5740, \u8868\u793a\u8981\u5c06\u8be5\u6bb5\u52a0\u8f7d\u5230\u7684\u5185\u5b58\u5730\u5740 align \u662f\u5bf9\u9f50\u8981\u6c42 filesz \u662f\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6bb5\u5927\u5c0f, \u5219\u901a\u8fc7 off \u548c filesz \u5c31\u80fd\u786e\u5b9a\u6211\u4eec\u8981\u52a0\u8f7d\u7684\u6bb5\u7684\u5185\u5bb9 memsz \u662f\u5185\u5b58\u4e2d\u7684\u6bb5\u5927\u5c0f, \u8868\u793a\u6211\u4eec\u5c06\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u8be5\u6bb5\u52a0\u8f7d\u5230\u591a\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d flags \u8868\u793a\u8be5\u6bb5\u8fd0\u884c\u65f6\u7684\u8bbf\u95ee\u6743\u9650 \u5bf9\u4efb\u4f55\u6bb5 s, \u94fe\u63a5\u5668\u5fc5\u987b\u9009\u62e9\u4e00\u4e2a\u8d77\u59cb\u5730\u5740 vaddr, \u4f7f\u5f97 vaddr mod aligh = off mod align. \u8fd9\u79cd\u5bf9\u9f50\u662f\u4e00\u79cd\u4f18\u5316, \u4f7f\u5f97\u5f53\u7a0b\u5e8f\u6267\u884c\u65f6, \u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6bb5\u80fd\u6709\u6548\u7387\u5730\u4f20\u9001\u5230\u5185\u5b58\u4e2d.","title":"\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6"},{"location":"CSAPP/7/#_7","text":"\u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6a21\u5757 m \u90fd\u6709\u4e00\u4e2a\u7b26\u53f7\u8868. \u5b83\u5305\u542b m \u5b9a\u4e49\u548c\u5f15\u7528\u7684\u7b26\u53f7\u7684\u97f3\u7cfb. \u5168\u5c40\u94fe\u63a5\u5668\u7b26\u53f7 : \u7531\u6a21\u5757 m \u5b9a\u4e49\u5e76\u80fd\u88ab\u5176\u4ed6\u6a21\u5757\u5f15\u7528\u7684\u5168\u5c40\u7b26\u53f7. \u5bf9\u5e94\u975e\u9759\u6001\u7684 C \u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf. \u5916\u90e8\u7b26\u53f7 : \u7531\u5176\u4ed6\u6a21\u5757\u5b9a\u4e49\u5e76\u88ab m \u6a21\u5757\u5f15\u7528\u7684\u5168\u5c40\u7b26\u53f7. \u5bf9\u5e94\u5176\u4ed6\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u975e\u9759\u6001\u7684 C \u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf. \u5c40\u90e8\u7b26\u53f7 : \u53ea\u88ab\u6a21\u5757 m \u5b9a\u4e49\u548c\u5f15\u7528. \u5bf9\u5e94\u5e26 static \u5c5e\u6027\u7684 C \u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf. Note \u5c40\u90e8\u9759\u6001\u53d8\u91cf\u4e0d\u5728\u6808\u4e2d\u7ba1\u7406, \u56e0\u6b64\u9700\u8981\u7f16\u8bd1\u5668\u5728 .data \u6216 .bss \u4e2d\u4e3a\u6bcf\u4e2a\u5b9a\u4e49\u5206\u914d\u7a7a\u95f4, \u5e76\u5728\u7b26\u53f7\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u6709\u552f\u4e00\u540d\u5b57\u7684\u672c\u5730\u94fe\u63a5\u5668\u7b26\u53f7. .symtab \u4e2d\u6bcf\u4e2a\u6761\u76ee\u7684\u683c\u5f0f: name : \u7b26\u53f7\u7684\u540d\u5b57, \u662f\u5728\u5b57\u7b26\u4e32\u8868 .strtab \u4e2d\u7684\u5b57\u8282\u504f\u79fb. value : \u7b26\u53f7\u7684\u5730\u5740. \u5bf9\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u6765\u8bf4, value \u662f\u8ddd\u5b9a\u4e49\u76ee\u6807\u7684\u8282\u7684\u8d77\u59cb\u4f4d\u7f6e\u7684\u504f\u79fb(\u5982\u51fd\u6570\u88ab\u5b9a\u4e49\u5728 .text \u4e2d, value \u5c31\u662f\u5b9a\u4e49\u7684\u4f4d\u7f6e\u8ddd\u79bb\u6b64\u8282\u4e2d\u7684\u504f\u79fb); \u5bf9\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u6765\u8bf4, value \u662f\u7edd\u5bf9\u8fd0\u884c\u65f6\u7684\u5730\u5740. size : \u76ee\u6807\u7684\u5927\u5c0f(\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d) type : \u8bf4\u660e\u8be5\u7b26\u53f7\u7684\u7c7b\u578b, \u662f\u51fd\u6570, \u53d8\u91cf\u8fd8\u662f\u6570\u636e\u8282\u7b49\u7b49. binding : \u8bf4\u660e\u8be5\u7b26\u53f7\u662f\u672c\u5730\u7684\u8fd8\u662f\u5c40\u90e8\u7684. section : \u8bf4\u660e\u8be5\u7b26\u53f7\u4fdd\u5b58\u5728\u76ee\u6807\u6587\u4ef6\u7684\u54ea\u4e2a\u8282\u4e2d, \u4e5f\u662f\u8282\u5934\u90e8\u8868\u4e2d\u7684\u4e00\u4e2a\u7d22\u5f15(\u504f\u79fb\u91cf) \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u6709\u4e09\u4e2a\u65e0\u6cd5\u901a\u8fc7\u8282\u5934\u90e8\u8868\u7d22\u5f15\u7684\u6570\u636e\u8282, \u79f0\u4e3a \u4f2a\u8282(pseudosection) .(\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u6ca1\u6709) ABS : \u4ee3\u8868\u4e0d\u8be5\u88ab\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7 UNDEF : \u4ee3\u8868\u672a\u5b9a\u4e49\u7684\u7b26\u53f7, \u4e5f\u5c31\u662f\u5728\u672c\u76ee\u6807\u6a21\u5757\u4e2d\u5f15\u7528\u5374\u5728\u5176\u4ed6\u5730\u65b9\u5b9a\u4e49\u7684\u7b26\u53f7 COMMON : \u4ee3\u8868\u8fd8\u672a\u88ab\u5206\u914d\u4f4d\u7f6e\u7684\u672a\u521d\u59cb\u5316\u7684\u6570\u636e\u76ee\u6807.(\u5982\u672a\u88ab\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf) \u6b64\u65f6 value \u7ed9\u51fa\u5bf9\u9f50\u8981\u6c42, size \u7ed9\u51fa\u6700\u5c0f\u5927\u5c0f.","title":"\u7b26\u53f7\u548c\u7b26\u53f7\u8868"},{"location":"CSAPP/7/#_8","text":"Linux LD \u7a0b\u5e8f\u8fd9\u6837\u7684 \u9759\u6001\u94fe\u63a5\u5668 \u4ee5\u4e00\u7ec4\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u53c2\u6570\u4f5c\u4e3a\u8f93\u5165, \u751f\u6210\u4e00\u4e2a\u5b8c\u5168\u94fe\u63a5\u7684, \u53ef\u4ee5\u52a0\u8f7d\u548c\u8fd0\u884c\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4f5c\u4e3a\u8f93\u51fa. \u4e3a\u4e86\u6784\u9020\u53ef\u6267\u884c\u6587\u4ef6, \u94fe\u63a5\u5668\u5fc5\u987b\u5b8c\u6210\u4e24\u4e2a\u4e3b\u8981\u4efb\u52a1: \u7b26\u53f7\u89e3\u6790(symbol resolution) : \u76ee\u6807\u6587\u4ef6\u5b9a\u4e49\u548c\u5f15\u7528\u7b26\u53f7, \u6bcf\u4e2a\u7b26\u53f7\u5bf9\u5e94\u4e00\u4e2a\u51fd\u6570, \u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6216\u4e00\u4e2a\u9759\u6001\u53d8\u91cf. \u7b26\u53f7\u89e3\u6790\u7684\u76ee\u7684\u662f\u5c06\u6bcf\u4e2a\u7b26\u53f7\u5f15\u7528\u6b63\u597d\u548c\u4e00\u4e2a\u7b26\u53f7\u5b9a\u4e49\u5173\u8054\u8d77\u6765. \u91cd\u5b9a\u4f4d(relocation) : \u7f16\u8bd1\u5668\u548c\u6c47\u7f16\u5668\u751f\u6210\u4ece\u5730\u5740 0 \u5f00\u59cb\u7684\u4ee3\u7801\u548c\u6570\u636e\u8282. \u8fde\u63a5\u5668\u901a\u8fc7\u628a\u6bcf\u4e2a\u7b26\u53f7\u5b9a\u4e49\u4e0e\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5173\u8054\u8d77\u6765, \u4ece\u800c\u91cd\u5b9a\u4f4d\u8fd9\u4e9b\u8282, \u7136\u540e\u4fee\u6539\u6240\u6709\u5bf9\u8fd9\u4e9b\u7b26\u53f7\u7684\u5f15\u7528, \u4f7f\u5f97\u5b83\u4eec\u6307\u5411\u8fd9\u4e2a\u5185\u5b58\u4f4d\u7f6e.","title":"\u9759\u6001\u94fe\u63a5"},{"location":"CSAPP/7/#_9","text":"\u94fe\u63a5\u5668\u89e3\u6790\u7b26\u53f7\u5f15\u7528\u7684\u65b9\u6cd5\u662f\u5c06\u6bcf\u4e2a\u5f15\u7528\u4e0e\u5b83\u8f93\u5165\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4e2d\u4e00\u4e2a\u786e\u5b9a\u7684\u7b26\u53f7\u5b9a\u4e49\u5173\u8054\u8d77\u6765. \u5bf9\u5c40\u90e8\u7b26\u53f7, \u5f15\u7528\u548c\u5b9a\u4e49\u90fd\u5728\u76f8\u540c\u6a21\u5757\u4e2d, \u7b26\u53f7\u89e3\u6790\u662f\u7b80\u5355\u660e\u4e86\u7684. \u7f16\u8bd1\u5668\u53ea\u5141\u8bb8\u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u6bcf\u4e2a\u5c40\u90e8\u7b26\u53f7\u53ea\u6709\u4e00\u4e2a\u5b9a\u4e49. \u800c\u5c40\u90e8\u9759\u6001\u53d8\u91cf(\u6839\u636e\u5b9a\u4e49\u4e0d\u5c5e\u4e8e\u5c40\u90e8\u7b26\u53f7)\u4e5f\u4f1a\u6709\u5c40\u90e8\u94fe\u63a5\u5668\u7b26\u53f7, \u6240\u4ee5\u7f16\u8bd1\u5668\u8fd8\u8981\u786e\u4fdd\u5b83\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u5b57. \u5bf9\u5168\u5c40\u6216\u5916\u90e8\u7b26\u53f7, \u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u78b0\u5230\u4e0d\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\uff0c\u5219\u4f1a\u5047\u8bbe\u8be5\u7b26\u53f7\u662f\u5728\u522b\u7684\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\uff0c\u5c31\u4f1a\u5728\u91cd\u5b9a\u4f4d\u8868\u4e2d\u4ea7\u751f\u8be5\u7b26\u53f7\u7684\u6761\u76ee\uff0c\u8ba9\u94fe\u63a5\u5668\u53bb\u89e3\u51b3. \u800c\u94fe\u63a5\u5668\u53ef\u80fd\u8fd8\u4f1a\u78b0\u5230\u5728\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u5b9a\u4e49\u76f8\u540c\u540d\u5b57\u7684\u5168\u5c40\u7b26\u53f7\uff0c\u4e5f\u8981\u89e3\u51b3\u8fd9\u4e9b\u51b2\u7a81.","title":"\u7b26\u53f7\u89e3\u6790"},{"location":"CSAPP/7/#_10","text":"\u5728\u7f16\u8bd1\u65f6, \u7f16\u8bd1\u5668\u4f1a\u5411\u6c47\u7f16\u5668\u8f93\u51fa\u6bcf\u4e2a\u5168\u5c40\u7b26\u53f7\u662f \u5f3a \u8fd8\u662f \u5f31 \u7684\u4fe1\u606f, \u6c47\u7f16\u5668\u5c06\u8fd9\u4e2a\u4fe1\u606f\u9690\u542b\u5730\u7f16\u7801\u5728\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u91cc. \u51fd\u6570\u548c\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u662f\u5f3a\u7b26\u53f7, \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u662f\u5f31\u7b26\u53f7 . \u89c4\u5219: \u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\u540c\u540d\u7684\u5f3a\u7b26\u53f7. \u5982\u679c\u6709\u4e00\u4e2a\u5f3a\u7b26\u53f7\u4e0e\u591a\u4e2a\u5f31\u7b26\u53f7\u540c\u540d, \u90a3\u4e48\u9009\u62e9\u5f3a\u7b26\u53f7. \u5982\u679c\u6709\u591a\u4e2a\u5f31\u7b26\u53f7\u540c\u540d, \u90a3\u4e48\u9009\u62e9\u4efb\u610f\u4e00\u4e2a. \u5f53\u7f16\u8bd1\u5668\u9047\u5230\u4e00\u4e2a\u5f31\u5168\u5c40\u7b26\u53f7\u65f6, \u5b83\u65e0\u6cd5\u786e\u5b9a\u5176\u4ed6\u6a21\u5757\u662f\u5426\u6709\u5b9a\u4e49, \u4e5f\u65e0\u6cd5\u786e\u5b9a\u94fe\u63a5\u5668\u4f1a\u91c7\u7528\u54ea\u4e2a\u5b9a\u4e49, \u6240\u4ee5\u7f16\u8bd1\u5668\u628a\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u7b26\u53f7\u653e\u5728 common \u8868\u4e2d, \u8ba9\u94fe\u63a5\u5668\u53bb\u51b3\u5b9a. \u800c\u5df2\u7ecf\u88ab\u521d\u59cb\u5316 0 \u7684\u5168\u5c40\u53d8\u91cf, \u4ed6\u5fc5\u7136\u662f\u552f\u4e00\u7684, \u7f16\u8bd1\u5668\u53ef\u4ee5\u81ea\u4fe1\u5730\u628a\u4ed6\u5206\u914d\u7ed9 .bss . \u9759\u6001\u7b26\u53f7\u4e5f\u662f\u552f\u4e00\u7684, \u7f16\u8bd1\u5668\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u653e\u5230 .data \u6216 .bss \u4e2d.(\u53d6\u51b3\u4e8e\u662f\u5426\u88ab\u521d\u59cb\u5316\u4ee5\u53ca\u662f\u5426\u88ab\u521d\u59cb\u5316\u4e3a0) \u9700\u8981\u6ce8\u610f\u7684\u662f, \u540c\u540d\u7b26\u53f7\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u662f\u4e0d\u540c\u7684, \u56e0\u6b64\u89c4\u5219 23 \u53ef\u80fd\u5e26\u6765\u610f\u60f3\u4e0d\u5230\u7684\u9519\u8bef.","title":"\u89e3\u6790\u591a\u91cd\u5b9a\u4e49\u7684\u5168\u5c40\u7b26\u53f7"},{"location":"CSAPP/7/#_11","text":"\u7f16\u8bd1\u7cfb\u7edf\u63d0\u4f9b\u4e00\u79cd\u673a\u5236, \u5c06\u6240\u6709\u76f8\u5173\u7684\u76ee\u6807\u6a21\u5757\u6253\u5305\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6, \u79f0\u4e3a \u9759\u6001\u5e93(static library) . \u5b83\u53ef\u4ee5\u7528\u4f5c\u94fe\u63a5\u5668\u7684\u8f93\u5165. \u5f53\u94fe\u63a5\u5668\u6784\u9020\u4e00\u4e2a\u8f93\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6\u65f6, \u5b83\u53ea\u590d\u5236\u9759\u6001\u5e93\u91cc\u88ab\u5e94\u7528\u7a0b\u5e8f\u5f15\u7528\u7684\u76ee\u6807\u6a21\u5757, \u8fd9\u51cf\u5c11\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e2d\u7684\u5927\u5c0f. \u5728 Linux \u7cfb\u7edf\u4e2d, \u9759\u6001\u5e93\u4ee5\u4e00\u79cd \u5b58\u6863(archive) \u7684\u7279\u6b8a\u6587\u4ef6\u683c\u5f0f\u5b58\u653e\u5728\u78c1\u76d8\u4e2d. \u5b58\u6863\u6587\u4ef6\u662f\u4e00\u7ec4\u8fde\u63a5\u8d77\u6765\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u96c6\u5408, \u6709\u4e00\u4e2a\u5934\u90e8\u6765\u63cf\u8ff0\u6bcf\u4e2a\u6210\u5458\u76ee\u6807\u6587\u4ef6\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e. \u5b58\u6863\u6587\u4ef6\u94ed\u7531\u540e\u7f00 .a \u6807\u8bc6. \u521b\u5efa\u9759\u6001\u5e93 \u8981\u628a\u8fd9\u4e9b\u51fd\u6570\u521b\u5efa\u4e3a\u4e00\u4e2a\u9759\u6001\u5e93, \u6211\u4eec\u4f7f\u7528 AR \u5de5\u5177. linux> gcc -c addvec.c multvec.c linux> ar rcs libvector.a addvec.o multvec.o \u7531\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u9759\u6001\u5e93 libvector.a \u4e0e\u9759\u6001\u5e93\u94fe\u63a5 // main2.c #include <stdio.h> #include \"vector.h\" int x [ 2 ] = { 1 , 2 }; int y [ 2 ] = { 3 , 4 }; int z [ 2 ]; int main () { addvec ( x , y , z , 2 ); printf ( \"z = [%d %d] \\n \" , z [ 0 ], z [ 1 ]); return 0 ; } \u4e3a\u4e86\u521b\u5efa\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6, \u6211\u4eec\u8981\u7f16\u8bd1\u548c\u94fe\u63a5\u8f93\u5165\u6587\u4ef6 main2.o \u548c libvector.a linux> gcc -c main2.c linux> gcc -static -o prog2c main2.o ./libvector.a \u6216\u8005\u7b2c\u4e8c\u884c\u4e5f\u53ef gcc -static -o prog2c main.o -L. -lvector \u8fd9\u91cc\u7684 -lvector \u662f libvector.a \u7684\u7f29\u5199, -L. \u544a\u8bc9\u94fe\u63a5\u5668\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u67e5\u627e libvector.a \u9759\u6001\u5e93.","title":"\u4e0e\u9759\u6001\u5e93\u94fe\u63a5"},{"location":"CSAPP/7/#_12","text":"\u7b26\u53f7\u89e3\u6790\u9636\u6bb5, \u94fe\u63a5\u5668\u4ece\u5de6\u5230\u53f3\u6309\u7167\u5b83\u4eec\u5728\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\u547d\u4ee4\u884c\u4e0a\u51fa\u73b0\u7684\u987a\u5e8f\u626b\u63cf\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u548c\u5b58\u6863\u6587\u4ef6.(\u9a71\u52a8\u7a0b\u5e8f\u81ea\u52a8\u5c06 .c \u7ffb\u8bd1\u4e3a .o \u6587\u4ef6) \u626b\u63cf\u4e2d\u94fe\u63a5\u5668\u7ef4\u62a4\u4e00\u4e2a \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u96c6\u5408 E (\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u6587\u4ef6\u4f1a\u88ab\u5408\u5e76\u8d77\u6765\u5f62\u6210\u53ef\u6267\u884c\u6587\u4ef6), \u4e00\u4e2a \u672a\u89e3\u6790\u7684\u7b26\u53f7(\u5373\u5f15\u7528\u4e86\u4f46\u662f\u5c1a\u672a\u5b9a\u4e49\u7684\u7b26\u53f7)\u96c6\u5408 U , \u4ee5\u53ca\u4e00\u4e2a \u5728\u524d\u9762\u8f93\u5165\u6587\u4ef6\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u7684\u7b26\u53f7\u96c6\u5408 D . \u521d\u59cb\u65f6, E D U \u5747\u4e3a\u7a7a. \u5bf9\u4e8e\u547d\u4ee4\u884c\u4e0a\u6bcf\u4e2a\u8f93\u5165\u6587\u4ef6 f, \u94fe\u63a5\u5668\u4f1a\u5224\u65ad f \u662f\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u8fd8\u662f\u4e00\u4e2a\u5b58\u6863\u6587\u4ef6. \u76ee\u6807\u6587\u4ef6: \u628a f \u6dfb\u52a0\u5230 E, \u4fee\u6539 U \u548c D \u6765\u53cd\u6620 f \u4e2d\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u4f7f\u7528. \u5b58\u6863\u6587\u4ef6: \u94fe\u63a5\u5668\u5c1d\u8bd5\u5339\u914d U \u4e2d\u672a\u89e3\u6790\u7684\u7b26\u53f7\u548c\u7531\u5b58\u6863\u6587\u4ef6\u6210\u5458\u5b9a\u4e49\u7684\u7b26\u53f7. \u5982\u679c\u67d0\u4e2a\u5b58\u6863\u6587\u4ef6\u6210\u5458 m, \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b26\u53f7\u6765\u89e3\u6790 U \u4e2d\u7684\u5f15\u7528(\u5373 m \u5b9a\u4e49\u4e86\u4e00\u4e2a U \u4e2d\u7684\u7b26\u53f7), \u90a3\u4e48\u5c31\u5c06 m \u52a0\u5165\u5230 E \u4e2d, \u5e76\u4e14\u94fe\u63a5\u5668\u4fee\u6539 U \u548c D \u6765\u53cd\u6620 m \u4e2d\u7684\u7b26\u53f7\u5b9a\u4e49\u548c\u5f15\u7528. \u5176\u4ed6\u4e0d\u5305\u542b\u5728 E \u4e2d\u7684\u6210\u5458\u5c06\u88ab\u629b\u5f03. \u5982\u679c\u5f53\u94fe\u63a5\u5668\u5b8c\u6210\u5bf9\u6587\u4ef6\u7684\u626b\u63cf\u540e, U \u662f\u975e\u7a7a\u7684, \u90a3\u4e48\u94fe\u63a5\u5668\u5c31\u4f1a\u8f93\u51fa\u4e00\u4e2a\u9519\u8bef\u5e76\u7ec8\u6b62. \u5426\u5219\u5b83\u4f1a\u5408\u5e76\u548c\u91cd\u5b9a\u4f4d E \u4e2d\u7684\u76ee\u6807\u6587\u4ef6, \u6784\u5efa\u8f93\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6. \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5982\u679c\u5b9a\u4e49\u4e00\u4e2a\u7b26\u53f7\u7684\u5e93\u51fa\u73b0\u5728\u5f15\u7528\u8fd9\u4e2a\u7b26\u53f7\u7684\u76ee\u6807\u6587\u4ef6\u4e4b\u524d, \u90a3\u4e48\u5f15\u7528\u662f\u4e0d\u80fd\u88ab\u89e3\u6790\u7684, \u94fe\u63a5\u4f1a\u5931\u8d25. \u5173\u4e8e\u5e93\u7684\u4e00\u822c\u51c6\u5219\u662f \u628a\u5b83\u4eec\u653e\u5728\u547d\u4ee4\u884c\u7684\u7ed3\u5c3e . \u5982\u679c\u5e93\u4e0d\u662f\u76f8\u4e92\u72ec\u7acb\u7684, \u9700\u8981\u5bf9\u4ed6\u4eec\u6392\u5e8f.","title":"\u4f7f\u7528\u9759\u6001\u5e93\u89e3\u6790\u5f15\u7528"},{"location":"CSAPP/7/#_13","text":"\u5f53\u94fe\u63a5\u5668\u5b8c\u6210\u4e86\u7b26\u53f7\u89e3\u6790, \u5c31\u8981\u5f00\u59cb\u91cd\u5b9a\u4f4d. \u8fd9\u4e2a\u6b65\u9aa4\u4e2d, \u5c06\u5408\u5e76\u8f93\u5165\u6a21\u5757\u5e76\u4e3a\u6bcf\u4e2a\u7b26\u53f7\u5206\u914d\u8fd0\u884c\u65f6\u5730\u5740. \u91cd\u5b9a\u4f4d\u8282\u548c\u7b26\u53f7\u5b9a\u4e49 \u94fe\u63a5\u5668\u5c06\u6240\u6709\u76f8\u540c\u7c7b\u578b\u7684\u8282\u5408\u5e76\u4e3a\u540c\u4e00\u7c7b\u578b\u7684\u805a\u5408\u8282. \u4f8b\u5982\u6765\u81ea\u6240\u6709\u8f93\u5165\u6a21\u5757\u7684 .data \u8282\u88ab\u5168\u90e8\u5408\u5e76\u4e3a\u4e00\u4e2a\u8282, \u8fd9\u4e2a\u8282\u6210\u4e3a\u8f93\u51fa\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684 .data \u8282. \u7136\u540e\u94fe\u63a5\u5668\u5c06\u8fd0\u884c\u65f6\u5185\u5b58\u5730\u5740\u8d4b\u7ed9\u65b0\u7684\u805a\u5408\u8282, \u8d4b\u7ed9\u8f93\u5165\u6a21\u5757\u5b9a\u4e49\u7684\u6bcf\u4e2a\u8282, \u4ee5\u53ca\u8f93\u5165\u6a21\u5757\u5b9a\u4e49\u7684\u6bcf\u4e2a\u7b26\u53f7. \u91cd\u5b9a\u4f4d\u8282\u4e2d\u7684\u7b26\u53f7\u5f15\u7528 \u94fe\u63a5\u5668\u4fee\u6539\u4ee3\u7801\u8282\u548c\u6570\u636e\u8282\u4e2d\u5bf9\u6bcf\u4e2a\u7b26\u53f7\u7684\u5f15\u7528, \u4f7f\u5176\u6307\u5411\u6b63\u786e\u7684\u8fd0\u884c\u65f6\u4f4d\u7f6e.","title":"\u91cd\u5b9a\u4f4d"},{"location":"CSAPP/7/#_14","text":"\u65e0\u8bba\u4f55\u65f6, \u6c47\u7f16\u5668\u9047\u5230\u5bf9\u6700\u7ec8\u4f4d\u7f6e\u672a\u77e5\u7684\u76ee\u6807\u5f15\u7528, \u5b83\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a\u91cd\u5b9a\u4f4d\u6761\u76ee, \u544a\u8bc9\u94fe\u63a5\u5668\u5728\u5c06\u76ee\u6807\u6587\u4ef6\u5408\u5e76\u6210\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u5982\u4f55\u4fee\u6539\u8fd9\u4e2a\u5f15\u7528. \u4ee3\u7801\u7684\u91cd\u5b9a\u4f4d\u6761\u76ee\u653e\u5728 .rel.text \u4e2d, \u5df2\u521d\u59cb\u5316\u7684\u6570\u636e\u7684\u91cd\u5b9a\u4f4d\u6761\u76ee\u653e\u5728 .rel.data \u4e2d. offset : \u9700\u8981\u88ab\u4fee\u6539\u7684\u5f15\u7528\u7684\u8282\u504f\u79fb symbol : \u88ab\u4fee\u6539\u5f15\u7528\u7684\u7b26\u53f7 type : \u544a\u77e5\u94fe\u63a5\u5668\u5982\u4f55\u4fee\u6539\u65b0\u7684\u5f15\u7528(\u76f8\u5bf9/\u7edd\u5bf9\u5bfb\u5740) addend : \u4e00\u4e2a\u6709\u7b26\u53f7\u5e38\u6570, \u4e00\u4e9b\u7c7b\u578b\u7684\u91cd\u5b9a\u4f4d\u9700\u8981\u4f7f\u7528\u5b83\u5bf9\u4fee\u6539\u5f15\u7528\u7684\u503c\u505a\u504f\u79fb\u8c03\u6574. ELF \u5b9a\u4e49\u4e86\u4e24\u79cd\u57fa\u672c\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b: R_X86_64_PC32 : \u4f7f\u7528 32 \u4f4d PC \u76f8\u5bf9\u5730\u5740\u7684\u5f15\u7528.(\u6ce8\u610f\u4e00\u822c PC \u662f\u4e0b\u4e00\u6761\u6307\u4ee4\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740) R_X86_64_32 : \u4f7f\u7528 32 \u4f4d\u7edd\u5bf9\u5730\u5740\u7684\u5f15\u7528.","title":"\u91cd\u5b9a\u4f4d\u6761\u76ee"},{"location":"CSAPP/7/#_15","text":"int sum ( int * a , int n ) //defined in sum.c int array [ 2 ] = { 1 , 2 }; int main () { int val = sum ( array , 2 ); return val ; } \u5176\u53cd\u6c47\u7f16\u4ee3\u7801\u4e3a: \u91cd\u5b9a\u4f4d PC \u76f8\u5bf9\u5f15\u7528 \u8be5\u91cd\u5b9a\u4f4d\u6761\u76ee\u4e3b\u8981\u7528\u6765\u4ea7\u751f 32 \u4f4dPC\u76f8\u5bf9\u5730\u5740\u7684\u5f15\u7528, \u5373\u51fd\u6570\u8c03\u7528\u65f6\u7684\u91cd\u5b9a\u4f4d. \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, main \u8c03\u7528\u51fd\u6570 sum, \u4f46 sum \u51fd\u6570\u662f\u5728 sum.o \u4e2d\u5b9a\u4e49. (\u8d77\u521d call \u540e\u9762\u7684\u6570\u5b57\u662f\u5360\u4f4d\u7b26) \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5176\u91cd\u5b9a\u4f4d\u6761\u76ee: r . offset = 0xf r . symbol = sum r . type = R_X86_64_PC32 r . addend = -4 call \u6307\u4ee4\u5f00\u59cb\u4e8e\u8282\u504f\u79fb 0xe \u7684\u5730\u65b9, \u540c\u65f6 call \u672c\u8eab\u7684\u64cd\u4f5c\u7801 0xe8 \u5360\u4e86\u4e00\u4e2a\u5b57\u8282, \u56e0\u6b64 sum \u7684 offset \u4e3a 0xf. addend\u662f\u56e0\u4e3a, \u5f53\u6211\u4eec\u5728\u6267\u884c\u8fd9\u6761\u6307\u4ee4\u65f6, PC \u5df2\u7ecf\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4(0x13), \u9700\u8981\u901a\u8fc7\u8fd9\u4e2a\u504f\u79fb\u91cf\u6765\u8c03\u6574. \u6211\u4eec\u5047\u8bbe ADDR ( s ) = ADDR (. text ) = 0x4004d0 refaddr = ADDR ( s ) + r . offset = 0x4004d0 + 0xf = 0x4004df \u90a3\u4e48\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230 refptr = s + r . offset //\u5360\u4f4d\u7b26\u7684\u6307\u9488 ADDR ( r . symbol ) = ADDR ( sum ) = 0x4004e8 * refptr = ( unsigned )( ADDR ( s . symbol ) + r . addend - refaddr ) = ( unsigned )( 0x4004e8 + ( -4 ) - 0x4004df ) = ( unsigned ) 0x5 \u4e8e\u662f\u6211\u4eec\u6709 4004de: e8 05 00 00 00 callq 4004e8 <sum> \u91cd\u5b9a\u4f4d\u7edd\u5bf9\u5f15\u7528 \u8be5\u91cd\u5b9a\u4f4d\u6761\u76ee\u4e3b\u8981\u7528\u6765\u4ea7\u751f 32 \u4f4d\u7edd\u5bf9\u5730\u5740\u7684\u5f15\u7528, \u5373\u6570\u7ec4\u7684\u91cd\u5b9a\u4f4d. \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, \u5bf9 array \u7684\u5f15\u7528\u5c31\u4f7f\u7528\u7edd\u5bf9\u5f15\u7528. r . offset = 0xa r . symbol = array r . type = R_X86_64_32 r . addend = 0 \u4e8e\u662f refptr = s + r . offset //\u5360\u4f4d\u7b26\u7684\u6307\u9488 * refptr = ( unsigned )( ADDR ( r . symbol ) + r . addend ) = ( unsigned ) 0x601018 \u6700\u540e\u5f97\u5230 4004d9: bf 18 10 60 00 mov $0x601018, %edi","title":"\u91cd\u5b9a\u4f4d\u7b26\u53f7\u5f15\u7528"},{"location":"CSAPP/7/#_16","text":"\u5f53\u5f97\u5230\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 prog \u540e, \u8f93\u5165 linux> ./prog \u56e0\u4e3a prog \u4e0d\u662f\u4e00\u4e2a\u5185\u7f6e\u7684 shell \u547d\u4ee4, \u6240\u4ee5 shell \u4f1a\u8ba4\u4e3a prog \u662f\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6, \u901a\u8fc7\u8c03\u7528\u67d0\u4e2a\u9a7b\u7559\u5728\u5b58\u50a8\u5668\u4e2d\u88ab\u79f0\u4e3a\u52a0\u8f7d\u5668\u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\u6765\u8fd0\u884c\u5b83. \u52a0\u8f7d\u5668\u5c06\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u4ece\u78c1\u76d8\u590d\u5236\u5230\u5185\u5b58\u4e2d, \u7136\u540e\u901a\u8fc7\u8df3\u8f6c\u5230\u7a0b\u5e8f\u7b2c\u4e00\u6761\u6307\u4ee4\u6216\u5165\u53e3\u70b9\u6765\u8fd0\u884c\u8be5\u7a0b\u5e8f. \u8fd9\u4e2a\u5c06\u7a0b\u5e8f\u590d\u5236\u5230\u5185\u5b58\u5e76\u8fd0\u884c\u7684\u8fc7\u7a0b\u53eb \u52a0\u8f7d . \u5f53\u52a0\u8f7d\u5668\u8fd0\u884c\u65f6, \u5b83\u521b\u5efa\u7c7b\u4f3c\u4e0b\u56fe\u7684\u5185\u5b58\u6620\u50cf. \u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5 : x86-64 \u901a\u5e38\u5c06\u4ee3\u7801\u6bb5\u4fdd\u5b58\u5728 0x400000 \u5904, \u6240\u4ee5\u4f1a\u5c06\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u6620\u5c04\u4e3a\u5982\u4e0a\u5f62\u5f0f. \u6ce8\u610f: \u8fd9\u91cc\u6570\u636e\u6bb5\u4e3a\u4e86\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42, \u4f1a\u548c\u4ee3\u7801\u6bb5\u4e4b\u95f4\u5b58\u5728\u95f4\u9699. \u8fd0\u884c\u65f6\u5806 : \u5728\u6570\u636e\u6bb5\u4e4b\u540e\u4f1a\u6709\u4e00\u4e2a\u8fd0\u884c\u65f6\u5806\uff0c\u662f\u901a\u8fc7\u8c03\u7528 malloc \u5e93\u52a8\u6001\u5f80\u4e0a\u589e\u957f\u7684 \u5171\u4eab\u5e93 : \u5728\u5806\u4e4b\u540e\u662f\u4e00\u4e2a\u5171\u4eab\u5e93\u7684\u5185\u5b58\u6620\u5c04\u533a\u57df \u7528\u6237\u6808 : \u7528\u6237\u6808\u662f\u4ece\u6700\u5927\u7684\u5408\u6cd5\u7528\u6237\u5730\u5740\u5f00\u59cb, \u5411\u8f83\u5c0f\u7684\u5730\u5740\u589e\u957f \u5185\u6838 : \u6700\u4e0a\u65b9\u7684\u662f\u4f4d\u5185\u6838\u4e2d\u7684\u6570\u636e\u548c\u4ee3\u7801\u4fdd\u7559\u7684, \u662f\u64cd\u4f5c\u7cfb\u7edf\u9a7b\u7559\u5728\u5185\u5b58\u7684\u4f4d\u7f6e","title":"\u52a0\u8f7d\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6"},{"location":"CSAPP/7/#_17","text":"\u9759\u6001\u5e93\u548c\u6240\u6709\u7684\u8f6f\u4ef6\u4e00\u6837, \u9700\u8981\u5b9a\u671f\u7ef4\u62a4\u548c\u66f4\u65b0. \u6b64\u5916\u51e0\u4e4e\u6bcf\u4e2a C \u7a0b\u5e8f\u90fd\u4f1a\u4f7f\u7528\u6807\u51c6 I/O \u51fd\u6570, \u5728\u8fd0\u884c\u65f6\u8fd9\u4e9b\u51fd\u6570\u88ab\u8d4b\u503c\u5230\u6bcf\u4e2a\u8fd0\u884c\u8fdb\u7a0b\u7684\u6587\u672c\u6bb5\u91cc, \u8fd9\u5bf9\u5185\u5b58\u662f\u6781\u5927\u7684\u6d6a\u8d39. \u5171\u4eab\u5e93(shared library) \u662f\u4e00\u4e2a\u76ee\u6807\u6a21\u5757, \u5728\u8fd0\u884c\u6216\u52a0\u8f7d\u65f6, \u53ef\u4ee5\u52a0\u8f7d\u5230\u4efb\u610f\u7684\u5185\u5b58\u5730\u5740, \u5e76\u548c\u4e00\u4e2a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u94fe\u63a5\u8d77\u6765. \u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u52a8\u6001\u94fe\u63a5 , \u662f\u7531 \u52a8\u6001\u94fe\u63a5\u5668 \u6267\u884c. \u5171\u4eab\u5e93\u4e5f\u88ab\u79f0\u4e3a \u5171\u4eab\u76ee\u6807 , linux \u7cfb\u7edf\u4e2d\u901a\u5e38\u7528 .so \u540e\u7f00\u6765\u8868\u793a. \u52a8\u6001\u94fe\u63a5\u5668\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807, Linux \u4e2d\u4e3a ld-linux.so \u5171\u4eab\u5e93\u4e2d\u7684\"\u5171\u4eab\"\u6709\u4e24\u79cd\u542b\u4e49: \u5728\u4efb\u610f\u6587\u4ef6\u7cfb\u7edf\u4e2d, \u5bf9\u4e8e\u4e00\u4e2a\u5e93\u53ea\u6709\u4e00\u4e2a .so \u6587\u4ef6. \u6240\u6709\u5f15\u7528\u8be5\u5e93\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5171\u4eab\u8fd9\u4e2a .so \u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e, \u800c\u4e0d\u662f\u50cf\u9759\u6001\u5e93\u90a3\u6837\u88ab\u590d\u5236\u548c\u5d4c\u5165\u5230\u5f15\u7528\u5b83\u4eec\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u53bb. \u5728\u5185\u5b58\u4e2d, \u4e00\u4e2a\u5171\u4eab\u5e93\u7684 .text \u8282\u7684\u4e00\u4e2a\u526f\u672c\u53ef\u4ee5\u88ab\u4e0d\u540c\u7684\u6b63\u5728\u8fdb\u884c\u7684\u8fdb\u7a0b\u5171\u4eab.","title":"\u5171\u4eab\u5e93"},{"location":"CSAPP/7/#_18","text":"\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u751f\u6210\u5171\u4eab\u5e93: linux> gcc -shared -fpic -o libvector.so addvec.c multvec.c \u5176\u4e2d -fpic \u9009\u9879\u6307\u793a\u7f16\u8bd1\u5668\u751f\u6210\u4e0e\u4f4d\u7f6e\u65e0\u5173\u7684\u4ee3\u7801, -share \u9009\u9879\u6307\u793a\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u7684\u76ee\u6807\u6587\u4ef6. \u968f\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u8fd0\u7528\u5171\u4eab\u5e93: linux> gcc -o prog21 main2.c ./libvector.so \u7531\u6b64\u521b\u5efa\u4e86\u53ef\u6267\u884c\u6587\u4ef6 prog21. \u5728\u521b\u5efa\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6, \u94fe\u63a5\u5668\u4f1a\u590d\u5236\u5171\u4eab\u5e93\u4e2d\u7684\u91cd\u5b9a\u4f4d .rel \u548c\u7b26\u53f7\u8868 .symtab \u4fe1\u606f, \u4f7f\u5f97\u8fd0\u884c\u65f6\u53ef\u4ee5\u89e3\u6790\u5bf9\u5171\u4eab\u5e93\u4e2d\u4ee3\u7801\u548c\u6570\u636e\u7684\u5f15\u7528\uff0c\u7531\u6b64\u5f97\u5230\u90e8\u5206\u94fe\u63a5\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u6ce8\u610f: \u6b64\u65f6\u6ca1\u6709\u5c06\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u548c\u6570\u636e\u8282\u590d\u5236\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d. \u8c03\u7528\u52a0\u8f7d\u5668\u52a0\u8f7d\u90e8\u5206\u94fe\u63a5\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6, \u52a0\u8f7d\u5668\u4f1a\u5728\u6bb5\u5934\u90e8\u8868\u7684\u5f15\u5bfc\u4e0b, \u5c06\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u6bb5\u548c\u4ee3\u7801\u6bb5\u590d\u5236\u5230\u5bf9\u5e94\u7684\u5185\u5b58\u4f4d\u7f6e. \u52a0\u8f7d\u5668\u53ef\u4ee5\u5728 prog2l \u4e2d\u53d1\u73b0 .interp \u8282\uff0c\u5176\u4e2d\u4fdd\u5b58\u4e86\u52a8\u6001\u94fe\u63a5\u5668\u7684\u8def\u5f84\uff0c\u5219\u52a0\u8f7d\u5668\u4f1a\u52a0\u8f7d\u548c\u8fd0\u884c\u8fd9\u4e2a\u52a8\u6001\u94fe\u63a5\u5668 \u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5c06\u4e0d\u540c\u7684\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u548c\u6570\u636e\u4fdd\u5b58\u5230\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\u4e2d \u52a8\u6001\u94fe\u63a5\u5668\u8fd8\u4f1a\u6839\u636e\u5171\u4eab\u5e93\u5728\u5185\u5b58\u7684\u4f4d\u7f6e, \u6765\u91cd\u5b9a\u4f4d prog2l \u4e2d\u6240\u6709\u5bf9\u5171\u4eab\u5e93\u5b9a\u4e49\u7684\u7b26\u53f7\u7684\u5f15\u7528 \u6700\u540e\u52a0\u8f7d\u5668\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f, \u6b64\u65f6\u5171\u4eab\u5e93\u7684\u4f4d\u7f6e\u5c31\u56fa\u5b9a\u4e86, \u5e76\u5728\u7a0b\u5e8f\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u6539\u53d8.","title":"\u52a0\u8f7d\u65f6\u52a8\u6001\u94fe\u63a5"},{"location":"CSAPP/7/#_19","text":"#include <dlfcn.h> void * dlopen ( const char * filename , int flag ); dlopen \u51fd\u6570\u52a0\u8f7d\u548c\u94fe\u63a5\u5171\u4eab\u5e93 filename, \u5e76\u8fd4\u56de\u53e5\u67c4\u6307\u9488. \u53c2\u6570 flag \u53ef\u7528\u4e8e\u786e\u5b9a\u5171\u4eab\u5e93\u7684\u89e3\u6790\u65b9\u5f0f\u4ee5\u53ca\u4f5c\u7528\u8303\u56f4: RTLD_NOW : \u94fe\u63a5\u5668\u7acb\u5373\u89e3\u6790\u5bf9\u5916\u90e8\u7b26\u53f7\u7684\u5f15\u7528 RTLD_LAZY : \u94fe\u63a5\u5668\u63a8\u8fdf\u7b26\u53f7\u89e3\u6790\u76f4\u5230\u6267\u884c\u6765\u81ea\u5e93\u4e2d\u7684\u4ee3\u7801 RTLD_GLOBAL : \u5171\u4eab\u5e93\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\u53ef\u88ab\u5176\u540e\u6253\u5f00\u7684\u5176\u4ed6\u5e93\u7528\u4e8e\u7b26\u53f7\u89e3\u6790 RTLD_LOCAL : \u5171\u4eab\u5e93\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\u4e0d\u80fd\u88ab\u5176\u540e\u6253\u5f00\u7684\u5176\u4ed6\u5e93\u7528\u4e8e\u91cd\u5b9a\u4f4d, \u662f\u9ed8\u8ba4\u7684 #include <dlfcn.h> void * dlsym ( void * handle , char * symbol ); dlsym \u51fd\u6570\u8fd4\u56de\u4e4b\u524d\u6253\u5f00\u7684\u5171\u4eab\u5e93\u7684\u53e5\u67c4\u4e2dsymbol\u6307\u5b9a\u7684\u7b26\u53f7\u7684\u5730\u5740. #include <dlfcn.h> void dlclose ( void * handle ); \u7528\u6765\u5173\u95ed\u6253\u5f00\u7684\u5171\u4eab\u5e93\u53e5\u67c4 #include <dlfcn.h> const char * dlerror ( void ); \u5982\u679c dlopen, dlsym \u6216 dlclose \u51fd\u6570\u53d1\u751f\u9519\u8bef, \u5c31\u8fd4\u56de\u5b57\u7b26\u4e32. Example \u8be5\u7a0b\u5e8f\u5c31\u4f1a\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5e93 libvector.so, \u7136\u540e\u8c03\u7528 addvec \u51fd\u6570. linux> gcc -rdynamic -o prog2r dll.c -ldl \u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u7f16\u8bd1. \u5176\u4e2d -rdynamic \u901a\u77e5\u94fe\u63a5\u5668\u5c06\u5168\u90e8\u7b26\u53f7\u52a0\u5165\u5230\u52a8\u6001\u7b26\u53f7\u8868\u4e2d, \u5c31\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 dlopen \u6765\u5b9e\u73b0\u5411\u540e\u8ddf\u8e2a, -ldl \u8868\u793a\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f1a\u52a8\u6001\u52a0\u8f7d\u5171\u4eab\u5e93.","title":"\u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5"},{"location":"CSAPP/7/#_20","text":"\u5f53\u94fe\u63a5\u5668\u4ea7\u751f\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u5df2\u4e3a\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u8282\u548c\u7b26\u53f7\u5206\u914d\u597d\u4e86\u5185\u5b58\u5730\u5740\uff0c\u5982\u679c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u6709\u5f15\u7528\u5171\u4eab\u5e93\u4e2d\u7684\u7b26\u53f7\u65f6\uff0c\u5c31\u9700\u8981\u5047\u8bbe\u5171\u4eab\u5e93\u7b26\u53f7\u7684\u5730\u5740\u3002\u8f83\u65e9\u5b58\u5728 \u9759\u6001\u5171\u4eab\u5e93(Static Shared Library) \u65b9\u6cd5\uff0c\u5373\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5728\u67d0\u4e2a\u7279\u5b9a\u7684\u5730\u5740\u4e2d\u5212\u5206\u4e00\u90e8\u5206\uff0c\u4e3a\u5df2\u77e5\u7684\u5171\u4eab\u5e93\u9884\u7559\u7a7a\u95f4\uff0c\u5219\u5171\u4eab\u5e93\u4f1a\u88ab\u52a0\u8f7d\u5230\u5bf9\u5e94\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u800c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5c31\u53ef\u4ee5\u5728\u5bf9\u5e94\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u627e\u5230\u60f3\u8981\u7684\u5171\u4eab\u5e93\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u4f1a\u9020\u6210\u5730\u5740\u51b2\u7a81\uff0c\u5e76\u9020\u6210\u5730\u5740\u7a7a\u95f4\u7684\u6d6a\u8d39\uff0c\u4ee5\u53ca\u7ef4\u62a4\u7684\u56f0\u96be. \u6240\u4ee5\u5c31\u60f3\u80fd\u5426\u5c06\u5171\u4eab\u5e93\u52a0\u8f7d\u5230\u4efb\u610f\u7684\u5185\u5b58\u4f4d\u7f6e\uff0c\u8fd8\u80fd\u4f7f\u5f97\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u80fd\u627e\u5230\u3002\u7c7b\u4f3c\u4e8e\u4f7f\u7528\u9759\u6001\u5e93\u65f6\uff0c\u94fe\u63a5\u5668\u4f1a\u6839\u636e\u91cd\u5b9a\u4f4d\u8868\u548c\u5206\u914d\u597d\u7684\u5185\u5b58\u5730\u5740\u6765\u66ff\u6362\u7f16\u8bd1\u65f6\u672a\u77e5\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528 \u52a0\u8f7d\u65f6\u91cd\u5b9a\u4f4d(Load Time Relocation) \u65b9\u6cd5\uff0c\u7531\u4e8e\u7f16\u8bd1\u3001\u6c47\u7f16\u548c\u94fe\u63a5\u65f6\u5bf9\u5171\u4eab\u5e93\u5728\u5185\u5b58\u7684\u4f4d\u7f6e\u662f\u672a\u77e5\u7684\uff0c\u6240\u4ee5\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u5bf9\u5171\u4eab\u5e93\u7684\u7b26\u53f7\u7684\u5f15\u7528\u4e5f\u7528\u5360\u4f4d\u7b26\u4ee3\u66ff\uff0c\u5f53\u52a0\u8f7d\u5668\u52a0\u8f7d\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u52a0\u8f7d\u65f6\uff0c\u4f1a\u8c03\u7528\u52a8\u6001\u94fe\u63a5\u52a0\u8f7d\u5668\u5c06\u5171\u4eab\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u6b64\u65f6\u5c31\u80fd\u6839\u636e\u5171\u4eab\u5e93\u88ab\u52a0\u8f7d\u7684\u5185\u5b58\u5730\u5740\uff0c\u5bf9\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u5360\u4f4d\u7b26\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u4f1a\u5bf9\u5171\u4eab\u5e93\u4e2d\u7684\u6307\u4ee4\u8fdb\u884c\u4fee\u6539\uff0c\u7531\u4e8e\u6307\u4ee4\u88ab\u91cd\u5b9a\u4f4d\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\u662f\u4e0d\u540c\u7684\uff0c\u6240\u4ee5\u8be5\u5171\u4eab\u5e93\u65e0\u6cd5\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e2d\u5171\u4eab\u3002\u4f46\u662f\u5171\u4eab\u5e93\u4e2d\u7684\u6570\u636e\u90e8\u5206\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e2d\u662f\u6709\u81ea\u5df1\u5907\u4efd\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u8be5\u65b9\u6cd5\u6765\u89e3\u51b3. \u6211\u4eec\u7684\u76ee\u7684\u5176\u5b9e\u5c31\u662f\u5e0c\u671b\u5171\u4eab\u7684\u6307\u4ee4\u90e8\u5206\u5728\u88c5\u8f7d\u65f6\u4e0d\u9700\u8981\u56e0\u4e3a\u88c5\u8f7d\u5730\u5740\u7684\u6539\u53d8\u800c\u6539\u53d8\uff0c\u6240\u4ee5\u5b9e\u73b0\u7684\u57fa\u672c\u60f3\u6cd5\u5c31\u662f\u628a\u6307\u4ee4\u4e2d\u90a3\u4e9b\u9700\u8981\u88ab\u4fee\u6539\u7684\u90e8\u5206\u5206\u79bb\u51fa\u6765\uff0c\u8ddf\u6570\u636e\u90e8\u5206\u653e\u5728\u4e00\u8d77\uff0c\u8fd9\u6837\u6307\u4ee4\u90e8\u5206\u5c31\u53ef\u4ee5\u4fdd\u6301\u4e0d\u53d8\uff0c\u800c\u6570\u636e\u90e8\u5206\u53ef\u4ee5\u5728\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u62e5\u6709\u4e00\u4e2a\u526f\u672c\u3002\u8fd9\u79cd\u65b9\u6848\u5c31\u662f\u76ee\u524d\u88ab\u79f0\u4e3a \u5730\u5740\u65e0\u5173\u4ee3\u7801(PC, Position-independent Code) \u7684\u6280\u672f.","title":"\u4f4d\u7f6e\u65e0\u5173\u4ee3\u7801"},{"location":"CSAPP/7/#pic","text":"\u5f53\u4f60\u5728\u4ee3\u7801\u4e2d\u8c03\u7528\u5171\u4eab\u5e93\u4e2d\u7684\u51fd\u6570\u6216\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u3001\u6c47\u7f16\u5668\u4ee5\u53ca\u94fe\u63a5\u5668\u5e76\u4e0d\u77e5\u9053\u8be5\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\uff0c\u53ea\u6709\u5f53\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u52a0\u8f7d\u65f6\u6216\u8fd0\u884c\u65f6\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5e93\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u5171\u4eab\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u65f6\uff0c\u624d\u77e5\u9053\u5171\u4eab\u5e93\u4e2d\u7684\u5730\u5740. \u4f46\u662f\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u6bb5\u662f\u4e0d\u53ef\u5199\u7684\uff0c\u6240\u4ee5\u65e0\u6cd5\u901a\u8fc7\u52a8\u6001\u94fe\u63a5\u5668\u5bf9\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u5176\u6307\u5411\u5171\u4eab\u5e93\u7684\u51fd\u6570\u6216\u53d8\u91cf\u7684\u5730\u5740\uff1b\u5176\u6b21\uff0c\u6bd4\u5982\u52a8\u6001\u5e93A\u7684\u51fd\u6570\u8c03\u7528\u4e86\u52a8\u6001\u5e93glibc.so\u4e2d\u5b9a\u4e49\u7684printf\u51fd\u6570\u65f6\uff0c\u53ea\u6709\u5728\u52a8\u6001\u94fe\u63a5\u5668\u52a0\u8f7d\u4e86glibc.so\u65f6\uff0c\u52a8\u6001\u5e93A\u624d\u80fd\u77e5\u9053printf\u51fd\u6570\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff0c\u4f46\u662f\u6211\u4eec\u4e5f\u4e0d\u80fd\u5bf9\u52a8\u6001\u5e93A\u7684\u4ee3\u7801\u6bb5\u8fdb\u884c\u4fee\u6539\uff0c\u5426\u5219\u52a8\u6001\u5e93A\u5c31\u65e0\u6cd5\u5728\u5404\u4e2a\u8fdb\u7a0b\u4e2d\u5171\u4eab\u4e86. \u6211\u4eec\u5728\u6570\u636e\u6bb5\u7684\u5f00\u59cb\u7684\u5730\u65b9\u521b\u5efa\u4e86 \u5168\u5c40\u504f\u79fb\u91cf\u8868(Global Offset Table, GOT) . \u5728 GOT \u4e2d, \u6bcf\u4e2a\u88ab\u8fd9\u4e2a\u76ee\u6807\u6a21\u5757\u5f15\u7528\u7684\u5168\u5c40\u6570\u636e\u76ee\u6807(\u8fc7\u7a0b\u6216\u5168\u5c40\u53d8\u91cf)\u90fd\u4f1a\u6709\u4e00\u4e2a 8 \u5b57\u8282\u6761\u76ee. \u7f16\u8bd1\u5668\u8fd8\u4e3a\u5176\u4e2d\u6bcf\u4e2a\u6761\u76ee\u90fd\u751f\u6210\u4e86\u4e00\u4e2a\u91cd\u5b9a\u4f4d\u8bb0\u5f55, \u5728\u52a0\u8f7d\u65f6\u91cd\u5b9a\u4f4d GOT \u4e2d\u6bcf\u4e2a\u6761\u76ee, \u4f7f\u5f97\u5b83\u5305\u542b\u76ee\u6807\u7684\u6b63\u786e\u7684\u7edd\u5bf9\u5730\u5740. GOT \u7684\u8bbe\u8ba1\u5229\u7528\u4e86\u4e00\u4e2a\u4e8b\u5b9e: \u6570\u636e\u6bb5\u4e0e\u4ee3\u7801\u6bb5\u7684\u8ddd\u79bb\u603b\u662f\u4e0d\u53d8\u7684 . \u56e0\u6b64\u4ee3\u7801\u6bb5\u4e2d\u7684\u4efb\u610f\u6307\u4ee4\u5475\u6570\u636e\u6bb5\u4e2d\u4efb\u4f55\u53d8\u91cf\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u662f\u4e00\u4e2a\u8fd0\u884c\u65f6\u5e38\u91cf. Example","title":"PIC \u6570\u636e\u5f15\u7528"},{"location":"CSAPP/7/#pic_1","text":"\u5047\u8bbe\u7a0b\u5e8f\u8c03\u7528\u4e00\u4e2a\u7531\u5171\u4eab\u5e93\u5b9a\u4e49\u7684\u51fd\u6570, \u7f16\u8bd1\u5668\u6ca1\u6cd5\u6b63\u786e\u9884\u6d4b\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd0\u884c\u65f6\u5730\u5740. \u4e8e\u662f\u5b83\u751f\u6210\u4e00\u6761\u91cd\u5b9a\u4f4d\u8bb0\u5f55, \u7136\u540e\u52a8\u6001\u94fe\u63a5\u5668\u5728\u7a0b\u5e8f\u52a0\u8f7d\u65f6\u518d\u89e3\u6790\u5b83. GNU \u7f16\u8bd1\u7cfb\u7edf\u4f7f\u7528\u4e86 \u5ef6\u8fdf\u7ed1\u5b9a(lazy bindng) , \u5c06\u8fc7\u7a0b\u5730\u5740\u7684\u7ed1\u5b9a\u5ef6\u8fdf\u5230\u4e86\u7b2c\u4e00\u6b21\u8c03\u7528\u8be5\u8fc7\u7a0b\u7684\u65f6\u5019. \u6211\u4eec\u91c7\u7528 GOT \u548c \u8fc7\u7a0b\u94fe\u63a5\u8868(Procedure Linkage Table, PLT) \u7684\u65b9\u6cd5, \u5982\u679c\u4e00\u4e2a\u76ee\u6807\u6a21\u5757\u8c03\u7528\u5b9a\u4e49\u5728\u5171\u4eab\u5e93\u4e2d\u7684\u4efb\u4f55\u51fd\u6570, \u90a3\u4e48\u5b83\u5c31\u6709\u81ea\u5df1\u7684 GOT \u548c PLT. PLT : PLT \u662f\u4e00\u4e2a\u6570\u7ec4, \u5176\u4e2d\u6bcf\u4e2a\u6761\u76ee\u90fd\u662f 16 \u5b57\u8282\u4ee3\u7801. PLT[0] \u662f\u4e00\u4e2a\u7279\u6b8a\u6761\u76ee, \u5b83\u8df3\u8f6c\u5230\u52a8\u6001\u94fe\u63a5\u5668\u4e2d. PLT[1] \u8c03\u7528\u7cfb\u7edf\u542f\u52a8\u51fd\u6570\u521d\u59cb\u5316\u6267\u884c\u73af\u5883, \u5176\u4ed6\u6761\u76ee\u8c03\u7528\u7528\u6237\u4ee3\u7801\u8c03\u7528\u7684\u51fd\u6570. GOT : GOT \u662f\u4e00\u4e2a\u6570\u7ec4, \u6bcf\u4e2a\u6761\u76ee\u90fd\u662f 8 \u5b57\u8282\u5730\u5740. GOT[0] \u548c [1] \u662f\u5305\u542b\u52a8\u6001\u94fe\u63a5\u5668\u5728\u89e3\u6790\u51fd\u6570\u5730\u5740\u65f6\u4f1a\u4f7f\u7528\u7684\u4fe1\u606f, GOT[2] \u662f\u52a8\u6001\u94fe\u63a5\u5668\u5728 ld-linux.so \u6a21\u5757\u4e2d\u7684\u5165\u53e3, \u5176\u4f59\u6bcf\u4e2a\u6761\u76ee\u5bf9\u5e94\u4e00\u4e2a\u88ab\u8c03\u7528\u7684\u51fd\u6570. Example","title":"PIC \u51fd\u6570\u8c03\u7528"},{"location":"CSAPP/7/#_21","text":"\u5e93\u6253\u6869(library interpositioning) , \u5141\u8bb8\u622a\u83b7\u5bf9\u5171\u4eab\u5e93\u51fd\u6570\u7684\u8c03\u7528, \u53d6\u800c\u4ee3\u4e4b\u6267\u884c\u81ea\u5df1\u7684\u4ee3\u7801. \u4f7f\u7528\u6253\u6869\u673a\u5236, \u6211\u4eec\u53ef\u4ee5\u8ffd\u8e2a\u5bf9\u67d0\u4e2a\u7279\u6b8a\u5e93\u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570, \u9a8c\u8bc1\u548c\u8ffd\u8e2a\u5b83\u7684\u8f93\u5165\u548c\u8f93\u51fa\u503c, \u6216\u8005\u751a\u81f3\u628a\u5b83\u66ff\u6362\u6210\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u5b9e\u73b0. \u57fa\u672c\u601d\u60f3: \u7ed9\u5b9a\u4e00\u4e2a\u9700\u8981\u6253\u6869\u7684\u76ee\u6807\u51fd\u6570, \u521b\u5efa\u4e00\u4e2a\u5305\u88c5\u51fd\u6570, \u5b83\u7684\u539f\u578b\u4e0e\u76ee\u6807\u51fd\u6570\u5b8c\u5168\u4e00\u6837. \u4f7f\u7528\u67d0\u79cd\u7279\u6b8a\u6253\u6869\u673a\u5236, \u4f60\u5c31\u53ef\u4ee5\u6b3a\u9a97\u7cfb\u7edf\u8c03\u7528\u5305\u88c5\u51fd\u6570\u800c\u4e0d\u662f\u76ee\u6807\u51fd\u6570\u4e86.","title":"\u5e93\u6253\u6869"},{"location":"CSAPP/7/#_22","text":"\u6211\u4eec\u8fd9\u6837\u7f16\u8bd1\u548c\u94fe\u63a5: linux> gcc -DCOMPILETIME -c mymalloc.c linux> gcc -I. -o intc int.c mymalloc.c \u7531\u4e8e\u6709 -I. \u53c2\u6570, \u6240\u4ee5\u4f1a\u8fdb\u884c\u6253\u6869. \u5b83\u544a\u8bc9 C \u9884\u5904\u7406\u5668\u5728\u641c\u7d22\u901a\u5e38\u7684\u7cfb\u7edf\u76ee\u5f55\u4e4b\u524d\u5148\u5728\u5f53\u524d\u76ee\u5f55\u67e5\u627e malloc.h.","title":"\u7f16\u8bd1\u65f6\u6253\u6869"},{"location":"CSAPP/7/#_23","text":"Linux \u9759\u6001\u94fe\u63a5\u5668\u652f\u6301\u7528 --wrap f \u6807\u5fd7\u8fdb\u884c\u94fe\u63a5\u65f6\u6253\u6869. \u8fd9\u4e2a\u7b26\u53f7\u544a\u8bc9\u94fe\u63a5\u5668\u628a\u7b26\u53f7 f \u7684\u5f15\u7528\u89e3\u6790\u6210 __wrap_f(\u524d\u7f00\u4e24\u4e2a\u4e0b\u5212\u7ebf), \u8fd8\u8981\u628a\u5bf9\u7b26\u53f7 __real_f \u7684\u5f15\u7528\u89e3\u6790\u4e3a f. \u7528\u4e0b\u8ff0\u65b9\u6cd5\u7f16\u8bd1: linux> gcc -DLINKTIME -c mymalloc.c linux> gcc -c int.c \u7136\u540e\u94fe\u63a5: linux> gcc -W1,--wrap,malloc -W1,--wrap,free -o int1 int.o mymalloc.i -W1,option \u6807\u5fd7\u628a option \u4f20\u9012\u7ed9\u94fe\u63a5\u5668. option \u4e2d\u6bcf\u4e2a\u90fd\u8981\u66ff\u6362\u4e3a\u4e00\u4e2a\u7a7a\u683c, \u56e0\u6b64 -W1,--wrap,malloc \u5c31\u628a --wrap malloc \u4f20\u9012\u7ed9\u94fe\u63a5\u5668.","title":"\u94fe\u63a5\u65f6\u6253\u6869"},{"location":"CSAPP/7/#_24","text":"\u5982\u679c LD_PRELOAD \u73af\u5883\u53d8\u91cf\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5171\u4eab\u5e93\u8def\u5f84\u540d\u7684\u5217\u8868(\u4ee5\u7a7a\u683c\u6216\u5206\u53f7\u5206\u9694), \u90a3\u4e48\u5f53\u4f60\u52a0\u8f7d\u548c\u6267\u884c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u89e3\u6790\u672a\u5b9a\u4e49\u7684\u5f15\u7528\u65f6, \u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u5148\u641c\u7d22 LD_PRELOAD \u5171\u4eab\u5e93, \u7136\u540e\u624d\u641c\u7d22\u4efb\u4f55\u5176\u4ed6\u7684\u5e93. \u7f16\u8bd1: linux> gcc -DRUNTIME -shared -fpic -o mymalloc.so mymalloc.c -ldl linux> gcc -o intr int.c \u5f53\u8fd0\u884c\u65f6, linux> LD_PRELOAD=\"./mymalloc.so\" ./intr \u5c31\u5b9e\u73b0\u4e86\u6253\u6869.","title":"\u8fd0\u884c\u65f6\u6253\u6869"},{"location":"CSAPP/8/","text":"\u5f02\u5e38\u63a7\u5236\u6d41 \u00b6 \u4ece\u7ed9\u5904\u7406\u5668\u52a0\u7535\u5230\u65ad\u7535, \u7a0b\u5e8f\u8ba1\u6570\u5668\u90fd\u5047\u8bbe\u4e00\u4e2a\u503c\u7684\u5e8f\u5217 \\(a_0, a_1, \\ldots,a_{n-1}\\) \u5176\u4e2d\u6bcf\u4e2a \\(a_k\\) \u662f\u67d0\u4e2a\u76f8\u5e94\u6307\u4ee4 \\(I_k\\) \u7684\u5730\u5740. \u6bcf\u6b21\u4ece \\(a_k\\) \u5230 \\(a_{k+1}\\) \u7684\u8fc7\u6e21\u79f0\u4e3a \u63a7\u5236\u8f6c\u79fb(control transfer) . \u8fd9\u6837\u7684\u63a7\u5236\u8f6c\u79fb\u5e8f\u5217\u79f0\u4e3a\u5904\u7406\u5668\u7684 \u63a7\u5236\u6d41(control flow) . \u5f53\u6bcf\u4e2a \\(I_k\\) \u548c \\(I_{k+1}\\) \u5728\u5185\u5b58\u4e2d\u662f\u76f8\u90bb\u7684, \u5219\u79f0\u8fd9\u79cd\u63a7\u5236\u6d41\u662f \u5e73\u6ed1\u7684 , \u5426\u5219\u5b58\u5728 \u7a81\u53d8 . \u7cfb\u7edf\u4f1a\u901a\u8fc7\u4f7f\u63a7\u5236\u6d41\u7a81\u53d8\u6765\u5bf9\u7cfb\u7edf\u72b6\u6001\u7684\u53d8\u5316\u505a\u51fa\u53cd\u6620, \u6211\u4eec\u628a\u8fd9\u4e9b\u7a81\u53d8\u79f0\u4e3a \u5f02\u5e38\u63a7\u5236\u6d41(Exceptional Control Flow, ECF) . \u5f02\u5e38 \u00b6 \u5f02\u5e38(Exception) \u5c31\u662f\u63a7\u5236\u6d41\u4e2d\u7684\u7a81\u53d8, \u7528\u6765\u54cd\u5e94\u5904\u7406\u5668\u72b6\u6001\u4e2d\u7684\u67d0\u4e9b\u53d8\u5316. \u5728\u5904\u7406\u5668\u4e2d, \u72b6\u6001\u88ab\u7f16\u7801\u4e3a\u4e0d\u540c\u7684\u4f4d\u548c\u865a\u62df\u53f7. \u72b6\u6001\u53d8\u5316\u88ab\u79f0\u4e3a \u4e8b\u4ef6(event) . \u5f02\u5e38\u5904\u7406 \u00b6 \u5f53\u5904\u7406\u5668\u68c0\u6d4b\u5230\u6709\u4e8b\u4ef6\u53d1\u751f\u65f6, \u5b83\u4f1a\u901a\u8fc7\u4e00\u5f20 \u5f02\u5e38\u8868 \u7684\u8df3\u8f6c\u8868, \u8fdb\u884c\u4e00\u4e2a\u95f4\u63a5\u8fc7\u7a0b\u8c03\u7528, \u5230\u4e00\u4e2a\u4e13\u95e8\u5904\u7406\u8fd9\u7c7b\u4e8b\u4ef6\u7684\u64cd\u4f5c\u7cfb\u7edf\u5b50\u7a0b\u5e8f, \u5373 \u5f02\u5e38\u5904\u7406\u7a0b\u5e8f(exception handler) . \u7cfb\u7edf\u4e3a\u53ef\u80fd\u7684\u6bcf\u79cd\u7c7b\u578b\u7684\u5f02\u5e38\u90fd\u5206\u914d\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u975e\u8d1f\u6574\u6570\u7684 \u5f02\u5e38\u53f7 . \u6709\u4e9b\u53f7\u7801\u7531\u5904\u7406\u5668\u8bbe\u8ba1\u8005\u5206\u914d, \u5176\u4ed6\u53f7\u7801\u7531\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u6838\u8bbe\u8ba1\u8005\u5206\u914d, \u5206\u522b\u7528\u6765\u8868\u793a\u4e0d\u540c\u5c42\u6b21\u7684\u5f02\u5e38. \u5f53\u7cfb\u7edf\u542f\u52a8\u65f6, \u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u548c\u521d\u59cb\u5316\u4e00\u5f20 \u5f02\u5e38\u8868 \u7684\u8df3\u8f6c\u8868, \u4f7f\u5f97\u8868\u76ee k \u5305\u542b\u5f02\u5e38 k \u7684\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740. \u5f53\u5904\u7406\u5668\u68c0\u6d4b\u5230\u53d1\u751f\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u5e76\u786e\u5b9a\u5176\u5f02\u5e38\u53f7\u4e3a k, \u5904\u7406\u5668\u6267\u884c\u95f4\u63a5\u8fc7\u7a0b\u8c03\u7528, \u901a\u8fc7\u6761\u76ee k \u8f6c\u5230\u76f8\u5e94\u7684\u5904\u7406\u7a0b\u5e8f. \u5f02\u5e38\u8868\u7684\u8d77\u59cb\u5730\u5740\u653e\u5728 \u5f02\u5e38\u8868\u57fa\u5740\u5bc4\u5b58\u5668 \u7684\u7279\u6b8aCPU\u5bc4\u5b58\u5668\u91cc. \u5f02\u5e38\u7c7b\u4f3c\u4e8e\u8fc7\u7a0b\u8c03\u7528, \u4f46\u6709\u4e00\u4e9b\u4e0d\u540c: \u6839\u636e\u5f02\u5e38\u7684\u7c7b\u578b, \u8fd4\u56de\u5730\u5740\u8981\u4e48\u662f\u5f53\u524d\u6307\u4ee4(\u4e8b\u4ef6\u53d1\u751f\u65f6\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4), \u8981\u4e48\u662f\u4e0b\u4e00\u6761\u6307\u4ee4. \u5904\u7406\u5668\u628a\u4e00\u4e9b\u989d\u5916\u7684\u5904\u7406\u5668\u72b6\u6001\u538b\u5230\u6808\u91cc, \u5728\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u91cd\u65b0\u5f00\u59cb\u6267\u884c\u88ab\u4e2d\u65ad\u7684\u7a0b\u5e8f\u4e5f\u9700\u8981\u8fd9\u4e9b\u72b6\u6001. \u5982\u679c\u63a7\u5236\u4ece\u7528\u6237\u7a0b\u5e8f\u8f6c\u79fb\u5230\u5185\u6838, \u6240\u6709\u8fd9\u4e9b\u9879\u76ee\u88ab\u538b\u5230\u5185\u6838\u6808\u4e2d, \u800c\u4e0d\u662f\u7528\u6237\u6808. \u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u8fd0\u884c\u5728 \u5185\u6838\u6a21\u5f0f \u4e0b, \u5bf9\u6240\u6709\u7684\u7cfb\u7edf\u8d44\u6e90\u6709\u5b8c\u5168\u7684\u8bbf\u95ee\u6743\u9650. \u5f02\u5e38\u7c7b\u578b \u00b6 \u7c7b\u522b \u539f\u56e0 \u5f02\u6b65/\u540c\u6b65 \u8fd4\u56de\u884c\u4e3a \u4e2d\u65ad \u6765\u81eaI/O\u8bbe\u5907\u7684\u4fe1\u53f7 \u5f02\u6b65 \u603b\u662f\u8fd4\u56de\u5230\u4e0b\u4e00\u6761\u6307\u4ee4 \u9677\u9631 \u6709\u610f\u7684\u5f02\u5e38 \u540c\u6b65 \u603b\u662f\u8fd4\u56de\u5230\u4e0b\u4e00\u6761\u6307\u4ee4 \u6545\u969c \u6f5c\u5728\u53ef\u6062\u590d\u7684\u9519\u8bef \u540c\u6b65 \u53ef\u80fd\u8fd4\u56de\u5230\u5f53\u524d\u6307\u4ee4 \u7ec8\u6b62 \u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef \u540c\u6b65 \u4e0d\u4f1a\u8fd4\u56de \u5728 Linux/x86-64\u4e2d\u7684\u5e38\u89c1\u5f02\u5e38: \u5f02\u5e38\u53f7 \u63cf\u8ff0 \u5f02\u5e38\u7c7b\u522b 0 \u9664\u6cd5\u9519\u8bef \u6545\u969c 13 \u4e00\u822c\u4fdd\u62a4\u6545\u969c \u6545\u969c 14 \u7f3a\u9875 \u6545\u969c 18 \u673a\u5668\u68c0\u67e5 \u7ec8\u6b62 32~255 \u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u7684\u5f02\u5e38 \u4e2d\u65ad\u6216\u9677\u9631 \u5f02\u6b65&\u540c\u6b65 \u5f02\u6b65\u5f02\u5e38\u662f\u7531\u4e8e\u5904\u7406\u5668\u5916\u90e8\u72b6\u6001\u53d8\u5316\u800c\u5f15\u8d77\u7684, \u5e76\u975e\u662f\u7531\u4efb\u610f\u4e00\u6761\u4e13\u95e8\u7684\u6307\u4ee4\u9020\u6210. \u540c\u6b65\u5f02\u5e38\u662f\u6267\u884c\u5f53\u524d\u6307\u4ee4\u7684\u7ed3\u679c, \u4e5f\u88ab\u79f0\u4e3a \u6545\u969c\u6307\u4ee4(faulting instruction) . \u4e2d\u65ad \u00b6 \u4e2d\u65ad(Interrupt) \u662f\u5f02\u6b65\u53d1\u751f\u7684, \u662f\u6765\u81ea\u5904\u7406\u5668\u5916\u90e8\u7684 I/O \u8bbe\u5907\u7684\u4fe1\u53f7\u7684\u7ed3\u679c. \u5728 I/O \u8bbe\u5907\u4e2d, \u5411\u5904\u7406\u5668\u82af\u7247\u4e0a\u7684\u4e00\u4e2a\u5f15\u811a\u53d1\u9001\u4fe1\u53f7, \u5e76\u628a\u5f02\u5e38\u53f7\u653e\u5728\u7cfb\u7edf\u603b\u7ebf\u4e0a, \u6765\u89e6\u53d1\u4e2d\u65ad. \u5728\u5f53\u524d\u6307\u4ee4\u6267\u884c\u5b8c\u540e, \u5904\u7406\u5668\u6ce8\u610f\u5230\u4e2d\u65ad\u5f15\u811a\u7684\u7535\u538b\u53d8\u9ad8\u4e86, \u5c31\u4ece\u7cfb\u7edf\u603b\u7ebf\u8bfb\u53d6\u5f02\u5e38\u597d, \u5e76\u8c03\u7528\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f. \u5f53\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u5c06\u63a7\u5236\u8fd4\u56de\u7ed9\u4e0b\u4e00\u6761\u6307\u4ee4. \u9677\u9631(\u7cfb\u7edf\u8c03\u7528) \u00b6 \u9677\u9631(trap) \u662f\u6709\u610f\u7684\u5f02\u5e38, \u662f\u6267\u884c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c. \u9677\u9631\u6700\u91cd\u8981\u7684\u7528\u9014\u662f\u5728\u7528\u6237\u7a0b\u5e8f\u548c\u5185\u6838\u4e4b\u95f4\u63d0\u4f9b\u4e00\u4e2a\u50cf\u8fc7\u7a0b\u4e00\u6837\u7684\u63a5\u53e3, \u79f0\u4e3a \u7cfb\u7edf\u8c03\u7528 . \u5f53\u7528\u6237\u7a0b\u5e8f\u60f3\u8981\u5411\u5185\u6838\u8bf7\u6c42\u670d\u52a1 n \u65f6, \u53ef\u4ee5\u6267\u884c syscall n . \u6267\u884c syscall \u6307\u4ee4\u5bfc\u81f4\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u7684\u9677\u9631, \u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u89e3\u6790\u53c2\u6570, \u5e76\u8c03\u7528\u9002\u5f53\u7684\u5185\u6838\u7a0b\u5e8f. \u6ce8\u610f : \u7cfb\u7edf\u8c03\u7528\u548c\u51fd\u6570\u8c03\u7528\u5b58\u5728\u4e0d\u540c: \u7cfb\u7edf\u8c03\u7528\u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f\u4e0b, \u800c\u51fd\u6570\u8c03\u7528\u8fd0\u884c\u5728\u7528\u6237\u6a21\u5f0f. \u7cfb\u7edf\u8c03\u7528\u90fd\u6709\u5bf9\u5e94\u7684\u6574\u6570\u53f7, \u5bf9\u5e94\u4e00\u4e2a\u5230\u5185\u6838\u4e2d\u8df3\u8f6c\u8868\u7684\u504f\u79fb\u91cf. \u4f46\u8fd9\u4e2a\u8df3\u8f6c\u8868\u548c\u5f02\u5e38\u8868\u4e0d\u540c. \u5728 Linux/x86-64 \u7cfb\u7edf\u4e2d, \u7cfb\u7edf\u8c03\u7528\u901a\u8fc7 syscall \u6267\u884c, \u8be5\u6307\u4ee4\u7684\u53c2\u6570\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012, \u800c\u4e0d\u662f\u6808. \u5176\u4e2d\uff0c%rax \u4e2d\u5305\u542b\u7cfb\u7edf\u8c03\u7528\u53f7, %rdi, %rsi, %rdx, %r10, %r8 \u548c %r9 \u5206\u522b\u7528\u6765\u4fdd\u5b58\u53c2\u6570. \u5f53\u4ece\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u65f6\uff0c\u4f1a\u7834\u574f %rcx \u548c%r11, \u800c\u5c06\u8fd4\u56de\u503c\u4fdd\u5b58\u5728% rax \u4e2d. -4095 \u5230 -1 \u4e4b\u95f4\u7684\u8d1f\u6570\u8fd4\u56de\u503c\u8868\u660e\u53d1\u751f\u4e86\u9519\u8bef, \u5bf9\u5e94\u4e8e\u8d1f\u7684 errno. C \u7a0b\u5e8f\u4e2d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5305\u88c5\u51fd\u6570. \u6211\u4eec\u5c06\u7cfb\u7edf\u8c03\u7528\u4e0e\u5b83\u4eec\u76f8\u5173\u8054\u7684\u5305\u88c5\u51fd\u6570\u90fd\u79f0\u4e3a \u7cfb\u7edf\u7ea7\u51fd\u6570 . \u6545\u969c \u00b6 \u6545\u969c\u7531\u9519\u8bef\u60c5\u51b5\u5f15\u8d77, \u5b83\u53ef\u80fd\u80fd\u591f\u88ab\u6545\u969c\u5904\u7406\u7a0b\u5e8f\u4fee\u6b63. \u6545\u969c\u53d1\u751f\u65f6\u5904\u7406\u5668\u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u6545\u969c\u5904\u7406\u7a0b\u5e8f, \u5982\u679c\u80fd\u591f\u4fee\u6b63, \u5c31\u5c06\u63a7\u5236\u8fd4\u56de\u7ed9\u5f15\u8d77\u6545\u969c\u7684\u6307\u4ee4, \u4ece\u800c\u91cd\u65b0\u6267\u884c\u5b83. \u5982\u679c\u4e0d\u80fd, \u5904\u7406\u7a0b\u5e8f\u5c31\u8fd4\u56de\u5230\u5185\u6838\u4e2d\u7684 abort \u4f8b\u7a0b, \u7ec8\u6b62\u5f15\u8d77\u6545\u969c\u7684\u5e94\u7528\u7a0b\u5e8f. \u7ec8\u6b62 \u00b6 \u7ec8\u6b62\u662f\u4e0d\u53ef\u6062\u590d\u7684\u81f4\u547d\u9519\u8bef\u9020\u6210\u7684\u7ed3\u679c, \u901a\u5e38\u662f\u786c\u4ef6\u9519\u8bef. \u5904\u7406\u5668\u4f1a\u5c06\u63a7\u5236\u8fd4\u56de\u7ed9\u4e00\u4e2a abort \u4f8b\u7a0b, \u8be5\u4f8b\u7a0b\u4f1a\u7ec8\u6b62\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f. \u8fdb\u7a0b \u00b6 \u5f02\u5e38\u662f\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u63d0\u4f9b \u8fdb\u7a0b(process) \u6982\u5ff5\u7684\u57fa\u672c\u6784\u9020\u5757. \u8fdb\u7a0b \u5c31\u662f\u4e00\u4e2a\u6267\u884c\u4e2d\u7a0b\u5e8f\u7684\u5b9e\u4f8b. \u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u8fd0\u884c\u5728\u67d0\u4e2a\u8fdb\u7a0b\u7684 \u4e0a\u4e0b\u6587(context) \u4e2d. \u4e0a\u4e0b\u6587 \u662f\u7531\u7a0b\u5e8f\u6b63\u786e\u8fd0\u884c\u6240\u9700\u8981\u7684\u72b6\u6001\u7ec4\u6210\u7684, \u5b83\u5305\u62ec\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u4ee3\u7801\u6570\u636e, \u6808, \u901a\u7528\u5bc4\u5b58\u5668, \u73af\u5883\u53d8\u91cf\u7b49. \u5f53\u6211\u4eec\u6267\u884c\u8fd0\u884c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6, shell \u5c31\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b, \u7136\u540e\u5728\u65b0\u7684\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u8fd9\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u8fdb\u7a0b\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5173\u952e\u7684\u62bd\u8c61: \u4e00\u4e2a\u72ec\u7acb\u7684\u903b\u8f91\u63a7\u5236\u6d41, \u5b83\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61, \u597d\u50cf\u6211\u4eec\u7684\u7a0b\u5e8f\u72ec\u5360\u4f7f\u7528\u5904\u7406\u5668. \u4e00\u4e2a\u79c1\u6709\u7684\u5730\u5740\u7a7a\u95f4, \u5b83\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61, \u597d\u50cf\u6211\u4eec\u7684\u7a0b\u5e8f\u72ec\u5360\u5730\u4f7f\u7528\u5185\u5b58\u7cfb\u7edf. \u903b\u8f91\u63a7\u5236\u6d41 \u00b6 \u5f53\u6211\u4eec\u7528\u8c03\u8bd5\u5668\u5355\u6b65\u8c03\u8bd5\u7a0b\u5e8f\u65f6, \u6211\u4eec\u4f1a\u770b\u5230\u4e00\u7cfb\u5217\u7a0b\u5e8f\u8ba1\u6570\u5668(PC)\u7684\u503c. \u8fd9\u4e2a PC \u503c\u7684\u5e8f\u5217\u5c31\u53eb\u505a \u903b\u8f91\u63a7\u5236\u6d41 , \u6216\u8005\u7b80\u79f0 \u903b\u8f91\u6d41 . \u5982\u56fe, \u8fd9\u4e2a\u7cfb\u7edf\u8fd0\u884c\u4e86\u4e09\u4e2a\u8fdb\u7a0b, \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u903b\u8f91\u6d41(\u9ed1\u8272\u7ad6\u7ebf). \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e09\u4e2a\u903b\u8f91\u6d41\u662f\u4ea4\u9519\u8fdb\u884c\u7684, \u8fdb\u7a0b\u8f6e\u6d41\u4f7f\u7528\u5904\u7406\u5668. \u6bcf\u4e2a\u8fdb\u7a0b\u6267\u884c\u5b83\u7684\u6d41\u7684\u4e00\u90e8\u5206, \u7136\u540e\u88ab \u62a2\u5360(preempted) (\u6682\u65f6\u6302\u8d77), \u7136\u540e\u8f6e\u5230\u5176\u4ed6\u8fdb\u7a0b. \u4f46\u4ece\u5355\u4e2a\u8fdb\u7a0b\u7684\u89d2\u5ea6, \u5b83\u7684\u903b\u8f91\u6d41\u662f\u8fde\u7eed\u7684, \u610f\u5473\u7740\u6211\u4eec\u63d0\u4f9b\u4e86\u5b83\u72ec\u5360\u5904\u7406\u5668\u7684\u5047\u8c61. \u5e76\u53d1\u6d41 \u4e00\u4e2a\u903b\u8f91\u6d41\u7684\u6267\u884c\u5728\u65f6\u95f4\u4e0a\u4e0e\u53e6\u4e00\u4e2a\u6d41\u91cd\u53e0, \u79f0\u4e3a \u5e76\u53d1\u6d41(concurrent flow) , \u8fd9\u4e24\u4e2a\u6d41\u79f0\u4e3a \u5e76\u53d1\u5730\u8fd0\u884c . \u5373\u5f53\u903b\u8f91\u6d41X\u5728\u903b\u8f91\u6d41Y\u5f00\u59cb\u4e4b\u540e\u548cY\u7ed3\u675f\u4e4b\u524d\u8fd0\u884c, \u6216\u903b\u8f91\u6d41Y\u5728\u903b\u8f91\u6d41X\u5f00\u59cb\u4e4b\u540e\u548cX\u7ed3\u675f\u4e4b\u524d\u8fd0\u884c. e.g. \u4e0a\u56fe\u7684\u4f8b\u5b50\u4e2d\u8fdb\u7a0b A \u548c B, \u4ee5\u53ca\u8fdb\u7a0b A \u548c C \u90fd\u662f\u5e76\u53d1\u8fd0\u884c, \u4f46 B \u548c C \u4e0d\u662f. \u591a\u4e2a\u6d41\u5e76\u53d1\u5730\u6267\u884c\u79f0\u4e3a \u5e76\u53d1 , \u4e00\u4e2a\u8fdb\u7a0b\u548c\u5176\u4ed6\u8fdb\u7a0b\u8f6e\u6d41\u8fd0\u884c\u79f0\u4e3a \u591a\u4efb\u52a1(multitasking) . \u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u5b83\u63a7\u5236\u6d41\u7684\u4e00\u90e8\u5206\u7684\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6bb5\u79f0\u4e3a \u65f6\u95f4\u7247(time slice) . \u56e0\u6b64\u591a\u4efb\u52a1\u4e5f\u53eb \u65f6\u95f4\u5206\u7247(time slicing) . \u6ce8\u610f : \u5e76\u53d1\u6d41\u7684\u601d\u60f3\u548c\u6d41\u8fd0\u884c\u7684\u5904\u7406\u5668\u6838\u6570, \u8ba1\u7b97\u673a\u6570\u65e0\u5173. \u5982\u679c\u4e24\u4e2a\u6d41\u5e76\u53d1\u5730\u8fd0\u884c\u5728\u4e0d\u540c\u5904\u7406\u5668\u6838\u6216\u8005\u8ba1\u7b97\u673a\u4e0a, \u5219\u79f0\u4e3a \u5e76\u884c\u6d41(parallel flow) . \u5e76\u884c\u6d41\u662f\u5e76\u53d1\u6d41\u7684\u771f\u5b50\u96c6. \u79c1\u6709\u5730\u5740\u7a7a\u95f4 \u00b6 \u8fdb\u7a0b\u4e5f\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61, \u597d\u50cf\u5b83\u72ec\u5360\u5730\u4f7f\u7528\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4. \u5730\u5740\u7a7a\u95f4\u662f \\(2^n\\) \u4e2a\u53ef\u80fd\u5730\u5740\u7684\u96c6\u5408, \u548c\u8fd9\u4e2a\u7a7a\u95f4\u4e2d\u67d0\u4e2a\u5730\u5740\u76f8\u5173\u8054\u7684\u5185\u5b58\u5b57\u8282\u662f\u4e0d\u80fd\u88ab\u5176\u4ed6\u8fdb\u7a0b\u8bfb\u6216\u8005\u5199\u7684, \u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\u8fd9\u4e2a\u5730\u5740\u7a7a\u95f4\u662f\u79c1\u6709\u7684. \u7528\u6237\u6a21\u5f0f\u548c\u5185\u6838\u6a21\u5f0f \u00b6 \u5904\u7406\u5668\u4e3a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e24\u79cd\u6a21\u5f0f, \u7528\u6237\u6a21\u5f0f\u548c\u5185\u6838\u6a21\u5f0f, \u5904\u7406\u5668\u901a\u8fc7\u67d0\u4e2a\u63a7\u5236\u5bc4\u5b58\u5668\u7684 \u6a21\u5f0f\u4f4d(model bit) \u6765\u63d0\u4f9b\u8fd9\u79cd\u529f\u80fd. \u5f53\u8bbe\u7f6e\u4e86\u6a21\u5f0f\u4f4d, \u8fdb\u7a0b\u5c31\u8fd0\u884c\u5728 \u5185\u6838\u6a21\u5f0f(\u8d85\u7ea7\u7528\u6237\u6a21\u5f0f) \u4e2d, \u4e00\u4e2a\u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u7684\u8fdb\u7a0b\u53ef\u4ee5\u6267\u884c\u6307\u4ee4\u96c6\u4e2d\u7684\u4efb\u4f55\u6307\u4ee4, \u5e76\u4e14\u53ef\u4ee5\u8bbf\u95ee\u5185\u5b58\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e. \u6ca1\u6709\u8bbe\u7f6e\u6a21\u5f0f\u4f4d, \u8fdb\u884c\u5c31\u8fd0\u884c\u5728 \u7528\u6237\u6a21\u5f0f \u4e2d. \u7528\u6237\u6a21\u5f0f\u7684\u8fdb\u7a0b\u4e0d\u5141\u8bb8\u6267\u884c \u7279\u6743\u6307\u4ee4 , \u4e5f\u4e0d\u5141\u8bb8\u76f4\u63a5\u5f15\u7528\u5730\u5740\u7a7a\u95f4\u4e2d\u5185\u6838\u533a\u5185\u7684\u4ee3\u7801\u548c\u6570\u636e. \u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u8fdb\u7a0b\u521d\u59cb\u4e3a\u7528\u6237\u6a21\u5f0f, \u8fdb\u7a0b\u4ece\u7528\u6237\u6a21\u5f0f\u53d8\u4e3a\u5185\u6838\u6a21\u5f0f\u552f\u4e00\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u5f02\u5e38. \u5f53\u5f02\u5e38\u53d1\u751f\u65f6\u5b83\u53d8\u4e3a\u5185\u6838\u6a21\u5f0f, \u5f53\u5f02\u5e38\u8fd4\u56de\u5230\u5e94\u7528\u7a0b\u5e8f\u65f6\u53c8\u6539\u56de\u5230\u7528\u6237\u6a21\u5f0f. Linux \u901a\u8fc7 /proc \u6587\u4ef6\u7cfb\u7edf, \u5141\u8bb8\u7528\u6237\u6a21\u5f0f\u8fdb\u7a0b\u8bbf\u95ee\u5185\u6838\u6570\u636e\u7ed3\u6784\u7684\u5185\u5bb9. \u4e0a\u4e0b\u6587\u5207\u6362 \u00b6 \u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4f7f\u7528 \u4e0a\u4e0b\u6587\u5207\u6362(context switch) \u7684 \u8f83\u9ad8\u5c42\u6b21\u5f62\u5f0f\u7684\u5f02\u5e38\u63a7\u5236 \u6765\u5b9e\u73b0\u591a\u4efb\u52a1. \u5185\u6838\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u6301\u4e00\u4e2a \u4e0a\u4e0b\u6587 , \u5728\u8fdb\u7a0b\u6267\u884c\u7684\u67d0\u4e9b\u65f6\u523b, \u5185\u6838\u53ef\u4ee5\u51b3\u5b9a\u62a2\u5360\u5f53\u524d\u8fdb\u7a0b, \u5e76\u91cd\u65b0\u5f00\u59cb\u4e00\u4e2a\u5148\u524d\u88ab\u62a2\u5360\u4e86\u7684\u8fdb\u7a0b. \u8fd9\u79cd\u51b3\u7b56\u53eb \u8c03\u5ea6(scheduling) , \u662f\u7531\u5185\u6838\u4e2d\u7684 \u8c03\u5ea6\u5668(scheduler) \u7684\u4ee3\u7801\u5904\u7406\u7684. \u5f53\u5185\u6838\u9009\u62e9\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\u8fdb\u884c\u65f6, \u6211\u4eec\u8bf4\u5185\u6838 \u8c03\u5ea6 \u4e86\u8fd9\u4e2a\u8fdb\u7a0b. \u5728\u5185\u6838\u8c03\u5ea6\u4e86\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u8fd0\u884c\u540e, \u5b83\u5c31\u62a2\u5360\u5f53\u524d\u8fdb\u7a0b, \u5e76\u4f7f\u7528\u4e00\u79cd \u4e0a\u4e0b\u6587\u5207\u6362 \u7684\u673a\u5236\u6765\u8f6c\u79fb\u63a7\u5236\u5230\u65b0\u7684\u8fdb\u7a0b. \u4e0a\u4e0b\u6587\u5207\u6362: \u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u4e0a\u4e0b\u6587 \u6062\u590d\u67d0\u4e2a\u5148\u524d\u88ab\u62a2\u5360\u7684\u8fdb\u7a0b\u88ab\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587 \u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u8fd9\u4e2a\u65b0\u6062\u590d\u7684\u8fdb\u7a0b \u5185\u6838\u4ee3\u8868\u7528\u6237\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\u53ef\u80fd\u56de\u53d1\u751f\u4e0a\u4e0b\u6587\u5207\u6362. \u5982\u679c\u7cfb\u7edf\u8c03\u7528\u56e0\u4e3a\u67d0\u4e2a\u4e8b\u4ef6\u53d1\u751f\u800c\u5835\u585e, \u5185\u6838\u53ef\u4ee5\u8ba9\u5f53\u524d\u8fdb\u7a0b\u4f11\u7720, \u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b. \u4e2d\u65ad\u4e5f\u80fd\u5f15\u53d1\u4e0a\u4e0b\u6587\u5207\u6362. Example \u5982\u4e0a\u56fe\u4e2d, read \u7cfb\u7edf\u8c03\u7528\u9700\u8981\u8bbf\u95ee\u78c1\u76d8, \u5185\u6838\u4e2d\u7684\u9677\u9631\u5904\u7406\u7a0b\u5e8f\u8bf7\u6c42\u6765\u81ea\u78c1\u76d8\u63a7\u5236\u5668\u7684 DMA \u4f20\u9001. \u800c\u78c1\u76d8\u8bfb\u53d6\u4e8b\u4ef6\u6bd4\u8f83\u8017\u65f6, \u5185\u6838\u9009\u62e9\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\u5148\u8fdb\u884c\u53e6\u4e00\u4e2a\u8fdb\u7a0b B. \u5f53\u78c1\u76d8\u8bfb\u53d6\u5b8c\u6210\u540e, \u78c1\u76d8\u53d1\u8d77\u4e2d\u65ad, \u5185\u6838\u5224\u5355\u8fdb\u7a0b B \u5df2\u7ecf\u8fdb\u884c\u4e86\u8db3\u591f\u957f\u7684\u65f6\u95f4, \u5c31\u6267\u884c\u4ece\u8fdb\u7a0b B \u5230\u8fdb\u7a0b A \u7684\u4e0a\u4e0b\u6587\u5207\u6362. \u8fdb\u7a0b\u63a7\u5236 \u00b6 \u9519\u8bef\u5904\u7406 \u00b6 \u5f53 Unix \u7cfb\u7edf\u7ea7\u51fd\u6570\u9047\u5230\u9519\u8bef\u65f6, \u5b83\u4eec\u901a\u5e38\u4f1a\u8fd4\u56de -1, \u5e76\u8bbe\u7f6e\u5168\u5c40\u6574\u6570\u53d8\u91cf errno \u6765\u8868\u793a\u4e3a\u4ec0\u4e48\u51fa\u9519\u4e86. strerror \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6587\u672c\u4e32, \u63cf\u8ff0\u4e86\u548c\u67d0\u4e2a errno \u503c\u76f8\u5173\u8054\u7684\u9519\u8bef. \u6211\u4eec\u901a\u5e38\u4f7f\u7528\u5c01\u88c5\u7684 \u9519\u8bef\u62a5\u544a\u51fd\u6570 : void unix_error ( char * msg ){ fprintf ( stderr , \"%s: %s \\n \" , msg , strerror ( errno )); exit ( 0 ); } pid_t Fork ( void ){ pid_t pid ; if (( pid = fork ()) < 0 ) unix_error ( \"Fork error\" ); return pid ; } \u83b7\u53d6\u8fdb\u7a0b ID \u00b6 \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6b63\u6570(\u975e\u96f6)\u8fdb\u7a0b ID(PID). getpid \u51fd\u6570\u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u7684 PID, getppid \u8fd4\u56de\u5b83\u7236\u8fdb\u7a0b\u7684 PID. #include <unistd.h> #include <sys/types.h> pid_t getpid ( void ); pid_t getppid ( void ); getpid \u548c getppid \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a pid_t \u7684\u6574\u6570\u503c, Linux \u7cfb\u7edf\u5728 types.h \u4e2d\u5b9a\u4e49\u4e3a int. \u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b \u00b6 \u4e00\u4e2a\u8fdb\u7a0b\u6709\u4e09\u79cd\u53ef\u80fd\u7684\u72b6\u6001: \u8fd0\u884c : \u8fdb\u7a0b\u8981\u4e48\u5728 CPU \u4e0a\u6267\u884c, \u8981\u4e48\u5728\u7b49\u5f85\u88ab\u6267\u884c\u4e14\u6700\u7ec8\u4f1a\u88ab\u5185\u6838\u8c03\u5ea6. \u505c\u6b62 : \u8fdb\u7a0b\u7684\u6267\u884c\u88ab \u6302\u8d77(suspended) , \u4e14 \u4e0d\u4f1a\u88ab\u8c03\u5ea6 . \u5f53\u6536\u5230 SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU \u4fe1\u53f7\u65f6\u8fdb\u7a0b\u88ab\u505c\u6b62, \u5e76\u4e14\u4fdd\u6301\u505c\u6b62\u76f4\u5230\u6536\u5230 SIGCONT \u4fe1\u53f7. \u5728\u8fd9\u4e2a\u65f6\u523b\u8fdb\u7a0b\u518d\u6b21\u5f00\u59cb\u8fd0\u884c. \u7ec8\u6b62 : \u8fdb\u7a0b\u6c38\u8fdc\u5730\u505c\u6b62\u4e86. \u539f\u56e0\u5728\u4e8e: \u6536\u5230\u4e00\u4e2a\u4fe1\u53f7, \u4fe1\u53f7\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u7ec8\u6b62\u8be5\u8fdb\u7a0b; \u4ece\u4e3b\u7a0b\u5e8f\u8fd4\u56de; \u8c03\u7528 exit \u51fd\u6570. \u7ec8\u6b62\u8fdb\u7a0b \u00b6 exit \u51fd\u6570\u4ee5 status \u9000\u51fa\u72b6\u6001\u6765\u7ec8\u6b62\u8fdb\u7a0b. #include <stdlib.h> void exit ( int status ); \u521b\u5efa\u8fdb\u7a0b \u00b6 \u7236\u8fdb\u7a0b \u901a\u8fc7\u8c03\u7528\u51fd\u6570 fork \u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fd0\u884c\u7684 \u5b50\u8fdb\u7a0b . #include <unistd.h> #include <sys/types.h> pid_t fork ( void ); fork \u51fd\u6570\u53ea\u88ab\u8c03\u7528\u4e00\u6b21, \u4f46\u5374\u4f1a\u8fd4\u56de\u4e24\u6b21: \u4e00\u6b21\u662f\u5728\u8c03\u7528\u8fdb\u7a0b(\u7236\u8fdb\u7a0b)\u4e2d, \u4e00\u6b21\u662f\u5728\u65b0\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u4e2d. \u5728\u7236\u8fdb\u7a0b\u4e2d fork \u8fd4\u56de\u5b50\u8fdb\u7a0b\u7684 PID; \u5b50\u8fdb\u7a0b\u4e2d fork \u8fd4\u56de 0. \u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5e76\u53d1\u6267\u884c, \u5185\u6838\u80fd\u591f\u4ee5\u4efb\u610f\u65b9\u5f0f\u4ea4\u66ff\u6267\u884c\u5b83\u4eec\u7684\u903b\u8f91\u63a7\u5236\u4e2d\u7684\u6307\u4ee4. \u6211\u4eec\u51b3\u4e0d\u80fd\u5bf9\u4e0d\u540c\u8fdb\u7a0b\u4e2d\u6307\u4ee4\u7684\u4ea4\u66ff\u6267\u884c\u505a\u4efb\u4f55\u5047\u8bbe. \u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u6709 \u76f8\u540c\u4f46\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4 . \u4e24\u4e2a\u8fdb\u7a0b\u6709\u76f8\u540c(\u503c\u76f8\u540c, \u5e76\u975e\u540c\u4e00\u4e2a\u5bf9\u8c61, \u5b50\u8fdb\u7a0b\u5f97\u5230\u7684\u53ea\u662f\u7236\u8fdb\u7a0b\u7684\u4e00\u4e2a\u526f\u672c)\u7684\u7528\u6237\u6808, \u672c\u5730\u53d8\u91cf\u503c, \u5806, \u5168\u5c40\u53d8\u91cf\u503c, \u4ee3\u7801. \u4f46\u540e\u9762\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5bf9\u6570\u636e\u505a\u4efb\u4f55\u6539\u53d8\u90fd\u662f\u72ec\u7acb\u7684. \u5171\u4eab\u6587\u4ef6 . \u5b50\u8fdb\u7a0b\u8fd8\u83b7\u5f97\u4e0e\u7236\u8fdb\u7a0b\u4efb\u4f55\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u540c\u7684\u526f\u672c, \u5373\u5b50\u8fdb\u7a0b\u53ef\u4ee5\u8bfb\u5199\u7236\u8fdb\u7a0b\u6253\u5f00\u7684\u4efb\u4f55\u6587\u4ef6. Example int main () { pid_t pid ; int x = 1 ; pid = Fork (); if ( ! pid ) /* Child */ { printf ( \"child : x=%d \\n \" , ++ x ); exit ( 0 ); } /* Parent */ printf ( \"parent: x=%d \\n \" , -- x ); exit ( 0 ); } \u6211\u4eec\u53ef\u4ee5\u753b\u51fa\u4ed6\u7684\u62d3\u6251\u6392\u5e8f\u56fe: \u800c\u7236\u5b50\u8fdb\u7a0b\u7684 printf \u8c01\u5148\u6267\u884c, \u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u8c03\u5ea6, \u4e0d\u540c\u7684\u7cfb\u7edf\u4e0a\u4f1a\u6709\u4e0d\u540c\u7684\u7ed3\u679c. Example #include <unistd.h> int main () { Fork (); Fork (); printf ( \"hello \\n \" ); exit ( 0 ); } Hint : \u6709 fork \u5b58\u5728\u7684\u7a0b\u5e8f\u6700\u597d\u753b\u51fa\u62d3\u6251\u56fe. \u56de\u6536\u8fdb\u7a0b \u00b6 \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u7ec8\u6b62\u65f6, \u5b83\u4f1a\u4e00\u76f4\u4fdd\u6301\u5728\u5df2\u7ec8\u6b62\u7684\u72b6\u6001\u76f4\u5230\u88ab\u5b83\u7684\u7236\u8fdb\u7a0b \u56de\u6536(reaped) . \u5f53\u7236\u8fdb\u7a0b\u56de\u6536\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u65f6, \u5185\u6838\u5c06\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa\u72b6\u6001\u4f20\u9012\u7ed9\u7236\u8fdb\u7a0b, \u7136\u540e\u629b\u5f03\u5df2\u7ec8\u6b62\u7684\u7236\u8fdb\u7a0b, \u6b64\u65f6\u8be5\u8fdb\u7a0b\u4e0d\u518d\u5b58\u5728\u4e86. \u4e00\u4e2a\u7ec8\u6b62\u4e86\u8fd8\u6ca1\u88ab\u56de\u6536\u7684\u8fdb\u7a0b\u79f0\u4e3a \u50f5\u6b7b\u8fdb\u7a0b(zombie) . \u5982\u679c\u4e00\u4e2a\u7236\u8fdb\u7a0b\u7ec8\u6b62\u4e86, \u5185\u6838\u4f1a\u5b89\u6392 init \u8fdb\u7a0b\u79f0\u8c13\u4ed6\u7684\u5b64\u513f\u8fdb\u7a0b\u7684\u517b\u7236. init \u8fdb\u7a0b\u7684 PID \u4e3a 1, \u662f\u5728\u7cfb\u7edf\u542f\u52a8\u540e\u7531\u5185\u6838\u521b\u5efa\u7684, \u5b83\u4e0d\u4f1a\u7ec8\u6b62, \u662f\u6240\u6709\u8fdb\u7a0b\u7684\u7956\u5148. \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7 waitpid \u51fd\u6570\u6765\u7b49\u5f85\u5b83\u7684\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u6216\u505c\u6b62, \u7236\u8fdb\u7a0b\u4f1a\u5f97\u5230\u88ab\u56de\u6536\u7684\u5b50\u8fdb\u7a0b PID, \u4e14\u5185\u6838\u4f1a\u6e05\u9664\u6b64\u50f5\u6b7b\u8fdb\u7a0b. #include <sys/types.h> #include <sys/wait.h> pid_t waitpid ( pid_t pid , int * statusp , int options ); \u7b49\u5f85\u96c6\u5408 pid pid>0 , \u7b49\u5f85\u96c6\u5408\u5c31\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5b50\u8fdb\u7a0b, \u5b83\u7684\u8fdb\u7a0b PID \u7b49\u4e8e pid. pid=-1 , \u7b49\u5f85\u96c6\u5408\u5c31\u662f\u7531\u7236\u8fdb\u7a0b\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u7ec4\u6210\u7684. \u7b49\u5f85\u884c\u4e3a options 0 \u9ed8\u8ba4\u9009\u9879. waitpid \u6302\u8d77\u8c03\u7528\u8fdb\u7a0b\u7684\u6267\u884c, \u76f4\u5230\u5b83\u7684\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7ec8\u6b62. \u5982\u679c\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u5728\u521a\u8c03\u7528\u7684\u65f6\u523b\u5df2\u7ecf\u7ec8\u6b62\u4e86, \u90a3\u4e48 waitpid \u5c31\u7acb\u523b\u8fd4\u56de. \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5 waitpid \u8fd4\u56de\u5bfc\u81f4 waitpid \u8fd4\u56de\u7684\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u7684 PID. \u6b64\u65f6\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u88ab\u56de\u6536. WNOHANG \u5982\u679c\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b\u90fd\u8fd8\u6ca1\u6709\u7ec8\u6b62, \u90a3\u4e48\u5c31\u7acb\u5373\u8fd4\u56de 0. \u5982\u679c\u60f3\u5728\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u7684\u540c\u65f6\u505a\u4e9b\u5176\u4ed6\u5de5\u4f5c, \u8fd9\u4e2a\u9009\u9879\u4f1a\u6709\u7528. WUNTRACED \u6302\u8d77\u8c03\u7528\u7a0b\u5e8f\u7684\u6267\u884c, \u76f4\u5230\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u53d8\u6210\u5df2\u7ec8\u6b62\u6216\u88ab\u505c\u6b62. WCONTINUED \u6302\u8d77\u8c03\u7528\u7a0b\u5e8f\u7684\u6267\u884c, \u76f4\u5230\u7b49\u5f85\u96c6\u5408\u4e2d\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u7ec8\u6b62\u6216\u8005\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u88ab\u505c\u6b62\u7684\u8fdb\u7a0b\u6536\u5230 SIGCONT \u4fe1\u53f7\u91cd\u65b0\u5f00\u59cb\u6267\u884c. \u6ce8: \u53ef\u4ee5\u7528 | \u5c06\u9009\u9879\u7ed3\u5408. \u68c0\u67e5\u5df2\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa\u72b6\u6001 \u5982\u679c statusp \u53c2\u6570\u975e\u7a7a, waitpid \u4f1a\u5728 status \u4e2d\u653e\u4e0a\u5173\u4e8e\u5bfc\u81f4\u8fd4\u56de\u7684\u5b50\u8fdb\u7a0b\u7684\u72b6\u6001\u4fe1\u606f, status \u662f statusp \u6307\u5411\u7684\u503c. WIFEXITED(status) : \u5982\u679c\u5b50\u8fdb\u7a0b\u901a\u8fc7\u8c03\u7528 exit \u6216\u8005 return \u6b63\u5e38\u7ec8\u6b62\u5c31\u8fd4\u56de true, \u6b64\u65f6\u53ef\u901a\u8fc7 WEXITSTATUS(status) \u83b7\u5f97\u9000\u51fa\u72b6\u6001. WIFSIGNALED(status) : \u5982\u679c\u5b50\u8fdb\u7a0b\u56e0\u4e3a\u4e00\u4e2a\u672a\u88ab\u6355\u83b7\u7684\u4fe1\u53f7\u7ec8\u6b62, \u8fd4\u56de true, \u6b64\u65f6\u53ef\u901a\u8fc7 WTERMSIG(statusp) \u83b7\u5f97\u4fe1\u53f7\u7f16\u53f7. WIFSTOPPED(statusp) : \u5982\u679c\u5f15\u8d77\u51fd\u6570\u8fd4\u56de\u7684\u5b50\u8fdb\u7a0b\u662f\u505c\u6b62\u7684, \u5219\u8fd4\u56de true, \u6b64\u65f6\u53ef\u901a\u8fc7 WSTOPSIG(statusp) \u83b7\u5f97\u5f15\u8d77\u5b50\u8fdb\u7a0b\u505c\u6b62\u7684\u4fe1\u53f7\u7f16\u53f7. WIFCONTINUED(statusp) : \u5982\u679c\u5b50\u8fdb\u7a0b\u6536\u5230 SIGCONT \u4fe1\u53f7\u91cd\u65b0\u8fd0\u884c, \u5219\u8fd4\u56de true. \u5982\u679c\u8c03\u7528\u8fdb\u7a0b\u6ca1\u6709\u5b50\u8fdb\u7a0b, \u90a3\u4e48 waitpid \u8fd4\u56de -1, \u5e76\u8bbe\u7f6e errno \u4e3a ECHILD. \u5982\u679c waitpid \u88ab\u4e00\u4e2a\u4fe1\u53f7\u4e2d\u65ad, \u90a3\u4e48\u5b83\u8fd4\u56de -1, \u5e76\u8bbe\u7f6e errno \u4e3a EINTR. wait \u51fd\u6570\u662f waitpid \u7684\u7b80\u5355\u7248\u672c. #include <sys/types.h> #include <sys/wait.h> pid_t wait ( int * statusp ); \u8c03\u7528 wait(&status) \u7b49\u4ef7\u4e8e\u8c03\u7528 waitpid(-1, &status, 0) Example int main () { if ( Fork () == 0 ) { printf ( \"a\" ); fflush ( stdout ); } else { printf ( \"b\" ); fflush ( stdout ); wait ( NULL ); } pritnf ( \"c\" ); fflush ( stdout ); exit ( 0 ); } \u753b\u51fa\u5176\u62d3\u6251\u56fe: Warning \u7a0b\u5e8f\u4e0d\u4f1a\u6309\u7279\u5b9a\u7684\u987a\u5e8f\u56de\u6536\u5b50\u8fdb\u7a0b. \u8ba9\u8fdb\u7a0b\u4f11\u7720 \u00b6 #include <unistd.h> unsigned int sleep ( unsigned int secs ); int pause ( void ); sleep \u51fd\u6570\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u6302\u8d77\u4e00\u6bb5\u6307\u5b9a\u7684\u65f6\u95f4 \u5982\u679c\u8bf7\u6c42\u7684\u65f6\u95f4\u5230\u4e86, sleep \u5c31\u8fd4\u56de 0, \u5426\u5219\u8fd4\u56de\u8fd8\u5269\u4e0b\u8981\u4f11\u7720\u7684\u65f6\u95f4. \u5f53 sleep \u88ab\u4e00\u4e2a\u4fe1\u53f7\u4e2d\u65ad\u65f6, \u5b83\u53ef\u80fd\u4f1a\u8fc7\u65e9\u7684\u8fd4\u56de. pause \u51fd\u6570\u5c06\u8fdb\u7a0b\u6302\u8d77, \u76f4\u5230\u8be5\u8fdb\u7a0b\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7. \u52a0\u8f7d\u5e76\u8fd0\u884c\u7a0b\u5e8f \u00b6 execve \u51fd\u6570\u5728\u5f53\u524d\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u52a0\u8f7d\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7a0b\u5e8f. #include <unistd.h> int execve ( const char * filename , const char * argv [], const char * envp []); execve \u51fd\u6570\u52a0\u8f7d\u5e76\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6 filename, \u4e14\u5e26\u53c2\u6570\u5217\u8868 argv \u548c\u73af\u5883\u53d8\u91cf\u5217\u8868 envp. \u53ea\u6709\u5f53\u51fa\u73b0\u9519\u8bef( e.g. \u627e\u4e0d\u5230 filename), execve \u624d\u4f1a\u8fd4\u56de\u5230\u8c03\u7528\u7a0b\u5e8f. \u52a0\u8f7d filename \u540e, \u8c03\u7528\u542f\u52a8\u4ee3\u7801, \u5e76\u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u65b0\u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570. argv \u53d8\u91cf\u6307\u5411\u4e00\u4e2a\u4ee5 null \u7ed3\u5c3e\u7684\u6307\u9488\u6570\u7ec4, \u5176\u4e2d\u6bcf\u4e2a\u6307\u9488\u90fd\u6307\u5411\u4e00\u4e2a\u53c2\u6570\u5b57\u7b26\u4e32, envp\u7c7b\u4f3c. \u7528\u6237\u6808\u7684\u7ec4\u7ec7\u7ed3\u6784: \u5176\u4e2d\u5168\u5c40\u53d8\u91cf environ \u6307\u5411 envp[0], \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 environ \u6765\u83b7\u5f97\u73af\u5883\u5217\u8868. \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e9b\u51fd\u6570\u80fd\u591f\u5bf9\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c: #include <stdlib.h> char * getenv ( const char * name ); //\u83b7\u5f97\u540d\u5b57\u4e3aname\u7684\u73af\u5883\u503c int setenv ( const char * name , const char * newvalue , int overwrite ); //\u5bf9\u73af\u5883\u503c\u8fdb\u884c\u4fee\u6539 int unsetenv ( const char * name ); // \u5220\u9664\u73af\u5883\u53d8\u91cf fork & execve fork \u51fd\u6570\u65b0\u5efa\u4e00\u4e2a\u4e0d\u540c PID \u7684\u5b50\u8fdb\u7a0b\uff0c\u5177\u6709\u548c\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u4e0a\u4e0b\u6587\uff0c\u662f\u7236\u8fdb\u7a0b\u7684\u590d\u5236\u54c1\uff0c\u8fd0\u884c\u76f8\u540c\u7684\u4ee3\u7801\u3001\u7a0b\u5e8f\u548c\u53d8\u91cf\uff0c\u5c31\u662f\u7a0b\u5e8f\u4e0d\u53d8\uff0c\u800c\u5728\u4e0d\u540c\u8fdb\u7a0b. \u800c execve \u51fd\u6570\u4fdd\u6301 PID \u4e0d\u53d8\uff0c\u5728\u5f53\u524d\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u52a0\u8f7d\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7a0b\u5e8f\uff0c\u4f1a\u8986\u76d6\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5e76\u7ee7\u627f\u8c03\u7528 execve \u51fd\u6570\u65f6\u5df2\u6253\u5f00\u7684\u6240\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5c31\u662f\u4fdd\u6301\u8fdb\u7a0b\u4e0d\u53d8\uff0c\u4f46\u662f\u8fd0\u884c\u5b8c\u5168\u4e0d\u540c\u7684\u7a0b\u5e8f. fork \u51fd\u6570\u8c03\u7528\u4e00\u6b21\u8fd4\u56de\u4e24\u6b21\uff0c\u800c execve \u51fd\u6570\u8c03\u7528\u540e\uff0c\u53ea\u6709\u51fa\u73b0\u9519\u8bef\u624d\u4f1a\u8fd4\u56de\u5230\u8c03\u7528\u7a0b\u5e8f. \u60f3\u8981\u4fdd\u6301\u5f53\u524d\u8fdb\u884c\u8fd0\u884c\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7 fork \u65b0\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u7136\u540e\u5728\u5b50\u8fdb\u7a0b\u4e2d\u7528 execve \u6267\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6b64\u65f6\u5728\u7236\u8fdb\u7a0b\u5c31\u8fd0\u884c\u539f\u6765\u7684\u7a0b\u5e8f\uff0c\u800c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5c31\u8fd0\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f. \u4fe1\u53f7 \u00b6 \u4fe1\u53f7 \u5c31\u662f\u4e00\u6761\u5c0f\u6d88\u606f, \u5b83\u901a\u77e5\u8fdb\u7a0b\u7cfb\u7edf\u4e2d\u53d1\u751f\u4e86\u4e00\u4e2a\u67d0\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6. \u5185\u6838\u68c0\u6d4b\u5230\u4e86\u4e00\u4e2a\u7cfb\u7edf\u4e8b\u4ef6\uff0c\u6bd4\u5982\u9664\u96f6\u9519\u8bef\u3001\u6267\u884c\u975e\u6cd5\u6307\u4ee4\u6216\u5b50\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u4f4e\u5c42\u6b21\u7684\u786c\u4ef6\u5f02\u5e38\u90fd\u662f\u7531\u5185\u6838\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5904\u7406\u7684\uff0c\u5bf9\u7528\u6237\u8fdb\u7a0b\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u7ed9\u7528\u6237\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u7684\u5f62\u5f0f\u6765\u544a\u77e5\uff0c\u6bd4\u5982\u9664\u96f6\u9519\u8bef\u5c31\u53d1\u9001 SIGFPE \u4fe1\u53f7\uff0c\u6267\u884c\u975e\u6cd5\u6307\u4ee4\u5c31\u53d1\u9001 SIGILL \u4fe1\u53f7\uff0c\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u5185\u6838\u5c31\u53d1\u9001 SIGHLD \u5230\u7236\u8fdb\u7a0b\u4e2d\uff0c\u5219\u6b64\u65f6\u7236\u8fdb\u7a0b\u5c31\u80fd\u5bf9\u8be5\u5b50\u8fdb\u7a0b\u8c03\u7528 waitpid \u6765\u8fdb\u884c\u56de\u6536. \u5185\u6838\u6216\u5176\u4ed6\u8fdb\u7a0b\u51fa\u73b0\u4e86\u8f83\u9ad8\u5c42\u6b21\u7684\u8f6f\u4ef6\u4e8b\u4ef6\uff0c\u6bd4\u5982\u8f93\u5165\u7ec4\u5408\u952e\uff0c\u6216\u4e00\u4e2a\u8fdb\u7a0b\u5c1d\u8bd5\u7ec8\u6b62\u5176\u4ed6\u8fdb\u7a0b\uff0c\u90fd\u662f\u663e\u793a\u8981\u6c42\u5185\u6838\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\u7ed9\u76ee\u6807\u8fdb\u7a0b\uff0c\u6bd4\u5982\u8f93\u5165\u7ec4\u5408\u952e\u5185\u6838\u4f1a\u53d1\u9001 SIGINT \u4fe1\u53f7\u7ed9\u6240\u6709\u8fdb\u7a0b\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u53d1\u9001 SIGKILL \u4fe1\u53f7\u7ed9\u522b\u7684\u8fdb\u7a0b\u6765\u8fdb\u884c\u7ec8\u6b62. \u6ce8: \u5f02\u5e38\u662f\u7531\u786c\u4ef6\u548c\u8f6f\u4ef6\u5171\u540c\u5b9e\u73b0, \u800c\u4fe1\u53f7\u5b8c\u5168\u7531\u8f6f\u4ef6\u5b9e\u73b0, \u4e14\u90fd\u662f\u7531\u5185\u6838\u53d1\u9001. \u5982\u4e0b\u662f Linux \u7cfb\u7edf\u652f\u6301\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u4fe1\u53f7, \u6bcf\u79cd\u4fe1\u53f7\u90fd\u5bf9\u5e94\u67d0\u79cd\u7cfb\u7edf\u4e8b\u4ef6. \u4f20\u9001\u4e00\u4e2a\u4fe1\u53f7\u5230\u76ee\u7684\u8fdb\u7a0b\u662f\u7531\u4e24\u4e2a\u6b65\u9aa4\u7ec4\u6210: \u53d1\u9001\u4fe1\u53f7 \u5185\u6838\u901a\u8fc7\u66f4\u65b0\u76ee\u7684\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u7684\u67d0\u4e2a\u72b6\u6001, \u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\u7ed9\u76ee\u7684\u8fdb\u7a0b. \u53d1\u9001\u4fe1\u53f7\u53ef\u80fd\u6709\u4e24\u79cd\u539f\u56e0: \u5185\u6838\u68c0\u6d4b\u5230\u4e00\u4e2a\u7cfb\u7edf\u65f6\u95f4(\u5982\u9664\u96f6, \u5b50\u8fdb\u7a0b\u7ec8\u6b62); \u4e00\u4e2a\u8fdb\u7a0b\u8c03\u7528\u4e86 kill \u51fd\u6570, \u663e\u5f0f\u5730\u8981\u6c42\u5185\u6838\u53d1\u9001\u4fe1\u53f7. \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u53d1\u4fe1\u53f7\u7ed9\u4ed6\u81ea\u5df1. \u63a5\u6536\u4fe1\u53f7 \u5f53\u76ee\u7684\u8fdb\u7a0b\u88ab\u5185\u6838\u5f3a\u8feb\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5bf9\u4fe1\u53f7\u7684\u53d1\u9001\u505a\u51fa\u53cd\u5e94\u65f6, \u5b83\u5c31\u63a5\u53d7\u4e86\u4fe1\u53f7. \u8fdb\u7a0b\u53ef\u4ee5\u5ffd\u7565\u4fe1\u53f7, \u7ec8\u6b62\u8fdb\u7a0b, \u6216\u6267\u884c \u7528\u6237\u7ea7 \u7684 \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f . \u4e00\u4e2a\u53d1\u51fa\u800c\u6ca1\u6709\u63a5\u6536\u7684\u4fe1\u53f7\u53eb\u505a \u5f85\u5904\u7406\u4fe1\u53f7(pending signal) . \u4efb\u4f55\u65f6\u523b\u4e00\u79cd\u7c7b\u578b\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u5f85\u5904\u7406\u4fe1\u53f7. \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u6709\u7c7b\u578b k \u7684\u5f85\u5904\u7406\u4fe1\u53f7, \u90a3\u4e48\u63a5\u4e0b\u6765\u4efb\u4f55\u53d1\u5230\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u7c7b\u578b k \u4fe1\u53f7\u5c06\u88ab\u76f4\u63a5\u4e22\u5f03. \u5f53\u4e00\u79cd\u4fe1\u53f7\u88ab \u5835\u585e \u65f6, \u5b83\u4ecd\u7136\u53ef\u4ee5\u88ab\u53d1\u9001, \u53ea\u662f\u4e0d\u4f1a\u88ab\u63a5\u6536. \u4e00\u4e2a\u5f85\u5904\u7406\u4fe1\u53f7\u6700\u591a\u88ab\u63a5\u53d7\u4e00\u6b21. \u53d1\u9001\u4fe1\u53f7 \u00b6 Unix \u63d0\u4f9b\u5411\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u7684\u673a\u5236, \u90fd\u662f\u57fa\u4e8e \u8fdb\u7a0b\u7ec4(process group) . \u8fdb\u7a0b\u7ec4 \u00b6 \u6bcf\u4e2a\u8fdb\u7a0b\u53ea\u5c5e\u4e8e\u4e00\u4e2a\u8fdb\u7a0b\u7ec4, \u8fdb\u7a0b\u7ec4\u7531\u4e00\u4e2a\u6b63\u6574\u6570\u8fdb\u7a0b\u7ec4 ID \u6765\u6807\u8bc6. getpgrp \u51fd\u6570\u8fd4\u56de\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u7ec4 ID. #include <unistd.h> pid_t getpgrp ( void ); //\u8fd4\u56de\u6240\u5728\u7684\u8fdb\u7a0b\u7ec4 \u9ed8\u8ba4\u5730, \u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fdb\u7a0b\u7ec4. \u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u53ef\u4ee5\u901a\u8fc7 set-pgid \u51fd\u6570\u6765\u6539\u53d8\u81ea\u5df1\u6216\u5176\u4ed6\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u7ec4. #include <unistd.h> int setpgip ( pid_t pid , pid_t pgid ); //\u8bbe\u7f6e\u8fdb\u7a0b\u7ec4 setpgid \u51fd\u6570\u5c06\u8fdb\u7a0b pid \u7684\u8fdb\u7a0b\u7ec4\u6539\u4e3a pgid. \u5982\u679c pid \u662f 0, \u90a3\u4e48\u5c31\u4f7f\u7528\u5f53\u524d\u8fdb\u7a0b\u7684 PID. \u5982\u679c pgid \u662f 0, \u90a3\u4e48\u5c31\u7528 pid \u6307\u5b9a\u7684\u8fdb\u7a0b PID \u4f5c\u4e3a\u8fdb\u7a0b\u7ec4 ID(\u521b\u5efa/\u52a0\u5165\u4e00\u4e2a\u8fdb\u7a0b\u7ec4 ID \u4e3a pid \u7684\u8fdb\u7a0b\u7ec4). Unix shell \u4f7f\u7528 \u4f5c\u4e1a(job) \u7684\u6982\u5ff5\u6765\u8868\u793a\u5bf9\u4e00\u6761\u547d\u4ee4\u884c\u6c42\u503c\u800c\u521b\u5efa\u7684\u8fdb\u7a0b. \u5728\u4efb\u4f55\u65f6\u523b\u81f3\u591a\u6709\u4e00\u4e2a\u524d\u53f0\u4f5c\u4e1a\u548c\u4efb\u610f\u4e2a\u540e\u53f0\u4f5c\u4e1a. shell \u4f1a\u4e3a\u6bcf\u4e2a\u4f5c\u4e1a\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u8fdb\u7a0b\u7ec4, \u8be5\u8fdb\u7a0b\u7ec4 ID \u7531\u8be5\u4f5c\u4e1a\u4e2d\u4efb\u610f\u4e00\u4e2a\u7236\u8fdb\u7a0b\u7684 PID \u51b3\u5b9a. \u53d1\u9001\u4fe1\u53f7 \u00b6 \u7528 /bin/kill \u53d1\u9001\u4fe1\u53f7 /bin/kill [-\u4fe1\u53f7\u7f16\u53f7] id \u53ef\u4ee5\u5411\u53e6\u5916\u7684\u8fdb\u7a0b\u53d1\u9001\u4efb\u610f\u7684\u4fe1\u53f7. e.g. linux> /bin/kill -9 15213 \u53d1\u9001\u4fe1\u53f7 9(SIGKILL)\u7ed9\u8fdb\u7a0b 15213. \u4e00\u4e2a\u4e3a\u8d1f\u7684 PID \u4f1a\u5bfc\u81f4\u4fe1\u53f7\u88ab\u53d1\u9001\u5230\u8fdb\u7a0b\u7ec4 PID \u7684\u6bcf\u4e2a\u8fdb\u7a0b. e.g. linux> /bin/kill -0 -15213 \u53d1\u9001\u4fe1\u53f7\u5230\u8fdb\u7a0b\u7ec4 15213 \u7684\u6bcf\u4e2a\u8fdb\u7a0b. \u6ce8: \u6211\u4eec\u4f7f\u7528\u5b8c\u6574\u8def\u5f84 /bin/kill , \u56e0\u4e3a\u6709\u4e9b Unix shell \u6709\u81ea\u5df1\u5185\u7f6e\u7684 kill \u6307\u4ee4. \u4ece\u952e\u76d8\u53d1\u9001\u4fe1\u53f7 \u5728\u952e\u76d8\u4e0a\u8f93\u5165 Ctrl+C \u4f1a\u5bfc\u81f4\u5185\u6838\u53d1\u9001\u4e00\u4e2a SIGINT \u4fe1\u53f7\u5230 \u524d\u53f0 \u8fdb\u7a0b\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u7ec8\u6b62\u524d\u53f0\u4f5c\u4e1a. \u7c7b\u4f3c\u5730, \u8f93\u5165 Ctrl+Z \u4f1a\u53d1\u9001\u4e00\u4e2a SIGTSTP \u4fe1\u53f7\u5230\u524d\u53f0\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b. \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7ed3\u679c\u662f\u505c\u6b62(\u6302\u8d77)\u524d\u53f0\u4f5c\u4e1a. \u7528 kill \u51fd\u6570\u53d1\u9001\u4fe1\u53f7 \u8fdb\u7a0b\u901a\u8fc7\u8c03\u7528 kill \u51fd\u6570\u53d1\u9001\u4fe1\u53f7\u7ed9\u5176\u4ed6\u8fdb\u7a0b(\u5305\u62ec\u5b83\u4eec\u81ea\u5df1) #include <sys/types.h> #include <signal.h> int kill ( pid_t pid , int sig ); \u5982\u679c pid \u5927\u4e8e 0, \u90a3\u4e48 kill \u51fd\u6570\u53d1\u9001\u4fe1\u53f7 sig \u7ed9\u8fdb\u7a0b pid. \u5982\u679c pid \u7b49\u4e8e 0, \u90a3\u4e48 kill \u53d1\u9001\u4fe1\u53f7\u7ed9\u8c03\u7528\u8fdb\u7a0b\u7ec4\u6240\u5728\u7684\u6bcf\u4e2a\u8fdb\u7a0b(\u5305\u62ec\u8c03\u7528\u8fdb\u7a0b\u81ea\u5df1) \u5982\u679c pid \u5c0f\u4e8e 0, kill \u53d1\u9001\u4fe1\u53f7\u7ed9\u8fdb\u7a0b\u7ec4 \\({\\left|pid\\right|}\\) \u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b. \u7528 alarm \u51fd\u6570\u53d1\u9001\u4fe1\u53f7 \u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 alarm \u51fd\u6570\u5411\u5b83\u81ea\u5df1\u53d1\u9001 SIGALRM \u4fe1\u53f7. #include <unistd.h> unsigned int alarm ( unsigned int secs ); alarm \u51fd\u6570\u5b89\u6392\u5185\u6838\u5728 secs \u79d2\u540e\u53d1\u9001\u4e00\u4e2a SIGALRM \u4fe1\u53f7\u7ed9\u8c03\u7528\u8fdb\u7a0b. \u4e00\u4e2a\u8fdb\u7a0b\u53ea\u80fd\u6709\u4e00\u4e2a\u95f9\u949f, \u5982\u679c\u5728\u8c03\u7528 alarm \u524d\u5df2\u7ecf\u6709\u5f85\u5904\u7406\u7684\u95f9\u949f, \u5219\u66ff\u6362\u5b83\u5e76\u8fd4\u56de\u5f85\u5904\u7406\u95f9\u949f\u5269\u4f59\u7684\u65f6\u95f4. secs \u5982\u679c\u4e3a 0 \u5219\u4e0d\u4f1a\u5b89\u6392\u65b0\u7684\u95f9\u949f. \u63a5\u6536\u4fe1\u53f7 \u00b6 \u5f53\u5185\u6838\u628a\u8fdb\u7a0b p \u4ece\u5185\u6838\u6a21\u5f0f\u5207\u6362\u5230\u7528\u6237\u6a21\u5f0f\u65f6(\u4f8b\u5982\u4ece\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u6216\u8005\u5b8c\u6210\u4e00\u6b21\u4e0a\u4e0b\u6587\u5207\u6362), \u5b83\u4f1a\u68c0\u67e5\u8fdb\u7a0b p \u7684\u672a\u88ab\u963b\u585e\u7684\u5f85\u5904\u7406\u4fe1\u53f7\u7684\u96c6\u5408, \u5373 pending & ~blocked \u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u4e3a\u7a7a, \u90a3\u4e48\u5185\u6838\u5c06\u63a7\u5236\u4f20\u9012\u5230 p \u7684\u903b\u8f91\u63a7\u5236\u6d41\u7684\u4e0b\u4e00\u6761\u6307\u4ee4. \u5982\u679c\u96c6\u5408\u975e\u7a7a, \u5185\u6838\u9009\u62e9\u96c6\u5408\u4e2d\u67d0\u4e2a\u4fe1\u53f7 k(\u901a\u5e38\u662f\u6700\u5c0f\u7684 k)\u5e76\u5f3a\u5236 p \u63a5\u6536\u4fe1\u53f7 k, \u5b8c\u6210\u4fe1\u53f7\u5bf9\u5e94\u7684\u884c\u4e3a, \u518d\u5c06\u63a7\u5236\u8f6c\u79fb\u5230 p \u903b\u8f91\u6d41\u7684\u4e0b\u4e00\u6761\u6307\u4ee4. \u6bcf\u4e2a\u4fe1\u53f7\u7c7b\u578b\u90fd\u6709\u4e00\u79cd\u9884\u5b9a\u4e49\u7684 \u9ed8\u8ba4\u884c\u4e3a : \u8fdb\u7a0b\u7ec8\u6b62 \u8fdb\u7a0b\u7ec8\u6b62\u5e76\u8f6c\u50a8\u5185\u5b58 \u8fdb\u7a0b\u505c\u6b62(\u6302\u8d77)\u76f4\u5230\u88ab SIGCONT \u4fe1\u53f7\u91cd\u542f \u8fdb\u7a0b\u5ffd\u7565\u8be5\u4fe1\u53f7 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 signal \u51fd\u6570\u4fee\u6539\u4e0e\u4fe1\u53f7\u76f8\u5173\u8054\u7684\u9ed8\u8ba4\u884c\u4e3a.( SIGSTOP``SIGKILL \u5b83\u4eec\u7684\u9ed8\u8ba4\u884c\u4e3a\u4e0d\u80fd\u88ab\u4fee\u6539) #include <signal.h> typedef void ( * sighandler_t )( int ); sighandler_t signal ( int signum , sighandler_t handler ); \u5982\u679c handler \u662f SIG_IGN , \u90a3\u4e48\u5ffd\u7565\u7c7b\u578b\u4e3a signum \u7684\u4fe1\u53f7. \u5982\u679c handler \u662f SIG_DFL , \u90a3\u4e48\u7c7b\u578b\u4e3a signum \u7684\u4fe1\u53f7\u884c\u4e3a\u6062\u590d\u4e3a\u9ed8\u8ba4\u884c\u4e3a. \u5426\u5219 handler \u4e3a\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u5730\u5740, \u8fd9\u4e2a\u51fd\u6570\u79f0\u4e3a \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f . \u5f53\u63a5\u6536\u5230 signum \u4fe1\u53f7\u65f6\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u7a0b\u5e8f. \u8fd9\u79cd\u884c\u4e3a\u53eb \u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f .(\u540c\u4e00\u4e2a\u5904\u7406\u51fd\u6570\u53ef\u4ee5\u6355\u83b7\u591a\u79cd\u7c7b\u578b\u7684\u4fe1\u53f7) \u8c03\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u79f0\u4e3a \u6355\u83b7\u4fe1\u53f7 , \u6267\u884c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u79f0\u4e3a \u5904\u7406\u4fe1\u53f7 . \u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u63a7\u5236(\u901a\u5e38)\u4f20\u9012\u56de\u63a7\u5236\u6d41\u4e2d\u4e0b\u4e00\u6761\u6307\u4ee4. \u5f53 signal \u6267\u884c\u6210\u529f, \u8fd4\u56de\u4e4b\u524d signal handler \u7684\u503c, \u5426\u5219\u8fd4\u56de SIG_ERR (\u4e0d\u8bbe\u7f6e errno) Warning \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u5176\u4ed6\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u65ad. Warning \u5728 fork + execve \u540e, \u5b50\u8fdb\u7a0b\u8fdb\u5165\u5230\u65b0\u7684\u4e0a\u4e0b\u6587\u91cc, \u6b64\u65f6\u539f\u5148\u7ed1\u5b9a\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e0d\u518d\u751f\u6548, \u800c\u662f\u56de\u5230\u9ed8\u8ba4\u72b6\u6001. \u963b\u585e\u4fe1\u53f7 \u00b6 \u963b\u585e, \u6307\u4fe1\u53f7\u88ab\u53d1\u9001\u540e\u6682\u4e0d\u63a5\u6536(\u5904\u7406)\u6b64\u4fe1\u53f7, \u800c\u975e\u4e22\u5f03. Linux \u63d0\u4f9b\u663e\u5f0f\u548c\u9690\u5f0f\u7684\u963b\u585e\u673a\u5236. \u9690\u5f0f\u963b\u585e\u673a\u5236 : \u5185\u6838\u9ed8\u8ba4\u963b\u585e\u4efb\u4f55\u5f53\u524d\u5904\u7406\u7a0b\u5e8f\u6b63\u5728\u5904\u7406\u4fe1\u53f7\u7c7b\u578b\u7684\u5f85\u5904\u7406\u7684\u4fe1\u53f7. e.g. \u7a0b\u5e8f\u6355\u83b7\u4e86\u4fe1\u53f7 s, \u6b63\u5728\u6267\u884c\u5176\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f, \u8fd9\u65f6\u518d\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7 s, s \u4f1a\u53d8\u6210\u5f85\u5904\u7406\u800c\u4e0d\u662f\u88ab\u63a5\u6536. \u663e\u5f0f\u963b\u585e\u673a\u5236 : \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528 sigprocmask \u51fd\u6570\u548c\u5b83\u7684\u8f85\u52a9\u51fd\u6570, \u663e\u5f0f\u5730\u963b\u585e\u548c\u89e3\u9664\u963b\u585e\u9009\u5b9a\u7684\u4fe1\u53f7. #include <signal.h> int sigprocmask ( int how , const sigset_t * set , sigset_t * oldset ); sigprocmask \u51fd\u6570\u6539\u53d8\u5f53\u524d\u963b\u585e\u4fe1\u53f7\u7684\u96c6\u5408(blocked \u4f4d\u5411\u91cf). \u901a\u8fc7 how \u7684\u503c\u6765\u51b3\u5b9a\u6539\u53d8\u96c6\u5408\u7684\u65b9\u5f0f: SIG_BLOCK : \u628a set \u4e2d\u7684\u4fe1\u53f7\u6dfb\u52a0\u5230 blocked \u4e2d. blocked = blocked | set SIG_UNBLOCK : \u4ece blocked \u4e2d\u5220\u9664 set \u4e2d\u7684\u4fe1\u53f7. blocked = blocked & ~set SIG_SETMASK : blocked = mask \u5982\u679c oldset \u975e\u7a7a, \u90a3\u4e48 blocked \u4f4d\u5411\u91cf\u4e4b\u524d\u7684\u503c\u4fdd\u5b58\u5728 oldset \u4e2d. \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u51fd\u6570\u5bf9 set \u4fe1\u53f7\u96c6\u5408\u8fdb\u884c\u64cd\u4f5c: int sigemptyset ( sigset_t * set ); int sigfillset ( sigset_t * set ); int sigaddset ( sigset_t * set , int signum ); int sigdelset ( sigset_t * set , int signum ); int sigismember ( const sigset_t * set , int signum ); sigemptyset : \u521d\u59cb\u5316 set \u4e3a\u7a7a\u96c6\u5408 sigfillset : \u5c06\u6bcf\u4e2a\u4fe1\u53f7\u90fd\u6dfb\u52a0\u5230 set \u4e2d sigaddset : \u5c06 sigunm \u6dfb\u52a0\u5230 set sigdelset : \u4ece set \u4e2d\u5220\u9664 signum sigismember : \u5982\u679c signum \u662f set \u7684\u6210\u5458\u5219\u8fd4\u56de 1, \u5426\u5219\u8fd4\u56de 0. \u7f16\u5199\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f \u00b6 \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6709\u51e0\u4e2a\u68d8\u624b\u5c5e\u6027\u4f7f\u5f97\u4ed6\u4eec\u5f88\u96be\u5206\u6790: \u5904\u7406\u7a0b\u5e8f\u4e0e\u4e3b\u7a0b\u5e8f\u5728 \u76f8\u540c\u7684\u8fdb\u7a0b \u4e2d \u5e76\u53d1\u8fd0\u884c , \u5171\u4eab\u540c\u6837\u7684\u5168\u5c40\u53d8\u91cf. \u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u63a5\u6536\u4fe1\u53f7\u5e38\u5e38\u6709\u8fdd\u4eba\u7684\u76f4\u89c9 \u4e0d\u540c\u7684\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u8bed\u4e49 \u5b89\u5168\u7684\u4fe1\u53f7\u5904\u7406 \u00b6 \u5904\u7406\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u7b80\u5355 . e.g. \u5904\u7406\u7a0b\u5e8f\u53ea\u662f\u7b80\u5355\u5730\u8bbe\u7f6e\u5168\u5c40\u6807\u5fd7\u5e76\u7acb\u5373\u53d1\u6325; \u6240\u6709\u4e0e\u63a5\u6536\u4fe1\u53f7\u76f8\u5173\u7684\u5904\u7406\u90fd\u7531\u4e3b\u7a0b\u5e8f\u6267\u884c, \u5b83\u5468\u671f\u6027\u5730\u68c0\u67e5(\u5e76\u91cd\u7f6e)\u8fd9\u4e2a\u6807\u5fd7. \u5728\u5904\u7406\u7a0b\u5e8f\u4e2d\u53ea\u8c03\u7528\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570 . \u56e0\u4e3a\u5b83\u662f \u53ef\u91cd\u5165 \u7684(\u4f8b\u5982\u53ea\u8bbf\u95ee\u5c40\u90e8\u53d8\u91cf), \u8981\u4e48\u5b83\u662f\u4e0d\u80fd\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u65ad\u7684. \u4e0b\u56fe\u5217\u51fa\u4e86 Linux \u5b89\u5168\u7684\u7cfb\u7edf\u7ea7\u51fd\u6570. \u6ce8\u610f\u8bb8\u591a\u5e38\u89c1\u7684\u51fd\u6570(printf, sprintf, malloc, exit)\u90fd\u4e0d\u5728\u6b64\u5217. SIO(\u5b89\u5168\u7684 I/O \u5305) \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u4ea7\u751f\u8f93\u51fa\u552f\u4e00\u5b89\u5168\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 write \u51fd\u6570. #include \"csapp.h\" ssize_t sio_putl ( long v ); ssize_t sio_puts ( char s []); //\u5982\u679c\u6210\u529f\u5219\u8fd4\u56de\u4f20\u9001\u7684\u5b57\u8282\u6570, \u51fa\u9519\u8fd4\u56de -1 void sio_error ( char s []); \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b: ssize_t sio_puts ( char s []) { return write ( STDOUT_FILENO , s , sio_strlen ( s )); } ssize_t sio_putl ( long v ) { char s [ 128 ]; sio_ltoa ( v , s , 10 ); /* Based on K&R itoa */ return sio_puts ( s ); } void sio_error ( char s []) /* Put error message and exit */ { si_puts ( s ); _exit ( 1 ); } \u4fdd\u5b58\u548c\u6062\u590d errno \u8bb8\u591a Linux \u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570\u90fd\u4f1a\u5728\u51fa\u9519\u8fd4\u56de\u65f6\u8bbe\u7f6e errno. \u5728\u5904\u7406\u7a0b\u5e8f\u4e2d\u8c03\u7528\u8fd9\u6837\u7684\u51fd\u6570\u53ef\u80fd\u4f1a\u5e72\u6270\u4e3b\u7a0b\u5e8f\u4e2d\u5176\u4ed6\u4f9d\u8d56\u4e8e errno \u7684\u90e8\u5206. \u89e3\u51b3\u65b9\u6cd5\u662f\u5728\u8fdb\u5165\u5904\u7406\u7a0b\u5e8f\u65f6\u628a errno \u4fdd\u5b58\u5728\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u4e2d, \u5728\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u524d\u6062\u590d\u5b83. \u53ea\u6709\u5728\u5904\u7406\u7a0b\u5e8f\u8981\u8fd4\u56de\u65f6\u624d\u6709\u5fc5\u8981\u8fd9\u4e48\u505a. \u963b\u585e\u6240\u6709\u4fe1\u53f7, \u4fdd\u62a4\u5bf9\u5171\u4eab\u5168\u5c40\u6570\u636e\u7ed3\u6784\u7684\u8bbf\u95ee \u5bf9\u5168\u5c40\u6570\u636e\u7ed3\u6784\u8bbf\u95ee\u65f6, \u5904\u7406\u7a0b\u5e8f\u548c\u4e3b\u7a0b\u5e8f\u5e94\u8be5\u6682\u65f6\u963b\u585e\u6240\u6709\u7684\u4fe1\u53f7. \u7528 volatile \u58f0\u660e\u5168\u5c40\u53d8\u91cf \u8003\u8651\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u548c\u4e00\u4e2a main \u51fd\u6570(\u5b83\u4eec\u5728 \u540c\u4e00\u8fdb\u7a0b \u4e2d), \u5b83\u4eec\u5171\u4eab\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf g. \u5904\u7406\u7a0b\u5e8f\u66f4\u65b0 g, main \u5468\u671f\u6027\u5730\u8bfb g. \u5bf9\u4e00\u4e2a\u4f18\u5316\u7f16\u8bd1\u5668, main \u4e2d g \u7684\u503c\u770b\u4e0a\u53bb\u4ece\u6ca1\u6709\u53d8\u5316\u8fc7, \u56e0\u6b64\u4f7f\u7528\u7f13\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d g \u7684\u526f\u672c\u6765\u6ee1\u8db3\u5bf9 g \u7684\u6bcf\u6b21\u5f15\u7528\u662f\u5f88\u5b89\u5168\u7684, \u8fd9\u5c31\u5bfc\u81f4 main \u51fd\u6570\u53ef\u80fd\u6c38\u8fdc\u65e0\u6cd5\u770b\u5230 g \u66f4\u65b0\u540e\u7684\u503c. \u53ef\u4ee5\u7528 volatile \u7c7b\u578b\u9650\u5b9a\u7b26\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf, \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u7f13\u5b58\u8fd9\u4e2a\u53d8\u91cf. volatile \u9650\u5b9a\u7b26\u5f3a\u8feb\u7f16\u8bd1\u5668\u6bcf\u6b21\u5f15\u7528\u53d8\u91cf\u65f6\u90fd\u8981\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6. \u6ce8: \u58f0\u660e/\u8bbf\u95ee g \u65f6\u4e5f\u8981\u963b\u585e\u4fe1\u53f7. \u7528 sig_atmoic_t \u58f0\u660e\u6807\u5fd7 sig_atmoic_t \u58f0\u660e\u53d8\u91cf, \u4fdd\u8bc1\u5bf9\u5b83\u4eec\u7684\u8bfb\u5199\u662f \u539f\u5b50\u7684(\u4e0d\u53ef\u4e2d\u65ad\u7684) , \u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u6682\u65f6\u963b\u585e\u4fe1\u53f7. \u5927\u591a\u6570\u7cfb\u7edf\u4e2d sig_atmoic_t \u662f int \u7c7b\u578b\u7684. \u6ce8 : \u5bf9\u539f\u5b50\u6027\u7684\u4fdd\u8bc1\u53ea\u9002\u7528\u4e8e\u5355\u4e2a\u8bfb/\u5199, flag++``flag=flag+10 \u8fd9\u6837\u7684\u66f4\u65b0\u53ef\u80fd\u9700\u8981\u591a\u6761\u6307\u4ee4. \u6b63\u786e\u7684\u4fe1\u53f7\u5904\u7406 \u00b6 \u4fe1\u53f7\u7684\u4e00\u4e2a\u4e0e\u76f4\u89c9\u4e0d\u7b26\u7684\u65b9\u9762\u5c31\u662f \u672a\u5904\u7406\u7684\u4fe1\u53f7\u662f\u4e0d\u6392\u961f\u7684 . \u56e0\u4e3a pending \u4f4d\u5411\u91cf\u4e2d\u6bcf\u79cd\u7c7b\u578b\u7684\u4fe1\u53f7\u53ea\u5bf9\u5e94\u6709\u4e00\u4f4d, \u56e0\u6b64\u6bcf\u79cd\u7c7b\u578b\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u672a\u5904\u7406\u7684\u4fe1\u53f7. \u5982\u679c\u5b58\u5728\u4e00\u4e2a\u672a\u5904\u7406\u7684\u4fe1\u53f7\u90a3\u4e48\u5c31\u8868\u660e\u81f3\u5c11\u6709\u4e00\u4e2a\u4fe1\u53f7\u5230\u8fbe\u4e86. \u6ce8: \u4e0d\u53ef\u4ee5\u7528\u4fe1\u53f7\u6765\u5bf9\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u53d1\u751f\u7684\u4e8b\u4ef6\u8ba1\u6570 . \u56de\u6536\u5b50\u8fdb\u7a0b \u6211\u4eec\u7528 SIGCHILD \u6765\u56de\u6536\u5b50\u8fdb\u7a0b, \u800c\u4e0d\u662f\u663e\u5f0f\u5730\u7b49\u5b50\u8fdb\u7a0b\u7ec8\u6b62.(\u5f53\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u6216\u505c\u6b62, \u5185\u6838\u4f1a\u53d1\u9001\u4e00\u4e2a SIGCHILD \u4fe1\u53f7\u7ed9\u7236\u8fdb\u7a0b.) \u8fd9\u4e2a\u4ee3\u7801\u7684\u95ee\u9898\u5728\u4e8e: \u7236\u8fdb\u7a0b\u63a5\u6536\u5e76\u6355\u83b7\u4e86\u7b2c\u4e00\u4e2a\u4fe1\u53f7, \u5f53\u5904\u7406\u7a0b\u5e8f\u8fd8\u5728\u5904\u7406\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u65f6, \u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u548c\u7b2c\u4e09\u4e2a\u4fe1\u53f7\u5c31\u53d1\u9001\u6765\u4e86, \u4f46\u5f15\u7269 SIGCHILD \u4fe1\u53f7\u88ab SIGCHILD \u5904\u7406\u7a0b\u5e8f\u5835\u585e\u4e86, \u8fd9\u4e24\u4e2a\u53d1\u9001\u6765\u7684\u4fe1\u53f7\u5176\u4e2d\u4e00\u4e2a\u4f1a\u5904\u4e8e\u5f85\u5904\u7406, \u800c\u53e6\u4e00\u4e2a\u4f1a\u88ab\u76f4\u63a5\u4e22\u5f03. \u6539\u8fdb: void handler2 ( int sig ) { int olderrno = errno ; while ( waitpid ( -1 , NULL , 0 ) > 0 ) { sio_puts ( \"Handler reaped child \\n \" ); } if ( errno != ECHILD ) sio_error ( \"waitpid error\" ); Sleep ( 1 ); errno = olderrno ; } \u6211\u4eec\u5728\u6bcf\u6b21\u5904\u7406\u4fe1\u53f7\u65f6, \u5c3d\u53ef\u80fd\u591a\u5730\u56de\u6536\u50f5\u6b7b\u8fdb\u7a0b. \u53ef\u79fb\u690d\u7684\u4fe1\u53f7\u5904\u7406 \u00b6 Unix \u4fe1\u53f7\u5904\u7406\u7684\u53e6\u4e00\u4e2a\u7f3a\u9677\u5728\u4e8e\u4e0d\u540c\u7684\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u8bed\u4e49, \u4f8b\u5982: signal \u51fd\u6570\u7684\u8bed\u4e49\u5404\u6709\u4e0d\u540c. \u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u88ab\u4e2d\u65ad. \u50cf read``write``accept \u8fd9\u6837\u7684\u7cfb\u7edf\u8c03\u7528\u6f5c\u5728\u5730\u963b\u585e\u8fdb\u7a0b\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4, \u79f0\u4e3a \u6162\u901f\u7cfb\u7edf\u8c03\u7528 . \u65e9\u671f Unix \u7cfb\u7edf\u4e2d, \u5728\u6267\u884c\u6162\u901f\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u5982\u679c\u8fdb\u7a0b\u63a5\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7\uff0c\u53ef\u80fd\u4f1a\u4e2d\u65ad\u8be5\u6162\u901f\u7cfb\u7edf\u8c03\u7528\uff0c\u5e76\u4e14\u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c\u6162\u901f\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u6761\u4ef6\uff0c\u5e76\u5c06 errno \u8bbe\u7f6e\u4e3a EINTR . Posix \u6807\u51c6\u5b9a\u4e49\u4e86 sigaction \u51fd\u6570, \u5141\u8bb8\u7528\u6237\u5728\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u65f6, \u660e\u786e\u6307\u5b9a\u4ed6\u4eec\u60f3\u8981\u7684\u4fe1\u53f7\u5904\u7406\u8bed\u4e49. sigaction #include <signal.h> int sigaction ( int signum , struct sigaction * act , struct sigaction * oldact ); //\u6210\u529f\u8fd4\u56de 0, \u51fa\u9519\u8fd4\u56de -1 \u53ef\u4ee5\u7c7b\u4f3c signal \u51fd\u6570\u90a3\u6837\u4f7f\u7528\uff0c\u4fe1\u53f7\u5904\u7406\u8bed\u4e49\u4e3a\uff1a \u53ea\u6709\u5f53\u524d\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6b63\u5728\u5904\u7406\u7684\u4fe1\u53f7\u7c7b\u578b\u4f1a\u88ab\u963b\u585e \u53ea\u8981\u53ef\u80fd\uff0c\u88ab\u4e2d\u65ad\u4f60\u7684\u7cfb\u7edf\u8c03\u7528\u4f1a\u81ea\u52a8\u91cd\u542f \u4e00\u65e6\u8bbe\u7f6e\u4e86\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\uff0c\u5c31\u4f1a\u4e00\u76f4\u4fdd\u6301 \u5176\u4ed6 \u00b6 \u540c\u6b65\u6d41\u4ee5\u907f\u514d\u8ba8\u538c\u7684\u5e76\u53d1\u9519\u8bef \u00b6 \u7236\u8fdb\u7a0b\u5728\u4e00\u4e2a\u5168\u5c40\u4f5c\u4e1a\u5217\u8868\u4e2d\u8bb0\u5f55\u7740\u5f53\u524d\u7684\u5b50\u8fdb\u7a0b, \u6bcf\u4e2a\u4f5c\u4e1a\u4e00\u4e2a\u6761\u76ee. addjob \u548c deletejob \u51fd\u6570\u5206\u522b\u5411\u8fd9\u4e2a\u4f5c\u4e1a\u5217\u8868\u6dfb\u52a0\u548c\u5220\u9664\u4f5c\u4e1a. \u5f53\u7236\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b50\u8fdb\u7a0b\u540e, \u5c31\u628a\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e2d. \u5f53\u7236\u8fdb\u7a0b\u5728 SIGCHILD \u5904\u7406\u7a0b\u5e8f\u4e2d\u56de\u6536\u4e00\u4e2a\u7ec8\u6b62\u7684\u50f5\u6b7b\u5b50\u8fdb\u7a0b, \u5b83\u5c31\u4ece\u4f5c\u4e1a\u5217\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u5b50\u8fdb\u7a0b. \u8fd9\u4e2a\u4ee3\u7801\u5b58\u5728\u4e00\u5b9a\u95ee\u9898, \u56e0\u4e3a\u53ef\u80fd\u53d1\u751f\u8fd9\u6837\u7684\u4e8b\u4ef6\u5e8f\u5217: \u7236\u8fdb\u7a0b\u6267\u884c fork \u51fd\u6570, \u5185\u6838\u8c03\u5ea6\u65b0\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u8fd0\u884c, \u800c\u4e0d\u662f\u7236\u8fdb\u7a0b. \u7236\u8fdb\u7a0b\u80fd\u518d\u6b21\u8fd0\u884c\u4e4b\u524d\u5b50\u8fdb\u7a0b\u5c31\u7ec8\u6b62\u5e76\u53d8\u4e3a\u4e00\u4e2a\u50f5\u6b7b\u8fdb\u7a0b, \u5185\u6838\u7ed9\u7236\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a SIGCHILD \u4fe1\u53f7. \u7236\u8fdb\u7a0b\u518d\u6b21\u53d8\u4e3a\u53ef\u8fd0\u884c\u4f46\u53c8\u5728\u5b83\u6267\u884c\u4e4b\u524d, \u5185\u6838\u6ce8\u610f\u5230\u6709\u672a\u5904\u7406\u7684 SIGCHILD \u4fe1\u53f7, \u8fd0\u884c\u5904\u7406\u7a0b\u5e8f\u63a5\u6536\u8fd9\u4e2a\u4fe1\u53f7. \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d deletejob , \u4f46\u8fd9\u65f6\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u88ab\u52a0\u5165\u4f5c\u4e1a\u5217\u8868, \u8fd9\u4e2a\u51fd\u6570\u4ec0\u4e48\u4e5f\u4e0d\u9519. \u5904\u7406\u5b8c\u6bd5, \u7236\u8fdb\u7a0b\u901a\u8fc7\u8c03\u7528 addjob \u5c06\u5df2\u7ecf\u88ab\u56de\u6536\u7684\u5b50\u8fdb\u7a0b\u52a0\u5165\u5230\u4f5c\u4e1a\u5217\u8868\u4e2d. \u8fd9\u662f\u4e00\u4e2a \u7ade\u4e89(race) \u7684\u7ecf\u5178\u540c\u6b65\u9519\u8bef\u7684\u793a\u4f8b. \u4fee\u6539\u4e4b\u540e, \u5bf9\u4e8e\u7236\u8fdb\u7a0b\u6211\u4eec\u5728 fork \u4e4b\u524d\u5c31\u963b\u585e\u4e86 SIGCHILD \u4fe1\u53f7, \u5728 addjob \u4e4b\u540e\u624d\u53d6\u6d88\u963b\u585e, \u8fd9\u6837\u5b50\u8fdb\u7a0b\u4e00\u5b9a\u5728\u88ab\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e4b\u540e\u624d\u4f1a\u88ab\u56de\u6536. \u663e\u5f0f\u5730\u7b49\u5f85\u4fe1\u53f7 \u00b6 \u6709\u65f6\u5019\u4e3b\u7a0b\u5e8f\u9700\u8981\u663e\u5f0f\u5730\u7b49\u5f85\u67d0\u4e2a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u8fd0\u884c. \u5982 Linux shell \u521b\u5efa\u4e00\u4e2a\u524d\u53f0\u4f5c\u4e1a, \u5728\u63a5\u53d7\u4e0b\u4e00\u6761\u7528\u6237\u547d\u4ee4\u4e4b\u524d\u5b83\u5fc5\u987b\u7b49\u5f85\u4f5c\u4e1a\u7ec8\u6b62, \u88ab SIGCHILD \u5904\u7406\u7a0b\u5e8f\u56de\u6536. \u7236\u8fdb\u7a0b(shell)\u8bbe\u7f6e SIGINT \u548c SIGCHILD \u7684\u5904\u7406\u7a0b\u5e8f, \u7136\u540e\u8fdb\u5165\u4e00\u4e2a\u65e0\u9650\u5faa\u73af. \u5b83\u963b\u585e SIGCHILD . \u521b\u5efa\u5b50\u8fdb\u7a0b\u540e, \u628a pid \u8bbe 0, \u53d6\u6d88\u963b\u585e SIGCHILD , \u7136\u540e\u4ee5\u5faa\u73af\u7684\u65b9\u5f0f\u7b49\u5f85 pid \u53d8\u4e3a\u975e\u96f6. \u5b50\u8fdb\u7a0b\u7ec8\u6b62\u540e, \u5904\u7406\u7a0b\u5e8f\u56de\u6536\u5b83, \u628a\u975e\u96f6\u7684 pid \u8d4b\u7ed9\u5168\u5c40\u53d8\u91cf, \u8fd9\u4f1a\u7ec8\u6b62\u5faa\u73af, \u7236\u8fdb\u7a0b\u8fd9\u624d\u7ee7\u7eed\u5176\u4ed6\u5de5\u4f5c. \u4f46\u8fd9\u6bb5\u4ee3\u7801\u4e2d, \u5faa\u73af\u5728\u6d6a\u8d39\u5904\u7406\u5668\u8d44\u6e90. \u6211\u4eec\u5728\u5faa\u73af\u4f53\u4e2d\u63d2\u5165 pause , \u7b49\u5f85\u7684\u65f6\u5019\u628a\u8fdb\u7a0b\u6302\u8d77\u505a\u5176\u4ed6\u4e8b. while ( ! pid ) pause (); \u4f46\u8fd9\u6837\u4e5f\u4f1a\u9762\u5bf9\u7ade\u4e89: \u5982\u679c\u5728 while \u6d4b\u8bd5\u540e pause \u4e4b\u524d\u6536\u5230 SIGCHILD \u4fe1\u53f7, pause \u4f1a\u6c38\u8fdc\u7761\u7720. \u6216\u8005\u6539\u7528 sleep \u51fd\u6570: while ( ! pid ) sleep ( 1 ); \u4f46\u8fd9\u6837\u592a\u6162\u4e86, \u5982\u679c\u5728 while \u6d4b\u8bd5\u4e4b\u540e sleep \u4e4b\u524d\u6536\u5230\u4fe1\u53f7, \u7a0b\u5e8f\u5fc5\u987b\u7b49\u76f8\u5f53\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\u624d\u4f1a\u518d\u6b21\u68c0\u6d4b\u5faa\u73af\u7684\u7ec8\u6b62\u6761\u4ef6. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 sigsuspend \u51fd\u6570 #include <signal.h> int sigsuspend ( const sigset_t * mast ); //\u8fd4\u56de -1 sigsuspend \u6682\u65f6\u7528 mask \u66ff\u6362\u5f53\u524d\u963b\u585e\u96c6\u5408, \u7136\u540e\u6302\u8d77\u8be5\u8fdb\u7a0b, \u76f4\u5230\u6536\u5230\u4e00\u4e2a\u865a\u62df\u53f7. \u5176\u884c\u4e3a\u8981\u4e48\u662f\u8fd0\u884c\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u8981\u4e48\u662f\u7ec8\u6b62\u8be5\u8fdb\u7a0b. \u5b83\u7b49\u4ef7\u4e8e\u4e0b\u5217\u4ee3\u7801\u7684\u539f\u5b50(\u4e0d\u53ef\u4e2d\u65ad)\u7248\u672c. sigprocmask ( SIG_SETMASK , & mask , & prev ); pause (); sigprocmask ( SIG_SETMASK , & prev , NULL ); \u975e\u672c\u5730\u8df3\u8f6c \u00b6 C \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u79cd\u7528\u6237\u7ea7\u5f02\u5e38\u63a7\u5236\u6d41\u5f62\u5f0f, \u79f0\u4e3a \u975e\u672c\u5730\u8df3\u8f6c(nonlocal jump) . \u5b83\u5c06\u63a7\u5236\u76f4\u63a5\u4ece\u4e00\u4e2a\u51fd\u6570\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u6b63\u5728\u6267\u884c\u7684\u51fd\u6570, \u800c\u4e0d\u9700\u8981\u7ecf\u8fc7\u6b63\u5e38\u7684\u8c03\u7528-\u8fd4\u56de\u5e8f\u5217. #include <setjmp.h> int setjmp ( jmp_buf env ); void longjmp ( jmp_buf env , int retval ); setjmp \u51fd\u6570\u5728 env \u7f13\u51b2\u533a\u4fdd\u5b58\u5f53\u524d\u8c03\u7528\u73af\u5883, \u4ee5\u4f9b\u540e\u9762 longjmp \u4f7f\u7528, \u5e76\u8fd4\u56de 0. setjmp \u8fd4\u56de\u7684\u503c\u4e0d\u80fd\u8d4b\u503c\u7ed9\u53d8\u91cf. longjmp \u51fd\u6570\u4ece env \u7f13\u51b2\u533a\u4e2d\u6062\u590d\u8c03\u7528\u73af\u5883, \u7136\u540e\u89e6\u53d1\u4e00\u4e2a\u4ece\u6700\u8fd1\u4e00\u6b21\u521d\u59cb\u5316 env \u7684 setjmp \u8c03\u7528\u7684\u8fd4\u56de. \u7136\u540e setjmp \u8fd4\u56de, \u5e76\u5e26\u6709\u975e\u96f6\u7684\u8fd4\u56de\u503c retval. \u4ece\u6df1\u5c42\u5d4c\u5957\u51fd\u6570\u4e2d\u8fd4\u56de \u00b6 \u5728 main \u51fd\u6570\u4e2d\uff0c\u9996\u5148\u5728 12 \u884c\u4e2d\u6267\u884c setjmp(buf) \u51fd\u6570\u5c06\u5f53\u524d\u8c03\u7528\u73af\u5883\u4fdd\u5b58\u5230 buf \u4e2d\uff0c\u5e76\u8fd4\u56de 0\uff0c\u6240\u4ee5\u5c31\u8c03\u7528 foo \u51fd\u6570\u548c bar \u51fd\u6570\uff0c\u5f53\u8fd9\u4e24\u4e2a\u51fd\u6570\u4e2d\u51fa\u73b0\u9519\u8bef\uff0c\u5219\u901a\u8fc7 longjmp(buf, retval) \u6062\u590d\u8c03\u7528\u73af\u5883\uff0c\u5e76\u8df3\u8f6c\u56de\u7b2c 13 \u884c\uff0c\u7136\u540e\u8ba9 setjmp \u51fd\u6570\u8fd4\u56de retval \u7684\u503c\uff0c\u7531\u6b64\u5c31\u65e0\u9700\u89e3\u6790\u8c03\u7528\u6808\u4e86\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u53ef\u80fd\u5b58\u5728\u5185\u5b58\u6cc4\u9732\u95ee\u9898. \u4f7f\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u5206\u652f\u5230\u4e00\u4e2a\u7279\u6b8a\u7684\u4ee3\u7801\u4f4d\u7f6e \u00b6 #include <setjmp.h> int sigsetjmp ( sigjmp_buf env , int savesigs ); //\u82e5 savesigs != 0, \u5219\u4f1a\u628a\u5835\u585e\u7684\u4fe1\u53f7\u96c6\u5408\u4e5f\u4fdd\u5b58. void siglongjmp ( sigjmp_buf env , int retval ); sigsetjmp \u548c siglongjmp \u662f\u53ef\u4ee5\u88ab\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4f7f\u7528\u7684\u7248\u672c. \u5176\u4e2d sigsetjmp \u51fd\u6570\u8fd8\u4f1a\u5c06\u5f85\u5904\u7406\u4fe1\u53f7\u548c\u88ab\u963b\u585e\u4fe1\u53f7\u4fdd\u5b58\u5230 env \u4e2d. \u4e0b\u9762\u7684\u4f8b\u5b50, \u5f53\u7528\u6237\u5728 Ctrl+C \u65f6, \u8fd9\u4e2a\u7a0b\u5e8f\u7528\u4fe1\u53f7\u548c\u975e\u672c\u5730\u8df3\u8f6c\u5b9e\u73b0\u8f6f\u91cd\u542f. \u9996\u5148\uff0c\u5728 main \u51fd\u6570\u4e2d\u7b2c 12 \u884c\u901a\u8fc7 sigsetjmp \u51fd\u6570\u5c06\u8c03\u7528\u73af\u5883\u4fdd\u5b58\u5230 buf \u4e2d\uff0c\u5e76\u8fd4\u56de 0\uff0c\u968f\u540e\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u3002\u5f53\u7528\u6237\u8f93\u5165 Ctrl+C \u65f6\uff0c\u4f1a\u8c03\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f handler \uff0c\u6b64\u65f6\u4f1a\u901a\u8fc7 siglongjmp \u6062\u590d\u8c03\u7528\u73af\u5883\uff0c\u7136\u540e\u8df3\u8f6c\u56de\u7b2c 12 \u884c\uff0c\u7136\u540e\u8ba9 sigsetjmp \u8fd4\u56de1\uff0c\u6b64\u65f6\u5c31\u907f\u514d\u4e86\u8fd4\u56de\u5230\u4e2d\u65ad\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u5904. \u6ce8\u610f : signal \u8bbe\u7f6e\u5904\u7406\u7a0b\u5e8f\u8981\u5728\u8c03\u7528 sigsetjmp \u4e4b\u540e\uff0c\u907f\u514d\u8fd8\u672a\u8bbe\u7f6e sigsetjmp \u5c31\u63a5\u6536\u5230\u4fe1\u53f7\u800c\u6267\u884c siglongjmp ; \u800c\u4e14 sigsetjmp \u548c siglongjmp \u4e0d\u5728\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570\u4e4b\u5217.","title":"\u5f02\u5e38\u63a7\u5236\u6d41"},{"location":"CSAPP/8/#_1","text":"\u4ece\u7ed9\u5904\u7406\u5668\u52a0\u7535\u5230\u65ad\u7535, \u7a0b\u5e8f\u8ba1\u6570\u5668\u90fd\u5047\u8bbe\u4e00\u4e2a\u503c\u7684\u5e8f\u5217 \\(a_0, a_1, \\ldots,a_{n-1}\\) \u5176\u4e2d\u6bcf\u4e2a \\(a_k\\) \u662f\u67d0\u4e2a\u76f8\u5e94\u6307\u4ee4 \\(I_k\\) \u7684\u5730\u5740. \u6bcf\u6b21\u4ece \\(a_k\\) \u5230 \\(a_{k+1}\\) \u7684\u8fc7\u6e21\u79f0\u4e3a \u63a7\u5236\u8f6c\u79fb(control transfer) . \u8fd9\u6837\u7684\u63a7\u5236\u8f6c\u79fb\u5e8f\u5217\u79f0\u4e3a\u5904\u7406\u5668\u7684 \u63a7\u5236\u6d41(control flow) . \u5f53\u6bcf\u4e2a \\(I_k\\) \u548c \\(I_{k+1}\\) \u5728\u5185\u5b58\u4e2d\u662f\u76f8\u90bb\u7684, \u5219\u79f0\u8fd9\u79cd\u63a7\u5236\u6d41\u662f \u5e73\u6ed1\u7684 , \u5426\u5219\u5b58\u5728 \u7a81\u53d8 . \u7cfb\u7edf\u4f1a\u901a\u8fc7\u4f7f\u63a7\u5236\u6d41\u7a81\u53d8\u6765\u5bf9\u7cfb\u7edf\u72b6\u6001\u7684\u53d8\u5316\u505a\u51fa\u53cd\u6620, \u6211\u4eec\u628a\u8fd9\u4e9b\u7a81\u53d8\u79f0\u4e3a \u5f02\u5e38\u63a7\u5236\u6d41(Exceptional Control Flow, ECF) .","title":"\u5f02\u5e38\u63a7\u5236\u6d41"},{"location":"CSAPP/8/#_2","text":"\u5f02\u5e38(Exception) \u5c31\u662f\u63a7\u5236\u6d41\u4e2d\u7684\u7a81\u53d8, \u7528\u6765\u54cd\u5e94\u5904\u7406\u5668\u72b6\u6001\u4e2d\u7684\u67d0\u4e9b\u53d8\u5316. \u5728\u5904\u7406\u5668\u4e2d, \u72b6\u6001\u88ab\u7f16\u7801\u4e3a\u4e0d\u540c\u7684\u4f4d\u548c\u865a\u62df\u53f7. \u72b6\u6001\u53d8\u5316\u88ab\u79f0\u4e3a \u4e8b\u4ef6(event) .","title":"\u5f02\u5e38"},{"location":"CSAPP/8/#_3","text":"\u5f53\u5904\u7406\u5668\u68c0\u6d4b\u5230\u6709\u4e8b\u4ef6\u53d1\u751f\u65f6, \u5b83\u4f1a\u901a\u8fc7\u4e00\u5f20 \u5f02\u5e38\u8868 \u7684\u8df3\u8f6c\u8868, \u8fdb\u884c\u4e00\u4e2a\u95f4\u63a5\u8fc7\u7a0b\u8c03\u7528, \u5230\u4e00\u4e2a\u4e13\u95e8\u5904\u7406\u8fd9\u7c7b\u4e8b\u4ef6\u7684\u64cd\u4f5c\u7cfb\u7edf\u5b50\u7a0b\u5e8f, \u5373 \u5f02\u5e38\u5904\u7406\u7a0b\u5e8f(exception handler) . \u7cfb\u7edf\u4e3a\u53ef\u80fd\u7684\u6bcf\u79cd\u7c7b\u578b\u7684\u5f02\u5e38\u90fd\u5206\u914d\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u975e\u8d1f\u6574\u6570\u7684 \u5f02\u5e38\u53f7 . \u6709\u4e9b\u53f7\u7801\u7531\u5904\u7406\u5668\u8bbe\u8ba1\u8005\u5206\u914d, \u5176\u4ed6\u53f7\u7801\u7531\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u6838\u8bbe\u8ba1\u8005\u5206\u914d, \u5206\u522b\u7528\u6765\u8868\u793a\u4e0d\u540c\u5c42\u6b21\u7684\u5f02\u5e38. \u5f53\u7cfb\u7edf\u542f\u52a8\u65f6, \u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u548c\u521d\u59cb\u5316\u4e00\u5f20 \u5f02\u5e38\u8868 \u7684\u8df3\u8f6c\u8868, \u4f7f\u5f97\u8868\u76ee k \u5305\u542b\u5f02\u5e38 k \u7684\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740. \u5f53\u5904\u7406\u5668\u68c0\u6d4b\u5230\u53d1\u751f\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u5e76\u786e\u5b9a\u5176\u5f02\u5e38\u53f7\u4e3a k, \u5904\u7406\u5668\u6267\u884c\u95f4\u63a5\u8fc7\u7a0b\u8c03\u7528, \u901a\u8fc7\u6761\u76ee k \u8f6c\u5230\u76f8\u5e94\u7684\u5904\u7406\u7a0b\u5e8f. \u5f02\u5e38\u8868\u7684\u8d77\u59cb\u5730\u5740\u653e\u5728 \u5f02\u5e38\u8868\u57fa\u5740\u5bc4\u5b58\u5668 \u7684\u7279\u6b8aCPU\u5bc4\u5b58\u5668\u91cc. \u5f02\u5e38\u7c7b\u4f3c\u4e8e\u8fc7\u7a0b\u8c03\u7528, \u4f46\u6709\u4e00\u4e9b\u4e0d\u540c: \u6839\u636e\u5f02\u5e38\u7684\u7c7b\u578b, \u8fd4\u56de\u5730\u5740\u8981\u4e48\u662f\u5f53\u524d\u6307\u4ee4(\u4e8b\u4ef6\u53d1\u751f\u65f6\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4), \u8981\u4e48\u662f\u4e0b\u4e00\u6761\u6307\u4ee4. \u5904\u7406\u5668\u628a\u4e00\u4e9b\u989d\u5916\u7684\u5904\u7406\u5668\u72b6\u6001\u538b\u5230\u6808\u91cc, \u5728\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u91cd\u65b0\u5f00\u59cb\u6267\u884c\u88ab\u4e2d\u65ad\u7684\u7a0b\u5e8f\u4e5f\u9700\u8981\u8fd9\u4e9b\u72b6\u6001. \u5982\u679c\u63a7\u5236\u4ece\u7528\u6237\u7a0b\u5e8f\u8f6c\u79fb\u5230\u5185\u6838, \u6240\u6709\u8fd9\u4e9b\u9879\u76ee\u88ab\u538b\u5230\u5185\u6838\u6808\u4e2d, \u800c\u4e0d\u662f\u7528\u6237\u6808. \u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u8fd0\u884c\u5728 \u5185\u6838\u6a21\u5f0f \u4e0b, \u5bf9\u6240\u6709\u7684\u7cfb\u7edf\u8d44\u6e90\u6709\u5b8c\u5168\u7684\u8bbf\u95ee\u6743\u9650.","title":"\u5f02\u5e38\u5904\u7406"},{"location":"CSAPP/8/#_4","text":"\u7c7b\u522b \u539f\u56e0 \u5f02\u6b65/\u540c\u6b65 \u8fd4\u56de\u884c\u4e3a \u4e2d\u65ad \u6765\u81eaI/O\u8bbe\u5907\u7684\u4fe1\u53f7 \u5f02\u6b65 \u603b\u662f\u8fd4\u56de\u5230\u4e0b\u4e00\u6761\u6307\u4ee4 \u9677\u9631 \u6709\u610f\u7684\u5f02\u5e38 \u540c\u6b65 \u603b\u662f\u8fd4\u56de\u5230\u4e0b\u4e00\u6761\u6307\u4ee4 \u6545\u969c \u6f5c\u5728\u53ef\u6062\u590d\u7684\u9519\u8bef \u540c\u6b65 \u53ef\u80fd\u8fd4\u56de\u5230\u5f53\u524d\u6307\u4ee4 \u7ec8\u6b62 \u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef \u540c\u6b65 \u4e0d\u4f1a\u8fd4\u56de \u5728 Linux/x86-64\u4e2d\u7684\u5e38\u89c1\u5f02\u5e38: \u5f02\u5e38\u53f7 \u63cf\u8ff0 \u5f02\u5e38\u7c7b\u522b 0 \u9664\u6cd5\u9519\u8bef \u6545\u969c 13 \u4e00\u822c\u4fdd\u62a4\u6545\u969c \u6545\u969c 14 \u7f3a\u9875 \u6545\u969c 18 \u673a\u5668\u68c0\u67e5 \u7ec8\u6b62 32~255 \u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u7684\u5f02\u5e38 \u4e2d\u65ad\u6216\u9677\u9631 \u5f02\u6b65&\u540c\u6b65 \u5f02\u6b65\u5f02\u5e38\u662f\u7531\u4e8e\u5904\u7406\u5668\u5916\u90e8\u72b6\u6001\u53d8\u5316\u800c\u5f15\u8d77\u7684, \u5e76\u975e\u662f\u7531\u4efb\u610f\u4e00\u6761\u4e13\u95e8\u7684\u6307\u4ee4\u9020\u6210. \u540c\u6b65\u5f02\u5e38\u662f\u6267\u884c\u5f53\u524d\u6307\u4ee4\u7684\u7ed3\u679c, \u4e5f\u88ab\u79f0\u4e3a \u6545\u969c\u6307\u4ee4(faulting instruction) .","title":"\u5f02\u5e38\u7c7b\u578b"},{"location":"CSAPP/8/#_5","text":"\u4e2d\u65ad(Interrupt) \u662f\u5f02\u6b65\u53d1\u751f\u7684, \u662f\u6765\u81ea\u5904\u7406\u5668\u5916\u90e8\u7684 I/O \u8bbe\u5907\u7684\u4fe1\u53f7\u7684\u7ed3\u679c. \u5728 I/O \u8bbe\u5907\u4e2d, \u5411\u5904\u7406\u5668\u82af\u7247\u4e0a\u7684\u4e00\u4e2a\u5f15\u811a\u53d1\u9001\u4fe1\u53f7, \u5e76\u628a\u5f02\u5e38\u53f7\u653e\u5728\u7cfb\u7edf\u603b\u7ebf\u4e0a, \u6765\u89e6\u53d1\u4e2d\u65ad. \u5728\u5f53\u524d\u6307\u4ee4\u6267\u884c\u5b8c\u540e, \u5904\u7406\u5668\u6ce8\u610f\u5230\u4e2d\u65ad\u5f15\u811a\u7684\u7535\u538b\u53d8\u9ad8\u4e86, \u5c31\u4ece\u7cfb\u7edf\u603b\u7ebf\u8bfb\u53d6\u5f02\u5e38\u597d, \u5e76\u8c03\u7528\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f. \u5f53\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u5c06\u63a7\u5236\u8fd4\u56de\u7ed9\u4e0b\u4e00\u6761\u6307\u4ee4.","title":"\u4e2d\u65ad"},{"location":"CSAPP/8/#_6","text":"\u9677\u9631(trap) \u662f\u6709\u610f\u7684\u5f02\u5e38, \u662f\u6267\u884c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c. \u9677\u9631\u6700\u91cd\u8981\u7684\u7528\u9014\u662f\u5728\u7528\u6237\u7a0b\u5e8f\u548c\u5185\u6838\u4e4b\u95f4\u63d0\u4f9b\u4e00\u4e2a\u50cf\u8fc7\u7a0b\u4e00\u6837\u7684\u63a5\u53e3, \u79f0\u4e3a \u7cfb\u7edf\u8c03\u7528 . \u5f53\u7528\u6237\u7a0b\u5e8f\u60f3\u8981\u5411\u5185\u6838\u8bf7\u6c42\u670d\u52a1 n \u65f6, \u53ef\u4ee5\u6267\u884c syscall n . \u6267\u884c syscall \u6307\u4ee4\u5bfc\u81f4\u4e00\u4e2a\u5f02\u5e38\u5904\u7406\u7684\u9677\u9631, \u8fd9\u4e2a\u5904\u7406\u7a0b\u5e8f\u89e3\u6790\u53c2\u6570, \u5e76\u8c03\u7528\u9002\u5f53\u7684\u5185\u6838\u7a0b\u5e8f. \u6ce8\u610f : \u7cfb\u7edf\u8c03\u7528\u548c\u51fd\u6570\u8c03\u7528\u5b58\u5728\u4e0d\u540c: \u7cfb\u7edf\u8c03\u7528\u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f\u4e0b, \u800c\u51fd\u6570\u8c03\u7528\u8fd0\u884c\u5728\u7528\u6237\u6a21\u5f0f. \u7cfb\u7edf\u8c03\u7528\u90fd\u6709\u5bf9\u5e94\u7684\u6574\u6570\u53f7, \u5bf9\u5e94\u4e00\u4e2a\u5230\u5185\u6838\u4e2d\u8df3\u8f6c\u8868\u7684\u504f\u79fb\u91cf. \u4f46\u8fd9\u4e2a\u8df3\u8f6c\u8868\u548c\u5f02\u5e38\u8868\u4e0d\u540c. \u5728 Linux/x86-64 \u7cfb\u7edf\u4e2d, \u7cfb\u7edf\u8c03\u7528\u901a\u8fc7 syscall \u6267\u884c, \u8be5\u6307\u4ee4\u7684\u53c2\u6570\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012, \u800c\u4e0d\u662f\u6808. \u5176\u4e2d\uff0c%rax \u4e2d\u5305\u542b\u7cfb\u7edf\u8c03\u7528\u53f7, %rdi, %rsi, %rdx, %r10, %r8 \u548c %r9 \u5206\u522b\u7528\u6765\u4fdd\u5b58\u53c2\u6570. \u5f53\u4ece\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u65f6\uff0c\u4f1a\u7834\u574f %rcx \u548c%r11, \u800c\u5c06\u8fd4\u56de\u503c\u4fdd\u5b58\u5728% rax \u4e2d. -4095 \u5230 -1 \u4e4b\u95f4\u7684\u8d1f\u6570\u8fd4\u56de\u503c\u8868\u660e\u53d1\u751f\u4e86\u9519\u8bef, \u5bf9\u5e94\u4e8e\u8d1f\u7684 errno. C \u7a0b\u5e8f\u4e2d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5305\u88c5\u51fd\u6570. \u6211\u4eec\u5c06\u7cfb\u7edf\u8c03\u7528\u4e0e\u5b83\u4eec\u76f8\u5173\u8054\u7684\u5305\u88c5\u51fd\u6570\u90fd\u79f0\u4e3a \u7cfb\u7edf\u7ea7\u51fd\u6570 .","title":"\u9677\u9631(\u7cfb\u7edf\u8c03\u7528)"},{"location":"CSAPP/8/#_7","text":"\u6545\u969c\u7531\u9519\u8bef\u60c5\u51b5\u5f15\u8d77, \u5b83\u53ef\u80fd\u80fd\u591f\u88ab\u6545\u969c\u5904\u7406\u7a0b\u5e8f\u4fee\u6b63. \u6545\u969c\u53d1\u751f\u65f6\u5904\u7406\u5668\u5c06\u63a7\u5236\u8f6c\u79fb\u5230\u6545\u969c\u5904\u7406\u7a0b\u5e8f, \u5982\u679c\u80fd\u591f\u4fee\u6b63, \u5c31\u5c06\u63a7\u5236\u8fd4\u56de\u7ed9\u5f15\u8d77\u6545\u969c\u7684\u6307\u4ee4, \u4ece\u800c\u91cd\u65b0\u6267\u884c\u5b83. \u5982\u679c\u4e0d\u80fd, \u5904\u7406\u7a0b\u5e8f\u5c31\u8fd4\u56de\u5230\u5185\u6838\u4e2d\u7684 abort \u4f8b\u7a0b, \u7ec8\u6b62\u5f15\u8d77\u6545\u969c\u7684\u5e94\u7528\u7a0b\u5e8f.","title":"\u6545\u969c"},{"location":"CSAPP/8/#_8","text":"\u7ec8\u6b62\u662f\u4e0d\u53ef\u6062\u590d\u7684\u81f4\u547d\u9519\u8bef\u9020\u6210\u7684\u7ed3\u679c, \u901a\u5e38\u662f\u786c\u4ef6\u9519\u8bef. \u5904\u7406\u5668\u4f1a\u5c06\u63a7\u5236\u8fd4\u56de\u7ed9\u4e00\u4e2a abort \u4f8b\u7a0b, \u8be5\u4f8b\u7a0b\u4f1a\u7ec8\u6b62\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f.","title":"\u7ec8\u6b62"},{"location":"CSAPP/8/#_9","text":"\u5f02\u5e38\u662f\u5141\u8bb8\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u63d0\u4f9b \u8fdb\u7a0b(process) \u6982\u5ff5\u7684\u57fa\u672c\u6784\u9020\u5757. \u8fdb\u7a0b \u5c31\u662f\u4e00\u4e2a\u6267\u884c\u4e2d\u7a0b\u5e8f\u7684\u5b9e\u4f8b. \u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u8fd0\u884c\u5728\u67d0\u4e2a\u8fdb\u7a0b\u7684 \u4e0a\u4e0b\u6587(context) \u4e2d. \u4e0a\u4e0b\u6587 \u662f\u7531\u7a0b\u5e8f\u6b63\u786e\u8fd0\u884c\u6240\u9700\u8981\u7684\u72b6\u6001\u7ec4\u6210\u7684, \u5b83\u5305\u62ec\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u4ee3\u7801\u6570\u636e, \u6808, \u901a\u7528\u5bc4\u5b58\u5668, \u73af\u5883\u53d8\u91cf\u7b49. \u5f53\u6211\u4eec\u6267\u884c\u8fd0\u884c\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6, shell \u5c31\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b, \u7136\u540e\u5728\u65b0\u7684\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u8fd9\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u8fdb\u7a0b\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5173\u952e\u7684\u62bd\u8c61: \u4e00\u4e2a\u72ec\u7acb\u7684\u903b\u8f91\u63a7\u5236\u6d41, \u5b83\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61, \u597d\u50cf\u6211\u4eec\u7684\u7a0b\u5e8f\u72ec\u5360\u4f7f\u7528\u5904\u7406\u5668. \u4e00\u4e2a\u79c1\u6709\u7684\u5730\u5740\u7a7a\u95f4, \u5b83\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61, \u597d\u50cf\u6211\u4eec\u7684\u7a0b\u5e8f\u72ec\u5360\u5730\u4f7f\u7528\u5185\u5b58\u7cfb\u7edf.","title":"\u8fdb\u7a0b"},{"location":"CSAPP/8/#_10","text":"\u5f53\u6211\u4eec\u7528\u8c03\u8bd5\u5668\u5355\u6b65\u8c03\u8bd5\u7a0b\u5e8f\u65f6, \u6211\u4eec\u4f1a\u770b\u5230\u4e00\u7cfb\u5217\u7a0b\u5e8f\u8ba1\u6570\u5668(PC)\u7684\u503c. \u8fd9\u4e2a PC \u503c\u7684\u5e8f\u5217\u5c31\u53eb\u505a \u903b\u8f91\u63a7\u5236\u6d41 , \u6216\u8005\u7b80\u79f0 \u903b\u8f91\u6d41 . \u5982\u56fe, \u8fd9\u4e2a\u7cfb\u7edf\u8fd0\u884c\u4e86\u4e09\u4e2a\u8fdb\u7a0b, \u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u903b\u8f91\u6d41(\u9ed1\u8272\u7ad6\u7ebf). \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e09\u4e2a\u903b\u8f91\u6d41\u662f\u4ea4\u9519\u8fdb\u884c\u7684, \u8fdb\u7a0b\u8f6e\u6d41\u4f7f\u7528\u5904\u7406\u5668. \u6bcf\u4e2a\u8fdb\u7a0b\u6267\u884c\u5b83\u7684\u6d41\u7684\u4e00\u90e8\u5206, \u7136\u540e\u88ab \u62a2\u5360(preempted) (\u6682\u65f6\u6302\u8d77), \u7136\u540e\u8f6e\u5230\u5176\u4ed6\u8fdb\u7a0b. \u4f46\u4ece\u5355\u4e2a\u8fdb\u7a0b\u7684\u89d2\u5ea6, \u5b83\u7684\u903b\u8f91\u6d41\u662f\u8fde\u7eed\u7684, \u610f\u5473\u7740\u6211\u4eec\u63d0\u4f9b\u4e86\u5b83\u72ec\u5360\u5904\u7406\u5668\u7684\u5047\u8c61. \u5e76\u53d1\u6d41 \u4e00\u4e2a\u903b\u8f91\u6d41\u7684\u6267\u884c\u5728\u65f6\u95f4\u4e0a\u4e0e\u53e6\u4e00\u4e2a\u6d41\u91cd\u53e0, \u79f0\u4e3a \u5e76\u53d1\u6d41(concurrent flow) , \u8fd9\u4e24\u4e2a\u6d41\u79f0\u4e3a \u5e76\u53d1\u5730\u8fd0\u884c . \u5373\u5f53\u903b\u8f91\u6d41X\u5728\u903b\u8f91\u6d41Y\u5f00\u59cb\u4e4b\u540e\u548cY\u7ed3\u675f\u4e4b\u524d\u8fd0\u884c, \u6216\u903b\u8f91\u6d41Y\u5728\u903b\u8f91\u6d41X\u5f00\u59cb\u4e4b\u540e\u548cX\u7ed3\u675f\u4e4b\u524d\u8fd0\u884c. e.g. \u4e0a\u56fe\u7684\u4f8b\u5b50\u4e2d\u8fdb\u7a0b A \u548c B, \u4ee5\u53ca\u8fdb\u7a0b A \u548c C \u90fd\u662f\u5e76\u53d1\u8fd0\u884c, \u4f46 B \u548c C \u4e0d\u662f. \u591a\u4e2a\u6d41\u5e76\u53d1\u5730\u6267\u884c\u79f0\u4e3a \u5e76\u53d1 , \u4e00\u4e2a\u8fdb\u7a0b\u548c\u5176\u4ed6\u8fdb\u7a0b\u8f6e\u6d41\u8fd0\u884c\u79f0\u4e3a \u591a\u4efb\u52a1(multitasking) . \u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u5b83\u63a7\u5236\u6d41\u7684\u4e00\u90e8\u5206\u7684\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6bb5\u79f0\u4e3a \u65f6\u95f4\u7247(time slice) . \u56e0\u6b64\u591a\u4efb\u52a1\u4e5f\u53eb \u65f6\u95f4\u5206\u7247(time slicing) . \u6ce8\u610f : \u5e76\u53d1\u6d41\u7684\u601d\u60f3\u548c\u6d41\u8fd0\u884c\u7684\u5904\u7406\u5668\u6838\u6570, \u8ba1\u7b97\u673a\u6570\u65e0\u5173. \u5982\u679c\u4e24\u4e2a\u6d41\u5e76\u53d1\u5730\u8fd0\u884c\u5728\u4e0d\u540c\u5904\u7406\u5668\u6838\u6216\u8005\u8ba1\u7b97\u673a\u4e0a, \u5219\u79f0\u4e3a \u5e76\u884c\u6d41(parallel flow) . \u5e76\u884c\u6d41\u662f\u5e76\u53d1\u6d41\u7684\u771f\u5b50\u96c6.","title":"\u903b\u8f91\u63a7\u5236\u6d41"},{"location":"CSAPP/8/#_11","text":"\u8fdb\u7a0b\u4e5f\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61, \u597d\u50cf\u5b83\u72ec\u5360\u5730\u4f7f\u7528\u7cfb\u7edf\u5730\u5740\u7a7a\u95f4. \u5730\u5740\u7a7a\u95f4\u662f \\(2^n\\) \u4e2a\u53ef\u80fd\u5730\u5740\u7684\u96c6\u5408, \u548c\u8fd9\u4e2a\u7a7a\u95f4\u4e2d\u67d0\u4e2a\u5730\u5740\u76f8\u5173\u8054\u7684\u5185\u5b58\u5b57\u8282\u662f\u4e0d\u80fd\u88ab\u5176\u4ed6\u8fdb\u7a0b\u8bfb\u6216\u8005\u5199\u7684, \u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\u8fd9\u4e2a\u5730\u5740\u7a7a\u95f4\u662f\u79c1\u6709\u7684.","title":"\u79c1\u6709\u5730\u5740\u7a7a\u95f4"},{"location":"CSAPP/8/#_12","text":"\u5904\u7406\u5668\u4e3a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e24\u79cd\u6a21\u5f0f, \u7528\u6237\u6a21\u5f0f\u548c\u5185\u6838\u6a21\u5f0f, \u5904\u7406\u5668\u901a\u8fc7\u67d0\u4e2a\u63a7\u5236\u5bc4\u5b58\u5668\u7684 \u6a21\u5f0f\u4f4d(model bit) \u6765\u63d0\u4f9b\u8fd9\u79cd\u529f\u80fd. \u5f53\u8bbe\u7f6e\u4e86\u6a21\u5f0f\u4f4d, \u8fdb\u7a0b\u5c31\u8fd0\u884c\u5728 \u5185\u6838\u6a21\u5f0f(\u8d85\u7ea7\u7528\u6237\u6a21\u5f0f) \u4e2d, \u4e00\u4e2a\u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\u7684\u8fdb\u7a0b\u53ef\u4ee5\u6267\u884c\u6307\u4ee4\u96c6\u4e2d\u7684\u4efb\u4f55\u6307\u4ee4, \u5e76\u4e14\u53ef\u4ee5\u8bbf\u95ee\u5185\u5b58\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e. \u6ca1\u6709\u8bbe\u7f6e\u6a21\u5f0f\u4f4d, \u8fdb\u884c\u5c31\u8fd0\u884c\u5728 \u7528\u6237\u6a21\u5f0f \u4e2d. \u7528\u6237\u6a21\u5f0f\u7684\u8fdb\u7a0b\u4e0d\u5141\u8bb8\u6267\u884c \u7279\u6743\u6307\u4ee4 , \u4e5f\u4e0d\u5141\u8bb8\u76f4\u63a5\u5f15\u7528\u5730\u5740\u7a7a\u95f4\u4e2d\u5185\u6838\u533a\u5185\u7684\u4ee3\u7801\u548c\u6570\u636e. \u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u8fdb\u7a0b\u521d\u59cb\u4e3a\u7528\u6237\u6a21\u5f0f, \u8fdb\u7a0b\u4ece\u7528\u6237\u6a21\u5f0f\u53d8\u4e3a\u5185\u6838\u6a21\u5f0f\u552f\u4e00\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u5f02\u5e38. \u5f53\u5f02\u5e38\u53d1\u751f\u65f6\u5b83\u53d8\u4e3a\u5185\u6838\u6a21\u5f0f, \u5f53\u5f02\u5e38\u8fd4\u56de\u5230\u5e94\u7528\u7a0b\u5e8f\u65f6\u53c8\u6539\u56de\u5230\u7528\u6237\u6a21\u5f0f. Linux \u901a\u8fc7 /proc \u6587\u4ef6\u7cfb\u7edf, \u5141\u8bb8\u7528\u6237\u6a21\u5f0f\u8fdb\u7a0b\u8bbf\u95ee\u5185\u6838\u6570\u636e\u7ed3\u6784\u7684\u5185\u5bb9.","title":"\u7528\u6237\u6a21\u5f0f\u548c\u5185\u6838\u6a21\u5f0f"},{"location":"CSAPP/8/#_13","text":"\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4f7f\u7528 \u4e0a\u4e0b\u6587\u5207\u6362(context switch) \u7684 \u8f83\u9ad8\u5c42\u6b21\u5f62\u5f0f\u7684\u5f02\u5e38\u63a7\u5236 \u6765\u5b9e\u73b0\u591a\u4efb\u52a1. \u5185\u6838\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u6301\u4e00\u4e2a \u4e0a\u4e0b\u6587 , \u5728\u8fdb\u7a0b\u6267\u884c\u7684\u67d0\u4e9b\u65f6\u523b, \u5185\u6838\u53ef\u4ee5\u51b3\u5b9a\u62a2\u5360\u5f53\u524d\u8fdb\u7a0b, \u5e76\u91cd\u65b0\u5f00\u59cb\u4e00\u4e2a\u5148\u524d\u88ab\u62a2\u5360\u4e86\u7684\u8fdb\u7a0b. \u8fd9\u79cd\u51b3\u7b56\u53eb \u8c03\u5ea6(scheduling) , \u662f\u7531\u5185\u6838\u4e2d\u7684 \u8c03\u5ea6\u5668(scheduler) \u7684\u4ee3\u7801\u5904\u7406\u7684. \u5f53\u5185\u6838\u9009\u62e9\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\u8fdb\u884c\u65f6, \u6211\u4eec\u8bf4\u5185\u6838 \u8c03\u5ea6 \u4e86\u8fd9\u4e2a\u8fdb\u7a0b. \u5728\u5185\u6838\u8c03\u5ea6\u4e86\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u8fd0\u884c\u540e, \u5b83\u5c31\u62a2\u5360\u5f53\u524d\u8fdb\u7a0b, \u5e76\u4f7f\u7528\u4e00\u79cd \u4e0a\u4e0b\u6587\u5207\u6362 \u7684\u673a\u5236\u6765\u8f6c\u79fb\u63a7\u5236\u5230\u65b0\u7684\u8fdb\u7a0b. \u4e0a\u4e0b\u6587\u5207\u6362: \u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u4e0a\u4e0b\u6587 \u6062\u590d\u67d0\u4e2a\u5148\u524d\u88ab\u62a2\u5360\u7684\u8fdb\u7a0b\u88ab\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587 \u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u8fd9\u4e2a\u65b0\u6062\u590d\u7684\u8fdb\u7a0b \u5185\u6838\u4ee3\u8868\u7528\u6237\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\u53ef\u80fd\u56de\u53d1\u751f\u4e0a\u4e0b\u6587\u5207\u6362. \u5982\u679c\u7cfb\u7edf\u8c03\u7528\u56e0\u4e3a\u67d0\u4e2a\u4e8b\u4ef6\u53d1\u751f\u800c\u5835\u585e, \u5185\u6838\u53ef\u4ee5\u8ba9\u5f53\u524d\u8fdb\u7a0b\u4f11\u7720, \u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b. \u4e2d\u65ad\u4e5f\u80fd\u5f15\u53d1\u4e0a\u4e0b\u6587\u5207\u6362. Example \u5982\u4e0a\u56fe\u4e2d, read \u7cfb\u7edf\u8c03\u7528\u9700\u8981\u8bbf\u95ee\u78c1\u76d8, \u5185\u6838\u4e2d\u7684\u9677\u9631\u5904\u7406\u7a0b\u5e8f\u8bf7\u6c42\u6765\u81ea\u78c1\u76d8\u63a7\u5236\u5668\u7684 DMA \u4f20\u9001. \u800c\u78c1\u76d8\u8bfb\u53d6\u4e8b\u4ef6\u6bd4\u8f83\u8017\u65f6, \u5185\u6838\u9009\u62e9\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\u5148\u8fdb\u884c\u53e6\u4e00\u4e2a\u8fdb\u7a0b B. \u5f53\u78c1\u76d8\u8bfb\u53d6\u5b8c\u6210\u540e, \u78c1\u76d8\u53d1\u8d77\u4e2d\u65ad, \u5185\u6838\u5224\u5355\u8fdb\u7a0b B \u5df2\u7ecf\u8fdb\u884c\u4e86\u8db3\u591f\u957f\u7684\u65f6\u95f4, \u5c31\u6267\u884c\u4ece\u8fdb\u7a0b B \u5230\u8fdb\u7a0b A \u7684\u4e0a\u4e0b\u6587\u5207\u6362.","title":"\u4e0a\u4e0b\u6587\u5207\u6362"},{"location":"CSAPP/8/#_14","text":"","title":"\u8fdb\u7a0b\u63a7\u5236"},{"location":"CSAPP/8/#_15","text":"\u5f53 Unix \u7cfb\u7edf\u7ea7\u51fd\u6570\u9047\u5230\u9519\u8bef\u65f6, \u5b83\u4eec\u901a\u5e38\u4f1a\u8fd4\u56de -1, \u5e76\u8bbe\u7f6e\u5168\u5c40\u6574\u6570\u53d8\u91cf errno \u6765\u8868\u793a\u4e3a\u4ec0\u4e48\u51fa\u9519\u4e86. strerror \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6587\u672c\u4e32, \u63cf\u8ff0\u4e86\u548c\u67d0\u4e2a errno \u503c\u76f8\u5173\u8054\u7684\u9519\u8bef. \u6211\u4eec\u901a\u5e38\u4f7f\u7528\u5c01\u88c5\u7684 \u9519\u8bef\u62a5\u544a\u51fd\u6570 : void unix_error ( char * msg ){ fprintf ( stderr , \"%s: %s \\n \" , msg , strerror ( errno )); exit ( 0 ); } pid_t Fork ( void ){ pid_t pid ; if (( pid = fork ()) < 0 ) unix_error ( \"Fork error\" ); return pid ; }","title":"\u9519\u8bef\u5904\u7406"},{"location":"CSAPP/8/#id","text":"\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6b63\u6570(\u975e\u96f6)\u8fdb\u7a0b ID(PID). getpid \u51fd\u6570\u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u7684 PID, getppid \u8fd4\u56de\u5b83\u7236\u8fdb\u7a0b\u7684 PID. #include <unistd.h> #include <sys/types.h> pid_t getpid ( void ); pid_t getppid ( void ); getpid \u548c getppid \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a pid_t \u7684\u6574\u6570\u503c, Linux \u7cfb\u7edf\u5728 types.h \u4e2d\u5b9a\u4e49\u4e3a int.","title":"\u83b7\u53d6\u8fdb\u7a0b ID"},{"location":"CSAPP/8/#_16","text":"\u4e00\u4e2a\u8fdb\u7a0b\u6709\u4e09\u79cd\u53ef\u80fd\u7684\u72b6\u6001: \u8fd0\u884c : \u8fdb\u7a0b\u8981\u4e48\u5728 CPU \u4e0a\u6267\u884c, \u8981\u4e48\u5728\u7b49\u5f85\u88ab\u6267\u884c\u4e14\u6700\u7ec8\u4f1a\u88ab\u5185\u6838\u8c03\u5ea6. \u505c\u6b62 : \u8fdb\u7a0b\u7684\u6267\u884c\u88ab \u6302\u8d77(suspended) , \u4e14 \u4e0d\u4f1a\u88ab\u8c03\u5ea6 . \u5f53\u6536\u5230 SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU \u4fe1\u53f7\u65f6\u8fdb\u7a0b\u88ab\u505c\u6b62, \u5e76\u4e14\u4fdd\u6301\u505c\u6b62\u76f4\u5230\u6536\u5230 SIGCONT \u4fe1\u53f7. \u5728\u8fd9\u4e2a\u65f6\u523b\u8fdb\u7a0b\u518d\u6b21\u5f00\u59cb\u8fd0\u884c. \u7ec8\u6b62 : \u8fdb\u7a0b\u6c38\u8fdc\u5730\u505c\u6b62\u4e86. \u539f\u56e0\u5728\u4e8e: \u6536\u5230\u4e00\u4e2a\u4fe1\u53f7, \u4fe1\u53f7\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u7ec8\u6b62\u8be5\u8fdb\u7a0b; \u4ece\u4e3b\u7a0b\u5e8f\u8fd4\u56de; \u8c03\u7528 exit \u51fd\u6570.","title":"\u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b"},{"location":"CSAPP/8/#_17","text":"exit \u51fd\u6570\u4ee5 status \u9000\u51fa\u72b6\u6001\u6765\u7ec8\u6b62\u8fdb\u7a0b. #include <stdlib.h> void exit ( int status );","title":"\u7ec8\u6b62\u8fdb\u7a0b"},{"location":"CSAPP/8/#_18","text":"\u7236\u8fdb\u7a0b \u901a\u8fc7\u8c03\u7528\u51fd\u6570 fork \u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fd0\u884c\u7684 \u5b50\u8fdb\u7a0b . #include <unistd.h> #include <sys/types.h> pid_t fork ( void ); fork \u51fd\u6570\u53ea\u88ab\u8c03\u7528\u4e00\u6b21, \u4f46\u5374\u4f1a\u8fd4\u56de\u4e24\u6b21: \u4e00\u6b21\u662f\u5728\u8c03\u7528\u8fdb\u7a0b(\u7236\u8fdb\u7a0b)\u4e2d, \u4e00\u6b21\u662f\u5728\u65b0\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u4e2d. \u5728\u7236\u8fdb\u7a0b\u4e2d fork \u8fd4\u56de\u5b50\u8fdb\u7a0b\u7684 PID; \u5b50\u8fdb\u7a0b\u4e2d fork \u8fd4\u56de 0. \u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5e76\u53d1\u6267\u884c, \u5185\u6838\u80fd\u591f\u4ee5\u4efb\u610f\u65b9\u5f0f\u4ea4\u66ff\u6267\u884c\u5b83\u4eec\u7684\u903b\u8f91\u63a7\u5236\u4e2d\u7684\u6307\u4ee4. \u6211\u4eec\u51b3\u4e0d\u80fd\u5bf9\u4e0d\u540c\u8fdb\u7a0b\u4e2d\u6307\u4ee4\u7684\u4ea4\u66ff\u6267\u884c\u505a\u4efb\u4f55\u5047\u8bbe. \u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u6709 \u76f8\u540c\u4f46\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4 . \u4e24\u4e2a\u8fdb\u7a0b\u6709\u76f8\u540c(\u503c\u76f8\u540c, \u5e76\u975e\u540c\u4e00\u4e2a\u5bf9\u8c61, \u5b50\u8fdb\u7a0b\u5f97\u5230\u7684\u53ea\u662f\u7236\u8fdb\u7a0b\u7684\u4e00\u4e2a\u526f\u672c)\u7684\u7528\u6237\u6808, \u672c\u5730\u53d8\u91cf\u503c, \u5806, \u5168\u5c40\u53d8\u91cf\u503c, \u4ee3\u7801. \u4f46\u540e\u9762\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5bf9\u6570\u636e\u505a\u4efb\u4f55\u6539\u53d8\u90fd\u662f\u72ec\u7acb\u7684. \u5171\u4eab\u6587\u4ef6 . \u5b50\u8fdb\u7a0b\u8fd8\u83b7\u5f97\u4e0e\u7236\u8fdb\u7a0b\u4efb\u4f55\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u540c\u7684\u526f\u672c, \u5373\u5b50\u8fdb\u7a0b\u53ef\u4ee5\u8bfb\u5199\u7236\u8fdb\u7a0b\u6253\u5f00\u7684\u4efb\u4f55\u6587\u4ef6. Example int main () { pid_t pid ; int x = 1 ; pid = Fork (); if ( ! pid ) /* Child */ { printf ( \"child : x=%d \\n \" , ++ x ); exit ( 0 ); } /* Parent */ printf ( \"parent: x=%d \\n \" , -- x ); exit ( 0 ); } \u6211\u4eec\u53ef\u4ee5\u753b\u51fa\u4ed6\u7684\u62d3\u6251\u6392\u5e8f\u56fe: \u800c\u7236\u5b50\u8fdb\u7a0b\u7684 printf \u8c01\u5148\u6267\u884c, \u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u8c03\u5ea6, \u4e0d\u540c\u7684\u7cfb\u7edf\u4e0a\u4f1a\u6709\u4e0d\u540c\u7684\u7ed3\u679c. Example #include <unistd.h> int main () { Fork (); Fork (); printf ( \"hello \\n \" ); exit ( 0 ); } Hint : \u6709 fork \u5b58\u5728\u7684\u7a0b\u5e8f\u6700\u597d\u753b\u51fa\u62d3\u6251\u56fe.","title":"\u521b\u5efa\u8fdb\u7a0b"},{"location":"CSAPP/8/#_19","text":"\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u7ec8\u6b62\u65f6, \u5b83\u4f1a\u4e00\u76f4\u4fdd\u6301\u5728\u5df2\u7ec8\u6b62\u7684\u72b6\u6001\u76f4\u5230\u88ab\u5b83\u7684\u7236\u8fdb\u7a0b \u56de\u6536(reaped) . \u5f53\u7236\u8fdb\u7a0b\u56de\u6536\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u65f6, \u5185\u6838\u5c06\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa\u72b6\u6001\u4f20\u9012\u7ed9\u7236\u8fdb\u7a0b, \u7136\u540e\u629b\u5f03\u5df2\u7ec8\u6b62\u7684\u7236\u8fdb\u7a0b, \u6b64\u65f6\u8be5\u8fdb\u7a0b\u4e0d\u518d\u5b58\u5728\u4e86. \u4e00\u4e2a\u7ec8\u6b62\u4e86\u8fd8\u6ca1\u88ab\u56de\u6536\u7684\u8fdb\u7a0b\u79f0\u4e3a \u50f5\u6b7b\u8fdb\u7a0b(zombie) . \u5982\u679c\u4e00\u4e2a\u7236\u8fdb\u7a0b\u7ec8\u6b62\u4e86, \u5185\u6838\u4f1a\u5b89\u6392 init \u8fdb\u7a0b\u79f0\u8c13\u4ed6\u7684\u5b64\u513f\u8fdb\u7a0b\u7684\u517b\u7236. init \u8fdb\u7a0b\u7684 PID \u4e3a 1, \u662f\u5728\u7cfb\u7edf\u542f\u52a8\u540e\u7531\u5185\u6838\u521b\u5efa\u7684, \u5b83\u4e0d\u4f1a\u7ec8\u6b62, \u662f\u6240\u6709\u8fdb\u7a0b\u7684\u7956\u5148. \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7 waitpid \u51fd\u6570\u6765\u7b49\u5f85\u5b83\u7684\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u6216\u505c\u6b62, \u7236\u8fdb\u7a0b\u4f1a\u5f97\u5230\u88ab\u56de\u6536\u7684\u5b50\u8fdb\u7a0b PID, \u4e14\u5185\u6838\u4f1a\u6e05\u9664\u6b64\u50f5\u6b7b\u8fdb\u7a0b. #include <sys/types.h> #include <sys/wait.h> pid_t waitpid ( pid_t pid , int * statusp , int options ); \u7b49\u5f85\u96c6\u5408 pid pid>0 , \u7b49\u5f85\u96c6\u5408\u5c31\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u5b50\u8fdb\u7a0b, \u5b83\u7684\u8fdb\u7a0b PID \u7b49\u4e8e pid. pid=-1 , \u7b49\u5f85\u96c6\u5408\u5c31\u662f\u7531\u7236\u8fdb\u7a0b\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u7ec4\u6210\u7684. \u7b49\u5f85\u884c\u4e3a options 0 \u9ed8\u8ba4\u9009\u9879. waitpid \u6302\u8d77\u8c03\u7528\u8fdb\u7a0b\u7684\u6267\u884c, \u76f4\u5230\u5b83\u7684\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7ec8\u6b62. \u5982\u679c\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u5728\u521a\u8c03\u7528\u7684\u65f6\u523b\u5df2\u7ecf\u7ec8\u6b62\u4e86, \u90a3\u4e48 waitpid \u5c31\u7acb\u523b\u8fd4\u56de. \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5 waitpid \u8fd4\u56de\u5bfc\u81f4 waitpid \u8fd4\u56de\u7684\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u7684 PID. \u6b64\u65f6\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u88ab\u56de\u6536. WNOHANG \u5982\u679c\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b\u90fd\u8fd8\u6ca1\u6709\u7ec8\u6b62, \u90a3\u4e48\u5c31\u7acb\u5373\u8fd4\u56de 0. \u5982\u679c\u60f3\u5728\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u7684\u540c\u65f6\u505a\u4e9b\u5176\u4ed6\u5de5\u4f5c, \u8fd9\u4e2a\u9009\u9879\u4f1a\u6709\u7528. WUNTRACED \u6302\u8d77\u8c03\u7528\u7a0b\u5e8f\u7684\u6267\u884c, \u76f4\u5230\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u53d8\u6210\u5df2\u7ec8\u6b62\u6216\u88ab\u505c\u6b62. WCONTINUED \u6302\u8d77\u8c03\u7528\u7a0b\u5e8f\u7684\u6267\u884c, \u76f4\u5230\u7b49\u5f85\u96c6\u5408\u4e2d\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u7ec8\u6b62\u6216\u8005\u7b49\u5f85\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u88ab\u505c\u6b62\u7684\u8fdb\u7a0b\u6536\u5230 SIGCONT \u4fe1\u53f7\u91cd\u65b0\u5f00\u59cb\u6267\u884c. \u6ce8: \u53ef\u4ee5\u7528 | \u5c06\u9009\u9879\u7ed3\u5408. \u68c0\u67e5\u5df2\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa\u72b6\u6001 \u5982\u679c statusp \u53c2\u6570\u975e\u7a7a, waitpid \u4f1a\u5728 status \u4e2d\u653e\u4e0a\u5173\u4e8e\u5bfc\u81f4\u8fd4\u56de\u7684\u5b50\u8fdb\u7a0b\u7684\u72b6\u6001\u4fe1\u606f, status \u662f statusp \u6307\u5411\u7684\u503c. WIFEXITED(status) : \u5982\u679c\u5b50\u8fdb\u7a0b\u901a\u8fc7\u8c03\u7528 exit \u6216\u8005 return \u6b63\u5e38\u7ec8\u6b62\u5c31\u8fd4\u56de true, \u6b64\u65f6\u53ef\u901a\u8fc7 WEXITSTATUS(status) \u83b7\u5f97\u9000\u51fa\u72b6\u6001. WIFSIGNALED(status) : \u5982\u679c\u5b50\u8fdb\u7a0b\u56e0\u4e3a\u4e00\u4e2a\u672a\u88ab\u6355\u83b7\u7684\u4fe1\u53f7\u7ec8\u6b62, \u8fd4\u56de true, \u6b64\u65f6\u53ef\u901a\u8fc7 WTERMSIG(statusp) \u83b7\u5f97\u4fe1\u53f7\u7f16\u53f7. WIFSTOPPED(statusp) : \u5982\u679c\u5f15\u8d77\u51fd\u6570\u8fd4\u56de\u7684\u5b50\u8fdb\u7a0b\u662f\u505c\u6b62\u7684, \u5219\u8fd4\u56de true, \u6b64\u65f6\u53ef\u901a\u8fc7 WSTOPSIG(statusp) \u83b7\u5f97\u5f15\u8d77\u5b50\u8fdb\u7a0b\u505c\u6b62\u7684\u4fe1\u53f7\u7f16\u53f7. WIFCONTINUED(statusp) : \u5982\u679c\u5b50\u8fdb\u7a0b\u6536\u5230 SIGCONT \u4fe1\u53f7\u91cd\u65b0\u8fd0\u884c, \u5219\u8fd4\u56de true. \u5982\u679c\u8c03\u7528\u8fdb\u7a0b\u6ca1\u6709\u5b50\u8fdb\u7a0b, \u90a3\u4e48 waitpid \u8fd4\u56de -1, \u5e76\u8bbe\u7f6e errno \u4e3a ECHILD. \u5982\u679c waitpid \u88ab\u4e00\u4e2a\u4fe1\u53f7\u4e2d\u65ad, \u90a3\u4e48\u5b83\u8fd4\u56de -1, \u5e76\u8bbe\u7f6e errno \u4e3a EINTR. wait \u51fd\u6570\u662f waitpid \u7684\u7b80\u5355\u7248\u672c. #include <sys/types.h> #include <sys/wait.h> pid_t wait ( int * statusp ); \u8c03\u7528 wait(&status) \u7b49\u4ef7\u4e8e\u8c03\u7528 waitpid(-1, &status, 0) Example int main () { if ( Fork () == 0 ) { printf ( \"a\" ); fflush ( stdout ); } else { printf ( \"b\" ); fflush ( stdout ); wait ( NULL ); } pritnf ( \"c\" ); fflush ( stdout ); exit ( 0 ); } \u753b\u51fa\u5176\u62d3\u6251\u56fe: Warning \u7a0b\u5e8f\u4e0d\u4f1a\u6309\u7279\u5b9a\u7684\u987a\u5e8f\u56de\u6536\u5b50\u8fdb\u7a0b.","title":"\u56de\u6536\u8fdb\u7a0b"},{"location":"CSAPP/8/#_20","text":"#include <unistd.h> unsigned int sleep ( unsigned int secs ); int pause ( void ); sleep \u51fd\u6570\u8ba9\u4e00\u4e2a\u8fdb\u7a0b\u6302\u8d77\u4e00\u6bb5\u6307\u5b9a\u7684\u65f6\u95f4 \u5982\u679c\u8bf7\u6c42\u7684\u65f6\u95f4\u5230\u4e86, sleep \u5c31\u8fd4\u56de 0, \u5426\u5219\u8fd4\u56de\u8fd8\u5269\u4e0b\u8981\u4f11\u7720\u7684\u65f6\u95f4. \u5f53 sleep \u88ab\u4e00\u4e2a\u4fe1\u53f7\u4e2d\u65ad\u65f6, \u5b83\u53ef\u80fd\u4f1a\u8fc7\u65e9\u7684\u8fd4\u56de. pause \u51fd\u6570\u5c06\u8fdb\u7a0b\u6302\u8d77, \u76f4\u5230\u8be5\u8fdb\u7a0b\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7.","title":"\u8ba9\u8fdb\u7a0b\u4f11\u7720"},{"location":"CSAPP/8/#_21","text":"execve \u51fd\u6570\u5728\u5f53\u524d\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u52a0\u8f7d\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7a0b\u5e8f. #include <unistd.h> int execve ( const char * filename , const char * argv [], const char * envp []); execve \u51fd\u6570\u52a0\u8f7d\u5e76\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6 filename, \u4e14\u5e26\u53c2\u6570\u5217\u8868 argv \u548c\u73af\u5883\u53d8\u91cf\u5217\u8868 envp. \u53ea\u6709\u5f53\u51fa\u73b0\u9519\u8bef( e.g. \u627e\u4e0d\u5230 filename), execve \u624d\u4f1a\u8fd4\u56de\u5230\u8c03\u7528\u7a0b\u5e8f. \u52a0\u8f7d filename \u540e, \u8c03\u7528\u542f\u52a8\u4ee3\u7801, \u5e76\u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u65b0\u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570. argv \u53d8\u91cf\u6307\u5411\u4e00\u4e2a\u4ee5 null \u7ed3\u5c3e\u7684\u6307\u9488\u6570\u7ec4, \u5176\u4e2d\u6bcf\u4e2a\u6307\u9488\u90fd\u6307\u5411\u4e00\u4e2a\u53c2\u6570\u5b57\u7b26\u4e32, envp\u7c7b\u4f3c. \u7528\u6237\u6808\u7684\u7ec4\u7ec7\u7ed3\u6784: \u5176\u4e2d\u5168\u5c40\u53d8\u91cf environ \u6307\u5411 envp[0], \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 environ \u6765\u83b7\u5f97\u73af\u5883\u5217\u8868. \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e9b\u51fd\u6570\u80fd\u591f\u5bf9\u73af\u5883\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c: #include <stdlib.h> char * getenv ( const char * name ); //\u83b7\u5f97\u540d\u5b57\u4e3aname\u7684\u73af\u5883\u503c int setenv ( const char * name , const char * newvalue , int overwrite ); //\u5bf9\u73af\u5883\u503c\u8fdb\u884c\u4fee\u6539 int unsetenv ( const char * name ); // \u5220\u9664\u73af\u5883\u53d8\u91cf fork & execve fork \u51fd\u6570\u65b0\u5efa\u4e00\u4e2a\u4e0d\u540c PID \u7684\u5b50\u8fdb\u7a0b\uff0c\u5177\u6709\u548c\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u4e0a\u4e0b\u6587\uff0c\u662f\u7236\u8fdb\u7a0b\u7684\u590d\u5236\u54c1\uff0c\u8fd0\u884c\u76f8\u540c\u7684\u4ee3\u7801\u3001\u7a0b\u5e8f\u548c\u53d8\u91cf\uff0c\u5c31\u662f\u7a0b\u5e8f\u4e0d\u53d8\uff0c\u800c\u5728\u4e0d\u540c\u8fdb\u7a0b. \u800c execve \u51fd\u6570\u4fdd\u6301 PID \u4e0d\u53d8\uff0c\u5728\u5f53\u524d\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u52a0\u8f7d\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7a0b\u5e8f\uff0c\u4f1a\u8986\u76d6\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5e76\u7ee7\u627f\u8c03\u7528 execve \u51fd\u6570\u65f6\u5df2\u6253\u5f00\u7684\u6240\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5c31\u662f\u4fdd\u6301\u8fdb\u7a0b\u4e0d\u53d8\uff0c\u4f46\u662f\u8fd0\u884c\u5b8c\u5168\u4e0d\u540c\u7684\u7a0b\u5e8f. fork \u51fd\u6570\u8c03\u7528\u4e00\u6b21\u8fd4\u56de\u4e24\u6b21\uff0c\u800c execve \u51fd\u6570\u8c03\u7528\u540e\uff0c\u53ea\u6709\u51fa\u73b0\u9519\u8bef\u624d\u4f1a\u8fd4\u56de\u5230\u8c03\u7528\u7a0b\u5e8f. \u60f3\u8981\u4fdd\u6301\u5f53\u524d\u8fdb\u884c\u8fd0\u884c\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd0\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7 fork \u65b0\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u7136\u540e\u5728\u5b50\u8fdb\u7a0b\u4e2d\u7528 execve \u6267\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6b64\u65f6\u5728\u7236\u8fdb\u7a0b\u5c31\u8fd0\u884c\u539f\u6765\u7684\u7a0b\u5e8f\uff0c\u800c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5c31\u8fd0\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f.","title":"\u52a0\u8f7d\u5e76\u8fd0\u884c\u7a0b\u5e8f"},{"location":"CSAPP/8/#_22","text":"\u4fe1\u53f7 \u5c31\u662f\u4e00\u6761\u5c0f\u6d88\u606f, \u5b83\u901a\u77e5\u8fdb\u7a0b\u7cfb\u7edf\u4e2d\u53d1\u751f\u4e86\u4e00\u4e2a\u67d0\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6. \u5185\u6838\u68c0\u6d4b\u5230\u4e86\u4e00\u4e2a\u7cfb\u7edf\u4e8b\u4ef6\uff0c\u6bd4\u5982\u9664\u96f6\u9519\u8bef\u3001\u6267\u884c\u975e\u6cd5\u6307\u4ee4\u6216\u5b50\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u4f4e\u5c42\u6b21\u7684\u786c\u4ef6\u5f02\u5e38\u90fd\u662f\u7531\u5185\u6838\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5904\u7406\u7684\uff0c\u5bf9\u7528\u6237\u8fdb\u7a0b\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u7ed9\u7528\u6237\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u7684\u5f62\u5f0f\u6765\u544a\u77e5\uff0c\u6bd4\u5982\u9664\u96f6\u9519\u8bef\u5c31\u53d1\u9001 SIGFPE \u4fe1\u53f7\uff0c\u6267\u884c\u975e\u6cd5\u6307\u4ee4\u5c31\u53d1\u9001 SIGILL \u4fe1\u53f7\uff0c\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u5185\u6838\u5c31\u53d1\u9001 SIGHLD \u5230\u7236\u8fdb\u7a0b\u4e2d\uff0c\u5219\u6b64\u65f6\u7236\u8fdb\u7a0b\u5c31\u80fd\u5bf9\u8be5\u5b50\u8fdb\u7a0b\u8c03\u7528 waitpid \u6765\u8fdb\u884c\u56de\u6536. \u5185\u6838\u6216\u5176\u4ed6\u8fdb\u7a0b\u51fa\u73b0\u4e86\u8f83\u9ad8\u5c42\u6b21\u7684\u8f6f\u4ef6\u4e8b\u4ef6\uff0c\u6bd4\u5982\u8f93\u5165\u7ec4\u5408\u952e\uff0c\u6216\u4e00\u4e2a\u8fdb\u7a0b\u5c1d\u8bd5\u7ec8\u6b62\u5176\u4ed6\u8fdb\u7a0b\uff0c\u90fd\u662f\u663e\u793a\u8981\u6c42\u5185\u6838\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\u7ed9\u76ee\u6807\u8fdb\u7a0b\uff0c\u6bd4\u5982\u8f93\u5165\u7ec4\u5408\u952e\u5185\u6838\u4f1a\u53d1\u9001 SIGINT \u4fe1\u53f7\u7ed9\u6240\u6709\u8fdb\u7a0b\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u53d1\u9001 SIGKILL \u4fe1\u53f7\u7ed9\u522b\u7684\u8fdb\u7a0b\u6765\u8fdb\u884c\u7ec8\u6b62. \u6ce8: \u5f02\u5e38\u662f\u7531\u786c\u4ef6\u548c\u8f6f\u4ef6\u5171\u540c\u5b9e\u73b0, \u800c\u4fe1\u53f7\u5b8c\u5168\u7531\u8f6f\u4ef6\u5b9e\u73b0, \u4e14\u90fd\u662f\u7531\u5185\u6838\u53d1\u9001. \u5982\u4e0b\u662f Linux \u7cfb\u7edf\u652f\u6301\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u4fe1\u53f7, \u6bcf\u79cd\u4fe1\u53f7\u90fd\u5bf9\u5e94\u67d0\u79cd\u7cfb\u7edf\u4e8b\u4ef6. \u4f20\u9001\u4e00\u4e2a\u4fe1\u53f7\u5230\u76ee\u7684\u8fdb\u7a0b\u662f\u7531\u4e24\u4e2a\u6b65\u9aa4\u7ec4\u6210: \u53d1\u9001\u4fe1\u53f7 \u5185\u6838\u901a\u8fc7\u66f4\u65b0\u76ee\u7684\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u7684\u67d0\u4e2a\u72b6\u6001, \u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\u7ed9\u76ee\u7684\u8fdb\u7a0b. \u53d1\u9001\u4fe1\u53f7\u53ef\u80fd\u6709\u4e24\u79cd\u539f\u56e0: \u5185\u6838\u68c0\u6d4b\u5230\u4e00\u4e2a\u7cfb\u7edf\u65f6\u95f4(\u5982\u9664\u96f6, \u5b50\u8fdb\u7a0b\u7ec8\u6b62); \u4e00\u4e2a\u8fdb\u7a0b\u8c03\u7528\u4e86 kill \u51fd\u6570, \u663e\u5f0f\u5730\u8981\u6c42\u5185\u6838\u53d1\u9001\u4fe1\u53f7. \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u53d1\u4fe1\u53f7\u7ed9\u4ed6\u81ea\u5df1. \u63a5\u6536\u4fe1\u53f7 \u5f53\u76ee\u7684\u8fdb\u7a0b\u88ab\u5185\u6838\u5f3a\u8feb\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5bf9\u4fe1\u53f7\u7684\u53d1\u9001\u505a\u51fa\u53cd\u5e94\u65f6, \u5b83\u5c31\u63a5\u53d7\u4e86\u4fe1\u53f7. \u8fdb\u7a0b\u53ef\u4ee5\u5ffd\u7565\u4fe1\u53f7, \u7ec8\u6b62\u8fdb\u7a0b, \u6216\u6267\u884c \u7528\u6237\u7ea7 \u7684 \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f . \u4e00\u4e2a\u53d1\u51fa\u800c\u6ca1\u6709\u63a5\u6536\u7684\u4fe1\u53f7\u53eb\u505a \u5f85\u5904\u7406\u4fe1\u53f7(pending signal) . \u4efb\u4f55\u65f6\u523b\u4e00\u79cd\u7c7b\u578b\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u5f85\u5904\u7406\u4fe1\u53f7. \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u6709\u7c7b\u578b k \u7684\u5f85\u5904\u7406\u4fe1\u53f7, \u90a3\u4e48\u63a5\u4e0b\u6765\u4efb\u4f55\u53d1\u5230\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u7c7b\u578b k \u4fe1\u53f7\u5c06\u88ab\u76f4\u63a5\u4e22\u5f03. \u5f53\u4e00\u79cd\u4fe1\u53f7\u88ab \u5835\u585e \u65f6, \u5b83\u4ecd\u7136\u53ef\u4ee5\u88ab\u53d1\u9001, \u53ea\u662f\u4e0d\u4f1a\u88ab\u63a5\u6536. \u4e00\u4e2a\u5f85\u5904\u7406\u4fe1\u53f7\u6700\u591a\u88ab\u63a5\u53d7\u4e00\u6b21.","title":"\u4fe1\u53f7"},{"location":"CSAPP/8/#_23","text":"Unix \u63d0\u4f9b\u5411\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u7684\u673a\u5236, \u90fd\u662f\u57fa\u4e8e \u8fdb\u7a0b\u7ec4(process group) .","title":"\u53d1\u9001\u4fe1\u53f7"},{"location":"CSAPP/8/#_24","text":"\u6bcf\u4e2a\u8fdb\u7a0b\u53ea\u5c5e\u4e8e\u4e00\u4e2a\u8fdb\u7a0b\u7ec4, \u8fdb\u7a0b\u7ec4\u7531\u4e00\u4e2a\u6b63\u6574\u6570\u8fdb\u7a0b\u7ec4 ID \u6765\u6807\u8bc6. getpgrp \u51fd\u6570\u8fd4\u56de\u5f53\u524d\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u7ec4 ID. #include <unistd.h> pid_t getpgrp ( void ); //\u8fd4\u56de\u6240\u5728\u7684\u8fdb\u7a0b\u7ec4 \u9ed8\u8ba4\u5730, \u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fdb\u7a0b\u7ec4. \u4e00\u4e2a\u8fdb\u7a0b\u7ec4\u53ef\u4ee5\u901a\u8fc7 set-pgid \u51fd\u6570\u6765\u6539\u53d8\u81ea\u5df1\u6216\u5176\u4ed6\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u7ec4. #include <unistd.h> int setpgip ( pid_t pid , pid_t pgid ); //\u8bbe\u7f6e\u8fdb\u7a0b\u7ec4 setpgid \u51fd\u6570\u5c06\u8fdb\u7a0b pid \u7684\u8fdb\u7a0b\u7ec4\u6539\u4e3a pgid. \u5982\u679c pid \u662f 0, \u90a3\u4e48\u5c31\u4f7f\u7528\u5f53\u524d\u8fdb\u7a0b\u7684 PID. \u5982\u679c pgid \u662f 0, \u90a3\u4e48\u5c31\u7528 pid \u6307\u5b9a\u7684\u8fdb\u7a0b PID \u4f5c\u4e3a\u8fdb\u7a0b\u7ec4 ID(\u521b\u5efa/\u52a0\u5165\u4e00\u4e2a\u8fdb\u7a0b\u7ec4 ID \u4e3a pid \u7684\u8fdb\u7a0b\u7ec4). Unix shell \u4f7f\u7528 \u4f5c\u4e1a(job) \u7684\u6982\u5ff5\u6765\u8868\u793a\u5bf9\u4e00\u6761\u547d\u4ee4\u884c\u6c42\u503c\u800c\u521b\u5efa\u7684\u8fdb\u7a0b. \u5728\u4efb\u4f55\u65f6\u523b\u81f3\u591a\u6709\u4e00\u4e2a\u524d\u53f0\u4f5c\u4e1a\u548c\u4efb\u610f\u4e2a\u540e\u53f0\u4f5c\u4e1a. shell \u4f1a\u4e3a\u6bcf\u4e2a\u4f5c\u4e1a\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u8fdb\u7a0b\u7ec4, \u8be5\u8fdb\u7a0b\u7ec4 ID \u7531\u8be5\u4f5c\u4e1a\u4e2d\u4efb\u610f\u4e00\u4e2a\u7236\u8fdb\u7a0b\u7684 PID \u51b3\u5b9a.","title":"\u8fdb\u7a0b\u7ec4"},{"location":"CSAPP/8/#_25","text":"\u7528 /bin/kill \u53d1\u9001\u4fe1\u53f7 /bin/kill [-\u4fe1\u53f7\u7f16\u53f7] id \u53ef\u4ee5\u5411\u53e6\u5916\u7684\u8fdb\u7a0b\u53d1\u9001\u4efb\u610f\u7684\u4fe1\u53f7. e.g. linux> /bin/kill -9 15213 \u53d1\u9001\u4fe1\u53f7 9(SIGKILL)\u7ed9\u8fdb\u7a0b 15213. \u4e00\u4e2a\u4e3a\u8d1f\u7684 PID \u4f1a\u5bfc\u81f4\u4fe1\u53f7\u88ab\u53d1\u9001\u5230\u8fdb\u7a0b\u7ec4 PID \u7684\u6bcf\u4e2a\u8fdb\u7a0b. e.g. linux> /bin/kill -0 -15213 \u53d1\u9001\u4fe1\u53f7\u5230\u8fdb\u7a0b\u7ec4 15213 \u7684\u6bcf\u4e2a\u8fdb\u7a0b. \u6ce8: \u6211\u4eec\u4f7f\u7528\u5b8c\u6574\u8def\u5f84 /bin/kill , \u56e0\u4e3a\u6709\u4e9b Unix shell \u6709\u81ea\u5df1\u5185\u7f6e\u7684 kill \u6307\u4ee4. \u4ece\u952e\u76d8\u53d1\u9001\u4fe1\u53f7 \u5728\u952e\u76d8\u4e0a\u8f93\u5165 Ctrl+C \u4f1a\u5bfc\u81f4\u5185\u6838\u53d1\u9001\u4e00\u4e2a SIGINT \u4fe1\u53f7\u5230 \u524d\u53f0 \u8fdb\u7a0b\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u662f\u7ec8\u6b62\u524d\u53f0\u4f5c\u4e1a. \u7c7b\u4f3c\u5730, \u8f93\u5165 Ctrl+Z \u4f1a\u53d1\u9001\u4e00\u4e2a SIGTSTP \u4fe1\u53f7\u5230\u524d\u53f0\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b. \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7ed3\u679c\u662f\u505c\u6b62(\u6302\u8d77)\u524d\u53f0\u4f5c\u4e1a. \u7528 kill \u51fd\u6570\u53d1\u9001\u4fe1\u53f7 \u8fdb\u7a0b\u901a\u8fc7\u8c03\u7528 kill \u51fd\u6570\u53d1\u9001\u4fe1\u53f7\u7ed9\u5176\u4ed6\u8fdb\u7a0b(\u5305\u62ec\u5b83\u4eec\u81ea\u5df1) #include <sys/types.h> #include <signal.h> int kill ( pid_t pid , int sig ); \u5982\u679c pid \u5927\u4e8e 0, \u90a3\u4e48 kill \u51fd\u6570\u53d1\u9001\u4fe1\u53f7 sig \u7ed9\u8fdb\u7a0b pid. \u5982\u679c pid \u7b49\u4e8e 0, \u90a3\u4e48 kill \u53d1\u9001\u4fe1\u53f7\u7ed9\u8c03\u7528\u8fdb\u7a0b\u7ec4\u6240\u5728\u7684\u6bcf\u4e2a\u8fdb\u7a0b(\u5305\u62ec\u8c03\u7528\u8fdb\u7a0b\u81ea\u5df1) \u5982\u679c pid \u5c0f\u4e8e 0, kill \u53d1\u9001\u4fe1\u53f7\u7ed9\u8fdb\u7a0b\u7ec4 \\({\\left|pid\\right|}\\) \u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b. \u7528 alarm \u51fd\u6570\u53d1\u9001\u4fe1\u53f7 \u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 alarm \u51fd\u6570\u5411\u5b83\u81ea\u5df1\u53d1\u9001 SIGALRM \u4fe1\u53f7. #include <unistd.h> unsigned int alarm ( unsigned int secs ); alarm \u51fd\u6570\u5b89\u6392\u5185\u6838\u5728 secs \u79d2\u540e\u53d1\u9001\u4e00\u4e2a SIGALRM \u4fe1\u53f7\u7ed9\u8c03\u7528\u8fdb\u7a0b. \u4e00\u4e2a\u8fdb\u7a0b\u53ea\u80fd\u6709\u4e00\u4e2a\u95f9\u949f, \u5982\u679c\u5728\u8c03\u7528 alarm \u524d\u5df2\u7ecf\u6709\u5f85\u5904\u7406\u7684\u95f9\u949f, \u5219\u66ff\u6362\u5b83\u5e76\u8fd4\u56de\u5f85\u5904\u7406\u95f9\u949f\u5269\u4f59\u7684\u65f6\u95f4. secs \u5982\u679c\u4e3a 0 \u5219\u4e0d\u4f1a\u5b89\u6392\u65b0\u7684\u95f9\u949f.","title":"\u53d1\u9001\u4fe1\u53f7"},{"location":"CSAPP/8/#_26","text":"\u5f53\u5185\u6838\u628a\u8fdb\u7a0b p \u4ece\u5185\u6838\u6a21\u5f0f\u5207\u6362\u5230\u7528\u6237\u6a21\u5f0f\u65f6(\u4f8b\u5982\u4ece\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u6216\u8005\u5b8c\u6210\u4e00\u6b21\u4e0a\u4e0b\u6587\u5207\u6362), \u5b83\u4f1a\u68c0\u67e5\u8fdb\u7a0b p \u7684\u672a\u88ab\u963b\u585e\u7684\u5f85\u5904\u7406\u4fe1\u53f7\u7684\u96c6\u5408, \u5373 pending & ~blocked \u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u4e3a\u7a7a, \u90a3\u4e48\u5185\u6838\u5c06\u63a7\u5236\u4f20\u9012\u5230 p \u7684\u903b\u8f91\u63a7\u5236\u6d41\u7684\u4e0b\u4e00\u6761\u6307\u4ee4. \u5982\u679c\u96c6\u5408\u975e\u7a7a, \u5185\u6838\u9009\u62e9\u96c6\u5408\u4e2d\u67d0\u4e2a\u4fe1\u53f7 k(\u901a\u5e38\u662f\u6700\u5c0f\u7684 k)\u5e76\u5f3a\u5236 p \u63a5\u6536\u4fe1\u53f7 k, \u5b8c\u6210\u4fe1\u53f7\u5bf9\u5e94\u7684\u884c\u4e3a, \u518d\u5c06\u63a7\u5236\u8f6c\u79fb\u5230 p \u903b\u8f91\u6d41\u7684\u4e0b\u4e00\u6761\u6307\u4ee4. \u6bcf\u4e2a\u4fe1\u53f7\u7c7b\u578b\u90fd\u6709\u4e00\u79cd\u9884\u5b9a\u4e49\u7684 \u9ed8\u8ba4\u884c\u4e3a : \u8fdb\u7a0b\u7ec8\u6b62 \u8fdb\u7a0b\u7ec8\u6b62\u5e76\u8f6c\u50a8\u5185\u5b58 \u8fdb\u7a0b\u505c\u6b62(\u6302\u8d77)\u76f4\u5230\u88ab SIGCONT \u4fe1\u53f7\u91cd\u542f \u8fdb\u7a0b\u5ffd\u7565\u8be5\u4fe1\u53f7 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 signal \u51fd\u6570\u4fee\u6539\u4e0e\u4fe1\u53f7\u76f8\u5173\u8054\u7684\u9ed8\u8ba4\u884c\u4e3a.( SIGSTOP``SIGKILL \u5b83\u4eec\u7684\u9ed8\u8ba4\u884c\u4e3a\u4e0d\u80fd\u88ab\u4fee\u6539) #include <signal.h> typedef void ( * sighandler_t )( int ); sighandler_t signal ( int signum , sighandler_t handler ); \u5982\u679c handler \u662f SIG_IGN , \u90a3\u4e48\u5ffd\u7565\u7c7b\u578b\u4e3a signum \u7684\u4fe1\u53f7. \u5982\u679c handler \u662f SIG_DFL , \u90a3\u4e48\u7c7b\u578b\u4e3a signum \u7684\u4fe1\u53f7\u884c\u4e3a\u6062\u590d\u4e3a\u9ed8\u8ba4\u884c\u4e3a. \u5426\u5219 handler \u4e3a\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u5730\u5740, \u8fd9\u4e2a\u51fd\u6570\u79f0\u4e3a \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f . \u5f53\u63a5\u6536\u5230 signum \u4fe1\u53f7\u65f6\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u7a0b\u5e8f. \u8fd9\u79cd\u884c\u4e3a\u53eb \u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f .(\u540c\u4e00\u4e2a\u5904\u7406\u51fd\u6570\u53ef\u4ee5\u6355\u83b7\u591a\u79cd\u7c7b\u578b\u7684\u4fe1\u53f7) \u8c03\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u79f0\u4e3a \u6355\u83b7\u4fe1\u53f7 , \u6267\u884c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u79f0\u4e3a \u5904\u7406\u4fe1\u53f7 . \u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6, \u63a7\u5236(\u901a\u5e38)\u4f20\u9012\u56de\u63a7\u5236\u6d41\u4e2d\u4e0b\u4e00\u6761\u6307\u4ee4. \u5f53 signal \u6267\u884c\u6210\u529f, \u8fd4\u56de\u4e4b\u524d signal handler \u7684\u503c, \u5426\u5219\u8fd4\u56de SIG_ERR (\u4e0d\u8bbe\u7f6e errno) Warning \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u5176\u4ed6\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u65ad. Warning \u5728 fork + execve \u540e, \u5b50\u8fdb\u7a0b\u8fdb\u5165\u5230\u65b0\u7684\u4e0a\u4e0b\u6587\u91cc, \u6b64\u65f6\u539f\u5148\u7ed1\u5b9a\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e0d\u518d\u751f\u6548, \u800c\u662f\u56de\u5230\u9ed8\u8ba4\u72b6\u6001.","title":"\u63a5\u6536\u4fe1\u53f7"},{"location":"CSAPP/8/#_27","text":"\u963b\u585e, \u6307\u4fe1\u53f7\u88ab\u53d1\u9001\u540e\u6682\u4e0d\u63a5\u6536(\u5904\u7406)\u6b64\u4fe1\u53f7, \u800c\u975e\u4e22\u5f03. Linux \u63d0\u4f9b\u663e\u5f0f\u548c\u9690\u5f0f\u7684\u963b\u585e\u673a\u5236. \u9690\u5f0f\u963b\u585e\u673a\u5236 : \u5185\u6838\u9ed8\u8ba4\u963b\u585e\u4efb\u4f55\u5f53\u524d\u5904\u7406\u7a0b\u5e8f\u6b63\u5728\u5904\u7406\u4fe1\u53f7\u7c7b\u578b\u7684\u5f85\u5904\u7406\u7684\u4fe1\u53f7. e.g. \u7a0b\u5e8f\u6355\u83b7\u4e86\u4fe1\u53f7 s, \u6b63\u5728\u6267\u884c\u5176\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f, \u8fd9\u65f6\u518d\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7 s, s \u4f1a\u53d8\u6210\u5f85\u5904\u7406\u800c\u4e0d\u662f\u88ab\u63a5\u6536. \u663e\u5f0f\u963b\u585e\u673a\u5236 : \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528 sigprocmask \u51fd\u6570\u548c\u5b83\u7684\u8f85\u52a9\u51fd\u6570, \u663e\u5f0f\u5730\u963b\u585e\u548c\u89e3\u9664\u963b\u585e\u9009\u5b9a\u7684\u4fe1\u53f7. #include <signal.h> int sigprocmask ( int how , const sigset_t * set , sigset_t * oldset ); sigprocmask \u51fd\u6570\u6539\u53d8\u5f53\u524d\u963b\u585e\u4fe1\u53f7\u7684\u96c6\u5408(blocked \u4f4d\u5411\u91cf). \u901a\u8fc7 how \u7684\u503c\u6765\u51b3\u5b9a\u6539\u53d8\u96c6\u5408\u7684\u65b9\u5f0f: SIG_BLOCK : \u628a set \u4e2d\u7684\u4fe1\u53f7\u6dfb\u52a0\u5230 blocked \u4e2d. blocked = blocked | set SIG_UNBLOCK : \u4ece blocked \u4e2d\u5220\u9664 set \u4e2d\u7684\u4fe1\u53f7. blocked = blocked & ~set SIG_SETMASK : blocked = mask \u5982\u679c oldset \u975e\u7a7a, \u90a3\u4e48 blocked \u4f4d\u5411\u91cf\u4e4b\u524d\u7684\u503c\u4fdd\u5b58\u5728 oldset \u4e2d. \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u51fd\u6570\u5bf9 set \u4fe1\u53f7\u96c6\u5408\u8fdb\u884c\u64cd\u4f5c: int sigemptyset ( sigset_t * set ); int sigfillset ( sigset_t * set ); int sigaddset ( sigset_t * set , int signum ); int sigdelset ( sigset_t * set , int signum ); int sigismember ( const sigset_t * set , int signum ); sigemptyset : \u521d\u59cb\u5316 set \u4e3a\u7a7a\u96c6\u5408 sigfillset : \u5c06\u6bcf\u4e2a\u4fe1\u53f7\u90fd\u6dfb\u52a0\u5230 set \u4e2d sigaddset : \u5c06 sigunm \u6dfb\u52a0\u5230 set sigdelset : \u4ece set \u4e2d\u5220\u9664 signum sigismember : \u5982\u679c signum \u662f set \u7684\u6210\u5458\u5219\u8fd4\u56de 1, \u5426\u5219\u8fd4\u56de 0.","title":"\u963b\u585e\u4fe1\u53f7"},{"location":"CSAPP/8/#_28","text":"\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6709\u51e0\u4e2a\u68d8\u624b\u5c5e\u6027\u4f7f\u5f97\u4ed6\u4eec\u5f88\u96be\u5206\u6790: \u5904\u7406\u7a0b\u5e8f\u4e0e\u4e3b\u7a0b\u5e8f\u5728 \u76f8\u540c\u7684\u8fdb\u7a0b \u4e2d \u5e76\u53d1\u8fd0\u884c , \u5171\u4eab\u540c\u6837\u7684\u5168\u5c40\u53d8\u91cf. \u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u63a5\u6536\u4fe1\u53f7\u5e38\u5e38\u6709\u8fdd\u4eba\u7684\u76f4\u89c9 \u4e0d\u540c\u7684\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u8bed\u4e49","title":"\u7f16\u5199\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f"},{"location":"CSAPP/8/#_29","text":"\u5904\u7406\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u7b80\u5355 . e.g. \u5904\u7406\u7a0b\u5e8f\u53ea\u662f\u7b80\u5355\u5730\u8bbe\u7f6e\u5168\u5c40\u6807\u5fd7\u5e76\u7acb\u5373\u53d1\u6325; \u6240\u6709\u4e0e\u63a5\u6536\u4fe1\u53f7\u76f8\u5173\u7684\u5904\u7406\u90fd\u7531\u4e3b\u7a0b\u5e8f\u6267\u884c, \u5b83\u5468\u671f\u6027\u5730\u68c0\u67e5(\u5e76\u91cd\u7f6e)\u8fd9\u4e2a\u6807\u5fd7. \u5728\u5904\u7406\u7a0b\u5e8f\u4e2d\u53ea\u8c03\u7528\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570 . \u56e0\u4e3a\u5b83\u662f \u53ef\u91cd\u5165 \u7684(\u4f8b\u5982\u53ea\u8bbf\u95ee\u5c40\u90e8\u53d8\u91cf), \u8981\u4e48\u5b83\u662f\u4e0d\u80fd\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u65ad\u7684. \u4e0b\u56fe\u5217\u51fa\u4e86 Linux \u5b89\u5168\u7684\u7cfb\u7edf\u7ea7\u51fd\u6570. \u6ce8\u610f\u8bb8\u591a\u5e38\u89c1\u7684\u51fd\u6570(printf, sprintf, malloc, exit)\u90fd\u4e0d\u5728\u6b64\u5217. SIO(\u5b89\u5168\u7684 I/O \u5305) \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u4ea7\u751f\u8f93\u51fa\u552f\u4e00\u5b89\u5168\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 write \u51fd\u6570. #include \"csapp.h\" ssize_t sio_putl ( long v ); ssize_t sio_puts ( char s []); //\u5982\u679c\u6210\u529f\u5219\u8fd4\u56de\u4f20\u9001\u7684\u5b57\u8282\u6570, \u51fa\u9519\u8fd4\u56de -1 void sio_error ( char s []); \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b: ssize_t sio_puts ( char s []) { return write ( STDOUT_FILENO , s , sio_strlen ( s )); } ssize_t sio_putl ( long v ) { char s [ 128 ]; sio_ltoa ( v , s , 10 ); /* Based on K&R itoa */ return sio_puts ( s ); } void sio_error ( char s []) /* Put error message and exit */ { si_puts ( s ); _exit ( 1 ); } \u4fdd\u5b58\u548c\u6062\u590d errno \u8bb8\u591a Linux \u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570\u90fd\u4f1a\u5728\u51fa\u9519\u8fd4\u56de\u65f6\u8bbe\u7f6e errno. \u5728\u5904\u7406\u7a0b\u5e8f\u4e2d\u8c03\u7528\u8fd9\u6837\u7684\u51fd\u6570\u53ef\u80fd\u4f1a\u5e72\u6270\u4e3b\u7a0b\u5e8f\u4e2d\u5176\u4ed6\u4f9d\u8d56\u4e8e errno \u7684\u90e8\u5206. \u89e3\u51b3\u65b9\u6cd5\u662f\u5728\u8fdb\u5165\u5904\u7406\u7a0b\u5e8f\u65f6\u628a errno \u4fdd\u5b58\u5728\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u4e2d, \u5728\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u524d\u6062\u590d\u5b83. \u53ea\u6709\u5728\u5904\u7406\u7a0b\u5e8f\u8981\u8fd4\u56de\u65f6\u624d\u6709\u5fc5\u8981\u8fd9\u4e48\u505a. \u963b\u585e\u6240\u6709\u4fe1\u53f7, \u4fdd\u62a4\u5bf9\u5171\u4eab\u5168\u5c40\u6570\u636e\u7ed3\u6784\u7684\u8bbf\u95ee \u5bf9\u5168\u5c40\u6570\u636e\u7ed3\u6784\u8bbf\u95ee\u65f6, \u5904\u7406\u7a0b\u5e8f\u548c\u4e3b\u7a0b\u5e8f\u5e94\u8be5\u6682\u65f6\u963b\u585e\u6240\u6709\u7684\u4fe1\u53f7. \u7528 volatile \u58f0\u660e\u5168\u5c40\u53d8\u91cf \u8003\u8651\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u548c\u4e00\u4e2a main \u51fd\u6570(\u5b83\u4eec\u5728 \u540c\u4e00\u8fdb\u7a0b \u4e2d), \u5b83\u4eec\u5171\u4eab\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf g. \u5904\u7406\u7a0b\u5e8f\u66f4\u65b0 g, main \u5468\u671f\u6027\u5730\u8bfb g. \u5bf9\u4e00\u4e2a\u4f18\u5316\u7f16\u8bd1\u5668, main \u4e2d g \u7684\u503c\u770b\u4e0a\u53bb\u4ece\u6ca1\u6709\u53d8\u5316\u8fc7, \u56e0\u6b64\u4f7f\u7528\u7f13\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d g \u7684\u526f\u672c\u6765\u6ee1\u8db3\u5bf9 g \u7684\u6bcf\u6b21\u5f15\u7528\u662f\u5f88\u5b89\u5168\u7684, \u8fd9\u5c31\u5bfc\u81f4 main \u51fd\u6570\u53ef\u80fd\u6c38\u8fdc\u65e0\u6cd5\u770b\u5230 g \u66f4\u65b0\u540e\u7684\u503c. \u53ef\u4ee5\u7528 volatile \u7c7b\u578b\u9650\u5b9a\u7b26\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf, \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u7f13\u5b58\u8fd9\u4e2a\u53d8\u91cf. volatile \u9650\u5b9a\u7b26\u5f3a\u8feb\u7f16\u8bd1\u5668\u6bcf\u6b21\u5f15\u7528\u53d8\u91cf\u65f6\u90fd\u8981\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6. \u6ce8: \u58f0\u660e/\u8bbf\u95ee g \u65f6\u4e5f\u8981\u963b\u585e\u4fe1\u53f7. \u7528 sig_atmoic_t \u58f0\u660e\u6807\u5fd7 sig_atmoic_t \u58f0\u660e\u53d8\u91cf, \u4fdd\u8bc1\u5bf9\u5b83\u4eec\u7684\u8bfb\u5199\u662f \u539f\u5b50\u7684(\u4e0d\u53ef\u4e2d\u65ad\u7684) , \u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u6682\u65f6\u963b\u585e\u4fe1\u53f7. \u5927\u591a\u6570\u7cfb\u7edf\u4e2d sig_atmoic_t \u662f int \u7c7b\u578b\u7684. \u6ce8 : \u5bf9\u539f\u5b50\u6027\u7684\u4fdd\u8bc1\u53ea\u9002\u7528\u4e8e\u5355\u4e2a\u8bfb/\u5199, flag++``flag=flag+10 \u8fd9\u6837\u7684\u66f4\u65b0\u53ef\u80fd\u9700\u8981\u591a\u6761\u6307\u4ee4.","title":"\u5b89\u5168\u7684\u4fe1\u53f7\u5904\u7406"},{"location":"CSAPP/8/#_30","text":"\u4fe1\u53f7\u7684\u4e00\u4e2a\u4e0e\u76f4\u89c9\u4e0d\u7b26\u7684\u65b9\u9762\u5c31\u662f \u672a\u5904\u7406\u7684\u4fe1\u53f7\u662f\u4e0d\u6392\u961f\u7684 . \u56e0\u4e3a pending \u4f4d\u5411\u91cf\u4e2d\u6bcf\u79cd\u7c7b\u578b\u7684\u4fe1\u53f7\u53ea\u5bf9\u5e94\u6709\u4e00\u4f4d, \u56e0\u6b64\u6bcf\u79cd\u7c7b\u578b\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u672a\u5904\u7406\u7684\u4fe1\u53f7. \u5982\u679c\u5b58\u5728\u4e00\u4e2a\u672a\u5904\u7406\u7684\u4fe1\u53f7\u90a3\u4e48\u5c31\u8868\u660e\u81f3\u5c11\u6709\u4e00\u4e2a\u4fe1\u53f7\u5230\u8fbe\u4e86. \u6ce8: \u4e0d\u53ef\u4ee5\u7528\u4fe1\u53f7\u6765\u5bf9\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u53d1\u751f\u7684\u4e8b\u4ef6\u8ba1\u6570 . \u56de\u6536\u5b50\u8fdb\u7a0b \u6211\u4eec\u7528 SIGCHILD \u6765\u56de\u6536\u5b50\u8fdb\u7a0b, \u800c\u4e0d\u662f\u663e\u5f0f\u5730\u7b49\u5b50\u8fdb\u7a0b\u7ec8\u6b62.(\u5f53\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u6216\u505c\u6b62, \u5185\u6838\u4f1a\u53d1\u9001\u4e00\u4e2a SIGCHILD \u4fe1\u53f7\u7ed9\u7236\u8fdb\u7a0b.) \u8fd9\u4e2a\u4ee3\u7801\u7684\u95ee\u9898\u5728\u4e8e: \u7236\u8fdb\u7a0b\u63a5\u6536\u5e76\u6355\u83b7\u4e86\u7b2c\u4e00\u4e2a\u4fe1\u53f7, \u5f53\u5904\u7406\u7a0b\u5e8f\u8fd8\u5728\u5904\u7406\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u65f6, \u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u548c\u7b2c\u4e09\u4e2a\u4fe1\u53f7\u5c31\u53d1\u9001\u6765\u4e86, \u4f46\u5f15\u7269 SIGCHILD \u4fe1\u53f7\u88ab SIGCHILD \u5904\u7406\u7a0b\u5e8f\u5835\u585e\u4e86, \u8fd9\u4e24\u4e2a\u53d1\u9001\u6765\u7684\u4fe1\u53f7\u5176\u4e2d\u4e00\u4e2a\u4f1a\u5904\u4e8e\u5f85\u5904\u7406, \u800c\u53e6\u4e00\u4e2a\u4f1a\u88ab\u76f4\u63a5\u4e22\u5f03. \u6539\u8fdb: void handler2 ( int sig ) { int olderrno = errno ; while ( waitpid ( -1 , NULL , 0 ) > 0 ) { sio_puts ( \"Handler reaped child \\n \" ); } if ( errno != ECHILD ) sio_error ( \"waitpid error\" ); Sleep ( 1 ); errno = olderrno ; } \u6211\u4eec\u5728\u6bcf\u6b21\u5904\u7406\u4fe1\u53f7\u65f6, \u5c3d\u53ef\u80fd\u591a\u5730\u56de\u6536\u50f5\u6b7b\u8fdb\u7a0b.","title":"\u6b63\u786e\u7684\u4fe1\u53f7\u5904\u7406"},{"location":"CSAPP/8/#_31","text":"Unix \u4fe1\u53f7\u5904\u7406\u7684\u53e6\u4e00\u4e2a\u7f3a\u9677\u5728\u4e8e\u4e0d\u540c\u7684\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u8bed\u4e49, \u4f8b\u5982: signal \u51fd\u6570\u7684\u8bed\u4e49\u5404\u6709\u4e0d\u540c. \u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u88ab\u4e2d\u65ad. \u50cf read``write``accept \u8fd9\u6837\u7684\u7cfb\u7edf\u8c03\u7528\u6f5c\u5728\u5730\u963b\u585e\u8fdb\u7a0b\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4, \u79f0\u4e3a \u6162\u901f\u7cfb\u7edf\u8c03\u7528 . \u65e9\u671f Unix \u7cfb\u7edf\u4e2d, \u5728\u6267\u884c\u6162\u901f\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u5982\u679c\u8fdb\u7a0b\u63a5\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7\uff0c\u53ef\u80fd\u4f1a\u4e2d\u65ad\u8be5\u6162\u901f\u7cfb\u7edf\u8c03\u7528\uff0c\u5e76\u4e14\u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c\u6162\u901f\u7cfb\u7edf\u8c03\u7528\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u6761\u4ef6\uff0c\u5e76\u5c06 errno \u8bbe\u7f6e\u4e3a EINTR . Posix \u6807\u51c6\u5b9a\u4e49\u4e86 sigaction \u51fd\u6570, \u5141\u8bb8\u7528\u6237\u5728\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u65f6, \u660e\u786e\u6307\u5b9a\u4ed6\u4eec\u60f3\u8981\u7684\u4fe1\u53f7\u5904\u7406\u8bed\u4e49. sigaction #include <signal.h> int sigaction ( int signum , struct sigaction * act , struct sigaction * oldact ); //\u6210\u529f\u8fd4\u56de 0, \u51fa\u9519\u8fd4\u56de -1 \u53ef\u4ee5\u7c7b\u4f3c signal \u51fd\u6570\u90a3\u6837\u4f7f\u7528\uff0c\u4fe1\u53f7\u5904\u7406\u8bed\u4e49\u4e3a\uff1a \u53ea\u6709\u5f53\u524d\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6b63\u5728\u5904\u7406\u7684\u4fe1\u53f7\u7c7b\u578b\u4f1a\u88ab\u963b\u585e \u53ea\u8981\u53ef\u80fd\uff0c\u88ab\u4e2d\u65ad\u4f60\u7684\u7cfb\u7edf\u8c03\u7528\u4f1a\u81ea\u52a8\u91cd\u542f \u4e00\u65e6\u8bbe\u7f6e\u4e86\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\uff0c\u5c31\u4f1a\u4e00\u76f4\u4fdd\u6301","title":"\u53ef\u79fb\u690d\u7684\u4fe1\u53f7\u5904\u7406"},{"location":"CSAPP/8/#_32","text":"","title":"\u5176\u4ed6"},{"location":"CSAPP/8/#_33","text":"\u7236\u8fdb\u7a0b\u5728\u4e00\u4e2a\u5168\u5c40\u4f5c\u4e1a\u5217\u8868\u4e2d\u8bb0\u5f55\u7740\u5f53\u524d\u7684\u5b50\u8fdb\u7a0b, \u6bcf\u4e2a\u4f5c\u4e1a\u4e00\u4e2a\u6761\u76ee. addjob \u548c deletejob \u51fd\u6570\u5206\u522b\u5411\u8fd9\u4e2a\u4f5c\u4e1a\u5217\u8868\u6dfb\u52a0\u548c\u5220\u9664\u4f5c\u4e1a. \u5f53\u7236\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b50\u8fdb\u7a0b\u540e, \u5c31\u628a\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e2d. \u5f53\u7236\u8fdb\u7a0b\u5728 SIGCHILD \u5904\u7406\u7a0b\u5e8f\u4e2d\u56de\u6536\u4e00\u4e2a\u7ec8\u6b62\u7684\u50f5\u6b7b\u5b50\u8fdb\u7a0b, \u5b83\u5c31\u4ece\u4f5c\u4e1a\u5217\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u5b50\u8fdb\u7a0b. \u8fd9\u4e2a\u4ee3\u7801\u5b58\u5728\u4e00\u5b9a\u95ee\u9898, \u56e0\u4e3a\u53ef\u80fd\u53d1\u751f\u8fd9\u6837\u7684\u4e8b\u4ef6\u5e8f\u5217: \u7236\u8fdb\u7a0b\u6267\u884c fork \u51fd\u6570, \u5185\u6838\u8c03\u5ea6\u65b0\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u8fd0\u884c, \u800c\u4e0d\u662f\u7236\u8fdb\u7a0b. \u7236\u8fdb\u7a0b\u80fd\u518d\u6b21\u8fd0\u884c\u4e4b\u524d\u5b50\u8fdb\u7a0b\u5c31\u7ec8\u6b62\u5e76\u53d8\u4e3a\u4e00\u4e2a\u50f5\u6b7b\u8fdb\u7a0b, \u5185\u6838\u7ed9\u7236\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a SIGCHILD \u4fe1\u53f7. \u7236\u8fdb\u7a0b\u518d\u6b21\u53d8\u4e3a\u53ef\u8fd0\u884c\u4f46\u53c8\u5728\u5b83\u6267\u884c\u4e4b\u524d, \u5185\u6838\u6ce8\u610f\u5230\u6709\u672a\u5904\u7406\u7684 SIGCHILD \u4fe1\u53f7, \u8fd0\u884c\u5904\u7406\u7a0b\u5e8f\u63a5\u6536\u8fd9\u4e2a\u4fe1\u53f7. \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d deletejob , \u4f46\u8fd9\u65f6\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u88ab\u52a0\u5165\u4f5c\u4e1a\u5217\u8868, \u8fd9\u4e2a\u51fd\u6570\u4ec0\u4e48\u4e5f\u4e0d\u9519. \u5904\u7406\u5b8c\u6bd5, \u7236\u8fdb\u7a0b\u901a\u8fc7\u8c03\u7528 addjob \u5c06\u5df2\u7ecf\u88ab\u56de\u6536\u7684\u5b50\u8fdb\u7a0b\u52a0\u5165\u5230\u4f5c\u4e1a\u5217\u8868\u4e2d. \u8fd9\u662f\u4e00\u4e2a \u7ade\u4e89(race) \u7684\u7ecf\u5178\u540c\u6b65\u9519\u8bef\u7684\u793a\u4f8b. \u4fee\u6539\u4e4b\u540e, \u5bf9\u4e8e\u7236\u8fdb\u7a0b\u6211\u4eec\u5728 fork \u4e4b\u524d\u5c31\u963b\u585e\u4e86 SIGCHILD \u4fe1\u53f7, \u5728 addjob \u4e4b\u540e\u624d\u53d6\u6d88\u963b\u585e, \u8fd9\u6837\u5b50\u8fdb\u7a0b\u4e00\u5b9a\u5728\u88ab\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e4b\u540e\u624d\u4f1a\u88ab\u56de\u6536.","title":"\u540c\u6b65\u6d41\u4ee5\u907f\u514d\u8ba8\u538c\u7684\u5e76\u53d1\u9519\u8bef"},{"location":"CSAPP/8/#_34","text":"\u6709\u65f6\u5019\u4e3b\u7a0b\u5e8f\u9700\u8981\u663e\u5f0f\u5730\u7b49\u5f85\u67d0\u4e2a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u8fd0\u884c. \u5982 Linux shell \u521b\u5efa\u4e00\u4e2a\u524d\u53f0\u4f5c\u4e1a, \u5728\u63a5\u53d7\u4e0b\u4e00\u6761\u7528\u6237\u547d\u4ee4\u4e4b\u524d\u5b83\u5fc5\u987b\u7b49\u5f85\u4f5c\u4e1a\u7ec8\u6b62, \u88ab SIGCHILD \u5904\u7406\u7a0b\u5e8f\u56de\u6536. \u7236\u8fdb\u7a0b(shell)\u8bbe\u7f6e SIGINT \u548c SIGCHILD \u7684\u5904\u7406\u7a0b\u5e8f, \u7136\u540e\u8fdb\u5165\u4e00\u4e2a\u65e0\u9650\u5faa\u73af. \u5b83\u963b\u585e SIGCHILD . \u521b\u5efa\u5b50\u8fdb\u7a0b\u540e, \u628a pid \u8bbe 0, \u53d6\u6d88\u963b\u585e SIGCHILD , \u7136\u540e\u4ee5\u5faa\u73af\u7684\u65b9\u5f0f\u7b49\u5f85 pid \u53d8\u4e3a\u975e\u96f6. \u5b50\u8fdb\u7a0b\u7ec8\u6b62\u540e, \u5904\u7406\u7a0b\u5e8f\u56de\u6536\u5b83, \u628a\u975e\u96f6\u7684 pid \u8d4b\u7ed9\u5168\u5c40\u53d8\u91cf, \u8fd9\u4f1a\u7ec8\u6b62\u5faa\u73af, \u7236\u8fdb\u7a0b\u8fd9\u624d\u7ee7\u7eed\u5176\u4ed6\u5de5\u4f5c. \u4f46\u8fd9\u6bb5\u4ee3\u7801\u4e2d, \u5faa\u73af\u5728\u6d6a\u8d39\u5904\u7406\u5668\u8d44\u6e90. \u6211\u4eec\u5728\u5faa\u73af\u4f53\u4e2d\u63d2\u5165 pause , \u7b49\u5f85\u7684\u65f6\u5019\u628a\u8fdb\u7a0b\u6302\u8d77\u505a\u5176\u4ed6\u4e8b. while ( ! pid ) pause (); \u4f46\u8fd9\u6837\u4e5f\u4f1a\u9762\u5bf9\u7ade\u4e89: \u5982\u679c\u5728 while \u6d4b\u8bd5\u540e pause \u4e4b\u524d\u6536\u5230 SIGCHILD \u4fe1\u53f7, pause \u4f1a\u6c38\u8fdc\u7761\u7720. \u6216\u8005\u6539\u7528 sleep \u51fd\u6570: while ( ! pid ) sleep ( 1 ); \u4f46\u8fd9\u6837\u592a\u6162\u4e86, \u5982\u679c\u5728 while \u6d4b\u8bd5\u4e4b\u540e sleep \u4e4b\u524d\u6536\u5230\u4fe1\u53f7, \u7a0b\u5e8f\u5fc5\u987b\u7b49\u76f8\u5f53\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\u624d\u4f1a\u518d\u6b21\u68c0\u6d4b\u5faa\u73af\u7684\u7ec8\u6b62\u6761\u4ef6. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 sigsuspend \u51fd\u6570 #include <signal.h> int sigsuspend ( const sigset_t * mast ); //\u8fd4\u56de -1 sigsuspend \u6682\u65f6\u7528 mask \u66ff\u6362\u5f53\u524d\u963b\u585e\u96c6\u5408, \u7136\u540e\u6302\u8d77\u8be5\u8fdb\u7a0b, \u76f4\u5230\u6536\u5230\u4e00\u4e2a\u865a\u62df\u53f7. \u5176\u884c\u4e3a\u8981\u4e48\u662f\u8fd0\u884c\u4e00\u4e2a\u5904\u7406\u7a0b\u5e8f\u8981\u4e48\u662f\u7ec8\u6b62\u8be5\u8fdb\u7a0b. \u5b83\u7b49\u4ef7\u4e8e\u4e0b\u5217\u4ee3\u7801\u7684\u539f\u5b50(\u4e0d\u53ef\u4e2d\u65ad)\u7248\u672c. sigprocmask ( SIG_SETMASK , & mask , & prev ); pause (); sigprocmask ( SIG_SETMASK , & prev , NULL );","title":"\u663e\u5f0f\u5730\u7b49\u5f85\u4fe1\u53f7"},{"location":"CSAPP/8/#_35","text":"C \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u79cd\u7528\u6237\u7ea7\u5f02\u5e38\u63a7\u5236\u6d41\u5f62\u5f0f, \u79f0\u4e3a \u975e\u672c\u5730\u8df3\u8f6c(nonlocal jump) . \u5b83\u5c06\u63a7\u5236\u76f4\u63a5\u4ece\u4e00\u4e2a\u51fd\u6570\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u6b63\u5728\u6267\u884c\u7684\u51fd\u6570, \u800c\u4e0d\u9700\u8981\u7ecf\u8fc7\u6b63\u5e38\u7684\u8c03\u7528-\u8fd4\u56de\u5e8f\u5217. #include <setjmp.h> int setjmp ( jmp_buf env ); void longjmp ( jmp_buf env , int retval ); setjmp \u51fd\u6570\u5728 env \u7f13\u51b2\u533a\u4fdd\u5b58\u5f53\u524d\u8c03\u7528\u73af\u5883, \u4ee5\u4f9b\u540e\u9762 longjmp \u4f7f\u7528, \u5e76\u8fd4\u56de 0. setjmp \u8fd4\u56de\u7684\u503c\u4e0d\u80fd\u8d4b\u503c\u7ed9\u53d8\u91cf. longjmp \u51fd\u6570\u4ece env \u7f13\u51b2\u533a\u4e2d\u6062\u590d\u8c03\u7528\u73af\u5883, \u7136\u540e\u89e6\u53d1\u4e00\u4e2a\u4ece\u6700\u8fd1\u4e00\u6b21\u521d\u59cb\u5316 env \u7684 setjmp \u8c03\u7528\u7684\u8fd4\u56de. \u7136\u540e setjmp \u8fd4\u56de, \u5e76\u5e26\u6709\u975e\u96f6\u7684\u8fd4\u56de\u503c retval.","title":"\u975e\u672c\u5730\u8df3\u8f6c"},{"location":"CSAPP/8/#_36","text":"\u5728 main \u51fd\u6570\u4e2d\uff0c\u9996\u5148\u5728 12 \u884c\u4e2d\u6267\u884c setjmp(buf) \u51fd\u6570\u5c06\u5f53\u524d\u8c03\u7528\u73af\u5883\u4fdd\u5b58\u5230 buf \u4e2d\uff0c\u5e76\u8fd4\u56de 0\uff0c\u6240\u4ee5\u5c31\u8c03\u7528 foo \u51fd\u6570\u548c bar \u51fd\u6570\uff0c\u5f53\u8fd9\u4e24\u4e2a\u51fd\u6570\u4e2d\u51fa\u73b0\u9519\u8bef\uff0c\u5219\u901a\u8fc7 longjmp(buf, retval) \u6062\u590d\u8c03\u7528\u73af\u5883\uff0c\u5e76\u8df3\u8f6c\u56de\u7b2c 13 \u884c\uff0c\u7136\u540e\u8ba9 setjmp \u51fd\u6570\u8fd4\u56de retval \u7684\u503c\uff0c\u7531\u6b64\u5c31\u65e0\u9700\u89e3\u6790\u8c03\u7528\u6808\u4e86\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u53ef\u80fd\u5b58\u5728\u5185\u5b58\u6cc4\u9732\u95ee\u9898.","title":"\u4ece\u6df1\u5c42\u5d4c\u5957\u51fd\u6570\u4e2d\u8fd4\u56de"},{"location":"CSAPP/8/#_37","text":"#include <setjmp.h> int sigsetjmp ( sigjmp_buf env , int savesigs ); //\u82e5 savesigs != 0, \u5219\u4f1a\u628a\u5835\u585e\u7684\u4fe1\u53f7\u96c6\u5408\u4e5f\u4fdd\u5b58. void siglongjmp ( sigjmp_buf env , int retval ); sigsetjmp \u548c siglongjmp \u662f\u53ef\u4ee5\u88ab\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4f7f\u7528\u7684\u7248\u672c. \u5176\u4e2d sigsetjmp \u51fd\u6570\u8fd8\u4f1a\u5c06\u5f85\u5904\u7406\u4fe1\u53f7\u548c\u88ab\u963b\u585e\u4fe1\u53f7\u4fdd\u5b58\u5230 env \u4e2d. \u4e0b\u9762\u7684\u4f8b\u5b50, \u5f53\u7528\u6237\u5728 Ctrl+C \u65f6, \u8fd9\u4e2a\u7a0b\u5e8f\u7528\u4fe1\u53f7\u548c\u975e\u672c\u5730\u8df3\u8f6c\u5b9e\u73b0\u8f6f\u91cd\u542f. \u9996\u5148\uff0c\u5728 main \u51fd\u6570\u4e2d\u7b2c 12 \u884c\u901a\u8fc7 sigsetjmp \u51fd\u6570\u5c06\u8c03\u7528\u73af\u5883\u4fdd\u5b58\u5230 buf \u4e2d\uff0c\u5e76\u8fd4\u56de 0\uff0c\u968f\u540e\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u3002\u5f53\u7528\u6237\u8f93\u5165 Ctrl+C \u65f6\uff0c\u4f1a\u8c03\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f handler \uff0c\u6b64\u65f6\u4f1a\u901a\u8fc7 siglongjmp \u6062\u590d\u8c03\u7528\u73af\u5883\uff0c\u7136\u540e\u8df3\u8f6c\u56de\u7b2c 12 \u884c\uff0c\u7136\u540e\u8ba9 sigsetjmp \u8fd4\u56de1\uff0c\u6b64\u65f6\u5c31\u907f\u514d\u4e86\u8fd4\u56de\u5230\u4e2d\u65ad\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u5904. \u6ce8\u610f : signal \u8bbe\u7f6e\u5904\u7406\u7a0b\u5e8f\u8981\u5728\u8c03\u7528 sigsetjmp \u4e4b\u540e\uff0c\u907f\u514d\u8fd8\u672a\u8bbe\u7f6e sigsetjmp \u5c31\u63a5\u6536\u5230\u4fe1\u53f7\u800c\u6267\u884c siglongjmp ; \u800c\u4e14 sigsetjmp \u548c siglongjmp \u4e0d\u5728\u5f02\u6b65\u4fe1\u53f7\u5b89\u5168\u7684\u51fd\u6570\u4e4b\u5217.","title":"\u4f7f\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u5206\u652f\u5230\u4e00\u4e2a\u7279\u6b8a\u7684\u4ee3\u7801\u4f4d\u7f6e"},{"location":"CSAPP/9/","text":"\u865a\u62df\u5185\u5b58 \u00b6 \u73b0\u4ee3\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u79cd\u5bf9\u4e3b\u5b58\u7684\u62bd\u8c61, \u79f0\u4e3a \u865a\u62df\u5185\u5b58(VM) . \u5b83\u5c06\u4e3b\u5b58\u770b\u6210\u662f\u4e00\u4e2a\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u7684\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u901f\u7f13\u5b58, \u5728\u4e3b\u5b58\u4e2d\u53ea\u4fdd\u5b58\u6d3b\u52a8\u533a\u57df, \u5e76\u6839\u636e\u9700\u8981\u5728\u78c1\u76d8\u548c\u4e3b\u5b58\u4e4b\u95f4\u6765\u56de\u4f20\u9001\u6570\u636e, \u4ee5\u6b64\u9ad8\u6548\u4f7f\u7528\u4e3b\u5b58. \u5b83\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u81f4\u7684\u5730\u5740\u7a7a\u95f4, \u4ece\u800c\u7b80\u5316\u4e86\u5185\u5b58\u7ba1\u7406. \u5b83\u4fdd\u62a4\u4e86\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u88ab\u5176\u4ed6\u8fdb\u7a0b\u7834\u574f. \u5730\u5740\u7a7a\u95f4 \u00b6 \u5730\u5740\u7a7a\u95f4(address space) \u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u5730\u5740\u7684\u6709\u5e8f\u96c6\u5408. \\(\\{0,1,2,\\ldots\\}\\) \u5982\u679c\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u6574\u6570\u662f\u8fde\u7eed\u7684, \u6211\u4eec\u79f0\u4e3a \u7ebf\u6027\u5730\u5740\u7a7a\u95f4 .(\u5047\u8bbe\u6211\u4eec\u8ba8\u8bba\u7684\u90fd\u662f\u7ebf\u6027\u5730\u5740\u7a7a\u95f4) \u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e3b\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a\u7531 M \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u5355\u5143\u7ec4\u6210\u7684\u6570\u7ec4\uff0c \u6bcf\u4e2a\u5b57\u8282 \u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 \u7269\u7406\u5730\u5740(Physical Address) , \u5e76\u4e14\u7269\u7406\u5730\u5740\u662f\u8fde\u7eed\u7684\u3002\u7531\u6b64\u5c31\u6784\u6210\u4e86\u4e00\u4e2a \u7269\u7406\u5730\u5740\u7a7a\u95f4(Physical Address Space) , \u5bf9\u5e94\u4e8e\u7cfb\u7edf\u4e2d\u7269\u7406\u5185\u5b58\u7684 M \u4e2a\u5b57\u8282. CPU \u53ef\u4ee5\u901a\u8fc7\u7269\u7406\u5730\u5740\u6765\u8bbf\u95ee\u5185\u5b58\uff0c\u8fd9\u79cd\u65b9\u5f0f\u79f0\u4e3a \u7269\u7406\u5bfb\u5740(Physical Addressing) , \u518d\u5c06\u83b7\u5f97\u7684\u6570\u636e\u5b57\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d. \u5bf9\u4e8e\u4e3b\u5b58\u5b58\u50a8\u5668\u8d44\u6e90\u4e5f\u53ef\u4ee5\u901a\u8fc7\u865a\u62df\u5185\u5b58\u63d0\u4f9b\u53e6\u4e00\u79cd\u4e0d\u540c\u7684\u89c6\u56fe. \u73b0\u4ee3 CPU \u4ece\u4e00\u4e2a\u6709 \\(N=2^n\\) \u4e2a\u5730\u5740\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u751f\u6210 \u865a\u62df\u5730\u5740(Virtual Address) , \u8be5\u5730\u5740\u7a7a\u95f4\u79f0\u4e3a \u865a\u62df\u5730\u5740\u7a7a\u95f4(Virtual Address Space) , \u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u5927\u5c0f\u7531\u8868\u793a\u6700\u5927\u865a\u62df\u5730\u5740\u6240\u9700\u7684\u4f4d\u6570 n \u6765\u786e\u5b9a, \u73b0\u4ee3\u7cfb\u7edf\u652f\u6301 32 \u4f4d\u6216 64 \u4f4d\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4. CPU \u4f1a\u4f7f\u7528\u865a\u62df\u5730\u5740\u6765\u8bbf\u95ee\u4e3b\u5b58\uff0c\u79f0\u4e3a \u865a\u62df\u5bfb\u5740(Virtual Addressing) , \u9700\u8981\u9996\u5148\u901a\u8fc7 \u5730\u5740\u7ffb\u8bd1(Address Translation) \u5c06\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740, \u518d\u901a\u8fc7\u7269\u7406\u5730\u5740\u6765\u8bbf\u95ee\u5185\u5b58. \u800c\u5730\u5740\u7ffb\u8bd1\u7c7b\u4f3c\u4e8e\u5f02\u5e38\u5904\u7406(\u8f6f\u786c\u7ed3\u5408)\uff0c\u9700\u8981 CPU \u4e0a\u7684 \u5185\u5b58\u7ba1\u7406\u5355\u5143(Memory Management Unit, MMU) , \u4ee5\u53ca\u5185\u5b58\u4e2d\u7531\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u7684\u67e5\u8be2\u8868\u6765\u52a8\u6001\u7ffb\u8bd1\u865a\u62df\u5185\u5b58. \u6240\u4ee5\u901a\u8fc7 MMU \u6765\u63a7\u5236\u5bf9\u5185\u5b58\u7684\u8bfb\u5199, \u8fbe\u5230\u5bf9\u5185\u5b58\u8fdb\u884c\u865a\u62df\u5316\u7684\u76ee\u7684. \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 MME \u6765\u5bf9\u5185\u5b58\u8fdb\u884c\u62bd\u8c61 \u865a\u62df\u5185\u5b58\u5c06 DRAM \u5185\u5b58\u4f5c\u4e3a\u78c1\u76d8\u4e0a\u5b9e\u9645\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u5373\u6211\u4eec\u53ef\u4ee5\u5728\u4e3b\u5b58\u8bbf\u95ee\u78c1\u76d8\u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u800c\u4e3b\u5b58\u53ea\u4fdd\u5b58\u6d3b\u52a8\u533a\u57df\uff0c\u6839\u636e\u9700\u8981\u5728\u78c1\u76d8\u548c\u4e3b\u5b58\u4e4b\u95f4\u6765\u56de\u4f20\u9001\u6570\u636e\uff0c\u4f7f\u5f97\u8fdb\u7a0b\u53ef\u4ee5\u5f97\u5230\u66f4\u5927\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5e76\u4e14\u66f4\u6709\u6548\u5730\u5229\u7528\u4e3b\u5b58\u8d44\u6e90. \u865a\u62df\u5185\u5b58\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e00\u81f4\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u4ee3\u7801\u548c\u6570\u636e\u603b\u662f\u52a0\u8f7d\u5230\u56fa\u5b9a\u7684\u5730\u5740\uff0c\u5806\u6808\u4f4d\u4e8e\u7528\u6237\u8bfe\u4ef6\u5730\u5740\u7a7a\u95f4\u7684\u9876\u90e8\u7b49\u7b49\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e0e\u90a3\u4e9b\u865a\u62df\u5730\u5740\u76f8\u5bf9\u5e94\u7684\u5185\u5bb9\u5206\u5e03\u5728\u6574\u4e2a\u4e3b\u5b58\u50a8\u5668\u4e2d\uff0c\u6240\u4ee5\u901a\u8fc7\u4f7f\u7528\u865a\u62df\u5185\u5b58\u53ef\u4ee5\u7b80\u5316\u5185\u5b58\u7684\u7ba1\u7406. \u865a\u62df\u5185\u5b58\u4fdd\u62a4\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u4f1a\u88ab\u522b\u7684\u8fdb\u7a0b\u7834\u574f. \u865a\u62df\u5185\u5b58 \u00b6 \u6982\u5ff5\u4e0a, \u865a\u62df\u5185\u5b58\u88ab\u7ec4\u7ec7\u4e3a\u4e00\u4e2a\u7531\u5b58\u653e\u5728\u78c1\u76d8\u4e0a\u7684 N \u4e2a\u8fde\u7eed\u5b57\u8282\u5927\u5c0f\u7684\u5355\u5143\u7ec4\u6210\u7684\u6570\u7ec4, \u6bcf\u4e2a\u5b57\u8282\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u865a\u62df\u5730\u5740, \u800c\u8be5\u6570\u7ec4\u7684\u5185\u5bb9\u88ab\u7f13\u5b58\u5230\u4e3b\u5b58\u4e2d. VM \u7cfb\u7edf\u5c06\u865a\u62df\u5185\u5b58\u5206\u5272\u4e3a \u865a\u62df\u9875(Virtual Page, VP) , \u6bcf\u4e2a\u865a\u62df\u9875\u7684\u5927\u5c0f\u4e3a \\(P=2^p\\) \u5b57\u8282. \u7c7b\u4f3c\u5730\u7269\u7406\u5185\u5b58\u88ab\u5206\u5272\u4e3a \u7269\u7406\u9875(Physical Page, PP) , \u5927\u5c0f\u4e5f\u4e3a P \u5b57\u8282, \u7269\u7406\u9875\u4e5f\u88ab\u79f0\u4e3a \u9875\u5e27(page frame) . \u865a\u62df\u9875\u9762\u5206\u4e3a\u4e09\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6: (\u8fd9\u91cc\u7684\u7269\u7406\u5185\u5b58\u5373\u4e3b\u5b58, \u76f8\u5f53\u4e8e DRAM \u7f13\u5b58) \u672a\u5206\u914d\u7684 : VM \u7cfb\u7edf\u8fd8\u672a\u5206\u914d(\u6216\u8005\u521b\u5efa)\u7684\u9875, \u4e0d\u5360\u7528\u4efb\u4f55\u78c1\u76d8\u7a7a\u95f4 \u7f13\u5b58\u7684 : \u5f53\u524d\u5df2\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5df2\u5206\u914d\u9875 \u672a\u7f13\u5b58\u7684 : \u672a\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5df2\u5206\u914d\u9875 DRAM \u7f13\u5b58\u7684\u4e0d\u547d\u4e2d\u4ee3\u4ef7\u66f4\u6602\u8d35, \u800c\u4e14\u4ece\u78c1\u76d8\u7684\u4e00\u4e2a\u6247\u533a\u8bfb\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u65f6\u95f4\u5f00\u9500\u4e5f\u975e\u5e38\u5927, \u56e0\u6b64\u865a\u62df\u9875\u5f80\u5f80\u5f88\u5927, \u901a\u5e38\u662f 4KB~2MB. DRAM \u7f13\u5b58\u662f\u5168\u76f8\u8054\u7684, \u4efb\u4f55\u865a\u62df\u9875\u53ef\u4ee5\u653e\u5728\u4efb\u4f55\u7269\u7406\u9875\u4e2d. \u56e0\u4e3a\u5bf9\u78c1\u76d8\u8bbf\u95ee\u65f6\u95f4\u957f, DRAM \u7f13\u5b58\u603b\u662f\u91c7\u7528\u5199\u56de, \u800c\u4e0d\u662f\u76f4\u5199. \u9875\u8868 \u00b6 \u4e3a\u4e86\u5224\u65ad\u865a\u62df\u9875\u662f\u5426\u7f13\u5b58\u5728 DRAM \u4e2d\u7684\u67d0\u4e2a\u5730\u65b9, \u8f6f\u786c\u4ef6\u8054\u5408(\u5305\u62ec\u64cd\u4f5c\u7cfb\u7edf\u8f6f\u4ef6, MMU \u4e2d\u7684\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6\u548c\u4e00\u4e2a\u5b58\u653e\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684 \u9875\u8868 )\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd. \u9875\u8868\u5c06\u865a\u62df\u9875\u6620\u5c04\u5230\u7269\u7406\u9875, \u6bcf\u6b21\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6\u5c06\u4e00\u4e2a\u865a\u62df\u5730\u5740\u8f6c\u4e3a\u7269\u7406\u5730\u5740\u65f6, \u90fd\u4f1a\u8bfb\u53d6\u9875\u8868. \u64cd\u4f5c\u7cfb\u7edf\u8d1f\u8d23\u7ef4\u62a4\u9875\u8868\u7684\u5185\u5bb9, \u4ee5\u53ca\u5728\u78c1\u76d8\u548c DRAM \u4e4b\u95f4\u6765\u56de\u4f20\u9001\u9875. \u9875\u8868 \u5c31\u662f\u4e00\u4e2a \u9875\u8868\u6761\u76ee(Page Table Entry, PTE) \u7684\u6570\u7ec4. \u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u6bcf\u4e2a\u9875\u5728\u9875\u8868\u4e2d\u4e00\u4e2a\u56fa\u5b9a\u504f\u79fb\u91cf\u5904\u90fd\u6709\u4e00\u4e2a PTE. \u6211\u4eec\u5047\u8bbe PTE \u662f\u4e00\u4e2a \u6709\u6548\u4f4d \u548c\u4e00\u4e2a n \u4f4d\u5730\u5740\u5b57\u6bb5\u7ec4\u6210. \u6709\u6548\u4f4d\u8868\u660e\u8be5\u865a\u62df\u9875\u662f\u5426\u88ab\u7f13\u5b58\u5728 DRAM \u4e2d. \u5982\u679c\u8bbe\u7f6e\u4e86\u6709\u6548\u4f4d, n \u4f4d\u5730\u5740\u5b57\u6bb5\u5c31\u8868\u793a DRAM \u4e2d\u76f8\u5e94\u7269\u7406\u9875\u7684\u8d77\u59cb\u5730\u5740. \u6ca1\u6709\u8bbe\u7f6e\u6709\u6548\u4f4d, \u5982\u679c\u672a\u5206\u914d\u5219\u4ee5\u4e00\u4e2a\u7a7a\u5730\u5740\u8868\u793a, \u5982\u679c\u5df2\u7ecf\u5206\u914d, \u5730\u5740\u5b57\u6bb5\u5c31\u662f\u865a\u62df\u5185\u5b58(\u78c1\u76d8)\u4e2d\u865a\u62df\u9875\u7684\u8d77\u59cb\u5730\u5740. \u6ce8 : \u56e0\u4e3a DRAM \u7f13\u5b58\u662f\u5168\u76f8\u8054\u7684, \u6240\u4ee5\u4efb\u610f\u7269\u7406\u9875\u90fd\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u865a\u62df\u9875. \u76f8\u5173\u64cd\u4f5c \u00b6 \u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e4b\u95f4\u4f20\u9001\u9875\u7684\u6d3b\u52a8\u53eb\u505a \u4ea4\u6362 \u6216\u8005 \u9875\u9762\u8c03\u5ea6(paging) . \u9875\u4ece\u78c1\u76d8\u6362\u5165(\u6216\u8005 \u9875\u9762\u8c03\u5165 ) DRAM \u548c\u4ece DRAM \u6362\u51fa(\u6216\u8005 \u9875\u9762\u8c03\u51fa )\u78c1\u76d8. \u6240\u6709\u73b0\u4ee3\u7cfb\u7edf\u90fd\u4f7f\u7528 \u6309\u9700\u9875\u9762\u8c03\u5ea6(demand paging) \u7684\u65b9\u5f0f, \u5373\u5f53\u6709\u4e0d\u547d\u4e2d\u53d1\u751f\u65f6\u731c\u6362\u5165\u9875\u9762. \u53c8\u662f\u5c40\u90e8\u6027\u6551\u4e86\u6211\u4eec \u865a\u62df\u5185\u5b58\u4e4b\u6240\u4ee5\u6709\u6548\uff0c\u4e5f\u662f\u56e0\u4e3a\u5c40\u90e8\u6027. \u865a\u62df\u5185\u5b58\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u5b58\u50a8\u5668\u5c42\u6b21\uff0c\u5927\u5c0f\u4f1a\u6bd4\u7269\u7406\u5185\u5b58\u5927\uff0c\u6240\u4ee5\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7a0b\u5e8f\u5f15\u7528\u7684\u4e0d\u540c\u9875\u9762\u603b\u6570\u53ef\u80fd\u4f1a\u8d85\u51fa\u7269\u7406\u5185\u5b58\u5927\u5c0f. \u5982\u679c\u7a0b\u5e8f\u5177\u6709\u597d\u7684\u5c40\u90e8\u6027\uff0c\u5219\u5728\u4efb\u610f\u65f6\u523b\u7684\u5de5\u4f5c\u96c6\u8f83\u5c0f\uff0c\u7a0b\u5e8f\u4f1a\u8d8b\u4e8e\u5728\u4e00\u4e2a\u8f83\u5c0f\u7684 \u6d3b\u52a8\u9875\u9762(Active Page) \u96c6\u5408\u4e0a\u5de5\u4f5c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728\u4e00\u5f00\u59cb\u5c06\u5de5\u4f5c\u96c6\u9875\u9762\u8c03\u5ea6\u5230\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u8fc7\u540e\u5c31\u4e0d\u4f1a\u4ea7\u751f\u989d\u5916\u7684\u78c1\u76d8\u6d41\u91cf\u4e86. \u4f46\u662f\u5982\u679c\u5c40\u90e8\u6027\u8f83\u5dee\uff0c\u5219\u5de5\u4f5c\u96c6\u8d85\u8fc7\u4e86\u7269\u7406\u5185\u5b58\u5927\u5c0f\uff0c\u5219\u4f1a\u53d1\u751f \u6296\u52a8(Thrashing) \uff0c\u4f7f\u5f97\u4e0d\u65ad\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u9875\u5230\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u7a0b\u5e8f\u6027\u80fd\u5927\u5927\u964d\u4f4e. \u5728 Linux \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 getrusage \u51fd\u6570\u68c0\u6d4b\u7f3a\u9875\u7684\u6570\u91cf. \u9875\u547d\u4e2d \u00b6 \u5f53CPU\u60f3\u8981\u8bbf\u95ee\u4f4d\u4e8e\u865a\u62df\u5730\u5740 x \u4e2d\u7684\u6570\u636e\u5b57\u65f6\uff0c\u4f1a\u9996\u5148\u901a\u8fc7\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6\u5c06\u865a\u62df\u5730\u5740\u4f5c\u4e3a\u4e00\u4e2a\u7d22\u5f15\u6765\u5b9a\u4f4d PTE \uff0c\u7136\u540e\u901a\u8fc7 PTE \u6765\u786e\u5b9a\u5bf9\u5e94\u7684\u865a\u62df\u9875\u7684\u72b6\u6001\u3002\u5982\u679c PTE \u7684\u6709\u6548\u4f4d\u4e3a 1\uff0c\u8bf4\u660e\u8be5\u865a\u62df\u9875\u88ab\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e86\uff0c\u5219 CPU \u53ef\u4ee5\u901a\u8fc7\u8be5 PTE \u7684\u5730\u5740\u5b57\u6bb5\u83b7\u5f97\u7269\u7406\u5185\u5b58\u7684\u5730\u5740\uff0c\u7136\u540e\u8fdb\u884c\u8bbf\u95ee, \u8fd9\u5c31\u662f \u9875\u547d\u4e2d . e.g. \u4e0a\u56fe\u4e2d\u5047\u8bbe\u6211\u4eec\u8bbf\u95ee VP2, \u5373\u4e3a\u4e00\u4e2a\u9875\u547d\u4e2d. \u7f3a\u9875 \u00b6 DRAM \u7f13\u5b58\u4e0d\u547d\u4e2d\u79f0\u4e3a \u7f3a\u9875(page fault) . \u5982\u4e0a\u56fe\u4e2d\u6211\u4eec\u8bbf\u95ee VP3, \u4f46\u4ece\u6709\u6548\u4f4d\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\u5904 VP3 \u5e76\u672a\u88ab\u7f13\u5b58\u5230 DRAM \u4e2d, \u56e0\u6b64\u89e6\u53d1\u4e00\u4e2a \u7f3a\u9875\u5f02\u5e38 , \u968f\u540e\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u9009\u62e9\u4e00\u4e2a\u727a\u7272\u9875\u8fdb\u884c\u66ff\u6362. Example \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u6211\u4eec\u9009\u62e9\u4e86 VP4 \u4f5c\u4e3a\u727a\u7272\u9875, \u5982\u679c VP4 \u5df2\u7ecf\u88ab\u4fee\u6539\u4e86\u5185\u6838\u4f1a\u628a\u5b83\u5199\u56de\u78c1\u76d8(\u5199\u56de). \u968f\u540e\u5185\u6838\u4ece\u78c1\u76d8\u590d\u5236 VP3 \u5230\u5185\u5b58\u4e2d\u7684 PP3, \u66f4\u65b0 PTE3, \u968f\u540e\u8fd4\u56de. \u5f02\u5e38\u7a0b\u5e8f\u8fd4\u56de\u540e, \u91cd\u65b0\u542f\u52a8\u5bfc\u81f4\u7f3a\u9875\u7684\u6307\u4ee4, \u8be5\u6307\u4ee4\u91cd\u65b0\u53d1\u9001\u865a\u62df\u5730\u5740\u5230\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6. \u5206\u914d\u9875\u9762 \u00b6 Example \u5982\u56fe\u4e2d, \u6211\u4eec\u8c03\u7528 malloc, VP5 \u7684\u5206\u914d\u8fc7\u7a0b\u662f\u5728\u78c1\u76d8\u4e0a\u521b\u9020\u7a7a\u95f4\u5e76\u66f4\u65b0 PTE5. \u865a\u62df\u5185\u5b58\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u7684\u5de5\u5177 \u00b6 \u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u9875\u8868, \u5373\u4e00\u4e2a\u72ec\u7acb\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4. \u6ce8: \u591a\u4e2a\u865a\u62df\u9875\u9762\u53ef\u4ee5\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u7269\u7406\u9875\u9762. \u7b80\u5316\u94fe\u63a5 : \u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\u5141\u8bb8\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u6620\u50cf\u4f7f\u7528\u76f8\u540c\u7684\u57fa\u672c\u683c\u5f0f. \u5982 \u5bf9\u4e8e 64 \u4f4d\u5730\u5740\u7a7a\u95f4, \u4ee3\u7801\u6bb5\u603b\u662f\u4ece\u865a\u62df\u5730\u5740 0x400000 \u5f00\u59cb, \u6570\u636e\u6bb5\u8ddf\u5728\u4ee3\u7801\u6bb5\u4e4b\u540e, \u4e2d\u95f4\u4e00\u6bb5\u5bf9\u5176\u7a7a\u767d. \u6808\u5360\u636e\u7528\u6237\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u6700\u9ad8\u7684\u90e8\u5206, \u5e76\u5411\u4e0b\u751f\u957f. \u7b80\u5316\u52a0\u8f7d : \u8981\u628a\u53ef\u6267\u884c\u6587\u4ef6\u4e2d .text \u548c .data \u8282\u52a0\u8f7d\u5230\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\u4e2d, Linux \u52a0\u8f7d\u5668\u4e3a\u5176\u5206\u914d\u865a\u62df\u9875, \u628a\u5b83\u4eec\u6807\u8bb0\u4e3a\u65e0\u6548(\u5373\u672a\u88ab\u7f13\u5b58), \u5c06 PTE \u6307\u5411\u76ee\u6807\u6587\u4ef6\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e. \u8bbf\u95ee\u67d0\u4e00\u865a\u62df\u5730\u5740\u65f6\uff0c\u53d1\u73b0\u5176\u5bf9\u5e94\u7684 PTE \u662f\u65e0\u6548\u7684\uff0c\u5219\u4f1a\u53d1\u8d77\u7f3a\u9875\u5f02\u5e38\uff0c\u901a\u8fc7\u7f3a\u9875\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u81ea\u52a8\u5730\u5c06\u865a\u62df\u9875\u52a0\u8f7d\u5230\u7269\u7406\u9875\u4e2d. \u52a0\u8f7d\u5668\u4ece\u4e0d\u4ece\u78c1\u76d8\u5230\u5185\u5b58\u5b9e\u9645\u590d\u5236\u4efb\u4f55\u6570\u636e. (\u7a0b\u5e8f\u8fd0\u884c\u4e2d\u53ef\u80fd\u4f1a) \u7b80\u5316\u5171\u4eab : \u8fd9\u91cc\u53ea\u9700\u8981\u5728\u8fdb\u7a0b\u4e2d\u901a\u8fc7\u4e00\u4e2a PTE \u6307\u5411\u8be5\u5171\u4eab\u7684\u6570\u636e\u6216\u4ee3\u7801\u7684\u7269\u7406\u9875\uff0c\u5c31\u80fd\u5b9e\u73b0\u5728\u6240\u6709\u8fdb\u7a0b\u4e2d\u5171\u4eab\u7684\u7ed3\u679c. \u7b80\u5316\u5185\u5b58\u5206\u914d : \u5f53\u4e00\u4e2a\u8fd0\u884c\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u8981\u6c42\u989d\u5916\u7684\u5806\u7a7a\u95f4(\u5982\u8c03\u7528 malloc \u65f6), \u64cd\u4f5c\u7cfb\u7edf\u8981\u5206\u914d\u4e00\u4e2a\u9002\u5f53\u6570\u5b57\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u9875\u9762, \u5e76\u5c06\u5b83\u4eec\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u4e2d\u4efb\u610f k \u4e2a\u7269\u7406\u9875\u9762. \u7531\u4e8e\u9875\u9762\u6620\u5c04, \u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7684\u7269\u7406\u9875\u9762\u53ef\u4ee5\u968f\u673a\u5206\u914d\u5728\u7269\u7406\u5185\u5b58\u4e2d. \u865a\u62df\u5185\u5b58\u4f5c\u4e3a\u5185\u5b58\u4fdd\u62a4\u7684\u5de5\u5177 \u00b6 \u6211\u4eec\u53ef\u4ee5\u5728 PTE \u4e0a\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u8bb8\u53ef\u4f4d\u6765\u9650\u5236\u5bf9\u4e00\u4e2a\u865a\u62df\u9875\u9762\u7684\u8bbf\u95ee. \u8fd9\u91cc\u5f15\u5165\u4e86\u4e09\u4e2a\u5b57\u6bb5: SUP : \u786e\u5b9a\u8be5\u7269\u7406\u9875\u7684\u8bbf\u95ee\u6743\u9650, \u786e\u5b9a\u662f\u5426\u9700\u8981\u5185\u6838\u6a21\u5f0f\u624d\u80fd\u8bbf\u95ee READ : \u786e\u5b9a\u8be5\u7269\u7406\u9875\u7684\u8bfb\u6743\u9650 WRITE : \u786e\u5b9a\u8be5\u7269\u7406\u9875\u7684\u5199\u6743\u9650 \u5982\u679c\u4e00\u6761\u6307\u4ee4\u8fdd\u53cd\u4e86\u8bb8\u53ef\u6761\u4ef6, \u90a3\u4e48 CPU \u89e6\u53d1\u4e00\u4e2a\u4e00\u822c\u4fdd\u62a4\u4fdd\u969c, \u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u4e00\u4e2a\u5185\u6838\u4e2d\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f. Linux shell \u5c06\u8fd9\u79cd\u5f02\u5e38\u62a5\u544a\u79f0\u4e3a \u6bb5\u9519\u8bef(segment fault) . \u5730\u5740\u7ffb\u8bd1 \u00b6 \u5f62\u5f0f\u4e0a\u8bf4, \u5730\u5740\u7ffb\u8bd1\u5c31\u662f\u4e00\u4e2a N \u5143\u7d20\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4(VAS)\u4e2d\u7684\u5143\u7d20\u548c\u4e00\u4e2a M \u5143\u7d20\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4(PAS)\u4e2d\u5143\u7d20\u7684\u4e00\u4e2a\u6620\u5c04: \\(MAP:VAS\\rightarrow PAS \\cup\\empty\\) \u5730\u5740\u7ffb\u8bd1 : \u865a\u62df\u9875\u5927\u5c0f\u4e3a P \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u9700\u8981\u865a\u62df\u5730\u5740\u7684\u4f4e p \u4f4d\u6765\u7d22\u5f15\u4e00\u4e2a\u865a\u62df\u9875\u4e2d\u7684\u5b57\u8282, \u5f97\u5230 \u865a\u62df\u9875\u504f\u79fb\u91cfVirtual Page Offset\uff0cVPO) , \u7136\u540e\u901a\u8fc7\u865a\u62df\u5730\u5740\u7684\u9ad8 n-p \u4f4d\u6765\u786e\u5b9a\u865a\u62df\u9875\u5728\u9875\u8868\u4e2d\u7684\u7d22\u5f15, \u5f97\u5230 \u865a\u62df\u9875\u53f7(Virtual Page Number\uff0cVPN) . \u800c\u9875\u8868\u7684\u8d77\u59cb\u5730\u5740\u4fdd\u5b58\u5728\u4e00\u4e2a\u7279\u6b8a\u7684 CPU \u5bc4\u5b58\u5668 \u9875\u8868\u57fa\u5740\u5bc4\u5b58\u5668(Page Table Base Register\uff0cPTBR) \u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 VPN \u548c PTBR \u7ec4\u5408\u5f97\u5230\u60f3\u8981\u7684 PTE \u7684\u7269\u7406\u5185\u5b58\u5730\u5740. \u5e76\u4e14\u7531\u4e8e\u865a\u62df\u9875\u548c\u7269\u7406\u9875\u7684\u5927\u5c0f\u76f8\u540c, \u6240\u4ee5\u4e24\u8005\u7f16\u7801\u9875\u4e2d\u504f\u79fb\u91cf\u6240\u9700\u7684\u4f4d\u6570 p \u76f8\u540c, \u53ef\u4ee5\u5047\u8bbe\u6570\u636e\u5728\u865a\u62df\u9875\u548c\u5728\u7269\u7406\u9875\u4e2d\u7684\u504f\u79fb\u91cf\u76f8\u540c, \u7531\u6b64\u5c31\u65e0\u9700\u5728\u9875\u8868\u4e2d\u4fdd\u5b58 \u7269\u7406\u9875\u504f\u79fb\u91cf(Physical Page Offset\uff0cPPO) , \u53ea\u9700\u8981\u4fdd\u5b58 \u7269\u7406\u9875\u53f7(Physical Page Number\uff0cPPN) , \u53ef\u4ee5\u76f4\u63a5\u5c06 VPO \u590d\u5236\u7ed9 PPO, \u6765\u786e\u5b9a\u6570\u636e\u5728\u7269\u7406\u9875\u4e2d\u7684\u504f\u79fb\u91cf. \u6ce8: \u4ece\u7f13\u5b58\u89d2\u5ea6\u770b, VPN \u5c31\u662f\u6807\u5fd7\u4f4d, VPO \u5c31\u662f\u5757\u504f\u79fb. \u9875\u8868\u4e2d\u53ea\u4fdd\u5b58 PPN \u548c\u6807\u5fd7\u4f4d . \u9875\u9762\u547d\u4e2d\u4e3b\u8981\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4: \u5904\u7406\u5668\u751f\u6210\u4e00\u4e2a\u865a\u62df\u5730\u5740, \u5e76\u4f20\u7ed9 MMU MMU \u751f\u6210 PTE \u5730\u5740(\u56e0\u4e3a\u9875\u8868\u4fdd\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d, \u8fd9\u91cc\u53d1\u9001\u7684 PTEA \u5373 PTBR+VPN ), \u5e76\u4ece\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u8bf7\u6c42\u5f97\u5230\u5b83 \u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u5411 MMU \u8fd4\u56de PTE(\u4e0d\u5305\u542b PPO) MMU \u6784\u9020\u7269\u7406\u5730\u5740, \u5e76\u628a\u5b83\u4f20\u9001\u7ed9\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58 \u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u8fd4\u56de\u6240\u8bf7\u6c42\u7684\u6570\u636e\u5b57\u7ed9\u5904\u7406\u5668 * \u9875\u9762\u4e0d\u547d\u4e2d\u4e3b\u8981\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4: \u524d\u4e09\u6b65\u4e0e\u9875\u9762\u547d\u4e2d\u76f8\u540c PTE \u4e2d\u6709\u6548\u4f4d\u662f 0, \u56e0\u6b64 MMU \u89e6\u53d1\u5f02\u5e38, \u63a7\u5236\u4f20\u9012\u5230\u7f3a\u9875\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f. \u7f3a\u9875\u5904\u7406\u7a0b\u5e8f\u786e\u5b9a\u7269\u7406\u5185\u5b58(\u9ad8\u901f\u7f13\u5b58/\u5185\u5b58)\u4e2d\u7684\u727a\u7272\u9875, \u5982\u679c\u5982\u679c\u9875\u9762\u5df2\u7ecf\u88ab\u4fee\u6539\u4e86\u5c31\u628a\u5b83\u5199\u56de\u5230\u78c1\u76d8 \u7f3a\u9875\u5904\u7406\u7a0b\u5e8f\u8c03\u5165\u65b0\u7684\u9875\u9762, \u5e76\u66f4\u65b0\u5185\u5b58\u4e2d\u7684 PTE \u7f3a\u9875\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u5230\u539f\u6765\u7684\u8fdb\u7a0b, \u518d\u6b21\u6267\u884c\u6307\u4ee4. \u7ed3\u5408\u9ad8\u901f\u7f13\u5b58\u548c\u865a\u62df\u5185\u5b58 \u00b6 \u5229\u7528 TLB \u52a0\u901f\u5730\u5740\u7ffb\u8bd1 \u00b6 \u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21 CPU \u5c06\u4e00\u4e2a\u865a\u62df\u5730\u5740\u53d1\u9001\u7ed9 MMU \u65f6, MMU \u90fd\u4f1a\u5c06\u9700\u8981\u7684 PTE \u7269\u7406\u5730\u5740\u53d1\u9001\u7ed9\u9ad8\u901f\u7f13\u5b58/\u5185\u5b58\u6765\u83b7\u5f97 PTE, \u5982\u679c\u9ad8\u901f\u7f13\u5b58\u521a\u597d\u4fdd\u5b58\u4e86\u8be5 PTE\uff0c\u5219 MMU \u53ef\u4ee5\u5f88\u5feb\u83b7\u5f97, \u5426\u5219\u9700\u8981\u7b49\u5f85\u5f88\u591a\u65f6\u949f\u5468\u671f\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6. \u5728 MMU \u4e2d\u6709\u4e00\u4e2a\u5173\u4e8e PTE \u7684\u5c0f\u7684\u7f13\u5b58, \u79f0\u4e3a \u5feb\u8868(Translation Lookaside Buffer, TLB) . TLB \u662f\u4e00\u4e2a\u5c0f\u7684, \u865a\u62df\u5bfb\u5740\u7684\u7f13\u5b58, \u5176\u4e2d\u6bcf\u4e00\u884c\u90fd\u4fdd\u5b58\u7740\u4e00\u4e2a\u7531\u5355\u4e2a PTE \u7ec4\u6210\u5757. TLB \u901a\u5e38\u6709\u9ad8\u5ea6\u7684\u76f8\u8054\u5ea6. \u5982\u679c TLB \u6709 \\(T=2^t\\) \u4e2a\u7ec4, \u90a3\u4e48 TLB\u7d22\u5f15(TLBI) \u662f\u7531 VPN \u7684 t \u4e2a\u6700\u4f4e\u4f4d\u7ec4\u6210\u7684, \u800c TLB\u6807\u8bb0(TLBT) \u662f\u7531 VPN \u4e2d\u5269\u4f59\u7684\u4f4d\u7ec4\u6210\u7684. TLB \u547d\u4e2d CPU \u4ea7\u751f\u4e00\u4e2a\u865a\u62df\u5730\u5740 MMU \u4ece TLB \u4e2d\u53d6\u51fa\u76f8\u5e94\u7684 PTE(PPN \u548c\u6807\u8bb0\u4f4d) TLB \u5bf9 VPN \u8fdb\u884c\u5206\u89e3\uff0c\u5f97\u5230 TLBI \u548c TLBT\uff0c\u6839\u636e TLBI \u786e\u5b9a\u6240\u5728\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\uff0c\u7136\u540e\u5728\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d\u4f9d\u6b21\u6bd4\u8f83\u5404\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u7684\u6807\u8bb0\u662f\u5426\u548c TLBT \u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5219 TLB \u547d\u4e2d\uff0c\u5c06\u5bf9\u5e94\u7684 PPN \u53d1\u9001\u7ed9 MMU. MMU \u5c06\u8fd9\u4e2a\u865a\u62df\u5730\u5740\u7ffb\u8bd1\u4e3a\u7269\u7406\u5730\u5740, \u5e76\u5c06\u5b83\u53d1\u9001\u5230\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58 \u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u5c06\u6240\u8bf7\u6c42\u7684\u6570\u636e\u5b57\u8fd4\u56de\u7ed9 CPU TLB \u4e0d\u547d\u4e2d MMU \u5fc5\u987b\u4ece L1 \u7f13\u5b58\u4e2d\u53d6\u51fa\u76f8\u5e94\u7684 PTE, \u53ef\u80fd\u8986\u76d6\u4e00\u4e2a\u539f\u6709\u7684\u6761\u76ee. \u591a\u7ea7\u9875\u8868 \u00b6 \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a 32 \u4f4d\u7684\u5730\u5740\u7a7a\u95f4, \u9875\u9762\u5927\u5c0f\u4e3a 4KB, PTE \u5927\u5c0f\u4e3a 4 \u5b57\u8282, \u90a3\u4e48\u65e0\u8bba\u88ab\u4f7f\u7528\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u591a\u5c0f, \u6211\u4eec\u90fd\u9700\u8981\u4e00\u4e2a 4MB \u7684\u9875\u8868\u9a7b\u7559\u5728\u5185\u5b58\u4e2d. Note \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, \u9875\u9762\u5927\u5c0f 4KB \u5373 \\(4*2^{10}=2^{12}\\) bytes. \u6211\u4eec\u9700\u8981 \\(2^{32}/2^{12} = 2^20\\) \u4e2a\u9875\u9762, \u8fd9\u4e5f\u5c31\u9700\u8981 \\(2^20\\) \u4e2a PTE. \u56e0\u6b64\u9875\u8868\u5927\u5c0f\u4e3a \\(2^20 \\times 4 = 4 MB\\) \u6211\u4eec\u53ef\u4ee5\u6784\u9020\u591a\u7ea7\u9875\u8868\u6765\u538b\u7f29\u5185\u5bb9: \u4e00\u7ea7\u9875\u8868\u4e2d\u6bcf\u4e2a PTE \u8d1f\u8d23\u6620\u5c04\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u4e00\u4e2a 4MB \u7684 \u7247(chunk) , \u8fd9\u91cc\u6bcf\u4e00\u7247\u90fd\u662f\u7531 1024 \u4e2a\u8fde\u7eed\u9875\u9762\u7ec4\u6210(\u56e0\u6b64\u4e8c\u7ea7\u9875\u8868\u4e2d\u6bcf\u4e00\u4e2a\u7247\u5bf9\u5e94 1024 \u4e2a PTE). \u5bf9\u4e8e 4GB \u7684\u5730\u5740\u7a7a\u95f4, \u4e00\u7ea7\u9875\u8868\u4e2d 1024 \u4e2a PTE \u5df2\u7ecf\u8db3\u591f\u8986\u76d6\u6574\u4e2a\u5185\u5b58\u7a7a\u95f4. \u5982\u679c\u7247 i \u4e2d\u7684\u6bcf\u4e2a\u9875\u9762\u90fd\u672a\u88ab\u5206\u914d, \u90a3\u4e48\u5176\u4e00\u7ea7 PTEi \u5c31\u4e3a\u7a7a. \u5982\u679c\u81f3\u5c11\u6709\u4e00\u4e2a\u9875\u662f\u5206\u914d\u4e86\u7684, \u90a3\u4e48\u4e00\u7ea7 PTEi \u5c31\u6307\u5411\u4e00\u4e2a\u4e8c\u7ea7\u9875\u8868\u7684\u57fa\u5740. \u4e8c\u7ea7\u9875\u8868\u4e2d\u6bcf\u4e2a PTE \u8d1f\u8d23\u6620\u5c04\u4e00\u4e2a 4KB \u7684\u865a\u62df\u5185\u5b58\u754c\u9762. \u6211\u4eec\u4e00\u7ea7\u548c\u4e8c\u7ea7\u9875\u8868\u7684 PTE \u5927\u5c0f\u90fd\u662f 4 \u5b57\u8282, \u56e0\u6b64\u9875\u8868\u90fd\u662f 4KB \u7684, \u521a\u597d\u4e0e\u9875\u9762\u5927\u5c0f\u4e00\u81f4. \u8fd9\u79cd\u65b9\u6cd5\u51cf\u5c11\u4e86\u5185\u5b58\u8981\u6c42: \u5982\u679c\u4e00\u7ea7\u9875\u8868\u4e2d\u7684\u4e00\u4e2a PTE \u662f\u7a7a\u7684, \u90a3\u4e48\u4e8c\u7ea7\u9875\u8868\u6839\u672c\u4e0d\u4f1a\u5b58\u5728. \u53ea\u6709\u4e00\u7ea7\u9875\u8868\u624d\u9700\u8981\u603b\u662f\u5728\u5185\u5b58\u4e2d, \u865a\u62df\u5185\u5b58\u7cfb\u7edf\u53ef\u4ee5\u5728\u9700\u8981\u65f6\u521b\u5efa, \u9875\u9762\u8c03\u5165\u6216\u8c03\u51fa\u4e8c\u7ea7\u9875\u8868, \u8fd9\u51cf\u5c11\u4e86\u4e3b\u5b58\u7684\u538b\u529b. \u53ea\u6709\u6700\u7ecf\u5e38\u4f7f\u7528\u7684\u4e8c\u7ea7\u9875\u8868\u624d\u9700\u8981\u7f13\u5b58\u5728\u4e3b\u5b58 \u4e2d. \u6848\u4f8b\u5206\u6790: Intel Core i7/Linux \u5185\u5b58\u7cfb\u7edf \u00b6 Core i7 \u652f\u6301 48 \u4f4d\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c 52 \u4f4d\u7269\u7406\u5730\u5740\u7a7a\u95f4, \u8fd8\u517c\u5bb9 32 \u4f4d\u865a\u62df\u548c\u7269\u7406\u5730\u5740\u7a7a\u95f4. Core i7 \u5730\u5740\u7ffb\u8bd1 \u00b6 Core i7 \u91c7\u7528\u56db\u7ea7\u9875\u8868\u5c42\u6b21\u7ed3\u6784. CR3 \u63a7\u5236\u5bc4\u5b58\u5668\u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868(L1) \u7684\u8d77\u59cb\u4f4d\u7f6e. CR3 \u7684\u503c\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u4e00\u90e8\u5206, \u6bcf\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\u65f6 CR3 \u7684\u503c\u90fd\u4f1a\u88ab\u6062\u590d. \u9875\u5927\u5c0f\u53ef\u4ee5\u5728\u542f\u52a8\u65f6\u88ab\u914d\u7f6e\u4e3a 4KB \u6216 4MB. Linux \u4f7f\u7528\u7684\u662f 4KB \u7684\u9875, \u56e0\u6b64 \\(p=12\\) . \u5176\u4e2d\u6bcf\u4e2a PTE \u4e3a 8 \u5b57\u8282, \u8fd9\u91cc\u8981\u6c42\u7269\u7406\u9875 4KB \u5bf9\u9f50. \u7531\u4e8e\u7269\u7406\u5730\u5740\u4e3a 52 \u4f4d, PPO \u4e3a 12 \u4f4d, \u5219 PPN \u4e3a 40 \u4f4d, \u6240\u4ee5\u8fd9\u91cc\u7684\u9875\u8868\u7269\u7406\u57fa\u5730\u5740\u4e3a 40 \u4f4d. \u8fd9\u91cc\u589e\u52a0\u4e86 3 \u4e2a\u6743\u9650\u4f4d\u6765\u63a7\u5236\u5bf9\u9875\u7684\u8bbf\u95ee: R/W \u3001 U/S \u548c XD , \u5176\u4e2d XD \u662f 64 \u4f4d\u7cfb\u7edf\u5f15\u5165\u7684, \u9650\u5236\u4e86\u53ea\u80fd\u5728\u53ea\u8bfb\u4ee3\u7801\u6bb5\u6267\u884c, \u964d\u4f4e\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\u7684\u98ce\u9669\u3002\u6b64\u5916, \u5f53 MMU \u8bbf\u95ee\u4e00\u4e2a\u9875\u65f6, \u4f1a\u8bbe\u7f6e \u5f15\u7528\u4f4d(Reference Bit) A \u4f4d, \u8ba9\u5185\u6838\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5, \u5f53 MMU \u4fee\u6539\u4e00\u4e2a\u9875\u65f6, \u4f1a\u8bbe\u7f6e \u810f\u4f4d(Dirty Bit) D\u4f4d, \u4f7f\u5f97\u5185\u6838\u5bf9\u727a\u7272\u9875\u8fdb\u884c\u5199\u56de. \u603b\u4f53\u6d41\u7a0b\u56fe: \u9ad8\u901f\u7f13\u5b58 \u6700\u540e\u7269\u7406\u5730\u5740\u7684 52 \u4f4d\u4e2d, CT \u8868\u793a\u6807\u5fd7\u4f4d, CI \u8868\u793a\u7ec4\u7d22\u5f15, CO \u8868\u793a\u5757\u504f\u79fb. \u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7279\u70b9: \u9ad8\u901f\u7f13\u5b58\u7684 \\(CI+CO=12\\) \u4f4d, \u800c VPO \u4e5f\u662f 12 \u4f4d. \u8fd9\u4e0d\u662f\u5de7\u5408, \u800c\u662f\u6545\u610f\u8fd9\u6837\u8bbe\u8ba1\u6765\u52a0\u901f\u5730\u5740\u7ffb\u8bd1. \u6211\u4eec\u77e5\u9053, VPO=PPO, \u800c PPN \u9700\u8981\u901a\u8fc7\u5730\u5740\u7ffb\u8bd1\u83b7\u5f97, \u5219\u4e00\u5f00\u59cb\u8f93\u5165\u865a\u62df\u5730\u5740\u65f6, \u5c31\u80fd\u4e00\u4e0b\u7b49\u5230 PPO, \u7136\u540e\u7b49\u5f85\u68c0\u7d22 PPN. \u6b64\u65f6\u6211\u4eec\u5c31\u80fd\u76f4\u63a5\u5c06 PPO \u8f93\u5165\u5230\u9ad8\u901f\u7f13\u5b58\u4e2d, \u56e0\u4e3aPPO\u786e\u5b9a\u4e86\u5bf9\u5e94\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\u548c\u5757\u504f\u79fb\u91cf, \u5c31\u80fd\u5148\u901a\u8fc7 PPO \u83b7\u5f97\u5bf9\u5e94\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4, \u7136\u540e\u53ea\u8981\u7b49\u68c0\u7d22\u5230 PPN \u65f6, \u5c31\u80fd\u76f4\u63a5\u548c\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d\u6bcf\u4e00\u884c\u7684\u6807\u5fd7\u4f4d\u8fdb\u884c\u6bd4\u8f83, \u6781\u5927\u52a0\u901f\u4e86\u5730\u5740\u7ffb\u8bd1\u8fc7\u7a0b. Linux \u865a\u62df\u5185\u5b58\u7cfb\u7edf \u00b6 Linux \u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4. \u5176\u4e2d\u5185\u6838\u865a\u62df\u5185\u5b58\u5305\u62ec\u5185\u6838\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u7ed3\u6784. \u5185\u6838\u865a\u62df\u5185\u5b58\u7684\u67d0\u4e9b\u533a\u57df\u88ab\u6620\u5c04\u5230\u6240\u6709\u8fdb\u7a0b\u5171\u4eab\u7684\u7269\u7406\u9875\u9762. Linux \u8fd8\u5c06\u4e00\u7ec4\u8fde\u7eed\u7684\u865a\u62df\u9875\u9762(\u5927\u5c0f\u7b49\u4e8e\u7cfb\u7edf\u4e2d DRAM \u603b\u91cf)\u6620\u5c04\u5230\u76f8\u5e94\u7684\u4e00\u7ec4\u8fde\u7eed\u7684\u7269\u7406\u9875\u9762. \u8fd9\u6837\u5185\u6838\u53ef\u4ee5\u5728\u8fd9\u4e2a\u865a\u62df\u5185\u5b58\u4e0a\u8fdb\u884c\u8bfb\u5199\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u7269\u7406\u5185\u5b58\u8fdb\u884c\u8bfb\u5199, \u8fd9\u4e3a\u5185\u6838\u63d0\u4f9b\u4e00\u79cd\u4fbf\u5229\u7684\u65b9\u6cd5\u6765\u8bbf\u95ee\u7269\u7406\u5185\u5b58\u3002\u8fd9\u90e8\u5206\u5185\u5bb9\u5bf9\u6240\u6709\u8fdb\u7a0b\u90fd\u662f\u4e00\u6837\u7684. Linux \u865a\u62df\u5185\u5b58\u533a\u57df \u00b6 Linux \u5c06\u865a\u62df\u5185\u5b58\u7ec4\u7ec7\u6210\u4e00\u4e9b \u533a\u57df (\u4e5f\u53eb \u6bb5 )\u7684\u96c6\u5408, \u4e00\u4e2a \u533a\u57df \u5c31\u662f\u5df2\u7ecf\u5b58\u5728\u7740\u7684(\u5df2\u5206\u914d)\u865a\u62df\u5185\u5b58\u7684\u8fde\u7eed\u7247, \u8fd9\u4e9b\u9875\u662f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u76f8\u5173\u8054\u7684, \u5982\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u3001\u5171\u4eab\u5e93\u6bb5\u4ee5\u53ca\u7528\u6237\u6808, \u8fd9\u79cd\u7ec4\u7ec7\u6210\u6bb5\u7684\u5f62\u5f0f, \u5141\u8bb8\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5b58\u5728\u95f4\u9699. \u5185\u6838\u4e3a\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684\u4efb\u52a1\u7ed3\u6784(\u6e90\u4ee3\u7801\u4e2d\u7684 task_struct , \u5b58\u4e8e\u6700\u4e0a\u9762\u90a3\u5757)\u5176\u4e2d\u5305\u62ec\u8fd0\u884c\u8be5\u8fdb\u7a0b\u6240\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f. \u5176\u4e2d\u6709\u4e00\u4e2a\u6761\u76ee\u6307\u5411 mm_struct , \u5b83\u63cf\u8ff0\u4e86\u865a\u62df\u5185\u5b58\u7684\u5f53\u524d\u72b6\u6001. \u5b83\u5305\u542b\u4e24\u4e2a\u6709\u8da3\u7684\u5b57\u6bb5: pgd : \u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868(\u9875\u5168\u5c40\u76ee\u5f55)\u7684\u57fa\u5740. \u5f53\u5185\u6838\u8fd0\u884c\u8fdb\u7a0b\u65f6, \u5c31\u628a pgd \u653e\u5728 CR3 \u63a7\u5236\u5bc4\u5b58\u5668\u4e0b. mmap : \u6307\u5411\u4e00\u4e2a vm_area_struct (\u533a\u57df\u7ed3\u6784)\u7684\u94fe\u8868. vm_start : \u6307\u5411\u8fd9\u4e2a\u533a\u57df\u7684\u8d77\u59cb\u5904 vm_end : \u6307\u5411\u8fd9\u4e2a\u533a\u57df\u7684\u7ed3\u675f\u5904 vm_prot : \u63cf\u8ff0\u8fd9\u4e2a\u533a\u57df\u5185\u5305\u542b\u7684\u6240\u6709\u9875\u7684\u8bfb\u5199\u8bb8\u53ef\u6743\u9650 vm_flags : \u63cf\u8ff0\u8fd9\u4e2a\u533a\u57df\u5185\u7684\u9875\u9762\u662f\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u7684, \u8fd8\u662f\u8fd9\u4e2a\u8fdb\u7a0b\u79c1\u6709\u7684 vm_next : \u6307\u5411\u94fe\u8868\u4e2d\u4e0b\u4e00\u4e2a\u7ed3\u6784 Linux \u7f3a\u9875\u5f02\u5e38\u5904\u7406 \u00b6 \u5047\u8bbe MMU \u5728\u8bd5\u56fe\u7ffb\u8bd1\u67d0\u4e2a\u865a\u62df\u5730\u5740 A \u65f6\u89e6\u53d1\u4e86\u4e00\u4e2a\u7f3a\u9875, \u5904\u7406\u7a0b\u5e8f\u968f\u540e\u6267\u884c\u4e0b\u9762\u7684\u6b65\u9aa4: \u865a\u62df\u5730\u5740 A \u662f\u5426\u5408\u6cd5 : A \u662f\u5426\u662f\u5728\u67d0\u4e2a\u533a\u57df\u7ed3\u6784\u5b9a\u4e49\u7684\u533a\u57df\u5185? \u5904\u7406\u7a0b\u5e8f\u4f1a\u628a A \u4e0e\u6bcf\u4e2a\u533a\u57df\u7ed3\u6784\u7684 vm_start \u548c vm_end \u505a\u6bd4\u8f83. \u5982\u679c\u6307\u4ee4\u4e0d\u5408\u6cd5, \u7a0b\u5e8f\u89e6\u53d1\u4e00\u4e2a\u6bb5\u9519\u8bef, \u7ec8\u6b62\u8fdb\u7a0b. \u5bf9\u5730\u5740 A \u7684\u8bbf\u95ee\u662f\u5426\u5408\u6cd5 : \u8fdb\u7a0b\u662f\u5426\u6709\u8bfb\u5199\u6216\u8005\u6267\u884c\u8fd9\u4e2a\u533a\u57df\u5185\u9875\u9762\u7684\u6743\u9650? \u5982\u679c\u8bbf\u95ee\u4e0d\u5408\u6cd5, \u7a0b\u5e8f\u4f1a\u89e6\u53d1\u4e00\u4e2a\u4fdd\u62a4\u5f02\u5e38, \u7ec8\u6b62\u8fdb\u7a0b. \u6b63\u5e38\u7684\u7f3a\u9875\u5904\u7406: \u9009\u62e9\u4e00\u4e2a\u727a\u7272\u9875, \u5982\u679c\u88ab\u4fee\u6539\u4e86\u5c31\u5199\u56de, \u968f\u540e\u5c06\u865a\u62df\u5730\u5740 A \u5bf9\u5e94\u7684\u865a\u62df\u9875\u5199\u5165\u7269\u7406\u9875\u4e2d, \u4fee\u6539\u9875\u8868, \u4ece\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de. \u5185\u5b58\u6620\u5c04 \u00b6 Linux \u901a\u8fc7\u5c06\u4e00\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df\u4e0e\u4e00\u4e2a\u78c1\u76d8\u4e0a\u7684 \u5bf9\u8c61(object) \u5173\u8054\u8d77\u6765, \u4ee5\u521d\u59cb\u5316\u8fd9\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u5185\u5bb9, \u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u5185\u5b58\u6620\u5c04(memory mapping) . \u865a\u62df\u5185\u5b58\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u5230\u4e24\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u4e2d\u7684\u4e00\u79cd: Linux \u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u666e\u901a\u6587\u4ef6 \u4e00\u4e2a\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u5230\u4e00\u4e2a\u666e\u901a\u78c1\u76d8\u6587\u4ef6\u7684\u8fde\u7eed\u90e8\u5206, \u4f8b\u5982\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u6587\u4ef6\u533a(section) \u88ab\u5206\u6210\u9875\u5927\u5c0f\u7684\u7247, \u7528\u6765\u521d\u59cb\u5316\u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u6bb5, \u5982\u679c\u6bb5\u6bd4\u6587\u4ef6\u5927, \u5219\u7528 0 \u6765\u586b\u5145\u5269\u4e0b\u7684\u5185\u5bb9. \u7136\u540e\u6309\u9700\u5c06\u865a\u62df\u9875\u590d\u5236\u5230\u7269\u7406\u9875\u4e2d. \u533f\u540d\u6587\u4ef6 \u4e00\u4e2a\u533a\u57df\u4e5f\u53ef\u4ee5\u6620\u5c04\u5230\u4e00\u4e2a\u533f\u540d\u6587\u4ef6, \u533f\u540d\u6587\u4ef6\u662f\u7531\u5185\u6838\u521b\u5efa\u7684, \u5305\u542b\u7684\u5168\u662f\u4e8c\u8fdb\u5236\u96f6. \u56e0\u6b64\u6620\u5c04\u5230\u533f\u540d\u6587\u4ef6\u7684\u533a\u57df\u4e2d\u7684\u9875\u9762\u4e5f\u88ab\u79f0\u4e3a \u8bf7\u6c42\u4e8c\u8fdb\u5236\u96f6\u7684\u9875(demand-zero page) . \u4e00\u65e6\u4e00\u4e2a\u865a\u62df\u9875\u9762\u88ab\u521d\u59cb\u5316\u4e86, \u5b83\u5c31\u5728\u4e00\u4e2a\u7531\u5185\u6838\u7ef4\u62a4\u7684\u4e13\u95e8\u7684 \u4ea4\u6362\u6587\u4ef6 \u4e4b\u95f4\u6362\u6765\u6362\u53bb. \u4ea4\u6362\u6587\u4ef6 \u4e5f\u53eb\u505a \u4ea4\u6362\u7a7a\u95f4 \u6216\u8005 \u4ea4\u6362\u533a\u57df . \u4ea4\u6362\u7a7a\u95f4\u9650\u5236\u5f53\u524d\u8fdb\u7a0b\u80fd\u591f\u5206\u914d\u7684\u865a\u62df\u9875\u9762\u7684\u603b\u6570. \u5171\u4eab\u5bf9\u8c61 \u00b6 \u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u88ab\u6620\u5c04\u5230\u865a\u62df\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u533a\u57df, \u8981\u4e48\u4f5c\u4e3a \u5171\u4eab\u5bf9\u8c61 , \u8981\u4e48\u4f5c\u4e3a \u79c1\u6709\u5bf9\u8c61 . \u6620\u5c04\u5230\u5171\u4eab\u5bf9\u8c61\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\u53eb \u5171\u4eab\u533a\u57df , \u7c7b\u4f3c\u5730\u6709 \u79c1\u6709\u533a\u57df . \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u5c06\u4e00\u4e2a\u5171\u4eab\u5bf9\u8c61\u6620\u5c04\u5230\u5b83\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u4e2a\u533a\u57df\u5185, \u90a3\u4e48\u8fd9\u4e2a\u8fdb\u7a0b\u5bf9\u8fd9\u4e2a\u533a\u57df\u7684\u4efb\u4f55\u5199\u64cd\u4f5c, \u5bf9\u4e8e\u90a3\u4e9b\u4e5f\u8fd9\u6837\u505a\u7684\u8fdb\u7a0b\u800c\u8a00, \u4e5f\u662f\u53ef\u89c1\u7684, \u800c\u4e14\u8fd9\u4e9b\u53d8\u5316\u4f1a\u53cd\u6620\u5230\u78c1\u76d8\u4e0a\u7684\u539f\u59cb\u5bf9\u8c61\u4e2d. \u5bf9\u4e8e\u4e00\u4e2a\u6620\u5c04\u5230\u79c1\u6709\u5bf9\u8c61\u7684\u533a\u57df\u7684\u6539\u53d8, \u5bf9\u5176\u4ed6\u8fdb\u7a0b\u662f\u4e0d\u53ef\u89c1\u7684, \u800c\u4e14\u53d8\u5316\u4e0d\u4f1a\u53cd\u6620\u5230\u78c1\u76d8\u4e0a\u7684\u5bf9\u8c61\u4e2d. \u5728\u8fdb\u7a0b 1 \u4e2d\uff0c\u5f53\u6211\u4eec\u5c06\u78c1\u76d8\u4e0a\u7684\u4e00\u4e2a\u5bf9\u8c61\u901a\u8fc7\u5185\u5b58\u6620\u5c04\u4e0e\u8be5\u8fdb\u7a0b\u7684\u4e00\u4e2a\u5171\u4eab\u6bb5\u5173\u8054\u8d77\u6765\u65f6\uff0c\u5c31\u4f1a\u4f7f\u5f97\u865a\u62df\u9875\u5bf9\u5e94\u7684 PTE \u6307\u5411\u8be5\u5bf9\u8c61\uff0c\u5f53\u5f15\u7528\u8be5\u5bf9\u8c61\u65f6\uff0c\u5c31\u4f1a\u5c06\u5bf9\u5e94\u7684\u865a\u62df\u9875\u52a0\u8f7d\u5230\u7269\u7406\u9875\u4e2d\uff1b\u800c\u8fdb\u7a0b 2 \u4e5f\u8981\u5c06\u8be5\u5bf9\u8c61\u4e0e\u81ea\u5df1\u7684\u4e00\u4e2a\u5171\u4eab\u6bb5\u5173\u8054\u8d77\u6765\u65f6\uff0c\u5f53\u5bf9\u5176\u5f15\u7528\u65f6\uff0c\u7531\u4e8e\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6587\u4ef6\u540d\uff0c\u6240\u4ee5\u5185\u6838\u53ef\u4ee5\u53d1\u73b0\u8fdb\u7a0b 1 \u5c06\u8be5\u5bf9\u8c61\u52a0\u8f7d\u7684\u7269\u7406\u9875\uff0c\u5c31\u76f4\u63a5\u5728\u8fdb\u7a0b 2 \u4e2d\u5c06\u5bf9\u5e94\u7684 PTE \u6307\u5411\u76f8\u540c\u7684\u7269\u7406\u9875\u5c31\u884c\u4e86. \u6ce8 : \u8fdb\u7a0b \u00bd \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e0d\u540c; \u5373\u4f7f\u4e00\u4e2a\u5bf9\u8c61\u4e0e\u591a\u4e2a\u8fdb\u7a0b\u7684\u5171\u4eab\u6bb5\u7ba1\u7406, \u7269\u7406\u5185\u5b58\u4e2d\u53ea\u653e\u5171\u4eab\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c. \u79c1\u6709\u5bf9\u8c61\u4f7f\u7528 \u5199\u65f6\u590d\u5236(copy-on-write) \u7684\u65b9\u6cd5. \u672a\u5bf9\u79c1\u6709\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\u65f6, \u7269\u7406\u5185\u5b58\u4e2d\u53ea\u4f1a\u4fdd\u5b58\u540c\u4e00\u4e2a\u5bf9\u8c61\u526f\u672c, \u4e14\u5404\u4e2a\u8fdb\u7a0b\u4e2d\u5bf9\u8be5\u5bf9\u8c61\u7684 PTE \u90fd\u662f\u53ea\u8bfb\u7684, \u800c\u865a\u62df\u5185\u5b58\u6bb5\u6807\u8bb0\u4e3a \u79c1\u6709\u7684\u5199\u65f6\u590d\u5236 . \u53ea\u8981\u6ca1\u6709\u8fdb\u7a0b\u8bd5\u56fe\u5199\u5b83\u81ea\u5df1\u7684\u79c1\u6709\u533a\u57df, \u5b83\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5171\u4eab\u7269\u7406\u5185\u5b58\u4e2d\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c. \u4f46\u5f53\u6709\u8fdb\u7a0b\u8bd5\u56fe\u5199\u79c1\u6709\u533a\u57df\u7684\u67d0\u4e2a\u5c40\u9762\u65f6, \u4f1a\u89e6\u53d1\u4e00\u4e2a\u4fdd\u62a4\u6545\u969c. \u6545\u969c\u5904\u7406\u7a0b\u5e8f\u4f1a\u5728\u7269\u7406\u5185\u5b58\u4e2d\u521b\u5efa\u8fd9\u4e2a\u9875\u9762\u7684\u4e00\u4e2a\u65b0\u526f\u672c, \u66f4\u65b0 PTE \u6307\u5411\u65b0\u526f\u672c, \u7136\u540e\u6062\u590d\u8fd9\u4e2a\u9875\u9762\u7684\u53ef\u5199\u6743\u9650. \u6545\u969c\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u540e\u91cd\u65b0\u6267\u884c\u5199\u64cd\u4f5c\u5373\u53ef. Note \u56fe\u4e2d\u5927\u5757\u7684\u8868\u793a\u5bf9\u8c61\uff0c\u53ef\u80fd\u7531\u5f88\u591a\u4e2a\u9875\u7ec4\u6210\uff0c\u5f53\u6211\u4eec\u5c1d\u8bd5\u5bf9\u5176\u4e2d\u4e00\u4e2a\u9875\u8fdb\u884c\u4fee\u6539\u65f6\uff0c \u53ea\u4f1a\u5bf9\u8be5\u9875\u8fdb\u884c\u590d\u5236 \uff0c\u5e76\u4fee\u6539\u8be5\u9875\u5bf9\u5e94\u7684 PTE\uff0c\u800c \u8be5\u5bf9\u8c61\u7684\u5176\u4ed6\u9875\u4fdd\u6301\u4e0d\u53d8. \u901a\u8fc7\u5199\u65f6\u590d\u5236\u8fd9\u79cd\u7b56\u7565\uff0c\u5c3d\u53ef\u80fd\u5ef6\u8fdf\u7269\u7406\u5185\u5b58\u4e2d\u7684\u62f7\u8d1d\uff0c\u80fd\u6700\u5927\u6548\u7387\u5730\u4f7f\u7528\u7269\u7406\u5185\u5b58. fork \u51fd\u6570 \u00b6 \u5f53 fork \u51fd\u6570\u88ab\u5f53\u524d\u8fdb\u7a0b\u8c03\u7528\u65f6, \u5185\u6838\u4e3a\u65b0\u8fdb\u7a0b\u521b\u5efa\u5404\u79cd\u6570\u636e\u7ed3\u6784, \u5e76\u5206\u914d\u7ed9\u5b83\u552f\u4e00\u7684 PID. \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u865a\u62df\u5730\u5740\u7a7a\u95f4, \u6211\u4eec\u4f7f\u7528\u5199\u65f6\u590d\u5236\u7684\u6280\u672f: \u4e3a\u4e86\u5177\u6709\u548c\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u865a\u62df\u5185\u5b58\u72b6\u6001\uff0c\u5185\u6838\u4f1a\u590d\u5236\u7236\u8fdb\u7a0b\u7684 mm_struct \u4e3a\u4e86\u5177\u6709\u548c\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u865a\u62df\u5185\u5b58\u6bb5\u5206\u914d\uff0c\u5185\u6838\u4f1a\u590d\u5236\u7236\u8fdb\u7a0b\u7684 vm_area_struct (\u533a\u57df\u7ed3\u6784) \u4e3a\u4e86\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u5177\u6709\u76f8\u540c\u7684\u865a\u62df\u5185\u5b58\u5185\u5bb9\uff0c\u5185\u6838\u4f1a\u590d\u5236\u7236\u8fdb\u7a0b\u7684\u9875\u8868\uff0c\u5c31\u80fd\u5c06\u76f8\u540c\u7684\u78c1\u76d8\u5185\u5bb9\u6620\u5c04\u5230\u76f8\u540c\u7684\u865a\u62df\u9875\u4e2d\uff0c\u5e76\u5c06\u865a\u62df\u9875\u7f13\u5b58\u5728\u76f8\u540c\u7684\u7269\u7406\u9875\u4e2d. \u4e3a\u4e86\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u80fd\u76f8\u4e92\u72ec\u7acb\uff0c\u4e24\u4e2a\u8fdb\u7a0b\u7684\u9875\u90fd\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\u7684\uff0c\u4e14\u6bb5\u90fd\u6807\u8bb0\u4e3a\u79c1\u6709\u7684\u5199\u56de\u590d\u5236\u3002\u5f53\u7236\u5b50\u8fdb\u7a0b\u90fd\u6ca1\u6709\u5bf9\u9875\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u7236\u5b50\u8fdb\u7a0b\u662f\u5171\u4eab\u76f8\u540c\u7684\u7269\u7406\u5185\u5b58\u7684\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u8fdb\u7a0b\u5bf9\u9875\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u5c31\u4f1a\u5bf9\u8be5\u9875\u8fdb\u884c\u5199\u56de\u590d\u5236\uff0c\u5e76\u4e3a\u8be5\u9875\u8d4b\u4e88\u5199\u6743\u9650\uff0c\u5e76\u66f4\u65b0\u8fdb\u7a0b\u5bf9\u5e94\u7684\u9875\u8868. execve \u51fd\u6570 \u00b6 \u5f53\u6211\u4eec\u8fd0\u884c execve(\"a.out\", NULL, NULL); \u65f6, \u52a0\u8f7d\u5e76\u5141\u8bb8 a.out \u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4: \u5220\u9664\u5df2\u5b58\u5728\u7684\u7528\u6237\u533a\u57df : \u5220\u9664\u5f53\u524d\u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7684\u7528\u6237\u90e8\u5206\u5df2\u5b58\u5728\u7684\u533a\u57df\u7ed3\u6784, \u5373 vm_area_struct \u548c\u9875\u8868. \u6620\u5c04\u79c1\u6709\u533a\u57df : \u4e3a\u65b0\u7a0b\u5e8f\u7684\u4ee3\u7801, \u6570\u636e, bss \u548c\u6808\u533a\u57df\u521b\u5efa\u65b0\u7684\u533a\u57df\u7ed3\u6784. \u6620\u5c04\u5171\u4eab\u533a\u57df : \u5982\u679c\u4e0e\u5171\u4eab\u5bf9\u8c61\u94fe\u63a5(\u5982\u5171\u4eab\u5e93), \u90a3\u4e48\u5728 vm_area_struct \u4e2d\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u6bb5, \u7136\u540e\u5c06\u5176\u4e0e\u5171\u4eab\u5e93\u7684\u5185\u5bb9\u5173\u8054\u8d77\u6765. \u8bbe\u7f6e\u7a0b\u5e8f\u8ba1\u6570\u5668(PC) : \u4f7f\u5176\u6307\u5411\u4ee3\u7801\u6bb5\u7684\u5165\u53e3\u70b9. Note \u5f53\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u52a0\u8f7d\u4efb\u4f55\u5185\u5bb9\u5230\u5185\u5b58\u4e2d\uff0c\u6240\u505a\u7684\u53ea\u662f\u8bbe\u7f6e\u5185\u5b58\u6620\u5c04\uff0c\u5728\u5185\u6838\u4e2d\u521b\u5efa\u6570\u636e\u7ed3\u6784\uff0c\u7531\u6b64\u521b\u5efa\u4e86\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c\u8fd9\u4e9b\u5bf9\u8c61\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u800c\u5b9e\u9645\u7684\u62f7\u8d1d\u5de5\u4f5c\u4f1a\u7531\u7f3a\u9875\u5f02\u5e38\u6309\u9700\u5b8c\u6210. mmap \u51fd\u6570\u7684\u7528\u6237\u7ea7\u5185\u5b58\u6620\u5c04 \u00b6 Linux \u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528 mmap \u51fd\u6570\u6765\u521b\u5efa\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df. #include <unistd.h> #include <sys/mman.h> void * mmap ( void * start , size_t length , int port , int flags , int fd , off_t offset ); mmap \u51fd\u6570\u8981\u6c42\u5185\u6838\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df, \u6700\u597d\u662f\u4ece\u5730\u5740 start \u5f00\u59cb\u7684\u4e00\u4e2a\u533a\u57df, \u5e76\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26\u53f7 fd \u6307\u5b9a\u7684\u5bf9\u8c61\u7684\u4e00\u4e2a\u8fde\u7eed\u7684\u7247\u6620\u5c04\u5230\u8fd9\u4e2a\u65b0\u7684\u533a\u57df. \u8fde\u7eed\u5bf9\u8c61\u7684\u7247\u7684\u957f\u5ea6\u4e3a length \u5b57\u8282, \u4ece\u8ddd\u6587\u4ef6\u5f00\u59cb\u504f\u79fb\u91cf\u4e3a offset \u5b57\u8282\u7684\u5730\u65b9\u5f00\u59cb. start \u53ef\u8bbe\u4e3a NULL, \u8ba9\u5185\u6838\u81ea\u52a8\u5206\u914d. \u5176\u4e2d\uff0cprot \u5bf9\u5e94\u4e8e\u6bb5\u7ed3\u6784\u4e2d\u7684 vm_prot \u53c2\u6570\uff0c\u7528\u6765\u786e\u5b9a\u8be5\u865a\u62df\u5185\u5b58\u6bb5\u7684\u8bfb\u5199\u6743\u9650\uff1a PROT_EXEC \u8868\u793a\u8be5\u6bb5\u4e2d\u7684\u9875\u662f\u53ef\u6267\u884c\u7684\uff1b PROT_READ \u8868\u793a\u8be5\u6bb5\u4e2d\u7684\u9875\u662f\u53ef\u8bfb\u7684\uff1b PROT_WRITE \u8868\u793a\u8be5\u6bb5\u4e2d\u7684\u9875\u662f\u53ef\u5199\u7684\uff1b PROT_NONE \u8868\u793a\u8be5\u6bb5\u5185\u7684\u9875\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684. flags \u5bf9\u5e94\u4e8e\u6bb5\u7ed3\u6784\u4e2d\u7684 vm_flags : MAP_PRIVATE \u8868\u793a\u8be5\u6bb5\u662f\u79c1\u6709\u7684\u5199\u65f6\u590d\u5236\u7684\uff1b MAP_SHARED \u8868\u793a\u8be5\u6bb5\u662f\u5171\u4eab\u7684\u3002\u4e5f\u53ef\u4ee5\u8bbe\u7f6e MAP_ANON \uff0c\u8868\u793a\u662f\u4e00\u4e2a\u533f\u540d\u5bf9\u8c61. \u5f53\u51fd\u6570\u6267\u884c\u6210\u529f\u65f6\uff0c\u4f1a\u8fd4\u56de\u6307\u5411\u8be5\u6bb5\u7684\u6307\u9488\uff0c\u5982\u679c\u5931\u8d25\uff0c\u5219\u8fd4\u56de MAP_FAILED . munmap \u51fd\u6570\u5220\u9664\u4ece\u865a\u62df\u5730\u5740 start \u5f00\u59cb, \u7531\u63a5\u4e0b\u6765 length \u5b57\u8282\u7ec4\u6210\u7684\u865a\u62df\u5185\u5b58\u533a\u57df #include <unistd.h> #include <sys/mman.h> int munmap ( void * start , size_t length ); \u5185\u5b58\u6620\u5c04\u7684\u597d\u5904 \u4f7f\u5f97\u78c1\u76d8\u6587\u4ef6\u4e2d\u7684\u4e00\u5757\u6570\u636e\u80fd\u4e0e\u865a\u62df\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e2a\u6bb5\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u80fd\u76f4\u63a5\u901a\u8fc7\u5bf9\u8be5\u865a\u62df\u5185\u5b58\u6bb5\u7684\u8bbf\u95ee\u6765\u95f4\u63a5\u8bbf\u95ee\u78c1\u76d8\u6587\u4ef6\u5185\u5bb9\uff0c\u4e0d\u5fc5\u6267\u884c\u6587\u4ef6I/O\u64cd\u4f5c\uff0c\u4e5f\u65e0\u9700\u5bf9\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u7f13\u5b58\u5904\u7406\u3002\u5e76\u4e14\u865a\u62df\u5185\u5b58\u8fdb\u884c\u6309\u9700\u9875\u9762\u8c03\u5ea6\u7684\uff0c\u5f53\u4f60\u8bbf\u95ee\u4e86\u6587\u4ef6\u5185\u5bb9\uff0c\u5b83\u5c31\u4f1a\u5c06\u5bf9\u5e94\u7684\u865a\u62df\u9875\u52a0\u8f7d\u5230\u7269\u7406\u9875\u4e2d\uff0c\u6b64\u65f6\u5c31\u80fd\u4ece\u5185\u5b58\u4e2d\u5f88\u5feb\u5730\u8bbf\u95ee\u6587\u4ef6\u5185\u5bb9\u3002\u5f53\u4f60\u5904\u7406\u5927\u6587\u4ef6\u6216\u9891\u7e41\u8bfb\u5199\u6587\u4ef6\u65f6\u80fd\u63d0\u901f\uff0c\u56e0\u4e3a\u6b64\u65f6\u5c31\u76f4\u63a5\u5c06\u6587\u4ef6\u5185\u5bb9\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\u4e2d\u4e86\uff0c\u4e00\u5207\u8bfb\u5199\u64cd\u4f5c\u90fd\u662f\u5728\u7269\u7406\u5185\u5b58\u4e2d\u8fdb\u884c\u7684\uff0c\u901f\u5ea6\u7279\u522b\u5feb\uff0c\u53ea\u6709\u5728\u5185\u6838\u5c06\u5176\u727a\u7272\u65f6\uff0c\u624d\u4f1a\u8fdb\u884c\u5199\u56de. \u901a\u8fc7\u5185\u5b58\u6620\u5c04\u65b9\u6cd5\uff0c\u6211\u4eec\u8fd8\u80fd\u5b9a\u4e49\u4e00\u4e2a\u8fdb\u7a0b\u5171\u4eab\u7684\u865a\u62df\u5185\u5b58\u6bb5\uff0c\u4f7f\u5f97\u80fd\u8ba9\u591a\u4e2a\u8fdb\u7a0b\u5bf9\u4e00\u4e2a\u533a\u57df\u8fdb\u884c\u8bbf\u95ee\u548c\u4fee\u6539. \u52a8\u6001\u5185\u5b58\u5206\u914d \u00b6 \u867d\u7136\u53ef\u4ee5\u4f7f\u7528 mmap \u548c munmap \u6765\u521b\u5efa\u548c\u5220\u9664\u865a\u62df\u5185\u5b58\u7684\u533a\u57df, \u4f46\u662f C \u7a0b\u5e8f\u5458\u7528 \u52a8\u6001\u5185\u5b58\u5206\u914d\u5668(dynamic memory allocator) \u66f4\u65b9\u4fbf, \u4e5f\u6709\u66f4\u597d\u7684\u79fb\u690d\u6027. \u52a8\u6001\u5185\u5b58\u5206\u914d\u5668 \u7ef4\u62a4\u7740\u4e00\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u533a\u57df, \u79f0\u4e3a \u5806(heap) . \u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u6838\u90fd\u7ef4\u62a4\u4e00\u4e2a\u53d8\u91cf brk, \u5b83\u6307\u5411\u5806\u7684\u9876\u90e8. \u5206\u914d\u5668\u5c06\u5806\u89c6\u4e3a\u4e00\u7ec4\u4e0d\u540c\u5927\u5c0f\u7684\u5757\u7684\u96c6\u5408\u6765\u7ef4\u62a4. \u6bcf\u4e2a\u5757\u5c31\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u7247, \u8981\u4e48\u662f\u5df2\u5206\u914d\u7684, \u8981\u4e48\u662f\u7a7a\u95f2\u7684. \u5206\u914d\u5668\u6709\u4e24\u79cd\u98ce\u683c, \u90fd\u8981\u6c42\u5e94\u7528\u663e\u5f0f\u5730\u5206\u914d\u5757, \u4e0d\u540c\u5728\u4e8e\u7531\u54ea\u4e2a\u5b9e\u4f53\u8d1f\u8d23\u91ca\u653e\u5df2\u5206\u914d\u7684\u5757: \u663e\u5f0f\u5206\u914d\u5668(explicit allocator) : \u8981\u6c42\u5e94\u7528\u663e\u5f0f\u5730\u91ca\u653e\u4efb\u4f55\u5df2\u5206\u914d\u7684\u5757. \u5982 C \u8bed\u8a00\u4e2d\u7684 malloc``free \u51fd\u6570, C++ \u4e2d\u7684 new``delete \u51fd\u6570. \u9690\u5f0f\u5206\u914d\u5668(implicit allocator) : \u8981\u6c42\u5206\u914d\u5668\u68c0\u6d4b\u4e00\u4e2a\u5df2\u5206\u914d\u5757\u4f55\u65f6\u4e0d\u518d\u88ab\u7a0b\u5e8f\u6240\u4f7f\u7528, \u90a3\u4e48\u5c31\u91ca\u653e\u8fd9\u4e2a\u5757. \u9690\u5f0f\u5206\u914d\u5668\u4e5f\u53eb \u5783\u573e\u6536\u96c6\u5668(garbage collector) *, \u81ea\u52a8\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5df2\u5206\u914d\u7684\u5757\u7684\u8fc7\u7a0b\u53eb \u5783\u573e\u6536\u96c6**. \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d \u7ecf\u5e38\u76f4\u5230\u7a0b\u5e8f\u5b9e\u9645\u8fd0\u884c\u65f6, \u624d\u77e5\u9053\u67d0\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u5927\u5c0f. \u663e\u5f0f\u5206\u914d\u5668 \u00b6 malloc \u548c free \u51fd\u6570 \u00b6 \u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 malloc \u51fd\u6570\u6765\u663e\u793a\u5730\u4ece\u5806\u4e2d\u5206\u914d\u5757 #include <stdlib.h> void * malloc ( size_t size ); malloc \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u9488, \u6307\u5411\u5927\u5c0f\u4e3a \u81f3\u5c11 size \u5b57\u8282\u7684\u5185\u5b58\u5757.(\u8fd9\u4e2a\u5757\u53ef\u80fd\u4e3a\u5728\u8fd9\u4e2a\u5757\u5185\u4efb\u4f55\u6570\u636e\u5bf9\u8c61\u7c7b\u578b\u505a\u5bf9\u9f50) \u5b9e\u9645\u4e2d\u5bf9\u9f50\u4e5f\u6765\u7f16\u8bd1\u4ee3\u7801\u5904\u4e8e 32 \u4f4d\u6a21\u5f0f( gcc -m32 )\u8fd8\u662f 64 \u4f4d\u6a21\u5f0f( gcc -m64 ). 32 \u4f4d\u6a21\u5f0f\u4e2d malloc \u8fd4\u56de\u7684\u5757\u7684\u5730\u5740\u603b\u662f 8 \u7684\u500d\u6570, 64 \u4f4d\u6a21\u5f0f\u4e2d\u5730\u5740\u603b\u662f 16 \u7684\u500d\u6570. \u5982\u679c malloc \u9047\u5230\u95ee\u9898, \u5982\u8981\u6c42\u7684\u5185\u5b58\u5757\u6bd4\u53ef\u7528\u7684\u865a\u62df\u5185\u5b58\u8fd8\u8981\u5927, \u90a3\u4e48\u5c31\u8fd4\u56de NULL, \u5e76\u8bbe\u7f6e errn. malloc \u4e0d\u521d\u59cb\u5316\u8fd4\u56de\u7684\u5185\u5b58, calloc \u4f1a\u5c06\u5185\u5b58\u521d\u59cb\u4e3a 0. realloc \u53ef\u4ee5\u7528\u6765\u6539\u53d8\u4e00\u4e2a\u4ee5\u524d\u5df2\u5206\u914d\u5757\u7684\u5927\u5c0f. \u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 free \u51fd\u6570\u6765\u91ca\u653e\u5df2\u5206\u914d\u7684\u5806\u5757 #include <stdlib.h> void free ( void * ptr ); ptr \u53c2\u6570\u5fc5\u987b\u6307\u5411\u4e00\u4e2a\u4ece malloc``calloc``realooc \u83b7\u5f97\u7684\u5df2\u5206\u914d\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e, \u5982\u679c\u4e0d\u662f, \u90a3\u4e48 free \u7684\u884c\u4e3a\u5c31\u662f\u672a\u5b9a\u4e49\u7684, \u800c\u4e14\u56e0\u4e3a\u4ed6\u6ca1\u6709\u8fd4\u56de\u503c, \u5b83\u4e5f\u4e0d\u4f1a\u544a\u8bc9\u5e94\u7528\u51fa\u73b0\u4e86\u9519\u8bef. \u52a8\u6001\u5185\u5b58\u5206\u914d\u5668\u53ef\u4ee5\u4f7f\u7528 mmap \u548c munmap \u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 sbrk \u51fd\u6570\u6765\u5411\u5185\u6838\u7533\u8bf7\u5806\u5185\u5b58\u7a7a\u95f4\uff0c\u53ea\u6709\u5148\u7533\u8bf7\u83b7\u5f97\u5806\u5185\u5b58\u7a7a\u95f4\u540e\uff0c\u624d\u80fd\u5c1d\u8bd5\u5bf9\u5757\u8fdb\u884c\u5206\u914d\u8ba9\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528. #include <unistd.h> void * sbrk ( intptr_t incr ); sbrk \u51fd\u6570\u5c06\u5185\u6838\u7684 brk \u6307\u9488\u589e\u52a0 incr \u6765\u6269\u5c55\u548c\u6536\u7f29\u5806. \u5982\u679c\u6210\u529f\u5c31\u8fd4\u56de brk \u7684\u65e7\u503c, \u5426\u5219\u8fd4\u56de -1 \u5e76\u8bbe\u7f6e errno \u4e3a ENOMEM . \u5982\u679c incr \u4e3a 0 \u90a3\u4e48 sbrk \u5c31\u8fd4\u56de brk \u5f53\u524d\u503c. \u7528\u4e00\u4e2a\u8d1f\u7684 incr \u8c03\u7528 sbrk \u662f\u5408\u6cd5\u7684, \u8fd4\u56de\u503c\u6307\u5411\u65b0\u5806\u9876\u5411\u4e0a abs(incr) \u5b57\u8282\u5904. Example \u672c\u8282\u4e2d\u6211\u4eec\u5047\u8bbe\u5b57\u662f 4 \u5b57\u8282, \u53cc\u5b57\u662f 8 \u5b57\u8282. \u6bcf\u4e2a\u65b9\u5757\u4ee3\u8868\u4e00\u4e2a 4 \u5b57\u8282\u7684\u5b57. \u5176\u4e2d b \u5373\u8fdb\u884c\u4e86\u5bf9\u9f50. \u5206\u914d\u5668\u7684\u8981\u6c42\u548c\u76ee\u6807 \u00b6 \u663e\u793a\u5206\u914d\u5668\u5fc5\u987b\u5728\u4e00\u4e9b\u76f8\u5f53\u4e25\u683c\u7684\u7ea6\u675f\u6761\u4ef6\u4e0b\u5de5\u4f5c: \u5904\u7406\u4efb\u610f\u8bf7\u6c42\u5e8f\u5217 \u4e00\u4e2a\u5e94\u7528\u53ef\u4ee5\u7531\u4efb\u610f\u7684\u5206\u914d\u548c\u91ca\u653e\u8bf7\u6c42\u5e8f\u5217, \u53ea\u8981\u6ee1\u8db3\u5148\u5206\u914d\u540e\u91ca\u653e. \u5206\u914d\u5668\u4e0d\u53ef\u4ee5\u5047\u8bbe\u5206\u914d\u548c\u91ca\u653e\u7684\u987a\u5e8f. \u7acb\u5373\u76f8\u5e94\u8bf7\u6c42 \u5206\u914d\u5668\u5fc5\u987b\u7acb\u5373\u76f8\u5e94\u8bf7\u6c42, \u4e0d\u5141\u8bb8\u5206\u914d\u5668\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\u91cd\u65b0\u6392\u5217\u6216\u8005\u7f13\u51b2\u8bf7\u6c42. \u53ea\u4f7f\u7528\u5806 \u4e3a\u4e86\u4f7f\u5206\u914d\u5668\u53ef\u6269\u5c55, \u4f7f\u7528\u7684\u4efb\u4f55\u975e\u6807\u91cf\u6570\u636e\u7ed3\u6784\u5fc5\u987b\u4fdd\u5b58\u5728\u5806\u91cc. \u5bf9\u9f50\u5757 \u5206\u914d\u5668\u5fc5\u987b\u5bf9\u9f50\u5757, \u4f7f\u5f97\u5b83\u4eec\u53ef\u4ee5\u4fdd\u5b58\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u5bf9\u8c61. \u4e0d\u4fee\u6539\u5df2\u5206\u914d\u7684\u5757 \u5206\u914d\u5668\u53ea\u80fd\u64cd\u4f5c\u6539\u53d8\u7a7a\u95f2\u5757, \u4e00\u65e6\u5757\u88ab\u5206\u914d\u5c31\u4e0d\u5141\u8bb8\u4fee\u6539\u6216\u8005\u79fb\u52a8. \u6211\u4eec\u6709\u4e24\u4e2a\u6027\u80fd\u76ee\u6807: \u6700\u5927\u5316\u541e\u5410\u7387 \u541e\u5410\u7387 \u5b9a\u4e49\u4e3a\u6bcf\u4e2a\u5355\u4f4d\u65f6\u95f4\u91cc\u5b8c\u6210\u7684\u8bf7\u6c42\u6570. \u4e00\u822c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u6ee1\u8db3\u5206\u914d\u548c\u91ca\u653e\u8bf7\u6c42\u7684\u5e73\u5747\u65f6\u95f4\u6700\u5c0f\u5316\u6765\u4f7f\u541e\u5410\u7387\u6700\u5927\u5316. \u5408\u7406\u6027\u80fd\u7684\u5206\u914d\u5668\u6307\u4e00\u4e2a\u5206\u914d\u8bf7\u6c42\u7684\u6700\u7cdf\u8fd0\u884c\u65f6\u95f4\u4e0e\u7a7a\u95f2\u5757\u6570\u91cf\u6210\u7ebf\u6027\u5173\u7cfb, \u800c\u4e00\u4e2a\u91ca\u653e\u8bf7\u6c42\u7684\u8fd0\u884c\u65f6\u95f4\u662f\u5e38\u6570. \u6700\u5927\u5316\u5185\u5b58\u5229\u7528\u7387 \u5047\u8bbe n \u4e2a\u5206\u914d\u548c\u91ca\u653e\u7684\u67d0\u79cd\u5e8f\u5217 \\(R_0, R_1, \\ldots, R_k,\\ldots, R_{n-1}\\) , \u7528 \\(H_k\\) \u8868\u793a\u5f53\u524d\u5806\u7684\u5927\u5c0f. \u6709\u6548\u8f7d\u8377(payload) : \u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u4e00\u4e2a p \u5b57\u8282\u7684\u5757, \u90a3\u4e48\u5f97\u5230\u7684\u5df2\u5206\u914d\u5757\u7684 \u6709\u6548\u8f7d\u8377 \u662f p \u5b57\u8282. \u805a\u7126\u6709\u6548\u8f7d\u8377(aggregate payload) : \u7528 \\(P_k\\) \u8868\u793a, \u4e3a\u5f53\u524d\u5df2\u5206\u914d\u7684\u6709\u6548\u8f7d\u8377\u4e4b\u548c. \u5cf0\u503c\u5229\u7528\u7387(peak utilization) : \u5cf0\u503c\u5229\u7528\u7387 \u662f\u6700\u5e38\u7528\u6765\u8bc4\u5224\u5185\u5b58\u5229\u7528\u7387\u7684\u6807\u51c6. \u5047\u8bbe \\(H_k\\) \u662f\u5355\u8c03\u4e0d\u9012\u51cf\u7684, \u90a3\u4e48\u524d k+1 \u4e2a\u8bf7\u6c42\u7684\u5cf0\u503c\u5229\u7528\u7387 \\(U_k=\\frac{max_{i<=k}P_i}{H_k}\\) . \u5206\u914d\u5668\u7684\u76ee\u6807\u5c31\u662f\u4f7f\u5f97 \\(U_{n-1}\\) \u6700\u5927\u5316. \u6ce8: \u6211\u4eec\u53ef\u4ee5\u653e\u5bbd\u5355\u8c03\u6027\u5047\u8bbe,\u8ba9 \\(H_k\\) \u8868\u793a\u524d k+1 \u4e2a\u8bf7\u6c42\u7684\u5806\u7684\u6700\u9ad8\u5cf0. \u9020\u6210\u5806\u5229\u7528\u7387\u4f4e\u7684\u4e3b\u8981\u539f\u56e0\u4e4b\u4e00\u5c31\u662f \u788e\u7247(fragmentation) . \u5185\u90e8\u788e\u7247 \u4e00\u4e2a\u5df2\u5206\u914d\u5757\u6bd4\u6709\u6548\u8f7d\u8377\u5927, \u6bd4\u5982\u5206\u914d\u5668\u4e3a\u4e86\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42, \u5c31\u4f1a\u7533\u8bf7\u989d\u5916\u7684\u5185\u5b58\u7a7a\u95f4. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5df2\u5206\u914d\u5757\u7684\u5927\u5c0f\u4e0e\u5176\u6709\u6548\u8f7d\u8377\u7684\u5dee\u6765\u91cf\u5316\u5185\u90e8\u788e\u7247\uff0c\u5219\u5185\u90e8\u788e\u7247\u7684\u6570\u91cf\u4e3b\u8981\u53d6\u51b3\u4e8e\u4e4b\u524d\u8bf7\u6c42\u7684\u6a21\u5f0f\u548c\u5206\u914d\u5668\u7684\u5b9e\u73b0\u65b9\u6cd5. \u5916\u90e8\u788e\u7247 \u5f53\u7a7a\u95f2\u5185\u5b58\u5408\u8ba1\u8d77\u6765\u8db3\u591f\u6ee1\u8db3\u4e00\u4e2a\u5206\u914d\u8bf7\u6c42, \u4f46\u662f\u6ca1\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u7a7a\u95f2\u5757\u8db3\u591f\u5927\u53ef\u4ee5\u6765\u5904\u7406\u8fd9\u4e2a\u8bf7\u6c42\u65f6\u53d1\u751f\u7684. \u5982\u56fe \u5916\u90e8\u788e\u7247\u7684\u91cf\u5316\u66f4\u52a0\u56f0\u96be, \u56e0\u4e3a\u5b83\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u4ee5\u524d\u8bf7\u6c42\u7684\u6a21\u5f0f\u548c\u5206\u914d\u5668\u7684\u5904\u7406\u65b9\u5f0f, \u8fd8\u53d6\u51b3\u4e8e\u5c06\u6765\u8bf7\u6c42\u7684\u6a21\u5f0f. \u6240\u4ee5\u5206\u914d\u5668\u901a\u5e38\u91c7\u7528\u542f\u53d1\u5f0f\u7b56\u7565\u6765\u8bd5\u56fe\u7ef4\u6301\u5c11\u91cf\u7684\u5927\u7a7a\u95f2\u5757, \u800c\u4e0d\u662f\u5927\u91cf\u7684\u5c0f\u7a7a\u95f2\u5757. \u4e3a\u4e86\u5e73\u8861\u597d\u541e\u5410\u7387\u548c\u5229\u7528\u7387\u4e4b\u95f4\u7684\u5e73\u8861, \u6211\u4eec\u9700\u8981\u8003\u8651\u51e0\u4e2a\u95ee\u9898: \u7a7a\u95f2\u5757\u7ec4\u7ec7 : \u5982\u4f55\u8bb0\u5f55\u7a7a\u95f2\u5757? \u653e\u7f6e : \u5982\u4f55\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u7a7a\u95f2\u5757\u6765\u653e\u7f6e\u4e00\u4e2a\u65b0\u5206\u914d\u7684\u5757? \u5206\u5272 : \u5728\u5c06\u4e00\u4e2a\u65b0\u5206\u914d\u7684\u5757\u653e\u5230\u67d0\u4e2a\u7a7a\u95f2\u5757\u4e4b\u540e, \u5982\u4f55\u5904\u7406\u7a7a\u95f2\u5757\u4e2d\u7684\u5269\u4f59\u90e8\u5206? \u5408\u5e76 : \u5982\u4f55\u5904\u7406\u4e00\u4e2a\u521a\u521a\u91ca\u653e\u7684\u5757? \u9690\u5f0f\u7a7a\u95f2\u94fe\u8868 \u00b6 \u4e00\u4e2a\u5757\u7531\u4e00\u4e2a\u5b57\u7684\u5934\u90e8, \u6709\u6548\u8f7d\u8377, \u4ee5\u53ca\u53ef\u80fd\u7684\u4e00\u4e9b\u989d\u5916\u7684\u586b\u5145\u7ec4\u6210\u7684. \u5934\u90e8 \u5934\u90e8\u5927\u5c0f\u4e3a\u4e00\u4e2a\u5b57. \u5934\u90e8\u7f16\u7801\u4e86\u8fd9\u4e2a\u5757\u7684\u5927\u5c0f(\u5757\u5927\u5c0f\u5305\u62ec\u5934\u90e8\u548c\u5bf9\u9f50\u586b\u5145), \u4ee5\u53ca\u8fd9\u4e2a\u5757\u662f\u5426\u5206\u914d. \u5982\u679c\u6211\u4eec\u8981\u6ee1\u8db3\u53cc\u5b57\u5bf9\u9f50, \u90a3\u4e48\u5757\u7684\u5927\u5c0f\u603b\u662f 8 \u7684\u500d\u6570, \u56e0\u6b64\u5757\u5927\u5c0f\u7684\u7b2c\u4e09\u4f4d(\u4e8c\u8fdb\u5236)\u603b\u662f 0, \u6211\u4eec\u5c31\u7528\u5176\u4e2d\u7684\u6700\u4f4e\u4f4d\u6765\u8868\u793a\u8fd9\u4e2a\u5757\u7684\u5206\u914d\u60c5\u51b5. \u6709\u6548\u8f7d\u8377 \u5e94\u7528 malloc \u8bf7\u6c42\u7684\u6709\u6548\u8f7d\u8377 \u586b\u5145 \u53ef\u9009\u7684, \u5206\u914d\u5668\u7528\u6765\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42, \u6216\u8005\u5904\u7406\u5916\u90e8\u788e\u7247. \u6211\u4eec\u79f0\u8fd9\u79cd\u7ed3\u6784\u4e3a \u9690\u5f0f\u7a7a\u95f2\u94fe\u8868 , \u56e0\u4e3a\u7a7a\u95f2\u5757\u901a\u8fc7\u5934\u90e8\u7684\u5927\u5c0f\u5b57\u6bb5\u9690\u542b\u5730\u8fde\u63a5. \u5206\u914d\u5668\u53ef\u4ee5\u4fbf\u5229\u5806\u4e2d\u7684\u6240\u6709\u5757, \u4ece\u800c\u95f4\u63a5\u5730\u904d\u5386\u6574\u4e2a\u7a7a\u95f2\u5757\u7684\u96c6\u5408. \u6ce8 : \u6211\u4eec\u9700\u8981\u67d0\u79cd\u7279\u6b8a\u6807\u8bb0\u7684\u7ed3\u675f\u5757, \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f\u4e00\u4e2a\u8bbe\u7f6e\u4e86\u5df2\u5206\u914d\u4f4d\u800c\u5927\u5c0f\u4e3a 0 \u7684 \u7ec8\u6b62\u5934\u90e8(terminating header) . \u7531\u4e8e\u5730\u5740\u5bf9\u9f50\u8981\u6c42\u548c\u5206\u914d\u5668\u5bf9\u5757\u683c\u5f0f\u7684\u9009\u62e9\uff0c\u4f1a\u5bf9\u6700\u5c0f\u5757\u7684\u5927\u5c0f\u6709\u9650\u5236\uff0c \u6ca1\u6709\u5df2\u5206\u914d\u7684\u5757\u548c\u7a7a\u95f2\u5757\u6bd4\u6700\u5c0f\u5757\u8fd8\u5c0f \uff0c\u5982\u679c\u6bd4\u6700\u5c0f\u5757\u8fd8\u5c0f\uff0c\u5c31\u4f1a\u53d8\u6210\u5916\u90e8\u788e\u7247(\u6240\u4ee5\u6700\u5c0f\u5757\u8d8a\u5927\uff0c\u5185\u90e8\u788e\u7247\u7a0b\u5ea6\u8d8a\u9ad8). \u653e\u7f6e\u5df2\u5206\u914d\u7684\u5757 \u00b6 \u5f53\u4e00\u4e2a\u5e94\u7528\u8bf7\u6c42\u4e00\u4e2a k \u5b57\u8282\u7684\u5757\u65f6, \u5206\u914d\u5668\u641c\u7d22\u7a7a\u95f2\u94fe\u8868, \u67e5\u627e\u4e00\u4e2a\u8db3\u591f\u5927\u53ef\u4ee5\u653e\u7f6e\u6240\u8bf7\u6c42\u5757\u7684\u7a7a\u95f2\u5757. \u5206\u914d\u5668\u6267\u884c\u8fd9\u79cd\u641c\u7d22\u7684\u65b9\u5f0f\u662f\u7531 \u653e\u7f6e\u7b56\u7565(placement policy) \u786e\u5b9a\u7684. \u9996\u6b21\u9002\u914d(first fit) : \u4ece\u5934\u5f00\u59cb\u641c\u7d22\u7a7a\u95f2\u94fe\u8868, \u9009\u62e9\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u7a7a\u95f2\u5757. \u4f18\u70b9 : \u5c06\u5927\u7684\u7a7a\u95f2\u5757\u4fdd\u7559\u5728\u540e\u9762 \u7f3a\u70b9 : \u5728\u9760\u8fd1\u94fe\u8868\u8d77\u59cb\u5904\u7559\u4e0b\u5c0f\u7a7a\u95f2\u5757\u7684\"\u788e\u7247\", \u589e\u52a0\u4e86\u5bf9\u8f83\u5927\u5757\u7684\u641c\u7d22\u65f6\u95f4. \u4e0b\u4e00\u6b21\u9002\u914d(next fit) : \u4ece\u4e0a\u4e00\u6b21\u67e5\u8be2\u7ed3\u675f\u7684\u5730\u65b9\u5f00\u59cb\u641c\u7d22, \u9009\u62e9\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u7a7a\u95f2\u5757. \u4f18\u70b9 : \u8fd0\u884c\u6bd4\u9996\u6b21\u9002\u914d\u5757\u4e00\u4e9b, \u53ef\u4ee5\u8df3\u8fc7\u5f00\u5934\u7684\u788e\u7247 \u7f3a\u70b9 : \u5185\u5b58\u5229\u7528\u7387\u6bd4\u9996\u6b21\u9002\u914d\u4f4e\u5f88\u591a \u6700\u4f73\u9002\u914d(best fit) : \u68c0\u67e5\u6bcf\u4e2a\u7a7a\u95f2\u5757, \u9009\u62e9\u9002\u5408\u6240\u9700\u8bf7\u6c42\u5927\u5c0f\u7684\u6700\u5c0f\u7a7a\u95f2\u5757. \u4f18\u70b9 : \u5185\u5b58\u5229\u7528\u7387\u6bd4\u524d\u4e24\u8005\u90fd\u9ad8\u4e00\u4e9b \u7f3a\u70b9 : \u9700\u8981\u904d\u5386\u5b8c\u6574\u7684\u7a7a\u95f2\u94fe\u8868 \u5206\u5272\u5185\u5b58\u5757 \u00b6 \u4e00\u65e6\u5206\u914d\u5668\u627e\u5230\u4e00\u4e2a\u5339\u914d\u7684\u7a7a\u95f2\u5757, \u5b83\u5fc5\u987b\u505a\u53e6\u4e00\u4e2a\u7b56\u7565\u51b3\u5b9a, \u90a3\u5c31\u662f\u5206\u914d\u7a7a\u95f2\u5757\u4e2d\u591a\u5c11\u7a7a\u95f4. \u4e00\u4e2a\u9009\u62e9\u662f\u7528\u6574\u4e2a\u7a7a\u95f2\u5757, \u867d\u7136\u7b80\u5355\u5feb\u6377\u4f46\u4f1a\u4ea7\u751f\u5185\u90e8\u788e\u7247. \u5982\u679c\u653e\u7f6e\u7b56\u7565\u503e\u5411\u4e8e\u4ea7\u751f\u8f83\u597d\u7684\u5339\u914d\u90a3\u4e48\u4e5f\u53ef\u4ee5\u63a5\u6536\u989d\u5916\u7684\u5185\u90e8\u788e\u7247. \u5206\u914d\u5668\u901a\u5e38\u4f1a\u5c06\u8fd9\u4e2a\u7a7a\u95f2\u5757\u5206\u5272\u6210\u4e24\u90e8\u5206, \u7b2c\u4e00\u90e8\u5206\u53d8\u6210\u5206\u914d\u5757, \u800c\u5269\u4e0b\u7684\u53d8\u6210\u4e00\u4e2a\u65b0\u7684\u7a7a\u95f2\u5757. \u83b7\u53d6\u989d\u5916\u7684\u5806\u5185\u5b58 \u00b6 \u5982\u679c\u5206\u914d\u5668\u4e0d\u80fd\u4e3a\u8bf7\u6c42\u627e\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757, \u4e00\u4e2a\u9009\u62e9\u662f\u901a\u8fc7\u5408\u5e76\u90a3\u4e9b\u5728\u5185\u5b58\u4e2d\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2\u5757\u6765\u521b\u5efa\u4e00\u4e9b\u66f4\u5927\u7684\u7a7a\u95f2\u5757. \u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u8c03\u7528 sbrk \u51fd\u6570, \u5411\u5185\u6838\u8bf7\u6c42\u989d\u5916\u7684\u5806\u5185\u5b58. \u5206\u914d\u5668\u5c06\u989d\u5916\u7684\u5185\u5b58\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5927\u7a7a\u95f2\u5757, \u5c06\u8fd9\u4e2a\u5757\u63d2\u5165\u5230\u7a7a\u95f2\u94fe\u8868\u4e2d, \u7136\u540e\u5c06\u88ab\u8bf7\u6c42\u7684\u5757\u653e\u5230\u8fd9\u4e2a\u65b0\u7684\u7a7a\u95f2\u5757\u4e2d. \u5408\u5e76\u7a7a\u95f2\u5757 \u00b6 \u5f53\u5206\u914d\u5668\u91ca\u653e\u4e00\u4e2a\u5df2\u5206\u914d\u5757\u65f6, \u53ef\u80fd\u4f1a\u7531\u5176\u4ed6\u7a7a\u95f2\u5757\u4e0e\u4e2d\u56fd\u65b0\u91ca\u653e\u7684\u7a7a\u95f2\u5757\u76f8\u90bb. \u8fd9\u4e9b\u90bb\u63a5\u7684\u7a7a\u95f2\u5757\u5f15\u8d77\u4e00\u79cd\u73b0\u8c61, \u5373 \u5047\u788e\u7247(fault fragmentation) . \u5206\u914d\u5668\u53ef\u4ee5\u9009\u62e9 \u7acb\u5373\u5408\u5e76 \u6216\u8005 \u63a8\u8fdf\u5408\u5e76 . \u7acb\u5373\u5408\u5e76(immediate coalescing) : \u6bcf\u6b21\u4e00\u4e2a\u5757\u88ab\u91ca\u653e\u65f6, \u5c31\u5408\u5e76\u6240\u6709\u7684\u76f8\u90bb\u5757. \u63a8\u8fdf\u5408\u5e76(deferred coalescing) : \u627e\u4e0d\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757\u65f6, \u518d\u626b\u63cf\u6574\u4e2a\u5806\u8fdb\u884c\u5408\u5e76. \u7acb\u5373\u5408\u5e76\u7b80\u5355\u660e\u4e86, \u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u5185\u5b8c\u6210, \u4f46\u5bf9\u4e8e\u67d0\u4e9b\u8bf7\u6c42\u6a21\u5f0f\u4f1a\u4ea7\u751f\u4e00\u79cd\u5f62\u5f0f\u7684\u6296\u52a8, \u5373\u5757\u53cd\u590d\u5730\u5408\u5e76, \u7136\u540e\u9a6c\u4e0a\u88ab\u5206\u5272. \u5177\u4f53\u5b9e\u73b0\u5408\u5e76\u4e2d: \u5408\u5e76\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5757\u662f\u7b80\u5355\u9ad8\u6548\u7684, \u56e0\u4e3a\u5f53\u524d\u5757\u5934\u90e8\u6307\u5411\u4e0b\u4e00\u4e2a\u5757\u7684\u5934\u90e8. \u53ea\u9700\u8981\u68c0\u67e5\u4e0b\u4e00\u4e2a\u5757\u7684\u5934\u90e8, \u770b\u5b83\u662f\u5426\u7a7a\u95f2\u5373\u53ef. \u5982\u679c\u662f, \u5c06\u5927\u5c0f\u76f8\u52a0\u5373\u53ef. \u4f46\u662f\u5408\u5e76\u524d\u4e00\u4e2a\u5757, \u9700\u8981\u4f7f\u7528 \u8fb9\u754c\u6807\u8bb0(boundray tag) . \u5728\u6bcf\u4e2a\u5757\u7684\u7ed3\u5c3e\u5904\u6dfb\u52a0\u4e00\u4e2a \u811a\u90e8(footer) , \u811a\u90e8\u5c31\u662f\u5934\u90e8\u7684\u4e00\u4e2a\u526f\u672c. \u5982\u679c\u6bcf\u4e2a\u5757\u90fd\u5305\u62ec\u8fd9\u6837\u4e00\u4e2a\u811a\u90e8, \u90a3\u4e48\u5206\u914d\u5668\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u5b83\u7684\u811a\u90e8\u5224\u65ad\u524d\u4e00\u4e2a\u5757\u7684\u4f4d\u7f6e\u548c\u72b6\u6001. \u8fd9\u4e2a\u811a\u90e8\u603b\u662f\u5728\u8ddd\u5f53\u524d\u5757\u5f00\u59cb\u4f4d\u7f6e\u4e00\u4e2a\u5b57\u7684\u8ddd\u79bb. \u53ef\u4ee5\u5c06\u60c5\u51b5\u5206\u4e3a\u4e0b\u9762\u51e0\u79cd: \u524d\u4e00\u5757\u548c\u540e\u4e00\u5757\u90fd\u662f\u5206\u914d\u7684\uff1a\u6b64\u65f6\u4e0d\u4f1a\u53d1\u751f\u5408\u5e76\u64cd\u4f5c. \u524d\u4e00\u5757\u662f\u5df2\u5206\u914d\u7684\uff0c\u540e\u4e00\u5757\u662f\u7a7a\u95f2\u7684\uff1a\u5f53\u524d\u5757\u4f1a\u5c06\u5934\u90e8\u4e2d\u7684\u5757\u5927\u5c0f\u8bbe\u7f6e\u4e3a\u5f53\u524d\u5757\u7684\u5927\u5c0f\u548c\u4e0b\u4e00\u5757\u5927\u5c0f\u4e4b\u548c\uff0c\u5e76\u4e14\u4fee\u6539\u4e0b\u4e00\u5757\u7684\u811a\u90e8. \u524d\u4e00\u5757\u662f\u7a7a\u95f2\u7684\uff0c\u4e0b\u4e00\u5757\u662f\u5df2\u5206\u914d\u7684\uff1a\u524d\u4e00\u5757\u4f1a\u5c06\u5934\u90e8\u4e2d\u7684\u5757\u5927\u5c0f\u8bbe\u7f6e\u4e3a\u81ea\u5df1\u7684\u5757\u5927\u5c0f\u548c\u5f53\u524d\u5757\u5927\u5c0f\u4e4b\u548c\uff0c\u5e76\u4e14\u4fee\u6539\u5f53\u524d\u5757\u7684\u811a\u90e8. \u524d\u4e00\u5757\u548c\u5f53\u524d\u5feb\u90fd\u662f\u7a7a\u95f2\u7684\uff1a\u524d\u4e00\u5757\u4f1a\u5c06\u5934\u90e8\u4e2d\u7684\u5757\u5927\u5c0f\u8bbe\u7f6e\u4e3a\u8fd9\u4e09\u4e2a\u5757\u7684\u5927\u5c0f\u4e4b\u548c\uff0c\u5e76\u4fee\u6539\u4e0b\u4e00\u5757\u7684\u811a\u90e8. \u8be5\u6280\u672f\u7684\u7f3a\u70b9\u662f\u4f1a\u663e\u8457\u589e\u52a0\u5185\u5b58\u5f00\u9500\uff0c\u7531\u4e8e\u5f15\u5165\u4e86\u811a\u90e8\uff0c\u4f7f\u5f97\u6709\u6548\u8f7d\u8377\u5927\u5c0f\u53d8\u5c0f\uff0c\u800c\u4f7f\u5f97\u5185\u90e8\u788e\u7247\u53d8\u591a\u4e86\uff0c\u5e76\u4e14\u6700\u5c0f\u5757\u7684\u5927\u5c0f\u53d8\u5927\u5bfc\u81f4\u5916\u90e8\u788e\u7247\u4e5f\u53d8\u591a\u4e86. \u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\uff0c\u6709\u4e9b\u60c5\u51b5\u662f\u4e0d\u9700\u8981\u8fb9\u754c\u6807\u8bb0\u7684\uff0c\u53ea\u6709\u5728\u5408\u5e76\u65f6\u624d\u9700\u8981\u811a\u90e8\uff0c\u800c\u6211\u4eec\u53ea\u4f1a\u5728\u7a7a\u95f2\u5757\u4e0a\u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u5728\u5df2\u5206\u914d\u7684\u5757\u4e0a\u53ef\u4ee5\u4e0d\u9700\u8981\u811a\u90e8\uff0c\u90a3\u7a7a\u95f2\u5757\u5982\u4f55\u5224\u65ad\u524d\u4e00\u4e2a\u5757\u662f\u5426\u4e3a\u5df2\u5206\u914d\u7684\u5462\uff1f\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u5934\u90e8\u7684 3 \u4e2a\u4f4d\u4e2d\u7528\u4e00\u4e2a\u4f4d\u6765\u6807\u8bb0\u524d\u4e00\u4e2a\u5757\u662f\u5426\u4e3a\u7a7a\u95f2\u7684\uff0c\u5982\u679c\u524d\u4e00\u4e2a\u5757\u4e3a\u5df2\u5206\u914d\u7684\uff0c\u5219\u65e0\u9700\u5173\u5fc3\u524d\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u8fdb\u884c\u5408\u5e76\uff1b\u5982\u679c\u524d\u4e00\u4e2a\u5757\u4e3a\u7a7a\u95f2\u7684\uff0c\u5219\u524d\u4e00\u4e2a\u5757\u81ea\u5df1\u5c31\u6709\u811a\u90e8\uff0c\u8bf4\u660e\u4e86\u524d\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\uff0c\u5219\u53ef\u4ee5\u987a\u5229\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c. \u5373, \u5df2\u5206\u914d\u5757\u53ef\u4ee5\u4e0d\u7528\u811a\u90e8 . \u5b9e\u73b0\u9690\u5f0f\u7a7a\u95f2\u94fe\u8868 \u00b6 \u901a\u7528\u5206\u914d\u5668\u8bbe\u8ba1 \u00b6 mem_init \u51fd\u6570\u5c06\u5bf9\u4e8e\u5806\u6765\u8bf4\u53ef\u7528\u7684\u865a\u62df\u5185\u5b58\u6a21\u578b\u5316\u4e3a\u4e00\u4e2a\u5927\u7684, \u53cc\u5b57\u5bf9\u9f50\u7684\u5b57\u8282\u6570\u7ec4. \u5728 mem_heap \u548c mem_brk \u4e4b\u95f4\u7684\u5b57\u8282\u8868\u793a\u5df2\u5206\u914d\u7684\u865a\u62df\u5185\u5b58(\u4e0d\u5305\u62ec mem_brk ). mem_brk \u4e4b\u540e\u7684\u5b57\u8282\u8868\u793a\u672a\u5206\u914d\u7684\u865a\u62df\u5185\u5b58. mem_sbrk \u79fb\u52a8 mem_brk \u6307\u9488\u6765\u8c03\u6574\u5806\u5185\u5b58. \u6211\u4eec\u8fd8\u5f15\u7528\u4e86\u53e6\u4e00\u4e2a\u6e90\u6587\u4ef6\u4e2d\u7684\u51fd\u6570: extern int mm_init ( void ); extern void * mm_malloc ( size_t size ); extern void mm_free ( void * ptr ); \u5176\u4e2d mm_malloc \u548c mm_free \u51fd\u6570\u4e0e\u5b83\u4eec\u5bf9\u5e94\u7684\u7cfb\u7edf\u51fd\u6570\u6709\u76f8\u540c\u7684\u63a5\u53e3\u548c\u8bed\u4e49. mm_init \u521d\u59cb\u5316\u5206\u914d\u5668, \u6210\u529f\u5c31\u8fd4\u56de 0 \u5426\u5219 -1. \u7b2c\u4e00\u4e2a\u5b57\u662f\u53cc\u5b57\u8fb9\u754c\u5bf9\u9f50\u7684\u4e0d\u4f7f\u7528\u7684\u586b\u5145\u5b57. \u7136\u540e\u662f\u4e00\u4e2a 8 \u5b57\u8282\u7684\u5df2\u5206\u914d\u5757(\u4e5f\u53eb \u5e8f\u8a00\u5757(prologue block) ), \u53ea\u5305\u62ec\u5934\u90e8\u548c\u5c3e\u90e8, \u4e14\u6c38\u4e0d\u91ca\u653e. \u5e8f\u8a00\u5757\u540e\u7d27\u8ddf\u7684\u662f 0 \u6216\u8005\u591a\u4e2a\u8c03\u7528\u521b\u5efa\u7684\u666e\u901a\u5757. \u6700\u540e\u662f\u4ee5\u4e00\u4e2a\u7279\u6b8a\u7684 \u7ed3\u5c3e\u5757(epilogue block) \u7ed3\u675f, \u8fd9\u4e2a\u5757\u5927\u5c0f\u4e3a 0, \u53ea\u7531\u4e00\u4e2a\u5934\u90e8\u7ec4\u6210. \u5e8f\u8a00\u5757\u548c\u7ed3\u5c3e\u5757\u662f\u4e00\u79cd\u6d88\u9664\u5408\u5e76\u65f6\u8fb9\u754c\u6761\u4ef6\u7684\u6280\u5de7. \u4e00\u4e2a heap_listp \u6307\u5411\u5e8f\u8a00\u5757. (\u6216\u8005\u5e8f\u8a00\u5757\u7684\u4e0b\u4e00\u4e2a\u5757) \u64cd\u4f5c\u7a7a\u95f2\u94fe\u8868\u7684\u57fa\u672c\u5e38\u6570\u548c\u5b8f \u00b6 PACK \u5c06\u5927\u5c0f\u548c\u5df2\u5206\u914d\u4f4d\u7ed3\u5408\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c, \u53ef\u5b58\u653e\u5230\u5934\u90e8\u6216\u8005\u5c3e\u90e8. GET \u548c PUT \u8868\u793a\u5728\u5730\u5740 p \u5904\u8bfb\u5199\u4e00\u4e2a\u5b57. \u6ce8\u610f\u8fd9\u91cc\u9700\u8981\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362, \u5426\u5219 void * \u65e0\u6cd5\u95f4\u63a5\u5f15\u7528. GET_SIZE \u548c GET_ALLOC \u8868\u793a\u4ece\u5730\u5740 p \u5904\u83b7\u5f97\u5757\u5927\u5c0f\u548c\u662f\u5426\u5206\u914d. HDRP \u548c FTRP \u662f\u8f93\u5165(bp)\u6307\u5411 \u7b2c\u4e00\u4e2a\u6709\u6548\u8f7d\u8377\u5b57\u8282 \u7684\u5757\u6307\u9488(Block Pointer), \u7528\u6765\u83b7\u5f97\u5757\u5934\u90e8\u548c\u811a\u90e8. NEXT_BLKP \u548c PREV_BLKP \u7528\u6765\u83b7\u5f97\u4e0b\u4e00\u4e2a\u548c\u524d\u4e00\u4e2a\u5757\u7684\u5757\u6307\u9488(bp). \u521b\u5efa\u521d\u59cb\u7a7a\u95f2\u94fe\u8868 \u00b6 \u9996\u5148\uff0c\u6700\u5c0f\u7684\u9690\u5f0f\u7a7a\u95f2\u94fe\u8868\u9700\u8981\u5305\u542b\u4e00\u4e2a\u5b57\u7528\u4e8e\u5bf9\u9f50\uff0c\u4ee5\u53ca\u4e24\u4e2a\u5b57\u7684\u5e8f\u8a00\u5757\u548c\u4e00\u4e2a\u5b57\u7684\u7ed3\u5c3e\u5757\uff0c\u6240\u4ee5\u9996\u5148\u4f7f\u7528 mem_sbrk \u7533\u8bf7 4 \u4e2a\u5b57\u7684\u5806\u5185\u5b58. \u7136\u540e\u6839\u636e\u8981\u6c42\u586b\u5145\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u7136\u540e\u8ba9 heap_listp \u6307\u5411\u5e8f\u8a00\u5757\u811a\u90e8\u7684\u8d77\u59cb\u5730\u5740\u3002\u521d\u59cb\u5b8c\u540e\uff0c\u7531\u4e8e\u662f\u7a7a\u7684\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8c03\u7528 extend_heap \u51fd\u6570\u6765\u7533\u8bf7 CHUNKSIZE \u5b57\u8282. extend_heap \u51fd\u6570\u4f1a\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u88ab\u8c03\u7528: \u5806\u88ab\u521d\u59cb\u5316\u65f6; mm_malloc \u4e0d\u80fd\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684\u5339\u914d\u5757\u65f6. \u4e3a\u4e86\u4fdd\u6301\u5bf9\u9f50\u5c06 size \u5927\u5c0f\u5411\u4e0a\u820d\u5165\u4e3a\u6700\u63a5\u8fd1 2 \u5b57\u7684\u500d\u6570. \u6ce8\u610f\uff1a\u5728\u7b2c 8 \u884c\u7533\u8bf7 size \u4e2a\u5b57\u8282\u540e\uff0cbp \u6307\u5411\u7684\u662f\u7ed3\u5c3e\u5757\u7684\u4e0b\u4e00\u4e2a\u5b57(\u56e0\u4e3a mem_brk \u4e0d\u653e\u5143\u7d20)\uff0c\u6240\u4ee5\u5728\u7b2c 12 \u884c\u8bbe\u7f6e\u7a7a\u95f2\u5757\u5934\u90e8\u65f6\uff0c\u6839\u636e PUT \u5b9a\u4e49\uff0c\u53ef\u77e5\u8fd9\u91cc\u65b0\u7533\u8bf7\u7684\u7a7a\u95f2\u5757\u8986\u76d6\u4e86\u4e4b\u524d\u7684\u7ed3\u5c3e\u5757\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e86\u81ea\u5df1\u7684\u5934\u90e8\u5b57\uff0c\u7136\u540e\u5728\u8bbe\u7f6e\u811a\u90e8\u65f6\uff0c\u7559\u4e0b\u4e86\u4e00\u4e2a\u5b57\u7528\u6765\u4f5c\u4e3a\u65b0\u7684\u7ed3\u5c3e\u5757. \u6700\u540e\u5c1d\u8bd5\u5408\u5e76\u524d\u9762\u7684\u7a7a\u95f2\u5757. \u91ca\u653e\u548c\u5408\u5e76\u5757 \u00b6 \u6211\u4eec\u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0: \u6211\u4eec\u5c06\u5e8f\u8a00\u5757\u548c\u7ed3\u5c3e\u5757\u90fd\u6807\u8bb0\u4e3a\u5df2\u5206\u914d, \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5904\u7406\u8fb9\u754c\u60c5\u51b5. \u5206\u914d\u5757 \u00b6 \u9996\u5148\u5b57\u8282\u6570 size \u4f20\u8fdb\u6765\u540e\uff0c\u4f1a\u73b0\u5728\u7b2c 12 \u884c\u5230 14 \u884c\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42\uff0c\u7136\u540e\u5f97\u5230\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42\u7684\u5b57\u8282\u6570 asize\u3002\u7136\u540e\u5c1d\u8bd5\u5bfb\u627e\u5408\u9002\u7684\u7a7a\u95f2\u5757\u8fdb\u884c\u5206\u914d\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757\uff0c\u5c31\u9700\u8981\u5411\u5185\u6838\u518d\u7533\u8bf7\u5806\u5185\u5b58\u7a7a\u95f4\uff0c\u518d\u5c1d\u8bd5\u5206\u914d. \u663e\u5f0f\u7a7a\u95f2\u94fe\u8868 \u00b6 \u5806\u53ef\u4ee5\u7ec4\u7ec7\u6210\u4e00\u4e2a\u53cc\u5411\u7a7a\u95f2\u94fe\u8868, \u6bcf\u4e2a\u7a7a\u95f2\u5757\u91cc\u90fd\u5305\u542b\u4e00\u4e2a pred(\u524d\u9a71) \u548c succ(\u540e\u7ee7)\u6307\u9488. \u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u9996\u6b21\u9002\u914d\u7684\u5206\u914d\u65f6\u95f4\u4ece\u5757\u603b\u6570\u7684\u7ebf\u6027\u65f6\u95f4\u51cf\u5c11\u5230\u7a7a\u95f2\u5757\u6570\u91cf\u7684\u7ebf\u6027\u65f6\u95f4, \u4e0d\u8fc7\u91ca\u653e\u4e00\u4e2a\u5757\u7684\u65f6\u95f4\u662f\u53d6\u51b3\u4e8e\u6392\u5e8f\u7b56\u7565: \u540e\u8fdb\u5148\u51fa(LIFO) : \u5c06\u65b0\u91ca\u653e\u7684\u5757\u653e\u5728\u94fe\u8868\u5f00\u59cb\u5904. \u8fd9\u6837\u91ca\u653e\u4e00\u4e2a\u5757\u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u5b8c\u6210, \u5982\u679c\u4f7f\u7528\u8fb9\u754c\u6807\u8bb0\u90a3\u4e48\u5408\u5e76\u4e5f\u662f\u5e38\u6570\u65f6\u95f4. \u5f53\u6211\u4eec\u4f7f\u7528\u9996\u6b21\u9002\u914d\u7684\u653e\u7f6e\u7b56\u7565\u65f6, \u5206\u914d\u5668\u4f1a\u6700\u5148\u68c0\u67e5\u4f7f\u7528\u8fc7\u7684\u5757. \u5730\u5740\u987a\u5e8f : \u94fe\u8868\u6bcf\u4e2a\u5757\u7684\u5730\u5740\u90fd\u5c0f\u4e8e\u540e\u7ee7\u7684\u5730\u5740. \u8fd9\u79cd\u60c5\u51b5\u4e0b\u91ca\u653e\u4e00\u4e2a\u5757\u9700\u8981\u7ebf\u6027\u65f6\u95f4\u6765\u641c\u7d22\u5b9a\u4f4d\u5408\u9002\u7684\u524d\u9a71, \u4f46\u53ef\u4ee5\u6709\u66f4\u9ad8\u7684\u5185\u5b58\u5229\u7528\u7387. \u5206\u79bb\u7684\u7a7a\u95f2\u94fe\u8868 \u00b6 \u5206\u79bb\u5b58\u50a8(segregated storage) \u7ef4\u62a4\u591a\u4e2a\u7a7a\u95f2\u94fe\u8868, \u5176\u4e2d\u6bcf\u4e2a\u94fe\u8868\u4e2d\u7684\u5757\u6709\u5927\u81f4\u76f8\u7b49\u7684\u5927\u5c0f. \u4e00\u822c\u601d\u8def\u662f\u5c06\u6240\u6709\u53ef\u80fd\u7684\u5757\u5927\u5c0f\u5212\u5206\u4e3a\u7b49\u4ef7\u7c7b, \u4e5f\u53eb \u5927\u5c0f\u7c7b(size class) , \u6bd4\u5982\u53ef\u4ee5\u6839\u636e 2 \u7684\u5e42\u6b21\u6765\u5212\u5206\u5757\u5927\u5c0f. \\(\\{1\\}, \\{2\\}, \\{3,4\\}, \\ldots, \\{5,6,7, 8\\}\\) \u5206\u914d\u5668\u7ef4\u62a4\u4e00\u4e2a\u7a7a\u95f2\u94fe\u8868\u6570\u7ec4, \u6bcf\u4e2a\u5927\u5c0f\u7c7b\u4e00\u4e2a\u7a7a\u95f2\u94fe\u8868, \u6309\u7167\u5927\u5c0f\u5347\u5e8f\u6392\u5217. \u5f53\u5206\u914d\u5668\u9700\u8981\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u5757\u65f6, \u5c31\u641c\u7d22\u76f8\u5e94\u7684\u7a7a\u95f2\u94fe\u8868. \u5982\u679c\u4e0d\u80fd\u627e\u5230\u5408\u9002\u7684\u5757\u5bf9\u5e94\u5c31\u641c\u7d22\u4e0b\u4e00\u4e2a\u94fe\u8868. \u7b80\u5355\u5206\u79bb\u5b58\u50a8 \u00b6 \u6bcf\u4e2a\u5927\u5c0f\u7c7b\u7684\u7a7a\u95f2\u94fe\u8868\u5305\u542b\u5927\u5c0f\u76f8\u7b49\u7684\u5757, \u6bcf\u4e2a\u5757\u7684\u5927\u5c0f\u5c31\u662f\u8fd9\u4e2a\u5927\u5c0f\u7c7b\u4e2d\u6700\u5927\u5143\u7d20\u7684\u5927\u5c0f. \u4e3a\u4e86\u5206\u914d\u4e00\u4e2a\u7ed9\u5b9a\u5927\u5c0f\u7684\u5757, \u6211\u4eec\u4f1a\u68c0\u67e5\u76f8\u5e94\u7684\u7a7a\u95f2\u94fe\u8868. \u5982\u679c\u94fe\u8868\u975e\u7a7a, \u6211\u4eec\u7b80\u5355\u5730\u5206\u914d\u5176\u4e2d\u7b2c\u4e00\u5757\u7684\u5168\u90e8. \u7a7a\u95f2\u5757\u662f\u4e0d\u4f1a\u5206\u5272\u4ee5\u6ee1\u8db3\u5206\u914d\u8bf7\u6c42\u7684. \u5982\u679c\u94fe\u8868\u4e3a\u7a7a, \u5206\u914d\u5668\u5c31\u5411\u64cd\u4f5c\u7cfb\u7edf\u8bf7\u6c42\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u989d\u5916\u5185\u5b58\u7247(\u901a\u5e38\u662f\u9875\u5927\u5c0f\u7684\u6574\u6570\u500d), \u5c06\u8fd9\u4e2a\u7247\u5206\u6210\u5927\u5c0f\u76f8\u7b49\u7684\u5757, \u5e76\u5c06\u8fd9\u4e9b\u5757\u8fde\u63a5\u8d77\u6765\u5f62\u6210\u65b0\u7684\u7a7a\u95f2\u94fe\u8868. \u8981\u91ca\u653e\u4e00\u4e2a\u5757, \u5206\u914d\u5668\u53ea\u8981\u7b80\u5355\u5730\u5c06\u8fd9\u4e2a\u5757\u63d2\u5165\u5230\u76f8\u5e94\u7684\u7a7a\u95f2\u94fe\u8868\u7684\u524d\u90e8. \u4f18\u70b9 : \u5206\u914d\u548c\u91ca\u653e\u5757\u90fd\u662f\u5e38\u6570\u65f6\u95f4\uff0c\u4e0d\u5206\u5272\uff0c\u4e0d\u5408\u5e76\uff0c\u5df2\u5206\u914d\u5757\u4e0d\u9700\u8981\u5934\u90e8\u548c\u811a\u90e8\uff0c\u7a7a\u95f2\u94fe\u8868\u53ea\u9700\u662f\u5355\u5411\u7684\uff0c\u56e0\u6b64\u6700\u5c0f\u5757\u4e3a\u5355\u5b57\u5927\u5c0f. \u7f3a\u70b9 : \u7531\u4e8e\u4f7f\u7528\u5206\u5272\u548c\u5408\u5e76\uff0c\u6240\u4ee5\u4f1a\u6709\u5927\u91cf\u7684\u5185\u90e8\u548c\u5916\u90e8\u788e\u7247. \u5206\u79bb\u9002\u914d \u00b6 \u5206\u914d\u5668\u7ef4\u62a4\u4e00\u4e2a\u7a7a\u95f2\u94fe\u8868\u7684\u6570\u7ec4, \u6bcf\u4e2a\u7a7a\u95f2\u94fe\u8868\u662f\u548c\u4e00\u4e2a\u5927\u5c0f\u7c7b\u76f8\u5173\u8054\u7684, \u5e76\u88ab\u7ec4\u7ec7\u6210\u67d0\u79cd\u7c7b\u578b\u7684\u663e\u5f0f\u6216\u9690\u5f0f\u94fe\u8868. \u5206\u914d\u5757\u65f6\uff0c\u786e\u5b9a\u8bf7\u6c42\u7684\u5927\u5c0f\u7c7b\uff0c\u5bf9\u9002\u5f53\u7684\u7a7a\u95f2\u94fe\u8868\u505a\u9996\u6b21\u9002\u914d\uff0c\u5982\u679c\u627e\u5230\u5408\u9002\u7684\u5757\uff0c\u53ef\u4ee5\u5206\u5272\u5b83\uff0c\u5c06\u5269\u4f59\u7684\u90e8\u5206\u63d2\u5165\u9002\u5f53\u7684\u7a7a\u95f2\u94fe\u8868\u4e2d\uff1b\u5982\u679c\u6ca1\u627e\u5230\u5408\u9002\u7684\u5757\uff0c\u67e5\u627e\u66f4\u5927\u7684\u5927\u5c0f\u7c7b\u7684\u7a7a\u95f2\u94fe\u8868\u3002\u5982\u679c\u6ca1\u6709\u5408\u9002\u7684\u5757\uff0c\u5c31\u5411\u5185\u6838\u8bf7\u6c42\u989d\u5916\u7684\u5806\u5185\u5b58\uff0c\u4ece\u8fd9\u5806\u5185\u5b58\u4e2d\u5206\u5272\u51fa\u5408\u9002\u7684\u5757\uff0c\u7136\u540e\u5c06\u5269\u4f59\u90e8\u5206\u653e\u5230\u5408\u9002\u7684\u5927\u5c0f\u7c7b\u4e2d\u3002\u6bcf\u91ca\u653e\u4e00\u4e2a\u5757\u65f6\uff0c\u5c31\u8fdb\u884c\u5408\u5e76\uff0c\u5e76\u5c06\u5176\u653e\u5230\u5408\u9002\u7684\u5927\u5c0f\u7c7b\u4e2d. \u5982 GNU malloc \u5305\u5c31\u662f\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5. \u8fd9\u79cd\u65b9\u6cd5\u65e2\u5feb\u3001\u5229\u7528\u7387\u4e5f\u9ad8. \u4f19\u4f34\u7cfb\u7edf \u00b6 \u4f19\u4f34\u7cfb\u7edf(buddy system) \u662f\u5206\u79bb\u9002\u914d\u7684\u4e00\u79cd\u7279\u4f8b, \u5176\u4e2d\u6bcf\u4e2a\u5927\u5c0f\u7c7b\u90fd\u662f 2 \u7684\u5e42. \u57fa\u672c\u601d\u60f3\u662f\u5047\u8bbe\u5806\u7684\u5927\u5c0f\u662f \\(2^m\\) \u4e2a\u5b57, \u6211\u4eec\u4e3a\u6bcf\u4e2a\u5757\u5927\u5c0f \\(2^k\\) \u7ef4\u62a4\u4e00\u4e2a\u5206\u79bb\u7a7a\u95f2\u94fe\u8868. \u8bf7\u6c42\u5757\u5927\u5c0f\u5411\u4e0a\u820d\u5165\u5230\u6700\u63a5\u8fd1 2 \u7684\u5e42. \u4e3a\u4e86\u5206\u914d\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(2^k\\) \u7684\u5757, \u6211\u4eec\u627e\u5230\u7b2c\u4e00\u4e2a\u53ef\u7528\u7684 \\(2^j, k<=j<=m\\) \u7684\u5757. \u5982\u679c \\(j=k\\) \u90a3\u4e48\u5206\u914d\u5b8c\u6210, \u5426\u5219\u6211\u4eec\u9012\u5f52\u5730\u4e8c\u5206\u8fd9\u4e2a\u5757\u76f4\u5230 \\(j=k\\) . \u5f53\u6211\u4eec\u8fdb\u884c\u8fd9\u6837\u7684\u5206\u5272\u65f6, \u6bcf\u4e2a\u5269\u4e0b\u7684\u534a\u5757(\u4e5f\u53eb \u4f19\u4f34 )\u88ab\u653e\u7f6e\u5728\u76f8\u5e94\u7684\u7a7a\u95f2\u94fe\u8868\u4e2d. \u4e00\u4e2a\u5173\u952e\u4e8b\u5b9e\u662f, \u7ed9\u5b9a\u5730\u5740\u548c\u5757\u7684\u5927\u5c0f, \u5f88\u5bb9\u6613\u8ba1\u7b97\u51fa\u4ed6\u4f19\u4f34\u7684\u5730\u5740. \u5982 \\(xxx\\ldots x00000\\) \u548c \\(xxx\\ldots x10000\\) \u4e92\u4e3a\u4f19\u4f34. \u4e00\u4e2a\u5757\u7684\u5730\u5740\u548c\u5b83\u7684\u4f19\u4f34\u7684\u5730\u5740\u53ea\u6709\u4e00\u4f4d\u4e0d\u76f8\u540c . \u5783\u573e\u6536\u96c6 \u00b6 \u5783\u573e\u6536\u96c6\u5668(garbage collector) \u662f\u4e00\u79cd\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668, \u81ea\u52a8\u91ca\u653e\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u7684\u5df2\u5206\u914d\u5757, \u8fd9\u4e9b\u5757\u79f0\u4e3a \u5783\u573e . \u5783\u573e\u5904\u7406\u5668\u5c06\u5185\u5b58\u770b\u4f5c\u4e00\u5f20 \u6709\u5411\u53ef\u8fbe\u56fe(reachability graph) . \u6bcf\u4e2a \u5806\u8282\u70b9 \u5bf9\u5e94\u5806\u4e2d\u7684\u4e00\u4e2a\u5df2\u5206\u914d\u5757. \u6709\u5411\u8fb9 \\(p\\rightarrow q\\) \u610f\u5473\u7740\u5757 p \u4e2d\u67d0\u4e2a\u4f4d\u7f6e\u6307\u5411\u5757 q \u4e2d\u67d0\u4e2a\u4f4d\u7f6e. \u6839\u8282\u70b9 \u5bf9\u5e94\u4e00\u79cd\u4e0d\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e, \u5305\u542b\u6307\u5411\u5806\u4e2d\u7684\u6307\u9488. \u5982\u5bc4\u5b58\u5668\u7684\u53d8\u91cf, \u865a\u62df\u5185\u5b58\u4e2d\u8bfb\u5199\u533a\u57df\u7684\u5168\u5c40\u53d8\u91cf\u7b49. \u5f53\u5b58\u5728\u4e00\u6761\u4ece\u4efb\u610f\u6839\u8282\u70b9\u51fa\u53d1\u5230\u8fbe p \u7684\u6709\u5411\u8def\u5f84\u65f6, \u6211\u4eec\u8bf4 p \u662f \u53ef\u8fbe\u7684 . \u4e0d\u53ef\u8fbe\u8282\u70b9\u5bf9\u5e94\u4e8e\u5783\u573e, \u4e0d\u80fd\u88ab\u518d\u6b21\u5e94\u7528\u548c\u4f7f\u7528. \u5783\u573e\u5904\u7406\u5668\u5c31\u662f\u7ef4\u62a4\u53ef\u8fbe\u56fe\u7684\u67d0\u79cd\u8868\u793a, \u5e76\u901a\u8fc7\u91ca\u653e\u4e0d\u53ef\u8fbe\u8282\u70b9\u5e76\u628a\u5b83\u4eec\u8fd4\u56de\u7ed9\u7a7a\u95f2\u94fe\u8868\u6765\u5b9a\u671f\u56de\u6536\u5b83\u4eec. \u5bf9\u4e8e\u50cf ML \u548c Java \u8bed\u8a00\uff0c\u5176\u5bf9\u6307\u9488\u521b\u5efa\u548c\u4f7f\u7528\u6709\u4e25\u683c\u7684\u8981\u6c42\uff0c\u7531\u6b64\u6765\u6784\u5efa\u5341\u5206\u7cbe\u786e\u7684\u53ef\u8fbe\u56fe\uff0c\u6240\u4ee5\u80fd\u56de\u6536\u6240\u6709\u5783\u573e. \u800c\u5bf9\u4e8e\u50cf C \u548c C++ \u8fd9\u6837\u7684\u8bed\u8a00\uff0c\u5783\u573e\u6536\u96c6\u5668\u65e0\u6cd5\u7ef4\u62a4\u5341\u5206\u7cbe\u786e\u7684\u53ef\u8fbe\u56fe\uff0c\u53ea\u80fd\u6b63\u786e\u5730\u6807\u8bb0\u6240\u6709\u53ef\u8fbe\u8282\u70b9\uff0c\u800c\u6709\u4e00\u4e9b\u4e0d\u53ef\u8fbe\u8282\u70b9\u4f1a\u88ab\u9519\u8bef\u5730\u6807\u8bb0\u4e3a\u53ef\u8fbe\u7684\uff0c\u6240\u4ee5\u4f1a\u9057\u7559\u90e8\u5206\u5783\u573e\uff0c\u8fd9\u79cd\u5783\u573e\u6536\u96c6\u5668\u79f0\u4e3a \u4fdd\u5b88\u7684\u5783\u573e\u6536\u96c6\u5668(Conservative Garbage Collector) . \u5728C\u4e2d\u4f7f\u7528\u5783\u573e\u6536\u96c6\u5668 \u5c06\u5176\u96c6\u6210\u5230 malloc \u51fd\u6570\u4e2d. \u5f53\u5f15\u7528\u8c03\u7528 malloc \u51fd\u6570\u6765\u5206\u914d\u5757\u65f6\uff0c\u5982\u679c\u65e0\u6cd5\u627e\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757\uff0c\u5c31\u4f1a\u8c03\u7528\u5783\u573e\u6536\u96c6\u5668\u6765\u8bc6\u522b\u51fa\u6240\u6709\u5783\u573e\uff0c\u5e76\u8c03\u7528 free \u51fd\u6570\u6765\u8fdb\u884c\u91ca\u653e\u3002 Mark & Sweep \u5783\u573e\u6536\u96c6\u5668 \u00b6 Mark&Sweep\u5783\u573e\u6536\u96c6\u5668 \u7531\u4e24\u4e2a\u9636\u6bb5\u7ec4\u6210: \u6807\u8bb0\u9636\u6bb5 : \u6807\u8bb0\u51fa\u6839\u8282\u70b9\u7684\u6240\u6709\u5df2\u8fbe\u548c\u5df2\u5206\u914d\u7684\u540e\u7ee7 \u6e05\u7406\u9636\u6bb5 : \u91ca\u653e\u6bcf\u4e2a\u672a\u88ab\u6807\u8bb0\u7684\u5df2\u5206\u914d\u5757. \u5757\u5934\u90e8\u4e2d\u7a7a\u95f2\u7684\u4f4e\u4f4d\u4e2d\u7684\u4e00\u4f4d\u8868\u793a\u8fd9\u4e2a\u5757\u662f\u5426\u88ab\u6807\u8bb0\u4e86. \u6211\u4eec\u5c06\u4f7f\u7528\u4e0b\u9762\u51fd\u6570: ptr isPtr(ptr p) : \u5982\u679c p \u6307\u5411\u4e00\u4e2a\u5df2\u5206\u914d\u5757\u4e2d\u7684\u67d0\u4e2a\u5b57, \u90a3\u4e48\u5c31\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\u7684\u6307\u9488 p, \u5426\u5219\u8fd4\u56de NULL. int blockMarked(ptr b) : \u5982\u679c\u5757 b \u5df2\u6807\u8bb0, \u8fd4\u56de true. blockAllocated(ptr b) : \u5982\u679c\u5757 b \u5df2\u5206\u914d, \u8fd4\u56de true. void markBlock(ptr b) : \u6807\u8bb0\u5757 b int length(ptr b) : \u8fd4\u56de\u5757 b \u4ee5\u5b57\u4e3a\u5355\u4f4d\u7684\u957f\u5ea6(\u4e0d\u542b\u5934\u90e8) void unmarkBlock(ptr b) : \u5c06\u5757 b \u7684\u72b6\u6001\u7531\u5df2\u6807\u8bb0\u6539\u4e3a\u672a\u6807\u8bb0 ptr nextBlock(ptr b) : \u8fd4\u56de\u5806\u4e2d\u5757 b \u7684\u540e\u7ee7 C \u7a0b\u5e8f\u4fdd\u5b88\u7684 Mark & Sweep \u00b6 C \u7a0b\u5e8f\u60f3\u8981\u4f7f\u7528 Mark&Sweep \u5783\u573e\u6536\u96c6\u5668\uff0c\u5728\u5b9e\u73b0 isPtr \u51fd\u6570\u65f6\u5177\u6709\u4e24\u4e2a\u56f0\u96be\uff1a \u8fdb\u5165 isPtr \u51fd\u6570\u65f6\uff0c\u9996\u5148\u9700\u8981\u5224\u65ad\u8f93\u5165\u7684p\u662f\u5426\u4e3a\u6307\u9488\uff0c\u53ea\u6709 p \u4e3a\u6307\u9488\uff0c\u624d\u5224\u65ad p \u662f\u5426\u6307\u5411\u67d0\u4e2a\u5df2\u5206\u914d\u5757\u7684\u6709\u6548\u8f7d\u8377. \u4f46\u662f\u5728 C \u8bed\u8a00\u4e0d\u4f1a\u7528\u7c7b\u578b\u4fe1\u606f\u6765\u6807\u8bb0\u5185\u5b58\u4f4d\u7f6e\uff0c\u6bd4\u5982 int \u6216 float \u8fd9\u4e9b\u6807\u91cf\u5c31\u53ef\u80fd\u88ab\u4f2a\u88c5\u6210\u6307\u9488\uff0c\u6bd4\u5982 p \u5bf9\u5e94\u7684\u662f\u4e00\u4e2a int \u7c7b\u578b\u6570\u636e\uff0c\u4f46\u662f C \u8bef\u4ee5\u4e3a\u662f\u6307\u9488\uff0c\u800c\u5c06\u8be5\u6570\u636e\u4f5c\u4e3a\u6307\u9488\u53c8\u6b63\u597d\u6307\u5411\u67d0\u4e2a\u4e0d\u53ef\u8fbe\u7684\u5df2\u5206\u914d\u5757\u4e2d\uff0c\u5219\u5206\u914d\u5668\u4f1a\u8bef\u4ee5\u4e3a\u8be5\u5206\u914d\u5757\u65f6\u53ef\u8fbe\u7684\uff0c\u9020\u6210\u65e0\u6cd5\u5bf9\u8be5\u5783\u573e\u8fdb\u884c\u56de\u6536. \u8fd9\u4e5f\u662f C \u7a0b\u5e8f\u7684 Mark&Sweep \u5783\u573e\u6536\u96c6\u5668\u5fc5\u987b\u662f\u4fdd\u5b88\u7684\u539f\u56e0. \u5f53\u5224\u65ad p \u4e3a\u6307\u9488\u65f6\uff0c\u5982\u4f55\u786e\u5b9a\u5b83\u6240\u5728\u5757\u7684\u5934\u90e8. \u8fd9\u91cc\u53ef\u4ee5\u5c06\u5df2\u5206\u914d\u7684\u5757\u7ec4\u7ec7\u6210\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5f62\u5f0f\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u4fdd\u8bc1\u5de6\u5b50\u6811\u6240\u6709\u7684\u5757\u90fd\u5728\u8f83\u5c0f\u7684\u5730\u5740\u5904\uff0c\u53f3\u5b50\u6811\u6240\u6709\u7684\u5757\u90fd\u5728\u8f83\u5927\u7684\u5730\u5740\u5904. \u6b64\u65f6\u8f93\u5165\u4e00\u4e2a\u6307\u9488 p\uff0c\u4ece\u8be5\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u6839\u636e\u5757\u5934\u90e8\u7684\u5757\u5927\u5c0f\u5b57\u6bb5\u6765\u5224\u65ad\u6307\u9488\u662f\u5426\u6307\u5411\u8be5\u5757\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u6839\u636e\u5730\u5740\u5927\u5c0f\u53ef\u8df3\u8f6c\u5230\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u8fdb\u884c\u67e5\u627e. C \u7a0b\u5e8f\u4e2d\u5e38\u89c1\u4e0e\u5185\u5b58\u6709\u5173\u7684\u9519\u8bef \u00b6 \u95f4\u63a5\u5f15\u7528\u574f\u6307\u9488 \u00b6 \u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u6838\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a vm_area_struct \u6570\u636e\u7ed3\u6784\uff0c\u6765\u5c06\u865a\u62df\u5185\u5b58\u5212\u5206\u6210\u4e0d\u540c\u7684\u6bb5\uff0c\u8fd9\u4e5f\u9020\u6210\u865a\u62df\u5185\u5b58\u53ef\u80fd\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5bf9\u4e0d\u5904\u4e8e\u4efb\u4f55\u6bb5\u7684\u865a\u62df\u5185\u5b58\u8fdb\u884c\u5f15\u7528\u65f6\uff0c\u5185\u6838\u5c31\u4f1a\u53d1\u51fa\u6bb5\u5f02\u5e38\u7ec8\u6b62\u7a0b\u5e8f. \u5176\u6b21\uff0c\u4e0d\u540c\u6bb5\u9650\u5236\u4e86\u4e0d\u540c\u9875\u7684\u8bfb\u5199\u6743\u9650\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5bf9\u53ea\u8bfb\u865a\u62df\u9875\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u5185\u6838\u5c31\u4f1a\u53d1\u51fa\u4fdd\u62a4\u5f02\u5e38\u7ec8\u6b62\u7a0b\u5e8f. \u5982 scanf(\"%d, val\"); \u5982\u679c val \u5bf9\u5e94\u865a\u62df\u5185\u5b58\u67d0\u4e2a\u5408\u6cd5\u7684\u8bfb\u5199\u533a\u57df, \u6211\u4eec\u5c31\u8986\u76d6\u4e86\u8fd9\u5757\u5185\u5b58. \u8bfb\u672a\u521d\u59cb\u5316\u7684\u5185\u5b58 \u00b6 \u6211\u4eec\u5b9a\u4e49\u7684\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u5904\u4e8e .bss \u6bb5\u4e2d\uff0c\u8be5\u6bb5\u4f1a\u4e0e\u533f\u540d\u6587\u4ef6\u8fdb\u884c\u5173\u8054\uff0c\u4f7f\u5f97\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u90fd\u4e3a 0\u3002\u4f46\u662f\u4f7f\u7528 malloc \u5206\u914d\u5806\u5185\u5b58\u65f6\uff0c\u53ea\u662f\u7b80\u5355\u7684\u4fee\u6539\u4e86 brk \u6307\u9488\uff0c\u5e76\u4e0d\u4f1a\u5bf9\u5df2\u5206\u914d\u7684\u5757\u8fdb\u884c\u4efb\u4f55\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u8981\u5bf9\u52a8\u6001\u5185\u5b58\u5206\u914d\u5f97\u5230\u7684\u5806\u5185\u5b58\u8fdb\u884c\u521d\u59cb\u5316.( calloc \u51fd\u6570\u4f1a\u8fdb\u884c\u521d\u59cb\u5316) \u5141\u8bb8\u6808\u7f13\u51b2\u533a\u6ea2\u51fa \u00b6 \u4e0d\u68c0\u67e5\u8f93\u5165\u4e32\u7684\u5927\u5c0f\u5c31\u5199\u5165\u6808\u4e2d\u7684\u76ee\u6807\u7f13\u51b2\u533a, \u5c31\u4f1a\u7531 \u7f13\u51b2\u533a\u6ea2\u51fa\u9519\u8bef(buffer overflow bug) . \u5982 void bufferoverflow () { char buf [ 64 ]; gets ( buf ); return ; } \u6211\u4eec\u5e94\u8be5\u4f7f\u7528 fgets \u51fd\u6570, \u9650\u5236\u8f93\u5165\u4e32\u7684\u5927\u5c0f. \u5047\u8bbe\u6307\u9488\u548c\u4ed6\u4eec\u6307\u5411\u7684\u5bf9\u8c61\u662f\u76f8\u540c\u5927\u5c0f \u00b6 int ** makeArray1 ( int n , int m ) { int i ; int ** A = ( int * ) malloc ( n * sizeof ( int )); for ( i = 0 ; i < n ; i ++ ) A [ i ] = ( int * ) malloc ( m * sizeof ( int )); return A ; } \u7b2c\u56db\u884c\u5e94\u8be5\u662f sizeof(int *) \u800c\u4e0d\u662f sizeof(int) . \u9519\u4f4d\u9519\u8bef \u00b6 int ** makeArray1 ( int n , int m ) { int i ; int ** A = ( int * ) malloc ( n * sizeof ( int * )); for ( i = 0 ; i <= n ; i ++ ) A [ i ] = ( int * ) malloc ( m * sizeof ( int )); return A ; } \u7b2c\u4e94\u884c\u591a\u521d\u59cb\u5316\u4e86\u4e00\u5143\u7d20. (0~n \u662f n+1 \u4e2a\u5143\u7d20, \u800c\u4e0d\u662f n \u4e2a) \u5f15\u7528\u6307\u9488\u800c\u4e0d\u662f\u5b83\u6307\u5411\u7684\u5bf9\u8c61 \u00b6 int * binheapDelete ( int ** binheap , int * size ) { int * packet = binheap [ 0 ]; binheap [ 0 ] = binheap [ * size - 1 ]; * size -- ; heapify ( binheap , * size , 0 ); return ( packet ); } \u7b2c\u516d\u884c, \u4e00\u5143\u8fd0\u7b97\u7b26 -- \u548c * \u4f18\u5148\u7ea7\u76f8\u540c, \u4ece\u53f3\u5f80\u5de6\u7ed3\u5408. \u56e0\u6b64\u7b2c\u516d\u884c\u5b9e\u9645\u51cf\u5c11\u7684\u662f\u6307\u9488\u7684\u503c, \u800c\u4e0d\u662f\u5b83\u6307\u5411\u7684\u6574\u6570\u7684\u503c. \u8bef\u89e3\u6307\u9488\u8fd0\u7b97 \u00b6 int * search ( int * p , int val ) { while ( * p && * p != val ) p += sizeof ( int ); return p ; } \u6307\u9488\u7684\u7b97\u672f\u64cd\u4f5c\u662f\u4ee5\u5b83\u4eec\u6307\u5411\u7684\u5bf9\u8c61\u7684\u5927\u5c0f\u4e3a\u5355\u4f4d\u6765\u8fdb\u884c, \u800c\u4e0d\u662f\u5b57\u8282. \u7b2c\u56db\u884c\u5e94\u4e3a p++ . \u5f15\u7528\u4e0d\u5b58\u5728\u7684\u53d8\u91cf \u00b6 int * stackref () { int val ; return & val ; } \u8fd9\u91cc\u8fd4\u56de\u7684\u6307\u9488, \u5c3d\u7ba1\u4ecd\u7136\u6307\u5411\u4e00\u4e2a\u5408\u6cd5\u7684\u5185\u5b58\u5730\u5740, \u4f46\u5df2\u7ecf\u4e0d\u518d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u53d8\u91cf\u4e86.(\u5c40\u90e8\u53d8\u91cf\u5728\u6808\u5e27\u4e2d, \u51fd\u6570\u7ed3\u675f\u6808\u6bc1\u706d\u4e86) \u5f15\u7528\u7a7a\u95f2\u5806\u5757\u4e2d\u7684\u6570\u636e \u00b6 int * heapref ( int n , int m ) { int i ; int * x , * y ; x = ( int * ) malloc ( n * sizeof ( int )); ... free ( x ); y = ( int * ) malloc ( n * sizeof ( int )); for ( i = 0 ; i < m ; i ++ ) y [ i ] = x [ i ] ++ ; return y ; } \u5f15\u8d77\u5185\u5b58\u6cc4\u6f0f \u00b6 \u7a0b\u5e8f\u5458\u5fd8\u8bb0\u91ca\u653e\u5df2\u5206\u914d\u5757, \u800c\u5728\u5806\u91cc\u521b\u5efa\u4e86\u5783\u573e, \u4f1a\u9010\u6e10\u5360\u7528\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u5185\u5b58. void leak ( n ) { int * x = ( int * ) malloc ( n * sizeof ( int )); return ; }","title":"\u865a\u62df\u5185\u5b58"},{"location":"CSAPP/9/#_1","text":"\u73b0\u4ee3\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u79cd\u5bf9\u4e3b\u5b58\u7684\u62bd\u8c61, \u79f0\u4e3a \u865a\u62df\u5185\u5b58(VM) . \u5b83\u5c06\u4e3b\u5b58\u770b\u6210\u662f\u4e00\u4e2a\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u7684\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u901f\u7f13\u5b58, \u5728\u4e3b\u5b58\u4e2d\u53ea\u4fdd\u5b58\u6d3b\u52a8\u533a\u57df, \u5e76\u6839\u636e\u9700\u8981\u5728\u78c1\u76d8\u548c\u4e3b\u5b58\u4e4b\u95f4\u6765\u56de\u4f20\u9001\u6570\u636e, \u4ee5\u6b64\u9ad8\u6548\u4f7f\u7528\u4e3b\u5b58. \u5b83\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u81f4\u7684\u5730\u5740\u7a7a\u95f4, \u4ece\u800c\u7b80\u5316\u4e86\u5185\u5b58\u7ba1\u7406. \u5b83\u4fdd\u62a4\u4e86\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u88ab\u5176\u4ed6\u8fdb\u7a0b\u7834\u574f.","title":"\u865a\u62df\u5185\u5b58"},{"location":"CSAPP/9/#_2","text":"\u5730\u5740\u7a7a\u95f4(address space) \u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u5730\u5740\u7684\u6709\u5e8f\u96c6\u5408. \\(\\{0,1,2,\\ldots\\}\\) \u5982\u679c\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u6574\u6570\u662f\u8fde\u7eed\u7684, \u6211\u4eec\u79f0\u4e3a \u7ebf\u6027\u5730\u5740\u7a7a\u95f4 .(\u5047\u8bbe\u6211\u4eec\u8ba8\u8bba\u7684\u90fd\u662f\u7ebf\u6027\u5730\u5740\u7a7a\u95f4) \u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e3b\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a\u7531 M \u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u5355\u5143\u7ec4\u6210\u7684\u6570\u7ec4\uff0c \u6bcf\u4e2a\u5b57\u8282 \u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 \u7269\u7406\u5730\u5740(Physical Address) , \u5e76\u4e14\u7269\u7406\u5730\u5740\u662f\u8fde\u7eed\u7684\u3002\u7531\u6b64\u5c31\u6784\u6210\u4e86\u4e00\u4e2a \u7269\u7406\u5730\u5740\u7a7a\u95f4(Physical Address Space) , \u5bf9\u5e94\u4e8e\u7cfb\u7edf\u4e2d\u7269\u7406\u5185\u5b58\u7684 M \u4e2a\u5b57\u8282. CPU \u53ef\u4ee5\u901a\u8fc7\u7269\u7406\u5730\u5740\u6765\u8bbf\u95ee\u5185\u5b58\uff0c\u8fd9\u79cd\u65b9\u5f0f\u79f0\u4e3a \u7269\u7406\u5bfb\u5740(Physical Addressing) , \u518d\u5c06\u83b7\u5f97\u7684\u6570\u636e\u5b57\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d. \u5bf9\u4e8e\u4e3b\u5b58\u5b58\u50a8\u5668\u8d44\u6e90\u4e5f\u53ef\u4ee5\u901a\u8fc7\u865a\u62df\u5185\u5b58\u63d0\u4f9b\u53e6\u4e00\u79cd\u4e0d\u540c\u7684\u89c6\u56fe. \u73b0\u4ee3 CPU \u4ece\u4e00\u4e2a\u6709 \\(N=2^n\\) \u4e2a\u5730\u5740\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u751f\u6210 \u865a\u62df\u5730\u5740(Virtual Address) , \u8be5\u5730\u5740\u7a7a\u95f4\u79f0\u4e3a \u865a\u62df\u5730\u5740\u7a7a\u95f4(Virtual Address Space) , \u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u5927\u5c0f\u7531\u8868\u793a\u6700\u5927\u865a\u62df\u5730\u5740\u6240\u9700\u7684\u4f4d\u6570 n \u6765\u786e\u5b9a, \u73b0\u4ee3\u7cfb\u7edf\u652f\u6301 32 \u4f4d\u6216 64 \u4f4d\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4. CPU \u4f1a\u4f7f\u7528\u865a\u62df\u5730\u5740\u6765\u8bbf\u95ee\u4e3b\u5b58\uff0c\u79f0\u4e3a \u865a\u62df\u5bfb\u5740(Virtual Addressing) , \u9700\u8981\u9996\u5148\u901a\u8fc7 \u5730\u5740\u7ffb\u8bd1(Address Translation) \u5c06\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740, \u518d\u901a\u8fc7\u7269\u7406\u5730\u5740\u6765\u8bbf\u95ee\u5185\u5b58. \u800c\u5730\u5740\u7ffb\u8bd1\u7c7b\u4f3c\u4e8e\u5f02\u5e38\u5904\u7406(\u8f6f\u786c\u7ed3\u5408)\uff0c\u9700\u8981 CPU \u4e0a\u7684 \u5185\u5b58\u7ba1\u7406\u5355\u5143(Memory Management Unit, MMU) , \u4ee5\u53ca\u5185\u5b58\u4e2d\u7531\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u7684\u67e5\u8be2\u8868\u6765\u52a8\u6001\u7ffb\u8bd1\u865a\u62df\u5185\u5b58. \u6240\u4ee5\u901a\u8fc7 MMU \u6765\u63a7\u5236\u5bf9\u5185\u5b58\u7684\u8bfb\u5199, \u8fbe\u5230\u5bf9\u5185\u5b58\u8fdb\u884c\u865a\u62df\u5316\u7684\u76ee\u7684. \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 MME \u6765\u5bf9\u5185\u5b58\u8fdb\u884c\u62bd\u8c61 \u865a\u62df\u5185\u5b58\u5c06 DRAM \u5185\u5b58\u4f5c\u4e3a\u78c1\u76d8\u4e0a\u5b9e\u9645\u6570\u636e\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u5373\u6211\u4eec\u53ef\u4ee5\u5728\u4e3b\u5b58\u8bbf\u95ee\u78c1\u76d8\u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u800c\u4e3b\u5b58\u53ea\u4fdd\u5b58\u6d3b\u52a8\u533a\u57df\uff0c\u6839\u636e\u9700\u8981\u5728\u78c1\u76d8\u548c\u4e3b\u5b58\u4e4b\u95f4\u6765\u56de\u4f20\u9001\u6570\u636e\uff0c\u4f7f\u5f97\u8fdb\u7a0b\u53ef\u4ee5\u5f97\u5230\u66f4\u5927\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5e76\u4e14\u66f4\u6709\u6548\u5730\u5229\u7528\u4e3b\u5b58\u8d44\u6e90. \u865a\u62df\u5185\u5b58\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e00\u81f4\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u4ee3\u7801\u548c\u6570\u636e\u603b\u662f\u52a0\u8f7d\u5230\u56fa\u5b9a\u7684\u5730\u5740\uff0c\u5806\u6808\u4f4d\u4e8e\u7528\u6237\u8bfe\u4ef6\u5730\u5740\u7a7a\u95f4\u7684\u9876\u90e8\u7b49\u7b49\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e0e\u90a3\u4e9b\u865a\u62df\u5730\u5740\u76f8\u5bf9\u5e94\u7684\u5185\u5bb9\u5206\u5e03\u5728\u6574\u4e2a\u4e3b\u5b58\u50a8\u5668\u4e2d\uff0c\u6240\u4ee5\u901a\u8fc7\u4f7f\u7528\u865a\u62df\u5185\u5b58\u53ef\u4ee5\u7b80\u5316\u5185\u5b58\u7684\u7ba1\u7406. \u865a\u62df\u5185\u5b58\u4fdd\u62a4\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e0d\u4f1a\u88ab\u522b\u7684\u8fdb\u7a0b\u7834\u574f.","title":"\u5730\u5740\u7a7a\u95f4"},{"location":"CSAPP/9/#_3","text":"\u6982\u5ff5\u4e0a, \u865a\u62df\u5185\u5b58\u88ab\u7ec4\u7ec7\u4e3a\u4e00\u4e2a\u7531\u5b58\u653e\u5728\u78c1\u76d8\u4e0a\u7684 N \u4e2a\u8fde\u7eed\u5b57\u8282\u5927\u5c0f\u7684\u5355\u5143\u7ec4\u6210\u7684\u6570\u7ec4, \u6bcf\u4e2a\u5b57\u8282\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u865a\u62df\u5730\u5740, \u800c\u8be5\u6570\u7ec4\u7684\u5185\u5bb9\u88ab\u7f13\u5b58\u5230\u4e3b\u5b58\u4e2d. VM \u7cfb\u7edf\u5c06\u865a\u62df\u5185\u5b58\u5206\u5272\u4e3a \u865a\u62df\u9875(Virtual Page, VP) , \u6bcf\u4e2a\u865a\u62df\u9875\u7684\u5927\u5c0f\u4e3a \\(P=2^p\\) \u5b57\u8282. \u7c7b\u4f3c\u5730\u7269\u7406\u5185\u5b58\u88ab\u5206\u5272\u4e3a \u7269\u7406\u9875(Physical Page, PP) , \u5927\u5c0f\u4e5f\u4e3a P \u5b57\u8282, \u7269\u7406\u9875\u4e5f\u88ab\u79f0\u4e3a \u9875\u5e27(page frame) . \u865a\u62df\u9875\u9762\u5206\u4e3a\u4e09\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6: (\u8fd9\u91cc\u7684\u7269\u7406\u5185\u5b58\u5373\u4e3b\u5b58, \u76f8\u5f53\u4e8e DRAM \u7f13\u5b58) \u672a\u5206\u914d\u7684 : VM \u7cfb\u7edf\u8fd8\u672a\u5206\u914d(\u6216\u8005\u521b\u5efa)\u7684\u9875, \u4e0d\u5360\u7528\u4efb\u4f55\u78c1\u76d8\u7a7a\u95f4 \u7f13\u5b58\u7684 : \u5f53\u524d\u5df2\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5df2\u5206\u914d\u9875 \u672a\u7f13\u5b58\u7684 : \u672a\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5df2\u5206\u914d\u9875 DRAM \u7f13\u5b58\u7684\u4e0d\u547d\u4e2d\u4ee3\u4ef7\u66f4\u6602\u8d35, \u800c\u4e14\u4ece\u78c1\u76d8\u7684\u4e00\u4e2a\u6247\u533a\u8bfb\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u65f6\u95f4\u5f00\u9500\u4e5f\u975e\u5e38\u5927, \u56e0\u6b64\u865a\u62df\u9875\u5f80\u5f80\u5f88\u5927, \u901a\u5e38\u662f 4KB~2MB. DRAM \u7f13\u5b58\u662f\u5168\u76f8\u8054\u7684, \u4efb\u4f55\u865a\u62df\u9875\u53ef\u4ee5\u653e\u5728\u4efb\u4f55\u7269\u7406\u9875\u4e2d. \u56e0\u4e3a\u5bf9\u78c1\u76d8\u8bbf\u95ee\u65f6\u95f4\u957f, DRAM \u7f13\u5b58\u603b\u662f\u91c7\u7528\u5199\u56de, \u800c\u4e0d\u662f\u76f4\u5199.","title":"\u865a\u62df\u5185\u5b58"},{"location":"CSAPP/9/#_4","text":"\u4e3a\u4e86\u5224\u65ad\u865a\u62df\u9875\u662f\u5426\u7f13\u5b58\u5728 DRAM \u4e2d\u7684\u67d0\u4e2a\u5730\u65b9, \u8f6f\u786c\u4ef6\u8054\u5408(\u5305\u62ec\u64cd\u4f5c\u7cfb\u7edf\u8f6f\u4ef6, MMU \u4e2d\u7684\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6\u548c\u4e00\u4e2a\u5b58\u653e\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684 \u9875\u8868 )\u63d0\u4f9b\u4e86\u8fd9\u4e2a\u529f\u80fd. \u9875\u8868\u5c06\u865a\u62df\u9875\u6620\u5c04\u5230\u7269\u7406\u9875, \u6bcf\u6b21\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6\u5c06\u4e00\u4e2a\u865a\u62df\u5730\u5740\u8f6c\u4e3a\u7269\u7406\u5730\u5740\u65f6, \u90fd\u4f1a\u8bfb\u53d6\u9875\u8868. \u64cd\u4f5c\u7cfb\u7edf\u8d1f\u8d23\u7ef4\u62a4\u9875\u8868\u7684\u5185\u5bb9, \u4ee5\u53ca\u5728\u78c1\u76d8\u548c DRAM \u4e4b\u95f4\u6765\u56de\u4f20\u9001\u9875. \u9875\u8868 \u5c31\u662f\u4e00\u4e2a \u9875\u8868\u6761\u76ee(Page Table Entry, PTE) \u7684\u6570\u7ec4. \u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u6bcf\u4e2a\u9875\u5728\u9875\u8868\u4e2d\u4e00\u4e2a\u56fa\u5b9a\u504f\u79fb\u91cf\u5904\u90fd\u6709\u4e00\u4e2a PTE. \u6211\u4eec\u5047\u8bbe PTE \u662f\u4e00\u4e2a \u6709\u6548\u4f4d \u548c\u4e00\u4e2a n \u4f4d\u5730\u5740\u5b57\u6bb5\u7ec4\u6210. \u6709\u6548\u4f4d\u8868\u660e\u8be5\u865a\u62df\u9875\u662f\u5426\u88ab\u7f13\u5b58\u5728 DRAM \u4e2d. \u5982\u679c\u8bbe\u7f6e\u4e86\u6709\u6548\u4f4d, n \u4f4d\u5730\u5740\u5b57\u6bb5\u5c31\u8868\u793a DRAM \u4e2d\u76f8\u5e94\u7269\u7406\u9875\u7684\u8d77\u59cb\u5730\u5740. \u6ca1\u6709\u8bbe\u7f6e\u6709\u6548\u4f4d, \u5982\u679c\u672a\u5206\u914d\u5219\u4ee5\u4e00\u4e2a\u7a7a\u5730\u5740\u8868\u793a, \u5982\u679c\u5df2\u7ecf\u5206\u914d, \u5730\u5740\u5b57\u6bb5\u5c31\u662f\u865a\u62df\u5185\u5b58(\u78c1\u76d8)\u4e2d\u865a\u62df\u9875\u7684\u8d77\u59cb\u5730\u5740. \u6ce8 : \u56e0\u4e3a DRAM \u7f13\u5b58\u662f\u5168\u76f8\u8054\u7684, \u6240\u4ee5\u4efb\u610f\u7269\u7406\u9875\u90fd\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u865a\u62df\u9875.","title":"\u9875\u8868"},{"location":"CSAPP/9/#_5","text":"\u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e4b\u95f4\u4f20\u9001\u9875\u7684\u6d3b\u52a8\u53eb\u505a \u4ea4\u6362 \u6216\u8005 \u9875\u9762\u8c03\u5ea6(paging) . \u9875\u4ece\u78c1\u76d8\u6362\u5165(\u6216\u8005 \u9875\u9762\u8c03\u5165 ) DRAM \u548c\u4ece DRAM \u6362\u51fa(\u6216\u8005 \u9875\u9762\u8c03\u51fa )\u78c1\u76d8. \u6240\u6709\u73b0\u4ee3\u7cfb\u7edf\u90fd\u4f7f\u7528 \u6309\u9700\u9875\u9762\u8c03\u5ea6(demand paging) \u7684\u65b9\u5f0f, \u5373\u5f53\u6709\u4e0d\u547d\u4e2d\u53d1\u751f\u65f6\u731c\u6362\u5165\u9875\u9762. \u53c8\u662f\u5c40\u90e8\u6027\u6551\u4e86\u6211\u4eec \u865a\u62df\u5185\u5b58\u4e4b\u6240\u4ee5\u6709\u6548\uff0c\u4e5f\u662f\u56e0\u4e3a\u5c40\u90e8\u6027. \u865a\u62df\u5185\u5b58\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u5b58\u50a8\u5668\u5c42\u6b21\uff0c\u5927\u5c0f\u4f1a\u6bd4\u7269\u7406\u5185\u5b58\u5927\uff0c\u6240\u4ee5\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7a0b\u5e8f\u5f15\u7528\u7684\u4e0d\u540c\u9875\u9762\u603b\u6570\u53ef\u80fd\u4f1a\u8d85\u51fa\u7269\u7406\u5185\u5b58\u5927\u5c0f. \u5982\u679c\u7a0b\u5e8f\u5177\u6709\u597d\u7684\u5c40\u90e8\u6027\uff0c\u5219\u5728\u4efb\u610f\u65f6\u523b\u7684\u5de5\u4f5c\u96c6\u8f83\u5c0f\uff0c\u7a0b\u5e8f\u4f1a\u8d8b\u4e8e\u5728\u4e00\u4e2a\u8f83\u5c0f\u7684 \u6d3b\u52a8\u9875\u9762(Active Page) \u96c6\u5408\u4e0a\u5de5\u4f5c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728\u4e00\u5f00\u59cb\u5c06\u5de5\u4f5c\u96c6\u9875\u9762\u8c03\u5ea6\u5230\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u8fc7\u540e\u5c31\u4e0d\u4f1a\u4ea7\u751f\u989d\u5916\u7684\u78c1\u76d8\u6d41\u91cf\u4e86. \u4f46\u662f\u5982\u679c\u5c40\u90e8\u6027\u8f83\u5dee\uff0c\u5219\u5de5\u4f5c\u96c6\u8d85\u8fc7\u4e86\u7269\u7406\u5185\u5b58\u5927\u5c0f\uff0c\u5219\u4f1a\u53d1\u751f \u6296\u52a8(Thrashing) \uff0c\u4f7f\u5f97\u4e0d\u65ad\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u9875\u5230\u7269\u7406\u5185\u5b58\u4e2d\uff0c\u7a0b\u5e8f\u6027\u80fd\u5927\u5927\u964d\u4f4e. \u5728 Linux \u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 getrusage \u51fd\u6570\u68c0\u6d4b\u7f3a\u9875\u7684\u6570\u91cf.","title":"\u76f8\u5173\u64cd\u4f5c"},{"location":"CSAPP/9/#_6","text":"\u5f53CPU\u60f3\u8981\u8bbf\u95ee\u4f4d\u4e8e\u865a\u62df\u5730\u5740 x \u4e2d\u7684\u6570\u636e\u5b57\u65f6\uff0c\u4f1a\u9996\u5148\u901a\u8fc7\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6\u5c06\u865a\u62df\u5730\u5740\u4f5c\u4e3a\u4e00\u4e2a\u7d22\u5f15\u6765\u5b9a\u4f4d PTE \uff0c\u7136\u540e\u901a\u8fc7 PTE \u6765\u786e\u5b9a\u5bf9\u5e94\u7684\u865a\u62df\u9875\u7684\u72b6\u6001\u3002\u5982\u679c PTE \u7684\u6709\u6548\u4f4d\u4e3a 1\uff0c\u8bf4\u660e\u8be5\u865a\u62df\u9875\u88ab\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e86\uff0c\u5219 CPU \u53ef\u4ee5\u901a\u8fc7\u8be5 PTE \u7684\u5730\u5740\u5b57\u6bb5\u83b7\u5f97\u7269\u7406\u5185\u5b58\u7684\u5730\u5740\uff0c\u7136\u540e\u8fdb\u884c\u8bbf\u95ee, \u8fd9\u5c31\u662f \u9875\u547d\u4e2d . e.g. \u4e0a\u56fe\u4e2d\u5047\u8bbe\u6211\u4eec\u8bbf\u95ee VP2, \u5373\u4e3a\u4e00\u4e2a\u9875\u547d\u4e2d.","title":"\u9875\u547d\u4e2d"},{"location":"CSAPP/9/#_7","text":"DRAM \u7f13\u5b58\u4e0d\u547d\u4e2d\u79f0\u4e3a \u7f3a\u9875(page fault) . \u5982\u4e0a\u56fe\u4e2d\u6211\u4eec\u8bbf\u95ee VP3, \u4f46\u4ece\u6709\u6548\u4f4d\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\u5904 VP3 \u5e76\u672a\u88ab\u7f13\u5b58\u5230 DRAM \u4e2d, \u56e0\u6b64\u89e6\u53d1\u4e00\u4e2a \u7f3a\u9875\u5f02\u5e38 , \u968f\u540e\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u9009\u62e9\u4e00\u4e2a\u727a\u7272\u9875\u8fdb\u884c\u66ff\u6362. Example \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u6211\u4eec\u9009\u62e9\u4e86 VP4 \u4f5c\u4e3a\u727a\u7272\u9875, \u5982\u679c VP4 \u5df2\u7ecf\u88ab\u4fee\u6539\u4e86\u5185\u6838\u4f1a\u628a\u5b83\u5199\u56de\u78c1\u76d8(\u5199\u56de). \u968f\u540e\u5185\u6838\u4ece\u78c1\u76d8\u590d\u5236 VP3 \u5230\u5185\u5b58\u4e2d\u7684 PP3, \u66f4\u65b0 PTE3, \u968f\u540e\u8fd4\u56de. \u5f02\u5e38\u7a0b\u5e8f\u8fd4\u56de\u540e, \u91cd\u65b0\u542f\u52a8\u5bfc\u81f4\u7f3a\u9875\u7684\u6307\u4ee4, \u8be5\u6307\u4ee4\u91cd\u65b0\u53d1\u9001\u865a\u62df\u5730\u5740\u5230\u5730\u5740\u7ffb\u8bd1\u786c\u4ef6.","title":"\u7f3a\u9875"},{"location":"CSAPP/9/#_8","text":"Example \u5982\u56fe\u4e2d, \u6211\u4eec\u8c03\u7528 malloc, VP5 \u7684\u5206\u914d\u8fc7\u7a0b\u662f\u5728\u78c1\u76d8\u4e0a\u521b\u9020\u7a7a\u95f4\u5e76\u66f4\u65b0 PTE5.","title":"\u5206\u914d\u9875\u9762"},{"location":"CSAPP/9/#_9","text":"\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u9875\u8868, \u5373\u4e00\u4e2a\u72ec\u7acb\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4. \u6ce8: \u591a\u4e2a\u865a\u62df\u9875\u9762\u53ef\u4ee5\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u7269\u7406\u9875\u9762. \u7b80\u5316\u94fe\u63a5 : \u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\u5141\u8bb8\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u6620\u50cf\u4f7f\u7528\u76f8\u540c\u7684\u57fa\u672c\u683c\u5f0f. \u5982 \u5bf9\u4e8e 64 \u4f4d\u5730\u5740\u7a7a\u95f4, \u4ee3\u7801\u6bb5\u603b\u662f\u4ece\u865a\u62df\u5730\u5740 0x400000 \u5f00\u59cb, \u6570\u636e\u6bb5\u8ddf\u5728\u4ee3\u7801\u6bb5\u4e4b\u540e, \u4e2d\u95f4\u4e00\u6bb5\u5bf9\u5176\u7a7a\u767d. \u6808\u5360\u636e\u7528\u6237\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u6700\u9ad8\u7684\u90e8\u5206, \u5e76\u5411\u4e0b\u751f\u957f. \u7b80\u5316\u52a0\u8f7d : \u8981\u628a\u53ef\u6267\u884c\u6587\u4ef6\u4e2d .text \u548c .data \u8282\u52a0\u8f7d\u5230\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u8fdb\u7a0b\u4e2d, Linux \u52a0\u8f7d\u5668\u4e3a\u5176\u5206\u914d\u865a\u62df\u9875, \u628a\u5b83\u4eec\u6807\u8bb0\u4e3a\u65e0\u6548(\u5373\u672a\u88ab\u7f13\u5b58), \u5c06 PTE \u6307\u5411\u76ee\u6807\u6587\u4ef6\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e. \u8bbf\u95ee\u67d0\u4e00\u865a\u62df\u5730\u5740\u65f6\uff0c\u53d1\u73b0\u5176\u5bf9\u5e94\u7684 PTE \u662f\u65e0\u6548\u7684\uff0c\u5219\u4f1a\u53d1\u8d77\u7f3a\u9875\u5f02\u5e38\uff0c\u901a\u8fc7\u7f3a\u9875\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u81ea\u52a8\u5730\u5c06\u865a\u62df\u9875\u52a0\u8f7d\u5230\u7269\u7406\u9875\u4e2d. \u52a0\u8f7d\u5668\u4ece\u4e0d\u4ece\u78c1\u76d8\u5230\u5185\u5b58\u5b9e\u9645\u590d\u5236\u4efb\u4f55\u6570\u636e. (\u7a0b\u5e8f\u8fd0\u884c\u4e2d\u53ef\u80fd\u4f1a) \u7b80\u5316\u5171\u4eab : \u8fd9\u91cc\u53ea\u9700\u8981\u5728\u8fdb\u7a0b\u4e2d\u901a\u8fc7\u4e00\u4e2a PTE \u6307\u5411\u8be5\u5171\u4eab\u7684\u6570\u636e\u6216\u4ee3\u7801\u7684\u7269\u7406\u9875\uff0c\u5c31\u80fd\u5b9e\u73b0\u5728\u6240\u6709\u8fdb\u7a0b\u4e2d\u5171\u4eab\u7684\u7ed3\u679c. \u7b80\u5316\u5185\u5b58\u5206\u914d : \u5f53\u4e00\u4e2a\u8fd0\u884c\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u8981\u6c42\u989d\u5916\u7684\u5806\u7a7a\u95f4(\u5982\u8c03\u7528 malloc \u65f6), \u64cd\u4f5c\u7cfb\u7edf\u8981\u5206\u914d\u4e00\u4e2a\u9002\u5f53\u6570\u5b57\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u9875\u9762, \u5e76\u5c06\u5b83\u4eec\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\u4e2d\u4efb\u610f k \u4e2a\u7269\u7406\u9875\u9762. \u7531\u4e8e\u9875\u9762\u6620\u5c04, \u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7684\u7269\u7406\u9875\u9762\u53ef\u4ee5\u968f\u673a\u5206\u914d\u5728\u7269\u7406\u5185\u5b58\u4e2d.","title":"\u865a\u62df\u5185\u5b58\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u7684\u5de5\u5177"},{"location":"CSAPP/9/#_10","text":"\u6211\u4eec\u53ef\u4ee5\u5728 PTE \u4e0a\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u8bb8\u53ef\u4f4d\u6765\u9650\u5236\u5bf9\u4e00\u4e2a\u865a\u62df\u9875\u9762\u7684\u8bbf\u95ee. \u8fd9\u91cc\u5f15\u5165\u4e86\u4e09\u4e2a\u5b57\u6bb5: SUP : \u786e\u5b9a\u8be5\u7269\u7406\u9875\u7684\u8bbf\u95ee\u6743\u9650, \u786e\u5b9a\u662f\u5426\u9700\u8981\u5185\u6838\u6a21\u5f0f\u624d\u80fd\u8bbf\u95ee READ : \u786e\u5b9a\u8be5\u7269\u7406\u9875\u7684\u8bfb\u6743\u9650 WRITE : \u786e\u5b9a\u8be5\u7269\u7406\u9875\u7684\u5199\u6743\u9650 \u5982\u679c\u4e00\u6761\u6307\u4ee4\u8fdd\u53cd\u4e86\u8bb8\u53ef\u6761\u4ef6, \u90a3\u4e48 CPU \u89e6\u53d1\u4e00\u4e2a\u4e00\u822c\u4fdd\u62a4\u4fdd\u969c, \u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u4e00\u4e2a\u5185\u6838\u4e2d\u7684\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f. Linux shell \u5c06\u8fd9\u79cd\u5f02\u5e38\u62a5\u544a\u79f0\u4e3a \u6bb5\u9519\u8bef(segment fault) .","title":"\u865a\u62df\u5185\u5b58\u4f5c\u4e3a\u5185\u5b58\u4fdd\u62a4\u7684\u5de5\u5177"},{"location":"CSAPP/9/#_11","text":"\u5f62\u5f0f\u4e0a\u8bf4, \u5730\u5740\u7ffb\u8bd1\u5c31\u662f\u4e00\u4e2a N \u5143\u7d20\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4(VAS)\u4e2d\u7684\u5143\u7d20\u548c\u4e00\u4e2a M \u5143\u7d20\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4(PAS)\u4e2d\u5143\u7d20\u7684\u4e00\u4e2a\u6620\u5c04: \\(MAP:VAS\\rightarrow PAS \\cup\\empty\\) \u5730\u5740\u7ffb\u8bd1 : \u865a\u62df\u9875\u5927\u5c0f\u4e3a P \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u9700\u8981\u865a\u62df\u5730\u5740\u7684\u4f4e p \u4f4d\u6765\u7d22\u5f15\u4e00\u4e2a\u865a\u62df\u9875\u4e2d\u7684\u5b57\u8282, \u5f97\u5230 \u865a\u62df\u9875\u504f\u79fb\u91cfVirtual Page Offset\uff0cVPO) , \u7136\u540e\u901a\u8fc7\u865a\u62df\u5730\u5740\u7684\u9ad8 n-p \u4f4d\u6765\u786e\u5b9a\u865a\u62df\u9875\u5728\u9875\u8868\u4e2d\u7684\u7d22\u5f15, \u5f97\u5230 \u865a\u62df\u9875\u53f7(Virtual Page Number\uff0cVPN) . \u800c\u9875\u8868\u7684\u8d77\u59cb\u5730\u5740\u4fdd\u5b58\u5728\u4e00\u4e2a\u7279\u6b8a\u7684 CPU \u5bc4\u5b58\u5668 \u9875\u8868\u57fa\u5740\u5bc4\u5b58\u5668(Page Table Base Register\uff0cPTBR) \u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7 VPN \u548c PTBR \u7ec4\u5408\u5f97\u5230\u60f3\u8981\u7684 PTE \u7684\u7269\u7406\u5185\u5b58\u5730\u5740. \u5e76\u4e14\u7531\u4e8e\u865a\u62df\u9875\u548c\u7269\u7406\u9875\u7684\u5927\u5c0f\u76f8\u540c, \u6240\u4ee5\u4e24\u8005\u7f16\u7801\u9875\u4e2d\u504f\u79fb\u91cf\u6240\u9700\u7684\u4f4d\u6570 p \u76f8\u540c, \u53ef\u4ee5\u5047\u8bbe\u6570\u636e\u5728\u865a\u62df\u9875\u548c\u5728\u7269\u7406\u9875\u4e2d\u7684\u504f\u79fb\u91cf\u76f8\u540c, \u7531\u6b64\u5c31\u65e0\u9700\u5728\u9875\u8868\u4e2d\u4fdd\u5b58 \u7269\u7406\u9875\u504f\u79fb\u91cf(Physical Page Offset\uff0cPPO) , \u53ea\u9700\u8981\u4fdd\u5b58 \u7269\u7406\u9875\u53f7(Physical Page Number\uff0cPPN) , \u53ef\u4ee5\u76f4\u63a5\u5c06 VPO \u590d\u5236\u7ed9 PPO, \u6765\u786e\u5b9a\u6570\u636e\u5728\u7269\u7406\u9875\u4e2d\u7684\u504f\u79fb\u91cf. \u6ce8: \u4ece\u7f13\u5b58\u89d2\u5ea6\u770b, VPN \u5c31\u662f\u6807\u5fd7\u4f4d, VPO \u5c31\u662f\u5757\u504f\u79fb. \u9875\u8868\u4e2d\u53ea\u4fdd\u5b58 PPN \u548c\u6807\u5fd7\u4f4d . \u9875\u9762\u547d\u4e2d\u4e3b\u8981\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4: \u5904\u7406\u5668\u751f\u6210\u4e00\u4e2a\u865a\u62df\u5730\u5740, \u5e76\u4f20\u7ed9 MMU MMU \u751f\u6210 PTE \u5730\u5740(\u56e0\u4e3a\u9875\u8868\u4fdd\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d, \u8fd9\u91cc\u53d1\u9001\u7684 PTEA \u5373 PTBR+VPN ), \u5e76\u4ece\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u8bf7\u6c42\u5f97\u5230\u5b83 \u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u5411 MMU \u8fd4\u56de PTE(\u4e0d\u5305\u542b PPO) MMU \u6784\u9020\u7269\u7406\u5730\u5740, \u5e76\u628a\u5b83\u4f20\u9001\u7ed9\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58 \u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u8fd4\u56de\u6240\u8bf7\u6c42\u7684\u6570\u636e\u5b57\u7ed9\u5904\u7406\u5668 * \u9875\u9762\u4e0d\u547d\u4e2d\u4e3b\u8981\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4: \u524d\u4e09\u6b65\u4e0e\u9875\u9762\u547d\u4e2d\u76f8\u540c PTE \u4e2d\u6709\u6548\u4f4d\u662f 0, \u56e0\u6b64 MMU \u89e6\u53d1\u5f02\u5e38, \u63a7\u5236\u4f20\u9012\u5230\u7f3a\u9875\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f. \u7f3a\u9875\u5904\u7406\u7a0b\u5e8f\u786e\u5b9a\u7269\u7406\u5185\u5b58(\u9ad8\u901f\u7f13\u5b58/\u5185\u5b58)\u4e2d\u7684\u727a\u7272\u9875, \u5982\u679c\u5982\u679c\u9875\u9762\u5df2\u7ecf\u88ab\u4fee\u6539\u4e86\u5c31\u628a\u5b83\u5199\u56de\u5230\u78c1\u76d8 \u7f3a\u9875\u5904\u7406\u7a0b\u5e8f\u8c03\u5165\u65b0\u7684\u9875\u9762, \u5e76\u66f4\u65b0\u5185\u5b58\u4e2d\u7684 PTE \u7f3a\u9875\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u5230\u539f\u6765\u7684\u8fdb\u7a0b, \u518d\u6b21\u6267\u884c\u6307\u4ee4.","title":"\u5730\u5740\u7ffb\u8bd1"},{"location":"CSAPP/9/#_12","text":"","title":"\u7ed3\u5408\u9ad8\u901f\u7f13\u5b58\u548c\u865a\u62df\u5185\u5b58"},{"location":"CSAPP/9/#tlb","text":"\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21 CPU \u5c06\u4e00\u4e2a\u865a\u62df\u5730\u5740\u53d1\u9001\u7ed9 MMU \u65f6, MMU \u90fd\u4f1a\u5c06\u9700\u8981\u7684 PTE \u7269\u7406\u5730\u5740\u53d1\u9001\u7ed9\u9ad8\u901f\u7f13\u5b58/\u5185\u5b58\u6765\u83b7\u5f97 PTE, \u5982\u679c\u9ad8\u901f\u7f13\u5b58\u521a\u597d\u4fdd\u5b58\u4e86\u8be5 PTE\uff0c\u5219 MMU \u53ef\u4ee5\u5f88\u5feb\u83b7\u5f97, \u5426\u5219\u9700\u8981\u7b49\u5f85\u5f88\u591a\u65f6\u949f\u5468\u671f\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6. \u5728 MMU \u4e2d\u6709\u4e00\u4e2a\u5173\u4e8e PTE \u7684\u5c0f\u7684\u7f13\u5b58, \u79f0\u4e3a \u5feb\u8868(Translation Lookaside Buffer, TLB) . TLB \u662f\u4e00\u4e2a\u5c0f\u7684, \u865a\u62df\u5bfb\u5740\u7684\u7f13\u5b58, \u5176\u4e2d\u6bcf\u4e00\u884c\u90fd\u4fdd\u5b58\u7740\u4e00\u4e2a\u7531\u5355\u4e2a PTE \u7ec4\u6210\u5757. TLB \u901a\u5e38\u6709\u9ad8\u5ea6\u7684\u76f8\u8054\u5ea6. \u5982\u679c TLB \u6709 \\(T=2^t\\) \u4e2a\u7ec4, \u90a3\u4e48 TLB\u7d22\u5f15(TLBI) \u662f\u7531 VPN \u7684 t \u4e2a\u6700\u4f4e\u4f4d\u7ec4\u6210\u7684, \u800c TLB\u6807\u8bb0(TLBT) \u662f\u7531 VPN \u4e2d\u5269\u4f59\u7684\u4f4d\u7ec4\u6210\u7684. TLB \u547d\u4e2d CPU \u4ea7\u751f\u4e00\u4e2a\u865a\u62df\u5730\u5740 MMU \u4ece TLB \u4e2d\u53d6\u51fa\u76f8\u5e94\u7684 PTE(PPN \u548c\u6807\u8bb0\u4f4d) TLB \u5bf9 VPN \u8fdb\u884c\u5206\u89e3\uff0c\u5f97\u5230 TLBI \u548c TLBT\uff0c\u6839\u636e TLBI \u786e\u5b9a\u6240\u5728\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\uff0c\u7136\u540e\u5728\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d\u4f9d\u6b21\u6bd4\u8f83\u5404\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u7684\u6807\u8bb0\u662f\u5426\u548c TLBT \u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5219 TLB \u547d\u4e2d\uff0c\u5c06\u5bf9\u5e94\u7684 PPN \u53d1\u9001\u7ed9 MMU. MMU \u5c06\u8fd9\u4e2a\u865a\u62df\u5730\u5740\u7ffb\u8bd1\u4e3a\u7269\u7406\u5730\u5740, \u5e76\u5c06\u5b83\u53d1\u9001\u5230\u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58 \u9ad8\u901f\u7f13\u5b58/\u4e3b\u5b58\u5c06\u6240\u8bf7\u6c42\u7684\u6570\u636e\u5b57\u8fd4\u56de\u7ed9 CPU TLB \u4e0d\u547d\u4e2d MMU \u5fc5\u987b\u4ece L1 \u7f13\u5b58\u4e2d\u53d6\u51fa\u76f8\u5e94\u7684 PTE, \u53ef\u80fd\u8986\u76d6\u4e00\u4e2a\u539f\u6709\u7684\u6761\u76ee.","title":"\u5229\u7528 TLB \u52a0\u901f\u5730\u5740\u7ffb\u8bd1"},{"location":"CSAPP/9/#_13","text":"\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a 32 \u4f4d\u7684\u5730\u5740\u7a7a\u95f4, \u9875\u9762\u5927\u5c0f\u4e3a 4KB, PTE \u5927\u5c0f\u4e3a 4 \u5b57\u8282, \u90a3\u4e48\u65e0\u8bba\u88ab\u4f7f\u7528\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u591a\u5c0f, \u6211\u4eec\u90fd\u9700\u8981\u4e00\u4e2a 4MB \u7684\u9875\u8868\u9a7b\u7559\u5728\u5185\u5b58\u4e2d. Note \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, \u9875\u9762\u5927\u5c0f 4KB \u5373 \\(4*2^{10}=2^{12}\\) bytes. \u6211\u4eec\u9700\u8981 \\(2^{32}/2^{12} = 2^20\\) \u4e2a\u9875\u9762, \u8fd9\u4e5f\u5c31\u9700\u8981 \\(2^20\\) \u4e2a PTE. \u56e0\u6b64\u9875\u8868\u5927\u5c0f\u4e3a \\(2^20 \\times 4 = 4 MB\\) \u6211\u4eec\u53ef\u4ee5\u6784\u9020\u591a\u7ea7\u9875\u8868\u6765\u538b\u7f29\u5185\u5bb9: \u4e00\u7ea7\u9875\u8868\u4e2d\u6bcf\u4e2a PTE \u8d1f\u8d23\u6620\u5c04\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e2d\u4e00\u4e2a 4MB \u7684 \u7247(chunk) , \u8fd9\u91cc\u6bcf\u4e00\u7247\u90fd\u662f\u7531 1024 \u4e2a\u8fde\u7eed\u9875\u9762\u7ec4\u6210(\u56e0\u6b64\u4e8c\u7ea7\u9875\u8868\u4e2d\u6bcf\u4e00\u4e2a\u7247\u5bf9\u5e94 1024 \u4e2a PTE). \u5bf9\u4e8e 4GB \u7684\u5730\u5740\u7a7a\u95f4, \u4e00\u7ea7\u9875\u8868\u4e2d 1024 \u4e2a PTE \u5df2\u7ecf\u8db3\u591f\u8986\u76d6\u6574\u4e2a\u5185\u5b58\u7a7a\u95f4. \u5982\u679c\u7247 i \u4e2d\u7684\u6bcf\u4e2a\u9875\u9762\u90fd\u672a\u88ab\u5206\u914d, \u90a3\u4e48\u5176\u4e00\u7ea7 PTEi \u5c31\u4e3a\u7a7a. \u5982\u679c\u81f3\u5c11\u6709\u4e00\u4e2a\u9875\u662f\u5206\u914d\u4e86\u7684, \u90a3\u4e48\u4e00\u7ea7 PTEi \u5c31\u6307\u5411\u4e00\u4e2a\u4e8c\u7ea7\u9875\u8868\u7684\u57fa\u5740. \u4e8c\u7ea7\u9875\u8868\u4e2d\u6bcf\u4e2a PTE \u8d1f\u8d23\u6620\u5c04\u4e00\u4e2a 4KB \u7684\u865a\u62df\u5185\u5b58\u754c\u9762. \u6211\u4eec\u4e00\u7ea7\u548c\u4e8c\u7ea7\u9875\u8868\u7684 PTE \u5927\u5c0f\u90fd\u662f 4 \u5b57\u8282, \u56e0\u6b64\u9875\u8868\u90fd\u662f 4KB \u7684, \u521a\u597d\u4e0e\u9875\u9762\u5927\u5c0f\u4e00\u81f4. \u8fd9\u79cd\u65b9\u6cd5\u51cf\u5c11\u4e86\u5185\u5b58\u8981\u6c42: \u5982\u679c\u4e00\u7ea7\u9875\u8868\u4e2d\u7684\u4e00\u4e2a PTE \u662f\u7a7a\u7684, \u90a3\u4e48\u4e8c\u7ea7\u9875\u8868\u6839\u672c\u4e0d\u4f1a\u5b58\u5728. \u53ea\u6709\u4e00\u7ea7\u9875\u8868\u624d\u9700\u8981\u603b\u662f\u5728\u5185\u5b58\u4e2d, \u865a\u62df\u5185\u5b58\u7cfb\u7edf\u53ef\u4ee5\u5728\u9700\u8981\u65f6\u521b\u5efa, \u9875\u9762\u8c03\u5165\u6216\u8c03\u51fa\u4e8c\u7ea7\u9875\u8868, \u8fd9\u51cf\u5c11\u4e86\u4e3b\u5b58\u7684\u538b\u529b. \u53ea\u6709\u6700\u7ecf\u5e38\u4f7f\u7528\u7684\u4e8c\u7ea7\u9875\u8868\u624d\u9700\u8981\u7f13\u5b58\u5728\u4e3b\u5b58 \u4e2d.","title":"\u591a\u7ea7\u9875\u8868"},{"location":"CSAPP/9/#intel-core-i7linux","text":"Core i7 \u652f\u6301 48 \u4f4d\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c 52 \u4f4d\u7269\u7406\u5730\u5740\u7a7a\u95f4, \u8fd8\u517c\u5bb9 32 \u4f4d\u865a\u62df\u548c\u7269\u7406\u5730\u5740\u7a7a\u95f4.","title":"\u6848\u4f8b\u5206\u6790: Intel Core i7/Linux \u5185\u5b58\u7cfb\u7edf"},{"location":"CSAPP/9/#core-i7","text":"Core i7 \u91c7\u7528\u56db\u7ea7\u9875\u8868\u5c42\u6b21\u7ed3\u6784. CR3 \u63a7\u5236\u5bc4\u5b58\u5668\u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868(L1) \u7684\u8d77\u59cb\u4f4d\u7f6e. CR3 \u7684\u503c\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u7684\u4e00\u90e8\u5206, \u6bcf\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\u65f6 CR3 \u7684\u503c\u90fd\u4f1a\u88ab\u6062\u590d. \u9875\u5927\u5c0f\u53ef\u4ee5\u5728\u542f\u52a8\u65f6\u88ab\u914d\u7f6e\u4e3a 4KB \u6216 4MB. Linux \u4f7f\u7528\u7684\u662f 4KB \u7684\u9875, \u56e0\u6b64 \\(p=12\\) . \u5176\u4e2d\u6bcf\u4e2a PTE \u4e3a 8 \u5b57\u8282, \u8fd9\u91cc\u8981\u6c42\u7269\u7406\u9875 4KB \u5bf9\u9f50. \u7531\u4e8e\u7269\u7406\u5730\u5740\u4e3a 52 \u4f4d, PPO \u4e3a 12 \u4f4d, \u5219 PPN \u4e3a 40 \u4f4d, \u6240\u4ee5\u8fd9\u91cc\u7684\u9875\u8868\u7269\u7406\u57fa\u5730\u5740\u4e3a 40 \u4f4d. \u8fd9\u91cc\u589e\u52a0\u4e86 3 \u4e2a\u6743\u9650\u4f4d\u6765\u63a7\u5236\u5bf9\u9875\u7684\u8bbf\u95ee: R/W \u3001 U/S \u548c XD , \u5176\u4e2d XD \u662f 64 \u4f4d\u7cfb\u7edf\u5f15\u5165\u7684, \u9650\u5236\u4e86\u53ea\u80fd\u5728\u53ea\u8bfb\u4ee3\u7801\u6bb5\u6267\u884c, \u964d\u4f4e\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\u7684\u98ce\u9669\u3002\u6b64\u5916, \u5f53 MMU \u8bbf\u95ee\u4e00\u4e2a\u9875\u65f6, \u4f1a\u8bbe\u7f6e \u5f15\u7528\u4f4d(Reference Bit) A \u4f4d, \u8ba9\u5185\u6838\u5b9e\u73b0\u9875\u66ff\u6362\u7b97\u6cd5, \u5f53 MMU \u4fee\u6539\u4e00\u4e2a\u9875\u65f6, \u4f1a\u8bbe\u7f6e \u810f\u4f4d(Dirty Bit) D\u4f4d, \u4f7f\u5f97\u5185\u6838\u5bf9\u727a\u7272\u9875\u8fdb\u884c\u5199\u56de. \u603b\u4f53\u6d41\u7a0b\u56fe: \u9ad8\u901f\u7f13\u5b58 \u6700\u540e\u7269\u7406\u5730\u5740\u7684 52 \u4f4d\u4e2d, CT \u8868\u793a\u6807\u5fd7\u4f4d, CI \u8868\u793a\u7ec4\u7d22\u5f15, CO \u8868\u793a\u5757\u504f\u79fb. \u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7279\u70b9: \u9ad8\u901f\u7f13\u5b58\u7684 \\(CI+CO=12\\) \u4f4d, \u800c VPO \u4e5f\u662f 12 \u4f4d. \u8fd9\u4e0d\u662f\u5de7\u5408, \u800c\u662f\u6545\u610f\u8fd9\u6837\u8bbe\u8ba1\u6765\u52a0\u901f\u5730\u5740\u7ffb\u8bd1. \u6211\u4eec\u77e5\u9053, VPO=PPO, \u800c PPN \u9700\u8981\u901a\u8fc7\u5730\u5740\u7ffb\u8bd1\u83b7\u5f97, \u5219\u4e00\u5f00\u59cb\u8f93\u5165\u865a\u62df\u5730\u5740\u65f6, \u5c31\u80fd\u4e00\u4e0b\u7b49\u5230 PPO, \u7136\u540e\u7b49\u5f85\u68c0\u7d22 PPN. \u6b64\u65f6\u6211\u4eec\u5c31\u80fd\u76f4\u63a5\u5c06 PPO \u8f93\u5165\u5230\u9ad8\u901f\u7f13\u5b58\u4e2d, \u56e0\u4e3aPPO\u786e\u5b9a\u4e86\u5bf9\u5e94\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\u548c\u5757\u504f\u79fb\u91cf, \u5c31\u80fd\u5148\u901a\u8fc7 PPO \u83b7\u5f97\u5bf9\u5e94\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4, \u7136\u540e\u53ea\u8981\u7b49\u68c0\u7d22\u5230 PPN \u65f6, \u5c31\u80fd\u76f4\u63a5\u548c\u9ad8\u901f\u7f13\u5b58\u7ec4\u4e2d\u6bcf\u4e00\u884c\u7684\u6807\u5fd7\u4f4d\u8fdb\u884c\u6bd4\u8f83, \u6781\u5927\u52a0\u901f\u4e86\u5730\u5740\u7ffb\u8bd1\u8fc7\u7a0b.","title":"Core i7 \u5730\u5740\u7ffb\u8bd1"},{"location":"CSAPP/9/#linux","text":"Linux \u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4. \u5176\u4e2d\u5185\u6838\u865a\u62df\u5185\u5b58\u5305\u62ec\u5185\u6838\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u7ed3\u6784. \u5185\u6838\u865a\u62df\u5185\u5b58\u7684\u67d0\u4e9b\u533a\u57df\u88ab\u6620\u5c04\u5230\u6240\u6709\u8fdb\u7a0b\u5171\u4eab\u7684\u7269\u7406\u9875\u9762. Linux \u8fd8\u5c06\u4e00\u7ec4\u8fde\u7eed\u7684\u865a\u62df\u9875\u9762(\u5927\u5c0f\u7b49\u4e8e\u7cfb\u7edf\u4e2d DRAM \u603b\u91cf)\u6620\u5c04\u5230\u76f8\u5e94\u7684\u4e00\u7ec4\u8fde\u7eed\u7684\u7269\u7406\u9875\u9762. \u8fd9\u6837\u5185\u6838\u53ef\u4ee5\u5728\u8fd9\u4e2a\u865a\u62df\u5185\u5b58\u4e0a\u8fdb\u884c\u8bfb\u5199\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u7269\u7406\u5185\u5b58\u8fdb\u884c\u8bfb\u5199, \u8fd9\u4e3a\u5185\u6838\u63d0\u4f9b\u4e00\u79cd\u4fbf\u5229\u7684\u65b9\u6cd5\u6765\u8bbf\u95ee\u7269\u7406\u5185\u5b58\u3002\u8fd9\u90e8\u5206\u5185\u5bb9\u5bf9\u6240\u6709\u8fdb\u7a0b\u90fd\u662f\u4e00\u6837\u7684.","title":"Linux \u865a\u62df\u5185\u5b58\u7cfb\u7edf"},{"location":"CSAPP/9/#linux_1","text":"Linux \u5c06\u865a\u62df\u5185\u5b58\u7ec4\u7ec7\u6210\u4e00\u4e9b \u533a\u57df (\u4e5f\u53eb \u6bb5 )\u7684\u96c6\u5408, \u4e00\u4e2a \u533a\u57df \u5c31\u662f\u5df2\u7ecf\u5b58\u5728\u7740\u7684(\u5df2\u5206\u914d)\u865a\u62df\u5185\u5b58\u7684\u8fde\u7eed\u7247, \u8fd9\u4e9b\u9875\u662f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u76f8\u5173\u8054\u7684, \u5982\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u3001\u5171\u4eab\u5e93\u6bb5\u4ee5\u53ca\u7528\u6237\u6808, \u8fd9\u79cd\u7ec4\u7ec7\u6210\u6bb5\u7684\u5f62\u5f0f, \u5141\u8bb8\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5b58\u5728\u95f4\u9699. \u5185\u6838\u4e3a\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684\u4efb\u52a1\u7ed3\u6784(\u6e90\u4ee3\u7801\u4e2d\u7684 task_struct , \u5b58\u4e8e\u6700\u4e0a\u9762\u90a3\u5757)\u5176\u4e2d\u5305\u62ec\u8fd0\u884c\u8be5\u8fdb\u7a0b\u6240\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f. \u5176\u4e2d\u6709\u4e00\u4e2a\u6761\u76ee\u6307\u5411 mm_struct , \u5b83\u63cf\u8ff0\u4e86\u865a\u62df\u5185\u5b58\u7684\u5f53\u524d\u72b6\u6001. \u5b83\u5305\u542b\u4e24\u4e2a\u6709\u8da3\u7684\u5b57\u6bb5: pgd : \u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868(\u9875\u5168\u5c40\u76ee\u5f55)\u7684\u57fa\u5740. \u5f53\u5185\u6838\u8fd0\u884c\u8fdb\u7a0b\u65f6, \u5c31\u628a pgd \u653e\u5728 CR3 \u63a7\u5236\u5bc4\u5b58\u5668\u4e0b. mmap : \u6307\u5411\u4e00\u4e2a vm_area_struct (\u533a\u57df\u7ed3\u6784)\u7684\u94fe\u8868. vm_start : \u6307\u5411\u8fd9\u4e2a\u533a\u57df\u7684\u8d77\u59cb\u5904 vm_end : \u6307\u5411\u8fd9\u4e2a\u533a\u57df\u7684\u7ed3\u675f\u5904 vm_prot : \u63cf\u8ff0\u8fd9\u4e2a\u533a\u57df\u5185\u5305\u542b\u7684\u6240\u6709\u9875\u7684\u8bfb\u5199\u8bb8\u53ef\u6743\u9650 vm_flags : \u63cf\u8ff0\u8fd9\u4e2a\u533a\u57df\u5185\u7684\u9875\u9762\u662f\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u5171\u4eab\u7684, \u8fd8\u662f\u8fd9\u4e2a\u8fdb\u7a0b\u79c1\u6709\u7684 vm_next : \u6307\u5411\u94fe\u8868\u4e2d\u4e0b\u4e00\u4e2a\u7ed3\u6784","title":"Linux \u865a\u62df\u5185\u5b58\u533a\u57df"},{"location":"CSAPP/9/#linux_2","text":"\u5047\u8bbe MMU \u5728\u8bd5\u56fe\u7ffb\u8bd1\u67d0\u4e2a\u865a\u62df\u5730\u5740 A \u65f6\u89e6\u53d1\u4e86\u4e00\u4e2a\u7f3a\u9875, \u5904\u7406\u7a0b\u5e8f\u968f\u540e\u6267\u884c\u4e0b\u9762\u7684\u6b65\u9aa4: \u865a\u62df\u5730\u5740 A \u662f\u5426\u5408\u6cd5 : A \u662f\u5426\u662f\u5728\u67d0\u4e2a\u533a\u57df\u7ed3\u6784\u5b9a\u4e49\u7684\u533a\u57df\u5185? \u5904\u7406\u7a0b\u5e8f\u4f1a\u628a A \u4e0e\u6bcf\u4e2a\u533a\u57df\u7ed3\u6784\u7684 vm_start \u548c vm_end \u505a\u6bd4\u8f83. \u5982\u679c\u6307\u4ee4\u4e0d\u5408\u6cd5, \u7a0b\u5e8f\u89e6\u53d1\u4e00\u4e2a\u6bb5\u9519\u8bef, \u7ec8\u6b62\u8fdb\u7a0b. \u5bf9\u5730\u5740 A \u7684\u8bbf\u95ee\u662f\u5426\u5408\u6cd5 : \u8fdb\u7a0b\u662f\u5426\u6709\u8bfb\u5199\u6216\u8005\u6267\u884c\u8fd9\u4e2a\u533a\u57df\u5185\u9875\u9762\u7684\u6743\u9650? \u5982\u679c\u8bbf\u95ee\u4e0d\u5408\u6cd5, \u7a0b\u5e8f\u4f1a\u89e6\u53d1\u4e00\u4e2a\u4fdd\u62a4\u5f02\u5e38, \u7ec8\u6b62\u8fdb\u7a0b. \u6b63\u5e38\u7684\u7f3a\u9875\u5904\u7406: \u9009\u62e9\u4e00\u4e2a\u727a\u7272\u9875, \u5982\u679c\u88ab\u4fee\u6539\u4e86\u5c31\u5199\u56de, \u968f\u540e\u5c06\u865a\u62df\u5730\u5740 A \u5bf9\u5e94\u7684\u865a\u62df\u9875\u5199\u5165\u7269\u7406\u9875\u4e2d, \u4fee\u6539\u9875\u8868, \u4ece\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de.","title":"Linux \u7f3a\u9875\u5f02\u5e38\u5904\u7406"},{"location":"CSAPP/9/#_14","text":"Linux \u901a\u8fc7\u5c06\u4e00\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df\u4e0e\u4e00\u4e2a\u78c1\u76d8\u4e0a\u7684 \u5bf9\u8c61(object) \u5173\u8054\u8d77\u6765, \u4ee5\u521d\u59cb\u5316\u8fd9\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u5185\u5bb9, \u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u5185\u5b58\u6620\u5c04(memory mapping) . \u865a\u62df\u5185\u5b58\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u5230\u4e24\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u4e2d\u7684\u4e00\u79cd: Linux \u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u666e\u901a\u6587\u4ef6 \u4e00\u4e2a\u533a\u57df\u53ef\u4ee5\u6620\u5c04\u5230\u4e00\u4e2a\u666e\u901a\u78c1\u76d8\u6587\u4ef6\u7684\u8fde\u7eed\u90e8\u5206, \u4f8b\u5982\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6. \u6587\u4ef6\u533a(section) \u88ab\u5206\u6210\u9875\u5927\u5c0f\u7684\u7247, \u7528\u6765\u521d\u59cb\u5316\u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u6bb5, \u5982\u679c\u6bb5\u6bd4\u6587\u4ef6\u5927, \u5219\u7528 0 \u6765\u586b\u5145\u5269\u4e0b\u7684\u5185\u5bb9. \u7136\u540e\u6309\u9700\u5c06\u865a\u62df\u9875\u590d\u5236\u5230\u7269\u7406\u9875\u4e2d. \u533f\u540d\u6587\u4ef6 \u4e00\u4e2a\u533a\u57df\u4e5f\u53ef\u4ee5\u6620\u5c04\u5230\u4e00\u4e2a\u533f\u540d\u6587\u4ef6, \u533f\u540d\u6587\u4ef6\u662f\u7531\u5185\u6838\u521b\u5efa\u7684, \u5305\u542b\u7684\u5168\u662f\u4e8c\u8fdb\u5236\u96f6. \u56e0\u6b64\u6620\u5c04\u5230\u533f\u540d\u6587\u4ef6\u7684\u533a\u57df\u4e2d\u7684\u9875\u9762\u4e5f\u88ab\u79f0\u4e3a \u8bf7\u6c42\u4e8c\u8fdb\u5236\u96f6\u7684\u9875(demand-zero page) . \u4e00\u65e6\u4e00\u4e2a\u865a\u62df\u9875\u9762\u88ab\u521d\u59cb\u5316\u4e86, \u5b83\u5c31\u5728\u4e00\u4e2a\u7531\u5185\u6838\u7ef4\u62a4\u7684\u4e13\u95e8\u7684 \u4ea4\u6362\u6587\u4ef6 \u4e4b\u95f4\u6362\u6765\u6362\u53bb. \u4ea4\u6362\u6587\u4ef6 \u4e5f\u53eb\u505a \u4ea4\u6362\u7a7a\u95f4 \u6216\u8005 \u4ea4\u6362\u533a\u57df . \u4ea4\u6362\u7a7a\u95f4\u9650\u5236\u5f53\u524d\u8fdb\u7a0b\u80fd\u591f\u5206\u914d\u7684\u865a\u62df\u9875\u9762\u7684\u603b\u6570.","title":"\u5185\u5b58\u6620\u5c04"},{"location":"CSAPP/9/#_15","text":"\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u88ab\u6620\u5c04\u5230\u865a\u62df\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u533a\u57df, \u8981\u4e48\u4f5c\u4e3a \u5171\u4eab\u5bf9\u8c61 , \u8981\u4e48\u4f5c\u4e3a \u79c1\u6709\u5bf9\u8c61 . \u6620\u5c04\u5230\u5171\u4eab\u5bf9\u8c61\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\u53eb \u5171\u4eab\u533a\u57df , \u7c7b\u4f3c\u5730\u6709 \u79c1\u6709\u533a\u57df . \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u5c06\u4e00\u4e2a\u5171\u4eab\u5bf9\u8c61\u6620\u5c04\u5230\u5b83\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u4e2a\u533a\u57df\u5185, \u90a3\u4e48\u8fd9\u4e2a\u8fdb\u7a0b\u5bf9\u8fd9\u4e2a\u533a\u57df\u7684\u4efb\u4f55\u5199\u64cd\u4f5c, \u5bf9\u4e8e\u90a3\u4e9b\u4e5f\u8fd9\u6837\u505a\u7684\u8fdb\u7a0b\u800c\u8a00, \u4e5f\u662f\u53ef\u89c1\u7684, \u800c\u4e14\u8fd9\u4e9b\u53d8\u5316\u4f1a\u53cd\u6620\u5230\u78c1\u76d8\u4e0a\u7684\u539f\u59cb\u5bf9\u8c61\u4e2d. \u5bf9\u4e8e\u4e00\u4e2a\u6620\u5c04\u5230\u79c1\u6709\u5bf9\u8c61\u7684\u533a\u57df\u7684\u6539\u53d8, \u5bf9\u5176\u4ed6\u8fdb\u7a0b\u662f\u4e0d\u53ef\u89c1\u7684, \u800c\u4e14\u53d8\u5316\u4e0d\u4f1a\u53cd\u6620\u5230\u78c1\u76d8\u4e0a\u7684\u5bf9\u8c61\u4e2d. \u5728\u8fdb\u7a0b 1 \u4e2d\uff0c\u5f53\u6211\u4eec\u5c06\u78c1\u76d8\u4e0a\u7684\u4e00\u4e2a\u5bf9\u8c61\u901a\u8fc7\u5185\u5b58\u6620\u5c04\u4e0e\u8be5\u8fdb\u7a0b\u7684\u4e00\u4e2a\u5171\u4eab\u6bb5\u5173\u8054\u8d77\u6765\u65f6\uff0c\u5c31\u4f1a\u4f7f\u5f97\u865a\u62df\u9875\u5bf9\u5e94\u7684 PTE \u6307\u5411\u8be5\u5bf9\u8c61\uff0c\u5f53\u5f15\u7528\u8be5\u5bf9\u8c61\u65f6\uff0c\u5c31\u4f1a\u5c06\u5bf9\u5e94\u7684\u865a\u62df\u9875\u52a0\u8f7d\u5230\u7269\u7406\u9875\u4e2d\uff1b\u800c\u8fdb\u7a0b 2 \u4e5f\u8981\u5c06\u8be5\u5bf9\u8c61\u4e0e\u81ea\u5df1\u7684\u4e00\u4e2a\u5171\u4eab\u6bb5\u5173\u8054\u8d77\u6765\u65f6\uff0c\u5f53\u5bf9\u5176\u5f15\u7528\u65f6\uff0c\u7531\u4e8e\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6587\u4ef6\u540d\uff0c\u6240\u4ee5\u5185\u6838\u53ef\u4ee5\u53d1\u73b0\u8fdb\u7a0b 1 \u5c06\u8be5\u5bf9\u8c61\u52a0\u8f7d\u7684\u7269\u7406\u9875\uff0c\u5c31\u76f4\u63a5\u5728\u8fdb\u7a0b 2 \u4e2d\u5c06\u5bf9\u5e94\u7684 PTE \u6307\u5411\u76f8\u540c\u7684\u7269\u7406\u9875\u5c31\u884c\u4e86. \u6ce8 : \u8fdb\u7a0b \u00bd \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e0d\u540c; \u5373\u4f7f\u4e00\u4e2a\u5bf9\u8c61\u4e0e\u591a\u4e2a\u8fdb\u7a0b\u7684\u5171\u4eab\u6bb5\u7ba1\u7406, \u7269\u7406\u5185\u5b58\u4e2d\u53ea\u653e\u5171\u4eab\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c. \u79c1\u6709\u5bf9\u8c61\u4f7f\u7528 \u5199\u65f6\u590d\u5236(copy-on-write) \u7684\u65b9\u6cd5. \u672a\u5bf9\u79c1\u6709\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\u65f6, \u7269\u7406\u5185\u5b58\u4e2d\u53ea\u4f1a\u4fdd\u5b58\u540c\u4e00\u4e2a\u5bf9\u8c61\u526f\u672c, \u4e14\u5404\u4e2a\u8fdb\u7a0b\u4e2d\u5bf9\u8be5\u5bf9\u8c61\u7684 PTE \u90fd\u662f\u53ea\u8bfb\u7684, \u800c\u865a\u62df\u5185\u5b58\u6bb5\u6807\u8bb0\u4e3a \u79c1\u6709\u7684\u5199\u65f6\u590d\u5236 . \u53ea\u8981\u6ca1\u6709\u8fdb\u7a0b\u8bd5\u56fe\u5199\u5b83\u81ea\u5df1\u7684\u79c1\u6709\u533a\u57df, \u5b83\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5171\u4eab\u7269\u7406\u5185\u5b58\u4e2d\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c. \u4f46\u5f53\u6709\u8fdb\u7a0b\u8bd5\u56fe\u5199\u79c1\u6709\u533a\u57df\u7684\u67d0\u4e2a\u5c40\u9762\u65f6, \u4f1a\u89e6\u53d1\u4e00\u4e2a\u4fdd\u62a4\u6545\u969c. \u6545\u969c\u5904\u7406\u7a0b\u5e8f\u4f1a\u5728\u7269\u7406\u5185\u5b58\u4e2d\u521b\u5efa\u8fd9\u4e2a\u9875\u9762\u7684\u4e00\u4e2a\u65b0\u526f\u672c, \u66f4\u65b0 PTE \u6307\u5411\u65b0\u526f\u672c, \u7136\u540e\u6062\u590d\u8fd9\u4e2a\u9875\u9762\u7684\u53ef\u5199\u6743\u9650. \u6545\u969c\u5904\u7406\u7a0b\u5e8f\u8fd4\u56de\u540e\u91cd\u65b0\u6267\u884c\u5199\u64cd\u4f5c\u5373\u53ef. Note \u56fe\u4e2d\u5927\u5757\u7684\u8868\u793a\u5bf9\u8c61\uff0c\u53ef\u80fd\u7531\u5f88\u591a\u4e2a\u9875\u7ec4\u6210\uff0c\u5f53\u6211\u4eec\u5c1d\u8bd5\u5bf9\u5176\u4e2d\u4e00\u4e2a\u9875\u8fdb\u884c\u4fee\u6539\u65f6\uff0c \u53ea\u4f1a\u5bf9\u8be5\u9875\u8fdb\u884c\u590d\u5236 \uff0c\u5e76\u4fee\u6539\u8be5\u9875\u5bf9\u5e94\u7684 PTE\uff0c\u800c \u8be5\u5bf9\u8c61\u7684\u5176\u4ed6\u9875\u4fdd\u6301\u4e0d\u53d8. \u901a\u8fc7\u5199\u65f6\u590d\u5236\u8fd9\u79cd\u7b56\u7565\uff0c\u5c3d\u53ef\u80fd\u5ef6\u8fdf\u7269\u7406\u5185\u5b58\u4e2d\u7684\u62f7\u8d1d\uff0c\u80fd\u6700\u5927\u6548\u7387\u5730\u4f7f\u7528\u7269\u7406\u5185\u5b58.","title":"\u5171\u4eab\u5bf9\u8c61"},{"location":"CSAPP/9/#fork","text":"\u5f53 fork \u51fd\u6570\u88ab\u5f53\u524d\u8fdb\u7a0b\u8c03\u7528\u65f6, \u5185\u6838\u4e3a\u65b0\u8fdb\u7a0b\u521b\u5efa\u5404\u79cd\u6570\u636e\u7ed3\u6784, \u5e76\u5206\u914d\u7ed9\u5b83\u552f\u4e00\u7684 PID. \u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u865a\u62df\u5730\u5740\u7a7a\u95f4, \u6211\u4eec\u4f7f\u7528\u5199\u65f6\u590d\u5236\u7684\u6280\u672f: \u4e3a\u4e86\u5177\u6709\u548c\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u865a\u62df\u5185\u5b58\u72b6\u6001\uff0c\u5185\u6838\u4f1a\u590d\u5236\u7236\u8fdb\u7a0b\u7684 mm_struct \u4e3a\u4e86\u5177\u6709\u548c\u7236\u8fdb\u7a0b\u76f8\u540c\u7684\u865a\u62df\u5185\u5b58\u6bb5\u5206\u914d\uff0c\u5185\u6838\u4f1a\u590d\u5236\u7236\u8fdb\u7a0b\u7684 vm_area_struct (\u533a\u57df\u7ed3\u6784) \u4e3a\u4e86\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u5177\u6709\u76f8\u540c\u7684\u865a\u62df\u5185\u5b58\u5185\u5bb9\uff0c\u5185\u6838\u4f1a\u590d\u5236\u7236\u8fdb\u7a0b\u7684\u9875\u8868\uff0c\u5c31\u80fd\u5c06\u76f8\u540c\u7684\u78c1\u76d8\u5185\u5bb9\u6620\u5c04\u5230\u76f8\u540c\u7684\u865a\u62df\u9875\u4e2d\uff0c\u5e76\u5c06\u865a\u62df\u9875\u7f13\u5b58\u5728\u76f8\u540c\u7684\u7269\u7406\u9875\u4e2d. \u4e3a\u4e86\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u80fd\u76f8\u4e92\u72ec\u7acb\uff0c\u4e24\u4e2a\u8fdb\u7a0b\u7684\u9875\u90fd\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\u7684\uff0c\u4e14\u6bb5\u90fd\u6807\u8bb0\u4e3a\u79c1\u6709\u7684\u5199\u56de\u590d\u5236\u3002\u5f53\u7236\u5b50\u8fdb\u7a0b\u90fd\u6ca1\u6709\u5bf9\u9875\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u7236\u5b50\u8fdb\u7a0b\u662f\u5171\u4eab\u76f8\u540c\u7684\u7269\u7406\u5185\u5b58\u7684\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u8fdb\u7a0b\u5bf9\u9875\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u5c31\u4f1a\u5bf9\u8be5\u9875\u8fdb\u884c\u5199\u56de\u590d\u5236\uff0c\u5e76\u4e3a\u8be5\u9875\u8d4b\u4e88\u5199\u6743\u9650\uff0c\u5e76\u66f4\u65b0\u8fdb\u7a0b\u5bf9\u5e94\u7684\u9875\u8868.","title":"fork\u51fd\u6570"},{"location":"CSAPP/9/#execve","text":"\u5f53\u6211\u4eec\u8fd0\u884c execve(\"a.out\", NULL, NULL); \u65f6, \u52a0\u8f7d\u5e76\u5141\u8bb8 a.out \u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4: \u5220\u9664\u5df2\u5b58\u5728\u7684\u7528\u6237\u533a\u57df : \u5220\u9664\u5f53\u524d\u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7684\u7528\u6237\u90e8\u5206\u5df2\u5b58\u5728\u7684\u533a\u57df\u7ed3\u6784, \u5373 vm_area_struct \u548c\u9875\u8868. \u6620\u5c04\u79c1\u6709\u533a\u57df : \u4e3a\u65b0\u7a0b\u5e8f\u7684\u4ee3\u7801, \u6570\u636e, bss \u548c\u6808\u533a\u57df\u521b\u5efa\u65b0\u7684\u533a\u57df\u7ed3\u6784. \u6620\u5c04\u5171\u4eab\u533a\u57df : \u5982\u679c\u4e0e\u5171\u4eab\u5bf9\u8c61\u94fe\u63a5(\u5982\u5171\u4eab\u5e93), \u90a3\u4e48\u5728 vm_area_struct \u4e2d\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u6bb5, \u7136\u540e\u5c06\u5176\u4e0e\u5171\u4eab\u5e93\u7684\u5185\u5bb9\u5173\u8054\u8d77\u6765. \u8bbe\u7f6e\u7a0b\u5e8f\u8ba1\u6570\u5668(PC) : \u4f7f\u5176\u6307\u5411\u4ee3\u7801\u6bb5\u7684\u5165\u53e3\u70b9. Note \u5f53\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u52a0\u8f7d\u4efb\u4f55\u5185\u5bb9\u5230\u5185\u5b58\u4e2d\uff0c\u6240\u505a\u7684\u53ea\u662f\u8bbe\u7f6e\u5185\u5b58\u6620\u5c04\uff0c\u5728\u5185\u6838\u4e2d\u521b\u5efa\u6570\u636e\u7ed3\u6784\uff0c\u7531\u6b64\u521b\u5efa\u4e86\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c\u8fd9\u4e9b\u5bf9\u8c61\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u800c\u5b9e\u9645\u7684\u62f7\u8d1d\u5de5\u4f5c\u4f1a\u7531\u7f3a\u9875\u5f02\u5e38\u6309\u9700\u5b8c\u6210.","title":"execve\u51fd\u6570"},{"location":"CSAPP/9/#mmap","text":"Linux \u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528 mmap \u51fd\u6570\u6765\u521b\u5efa\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df. #include <unistd.h> #include <sys/mman.h> void * mmap ( void * start , size_t length , int port , int flags , int fd , off_t offset ); mmap \u51fd\u6570\u8981\u6c42\u5185\u6838\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df, \u6700\u597d\u662f\u4ece\u5730\u5740 start \u5f00\u59cb\u7684\u4e00\u4e2a\u533a\u57df, \u5e76\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26\u53f7 fd \u6307\u5b9a\u7684\u5bf9\u8c61\u7684\u4e00\u4e2a\u8fde\u7eed\u7684\u7247\u6620\u5c04\u5230\u8fd9\u4e2a\u65b0\u7684\u533a\u57df. \u8fde\u7eed\u5bf9\u8c61\u7684\u7247\u7684\u957f\u5ea6\u4e3a length \u5b57\u8282, \u4ece\u8ddd\u6587\u4ef6\u5f00\u59cb\u504f\u79fb\u91cf\u4e3a offset \u5b57\u8282\u7684\u5730\u65b9\u5f00\u59cb. start \u53ef\u8bbe\u4e3a NULL, \u8ba9\u5185\u6838\u81ea\u52a8\u5206\u914d. \u5176\u4e2d\uff0cprot \u5bf9\u5e94\u4e8e\u6bb5\u7ed3\u6784\u4e2d\u7684 vm_prot \u53c2\u6570\uff0c\u7528\u6765\u786e\u5b9a\u8be5\u865a\u62df\u5185\u5b58\u6bb5\u7684\u8bfb\u5199\u6743\u9650\uff1a PROT_EXEC \u8868\u793a\u8be5\u6bb5\u4e2d\u7684\u9875\u662f\u53ef\u6267\u884c\u7684\uff1b PROT_READ \u8868\u793a\u8be5\u6bb5\u4e2d\u7684\u9875\u662f\u53ef\u8bfb\u7684\uff1b PROT_WRITE \u8868\u793a\u8be5\u6bb5\u4e2d\u7684\u9875\u662f\u53ef\u5199\u7684\uff1b PROT_NONE \u8868\u793a\u8be5\u6bb5\u5185\u7684\u9875\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684. flags \u5bf9\u5e94\u4e8e\u6bb5\u7ed3\u6784\u4e2d\u7684 vm_flags : MAP_PRIVATE \u8868\u793a\u8be5\u6bb5\u662f\u79c1\u6709\u7684\u5199\u65f6\u590d\u5236\u7684\uff1b MAP_SHARED \u8868\u793a\u8be5\u6bb5\u662f\u5171\u4eab\u7684\u3002\u4e5f\u53ef\u4ee5\u8bbe\u7f6e MAP_ANON \uff0c\u8868\u793a\u662f\u4e00\u4e2a\u533f\u540d\u5bf9\u8c61. \u5f53\u51fd\u6570\u6267\u884c\u6210\u529f\u65f6\uff0c\u4f1a\u8fd4\u56de\u6307\u5411\u8be5\u6bb5\u7684\u6307\u9488\uff0c\u5982\u679c\u5931\u8d25\uff0c\u5219\u8fd4\u56de MAP_FAILED . munmap \u51fd\u6570\u5220\u9664\u4ece\u865a\u62df\u5730\u5740 start \u5f00\u59cb, \u7531\u63a5\u4e0b\u6765 length \u5b57\u8282\u7ec4\u6210\u7684\u865a\u62df\u5185\u5b58\u533a\u57df #include <unistd.h> #include <sys/mman.h> int munmap ( void * start , size_t length ); \u5185\u5b58\u6620\u5c04\u7684\u597d\u5904 \u4f7f\u5f97\u78c1\u76d8\u6587\u4ef6\u4e2d\u7684\u4e00\u5757\u6570\u636e\u80fd\u4e0e\u865a\u62df\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e2a\u6bb5\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u80fd\u76f4\u63a5\u901a\u8fc7\u5bf9\u8be5\u865a\u62df\u5185\u5b58\u6bb5\u7684\u8bbf\u95ee\u6765\u95f4\u63a5\u8bbf\u95ee\u78c1\u76d8\u6587\u4ef6\u5185\u5bb9\uff0c\u4e0d\u5fc5\u6267\u884c\u6587\u4ef6I/O\u64cd\u4f5c\uff0c\u4e5f\u65e0\u9700\u5bf9\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u7f13\u5b58\u5904\u7406\u3002\u5e76\u4e14\u865a\u62df\u5185\u5b58\u8fdb\u884c\u6309\u9700\u9875\u9762\u8c03\u5ea6\u7684\uff0c\u5f53\u4f60\u8bbf\u95ee\u4e86\u6587\u4ef6\u5185\u5bb9\uff0c\u5b83\u5c31\u4f1a\u5c06\u5bf9\u5e94\u7684\u865a\u62df\u9875\u52a0\u8f7d\u5230\u7269\u7406\u9875\u4e2d\uff0c\u6b64\u65f6\u5c31\u80fd\u4ece\u5185\u5b58\u4e2d\u5f88\u5feb\u5730\u8bbf\u95ee\u6587\u4ef6\u5185\u5bb9\u3002\u5f53\u4f60\u5904\u7406\u5927\u6587\u4ef6\u6216\u9891\u7e41\u8bfb\u5199\u6587\u4ef6\u65f6\u80fd\u63d0\u901f\uff0c\u56e0\u4e3a\u6b64\u65f6\u5c31\u76f4\u63a5\u5c06\u6587\u4ef6\u5185\u5bb9\u52a0\u8f7d\u5230\u7269\u7406\u5185\u5b58\u4e2d\u4e86\uff0c\u4e00\u5207\u8bfb\u5199\u64cd\u4f5c\u90fd\u662f\u5728\u7269\u7406\u5185\u5b58\u4e2d\u8fdb\u884c\u7684\uff0c\u901f\u5ea6\u7279\u522b\u5feb\uff0c\u53ea\u6709\u5728\u5185\u6838\u5c06\u5176\u727a\u7272\u65f6\uff0c\u624d\u4f1a\u8fdb\u884c\u5199\u56de. \u901a\u8fc7\u5185\u5b58\u6620\u5c04\u65b9\u6cd5\uff0c\u6211\u4eec\u8fd8\u80fd\u5b9a\u4e49\u4e00\u4e2a\u8fdb\u7a0b\u5171\u4eab\u7684\u865a\u62df\u5185\u5b58\u6bb5\uff0c\u4f7f\u5f97\u80fd\u8ba9\u591a\u4e2a\u8fdb\u7a0b\u5bf9\u4e00\u4e2a\u533a\u57df\u8fdb\u884c\u8bbf\u95ee\u548c\u4fee\u6539.","title":"mmap\u51fd\u6570\u7684\u7528\u6237\u7ea7\u5185\u5b58\u6620\u5c04"},{"location":"CSAPP/9/#_16","text":"\u867d\u7136\u53ef\u4ee5\u4f7f\u7528 mmap \u548c munmap \u6765\u521b\u5efa\u548c\u5220\u9664\u865a\u62df\u5185\u5b58\u7684\u533a\u57df, \u4f46\u662f C \u7a0b\u5e8f\u5458\u7528 \u52a8\u6001\u5185\u5b58\u5206\u914d\u5668(dynamic memory allocator) \u66f4\u65b9\u4fbf, \u4e5f\u6709\u66f4\u597d\u7684\u79fb\u690d\u6027. \u52a8\u6001\u5185\u5b58\u5206\u914d\u5668 \u7ef4\u62a4\u7740\u4e00\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u533a\u57df, \u79f0\u4e3a \u5806(heap) . \u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u6838\u90fd\u7ef4\u62a4\u4e00\u4e2a\u53d8\u91cf brk, \u5b83\u6307\u5411\u5806\u7684\u9876\u90e8. \u5206\u914d\u5668\u5c06\u5806\u89c6\u4e3a\u4e00\u7ec4\u4e0d\u540c\u5927\u5c0f\u7684\u5757\u7684\u96c6\u5408\u6765\u7ef4\u62a4. \u6bcf\u4e2a\u5757\u5c31\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u7247, \u8981\u4e48\u662f\u5df2\u5206\u914d\u7684, \u8981\u4e48\u662f\u7a7a\u95f2\u7684. \u5206\u914d\u5668\u6709\u4e24\u79cd\u98ce\u683c, \u90fd\u8981\u6c42\u5e94\u7528\u663e\u5f0f\u5730\u5206\u914d\u5757, \u4e0d\u540c\u5728\u4e8e\u7531\u54ea\u4e2a\u5b9e\u4f53\u8d1f\u8d23\u91ca\u653e\u5df2\u5206\u914d\u7684\u5757: \u663e\u5f0f\u5206\u914d\u5668(explicit allocator) : \u8981\u6c42\u5e94\u7528\u663e\u5f0f\u5730\u91ca\u653e\u4efb\u4f55\u5df2\u5206\u914d\u7684\u5757. \u5982 C \u8bed\u8a00\u4e2d\u7684 malloc``free \u51fd\u6570, C++ \u4e2d\u7684 new``delete \u51fd\u6570. \u9690\u5f0f\u5206\u914d\u5668(implicit allocator) : \u8981\u6c42\u5206\u914d\u5668\u68c0\u6d4b\u4e00\u4e2a\u5df2\u5206\u914d\u5757\u4f55\u65f6\u4e0d\u518d\u88ab\u7a0b\u5e8f\u6240\u4f7f\u7528, \u90a3\u4e48\u5c31\u91ca\u653e\u8fd9\u4e2a\u5757. \u9690\u5f0f\u5206\u914d\u5668\u4e5f\u53eb \u5783\u573e\u6536\u96c6\u5668(garbage collector) *, \u81ea\u52a8\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5df2\u5206\u914d\u7684\u5757\u7684\u8fc7\u7a0b\u53eb \u5783\u573e\u6536\u96c6**. \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d \u7ecf\u5e38\u76f4\u5230\u7a0b\u5e8f\u5b9e\u9645\u8fd0\u884c\u65f6, \u624d\u77e5\u9053\u67d0\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u5927\u5c0f.","title":"\u52a8\u6001\u5185\u5b58\u5206\u914d"},{"location":"CSAPP/9/#_17","text":"","title":"\u663e\u5f0f\u5206\u914d\u5668"},{"location":"CSAPP/9/#mallocfree","text":"\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 malloc \u51fd\u6570\u6765\u663e\u793a\u5730\u4ece\u5806\u4e2d\u5206\u914d\u5757 #include <stdlib.h> void * malloc ( size_t size ); malloc \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u9488, \u6307\u5411\u5927\u5c0f\u4e3a \u81f3\u5c11 size \u5b57\u8282\u7684\u5185\u5b58\u5757.(\u8fd9\u4e2a\u5757\u53ef\u80fd\u4e3a\u5728\u8fd9\u4e2a\u5757\u5185\u4efb\u4f55\u6570\u636e\u5bf9\u8c61\u7c7b\u578b\u505a\u5bf9\u9f50) \u5b9e\u9645\u4e2d\u5bf9\u9f50\u4e5f\u6765\u7f16\u8bd1\u4ee3\u7801\u5904\u4e8e 32 \u4f4d\u6a21\u5f0f( gcc -m32 )\u8fd8\u662f 64 \u4f4d\u6a21\u5f0f( gcc -m64 ). 32 \u4f4d\u6a21\u5f0f\u4e2d malloc \u8fd4\u56de\u7684\u5757\u7684\u5730\u5740\u603b\u662f 8 \u7684\u500d\u6570, 64 \u4f4d\u6a21\u5f0f\u4e2d\u5730\u5740\u603b\u662f 16 \u7684\u500d\u6570. \u5982\u679c malloc \u9047\u5230\u95ee\u9898, \u5982\u8981\u6c42\u7684\u5185\u5b58\u5757\u6bd4\u53ef\u7528\u7684\u865a\u62df\u5185\u5b58\u8fd8\u8981\u5927, \u90a3\u4e48\u5c31\u8fd4\u56de NULL, \u5e76\u8bbe\u7f6e errn. malloc \u4e0d\u521d\u59cb\u5316\u8fd4\u56de\u7684\u5185\u5b58, calloc \u4f1a\u5c06\u5185\u5b58\u521d\u59cb\u4e3a 0. realloc \u53ef\u4ee5\u7528\u6765\u6539\u53d8\u4e00\u4e2a\u4ee5\u524d\u5df2\u5206\u914d\u5757\u7684\u5927\u5c0f. \u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 free \u51fd\u6570\u6765\u91ca\u653e\u5df2\u5206\u914d\u7684\u5806\u5757 #include <stdlib.h> void free ( void * ptr ); ptr \u53c2\u6570\u5fc5\u987b\u6307\u5411\u4e00\u4e2a\u4ece malloc``calloc``realooc \u83b7\u5f97\u7684\u5df2\u5206\u914d\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e, \u5982\u679c\u4e0d\u662f, \u90a3\u4e48 free \u7684\u884c\u4e3a\u5c31\u662f\u672a\u5b9a\u4e49\u7684, \u800c\u4e14\u56e0\u4e3a\u4ed6\u6ca1\u6709\u8fd4\u56de\u503c, \u5b83\u4e5f\u4e0d\u4f1a\u544a\u8bc9\u5e94\u7528\u51fa\u73b0\u4e86\u9519\u8bef. \u52a8\u6001\u5185\u5b58\u5206\u914d\u5668\u53ef\u4ee5\u4f7f\u7528 mmap \u548c munmap \u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 sbrk \u51fd\u6570\u6765\u5411\u5185\u6838\u7533\u8bf7\u5806\u5185\u5b58\u7a7a\u95f4\uff0c\u53ea\u6709\u5148\u7533\u8bf7\u83b7\u5f97\u5806\u5185\u5b58\u7a7a\u95f4\u540e\uff0c\u624d\u80fd\u5c1d\u8bd5\u5bf9\u5757\u8fdb\u884c\u5206\u914d\u8ba9\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528. #include <unistd.h> void * sbrk ( intptr_t incr ); sbrk \u51fd\u6570\u5c06\u5185\u6838\u7684 brk \u6307\u9488\u589e\u52a0 incr \u6765\u6269\u5c55\u548c\u6536\u7f29\u5806. \u5982\u679c\u6210\u529f\u5c31\u8fd4\u56de brk \u7684\u65e7\u503c, \u5426\u5219\u8fd4\u56de -1 \u5e76\u8bbe\u7f6e errno \u4e3a ENOMEM . \u5982\u679c incr \u4e3a 0 \u90a3\u4e48 sbrk \u5c31\u8fd4\u56de brk \u5f53\u524d\u503c. \u7528\u4e00\u4e2a\u8d1f\u7684 incr \u8c03\u7528 sbrk \u662f\u5408\u6cd5\u7684, \u8fd4\u56de\u503c\u6307\u5411\u65b0\u5806\u9876\u5411\u4e0a abs(incr) \u5b57\u8282\u5904. Example \u672c\u8282\u4e2d\u6211\u4eec\u5047\u8bbe\u5b57\u662f 4 \u5b57\u8282, \u53cc\u5b57\u662f 8 \u5b57\u8282. \u6bcf\u4e2a\u65b9\u5757\u4ee3\u8868\u4e00\u4e2a 4 \u5b57\u8282\u7684\u5b57. \u5176\u4e2d b \u5373\u8fdb\u884c\u4e86\u5bf9\u9f50.","title":"malloc\u548cfree\u51fd\u6570"},{"location":"CSAPP/9/#_18","text":"\u663e\u793a\u5206\u914d\u5668\u5fc5\u987b\u5728\u4e00\u4e9b\u76f8\u5f53\u4e25\u683c\u7684\u7ea6\u675f\u6761\u4ef6\u4e0b\u5de5\u4f5c: \u5904\u7406\u4efb\u610f\u8bf7\u6c42\u5e8f\u5217 \u4e00\u4e2a\u5e94\u7528\u53ef\u4ee5\u7531\u4efb\u610f\u7684\u5206\u914d\u548c\u91ca\u653e\u8bf7\u6c42\u5e8f\u5217, \u53ea\u8981\u6ee1\u8db3\u5148\u5206\u914d\u540e\u91ca\u653e. \u5206\u914d\u5668\u4e0d\u53ef\u4ee5\u5047\u8bbe\u5206\u914d\u548c\u91ca\u653e\u7684\u987a\u5e8f. \u7acb\u5373\u76f8\u5e94\u8bf7\u6c42 \u5206\u914d\u5668\u5fc5\u987b\u7acb\u5373\u76f8\u5e94\u8bf7\u6c42, \u4e0d\u5141\u8bb8\u5206\u914d\u5668\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\u91cd\u65b0\u6392\u5217\u6216\u8005\u7f13\u51b2\u8bf7\u6c42. \u53ea\u4f7f\u7528\u5806 \u4e3a\u4e86\u4f7f\u5206\u914d\u5668\u53ef\u6269\u5c55, \u4f7f\u7528\u7684\u4efb\u4f55\u975e\u6807\u91cf\u6570\u636e\u7ed3\u6784\u5fc5\u987b\u4fdd\u5b58\u5728\u5806\u91cc. \u5bf9\u9f50\u5757 \u5206\u914d\u5668\u5fc5\u987b\u5bf9\u9f50\u5757, \u4f7f\u5f97\u5b83\u4eec\u53ef\u4ee5\u4fdd\u5b58\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u5bf9\u8c61. \u4e0d\u4fee\u6539\u5df2\u5206\u914d\u7684\u5757 \u5206\u914d\u5668\u53ea\u80fd\u64cd\u4f5c\u6539\u53d8\u7a7a\u95f2\u5757, \u4e00\u65e6\u5757\u88ab\u5206\u914d\u5c31\u4e0d\u5141\u8bb8\u4fee\u6539\u6216\u8005\u79fb\u52a8. \u6211\u4eec\u6709\u4e24\u4e2a\u6027\u80fd\u76ee\u6807: \u6700\u5927\u5316\u541e\u5410\u7387 \u541e\u5410\u7387 \u5b9a\u4e49\u4e3a\u6bcf\u4e2a\u5355\u4f4d\u65f6\u95f4\u91cc\u5b8c\u6210\u7684\u8bf7\u6c42\u6570. \u4e00\u822c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u6ee1\u8db3\u5206\u914d\u548c\u91ca\u653e\u8bf7\u6c42\u7684\u5e73\u5747\u65f6\u95f4\u6700\u5c0f\u5316\u6765\u4f7f\u541e\u5410\u7387\u6700\u5927\u5316. \u5408\u7406\u6027\u80fd\u7684\u5206\u914d\u5668\u6307\u4e00\u4e2a\u5206\u914d\u8bf7\u6c42\u7684\u6700\u7cdf\u8fd0\u884c\u65f6\u95f4\u4e0e\u7a7a\u95f2\u5757\u6570\u91cf\u6210\u7ebf\u6027\u5173\u7cfb, \u800c\u4e00\u4e2a\u91ca\u653e\u8bf7\u6c42\u7684\u8fd0\u884c\u65f6\u95f4\u662f\u5e38\u6570. \u6700\u5927\u5316\u5185\u5b58\u5229\u7528\u7387 \u5047\u8bbe n \u4e2a\u5206\u914d\u548c\u91ca\u653e\u7684\u67d0\u79cd\u5e8f\u5217 \\(R_0, R_1, \\ldots, R_k,\\ldots, R_{n-1}\\) , \u7528 \\(H_k\\) \u8868\u793a\u5f53\u524d\u5806\u7684\u5927\u5c0f. \u6709\u6548\u8f7d\u8377(payload) : \u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u4e00\u4e2a p \u5b57\u8282\u7684\u5757, \u90a3\u4e48\u5f97\u5230\u7684\u5df2\u5206\u914d\u5757\u7684 \u6709\u6548\u8f7d\u8377 \u662f p \u5b57\u8282. \u805a\u7126\u6709\u6548\u8f7d\u8377(aggregate payload) : \u7528 \\(P_k\\) \u8868\u793a, \u4e3a\u5f53\u524d\u5df2\u5206\u914d\u7684\u6709\u6548\u8f7d\u8377\u4e4b\u548c. \u5cf0\u503c\u5229\u7528\u7387(peak utilization) : \u5cf0\u503c\u5229\u7528\u7387 \u662f\u6700\u5e38\u7528\u6765\u8bc4\u5224\u5185\u5b58\u5229\u7528\u7387\u7684\u6807\u51c6. \u5047\u8bbe \\(H_k\\) \u662f\u5355\u8c03\u4e0d\u9012\u51cf\u7684, \u90a3\u4e48\u524d k+1 \u4e2a\u8bf7\u6c42\u7684\u5cf0\u503c\u5229\u7528\u7387 \\(U_k=\\frac{max_{i<=k}P_i}{H_k}\\) . \u5206\u914d\u5668\u7684\u76ee\u6807\u5c31\u662f\u4f7f\u5f97 \\(U_{n-1}\\) \u6700\u5927\u5316. \u6ce8: \u6211\u4eec\u53ef\u4ee5\u653e\u5bbd\u5355\u8c03\u6027\u5047\u8bbe,\u8ba9 \\(H_k\\) \u8868\u793a\u524d k+1 \u4e2a\u8bf7\u6c42\u7684\u5806\u7684\u6700\u9ad8\u5cf0. \u9020\u6210\u5806\u5229\u7528\u7387\u4f4e\u7684\u4e3b\u8981\u539f\u56e0\u4e4b\u4e00\u5c31\u662f \u788e\u7247(fragmentation) . \u5185\u90e8\u788e\u7247 \u4e00\u4e2a\u5df2\u5206\u914d\u5757\u6bd4\u6709\u6548\u8f7d\u8377\u5927, \u6bd4\u5982\u5206\u914d\u5668\u4e3a\u4e86\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42, \u5c31\u4f1a\u7533\u8bf7\u989d\u5916\u7684\u5185\u5b58\u7a7a\u95f4. \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5df2\u5206\u914d\u5757\u7684\u5927\u5c0f\u4e0e\u5176\u6709\u6548\u8f7d\u8377\u7684\u5dee\u6765\u91cf\u5316\u5185\u90e8\u788e\u7247\uff0c\u5219\u5185\u90e8\u788e\u7247\u7684\u6570\u91cf\u4e3b\u8981\u53d6\u51b3\u4e8e\u4e4b\u524d\u8bf7\u6c42\u7684\u6a21\u5f0f\u548c\u5206\u914d\u5668\u7684\u5b9e\u73b0\u65b9\u6cd5. \u5916\u90e8\u788e\u7247 \u5f53\u7a7a\u95f2\u5185\u5b58\u5408\u8ba1\u8d77\u6765\u8db3\u591f\u6ee1\u8db3\u4e00\u4e2a\u5206\u914d\u8bf7\u6c42, \u4f46\u662f\u6ca1\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u7a7a\u95f2\u5757\u8db3\u591f\u5927\u53ef\u4ee5\u6765\u5904\u7406\u8fd9\u4e2a\u8bf7\u6c42\u65f6\u53d1\u751f\u7684. \u5982\u56fe \u5916\u90e8\u788e\u7247\u7684\u91cf\u5316\u66f4\u52a0\u56f0\u96be, \u56e0\u4e3a\u5b83\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u4ee5\u524d\u8bf7\u6c42\u7684\u6a21\u5f0f\u548c\u5206\u914d\u5668\u7684\u5904\u7406\u65b9\u5f0f, \u8fd8\u53d6\u51b3\u4e8e\u5c06\u6765\u8bf7\u6c42\u7684\u6a21\u5f0f. \u6240\u4ee5\u5206\u914d\u5668\u901a\u5e38\u91c7\u7528\u542f\u53d1\u5f0f\u7b56\u7565\u6765\u8bd5\u56fe\u7ef4\u6301\u5c11\u91cf\u7684\u5927\u7a7a\u95f2\u5757, \u800c\u4e0d\u662f\u5927\u91cf\u7684\u5c0f\u7a7a\u95f2\u5757. \u4e3a\u4e86\u5e73\u8861\u597d\u541e\u5410\u7387\u548c\u5229\u7528\u7387\u4e4b\u95f4\u7684\u5e73\u8861, \u6211\u4eec\u9700\u8981\u8003\u8651\u51e0\u4e2a\u95ee\u9898: \u7a7a\u95f2\u5757\u7ec4\u7ec7 : \u5982\u4f55\u8bb0\u5f55\u7a7a\u95f2\u5757? \u653e\u7f6e : \u5982\u4f55\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u7a7a\u95f2\u5757\u6765\u653e\u7f6e\u4e00\u4e2a\u65b0\u5206\u914d\u7684\u5757? \u5206\u5272 : \u5728\u5c06\u4e00\u4e2a\u65b0\u5206\u914d\u7684\u5757\u653e\u5230\u67d0\u4e2a\u7a7a\u95f2\u5757\u4e4b\u540e, \u5982\u4f55\u5904\u7406\u7a7a\u95f2\u5757\u4e2d\u7684\u5269\u4f59\u90e8\u5206? \u5408\u5e76 : \u5982\u4f55\u5904\u7406\u4e00\u4e2a\u521a\u521a\u91ca\u653e\u7684\u5757?","title":"\u5206\u914d\u5668\u7684\u8981\u6c42\u548c\u76ee\u6807"},{"location":"CSAPP/9/#_19","text":"\u4e00\u4e2a\u5757\u7531\u4e00\u4e2a\u5b57\u7684\u5934\u90e8, \u6709\u6548\u8f7d\u8377, \u4ee5\u53ca\u53ef\u80fd\u7684\u4e00\u4e9b\u989d\u5916\u7684\u586b\u5145\u7ec4\u6210\u7684. \u5934\u90e8 \u5934\u90e8\u5927\u5c0f\u4e3a\u4e00\u4e2a\u5b57. \u5934\u90e8\u7f16\u7801\u4e86\u8fd9\u4e2a\u5757\u7684\u5927\u5c0f(\u5757\u5927\u5c0f\u5305\u62ec\u5934\u90e8\u548c\u5bf9\u9f50\u586b\u5145), \u4ee5\u53ca\u8fd9\u4e2a\u5757\u662f\u5426\u5206\u914d. \u5982\u679c\u6211\u4eec\u8981\u6ee1\u8db3\u53cc\u5b57\u5bf9\u9f50, \u90a3\u4e48\u5757\u7684\u5927\u5c0f\u603b\u662f 8 \u7684\u500d\u6570, \u56e0\u6b64\u5757\u5927\u5c0f\u7684\u7b2c\u4e09\u4f4d(\u4e8c\u8fdb\u5236)\u603b\u662f 0, \u6211\u4eec\u5c31\u7528\u5176\u4e2d\u7684\u6700\u4f4e\u4f4d\u6765\u8868\u793a\u8fd9\u4e2a\u5757\u7684\u5206\u914d\u60c5\u51b5. \u6709\u6548\u8f7d\u8377 \u5e94\u7528 malloc \u8bf7\u6c42\u7684\u6709\u6548\u8f7d\u8377 \u586b\u5145 \u53ef\u9009\u7684, \u5206\u914d\u5668\u7528\u6765\u6ee1\u8db3\u5bf9\u9f50\u8981\u6c42, \u6216\u8005\u5904\u7406\u5916\u90e8\u788e\u7247. \u6211\u4eec\u79f0\u8fd9\u79cd\u7ed3\u6784\u4e3a \u9690\u5f0f\u7a7a\u95f2\u94fe\u8868 , \u56e0\u4e3a\u7a7a\u95f2\u5757\u901a\u8fc7\u5934\u90e8\u7684\u5927\u5c0f\u5b57\u6bb5\u9690\u542b\u5730\u8fde\u63a5. \u5206\u914d\u5668\u53ef\u4ee5\u4fbf\u5229\u5806\u4e2d\u7684\u6240\u6709\u5757, \u4ece\u800c\u95f4\u63a5\u5730\u904d\u5386\u6574\u4e2a\u7a7a\u95f2\u5757\u7684\u96c6\u5408. \u6ce8 : \u6211\u4eec\u9700\u8981\u67d0\u79cd\u7279\u6b8a\u6807\u8bb0\u7684\u7ed3\u675f\u5757, \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f\u4e00\u4e2a\u8bbe\u7f6e\u4e86\u5df2\u5206\u914d\u4f4d\u800c\u5927\u5c0f\u4e3a 0 \u7684 \u7ec8\u6b62\u5934\u90e8(terminating header) . \u7531\u4e8e\u5730\u5740\u5bf9\u9f50\u8981\u6c42\u548c\u5206\u914d\u5668\u5bf9\u5757\u683c\u5f0f\u7684\u9009\u62e9\uff0c\u4f1a\u5bf9\u6700\u5c0f\u5757\u7684\u5927\u5c0f\u6709\u9650\u5236\uff0c \u6ca1\u6709\u5df2\u5206\u914d\u7684\u5757\u548c\u7a7a\u95f2\u5757\u6bd4\u6700\u5c0f\u5757\u8fd8\u5c0f \uff0c\u5982\u679c\u6bd4\u6700\u5c0f\u5757\u8fd8\u5c0f\uff0c\u5c31\u4f1a\u53d8\u6210\u5916\u90e8\u788e\u7247(\u6240\u4ee5\u6700\u5c0f\u5757\u8d8a\u5927\uff0c\u5185\u90e8\u788e\u7247\u7a0b\u5ea6\u8d8a\u9ad8).","title":"\u9690\u5f0f\u7a7a\u95f2\u94fe\u8868"},{"location":"CSAPP/9/#_20","text":"\u5f53\u4e00\u4e2a\u5e94\u7528\u8bf7\u6c42\u4e00\u4e2a k \u5b57\u8282\u7684\u5757\u65f6, \u5206\u914d\u5668\u641c\u7d22\u7a7a\u95f2\u94fe\u8868, \u67e5\u627e\u4e00\u4e2a\u8db3\u591f\u5927\u53ef\u4ee5\u653e\u7f6e\u6240\u8bf7\u6c42\u5757\u7684\u7a7a\u95f2\u5757. \u5206\u914d\u5668\u6267\u884c\u8fd9\u79cd\u641c\u7d22\u7684\u65b9\u5f0f\u662f\u7531 \u653e\u7f6e\u7b56\u7565(placement policy) \u786e\u5b9a\u7684. \u9996\u6b21\u9002\u914d(first fit) : \u4ece\u5934\u5f00\u59cb\u641c\u7d22\u7a7a\u95f2\u94fe\u8868, \u9009\u62e9\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u7a7a\u95f2\u5757. \u4f18\u70b9 : \u5c06\u5927\u7684\u7a7a\u95f2\u5757\u4fdd\u7559\u5728\u540e\u9762 \u7f3a\u70b9 : \u5728\u9760\u8fd1\u94fe\u8868\u8d77\u59cb\u5904\u7559\u4e0b\u5c0f\u7a7a\u95f2\u5757\u7684\"\u788e\u7247\", \u589e\u52a0\u4e86\u5bf9\u8f83\u5927\u5757\u7684\u641c\u7d22\u65f6\u95f4. \u4e0b\u4e00\u6b21\u9002\u914d(next fit) : \u4ece\u4e0a\u4e00\u6b21\u67e5\u8be2\u7ed3\u675f\u7684\u5730\u65b9\u5f00\u59cb\u641c\u7d22, \u9009\u62e9\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u7a7a\u95f2\u5757. \u4f18\u70b9 : \u8fd0\u884c\u6bd4\u9996\u6b21\u9002\u914d\u5757\u4e00\u4e9b, \u53ef\u4ee5\u8df3\u8fc7\u5f00\u5934\u7684\u788e\u7247 \u7f3a\u70b9 : \u5185\u5b58\u5229\u7528\u7387\u6bd4\u9996\u6b21\u9002\u914d\u4f4e\u5f88\u591a \u6700\u4f73\u9002\u914d(best fit) : \u68c0\u67e5\u6bcf\u4e2a\u7a7a\u95f2\u5757, \u9009\u62e9\u9002\u5408\u6240\u9700\u8bf7\u6c42\u5927\u5c0f\u7684\u6700\u5c0f\u7a7a\u95f2\u5757. \u4f18\u70b9 : \u5185\u5b58\u5229\u7528\u7387\u6bd4\u524d\u4e24\u8005\u90fd\u9ad8\u4e00\u4e9b \u7f3a\u70b9 : \u9700\u8981\u904d\u5386\u5b8c\u6574\u7684\u7a7a\u95f2\u94fe\u8868","title":"\u653e\u7f6e\u5df2\u5206\u914d\u7684\u5757"},{"location":"CSAPP/9/#_21","text":"\u4e00\u65e6\u5206\u914d\u5668\u627e\u5230\u4e00\u4e2a\u5339\u914d\u7684\u7a7a\u95f2\u5757, \u5b83\u5fc5\u987b\u505a\u53e6\u4e00\u4e2a\u7b56\u7565\u51b3\u5b9a, \u90a3\u5c31\u662f\u5206\u914d\u7a7a\u95f2\u5757\u4e2d\u591a\u5c11\u7a7a\u95f4. \u4e00\u4e2a\u9009\u62e9\u662f\u7528\u6574\u4e2a\u7a7a\u95f2\u5757, \u867d\u7136\u7b80\u5355\u5feb\u6377\u4f46\u4f1a\u4ea7\u751f\u5185\u90e8\u788e\u7247. \u5982\u679c\u653e\u7f6e\u7b56\u7565\u503e\u5411\u4e8e\u4ea7\u751f\u8f83\u597d\u7684\u5339\u914d\u90a3\u4e48\u4e5f\u53ef\u4ee5\u63a5\u6536\u989d\u5916\u7684\u5185\u90e8\u788e\u7247. \u5206\u914d\u5668\u901a\u5e38\u4f1a\u5c06\u8fd9\u4e2a\u7a7a\u95f2\u5757\u5206\u5272\u6210\u4e24\u90e8\u5206, \u7b2c\u4e00\u90e8\u5206\u53d8\u6210\u5206\u914d\u5757, \u800c\u5269\u4e0b\u7684\u53d8\u6210\u4e00\u4e2a\u65b0\u7684\u7a7a\u95f2\u5757.","title":"\u5206\u5272\u5185\u5b58\u5757"},{"location":"CSAPP/9/#_22","text":"\u5982\u679c\u5206\u914d\u5668\u4e0d\u80fd\u4e3a\u8bf7\u6c42\u627e\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757, \u4e00\u4e2a\u9009\u62e9\u662f\u901a\u8fc7\u5408\u5e76\u90a3\u4e9b\u5728\u5185\u5b58\u4e2d\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2\u5757\u6765\u521b\u5efa\u4e00\u4e9b\u66f4\u5927\u7684\u7a7a\u95f2\u5757. \u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u8c03\u7528 sbrk \u51fd\u6570, \u5411\u5185\u6838\u8bf7\u6c42\u989d\u5916\u7684\u5806\u5185\u5b58. \u5206\u914d\u5668\u5c06\u989d\u5916\u7684\u5185\u5b58\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5927\u7a7a\u95f2\u5757, \u5c06\u8fd9\u4e2a\u5757\u63d2\u5165\u5230\u7a7a\u95f2\u94fe\u8868\u4e2d, \u7136\u540e\u5c06\u88ab\u8bf7\u6c42\u7684\u5757\u653e\u5230\u8fd9\u4e2a\u65b0\u7684\u7a7a\u95f2\u5757\u4e2d.","title":"\u83b7\u53d6\u989d\u5916\u7684\u5806\u5185\u5b58"},{"location":"CSAPP/9/#_23","text":"\u5f53\u5206\u914d\u5668\u91ca\u653e\u4e00\u4e2a\u5df2\u5206\u914d\u5757\u65f6, \u53ef\u80fd\u4f1a\u7531\u5176\u4ed6\u7a7a\u95f2\u5757\u4e0e\u4e2d\u56fd\u65b0\u91ca\u653e\u7684\u7a7a\u95f2\u5757\u76f8\u90bb. \u8fd9\u4e9b\u90bb\u63a5\u7684\u7a7a\u95f2\u5757\u5f15\u8d77\u4e00\u79cd\u73b0\u8c61, \u5373 \u5047\u788e\u7247(fault fragmentation) . \u5206\u914d\u5668\u53ef\u4ee5\u9009\u62e9 \u7acb\u5373\u5408\u5e76 \u6216\u8005 \u63a8\u8fdf\u5408\u5e76 . \u7acb\u5373\u5408\u5e76(immediate coalescing) : \u6bcf\u6b21\u4e00\u4e2a\u5757\u88ab\u91ca\u653e\u65f6, \u5c31\u5408\u5e76\u6240\u6709\u7684\u76f8\u90bb\u5757. \u63a8\u8fdf\u5408\u5e76(deferred coalescing) : \u627e\u4e0d\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757\u65f6, \u518d\u626b\u63cf\u6574\u4e2a\u5806\u8fdb\u884c\u5408\u5e76. \u7acb\u5373\u5408\u5e76\u7b80\u5355\u660e\u4e86, \u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u5185\u5b8c\u6210, \u4f46\u5bf9\u4e8e\u67d0\u4e9b\u8bf7\u6c42\u6a21\u5f0f\u4f1a\u4ea7\u751f\u4e00\u79cd\u5f62\u5f0f\u7684\u6296\u52a8, \u5373\u5757\u53cd\u590d\u5730\u5408\u5e76, \u7136\u540e\u9a6c\u4e0a\u88ab\u5206\u5272. \u5177\u4f53\u5b9e\u73b0\u5408\u5e76\u4e2d: \u5408\u5e76\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5757\u662f\u7b80\u5355\u9ad8\u6548\u7684, \u56e0\u4e3a\u5f53\u524d\u5757\u5934\u90e8\u6307\u5411\u4e0b\u4e00\u4e2a\u5757\u7684\u5934\u90e8. \u53ea\u9700\u8981\u68c0\u67e5\u4e0b\u4e00\u4e2a\u5757\u7684\u5934\u90e8, \u770b\u5b83\u662f\u5426\u7a7a\u95f2\u5373\u53ef. \u5982\u679c\u662f, \u5c06\u5927\u5c0f\u76f8\u52a0\u5373\u53ef. \u4f46\u662f\u5408\u5e76\u524d\u4e00\u4e2a\u5757, \u9700\u8981\u4f7f\u7528 \u8fb9\u754c\u6807\u8bb0(boundray tag) . \u5728\u6bcf\u4e2a\u5757\u7684\u7ed3\u5c3e\u5904\u6dfb\u52a0\u4e00\u4e2a \u811a\u90e8(footer) , \u811a\u90e8\u5c31\u662f\u5934\u90e8\u7684\u4e00\u4e2a\u526f\u672c. \u5982\u679c\u6bcf\u4e2a\u5757\u90fd\u5305\u62ec\u8fd9\u6837\u4e00\u4e2a\u811a\u90e8, \u90a3\u4e48\u5206\u914d\u5668\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u5b83\u7684\u811a\u90e8\u5224\u65ad\u524d\u4e00\u4e2a\u5757\u7684\u4f4d\u7f6e\u548c\u72b6\u6001. \u8fd9\u4e2a\u811a\u90e8\u603b\u662f\u5728\u8ddd\u5f53\u524d\u5757\u5f00\u59cb\u4f4d\u7f6e\u4e00\u4e2a\u5b57\u7684\u8ddd\u79bb. \u53ef\u4ee5\u5c06\u60c5\u51b5\u5206\u4e3a\u4e0b\u9762\u51e0\u79cd: \u524d\u4e00\u5757\u548c\u540e\u4e00\u5757\u90fd\u662f\u5206\u914d\u7684\uff1a\u6b64\u65f6\u4e0d\u4f1a\u53d1\u751f\u5408\u5e76\u64cd\u4f5c. \u524d\u4e00\u5757\u662f\u5df2\u5206\u914d\u7684\uff0c\u540e\u4e00\u5757\u662f\u7a7a\u95f2\u7684\uff1a\u5f53\u524d\u5757\u4f1a\u5c06\u5934\u90e8\u4e2d\u7684\u5757\u5927\u5c0f\u8bbe\u7f6e\u4e3a\u5f53\u524d\u5757\u7684\u5927\u5c0f\u548c\u4e0b\u4e00\u5757\u5927\u5c0f\u4e4b\u548c\uff0c\u5e76\u4e14\u4fee\u6539\u4e0b\u4e00\u5757\u7684\u811a\u90e8. \u524d\u4e00\u5757\u662f\u7a7a\u95f2\u7684\uff0c\u4e0b\u4e00\u5757\u662f\u5df2\u5206\u914d\u7684\uff1a\u524d\u4e00\u5757\u4f1a\u5c06\u5934\u90e8\u4e2d\u7684\u5757\u5927\u5c0f\u8bbe\u7f6e\u4e3a\u81ea\u5df1\u7684\u5757\u5927\u5c0f\u548c\u5f53\u524d\u5757\u5927\u5c0f\u4e4b\u548c\uff0c\u5e76\u4e14\u4fee\u6539\u5f53\u524d\u5757\u7684\u811a\u90e8. \u524d\u4e00\u5757\u548c\u5f53\u524d\u5feb\u90fd\u662f\u7a7a\u95f2\u7684\uff1a\u524d\u4e00\u5757\u4f1a\u5c06\u5934\u90e8\u4e2d\u7684\u5757\u5927\u5c0f\u8bbe\u7f6e\u4e3a\u8fd9\u4e09\u4e2a\u5757\u7684\u5927\u5c0f\u4e4b\u548c\uff0c\u5e76\u4fee\u6539\u4e0b\u4e00\u5757\u7684\u811a\u90e8. \u8be5\u6280\u672f\u7684\u7f3a\u70b9\u662f\u4f1a\u663e\u8457\u589e\u52a0\u5185\u5b58\u5f00\u9500\uff0c\u7531\u4e8e\u5f15\u5165\u4e86\u811a\u90e8\uff0c\u4f7f\u5f97\u6709\u6548\u8f7d\u8377\u5927\u5c0f\u53d8\u5c0f\uff0c\u800c\u4f7f\u5f97\u5185\u90e8\u788e\u7247\u53d8\u591a\u4e86\uff0c\u5e76\u4e14\u6700\u5c0f\u5757\u7684\u5927\u5c0f\u53d8\u5927\u5bfc\u81f4\u5916\u90e8\u788e\u7247\u4e5f\u53d8\u591a\u4e86. \u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\uff0c\u6709\u4e9b\u60c5\u51b5\u662f\u4e0d\u9700\u8981\u8fb9\u754c\u6807\u8bb0\u7684\uff0c\u53ea\u6709\u5728\u5408\u5e76\u65f6\u624d\u9700\u8981\u811a\u90e8\uff0c\u800c\u6211\u4eec\u53ea\u4f1a\u5728\u7a7a\u95f2\u5757\u4e0a\u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u5728\u5df2\u5206\u914d\u7684\u5757\u4e0a\u53ef\u4ee5\u4e0d\u9700\u8981\u811a\u90e8\uff0c\u90a3\u7a7a\u95f2\u5757\u5982\u4f55\u5224\u65ad\u524d\u4e00\u4e2a\u5757\u662f\u5426\u4e3a\u5df2\u5206\u914d\u7684\u5462\uff1f\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u5934\u90e8\u7684 3 \u4e2a\u4f4d\u4e2d\u7528\u4e00\u4e2a\u4f4d\u6765\u6807\u8bb0\u524d\u4e00\u4e2a\u5757\u662f\u5426\u4e3a\u7a7a\u95f2\u7684\uff0c\u5982\u679c\u524d\u4e00\u4e2a\u5757\u4e3a\u5df2\u5206\u914d\u7684\uff0c\u5219\u65e0\u9700\u5173\u5fc3\u524d\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u8fdb\u884c\u5408\u5e76\uff1b\u5982\u679c\u524d\u4e00\u4e2a\u5757\u4e3a\u7a7a\u95f2\u7684\uff0c\u5219\u524d\u4e00\u4e2a\u5757\u81ea\u5df1\u5c31\u6709\u811a\u90e8\uff0c\u8bf4\u660e\u4e86\u524d\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\uff0c\u5219\u53ef\u4ee5\u987a\u5229\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c. \u5373, \u5df2\u5206\u914d\u5757\u53ef\u4ee5\u4e0d\u7528\u811a\u90e8 .","title":"\u5408\u5e76\u7a7a\u95f2\u5757"},{"location":"CSAPP/9/#_24","text":"","title":"\u5b9e\u73b0\u9690\u5f0f\u7a7a\u95f2\u94fe\u8868"},{"location":"CSAPP/9/#_30","text":"\u5806\u53ef\u4ee5\u7ec4\u7ec7\u6210\u4e00\u4e2a\u53cc\u5411\u7a7a\u95f2\u94fe\u8868, \u6bcf\u4e2a\u7a7a\u95f2\u5757\u91cc\u90fd\u5305\u542b\u4e00\u4e2a pred(\u524d\u9a71) \u548c succ(\u540e\u7ee7)\u6307\u9488. \u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u9996\u6b21\u9002\u914d\u7684\u5206\u914d\u65f6\u95f4\u4ece\u5757\u603b\u6570\u7684\u7ebf\u6027\u65f6\u95f4\u51cf\u5c11\u5230\u7a7a\u95f2\u5757\u6570\u91cf\u7684\u7ebf\u6027\u65f6\u95f4, \u4e0d\u8fc7\u91ca\u653e\u4e00\u4e2a\u5757\u7684\u65f6\u95f4\u662f\u53d6\u51b3\u4e8e\u6392\u5e8f\u7b56\u7565: \u540e\u8fdb\u5148\u51fa(LIFO) : \u5c06\u65b0\u91ca\u653e\u7684\u5757\u653e\u5728\u94fe\u8868\u5f00\u59cb\u5904. \u8fd9\u6837\u91ca\u653e\u4e00\u4e2a\u5757\u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u5b8c\u6210, \u5982\u679c\u4f7f\u7528\u8fb9\u754c\u6807\u8bb0\u90a3\u4e48\u5408\u5e76\u4e5f\u662f\u5e38\u6570\u65f6\u95f4. \u5f53\u6211\u4eec\u4f7f\u7528\u9996\u6b21\u9002\u914d\u7684\u653e\u7f6e\u7b56\u7565\u65f6, \u5206\u914d\u5668\u4f1a\u6700\u5148\u68c0\u67e5\u4f7f\u7528\u8fc7\u7684\u5757. \u5730\u5740\u987a\u5e8f : \u94fe\u8868\u6bcf\u4e2a\u5757\u7684\u5730\u5740\u90fd\u5c0f\u4e8e\u540e\u7ee7\u7684\u5730\u5740. \u8fd9\u79cd\u60c5\u51b5\u4e0b\u91ca\u653e\u4e00\u4e2a\u5757\u9700\u8981\u7ebf\u6027\u65f6\u95f4\u6765\u641c\u7d22\u5b9a\u4f4d\u5408\u9002\u7684\u524d\u9a71, \u4f46\u53ef\u4ee5\u6709\u66f4\u9ad8\u7684\u5185\u5b58\u5229\u7528\u7387.","title":"\u663e\u5f0f\u7a7a\u95f2\u94fe\u8868"},{"location":"CSAPP/9/#_31","text":"\u5206\u79bb\u5b58\u50a8(segregated storage) \u7ef4\u62a4\u591a\u4e2a\u7a7a\u95f2\u94fe\u8868, \u5176\u4e2d\u6bcf\u4e2a\u94fe\u8868\u4e2d\u7684\u5757\u6709\u5927\u81f4\u76f8\u7b49\u7684\u5927\u5c0f. \u4e00\u822c\u601d\u8def\u662f\u5c06\u6240\u6709\u53ef\u80fd\u7684\u5757\u5927\u5c0f\u5212\u5206\u4e3a\u7b49\u4ef7\u7c7b, \u4e5f\u53eb \u5927\u5c0f\u7c7b(size class) , \u6bd4\u5982\u53ef\u4ee5\u6839\u636e 2 \u7684\u5e42\u6b21\u6765\u5212\u5206\u5757\u5927\u5c0f. \\(\\{1\\}, \\{2\\}, \\{3,4\\}, \\ldots, \\{5,6,7, 8\\}\\) \u5206\u914d\u5668\u7ef4\u62a4\u4e00\u4e2a\u7a7a\u95f2\u94fe\u8868\u6570\u7ec4, \u6bcf\u4e2a\u5927\u5c0f\u7c7b\u4e00\u4e2a\u7a7a\u95f2\u94fe\u8868, \u6309\u7167\u5927\u5c0f\u5347\u5e8f\u6392\u5217. \u5f53\u5206\u914d\u5668\u9700\u8981\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u5757\u65f6, \u5c31\u641c\u7d22\u76f8\u5e94\u7684\u7a7a\u95f2\u94fe\u8868. \u5982\u679c\u4e0d\u80fd\u627e\u5230\u5408\u9002\u7684\u5757\u5bf9\u5e94\u5c31\u641c\u7d22\u4e0b\u4e00\u4e2a\u94fe\u8868.","title":"\u5206\u79bb\u7684\u7a7a\u95f2\u94fe\u8868"},{"location":"CSAPP/9/#_35","text":"\u5783\u573e\u6536\u96c6\u5668(garbage collector) \u662f\u4e00\u79cd\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668, \u81ea\u52a8\u91ca\u653e\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u7684\u5df2\u5206\u914d\u5757, \u8fd9\u4e9b\u5757\u79f0\u4e3a \u5783\u573e . \u5783\u573e\u5904\u7406\u5668\u5c06\u5185\u5b58\u770b\u4f5c\u4e00\u5f20 \u6709\u5411\u53ef\u8fbe\u56fe(reachability graph) . \u6bcf\u4e2a \u5806\u8282\u70b9 \u5bf9\u5e94\u5806\u4e2d\u7684\u4e00\u4e2a\u5df2\u5206\u914d\u5757. \u6709\u5411\u8fb9 \\(p\\rightarrow q\\) \u610f\u5473\u7740\u5757 p \u4e2d\u67d0\u4e2a\u4f4d\u7f6e\u6307\u5411\u5757 q \u4e2d\u67d0\u4e2a\u4f4d\u7f6e. \u6839\u8282\u70b9 \u5bf9\u5e94\u4e00\u79cd\u4e0d\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e, \u5305\u542b\u6307\u5411\u5806\u4e2d\u7684\u6307\u9488. \u5982\u5bc4\u5b58\u5668\u7684\u53d8\u91cf, \u865a\u62df\u5185\u5b58\u4e2d\u8bfb\u5199\u533a\u57df\u7684\u5168\u5c40\u53d8\u91cf\u7b49. \u5f53\u5b58\u5728\u4e00\u6761\u4ece\u4efb\u610f\u6839\u8282\u70b9\u51fa\u53d1\u5230\u8fbe p \u7684\u6709\u5411\u8def\u5f84\u65f6, \u6211\u4eec\u8bf4 p \u662f \u53ef\u8fbe\u7684 . \u4e0d\u53ef\u8fbe\u8282\u70b9\u5bf9\u5e94\u4e8e\u5783\u573e, \u4e0d\u80fd\u88ab\u518d\u6b21\u5e94\u7528\u548c\u4f7f\u7528. \u5783\u573e\u5904\u7406\u5668\u5c31\u662f\u7ef4\u62a4\u53ef\u8fbe\u56fe\u7684\u67d0\u79cd\u8868\u793a, \u5e76\u901a\u8fc7\u91ca\u653e\u4e0d\u53ef\u8fbe\u8282\u70b9\u5e76\u628a\u5b83\u4eec\u8fd4\u56de\u7ed9\u7a7a\u95f2\u94fe\u8868\u6765\u5b9a\u671f\u56de\u6536\u5b83\u4eec. \u5bf9\u4e8e\u50cf ML \u548c Java \u8bed\u8a00\uff0c\u5176\u5bf9\u6307\u9488\u521b\u5efa\u548c\u4f7f\u7528\u6709\u4e25\u683c\u7684\u8981\u6c42\uff0c\u7531\u6b64\u6765\u6784\u5efa\u5341\u5206\u7cbe\u786e\u7684\u53ef\u8fbe\u56fe\uff0c\u6240\u4ee5\u80fd\u56de\u6536\u6240\u6709\u5783\u573e. \u800c\u5bf9\u4e8e\u50cf C \u548c C++ \u8fd9\u6837\u7684\u8bed\u8a00\uff0c\u5783\u573e\u6536\u96c6\u5668\u65e0\u6cd5\u7ef4\u62a4\u5341\u5206\u7cbe\u786e\u7684\u53ef\u8fbe\u56fe\uff0c\u53ea\u80fd\u6b63\u786e\u5730\u6807\u8bb0\u6240\u6709\u53ef\u8fbe\u8282\u70b9\uff0c\u800c\u6709\u4e00\u4e9b\u4e0d\u53ef\u8fbe\u8282\u70b9\u4f1a\u88ab\u9519\u8bef\u5730\u6807\u8bb0\u4e3a\u53ef\u8fbe\u7684\uff0c\u6240\u4ee5\u4f1a\u9057\u7559\u90e8\u5206\u5783\u573e\uff0c\u8fd9\u79cd\u5783\u573e\u6536\u96c6\u5668\u79f0\u4e3a \u4fdd\u5b88\u7684\u5783\u573e\u6536\u96c6\u5668(Conservative Garbage Collector) . \u5728C\u4e2d\u4f7f\u7528\u5783\u573e\u6536\u96c6\u5668 \u5c06\u5176\u96c6\u6210\u5230 malloc \u51fd\u6570\u4e2d. \u5f53\u5f15\u7528\u8c03\u7528 malloc \u51fd\u6570\u6765\u5206\u914d\u5757\u65f6\uff0c\u5982\u679c\u65e0\u6cd5\u627e\u5230\u5408\u9002\u7684\u7a7a\u95f2\u5757\uff0c\u5c31\u4f1a\u8c03\u7528\u5783\u573e\u6536\u96c6\u5668\u6765\u8bc6\u522b\u51fa\u6240\u6709\u5783\u573e\uff0c\u5e76\u8c03\u7528 free \u51fd\u6570\u6765\u8fdb\u884c\u91ca\u653e\u3002","title":"\u5783\u573e\u6536\u96c6"},{"location":"CSAPP/9/#mark-sweep","text":"Mark&Sweep\u5783\u573e\u6536\u96c6\u5668 \u7531\u4e24\u4e2a\u9636\u6bb5\u7ec4\u6210: \u6807\u8bb0\u9636\u6bb5 : \u6807\u8bb0\u51fa\u6839\u8282\u70b9\u7684\u6240\u6709\u5df2\u8fbe\u548c\u5df2\u5206\u914d\u7684\u540e\u7ee7 \u6e05\u7406\u9636\u6bb5 : \u91ca\u653e\u6bcf\u4e2a\u672a\u88ab\u6807\u8bb0\u7684\u5df2\u5206\u914d\u5757. \u5757\u5934\u90e8\u4e2d\u7a7a\u95f2\u7684\u4f4e\u4f4d\u4e2d\u7684\u4e00\u4f4d\u8868\u793a\u8fd9\u4e2a\u5757\u662f\u5426\u88ab\u6807\u8bb0\u4e86. \u6211\u4eec\u5c06\u4f7f\u7528\u4e0b\u9762\u51fd\u6570: ptr isPtr(ptr p) : \u5982\u679c p \u6307\u5411\u4e00\u4e2a\u5df2\u5206\u914d\u5757\u4e2d\u7684\u67d0\u4e2a\u5b57, \u90a3\u4e48\u5c31\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\u7684\u6307\u9488 p, \u5426\u5219\u8fd4\u56de NULL. int blockMarked(ptr b) : \u5982\u679c\u5757 b \u5df2\u6807\u8bb0, \u8fd4\u56de true. blockAllocated(ptr b) : \u5982\u679c\u5757 b \u5df2\u5206\u914d, \u8fd4\u56de true. void markBlock(ptr b) : \u6807\u8bb0\u5757 b int length(ptr b) : \u8fd4\u56de\u5757 b \u4ee5\u5b57\u4e3a\u5355\u4f4d\u7684\u957f\u5ea6(\u4e0d\u542b\u5934\u90e8) void unmarkBlock(ptr b) : \u5c06\u5757 b \u7684\u72b6\u6001\u7531\u5df2\u6807\u8bb0\u6539\u4e3a\u672a\u6807\u8bb0 ptr nextBlock(ptr b) : \u8fd4\u56de\u5806\u4e2d\u5757 b \u7684\u540e\u7ee7","title":"Mark &amp; Sweep \u5783\u573e\u6536\u96c6\u5668"},{"location":"CSAPP/9/#c-mark-sweep","text":"C \u7a0b\u5e8f\u60f3\u8981\u4f7f\u7528 Mark&Sweep \u5783\u573e\u6536\u96c6\u5668\uff0c\u5728\u5b9e\u73b0 isPtr \u51fd\u6570\u65f6\u5177\u6709\u4e24\u4e2a\u56f0\u96be\uff1a \u8fdb\u5165 isPtr \u51fd\u6570\u65f6\uff0c\u9996\u5148\u9700\u8981\u5224\u65ad\u8f93\u5165\u7684p\u662f\u5426\u4e3a\u6307\u9488\uff0c\u53ea\u6709 p \u4e3a\u6307\u9488\uff0c\u624d\u5224\u65ad p \u662f\u5426\u6307\u5411\u67d0\u4e2a\u5df2\u5206\u914d\u5757\u7684\u6709\u6548\u8f7d\u8377. \u4f46\u662f\u5728 C \u8bed\u8a00\u4e0d\u4f1a\u7528\u7c7b\u578b\u4fe1\u606f\u6765\u6807\u8bb0\u5185\u5b58\u4f4d\u7f6e\uff0c\u6bd4\u5982 int \u6216 float \u8fd9\u4e9b\u6807\u91cf\u5c31\u53ef\u80fd\u88ab\u4f2a\u88c5\u6210\u6307\u9488\uff0c\u6bd4\u5982 p \u5bf9\u5e94\u7684\u662f\u4e00\u4e2a int \u7c7b\u578b\u6570\u636e\uff0c\u4f46\u662f C \u8bef\u4ee5\u4e3a\u662f\u6307\u9488\uff0c\u800c\u5c06\u8be5\u6570\u636e\u4f5c\u4e3a\u6307\u9488\u53c8\u6b63\u597d\u6307\u5411\u67d0\u4e2a\u4e0d\u53ef\u8fbe\u7684\u5df2\u5206\u914d\u5757\u4e2d\uff0c\u5219\u5206\u914d\u5668\u4f1a\u8bef\u4ee5\u4e3a\u8be5\u5206\u914d\u5757\u65f6\u53ef\u8fbe\u7684\uff0c\u9020\u6210\u65e0\u6cd5\u5bf9\u8be5\u5783\u573e\u8fdb\u884c\u56de\u6536. \u8fd9\u4e5f\u662f C \u7a0b\u5e8f\u7684 Mark&Sweep \u5783\u573e\u6536\u96c6\u5668\u5fc5\u987b\u662f\u4fdd\u5b88\u7684\u539f\u56e0. \u5f53\u5224\u65ad p \u4e3a\u6307\u9488\u65f6\uff0c\u5982\u4f55\u786e\u5b9a\u5b83\u6240\u5728\u5757\u7684\u5934\u90e8. \u8fd9\u91cc\u53ef\u4ee5\u5c06\u5df2\u5206\u914d\u7684\u5757\u7ec4\u7ec7\u6210\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5f62\u5f0f\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u4fdd\u8bc1\u5de6\u5b50\u6811\u6240\u6709\u7684\u5757\u90fd\u5728\u8f83\u5c0f\u7684\u5730\u5740\u5904\uff0c\u53f3\u5b50\u6811\u6240\u6709\u7684\u5757\u90fd\u5728\u8f83\u5927\u7684\u5730\u5740\u5904. \u6b64\u65f6\u8f93\u5165\u4e00\u4e2a\u6307\u9488 p\uff0c\u4ece\u8be5\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u6839\u636e\u5757\u5934\u90e8\u7684\u5757\u5927\u5c0f\u5b57\u6bb5\u6765\u5224\u65ad\u6307\u9488\u662f\u5426\u6307\u5411\u8be5\u5757\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u6839\u636e\u5730\u5740\u5927\u5c0f\u53ef\u8df3\u8f6c\u5230\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u8fdb\u884c\u67e5\u627e.","title":"C \u7a0b\u5e8f\u4fdd\u5b88\u7684 Mark &amp; Sweep"},{"location":"CSAPP/9/#c","text":"","title":"C \u7a0b\u5e8f\u4e2d\u5e38\u89c1\u4e0e\u5185\u5b58\u6709\u5173\u7684\u9519\u8bef"},{"location":"CSAPP/9/#_36","text":"\u5bf9\u4e8e\u6bcf\u4e2a\u8fdb\u7a0b\u5185\u6838\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a vm_area_struct \u6570\u636e\u7ed3\u6784\uff0c\u6765\u5c06\u865a\u62df\u5185\u5b58\u5212\u5206\u6210\u4e0d\u540c\u7684\u6bb5\uff0c\u8fd9\u4e5f\u9020\u6210\u865a\u62df\u5185\u5b58\u53ef\u80fd\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5bf9\u4e0d\u5904\u4e8e\u4efb\u4f55\u6bb5\u7684\u865a\u62df\u5185\u5b58\u8fdb\u884c\u5f15\u7528\u65f6\uff0c\u5185\u6838\u5c31\u4f1a\u53d1\u51fa\u6bb5\u5f02\u5e38\u7ec8\u6b62\u7a0b\u5e8f. \u5176\u6b21\uff0c\u4e0d\u540c\u6bb5\u9650\u5236\u4e86\u4e0d\u540c\u9875\u7684\u8bfb\u5199\u6743\u9650\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u5bf9\u53ea\u8bfb\u865a\u62df\u9875\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u5185\u6838\u5c31\u4f1a\u53d1\u51fa\u4fdd\u62a4\u5f02\u5e38\u7ec8\u6b62\u7a0b\u5e8f. \u5982 scanf(\"%d, val\"); \u5982\u679c val \u5bf9\u5e94\u865a\u62df\u5185\u5b58\u67d0\u4e2a\u5408\u6cd5\u7684\u8bfb\u5199\u533a\u57df, \u6211\u4eec\u5c31\u8986\u76d6\u4e86\u8fd9\u5757\u5185\u5b58.","title":"\u95f4\u63a5\u5f15\u7528\u574f\u6307\u9488"},{"location":"CSAPP/9/#_37","text":"\u6211\u4eec\u5b9a\u4e49\u7684\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u5904\u4e8e .bss \u6bb5\u4e2d\uff0c\u8be5\u6bb5\u4f1a\u4e0e\u533f\u540d\u6587\u4ef6\u8fdb\u884c\u5173\u8054\uff0c\u4f7f\u5f97\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u90fd\u4e3a 0\u3002\u4f46\u662f\u4f7f\u7528 malloc \u5206\u914d\u5806\u5185\u5b58\u65f6\uff0c\u53ea\u662f\u7b80\u5355\u7684\u4fee\u6539\u4e86 brk \u6307\u9488\uff0c\u5e76\u4e0d\u4f1a\u5bf9\u5df2\u5206\u914d\u7684\u5757\u8fdb\u884c\u4efb\u4f55\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u8981\u5bf9\u52a8\u6001\u5185\u5b58\u5206\u914d\u5f97\u5230\u7684\u5806\u5185\u5b58\u8fdb\u884c\u521d\u59cb\u5316.( calloc \u51fd\u6570\u4f1a\u8fdb\u884c\u521d\u59cb\u5316)","title":"\u8bfb\u672a\u521d\u59cb\u5316\u7684\u5185\u5b58"},{"location":"CSAPP/9/#_38","text":"\u4e0d\u68c0\u67e5\u8f93\u5165\u4e32\u7684\u5927\u5c0f\u5c31\u5199\u5165\u6808\u4e2d\u7684\u76ee\u6807\u7f13\u51b2\u533a, \u5c31\u4f1a\u7531 \u7f13\u51b2\u533a\u6ea2\u51fa\u9519\u8bef(buffer overflow bug) . \u5982 void bufferoverflow () { char buf [ 64 ]; gets ( buf ); return ; } \u6211\u4eec\u5e94\u8be5\u4f7f\u7528 fgets \u51fd\u6570, \u9650\u5236\u8f93\u5165\u4e32\u7684\u5927\u5c0f.","title":"\u5141\u8bb8\u6808\u7f13\u51b2\u533a\u6ea2\u51fa"},{"location":"CSAPP/9/#_39","text":"int ** makeArray1 ( int n , int m ) { int i ; int ** A = ( int * ) malloc ( n * sizeof ( int )); for ( i = 0 ; i < n ; i ++ ) A [ i ] = ( int * ) malloc ( m * sizeof ( int )); return A ; } \u7b2c\u56db\u884c\u5e94\u8be5\u662f sizeof(int *) \u800c\u4e0d\u662f sizeof(int) .","title":"\u5047\u8bbe\u6307\u9488\u548c\u4ed6\u4eec\u6307\u5411\u7684\u5bf9\u8c61\u662f\u76f8\u540c\u5927\u5c0f"},{"location":"CSAPP/9/#_40","text":"int ** makeArray1 ( int n , int m ) { int i ; int ** A = ( int * ) malloc ( n * sizeof ( int * )); for ( i = 0 ; i <= n ; i ++ ) A [ i ] = ( int * ) malloc ( m * sizeof ( int )); return A ; } \u7b2c\u4e94\u884c\u591a\u521d\u59cb\u5316\u4e86\u4e00\u5143\u7d20. (0~n \u662f n+1 \u4e2a\u5143\u7d20, \u800c\u4e0d\u662f n \u4e2a)","title":"\u9519\u4f4d\u9519\u8bef"},{"location":"CSAPP/9/#_41","text":"int * binheapDelete ( int ** binheap , int * size ) { int * packet = binheap [ 0 ]; binheap [ 0 ] = binheap [ * size - 1 ]; * size -- ; heapify ( binheap , * size , 0 ); return ( packet ); } \u7b2c\u516d\u884c, \u4e00\u5143\u8fd0\u7b97\u7b26 -- \u548c * \u4f18\u5148\u7ea7\u76f8\u540c, \u4ece\u53f3\u5f80\u5de6\u7ed3\u5408. \u56e0\u6b64\u7b2c\u516d\u884c\u5b9e\u9645\u51cf\u5c11\u7684\u662f\u6307\u9488\u7684\u503c, \u800c\u4e0d\u662f\u5b83\u6307\u5411\u7684\u6574\u6570\u7684\u503c.","title":"\u5f15\u7528\u6307\u9488\u800c\u4e0d\u662f\u5b83\u6307\u5411\u7684\u5bf9\u8c61"},{"location":"CSAPP/9/#_42","text":"int * search ( int * p , int val ) { while ( * p && * p != val ) p += sizeof ( int ); return p ; } \u6307\u9488\u7684\u7b97\u672f\u64cd\u4f5c\u662f\u4ee5\u5b83\u4eec\u6307\u5411\u7684\u5bf9\u8c61\u7684\u5927\u5c0f\u4e3a\u5355\u4f4d\u6765\u8fdb\u884c, \u800c\u4e0d\u662f\u5b57\u8282. \u7b2c\u56db\u884c\u5e94\u4e3a p++ .","title":"\u8bef\u89e3\u6307\u9488\u8fd0\u7b97"},{"location":"CSAPP/9/#_43","text":"int * stackref () { int val ; return & val ; } \u8fd9\u91cc\u8fd4\u56de\u7684\u6307\u9488, \u5c3d\u7ba1\u4ecd\u7136\u6307\u5411\u4e00\u4e2a\u5408\u6cd5\u7684\u5185\u5b58\u5730\u5740, \u4f46\u5df2\u7ecf\u4e0d\u518d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u53d8\u91cf\u4e86.(\u5c40\u90e8\u53d8\u91cf\u5728\u6808\u5e27\u4e2d, \u51fd\u6570\u7ed3\u675f\u6808\u6bc1\u706d\u4e86)","title":"\u5f15\u7528\u4e0d\u5b58\u5728\u7684\u53d8\u91cf"},{"location":"CSAPP/9/#_44","text":"int * heapref ( int n , int m ) { int i ; int * x , * y ; x = ( int * ) malloc ( n * sizeof ( int )); ... free ( x ); y = ( int * ) malloc ( n * sizeof ( int )); for ( i = 0 ; i < m ; i ++ ) y [ i ] = x [ i ] ++ ; return y ; }","title":"\u5f15\u7528\u7a7a\u95f2\u5806\u5757\u4e2d\u7684\u6570\u636e"},{"location":"CSAPP/9/#_45","text":"\u7a0b\u5e8f\u5458\u5fd8\u8bb0\u91ca\u653e\u5df2\u5206\u914d\u5757, \u800c\u5728\u5806\u91cc\u521b\u5efa\u4e86\u5783\u573e, \u4f1a\u9010\u6e10\u5360\u7528\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u5185\u5b58. void leak ( n ) { int * x = ( int * ) malloc ( n * sizeof ( int )); return ; }","title":"\u5f15\u8d77\u5185\u5b58\u6cc4\u6f0f"},{"location":"DB/","text":"\u6570\u636e\u5e93\u7cfb\u7edf \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u6570\u636e\u5e93\u7cfb\u7edf\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u6559\u6750: Database System Concepts 7 th \u8001\u5e08: \u5b59\u5efa\u4f36/TA: \u8042\u4fca\u54f2 \u6570\u636e\u5e93\u7cfb\u7edf Cheating Sheet by HobbitQia 3.1 MB / 2 P / 2023-06-20 \u4e0b\u8f7d","title":"\u6570\u636e\u5e93\u7cfb\u7edf"},{"location":"DB/#_1","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u6570\u636e\u5e93\u7cfb\u7edf\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u6559\u6750: Database System Concepts 7 th \u8001\u5e08: \u5b59\u5efa\u4f36/TA: \u8042\u4fca\u54f2 \u6570\u636e\u5e93\u7cfb\u7edf Cheating Sheet by HobbitQia 3.1 MB / 2 P / 2023-06-20 \u4e0b\u8f7d","title":"\u6570\u636e\u5e93\u7cfb\u7edf"},{"location":"DB/db1/","text":"Introduction \u00b6 Abstract Database Systems Database Applications Purpose of Database Systems View of Data Data Models Database Languages Database Design Database Engine Database Users and Administrators History of Database Systems Database Systems \u00b6 DBMS (Database Management System) Purpose of Database Systems \u00b6 Database systems offer solutions to all the below problems. data redundancy (\u6570\u636e\u5197\u4f59) and inconsistency data isolation (\u6570\u636e\u5b64\u7acb\uff0c\u6570\u636e\u5b64\u5c9b) difficulty in accessing data Integrity problems (\u5b8c\u6574\u6027\u95ee\u9898) \u5b8c\u6574\u7684\u7ea6\u675f\u6761\u4ef6\u88ab\u85cf\u5728\u6570\u636e\u548c\u4ee3\u7801\u4e2d\uff0c\u800c\u4e0d\u662f\u663e\u5f0f\u5730\u58f0\u660e\u3002 e.g. \"account balance \\(\\geq\\) 1\" Atomicity problems (\u539f\u5b50\u6027\u95ee\u9898) Failures may leave database in an inconsistent state with partial updates carried out e.g. \u4ece A \u8d26\u6237\u8f6c\u8d26\u5230 B, \u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1 A \u8f6c\u51fa B \u8f6c\u5165\u8fd9\u4e24\u4ef6\u4e8b\u540c\u65f6\u8fdb\u884c\uff0c\u4e0d\u80fd\u88ab\u6253\u65ad\u3002 Concurrent access anomalies (\u5e76\u53d1\u8bbf\u95ee\u5f02\u5e38) Uncontrolled concurrent accesses can lead to inconsistencies Example Security problems Authentication (\u8ba4\u8bc1), Priviledge (\u6743\u9650), Audit (\u5ba1\u8ba1) Characteristics of Databases \u00b6 data persistence (\u6570\u636e\u6301\u4e45\u6027) convenience in accessing data (\u6570\u636e\u8bbf\u95ee\u4fbf\u5229\u6027) data integrity(\u6570\u636e\u5b8c\u6574\u6027) concurrency control for multiple user (\u591a\u7528\u6237\u5e76\u53d1\u63a7\u5236) failure recovery (\u6545\u969c\u6062\u590d) security control (\u5b89\u5168\u63a7\u5236) View of Data \u00b6 Three-level abstraction of databases physical level: \u7269\u7406\u4e2d\u5982\u4f55\u4fdd\u5b58\u3001\u5b9e\u73b0\uff08\u5982\u78c1\u76d8\uff09 logical level: \u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u4ec0\u4e48\u6570\u636e\uff1f\u6570\u636e\u4e4b\u95f4\u7684\u5173\u7cfb\uff1f view level: \u4e0d\u540c\u4eba\u770b\u5230\u4e0d\u540c\u7684\u4ed6\u4eec\u6240\u9700\u8981\u7684\u6570\u636e Advantages: Hide the complexities Enhance the adaptation to changes \u786c\u4ef6\u73af\u5883\u53d8\u5316 (physical level), \u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u903b\u8f91\u5173\u7cfb\u548c\u6620\u5c04\u6765\u9002\u5e94\u65b0\u7684\u786c\u4ef6\u73af\u5883\u3002 \u903b\u8f91\u73af\u5883\u53d8\u5316 (logic level), \u53ef\u4ee5\u901a\u8fc7 view \u548c logic \u7684\u6620\u5c04\u4f7f\u5f97 view \u5c3d\u91cf\u5c11\u53d8\u5316\u3002 Schema and Instance \u00b6 Similar to types and variables in programming languages. Schema (\u6a21\u5f0f)\u2013 the logical structure of the database (physical/logical) Instance (\u5b9e\u4f8b) \u2013 the actual content of the database at a particular point in time Data Independence \u00b6 Physical Data Independence (\u7269\u7406\u6570\u636e\u72ec\u7acb\u6027) \u2013 the ability to modify the physical schema without changing the logical schema Logical Data Independence (\u903b\u8f91\u6570\u636e\u72ec\u7acb\u6027) - the ability to modify the logical schema without changing the user view schema \u6620\u5c04\u4fee\u6539\uff0c\u4f46\u4e0d\u7528\u4fee\u6539 schema. Data Models \u00b6 Data models is a collection of tools for describing data, data relationships, data semantics, data constraints. Relational model(\u5173\u7cfb\u6a21\u578b) \uff08\u8868\u683c\uff09\u6570\u636e\u5e93\u7cfb\u7edf\u5c42\u9762 Entity-Relationship(\u5b9e\u4f53-\u8054\u7cfb) data model \u9700\u6c42\u5206\u6790\u5c42\u9762 Object-based data models Object-oriented (\u9762\u5411\u5bf9\u8c61\u6570\u636e\u6a21\u578b) Object-relational (\u5bf9\u8c61-\u5173\u7cfb\u6a21\u578b\u6a21\u578b) Semistructured data model (XML)(\u534a\u7ed3\u6784\u5316\u6570\u636e\u6a21\u578b) Other older models: Network model (\u7f51\u72b6\u6a21\u578b) Hierarchical model(\u5c42\u6b21\u6a21\u578b) Relational Model 12 tuples, 4 attributes. Datahase Languages \u00b6 Data Definition Language (DDL, \u6570\u636e\u5b9a\u4e49\u8bed\u8a00) \u00b6 Example C \u8bed\u8a00\u91cc\u7684 struct \u7ecf\u8fc7\u7f16\u8bd1\u540e\u5168\u90e8\u53d8\u4e3a\u4e86\u4ee3\u7801\uff08\u6709\u4e00\u5f20\u7b26\u53f7\u8868\uff09\u4f46\u6570\u636e\u5e93\u91cc\u4e0d\u4f1a\u3002 Data dictionary contains metadata (\u5143\u6570\u636e\uff0c i.e. data about data) DDL compiler generates a set of table templates stored in a data dictionary (\u6570\u636e\u5b57\u5178) Database schema Integrity constraints (\u5b8c\u6574\u6027\u7ea6\u675f) Primary key (ID uniquely identifies instructors, \u4e3b\u952e) Referential integrity (references constraint in SQL, \u53c2\u7167\u5b8c\u6574\u6027) e.g. dept_name value in any instructor tuple must appear in department relation Authorization (\u6743\u9650) Data Manipulation Language (DML, \u6570\u636e\u64cd\u4f5c\u8bed\u8a00) \u00b6 Two classes of languages Procedural (\u8fc7\u7a0b\u5f0f)\u2013 user specifies what data is required and how to get those data e.g. C Declarative (nonprocedural\uff0c\u9648\u8ff0\u5f0f\uff0c\u975e\u8fc7\u7a0b\u5f0f) \u2013 user specifies what data is required without specifying how to get those data e.g. SQL SQL is the most widely used query language SQL Query Language \u00b6 Database Access from Application Program \u00b6 \u6570\u636e\u5e93\u5fc5\u987b\u7531\u8fc7\u7a0b\u5f0f\u8bed\u8a00\u7f16\u5199\u3002 Application programs generally access databases through one of * Language extensions to allow embedded SQL e.g. \u901a\u8fc7\u9884\u5904\u7406\u5668\uff0c\u5c06 select \u8bed\u53e5\u8bc6\u522b\u51fa\u6765\uff0c\u7ffb\u8bd1\u6210 C \u8bed\u8a00\u7684\u51fd\u6570\u8c03\u7528\u3002 * API (Application program interface) e.g. ODBC/JDBC which allow SQL queries to be sent to a database. Database Design \u00b6 Entity Relationship Model (\u5b9e\u4f53-\u8054\u7cfb\u6a21\u578b) \u4e00\u5bf9\u4e00/\u4e00\u5bf9\u591a/\u591a\u5bf9\u4e00/\u591a\u5bf9\u591a \u56fe\u662f\u4e2d\u7acb\u7684\uff0c\u53ef\u4ee5\u7528\u5173\u7cfb\u6570\u636e\u5e93/\u9762\u5411\u5bf9\u8c61\u6570\u636e\u5e93\u5b9e\u73b0 Normalization Theory (\u89c4\u8303\u5316\u7406\u8bba) Formalize what designs are bad, and test for them Example \u8fd9\u4e2a\u8868\u5b58\u5728\u5197\u4f59, department \u6709\u91cd\u590d\uff0c\u5e94\u8be5\u62c6\u5206\u4e3a\u4e24\u4e2a\u8868\uff08\u524d\u56db\u5217\u548c\u540e\u4e09\u5217\uff09 Database Enginee \u00b6 The storage manager, The query processor component, The transaction management component. Storage Manager \u00b6 \u4e3a\u4e86\u6570\u636e\u6301\u4e45\u5316\uff0c\u653e\u5728\u786c\u76d8\u91cc\uff0c\u4f46\u6570\u636e\u5904\u7406\u8981\u8fdb\u5165\u5185\u5b58\uff0c\u8fd9\u4e4b\u95f4\u5b58\u5728\u6570\u636e\u9e3f\u6c9f\u3002 \u6309\u5757\u8bbf\u95ee\u5185\u5b58 (4k/16k), \u7f13\u51b2\u7ba1\u7406\u3002 File manager Buffer manager Authorization and integrity manager Transaction manager \u6570\u636e\u5e93\u91cc\u653e\u7684\u662f data files \u771f\u6b63\u7684\u6570\u636e data dictionary \u653e\u7684\u662f metadata statistical data \u7528\u4e8e\u6570\u636e\u5e93\u7684\u67e5\u8be2\u5904\u7406 indices Query Processor \u00b6 The query processor components include: DDL interpreter -- interprets DDL statements and records the definitions in the data dictionary. DML compiler -- translates DML statements in a query language into an evaluation plan consisting of low-level instructions that the query evaluation engine understands. The DML compiler performs query optimization (\u67e5\u8be2\u4f18\u5316); that is, it picks the lowest cost evaluation plan from among the various alternatives. \u6267\u884c\u8ba1\u5212\u4f1a\u6839\u636e\u7edf\u8ba1\u6570\u636e\u7684\u6539\u53d8\u800c\u6539\u53d8\u3002 Query evaluation engine -- executes low-level instructions generated by the DML compiler. Parsing and translation Optimization Evaluation Transaction Management (\u4e8b\u52a1\u7ba1\u7406) \u00b6 \u94f6\u884c\u8f6c\u8d26\uff0cA \u8f6c\u8d26\u5230 B, A \u4f59\u989d\u51cf\u6389 B \u4f59\u989d\u52a0\u4e0a\u3002 \u8981\u6709\u9694\u79bb\u6027\uff0c\u5ef6\u8fdf\u5199\u56de Recover Manager ensures that the database remains in a consistent (correct) state despite system failures ( e.g. power failures and operating system crashes) and transaction failures. \u65e5\u5fd7\uff0c\u9632\u6b62\u5199\u56de\u6570\u636e\u5e93\u65f6\u51fa\u73b0\u65ad\u7535\u6216\u8005\u5d29\u6e83\u3002 Concurrency-control manager controls the interaction among the concurrent transactions, to ensure the consistency of the database. Database Users \u00b6 Database Administrator (DBA) \u6570\u636e\u5e93\u7ba1\u7406\u5458\uff0c\u8981\u505a\u5b9a\u4e49\u6a21\u5f0f\uff0c\u6570\u636e\u5e93\u8c03\u8c10\uff0c\u6545\u969c\u65f6\u6062\u590d\uff08\u5907\u4efd\uff09\u7b49\u5de5\u4f5c\u3002 \u8001\u5e08\uff1a\u6211\u4e0d\u770b\u597d\uff01 History \u00b6 1973 Turing Award: Charles W. Bachman father of databases 1981 Turing Award: Edgar F. Codd 1998 Turing Award: Jim Gray 2014 Turing Award: Michael Stonebraker","title":"\u6570\u636e\u5e93\u4ecb\u7ecd"},{"location":"DB/db1/#introduction","text":"Abstract Database Systems Database Applications Purpose of Database Systems View of Data Data Models Database Languages Database Design Database Engine Database Users and Administrators History of Database Systems","title":"Introduction"},{"location":"DB/db1/#database-systems","text":"DBMS (Database Management System)","title":"Database Systems"},{"location":"DB/db1/#purpose-of-database-systems","text":"Database systems offer solutions to all the below problems. data redundancy (\u6570\u636e\u5197\u4f59) and inconsistency data isolation (\u6570\u636e\u5b64\u7acb\uff0c\u6570\u636e\u5b64\u5c9b) difficulty in accessing data Integrity problems (\u5b8c\u6574\u6027\u95ee\u9898) \u5b8c\u6574\u7684\u7ea6\u675f\u6761\u4ef6\u88ab\u85cf\u5728\u6570\u636e\u548c\u4ee3\u7801\u4e2d\uff0c\u800c\u4e0d\u662f\u663e\u5f0f\u5730\u58f0\u660e\u3002 e.g. \"account balance \\(\\geq\\) 1\" Atomicity problems (\u539f\u5b50\u6027\u95ee\u9898) Failures may leave database in an inconsistent state with partial updates carried out e.g. \u4ece A \u8d26\u6237\u8f6c\u8d26\u5230 B, \u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1 A \u8f6c\u51fa B \u8f6c\u5165\u8fd9\u4e24\u4ef6\u4e8b\u540c\u65f6\u8fdb\u884c\uff0c\u4e0d\u80fd\u88ab\u6253\u65ad\u3002 Concurrent access anomalies (\u5e76\u53d1\u8bbf\u95ee\u5f02\u5e38) Uncontrolled concurrent accesses can lead to inconsistencies Example Security problems Authentication (\u8ba4\u8bc1), Priviledge (\u6743\u9650), Audit (\u5ba1\u8ba1)","title":"Purpose of Database Systems"},{"location":"DB/db1/#characteristics-of-databases","text":"data persistence (\u6570\u636e\u6301\u4e45\u6027) convenience in accessing data (\u6570\u636e\u8bbf\u95ee\u4fbf\u5229\u6027) data integrity(\u6570\u636e\u5b8c\u6574\u6027) concurrency control for multiple user (\u591a\u7528\u6237\u5e76\u53d1\u63a7\u5236) failure recovery (\u6545\u969c\u6062\u590d) security control (\u5b89\u5168\u63a7\u5236)","title":"Characteristics of Databases"},{"location":"DB/db1/#view-of-data","text":"Three-level abstraction of databases physical level: \u7269\u7406\u4e2d\u5982\u4f55\u4fdd\u5b58\u3001\u5b9e\u73b0\uff08\u5982\u78c1\u76d8\uff09 logical level: \u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u4ec0\u4e48\u6570\u636e\uff1f\u6570\u636e\u4e4b\u95f4\u7684\u5173\u7cfb\uff1f view level: \u4e0d\u540c\u4eba\u770b\u5230\u4e0d\u540c\u7684\u4ed6\u4eec\u6240\u9700\u8981\u7684\u6570\u636e Advantages: Hide the complexities Enhance the adaptation to changes \u786c\u4ef6\u73af\u5883\u53d8\u5316 (physical level), \u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u903b\u8f91\u5173\u7cfb\u548c\u6620\u5c04\u6765\u9002\u5e94\u65b0\u7684\u786c\u4ef6\u73af\u5883\u3002 \u903b\u8f91\u73af\u5883\u53d8\u5316 (logic level), \u53ef\u4ee5\u901a\u8fc7 view \u548c logic \u7684\u6620\u5c04\u4f7f\u5f97 view \u5c3d\u91cf\u5c11\u53d8\u5316\u3002","title":"View of Data"},{"location":"DB/db1/#schema-and-instance","text":"Similar to types and variables in programming languages. Schema (\u6a21\u5f0f)\u2013 the logical structure of the database (physical/logical) Instance (\u5b9e\u4f8b) \u2013 the actual content of the database at a particular point in time","title":"Schema and Instance"},{"location":"DB/db1/#data-independence","text":"Physical Data Independence (\u7269\u7406\u6570\u636e\u72ec\u7acb\u6027) \u2013 the ability to modify the physical schema without changing the logical schema Logical Data Independence (\u903b\u8f91\u6570\u636e\u72ec\u7acb\u6027) - the ability to modify the logical schema without changing the user view schema \u6620\u5c04\u4fee\u6539\uff0c\u4f46\u4e0d\u7528\u4fee\u6539 schema.","title":"Data Independence"},{"location":"DB/db1/#data-models","text":"Data models is a collection of tools for describing data, data relationships, data semantics, data constraints. Relational model(\u5173\u7cfb\u6a21\u578b) \uff08\u8868\u683c\uff09\u6570\u636e\u5e93\u7cfb\u7edf\u5c42\u9762 Entity-Relationship(\u5b9e\u4f53-\u8054\u7cfb) data model \u9700\u6c42\u5206\u6790\u5c42\u9762 Object-based data models Object-oriented (\u9762\u5411\u5bf9\u8c61\u6570\u636e\u6a21\u578b) Object-relational (\u5bf9\u8c61-\u5173\u7cfb\u6a21\u578b\u6a21\u578b) Semistructured data model (XML)(\u534a\u7ed3\u6784\u5316\u6570\u636e\u6a21\u578b) Other older models: Network model (\u7f51\u72b6\u6a21\u578b) Hierarchical model(\u5c42\u6b21\u6a21\u578b) Relational Model 12 tuples, 4 attributes.","title":"Data Models"},{"location":"DB/db1/#datahase-languages","text":"","title":"Datahase Languages"},{"location":"DB/db1/#data-definition-language-ddl","text":"Example C \u8bed\u8a00\u91cc\u7684 struct \u7ecf\u8fc7\u7f16\u8bd1\u540e\u5168\u90e8\u53d8\u4e3a\u4e86\u4ee3\u7801\uff08\u6709\u4e00\u5f20\u7b26\u53f7\u8868\uff09\u4f46\u6570\u636e\u5e93\u91cc\u4e0d\u4f1a\u3002 Data dictionary contains metadata (\u5143\u6570\u636e\uff0c i.e. data about data) DDL compiler generates a set of table templates stored in a data dictionary (\u6570\u636e\u5b57\u5178) Database schema Integrity constraints (\u5b8c\u6574\u6027\u7ea6\u675f) Primary key (ID uniquely identifies instructors, \u4e3b\u952e) Referential integrity (references constraint in SQL, \u53c2\u7167\u5b8c\u6574\u6027) e.g. dept_name value in any instructor tuple must appear in department relation Authorization (\u6743\u9650)","title":"Data Definition Language (DDL, \u6570\u636e\u5b9a\u4e49\u8bed\u8a00)"},{"location":"DB/db1/#data-manipulation-language-dml","text":"Two classes of languages Procedural (\u8fc7\u7a0b\u5f0f)\u2013 user specifies what data is required and how to get those data e.g. C Declarative (nonprocedural\uff0c\u9648\u8ff0\u5f0f\uff0c\u975e\u8fc7\u7a0b\u5f0f) \u2013 user specifies what data is required without specifying how to get those data e.g. SQL SQL is the most widely used query language","title":"Data Manipulation Language (DML, \u6570\u636e\u64cd\u4f5c\u8bed\u8a00)"},{"location":"DB/db1/#sql-query-language","text":"","title":"SQL Query Language"},{"location":"DB/db1/#database-access-from-application-program","text":"\u6570\u636e\u5e93\u5fc5\u987b\u7531\u8fc7\u7a0b\u5f0f\u8bed\u8a00\u7f16\u5199\u3002 Application programs generally access databases through one of * Language extensions to allow embedded SQL e.g. \u901a\u8fc7\u9884\u5904\u7406\u5668\uff0c\u5c06 select \u8bed\u53e5\u8bc6\u522b\u51fa\u6765\uff0c\u7ffb\u8bd1\u6210 C \u8bed\u8a00\u7684\u51fd\u6570\u8c03\u7528\u3002 * API (Application program interface) e.g. ODBC/JDBC which allow SQL queries to be sent to a database.","title":"Database Access from Application Program"},{"location":"DB/db1/#database-design","text":"Entity Relationship Model (\u5b9e\u4f53-\u8054\u7cfb\u6a21\u578b) \u4e00\u5bf9\u4e00/\u4e00\u5bf9\u591a/\u591a\u5bf9\u4e00/\u591a\u5bf9\u591a \u56fe\u662f\u4e2d\u7acb\u7684\uff0c\u53ef\u4ee5\u7528\u5173\u7cfb\u6570\u636e\u5e93/\u9762\u5411\u5bf9\u8c61\u6570\u636e\u5e93\u5b9e\u73b0 Normalization Theory (\u89c4\u8303\u5316\u7406\u8bba) Formalize what designs are bad, and test for them Example \u8fd9\u4e2a\u8868\u5b58\u5728\u5197\u4f59, department \u6709\u91cd\u590d\uff0c\u5e94\u8be5\u62c6\u5206\u4e3a\u4e24\u4e2a\u8868\uff08\u524d\u56db\u5217\u548c\u540e\u4e09\u5217\uff09","title":"Database Design"},{"location":"DB/db1/#database-enginee","text":"The storage manager, The query processor component, The transaction management component.","title":"Database Enginee"},{"location":"DB/db1/#storage-manager","text":"\u4e3a\u4e86\u6570\u636e\u6301\u4e45\u5316\uff0c\u653e\u5728\u786c\u76d8\u91cc\uff0c\u4f46\u6570\u636e\u5904\u7406\u8981\u8fdb\u5165\u5185\u5b58\uff0c\u8fd9\u4e4b\u95f4\u5b58\u5728\u6570\u636e\u9e3f\u6c9f\u3002 \u6309\u5757\u8bbf\u95ee\u5185\u5b58 (4k/16k), \u7f13\u51b2\u7ba1\u7406\u3002 File manager Buffer manager Authorization and integrity manager Transaction manager \u6570\u636e\u5e93\u91cc\u653e\u7684\u662f data files \u771f\u6b63\u7684\u6570\u636e data dictionary \u653e\u7684\u662f metadata statistical data \u7528\u4e8e\u6570\u636e\u5e93\u7684\u67e5\u8be2\u5904\u7406 indices","title":"Storage Manager"},{"location":"DB/db1/#query-processor","text":"The query processor components include: DDL interpreter -- interprets DDL statements and records the definitions in the data dictionary. DML compiler -- translates DML statements in a query language into an evaluation plan consisting of low-level instructions that the query evaluation engine understands. The DML compiler performs query optimization (\u67e5\u8be2\u4f18\u5316); that is, it picks the lowest cost evaluation plan from among the various alternatives. \u6267\u884c\u8ba1\u5212\u4f1a\u6839\u636e\u7edf\u8ba1\u6570\u636e\u7684\u6539\u53d8\u800c\u6539\u53d8\u3002 Query evaluation engine -- executes low-level instructions generated by the DML compiler. Parsing and translation Optimization Evaluation","title":"Query Processor"},{"location":"DB/db1/#transaction-management","text":"\u94f6\u884c\u8f6c\u8d26\uff0cA \u8f6c\u8d26\u5230 B, A \u4f59\u989d\u51cf\u6389 B \u4f59\u989d\u52a0\u4e0a\u3002 \u8981\u6709\u9694\u79bb\u6027\uff0c\u5ef6\u8fdf\u5199\u56de Recover Manager ensures that the database remains in a consistent (correct) state despite system failures ( e.g. power failures and operating system crashes) and transaction failures. \u65e5\u5fd7\uff0c\u9632\u6b62\u5199\u56de\u6570\u636e\u5e93\u65f6\u51fa\u73b0\u65ad\u7535\u6216\u8005\u5d29\u6e83\u3002 Concurrency-control manager controls the interaction among the concurrent transactions, to ensure the consistency of the database.","title":"Transaction Management (\u4e8b\u52a1\u7ba1\u7406)"},{"location":"DB/db1/#database-users","text":"Database Administrator (DBA) \u6570\u636e\u5e93\u7ba1\u7406\u5458\uff0c\u8981\u505a\u5b9a\u4e49\u6a21\u5f0f\uff0c\u6570\u636e\u5e93\u8c03\u8c10\uff0c\u6545\u969c\u65f6\u6062\u590d\uff08\u5907\u4efd\uff09\u7b49\u5de5\u4f5c\u3002 \u8001\u5e08\uff1a\u6211\u4e0d\u770b\u597d\uff01","title":"Database Users"},{"location":"DB/db1/#history","text":"1973 Turing Award: Charles W. Bachman father of databases 1981 Turing Award: Edgar F. Codd 1998 Turing Award: Jim Gray 2014 Turing Award: Michael Stonebraker","title":"History"},{"location":"DB/db10/","text":"Indexing \u00b6 Basic Concepts \u00b6 Indexing mechanisms used to speed up access to desired data. \u7d22\u5f15\u7528\u6765\u52a0\u901f\u67e5\u627e\u3002 Search Key - attribute to set of attributes used to look up records in a file. An index file consists of records (called index entries) of the form. \u7d22\u5f15\u6587\u4ef6\u901a\u5e38\u662f\u6709\u987a\u5e8f\u7684 Index Evaluation Metrics \u00b6 Access types supported efficiently Point query : records with a specified value in the attribute. \u70b9\u67e5\u8be2 Range query : records with an attribute value falling in a specified range of values. \u8303\u56f4\u67e5\u8be2 Access time Insertion time Deletion time Space overhead Ordered Indices \u00b6 Primary index\uff08\u4e3b\u7d22\u5f15\uff09 : in a sequentially ordered file, the index whose search key specifies the sequential order of the file. Also called clustering index\uff08\u805a\u96c6\u7d22\u5f15\uff09 The search key of a primary index is usually but not necessarily the primary key. Secondary index\uff08\u8f85\u52a9\u7d22\u5f15\uff09 : an index whose search key specifies an order different from the sequential order of the file. Also called non-clustering index. Example \u4e3b\u7d22\u5f15\u548c\u6570\u636e\u5185\u7684\u987a\u5e8f\u662f\u4e00\u6837\u7684\u3002\u70b9\u67e5\u548c\u8303\u56f4\u67e5\u90fd\u662f\u6bd4\u8f83\u9ad8\u6548\u7684\u3002 \u5982\u679c key \u4e0d\u662f\u4e00\u4e2a\u4e3b\u952e\uff0c\u90a3\u53ef\u80fd\u4f1a\u5bf9\u5e94\u591a\u4e2a\u8bb0\u5f55\u3002 Primary index \u662f\u5f88\u5b9d\u8d35\u7684\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u5176\u4ed6\u90fd\u662f\u8f85\u52a9\u7d22\u5f15\u3002 Dense index(\u7a20\u5bc6\u7d22\u5f15) \u2014 Index record appears for every search-key value in the file. \u6240\u6709 search-key \u90fd\u8981\u51fa\u73b0\u5728\u7d22\u5f15\u6587\u4ef6\u91cc\u3002 Sparse Index\uff08\u7a00\u758f\u7d22\u5f15\uff09 : contains index records for only some search-key values. Example Good tradeoff: sparse index with an index entry for every block in file, corresponding to least search-key value in the block. Multilevel Index \u00b6 If primary index does not fit in memory, access becomes expensive. \u53ef\u4ee5\u5bf9\u7d22\u5f15\u6587\u4ef6\u672c\u8eab\u518d\u5efa\u7acb\u4e00\u6b21\u7d22\u5f15\u3002 B+-Tree Index \u00b6 All paths from root to leaf are of the same length Inner node(not a root or a leaf): between \\(\\lceil n/2\\rceil\\) and \\(n\\) children. Leaf node: between \\(\\lceil (n\u20131)/2\\rceil\\) and \\(n\u20131\\) values Special cases: If the root is not a leaf: at least 2 children. If the root is a leaf : between 0 and (n\u20131)values. \u4e00\u822c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u5757\u7684\u5927\u5c0f, 4K. B+ \u6811\u7684\u53c9\u662f\u975e\u5e38\u5927\u7684\u3002 Observations about B+-trees \u00b6 Since the inter-node connections are done by pointers, \u201clogically\u201d close blocks need not be \u201cphysically\u201d close. \u5982\u679c\u6709\u5f88\u591a\u6587\u4ef6\u4e00\u6b21\u6027\u5efa\u7acb B+ \u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\u5efa\u7acb\u3002 \u5982\u679c\u6709 K \u4e2a\u7d22\u5f15\u9879\uff0c\u5219\u6811\u9ad8\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 \\(\\lceil \\log_{\\lceil n/2 \\rceil}(K/2)\\rceil + 1\\) . \u9ad8\u5ea6\u6700\u5c0f\u4e3a \\(\\log_n(K)\\) Examples of Insert on B+-Tree \u6ce8\u610f\u5185\u70b9\u7684 split \u548c\u53f6\u5b50\u7684\u4e0d\u4e00\u6837\u3002\u8981\u628a\u4e2d\u95f4\u7684\u8282\u70b9 move \u4e0a\u53bb\u3002 Examples of Delete on B+-Tree \u4e2d\u95f4\u70b9\u5982\u679c\u4e0d\u591f\uff0c\u4ece\u53e6\u5916\u4e00\u8fb9\u501f\u4e00\u4e2a\u8fc7\u6765\u3002\u4f46\u662f\u4e0d\u80fd\u76f4\u63a5\u501f\uff0c\u9700\u8981\u628a\u5b83\u9876\u4e0a\u53bb\u3002 \u6ce8\u610f\u8003\u8651\u548c\u5144\u5f1f\u5408\u5e76\u3002 B+- tree : height and size estimation \u00b6 \u5168\u6ee1\u7684\u65f6\u5019\u8282\u70b9\u6700\u5c11 \u6ce8\u610f\u8fd9\u91cc\u7684\u5411\u4e0a/\u5411\u4e0b\u53d6\u6574\u95ee\u9898 \u6d45\u5c42\u8282\u70b9\u4e2a\u6570\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u7b2c\u4e00\u5c42\u548c\u7b2c\u4e8c\u5c42\u7684\u8282\u70b9\u90fd\u653e\u5230\u5185\u5b58\u4e2d pin \u4f4f\u3002 B+-Tree File Organization \u00b6 \u6587\u4ef6\u7ec4\u7ec7 B+-Tree File Organization: Leaf nodes in a B+-tree file organization store records, instead of pointers \u53f6\u5b50\u8282\u70b9\u4e0d\u518d\u653e\u7d22\u5f15\u9879\uff0c\u653e\u8bb0\u5f55\u672c\u8eab\u3002 Helps keep data records clustered even when there are insertions/deletions/updates \u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u534a\u6ee1\u7684\u8981\u6c42\u4ee5\u63d0\u9ad8\u7a7a\u95f4\u5229\u7528\u7387\u3002 Other Issues in Indexing \u00b6 Record relocation and secondary indices If a record moves, all secondary indices that store record pointers have to be updated Node splits in B+-tree file organizations become very expensive Solution: use primary-index search key instead of record pointer in secondary index Variable length strings as keys Variable fanout Prefix compression Key values at internal nodes can be prefixes of full key Keep enough characters to distinguish entries in the subtrees separated by the key value Multiple-Key Access \u00b6 Composite search keys are search keys containing more than one attribute e.g. (dept_name, salary) Lexicographic ordering : \\((a_1, a_2) < (b_1, b_2)\\) if either \\(a_1 < b_1\\) , or \\(a_1=b_1\\) and \\(a_2 < b_2\\) . \u5355\u4e2a key, \u4e0d\u540c key \u4e4b\u95f4\u7ec4\u5408\u90fd\u53ef\u4ee5\u5efa\u7acb B+ \u6811\u3002\u8fd9\u6837\u4f1a\u6709\u5f88\u591a\u7ec4\u5408\uff0c\u53ef\u4ee5\u5728\u9891\u7e41\u51fa\u73b0\u7684\u67e5\u8be2\u5c5e\u6027\u4e0a\u5efa\u7acb B+ \u6811\u3002 Non-unique Search Keys \u00b6 \u6211\u4eec\u53ef\u4ee5\u5728 B+ \u6811\u53f6\u5b50\u8282\u70b9\u4e0d\u76f4\u63a5\u6307\u5411\u78c1\u76d8\u91cc\u7684\u6570\u636e\uff0c\u800c\u662f\u6307\u5411\u4e00\u4e2a\u5757\u3002 \u4e5f\u53ef\u4ee5\u5728\u7d22\u5f15\u4e0a\u52a0\u4e0a\u53bb\u4e00\u4e2a\u7d22\u5f15\uff0c\u4f7f\u5b83\u5bf9\u5e94\u7684\u8bb0\u5f55\u552f\u4e00\u3002 \u53ef\u4ee5\u901a\u8fc7\u8303\u56f4\u67e5\u627e Bulk Loading and Bottom-Up Build \u00b6 Inserting entries one-at-a-time into a B+-tree requires \\(\\geq 1\\) IO per entry \u5982\u679c\u6211\u4eec\u4e00\u6b21\u6027\u63d2\u5165\u5f88\u591a\u7d22\u5f15\u9879 Efficient alternative 1: Insert in sorted order \u5c40\u90e8\u6027\u8f83\u597d\uff0c\u51cf\u5c11 I/O. Efficient alternative 2: Bottom-up B+-tree construction First sort index entries Then create B+-tree layer-by-layer, starting with leaf level The built B+-tree is written to disk using sequential I/O operations Example \u5982\u679c\u8981\u6392\u5e8f\u7684\u5185\u5bb9\u8f83\u5927\uff0c\u65e0\u6cd5\u653e\u4e0b\u5185\u5b58\uff0c\u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u6392\u5e8f\u3002 fanout \u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\u3002 \u53ef\u4ee5\u7528 level-order \u5199\u5230\u78c1\u76d8\u91cc\uff0c\u4fbf\u4e8e\u987a\u5e8f\u8bbf\u95ee\u6240\u6709\u7d22\u5f15\uff0c\u6b64\u65f6\u5757\u662f\u8fde\u7eed\u7684\u3002\uff08\u4fbf\u4e8e\u987a\u5e8f\u8bbf\u95ee\u6240\u6709\u6570\u636e\u9879\uff09 \u8fd9\u91cc\u7684\u4ee3\u4ef7\u5c31\u662f\u5efa\u597d\u540e\uff0c\u4e00\u6b21 seek \u540e\u5168\u90e8\u5199\u51fa\u53bb (9 blocks) Bulk insert index entries Example \u628a\u521a\u521a\u90a3\u68f5 B+ \u6811\u53f6\u5b50\u8282\u70b9\uff08\u5373\u904d\u5386\u6240\u6709\u6570\u636e\uff09\u9700\u8981 1seek+6blocks. \u968f\u540e\u548c\u4e0a\u9762\u7684\u6570\u636e\u5408\u5e76\u540e\uff0c\u5199\u56de\u78c1\u76d8\u65f6\u9700\u8981 1seek+13blocks. Merge two existing two B+-trees , to create a new B+-tree using the Bottom-UP Build algorithm, as in LSM-tree Index \u5047\u8bbe\u6709\u4e24\u68f5\u8fd9\u6837\u751f\u6210\u7684 B+ \u6811\uff0c\u5c06\u4ed6\u4eec\u5408\u5e76\u5728\u4e00\u8d77\u3002\u9996\u5148\u628a\u53f6\u5b50\u8282\u70b9\u62ff\u51fa\u6765\u6392\u5e8f\u3002 Indexing in Main Memory \u00b6 cache \u6309 cache line \u4f20\u8f93, \u53ea\u6709 64B. Random access in memory Much cheaper than on disk/flash, but still expensive compared to cache read Binary search for a key value within a large B+-tree node results in many cache misses \u4e8c\u5206\u67e5\u627e\u53ef\u80fd\u5e26\u6765\u5f88\u591a cache miss. Data structures that make best use of cache preferable \u2013 cache conscious B+- trees with small nodes that fit in cache line are preferable to reduce cache misses search key \u548c pointer \u53ef\u4ee5\u5206\u5f00\u653e\u3002 Key idea: use large node size to optimize disk access, but structure data within a node using a tree with small node size, instead of using an array, to optimize cache access. Indexing on Flash \u00b6 Flash \u91cc\u4e0d\u662f\u5373\u65f6\u4fee\u6539\uff0c\u800c\u662f\u5148\u64e6\u6389\u518d\u5199\u3002\u540c\u65f6\u64e6\u7684\u6b21\u6570\u662f\u6709\u9650\u5236\u7684\u3002\u56e0\u6b64\u6700\u597d\u7684\u65b9\u6cd5\u662f\u4ece\u5e95\u6784\u5efa\uff0c\u7136\u540e\u987a\u5e8f\u5199\u5165\u3002 Random I/O cost much lower on flash 20 to 100 microseconds for read/write Writes are not in-place, and (eventually) require a more expensive erase Optimum page size therefore much smaller Bulk-loading still useful since it minimizes page erases Write-optimized tree structures (i.e., LSM-tree) have been adapted to minimize page writes for flash-optimized search trees \u5199\u4f18\u5316\u7d22\u5f15\u7ed3\u6784 Log Structured Merge (LSM) Tree \u00b6 Records inserted first into in-memory tree ( \\(L_0\\) tree) When in-memory tree is full, records moved to disk ( \\(L_1\\) tree) B+-tree constructed using bottom-up build by merging existing \\(L_1\\) tree with records from \\(L_0\\) tree \u5185\u5b58\u91cc\u7684 B+ \u6811\u5982\u679c\u6ee1\u4e86\uff0c\u5c31\u9a6c\u4e0a\u5199\u5230\u78c1\u76d8\u91cc\u53bb\uff08\u53ef\u4ee5\u8fde\u7eed\u5199\uff09 When \\(L_1\\) tree exceeds some threshold, merge into $L_2\uffe5 tree And so on for more levels Size threshold for \\(L_{i+1}\\) tree is \\(k\\) times size threshold for \\(L_i\\) tree \u8fd9\u6837\u6211\u4eec\u628a\u968f\u673a\u5199\u53d8\u4e3a\u4e86\u987a\u5e8f\u5199\u3002\u4f46\u6b64\u65f6\u67e5\u627e\u4e00\u4e2a\u7d22\u5f15\uff0c\u5c31\u8981\u904d\u5386\u6240\u6709 B+ \u6811\u3002 Benefits of LSM approach Inserts are done using only sequential I/O operations Leaves are full , avoiding space wastage Reduced number of I/O operations per record inserted as compared to normal B+-tree (up to some size) Drawback of LSM approach Queries have to search multiple trees Entire content of each level copied multiple times Stepped Merge Index \u539f\u5148\u7684\u7ed3\u6784\u4e2d\uff0cMerge \u64cd\u4f5c\u592a\u591a\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u6027\u5408\u5e76\u3002 \u78c1\u76d8\u4e0a\u6bcf\u5c42\u6709 k \u68f5\u6811\uff0c\u5f53 k \u4e2a\u7d22\u5f15\u5904\u4e8e\u540c\u4e00\u5c42\u65f6\uff0c\u5408\u5e76\u5b83\u4eec\u5e76\u5f97\u5230\u4e00\u68f5\u5c42\u6570 \\(+1\\) \u7684\u6811\uff0c\u5199\u56de\u3002 \\(L_1\\) \u6709\u5927\u5c0f\u9650\u5236\uff0c\u8fbe\u5230\u540e\u4f1a\u751f\u6210\u53e6\u4e00\u4e2a B+ \u6811\uff0c\u4f9d\u6b21\u4e3a k \u500d\u3002 \u5e03\u9686\u8fc7\u6ee4\u5668","title":"\u7d22\u5f15"},{"location":"DB/db10/#indexing","text":"","title":"Indexing"},{"location":"DB/db10/#basic-concepts","text":"Indexing mechanisms used to speed up access to desired data. \u7d22\u5f15\u7528\u6765\u52a0\u901f\u67e5\u627e\u3002 Search Key - attribute to set of attributes used to look up records in a file. An index file consists of records (called index entries) of the form. \u7d22\u5f15\u6587\u4ef6\u901a\u5e38\u662f\u6709\u987a\u5e8f\u7684","title":"Basic Concepts"},{"location":"DB/db10/#index-evaluation-metrics","text":"Access types supported efficiently Point query : records with a specified value in the attribute. \u70b9\u67e5\u8be2 Range query : records with an attribute value falling in a specified range of values. \u8303\u56f4\u67e5\u8be2 Access time Insertion time Deletion time Space overhead","title":"Index Evaluation Metrics"},{"location":"DB/db10/#ordered-indices","text":"Primary index\uff08\u4e3b\u7d22\u5f15\uff09 : in a sequentially ordered file, the index whose search key specifies the sequential order of the file. Also called clustering index\uff08\u805a\u96c6\u7d22\u5f15\uff09 The search key of a primary index is usually but not necessarily the primary key. Secondary index\uff08\u8f85\u52a9\u7d22\u5f15\uff09 : an index whose search key specifies an order different from the sequential order of the file. Also called non-clustering index. Example \u4e3b\u7d22\u5f15\u548c\u6570\u636e\u5185\u7684\u987a\u5e8f\u662f\u4e00\u6837\u7684\u3002\u70b9\u67e5\u548c\u8303\u56f4\u67e5\u90fd\u662f\u6bd4\u8f83\u9ad8\u6548\u7684\u3002 \u5982\u679c key \u4e0d\u662f\u4e00\u4e2a\u4e3b\u952e\uff0c\u90a3\u53ef\u80fd\u4f1a\u5bf9\u5e94\u591a\u4e2a\u8bb0\u5f55\u3002 Primary index \u662f\u5f88\u5b9d\u8d35\u7684\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u5176\u4ed6\u90fd\u662f\u8f85\u52a9\u7d22\u5f15\u3002 Dense index(\u7a20\u5bc6\u7d22\u5f15) \u2014 Index record appears for every search-key value in the file. \u6240\u6709 search-key \u90fd\u8981\u51fa\u73b0\u5728\u7d22\u5f15\u6587\u4ef6\u91cc\u3002 Sparse Index\uff08\u7a00\u758f\u7d22\u5f15\uff09 : contains index records for only some search-key values. Example Good tradeoff: sparse index with an index entry for every block in file, corresponding to least search-key value in the block.","title":"Ordered Indices"},{"location":"DB/db10/#multilevel-index","text":"If primary index does not fit in memory, access becomes expensive. \u53ef\u4ee5\u5bf9\u7d22\u5f15\u6587\u4ef6\u672c\u8eab\u518d\u5efa\u7acb\u4e00\u6b21\u7d22\u5f15\u3002","title":"Multilevel Index"},{"location":"DB/db10/#b-tree-index","text":"All paths from root to leaf are of the same length Inner node(not a root or a leaf): between \\(\\lceil n/2\\rceil\\) and \\(n\\) children. Leaf node: between \\(\\lceil (n\u20131)/2\\rceil\\) and \\(n\u20131\\) values Special cases: If the root is not a leaf: at least 2 children. If the root is a leaf : between 0 and (n\u20131)values. \u4e00\u822c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u5757\u7684\u5927\u5c0f, 4K. B+ \u6811\u7684\u53c9\u662f\u975e\u5e38\u5927\u7684\u3002","title":"B+-Tree Index"},{"location":"DB/db10/#observations-about-b-trees","text":"Since the inter-node connections are done by pointers, \u201clogically\u201d close blocks need not be \u201cphysically\u201d close. \u5982\u679c\u6709\u5f88\u591a\u6587\u4ef6\u4e00\u6b21\u6027\u5efa\u7acb B+ \u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\u5efa\u7acb\u3002 \u5982\u679c\u6709 K \u4e2a\u7d22\u5f15\u9879\uff0c\u5219\u6811\u9ad8\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 \\(\\lceil \\log_{\\lceil n/2 \\rceil}(K/2)\\rceil + 1\\) . \u9ad8\u5ea6\u6700\u5c0f\u4e3a \\(\\log_n(K)\\) Examples of Insert on B+-Tree \u6ce8\u610f\u5185\u70b9\u7684 split \u548c\u53f6\u5b50\u7684\u4e0d\u4e00\u6837\u3002\u8981\u628a\u4e2d\u95f4\u7684\u8282\u70b9 move \u4e0a\u53bb\u3002 Examples of Delete on B+-Tree \u4e2d\u95f4\u70b9\u5982\u679c\u4e0d\u591f\uff0c\u4ece\u53e6\u5916\u4e00\u8fb9\u501f\u4e00\u4e2a\u8fc7\u6765\u3002\u4f46\u662f\u4e0d\u80fd\u76f4\u63a5\u501f\uff0c\u9700\u8981\u628a\u5b83\u9876\u4e0a\u53bb\u3002 \u6ce8\u610f\u8003\u8651\u548c\u5144\u5f1f\u5408\u5e76\u3002","title":"Observations about B+-trees"},{"location":"DB/db10/#b-tree-height-and-size-estimation","text":"\u5168\u6ee1\u7684\u65f6\u5019\u8282\u70b9\u6700\u5c11 \u6ce8\u610f\u8fd9\u91cc\u7684\u5411\u4e0a/\u5411\u4e0b\u53d6\u6574\u95ee\u9898 \u6d45\u5c42\u8282\u70b9\u4e2a\u6570\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u7b2c\u4e00\u5c42\u548c\u7b2c\u4e8c\u5c42\u7684\u8282\u70b9\u90fd\u653e\u5230\u5185\u5b58\u4e2d pin \u4f4f\u3002","title":"B+- tree : height and size estimation"},{"location":"DB/db10/#b-tree-file-organization","text":"\u6587\u4ef6\u7ec4\u7ec7 B+-Tree File Organization: Leaf nodes in a B+-tree file organization store records, instead of pointers \u53f6\u5b50\u8282\u70b9\u4e0d\u518d\u653e\u7d22\u5f15\u9879\uff0c\u653e\u8bb0\u5f55\u672c\u8eab\u3002 Helps keep data records clustered even when there are insertions/deletions/updates \u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u534a\u6ee1\u7684\u8981\u6c42\u4ee5\u63d0\u9ad8\u7a7a\u95f4\u5229\u7528\u7387\u3002","title":"B+-Tree File Organization"},{"location":"DB/db10/#other-issues-in-indexing","text":"Record relocation and secondary indices If a record moves, all secondary indices that store record pointers have to be updated Node splits in B+-tree file organizations become very expensive Solution: use primary-index search key instead of record pointer in secondary index Variable length strings as keys Variable fanout Prefix compression Key values at internal nodes can be prefixes of full key Keep enough characters to distinguish entries in the subtrees separated by the key value","title":"Other Issues in Indexing"},{"location":"DB/db10/#multiple-key-access","text":"Composite search keys are search keys containing more than one attribute e.g. (dept_name, salary) Lexicographic ordering : \\((a_1, a_2) < (b_1, b_2)\\) if either \\(a_1 < b_1\\) , or \\(a_1=b_1\\) and \\(a_2 < b_2\\) . \u5355\u4e2a key, \u4e0d\u540c key \u4e4b\u95f4\u7ec4\u5408\u90fd\u53ef\u4ee5\u5efa\u7acb B+ \u6811\u3002\u8fd9\u6837\u4f1a\u6709\u5f88\u591a\u7ec4\u5408\uff0c\u53ef\u4ee5\u5728\u9891\u7e41\u51fa\u73b0\u7684\u67e5\u8be2\u5c5e\u6027\u4e0a\u5efa\u7acb B+ \u6811\u3002","title":"Multiple-Key Access"},{"location":"DB/db10/#non-unique-search-keys","text":"\u6211\u4eec\u53ef\u4ee5\u5728 B+ \u6811\u53f6\u5b50\u8282\u70b9\u4e0d\u76f4\u63a5\u6307\u5411\u78c1\u76d8\u91cc\u7684\u6570\u636e\uff0c\u800c\u662f\u6307\u5411\u4e00\u4e2a\u5757\u3002 \u4e5f\u53ef\u4ee5\u5728\u7d22\u5f15\u4e0a\u52a0\u4e0a\u53bb\u4e00\u4e2a\u7d22\u5f15\uff0c\u4f7f\u5b83\u5bf9\u5e94\u7684\u8bb0\u5f55\u552f\u4e00\u3002 \u53ef\u4ee5\u901a\u8fc7\u8303\u56f4\u67e5\u627e","title":"Non-unique Search Keys"},{"location":"DB/db10/#bulk-loading-and-bottom-up-build","text":"Inserting entries one-at-a-time into a B+-tree requires \\(\\geq 1\\) IO per entry \u5982\u679c\u6211\u4eec\u4e00\u6b21\u6027\u63d2\u5165\u5f88\u591a\u7d22\u5f15\u9879 Efficient alternative 1: Insert in sorted order \u5c40\u90e8\u6027\u8f83\u597d\uff0c\u51cf\u5c11 I/O. Efficient alternative 2: Bottom-up B+-tree construction First sort index entries Then create B+-tree layer-by-layer, starting with leaf level The built B+-tree is written to disk using sequential I/O operations Example \u5982\u679c\u8981\u6392\u5e8f\u7684\u5185\u5bb9\u8f83\u5927\uff0c\u65e0\u6cd5\u653e\u4e0b\u5185\u5b58\uff0c\u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u6392\u5e8f\u3002 fanout \u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\u3002 \u53ef\u4ee5\u7528 level-order \u5199\u5230\u78c1\u76d8\u91cc\uff0c\u4fbf\u4e8e\u987a\u5e8f\u8bbf\u95ee\u6240\u6709\u7d22\u5f15\uff0c\u6b64\u65f6\u5757\u662f\u8fde\u7eed\u7684\u3002\uff08\u4fbf\u4e8e\u987a\u5e8f\u8bbf\u95ee\u6240\u6709\u6570\u636e\u9879\uff09 \u8fd9\u91cc\u7684\u4ee3\u4ef7\u5c31\u662f\u5efa\u597d\u540e\uff0c\u4e00\u6b21 seek \u540e\u5168\u90e8\u5199\u51fa\u53bb (9 blocks) Bulk insert index entries Example \u628a\u521a\u521a\u90a3\u68f5 B+ \u6811\u53f6\u5b50\u8282\u70b9\uff08\u5373\u904d\u5386\u6240\u6709\u6570\u636e\uff09\u9700\u8981 1seek+6blocks. \u968f\u540e\u548c\u4e0a\u9762\u7684\u6570\u636e\u5408\u5e76\u540e\uff0c\u5199\u56de\u78c1\u76d8\u65f6\u9700\u8981 1seek+13blocks. Merge two existing two B+-trees , to create a new B+-tree using the Bottom-UP Build algorithm, as in LSM-tree Index \u5047\u8bbe\u6709\u4e24\u68f5\u8fd9\u6837\u751f\u6210\u7684 B+ \u6811\uff0c\u5c06\u4ed6\u4eec\u5408\u5e76\u5728\u4e00\u8d77\u3002\u9996\u5148\u628a\u53f6\u5b50\u8282\u70b9\u62ff\u51fa\u6765\u6392\u5e8f\u3002","title":"Bulk Loading and Bottom-Up Build"},{"location":"DB/db10/#indexing-in-main-memory","text":"cache \u6309 cache line \u4f20\u8f93, \u53ea\u6709 64B. Random access in memory Much cheaper than on disk/flash, but still expensive compared to cache read Binary search for a key value within a large B+-tree node results in many cache misses \u4e8c\u5206\u67e5\u627e\u53ef\u80fd\u5e26\u6765\u5f88\u591a cache miss. Data structures that make best use of cache preferable \u2013 cache conscious B+- trees with small nodes that fit in cache line are preferable to reduce cache misses search key \u548c pointer \u53ef\u4ee5\u5206\u5f00\u653e\u3002 Key idea: use large node size to optimize disk access, but structure data within a node using a tree with small node size, instead of using an array, to optimize cache access.","title":"Indexing in Main Memory"},{"location":"DB/db10/#indexing-on-flash","text":"Flash \u91cc\u4e0d\u662f\u5373\u65f6\u4fee\u6539\uff0c\u800c\u662f\u5148\u64e6\u6389\u518d\u5199\u3002\u540c\u65f6\u64e6\u7684\u6b21\u6570\u662f\u6709\u9650\u5236\u7684\u3002\u56e0\u6b64\u6700\u597d\u7684\u65b9\u6cd5\u662f\u4ece\u5e95\u6784\u5efa\uff0c\u7136\u540e\u987a\u5e8f\u5199\u5165\u3002 Random I/O cost much lower on flash 20 to 100 microseconds for read/write Writes are not in-place, and (eventually) require a more expensive erase Optimum page size therefore much smaller Bulk-loading still useful since it minimizes page erases Write-optimized tree structures (i.e., LSM-tree) have been adapted to minimize page writes for flash-optimized search trees \u5199\u4f18\u5316\u7d22\u5f15\u7ed3\u6784","title":"Indexing on Flash"},{"location":"DB/db10/#log-structured-merge-lsm-tree","text":"Records inserted first into in-memory tree ( \\(L_0\\) tree) When in-memory tree is full, records moved to disk ( \\(L_1\\) tree) B+-tree constructed using bottom-up build by merging existing \\(L_1\\) tree with records from \\(L_0\\) tree \u5185\u5b58\u91cc\u7684 B+ \u6811\u5982\u679c\u6ee1\u4e86\uff0c\u5c31\u9a6c\u4e0a\u5199\u5230\u78c1\u76d8\u91cc\u53bb\uff08\u53ef\u4ee5\u8fde\u7eed\u5199\uff09 When \\(L_1\\) tree exceeds some threshold, merge into $L_2\uffe5 tree And so on for more levels Size threshold for \\(L_{i+1}\\) tree is \\(k\\) times size threshold for \\(L_i\\) tree \u8fd9\u6837\u6211\u4eec\u628a\u968f\u673a\u5199\u53d8\u4e3a\u4e86\u987a\u5e8f\u5199\u3002\u4f46\u6b64\u65f6\u67e5\u627e\u4e00\u4e2a\u7d22\u5f15\uff0c\u5c31\u8981\u904d\u5386\u6240\u6709 B+ \u6811\u3002 Benefits of LSM approach Inserts are done using only sequential I/O operations Leaves are full , avoiding space wastage Reduced number of I/O operations per record inserted as compared to normal B+-tree (up to some size) Drawback of LSM approach Queries have to search multiple trees Entire content of each level copied multiple times Stepped Merge Index \u539f\u5148\u7684\u7ed3\u6784\u4e2d\uff0cMerge \u64cd\u4f5c\u592a\u591a\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u6027\u5408\u5e76\u3002 \u78c1\u76d8\u4e0a\u6bcf\u5c42\u6709 k \u68f5\u6811\uff0c\u5f53 k \u4e2a\u7d22\u5f15\u5904\u4e8e\u540c\u4e00\u5c42\u65f6\uff0c\u5408\u5e76\u5b83\u4eec\u5e76\u5f97\u5230\u4e00\u68f5\u5c42\u6570 \\(+1\\) \u7684\u6811\uff0c\u5199\u56de\u3002 \\(L_1\\) \u6709\u5927\u5c0f\u9650\u5236\uff0c\u8fbe\u5230\u540e\u4f1a\u751f\u6210\u53e6\u4e00\u4e2a B+ \u6811\uff0c\u4f9d\u6b21\u4e3a k \u500d\u3002 \u5e03\u9686\u8fc7\u6ee4\u5668","title":"Log Structured Merge (LSM) Tree"},{"location":"DB/db11/","text":"Query Processing \u00b6 Abstract Basic Steps in Query Processing Measures of Query Cost Selection Operation Sorting Join Operation Other Operations Evaluation of Expressions Basic Steps in Query Processing \u00b6 \u7ecf\u8fc7\u8bed\u6cd5\u5206\u6790\u3001\u8bed\u4e49\u68c0\u67e5\u7ffb\u8bd1\u6210\u5173\u7cfb\u8868\u8fbe\u5f0f\uff0c\u7ecf\u8fc7\u67e5\u8be2\u4f18\u5316\u8f6c\u5316\u6210\u6267\u884c\u8ba1\u5212\uff08\u76ee\u6807\u4ee3\u7801\uff09\uff0c\u7531\u6c42\u503c\u5f15\u64ce\u5f97\u5230\u8f93\u51fa\u3002 Example \u903b\u8f91\u4f18\u5316\uff1a\u628a\u9009\u62e9\u8fd0\u7b97\u5f80\u53f6\u5b50\u4e0a\u63a8\uff1b\u5148\u8fde\u63a5\u7684\u662f\u7ed3\u679c\u6bd4\u8f83\u5c0f\u7684\u3002 An evaluation plan defines exactly what algorithm is used for each operation, and how the execution of the operations is coordinated. \u7ecf\u8fc7\u4ee3\u4ef7\u4f30\u7b97\uff0c\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u7b97\u6cd5\u7684\u4ee3\u4ef7\u6700\u5c0f\u3002\u5982\u4e0a\u56fe\u5de6\u8fb9\u4f7f\u7528\u4e86 B+ \u6811\u7d22\u5f15\uff0c\u53f3\u8fb9\u4f7f\u7528\u4e86\u7ebf\u6027\u626b\u63cf\u3002 pipeline \u8868\u793a\u6700\u4e0b\u9762\u4e24\u6b65\u53ef\u4ee5\u6d41\u6c34\u7ebf\uff0c\u5373\u5e76\u884c\u8ba1\u7b97\u3002 \uff08\u706b\u5c71\u6a21\u578b\uff09 Measures of Query Cost \u00b6 Typically disk access is the predominant cost, and is also relatively easy to estimate. \u5ffd\u7565 CPU cost. Measured by taking into account Number of seeks Number of blocks read Number of blocks written \u901a\u5e38\u5199\u7684\u65f6\u95f4\u6bd4\u8bfb\u7684\u65f6\u95f4\u4e45\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u80fd\u9700\u8981\u68c0\u9a8c\u5199\u7684\u7ed3\u679c For simplicity we just use the number of block transfers from disk and the number of seeks as the cost measures \\(t_T\\) \u2013 time to transfer one block \\(t_S\\) \u2013 time for one seek Cost for b block transfers plus S seeks \\(b * t_T + S * t_S\\) We often use worst case estimates , assuming only the minimum amount of memory needed for the operation is available. \u5373\u5047\u8bbe\u7f13\u51b2\u533a\u6700\u5c0f\u7684\u65f6\u5019\uff0c\u800c\u4e14\u90fd\u662f\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u800c\u975e\u4ece buffer \u4e2d\u8bfb\u53d6\u3002 Selection Operation \u00b6 File scan \u00b6 Algorithm A1 (linear search ). Scan each file block and test all records to see whether they satisfy the selection condition. \uff08\u5047\u5b9a\u6570\u636e\u5757\u90fd\u662f\u8fde\u7eed\u5b58\u653e\u7684\uff09 worst cost = \\(b_r*t_T+t_S\\) \\(b_r\\) \u662f\u8981\u627e\u7684\u5757\u7684\u6570\u91cf average cost = \\(b_r/2*t_T+t_S\\) \u8fd9\u91cc\u5982\u679c\u641c\u7d22\u7684\u662f key, \u90a3\u6211\u4eec\u626b\u5230\u8fd9\u4e2a\u8bb0\u5f55\u5c31\u53ef\u4ee5\u505c\u6b62\u3002 Index scan \u00b6 A2 (primary B+-tree index / clustering B+-tree index, equality on key) . \u5728\u4e3b\u952e\u4e0a\u67e5\u627e cost = \\((h_i+1)* (t_T+t_S)\\) \u4e3b\u7d22\u5f15, key \u4e0a\u7684\u7b49\u503c\u67e5\u627e \u8fd9\u91cc\u7684\u9ad8\u5ea6\u4ece 1 \u5f00\u59cb\uff08+1 \u8868\u793a\u6700\u540e\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u9700\u8981\u4ece\u78c1\u76d8\u4e2d\u8bfb\uff09 A3 (primary B+-tree index/ clustering B+-tree index, equality on nonkey) . Records will be on consecutive blocks \u6b64\u65f6\u7d22\u5f15\u7684\u503c\u4e0d\u662f\u4e3b\u952e. b \u8868\u793a\u641c\u7d22\u7801\u5bf9\u5e94\u7684\u8bb0\u5f55\u6570\u91cf\u3002 cost = \\(h_i *(t_T+t_S) + t_S + t_T *b\\) \u4e3b\u7d22\u5f15, nonkey \u4e0a\u7684\u7b49\u503c\u67e5\u627e A4 (secondary B+-tree index , equality on key) . cost = \\((h_i + 1) * (t_T + t_S)\\) \u8f85\u52a9\u7d22\u5f15, key \u4e0a\u7684\u7b49\u503c\u67e5\u627e A4\u2019 (secondary B+-index on nonkey, equality). Cost = $(h_i + m+ n) * (t_T + t_S) $ \u8fd9\u91cc m \u8868\u793a\u653e\u6307\u9488\u7684\u5757\u7684\u6570\u91cf, n \u8868\u793a\u5bf9\u5e94\u78c1\u76d8\u91cc\u7684\u8bb0\u5f55\u7684\u6570\u91cf\u3002 \u8f85\u52a9\u7d22\u5f15, nonkey \u4e0a\u7684\u7b49\u503c\u67e5\u627e Selections Involving Comparisons \u00b6 \u67e5\u8be2 \\(\\sigma_{A\\leq V}(r)\\) (or \\(\\sigma_{A\\geq V}(r)\\) ) A5 (primary B+-index / clustering B+-index index, comparison). (Relation is sorted on A) \u9996\u5148\u627e\u5230\u7b2c\u4e00\u4e2a \\(\\geq v\\) . \u7684\u503c \u628a\u540e\u9762\u7684\u5757\u987a\u5e8f\u8bfb\u8fdb\u53bb Cost = \\(h_i * (t_T + t_S) + t_S + t_T * b\\) (\u540c\u60c5\u51b5 3) \u4e3b\u7d22\u5f15, key \u4e0a\u7684\u6bd4\u8f83 A6 (secondary B+-tree index, comparison). \u60c5\u51b5\u7c7b\u4f3c A4 \u8f85\u52a9\u7d22\u5f15, nonkey \u4e0a\u7684\u6bd4\u8f83 Implementation of Complex Selections \u00b6 Conjunction \\(\\sigma_{\\theta_1} \\wedge \\ldots \\wedge_{\\theta_n}(r)\\) \u53ef\u4ee5\u7ebf\u6027\u626b\u63cf\uff0c\u6216\u8005\u5229\u7528\u67d0\u4e2a\u5c5e\u6027\u7684 index \u5148\u67e5\u8be2\uff0c\u628a\u7b26\u5408\u7684\u8bfb\u5230\u5185\u5b58\u4e2d\uff0c\u518d\u68c0\u67e5\u5176\u4ed6\u5c5e\u6027\u3002 \u5982\u679c\u6709\u5f88\u591a\u4e2a\u5c5e\u6027\u90fd\u6709\u7d22\u5f15\uff0c\u6211\u4eec\u9009\u62e9\u4e2d\u95f4\u7ed3\u679c\u5c11\u7684\u3002 A7 (conjunctive selection using one index). Select a combination of \\(\\theta_i\\) and algorithms A1 through A6 that results in the least cost for \\(\\sigma_{\\theta_i}(r)\\) . Test other conditions on tuple after fetching it into memory buffer. A8 (conjunctive selection using composite index). Use appropriate composite (multiple-key) index if available. \u5229\u7528\u590d\u5408\u7d22\u5f15 A9 (conjunctive selection by intersection of identifiers). \u5bf9\u6bcf\u4e2a\u7d22\u5f15\u90fd\u8fdb\u884c\u67e5\u8be2\uff0c\u5c06\u7ed3\u679c\u62fc\u8d77\u6765 Algorithms for Complex Selections \u00b6 Disjunction: \\(\\sigma_{\\theta_1} \\vee \\ldots \\vee_{\\theta_n}(r)\\) A10 (disjunctive selection by union of identifiers). Applicable if all conditions have available indices. Otherwise use linear scan. Use corresponding index for each condition, and take union of all the obtained sets of record pointers. Then fetch records from file Negation: \\(\\sigma_{\\neg \\theta}(r)\\) Use linear scan on file If very few records satisfy \\(\\neg \\theta\\) , and an index is applicable to \\(\\theta\\) Find satisfying records using index and fetch from file Bitmap Index Scan \u00b6 Sorting \u00b6 For relations that don\u2019t fit in memory, external sort-merge is a good choice. Example \u521d\u59cb\u5185\u5b58\u653e\u4e0d\u4e0b\uff0c\u53ea\u80fd\u653e \\(M\\) pages. \u4e00\u6b21\u6027\u8bfb \\(M\\) \u5757\uff0c\u5728\u5185\u5b58\u5185\u6392\u5e8f\uff0c\u6392\u597d\u540e\u5148\u5199\u56de\uff0c\u5f62\u6210\u4e00\u4e2a\u5f52\u5e76\u6bb5\u3002\u518d\u8bfb\u5165\u7b2c\u4e8c\u6bb5\u5230\u5185\u5b58\u4e2d\uff0c\u6392\u5e8f\u540e\u518d\u5199\u56de\uff0c\u5f97\u5230\u82e5\u5e72\u5f52\u5e76\u6bb5( \\(\\dfrac{b_r}{M}\\) ) \u4f1a\u6709 \\(2*\\dfrac{b_r}{M}\\) \u6b21 seek, \\(2*b_r\\) \u6b21 transfer. Procedure \u00b6 Let \\(M\\) denote memory size (in pages). Create sorted runs(\u5f52\u5e76\u6bb5) Repeatedly do the following till the end of the relation: Read M blocks of relation into memory Sort the in-memory blocks Write sorted data to run \\(R_i\\) ; increment i. \u5047\u8bbe\u751f\u6210\u4e86 \\(N\\) \u4e2a\u5f52\u5e76\u6bb5 Merge the runs \\(N<M\\) \u5982\u679c\u5f52\u5e76\u6bb5\u5c11\u4e8e\u53ef\u7528\u5185\u5b58\u9875 N \u8def\u5f52\u5e76 \u5f52\u5e76\u65f6\u6bcf\u4e00\u6bb5\u53ea\u9700\u8981\u4e00\u5757\u7f13\u51b2\u533a\uff08\u8f93\u51fa\u5757\u4e5f\u9700\u8981\u4e00\u5757\u7f13\u51b2\u533a\uff09 \\(N\\geq M\\) \u6bcf\u6b21 pass, \u6211\u4eec\u4e0d\u505c\u5730\u628a M-1 \u4e2a\u6bb5\u53d8\u6210\u4e86\u4e00\u4e2a\u5927\u7684\u5f52\u5e76\u6bb5\uff0c\u6b64\u65f6\u6570\u91cf\u51cf\u5c11\u4e3a\u539f\u6765\u7684 \\(\\dfrac{1}{M-1}\\) . \u5982\u679c\u4ecd\u7136\u6570\u91cf\u8d85\u8fc7 M, \u7ee7\u7eed pass. e.g. If M=11, and there are 90 runs, one pass reduces the number of runs to 9, each 10 times the size of the initial runs. Cost analysis \u00b6 transfer \u6211\u4eec\u4e0d\u8003\u8651\u6700\u540e\u4e00\u6b21\u5199\u78c1\u76d8\u7684 cost, \u56e0\u4e3a\u53ef\u80fd\u6d41\u6c34\u7ebf\u4f1a\u76f4\u63a5\u628a\u7ed3\u679c\u4ea4\u7ed9\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002 * seek Advanced version \u00b6 \u6bcf\u4e00\u6b21\u8bfb\u8fdb\u53bb\u90fd\u8981 seek, \u53ef\u4ee5\u6539\u8fdb\u3002\u4e3a\u6bcf\u4e00\u4e2a\u5f52\u5e76\u6bb5\u5206\u914d\u591a\u4e2a\u7f13\u51b2\u533a\u3002\u8fd9\u6837\u6211\u4eec\u5b9a\u4f4d\u4e00\u6b21\u4e4b\u540e\u53ef\u4ee5\u8bfb\u5165\u591a\u5757\u8fdb\u5165\u7f13\u51b2\u533a\u3002 \u51cf\u5c11\u4e86 seek \u6b21\u6570\uff0c\u4f46\u8fd9\u6837\u8f6e\u6b21\u53ef\u80fd\u4f1a\u589e\u52a0\u3002 Join Operation \u00b6 Several different algorithms to implement joins Nested-loop join Block nested-loop join Indexed nested-loop join Merge-join Hash-join Nested-Loop Join \u00b6 \u4e24\u91cd\u5faa\u73af \\(r\\) is called the outer relation and \\(s\\) the inner relation of the join. \\(n_r * b_s + b_r\\) block transfers, plus \\(n_r + b_r\\) seeks \u5bf9\u5916\u5faa\u73af\u6bcf\u4e2a\u8bb0\u5f55\uff0c\u5185\u5faa\u73af\u7684\u6240\u6709\u5757\u90fd\u8981\u8fdb\u53bb. seek \u65f6\u6bcf\u6b21\u5916\u5faa\u73af\u90fd\u9700\u8981 seek, \u5185\u5faa\u73af\u6bcf\u8f6e\u53ea\u9700\u8981\u4e00\u6b21 seek. \u5982\u679c\u5185\u5b58\u80fd\u5bb9\u7eb3\u6240\u6709\u7684\u5173\u7cfb\uff0c\u90a3\u6211\u4eec\u53ea\u9700\u8981 \\(b_r + b_s\\) block transfers and 2 seeks. Block Nested-Loop Join \u00b6 Worst case estimate: \\(b_r * b_s + b_r\\) block transfers + \\(2 * b_r\\) seeks Each block in the inner relation \\(s\\) is read once for each block in the outer relation Best case: \\(b_r + b_s\\) block transfers + 2 seeks. \u8981\u628a\u5c0f\u7684\u4f5c\u4e3a\u5916\u5173\u7cfb\u3002 Improvements to block nested loop algorithms: \u5047\u8bbe\u5185\u5b58\u6709 M \u5757\uff0c\u6709\u4e00\u5757\u4f5c\u4e3a output \u7684\u7f13\u51b2\uff0c\u5269\u4e0b M-1 \u5757\u4e2d M-2 \u5757\u5747\u7ed9\u5916\u5173\u7cfb\uff0c\u5185\u5173\u7cfb\u7ed9\u4e00\u5757\u3002 Cost = \\(\\lceil b_r / (M-2) \\rceil * b_s + b_r\\) block transfers + \\(2 \\lceil b_r / (M-2)\\rceil\\) seeks If equi-join attribute forms a key on the inner relation, stop inner loop on first match \u5982\u679c\u8fde\u63a5\u7684\u5c5e\u6027\u662f key, \u90a3\u4e48\u5f53\u6211\u4eec\u5339\u914d\u4e0a\u4e4b\u540e\u5c31\u53ef\u4ee5\u505c\u6b62\u5185\u5faa\u73af\u3002 Scan inner loop forward and backward alternately, to make use of the blocks remaining in buffer (with LRU replacement) \u5229\u7528 LRU \u7b56\u7565\u7684\u7279\u70b9\uff0cinner \u6b63\u5411\u626b\u63cf\u540e\u518d\u53cd\u8fc7\u6765\uff0c\u8fd9\u6837\u6700\u8fd1\u7684\u5757\u5f88\u53ef\u80fd\u8fd8\u5728\u5185\u5b58\u4e2d\uff0c\u63d0\u9ad8\u7f13\u51b2\u547d\u4e2d\u7387\u3002 Indexed Nested-Loop Join \u00b6 \u5982\u679c\u5185\u5faa\u73af\u6709\u7d22\u5f15\uff0c\u6211\u4eec\u5c31\u6ca1\u5fc5\u8981\u626b\u63cf\u5185\u5faa\u73af\u6240\u6709\u5757\u4e86\u3002 Index lookups can replace file scans if join is an equi-join or natural join and an index is available on the inner relation\u2019s join attribute \u8fde\u63a5\u5c5e\u6027\u6709\u7d22\u5f15 Cost of the join: \\(b_r (t_T + t_S) + n_r * c\\) \u8fd9\u91cc\u5047\u5b9a\u7ed9\u5916\u5173\u7cfb\u4e00\u5757\u5185\u5b58. \\(c\\) \u8868\u793a\u904d\u5386\u7d22\u5f15\u5e76\u53d6\u51fa\u6240\u6709\u5339\u914d\u7684\u5143\u7ec4\u7684\u65f6\u95f4\u3002 Merge Join \u00b6 \u5047\u8bbe\u4e24\u4e2a\u5173\u7cfb\u5df2\u7ecf\u57fa\u4e8e\u8fde\u63a5\u5c5e\u6027\u6392\u597d\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5f52\u5e76\u7684\u601d\u60f3\u8fde\u63a5\u3002 Sort both relations on their join attribute (if not already sorted on the join attributes). Merge the sorted relations to join them Join step is similar to the merge stage of the sort-merge algorithm. Main difference is handling of duplicate values in join attribute \u2014 every pair with same value on join attribute must be matched \\(b_r + b_s\\) block transfers + \\(\\lceil b_r / b_b\\rceil + \\lceil b_s / b_b\\rceil\\) seeks If the buffer memory size is M pages, in order to minimize the cost of merge join, how to assign M blocks to r and s respectively? The estimated cost is \\(b_r + b_s\\) block transfers + \\(\\lceil b_r / x_r\\rceil + \\lceil b_s / x_s\\rceil\\) seeks ( \\(x_r+x_s=M\\) ) \u5982\u679c\u4e24\u4e2a\u8868\u90fd\u65e0\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u6392\u5e8f\u518d Merge-join, \u8fd9\u65f6\u8fd8\u8981\u7b97\u4e0a\u6392\u5e8f\u7684\u4ee3\u4ef7\u3002 Hash Join \u00b6 \u7528\u4e00\u4e2a Hash \u51fd\u6570\u628a\u4e24\u4e2a\u5173\u7cfb\u8fdb\u884c\u5206\u7247\u3002\u80fd\u591f\u8fde\u63a5\u4e0a\u7684\u8bb0\u5f55\uff0c\u4e00\u5b9a\u5904\u4e8e\u540c\u4e00\u4e2a partition \u91cc\u9762\uff08\u53cd\u4e4b\u4e0d\u4e00\u5b9a\uff09 \u8fd9\u6837\u5927\u5173\u7cfb\u53d8\u6210\u4e86\u5c0f\u5173\u7cfb\u3002 \u6211\u4eec\u8981\u6c42\u5176\u4e2d\u67d0\u4e2a\u7684\u5c0f\u5173\u7cfb\u8981\u80fd\u4e00\u6b21\u653e\u5230\u5185\u5b58\u4e2d\u3002 Applicable for equi-joins and natural joins. the value \\(n\\) (partition \u7684\u4e2a\u6570) and the hash function \\(h\\) is chosen such that each si should fit in memory. \\(n \\geq \\lceil b_s / M\\rceil\\) \u8981\u6c42\u6bcf\u4e2a partition \u7684\u5927\u5c0f\u90fd\u8981\u5c0f\u4e8e M, \u4e0d\u7136\u4e0d\u80fd\u4e00\u6b21\u6027\u653e\u8fdb\u53bb\u3002 \u5982\u679c\u6211\u4eec\u7684 \\(n\\) \u5f88\u5927\uff0c\u8981\u5206\u51fa\u6765\u7684 partition \u5f88\u5927\uff0c\u4f46\u662f\u5185\u5b58\u4e0d\u591f\uff0c\u5173\u7cfb\u5206\u533a\u4e0d\u80fd\u4e00\u6b21\u751f\u6210\u6240\u6709\u7684 partition, \u8981\u7ecf\u8fc7\u591a\u6b21\u5206\u533a\u3002 \u6bcf\u6b21\u8f93\u5165\u5148\u88ab\u5212\u5206\uff0c\u968f\u540e\u8fdb\u884c\u7ec6\u5206\u3002 \u6ce8\u610f\u5206\u7247\u7684\u65f6\u5019\uff0c\u8fd8\u8981\u5199\u51fa\u53bb\u3002 \u5339\u914d\u65f6\u6211\u4eec\u6709\u54c8\u5e0c\u7d22\u5f15\u3002 Typically n is chosen as \\(\\lceil b_s/M\\rceil * f\\) where \\(f\\) is a \u201cfudge factor(\u4fee\u6b63\u56e0\u5b50)\u201d, typically around 1.2 \u5206\u4e0d\u5300\uff0c\u6211\u4eec\u6709\u610f\u653e\u5927\u3002 The probe input relation partitions \\(r_i\\) need not fit in memory Recursive partitioning \u00b6 Recursive partitioning required if number of partitions n is greater than number of pages M of memory. A relation does not need recursive partitioning if \\(M > n_h + 1\\) , or equivalently \\(M > (b_s/M) + 1\\) , which simplifies (approximately) to \\(M > \\sqrt{b_s}\\) . Example Cost of Hash-Join \u00b6 Other Operations \u00b6 Duplicate elimination can be implemented via hashing or sorting. On sorting duplicates will come adjacent to each other, and all but one set of duplicates can be deleted. \u5728\u6392\u5e8f\u7684\u8fc7\u7a0b\uff08\u751f\u6210\u3001\u5408\u5e76\u5f52\u5e76\u6bb5\u5c31\u8fdb\u884c\u53bb\u91cd\uff09 Hashing is similar Aggregation Sorting or hashing can be used to bring tuples in the same group together, and then the aggregate functions can be applied on each group. \u751f\u6210\u5f52\u5e76\u6bb5\u7684\u65f6\u5019\uff0c\u540c\u4e00\u6bb5\u7684\u5c31\u53ef\u4ee5\u7edf\u8ba1\u7edf\u4e00\u7ed3\u679c","title":"\u67e5\u8be2\u5904\u7406"},{"location":"DB/db11/#query-processing","text":"Abstract Basic Steps in Query Processing Measures of Query Cost Selection Operation Sorting Join Operation Other Operations Evaluation of Expressions","title":"Query Processing"},{"location":"DB/db11/#basic-steps-in-query-processing","text":"\u7ecf\u8fc7\u8bed\u6cd5\u5206\u6790\u3001\u8bed\u4e49\u68c0\u67e5\u7ffb\u8bd1\u6210\u5173\u7cfb\u8868\u8fbe\u5f0f\uff0c\u7ecf\u8fc7\u67e5\u8be2\u4f18\u5316\u8f6c\u5316\u6210\u6267\u884c\u8ba1\u5212\uff08\u76ee\u6807\u4ee3\u7801\uff09\uff0c\u7531\u6c42\u503c\u5f15\u64ce\u5f97\u5230\u8f93\u51fa\u3002 Example \u903b\u8f91\u4f18\u5316\uff1a\u628a\u9009\u62e9\u8fd0\u7b97\u5f80\u53f6\u5b50\u4e0a\u63a8\uff1b\u5148\u8fde\u63a5\u7684\u662f\u7ed3\u679c\u6bd4\u8f83\u5c0f\u7684\u3002 An evaluation plan defines exactly what algorithm is used for each operation, and how the execution of the operations is coordinated. \u7ecf\u8fc7\u4ee3\u4ef7\u4f30\u7b97\uff0c\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u7b97\u6cd5\u7684\u4ee3\u4ef7\u6700\u5c0f\u3002\u5982\u4e0a\u56fe\u5de6\u8fb9\u4f7f\u7528\u4e86 B+ \u6811\u7d22\u5f15\uff0c\u53f3\u8fb9\u4f7f\u7528\u4e86\u7ebf\u6027\u626b\u63cf\u3002 pipeline \u8868\u793a\u6700\u4e0b\u9762\u4e24\u6b65\u53ef\u4ee5\u6d41\u6c34\u7ebf\uff0c\u5373\u5e76\u884c\u8ba1\u7b97\u3002 \uff08\u706b\u5c71\u6a21\u578b\uff09","title":"Basic Steps in Query Processing"},{"location":"DB/db11/#measures-of-query-cost","text":"Typically disk access is the predominant cost, and is also relatively easy to estimate. \u5ffd\u7565 CPU cost. Measured by taking into account Number of seeks Number of blocks read Number of blocks written \u901a\u5e38\u5199\u7684\u65f6\u95f4\u6bd4\u8bfb\u7684\u65f6\u95f4\u4e45\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u80fd\u9700\u8981\u68c0\u9a8c\u5199\u7684\u7ed3\u679c For simplicity we just use the number of block transfers from disk and the number of seeks as the cost measures \\(t_T\\) \u2013 time to transfer one block \\(t_S\\) \u2013 time for one seek Cost for b block transfers plus S seeks \\(b * t_T + S * t_S\\) We often use worst case estimates , assuming only the minimum amount of memory needed for the operation is available. \u5373\u5047\u8bbe\u7f13\u51b2\u533a\u6700\u5c0f\u7684\u65f6\u5019\uff0c\u800c\u4e14\u90fd\u662f\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u800c\u975e\u4ece buffer \u4e2d\u8bfb\u53d6\u3002","title":"Measures of Query Cost"},{"location":"DB/db11/#selection-operation","text":"","title":"Selection Operation"},{"location":"DB/db11/#file-scan","text":"Algorithm A1 (linear search ). Scan each file block and test all records to see whether they satisfy the selection condition. \uff08\u5047\u5b9a\u6570\u636e\u5757\u90fd\u662f\u8fde\u7eed\u5b58\u653e\u7684\uff09 worst cost = \\(b_r*t_T+t_S\\) \\(b_r\\) \u662f\u8981\u627e\u7684\u5757\u7684\u6570\u91cf average cost = \\(b_r/2*t_T+t_S\\) \u8fd9\u91cc\u5982\u679c\u641c\u7d22\u7684\u662f key, \u90a3\u6211\u4eec\u626b\u5230\u8fd9\u4e2a\u8bb0\u5f55\u5c31\u53ef\u4ee5\u505c\u6b62\u3002","title":"File scan"},{"location":"DB/db11/#index-scan","text":"A2 (primary B+-tree index / clustering B+-tree index, equality on key) . \u5728\u4e3b\u952e\u4e0a\u67e5\u627e cost = \\((h_i+1)* (t_T+t_S)\\) \u4e3b\u7d22\u5f15, key \u4e0a\u7684\u7b49\u503c\u67e5\u627e \u8fd9\u91cc\u7684\u9ad8\u5ea6\u4ece 1 \u5f00\u59cb\uff08+1 \u8868\u793a\u6700\u540e\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u9700\u8981\u4ece\u78c1\u76d8\u4e2d\u8bfb\uff09 A3 (primary B+-tree index/ clustering B+-tree index, equality on nonkey) . Records will be on consecutive blocks \u6b64\u65f6\u7d22\u5f15\u7684\u503c\u4e0d\u662f\u4e3b\u952e. b \u8868\u793a\u641c\u7d22\u7801\u5bf9\u5e94\u7684\u8bb0\u5f55\u6570\u91cf\u3002 cost = \\(h_i *(t_T+t_S) + t_S + t_T *b\\) \u4e3b\u7d22\u5f15, nonkey \u4e0a\u7684\u7b49\u503c\u67e5\u627e A4 (secondary B+-tree index , equality on key) . cost = \\((h_i + 1) * (t_T + t_S)\\) \u8f85\u52a9\u7d22\u5f15, key \u4e0a\u7684\u7b49\u503c\u67e5\u627e A4\u2019 (secondary B+-index on nonkey, equality). Cost = $(h_i + m+ n) * (t_T + t_S) $ \u8fd9\u91cc m \u8868\u793a\u653e\u6307\u9488\u7684\u5757\u7684\u6570\u91cf, n \u8868\u793a\u5bf9\u5e94\u78c1\u76d8\u91cc\u7684\u8bb0\u5f55\u7684\u6570\u91cf\u3002 \u8f85\u52a9\u7d22\u5f15, nonkey \u4e0a\u7684\u7b49\u503c\u67e5\u627e","title":"Index scan"},{"location":"DB/db11/#selections-involving-comparisons","text":"\u67e5\u8be2 \\(\\sigma_{A\\leq V}(r)\\) (or \\(\\sigma_{A\\geq V}(r)\\) ) A5 (primary B+-index / clustering B+-index index, comparison). (Relation is sorted on A) \u9996\u5148\u627e\u5230\u7b2c\u4e00\u4e2a \\(\\geq v\\) . \u7684\u503c \u628a\u540e\u9762\u7684\u5757\u987a\u5e8f\u8bfb\u8fdb\u53bb Cost = \\(h_i * (t_T + t_S) + t_S + t_T * b\\) (\u540c\u60c5\u51b5 3) \u4e3b\u7d22\u5f15, key \u4e0a\u7684\u6bd4\u8f83 A6 (secondary B+-tree index, comparison). \u60c5\u51b5\u7c7b\u4f3c A4 \u8f85\u52a9\u7d22\u5f15, nonkey \u4e0a\u7684\u6bd4\u8f83","title":"Selections Involving Comparisons"},{"location":"DB/db11/#implementation-of-complex-selections","text":"Conjunction \\(\\sigma_{\\theta_1} \\wedge \\ldots \\wedge_{\\theta_n}(r)\\) \u53ef\u4ee5\u7ebf\u6027\u626b\u63cf\uff0c\u6216\u8005\u5229\u7528\u67d0\u4e2a\u5c5e\u6027\u7684 index \u5148\u67e5\u8be2\uff0c\u628a\u7b26\u5408\u7684\u8bfb\u5230\u5185\u5b58\u4e2d\uff0c\u518d\u68c0\u67e5\u5176\u4ed6\u5c5e\u6027\u3002 \u5982\u679c\u6709\u5f88\u591a\u4e2a\u5c5e\u6027\u90fd\u6709\u7d22\u5f15\uff0c\u6211\u4eec\u9009\u62e9\u4e2d\u95f4\u7ed3\u679c\u5c11\u7684\u3002 A7 (conjunctive selection using one index). Select a combination of \\(\\theta_i\\) and algorithms A1 through A6 that results in the least cost for \\(\\sigma_{\\theta_i}(r)\\) . Test other conditions on tuple after fetching it into memory buffer. A8 (conjunctive selection using composite index). Use appropriate composite (multiple-key) index if available. \u5229\u7528\u590d\u5408\u7d22\u5f15 A9 (conjunctive selection by intersection of identifiers). \u5bf9\u6bcf\u4e2a\u7d22\u5f15\u90fd\u8fdb\u884c\u67e5\u8be2\uff0c\u5c06\u7ed3\u679c\u62fc\u8d77\u6765","title":"Implementation of Complex Selections"},{"location":"DB/db11/#algorithms-for-complex-selections","text":"Disjunction: \\(\\sigma_{\\theta_1} \\vee \\ldots \\vee_{\\theta_n}(r)\\) A10 (disjunctive selection by union of identifiers). Applicable if all conditions have available indices. Otherwise use linear scan. Use corresponding index for each condition, and take union of all the obtained sets of record pointers. Then fetch records from file Negation: \\(\\sigma_{\\neg \\theta}(r)\\) Use linear scan on file If very few records satisfy \\(\\neg \\theta\\) , and an index is applicable to \\(\\theta\\) Find satisfying records using index and fetch from file","title":"Algorithms for Complex Selections"},{"location":"DB/db11/#bitmap-index-scan","text":"","title":"Bitmap Index Scan"},{"location":"DB/db11/#sorting","text":"For relations that don\u2019t fit in memory, external sort-merge is a good choice. Example \u521d\u59cb\u5185\u5b58\u653e\u4e0d\u4e0b\uff0c\u53ea\u80fd\u653e \\(M\\) pages. \u4e00\u6b21\u6027\u8bfb \\(M\\) \u5757\uff0c\u5728\u5185\u5b58\u5185\u6392\u5e8f\uff0c\u6392\u597d\u540e\u5148\u5199\u56de\uff0c\u5f62\u6210\u4e00\u4e2a\u5f52\u5e76\u6bb5\u3002\u518d\u8bfb\u5165\u7b2c\u4e8c\u6bb5\u5230\u5185\u5b58\u4e2d\uff0c\u6392\u5e8f\u540e\u518d\u5199\u56de\uff0c\u5f97\u5230\u82e5\u5e72\u5f52\u5e76\u6bb5( \\(\\dfrac{b_r}{M}\\) ) \u4f1a\u6709 \\(2*\\dfrac{b_r}{M}\\) \u6b21 seek, \\(2*b_r\\) \u6b21 transfer.","title":"Sorting"},{"location":"DB/db11/#procedure","text":"Let \\(M\\) denote memory size (in pages). Create sorted runs(\u5f52\u5e76\u6bb5) Repeatedly do the following till the end of the relation: Read M blocks of relation into memory Sort the in-memory blocks Write sorted data to run \\(R_i\\) ; increment i. \u5047\u8bbe\u751f\u6210\u4e86 \\(N\\) \u4e2a\u5f52\u5e76\u6bb5 Merge the runs \\(N<M\\) \u5982\u679c\u5f52\u5e76\u6bb5\u5c11\u4e8e\u53ef\u7528\u5185\u5b58\u9875 N \u8def\u5f52\u5e76 \u5f52\u5e76\u65f6\u6bcf\u4e00\u6bb5\u53ea\u9700\u8981\u4e00\u5757\u7f13\u51b2\u533a\uff08\u8f93\u51fa\u5757\u4e5f\u9700\u8981\u4e00\u5757\u7f13\u51b2\u533a\uff09 \\(N\\geq M\\) \u6bcf\u6b21 pass, \u6211\u4eec\u4e0d\u505c\u5730\u628a M-1 \u4e2a\u6bb5\u53d8\u6210\u4e86\u4e00\u4e2a\u5927\u7684\u5f52\u5e76\u6bb5\uff0c\u6b64\u65f6\u6570\u91cf\u51cf\u5c11\u4e3a\u539f\u6765\u7684 \\(\\dfrac{1}{M-1}\\) . \u5982\u679c\u4ecd\u7136\u6570\u91cf\u8d85\u8fc7 M, \u7ee7\u7eed pass. e.g. If M=11, and there are 90 runs, one pass reduces the number of runs to 9, each 10 times the size of the initial runs.","title":"Procedure"},{"location":"DB/db11/#cost-analysis","text":"transfer \u6211\u4eec\u4e0d\u8003\u8651\u6700\u540e\u4e00\u6b21\u5199\u78c1\u76d8\u7684 cost, \u56e0\u4e3a\u53ef\u80fd\u6d41\u6c34\u7ebf\u4f1a\u76f4\u63a5\u628a\u7ed3\u679c\u4ea4\u7ed9\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002 * seek","title":"Cost analysis"},{"location":"DB/db11/#advanced-version","text":"\u6bcf\u4e00\u6b21\u8bfb\u8fdb\u53bb\u90fd\u8981 seek, \u53ef\u4ee5\u6539\u8fdb\u3002\u4e3a\u6bcf\u4e00\u4e2a\u5f52\u5e76\u6bb5\u5206\u914d\u591a\u4e2a\u7f13\u51b2\u533a\u3002\u8fd9\u6837\u6211\u4eec\u5b9a\u4f4d\u4e00\u6b21\u4e4b\u540e\u53ef\u4ee5\u8bfb\u5165\u591a\u5757\u8fdb\u5165\u7f13\u51b2\u533a\u3002 \u51cf\u5c11\u4e86 seek \u6b21\u6570\uff0c\u4f46\u8fd9\u6837\u8f6e\u6b21\u53ef\u80fd\u4f1a\u589e\u52a0\u3002","title":"Advanced version"},{"location":"DB/db11/#join-operation","text":"Several different algorithms to implement joins Nested-loop join Block nested-loop join Indexed nested-loop join Merge-join Hash-join","title":"Join Operation"},{"location":"DB/db11/#nested-loop-join","text":"\u4e24\u91cd\u5faa\u73af \\(r\\) is called the outer relation and \\(s\\) the inner relation of the join. \\(n_r * b_s + b_r\\) block transfers, plus \\(n_r + b_r\\) seeks \u5bf9\u5916\u5faa\u73af\u6bcf\u4e2a\u8bb0\u5f55\uff0c\u5185\u5faa\u73af\u7684\u6240\u6709\u5757\u90fd\u8981\u8fdb\u53bb. seek \u65f6\u6bcf\u6b21\u5916\u5faa\u73af\u90fd\u9700\u8981 seek, \u5185\u5faa\u73af\u6bcf\u8f6e\u53ea\u9700\u8981\u4e00\u6b21 seek. \u5982\u679c\u5185\u5b58\u80fd\u5bb9\u7eb3\u6240\u6709\u7684\u5173\u7cfb\uff0c\u90a3\u6211\u4eec\u53ea\u9700\u8981 \\(b_r + b_s\\) block transfers and 2 seeks.","title":"Nested-Loop Join"},{"location":"DB/db11/#block-nested-loop-join","text":"Worst case estimate: \\(b_r * b_s + b_r\\) block transfers + \\(2 * b_r\\) seeks Each block in the inner relation \\(s\\) is read once for each block in the outer relation Best case: \\(b_r + b_s\\) block transfers + 2 seeks. \u8981\u628a\u5c0f\u7684\u4f5c\u4e3a\u5916\u5173\u7cfb\u3002 Improvements to block nested loop algorithms: \u5047\u8bbe\u5185\u5b58\u6709 M \u5757\uff0c\u6709\u4e00\u5757\u4f5c\u4e3a output \u7684\u7f13\u51b2\uff0c\u5269\u4e0b M-1 \u5757\u4e2d M-2 \u5757\u5747\u7ed9\u5916\u5173\u7cfb\uff0c\u5185\u5173\u7cfb\u7ed9\u4e00\u5757\u3002 Cost = \\(\\lceil b_r / (M-2) \\rceil * b_s + b_r\\) block transfers + \\(2 \\lceil b_r / (M-2)\\rceil\\) seeks If equi-join attribute forms a key on the inner relation, stop inner loop on first match \u5982\u679c\u8fde\u63a5\u7684\u5c5e\u6027\u662f key, \u90a3\u4e48\u5f53\u6211\u4eec\u5339\u914d\u4e0a\u4e4b\u540e\u5c31\u53ef\u4ee5\u505c\u6b62\u5185\u5faa\u73af\u3002 Scan inner loop forward and backward alternately, to make use of the blocks remaining in buffer (with LRU replacement) \u5229\u7528 LRU \u7b56\u7565\u7684\u7279\u70b9\uff0cinner \u6b63\u5411\u626b\u63cf\u540e\u518d\u53cd\u8fc7\u6765\uff0c\u8fd9\u6837\u6700\u8fd1\u7684\u5757\u5f88\u53ef\u80fd\u8fd8\u5728\u5185\u5b58\u4e2d\uff0c\u63d0\u9ad8\u7f13\u51b2\u547d\u4e2d\u7387\u3002","title":"Block Nested-Loop Join"},{"location":"DB/db11/#indexed-nested-loop-join","text":"\u5982\u679c\u5185\u5faa\u73af\u6709\u7d22\u5f15\uff0c\u6211\u4eec\u5c31\u6ca1\u5fc5\u8981\u626b\u63cf\u5185\u5faa\u73af\u6240\u6709\u5757\u4e86\u3002 Index lookups can replace file scans if join is an equi-join or natural join and an index is available on the inner relation\u2019s join attribute \u8fde\u63a5\u5c5e\u6027\u6709\u7d22\u5f15 Cost of the join: \\(b_r (t_T + t_S) + n_r * c\\) \u8fd9\u91cc\u5047\u5b9a\u7ed9\u5916\u5173\u7cfb\u4e00\u5757\u5185\u5b58. \\(c\\) \u8868\u793a\u904d\u5386\u7d22\u5f15\u5e76\u53d6\u51fa\u6240\u6709\u5339\u914d\u7684\u5143\u7ec4\u7684\u65f6\u95f4\u3002","title":"Indexed Nested-Loop Join"},{"location":"DB/db11/#merge-join","text":"\u5047\u8bbe\u4e24\u4e2a\u5173\u7cfb\u5df2\u7ecf\u57fa\u4e8e\u8fde\u63a5\u5c5e\u6027\u6392\u597d\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5f52\u5e76\u7684\u601d\u60f3\u8fde\u63a5\u3002 Sort both relations on their join attribute (if not already sorted on the join attributes). Merge the sorted relations to join them Join step is similar to the merge stage of the sort-merge algorithm. Main difference is handling of duplicate values in join attribute \u2014 every pair with same value on join attribute must be matched \\(b_r + b_s\\) block transfers + \\(\\lceil b_r / b_b\\rceil + \\lceil b_s / b_b\\rceil\\) seeks If the buffer memory size is M pages, in order to minimize the cost of merge join, how to assign M blocks to r and s respectively? The estimated cost is \\(b_r + b_s\\) block transfers + \\(\\lceil b_r / x_r\\rceil + \\lceil b_s / x_s\\rceil\\) seeks ( \\(x_r+x_s=M\\) ) \u5982\u679c\u4e24\u4e2a\u8868\u90fd\u65e0\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u6392\u5e8f\u518d Merge-join, \u8fd9\u65f6\u8fd8\u8981\u7b97\u4e0a\u6392\u5e8f\u7684\u4ee3\u4ef7\u3002","title":"Merge Join"},{"location":"DB/db11/#hash-join","text":"\u7528\u4e00\u4e2a Hash \u51fd\u6570\u628a\u4e24\u4e2a\u5173\u7cfb\u8fdb\u884c\u5206\u7247\u3002\u80fd\u591f\u8fde\u63a5\u4e0a\u7684\u8bb0\u5f55\uff0c\u4e00\u5b9a\u5904\u4e8e\u540c\u4e00\u4e2a partition \u91cc\u9762\uff08\u53cd\u4e4b\u4e0d\u4e00\u5b9a\uff09 \u8fd9\u6837\u5927\u5173\u7cfb\u53d8\u6210\u4e86\u5c0f\u5173\u7cfb\u3002 \u6211\u4eec\u8981\u6c42\u5176\u4e2d\u67d0\u4e2a\u7684\u5c0f\u5173\u7cfb\u8981\u80fd\u4e00\u6b21\u653e\u5230\u5185\u5b58\u4e2d\u3002 Applicable for equi-joins and natural joins. the value \\(n\\) (partition \u7684\u4e2a\u6570) and the hash function \\(h\\) is chosen such that each si should fit in memory. \\(n \\geq \\lceil b_s / M\\rceil\\) \u8981\u6c42\u6bcf\u4e2a partition \u7684\u5927\u5c0f\u90fd\u8981\u5c0f\u4e8e M, \u4e0d\u7136\u4e0d\u80fd\u4e00\u6b21\u6027\u653e\u8fdb\u53bb\u3002 \u5982\u679c\u6211\u4eec\u7684 \\(n\\) \u5f88\u5927\uff0c\u8981\u5206\u51fa\u6765\u7684 partition \u5f88\u5927\uff0c\u4f46\u662f\u5185\u5b58\u4e0d\u591f\uff0c\u5173\u7cfb\u5206\u533a\u4e0d\u80fd\u4e00\u6b21\u751f\u6210\u6240\u6709\u7684 partition, \u8981\u7ecf\u8fc7\u591a\u6b21\u5206\u533a\u3002 \u6bcf\u6b21\u8f93\u5165\u5148\u88ab\u5212\u5206\uff0c\u968f\u540e\u8fdb\u884c\u7ec6\u5206\u3002 \u6ce8\u610f\u5206\u7247\u7684\u65f6\u5019\uff0c\u8fd8\u8981\u5199\u51fa\u53bb\u3002 \u5339\u914d\u65f6\u6211\u4eec\u6709\u54c8\u5e0c\u7d22\u5f15\u3002 Typically n is chosen as \\(\\lceil b_s/M\\rceil * f\\) where \\(f\\) is a \u201cfudge factor(\u4fee\u6b63\u56e0\u5b50)\u201d, typically around 1.2 \u5206\u4e0d\u5300\uff0c\u6211\u4eec\u6709\u610f\u653e\u5927\u3002 The probe input relation partitions \\(r_i\\) need not fit in memory","title":"Hash Join"},{"location":"DB/db11/#recursive-partitioning","text":"Recursive partitioning required if number of partitions n is greater than number of pages M of memory. A relation does not need recursive partitioning if \\(M > n_h + 1\\) , or equivalently \\(M > (b_s/M) + 1\\) , which simplifies (approximately) to \\(M > \\sqrt{b_s}\\) . Example","title":"Recursive partitioning"},{"location":"DB/db11/#cost-of-hash-join","text":"","title":"Cost of Hash-Join"},{"location":"DB/db11/#other-operations","text":"Duplicate elimination can be implemented via hashing or sorting. On sorting duplicates will come adjacent to each other, and all but one set of duplicates can be deleted. \u5728\u6392\u5e8f\u7684\u8fc7\u7a0b\uff08\u751f\u6210\u3001\u5408\u5e76\u5f52\u5e76\u6bb5\u5c31\u8fdb\u884c\u53bb\u91cd\uff09 Hashing is similar Aggregation Sorting or hashing can be used to bring tuples in the same group together, and then the aggregate functions can be applied on each group. \u751f\u6210\u5f52\u5e76\u6bb5\u7684\u65f6\u5019\uff0c\u540c\u4e00\u6bb5\u7684\u5c31\u53ef\u4ee5\u7edf\u8ba1\u7edf\u4e00\u7ed3\u679c","title":"Other Operations"},{"location":"DB/db12/","text":"Query Optimization \u00b6 Abstract Introduction Transformation of Relational Expressions Statistical Information for Cost Estimation Cost-based Optimization Dynamic Programming for Choosing Evaluation Plans Nested Subqueries Materialized Views Advanced Topics in Query Optimization Introduction \u00b6 Alternative ways of evaluating a given query Equivalent expressions \u903b\u8f91\u4f18\u5316\uff1a\u5173\u7cfb\u4ee3\u6570\u8868\u8fbe\u5f0f\uff08\u5c3d\u91cf\u5148\u505a\u9009\u62e9\uff0c\u6295\u5f71\uff09 Different algorithms for each operation \u7269\u7406\u5c42\u9762\uff1a\u6bcf\u4e2a\u7b97\u5b50\u9009\u62e9\u4e0d\u540c\u7684\u7b97\u6cd5 Example Estimation of plan cost based on: Statistical information about relations . Examples: number of tuples, number of distinct values for an attribute Statistics estimation for intermediate results \uff08Cardinality Estimation\uff09 to compute cost of complex expressions \u4f30\u8ba1\u4e2d\u95f4\u7ed3\u679c\u7684\u5927\u5c0f \u73b0\u5728\u6709\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u4f30\u8ba1\u65b9\u6cd5 Cost formulae for algorithms , computed using statistics \u5173\u7cfb\u6570\u636e\u5e93\u91cc\u53ef\u4ee5\u7528\u67e5\u770b\u6267\u884c\u8ba1\u5212\u3002 Generating Equivalent Expressions \u00b6 Two relational algebra expressions are said to be equivalent if the two expressions generate the same set of tuples on every legal database instance \u5f62\u5f0f\u4e0a\u4e0d\u4e00\u6837\uff0c\u4f46\u662f\u7ed3\u679c\uff08\u8f93\u51fa\uff09\u662f\u4e00\u6837\u7684\uff0c\u4ea7\u751f\u4e86\u76f8\u540c\u7684\u96c6\u5408\u3002 Equivalence Rules \u00b6 selection \u53ef\u4ee5\u628a\u7b97\u5b50\u62c6\u5206 \u5982\u679c\u67d0\u4e9b\u5c5e\u6027\u6709\u7d22\u5f15\uff0c\u90a3\u4e48\u53ef\u4ee5\u5148\u62c6\u5206\uff0c\u5728\u7d22\u5f15 select \u4e4b\u540e\u518d\u6267\u884c\u5176\u4ed6\u7b97\u5b50\uff0c\u5426\u5219\u4e0d\u5982\u4e0d\u62c6\u5206\u3002 \u7b97\u5b50\u53ef\u4ea4\u6362 \u5148\u6267\u884c\u6709\u7d22\u5f15\u7684\u7b97\u5b50\u3002 \u6295\u5f71\u7684\u5c5e\u6027\u53ef\u4ee5\u53ea\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u7684 \u9009\u62e9\u7b97\u5b50\u53ef\u4ee5\u548c\u5408\u5e76\u7ed3\u5408 join \u81ea\u7136\u8fde\u63a5\u662f\u7ed3\u5408\u7684\uff08\u5148\u8fde\u63a5\u4e2d\u95f4\u7ed3\u679c\u5c0f\u7684\uff09 \u5982\u679c\u9009\u62e9\u7b97\u5b50\u53ea\u548c\u4e00\u4e2a\u5173\u7cfb\u6709\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u6267\u884c\u9009\u62e9\u3002\uff08\u9009\u62e9\u7b97\u5b50\u8981\u65e9\u8fdb\u884c\uff0c\u63a8\u5230\u53f6\u5b50\u4e0a\uff09 projection \u540c\u7406\u6295\u5f71\u4e5f\u8981\u65e9\u505a\u3002 \u5982\u679c\u8fde\u63a5\u8981\u7528\u5230\u6295\u5f71\u540e\u4e0d\u4fdd\u7559\u7684\u5c5e\u6027\uff0c\u6211\u4eec\u5728\u7b2c\u4e00\u6b21\u6295\u5f71\u65f6\u8981\u628a\u8fde\u63a5\u7528\u7684\u5c5e\u6027\u4e5f\u4fdd\u7559\u4e0b\u6765\u3002 set operation \u8fd9\u91cc\u7684\u51cf\u6cd5\uff0c\u51cf\u6570\u5173\u7cfb\u5c31\u4e0d\u7528\u505a\u9009\u62e9\u4e86\uff08\u51cf\u53bb\u591a\u7684\u603b\u662f\u6ca1\u95ee\u9898\u7684\uff09\u5bf9\u4ea4\u96c6\u4e5f\u9002\u7528 other Enumeration of Equivalent Expressions \u00b6 Repeat apply all applicable equivalence rules on every subexpression of every equivalent expression found so far add newly generated expressions to the set of equivalent expressions Until no new equivalent expressions are generated above \u53ef\u4ee5\u8fd9\u6837\u627e\u5230\u6240\u6709\u7684\u7b49\u4ef7\u8868\u8fbe\u5f0f\u3002 \u4f46\u662f\u5b9e\u9645\u4e2d\u6211\u4eec\u57fa\u4e8e\u4e00\u4e9b\u7ecf\u9a8c\u89c4\u5219\u8fdb\u884c\u542f\u53d1\u5f0f\u7684\u4f18\u5316 Statistics for Cost Estimation \u00b6 \u4ee3\u4ef7\u4f30\u7b97\u9700\u8981\u7edf\u8ba1\u4fe1\u606f \\(n_r\\) : number of tuples in a relation r. \\(b_r\\) : number of blocks containing tuples of r. \\(l_r\\) : size of a tuple of r. \\(f_r\\) : blocking factor of r \u2014 i.e., the number of tuples of r that fit into one block. \u4e00\u4e2a\u5757\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u5143\u7ec4 \\(V(A, r)\\) : number of distinct values that appear in r for attribute A; same as the size of \\(\\Pi(r)\\) . If tuples of r are stored together physically in a file, then: \\(b_r = \\lceil \\dfrac{n_r}{f_r}\\rceil\\) Histograms attribute age of relation person Selection Size Estimation \u00b6 \u4e2d\u95f4\u7ed3\u679c \\(\\sigma_{A=v}(r)\\) \\(n_r / V(A,r)\\) : number of records that will satisfy the selection. \u8fd9\u6837\u7684\u4f30\u7b97\u57fa\u4e8e\u503c\u662f\u5e73\u5747\u5206\u5e03\u7684 \u5982\u679c\u8981\u627e\u7684\u662f\u4e00\u4e2a key, \u90a3\u4e48 size estimate=1 \\(\\sigma_{A\\leq v}(r)\\) Let \\(c\\) denote the estimated number of tuples satisfying the condition. \\(c = 0\\) if \\(v < \\min(A,r)\\) v \u6bd4\u5c5e\u6027 A \u7684\u6700\u5c0f\u503c\u8fd8\u8981\u5c0f \\(c = n_r\\cdot \\dfrac{v-\\min(A,r)}{\\max(A,r) - \\min A(A,r)}\\) In absence of statistical information c is assumed to be \\(n_r / 2\\) (\u6ca1\u6709\u6700\u5927\u3001\u6700\u5c0f\u7edf\u8ba1\u4fe1\u606f\u65f6). \u6982\u7387\u8bba\u3002 \u6ce8\u610f\u8fd9\u4e9b\u516c\u5f0f\u7684\u8981\u6c42\u662f\u6761\u4ef6\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002 Joins \u00b6 The Cartesian product \\(r \\times s\\) contains \\(n_r\\cdot n_s\\) tuples; each tuple occupies \\(s_r + s_s\\) bytes. \\(R \\cap S = \\emptyset\\) \u6ca1\u6709\u516c\u5171\u5c5e\u6027\uff0c\u7b49\u4ef7\u4e8e \\(r\\times s\\) \\(R \\cap S\\) is a key for \\(R\\) , then a tuple of \\(s\\) will join with at most one tuple from \\(r\\) Example If \\(R \\cap S\\) in S is a foreign key in S referencing R, then the number of tuples in \\(r\\bowtie s\\) = the number of tuples in s. If \\(R \\cap S = \\{A\\}\\) is not a key for R or S. \\(n_r * \\dfrac{n_s}{V(A,s)}, n_s * \\dfrac{n_r}{V(A,r)}\\) . \u4ee5\u7b2c\u4e8c\u4e2a\u4e3a\u4f8b\u5b50\uff0c\u7ad9\u5728 s \u7684\u89d2\u5ea6\uff0c\u6bcf\u4e00\u4e2a s \u53ef\u4ee5\u548c\u8fd9\u4e48\u591a\u4e2a\u5143\u7d20\u8fde\u63a5\u3002 \u901a\u5e38\u6211\u4eec\u53d6\u4e8c\u8005\u4e2d\u7684\u8f83\u5c0f\u503c\u3002 Example Size Estimation for Other Operations \u00b6 \u5916\u90e8\u8fde\u63a5 r, s \u8ba4\u4e3a\u662f r s \u81ea\u7136\u8fde\u63a5\u7684\u7ed3\u679c\u52a0\u4e0a r \u7684\u5927\u5c0f\u3002 Estimation of Number of Distinct Values \u00b6 \u4f30\u7b97 V(A,r). Selections \\(\\sigma_\\theta(r)\\) , estimate \\(V(A,\\sigma_\\theta(r))\\) If \\(\\theta\\) forces A to take a specified value, \\(V(A,\\sigma_\\theta(r))=1\\) e.g. , A = 3 If \\(\\theta\\) forces A to take on one of a specified set of values: \\(V(A,\\sigma_\\theta(r))=\\) number of specified values e.g. , (A = 1 V A = 3 V A = 4) If the selection condition \\(\\theta\\) is of the form A op v, \\(V(A,\\sigma_\\theta(r))=V(A,r)*s\\) \u5229\u7528\u9009\u62e9\u7387 s \u8ba1\u7b97 In all the other cases, use approx1imate estimate: \\(V(A,\\sigma_\\theta(r))=\\min(V(A,r), \\n_{\\sigma_\\theta(r)})\\) joins \\(r\\bowtie s\\) , estimate \\(V(A,r\\bowtie s)\\) If all attributes in A are from r, the estimated \\(V(A,r\\bowtie s)=\\min(V(A,r), n_{r\\bowtie s})\\) If A contains attributes A1 from r and A2 from s, then estimated \\(V(A,r\\bowtie s)=\\min(V(A1,r)*V(A2-A1,s), V(A1-A2,r)*V(A2,s), n_{r\\bowtie s})\\) Choice of Evaluation Plans \u00b6 Must consider the interaction of evaluation techniques when choosing evaluation plans choosing the cheapest algorithm for each operation independently may not yield best overall algorithm e.g. merge-join may be costlier than hash-join, but may provide a sorted output which reduces the cost for an outer level aggregation. Mergejoin \u4ee3\u4ef7\u9ad8\uff0c\u4f46\u662f\u6709\u4e2a\u597d\u5904\u662f join \u540e\u662f\u6709\u6b21\u5e8f\u7684\uff0c\u5bf9\u4e0a\u5c42\u64cd\u4f5c\u6709\u5229\u3002 \u5982\u679c\u8981\u627e\u6700\u4f18\u7684\u6267\u884c\u8ba1\u5212\uff0c\u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\u901a\u5e38\u6309\u7167\u7ecf\u9a8c\u89c4\u5219\u3002 \u6211\u4eec\u4e3b\u8981\u8003\u8651\u8fde\u63a5\u64cd\u4f5c\u7684\u4f18\u5316\u3002 Cost-Based Join-Order Selection \u00b6 Consider finding the best join-order for \\(r_1\\bowtie r_2\\bowtie \\ldots r_n\\) . There are \\((2(n \u2013 1))!/(n \u2013 1)!\\) different join orders for above expression. Example Using dynamic programming, the least-cost join order for any subset of \\(\\{r_1, r_2, \\ldots r_n\\}\\) is computed only once and stored for future use. Join Order Optimization Algorithm \u5148\u5206\u89e3\u6210\u4e24\u4e2a\u5c0f\u7684\u96c6\u5408 \\(S_1, S-S_1\\) . \u9012\u5f52\u5730\u7ec6\u5206\u3002 \u9012\u5f52\u5230\u6700\u5e95\u5c42\u5c31\u53d8\u4e3a\u4e86\u5bf9\u5355\u4e2a\u8868\u7684\u9009\u62e9\u65b9\u6cd5\u3002 Left Deep Join Trees \u00b6 In left-deep join trees, the right-hand-side input for each join is a relation, not the result of an intermediate join. \u5de6\u8fb9\u53ef\u4ee5\u662f\u4e2d\u95f4\u7ed3\u679c\uff0c\u53f3\u8fb9\u5fc5\u987b\u662f\u4e00\u4e2a\u5173\u7cfb\u3002 Cost of Optimization \u00b6 With dynamic programming time complexity of optimization with bushy trees is \\(O(3^n)\\) . Space complexity is \\(O(2^n)\\) left-deep join tree Time complexity of finding best join order is \\(O(n 2^n)\\) Space complexity remains at \\(O(2^n)\\) Heuristic Optimization \u00b6 Cost-based optimization is expensive. \u53ef\u4ee5\u7528\u542f\u53d1\u5f0f\u4f18\u5316 Heuristic optimization transforms the query-tree by using a set of rules that typically (but not in all cases) improve execution performance: Perform selection early (reduces the number of tuples) Perform projection early (reduces the number of attributes) Perform most restrictive selection and join operations ( i.e . with smallest result size) before other similar operations. Perform left-deep join order Additional Optimization Techniques \u00b6 Nested Subqueries \u00b6 Nested query example: select name from instructor where exists ( select * from teaches where instructor . ID = teaches . ID and teaches . year = 2022 ) \u627e\u51fa 2022 \u5f00\u8bfe\u7684\u8001\u5e08\u7684\u540d\u5b57\u3002 \u4e24\u91cd\u5faa\u73af\uff0c\u4f46\u662f\u4f4e\u6548\u3002 Parameters are variables from outer level query that are used in the nested subquery; such variables are called correlation variables\uff08\u76f8\u5173\u53d8\u91cf\uff09 \u5373\u6765\u81ea\u5916\u5faa\u73af\u7684\u53d8\u91cf\u3002\u5982\u679c\u6ca1\u6709\u76f8\u5173\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u6267\u884c\u5185\u90e8\uff0c\u7136\u540e\u518d\u6267\u884c\u5916\u90e8\u3002 \u628a\u521a\u521a\u90a3\u4e2a\u4f8b\u5b50\u6539\u4e3a\u4e00\u4e2a select \u8bed\u53e5\uff0c\u90a3\u4e48\u4e00\u4e2a\u8001\u5e08\u5982\u679c\u5f00\u4e86\u5f88\u591a\u95e8\u8bfe\u5c31\u4f1a\u51fa\u73b0\u5f88\u591a\u4e2a\u540d\u5b57\u3002\u4f46\u662f\u52a0\u4e0a distinct \u5173\u952e\u8bcd\u540e\u53c8\u65e0\u6cd5\u533a\u5206\u540c\u540d\u60c5\u51b5\u3002 \u534a\u8fde\u63a5 \\(\u22c9\\) _\\theta s$\uff0c\u68c0\u9a8c r \u662f\u5426\u6ee1\u8db3\u67d0\u4e2a\u5173\u7cfb\u3002 If a tuple \\(r_i\\) appears n times in r, it appears n times in the result of \\(r \\(\u22c9\\) _\\theta s\\) , if there is at least one tuple \\(s_i\\) in s matching with \\(r_i\\) . Example The process of replacing a nested query by a query with a join/semijoin (possibly with a temporary relation) is called decorrelation(\u53bb\u9664\u76f8\u5173) Decorrelation of scalar aggregate subqueries can be done using groupby/aggregation in some cases Example Materialized Views \u00b6 A materialized view is a view whose contents are computed and stored. \u6709\u4e9b\u6570\u636e\u5e93\u91cc\u628a view \u5b9e\u4f8b\u5316\u4e86\uff0c\u771f\u6b63\u5b58\u50a8\u5728\u5185\u90e8\u7684\u4e34\u65f6\u8868\u3002 create view department_total_salary ( dept_name , total_salary ) as select dept_name , sum ( salary ) from instructor group by dept_name Saves the effort of finding multiple tuples and adding up their amounts. \u4f46\u662f\u9700\u8981\u65f6\u523b\u4fdd\u6301\u8fd9\u4e2a\u89c6\u56fe\u548c\u539f\u8868\u4e00\u81f4\u3002 use incremental view maintenance(\u589e\u91cf\u89c6\u56fe\u7ef4\u62a4) The changes (inserts and deletes) to a relation or expressions are referred to as its differential(\u5dee\u5206) join: \\(V^{new}=V^{old}\\cup (i_r\\bowtie s), V^{new} = V^{old}-(d_r\\bowtie s)\\) join select: \\(V^{new}=V^{old}\\cup \\sigma_\\theta(i_r), V^{new} = V^{old}-\\sigma_\\theta(d_r)\\) projection: For each tuple in a projection \\(\\Pi_A(r)\\) , we will keep a count of how many times it was derived. On insert of a tuple to r, if the resultant tuple is already in \\(\\Pi_A(r)\\) we increment its count, else we add a new tuple with count = 1 On delete of a tuple from r, we decrement the count of the corresponding tuple in \\(\\Pi_A(r)\\) if the count becomes 0, we delete the tuple from \\(\\Pi_A(r)\\) Projection count \\(v= _Ag_{count(B)}\\) insert: For each tuple r in \\(i_r\\) , if the corresponding group is already present in v, we increment its count, else we add a new tuple with count = 1 delete: for each tuple t in \\(i_r\\) .we look for the group t.A in v, and subtract 1 from the count for the group. If the count becomes 0, we delete from v the tuple for the group t.A sum \\(v= _Ag_{sum(B)}\\) min, max \u600e\u4e48\u5229\u7528\u8fd9\u4e9b view? Rewriting queries to use materialized views: Example Replacing a use of a materialized view by the view definition Materialized View Selection \u6709\u54ea\u4e9b\u67e5\u8be2\uff1f\u5404\u79cd\u67e5\u8be2\u7684\u6bd4\u4f8b\uff1f","title":"\u67e5\u8be2\u4f18\u5316"},{"location":"DB/db12/#query-optimization","text":"Abstract Introduction Transformation of Relational Expressions Statistical Information for Cost Estimation Cost-based Optimization Dynamic Programming for Choosing Evaluation Plans Nested Subqueries Materialized Views Advanced Topics in Query Optimization","title":"Query Optimization"},{"location":"DB/db12/#introduction","text":"Alternative ways of evaluating a given query Equivalent expressions \u903b\u8f91\u4f18\u5316\uff1a\u5173\u7cfb\u4ee3\u6570\u8868\u8fbe\u5f0f\uff08\u5c3d\u91cf\u5148\u505a\u9009\u62e9\uff0c\u6295\u5f71\uff09 Different algorithms for each operation \u7269\u7406\u5c42\u9762\uff1a\u6bcf\u4e2a\u7b97\u5b50\u9009\u62e9\u4e0d\u540c\u7684\u7b97\u6cd5 Example Estimation of plan cost based on: Statistical information about relations . Examples: number of tuples, number of distinct values for an attribute Statistics estimation for intermediate results \uff08Cardinality Estimation\uff09 to compute cost of complex expressions \u4f30\u8ba1\u4e2d\u95f4\u7ed3\u679c\u7684\u5927\u5c0f \u73b0\u5728\u6709\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u4f30\u8ba1\u65b9\u6cd5 Cost formulae for algorithms , computed using statistics \u5173\u7cfb\u6570\u636e\u5e93\u91cc\u53ef\u4ee5\u7528\u67e5\u770b\u6267\u884c\u8ba1\u5212\u3002","title":"Introduction"},{"location":"DB/db12/#generating-equivalent-expressions","text":"Two relational algebra expressions are said to be equivalent if the two expressions generate the same set of tuples on every legal database instance \u5f62\u5f0f\u4e0a\u4e0d\u4e00\u6837\uff0c\u4f46\u662f\u7ed3\u679c\uff08\u8f93\u51fa\uff09\u662f\u4e00\u6837\u7684\uff0c\u4ea7\u751f\u4e86\u76f8\u540c\u7684\u96c6\u5408\u3002","title":"Generating Equivalent Expressions"},{"location":"DB/db12/#equivalence-rules","text":"selection \u53ef\u4ee5\u628a\u7b97\u5b50\u62c6\u5206 \u5982\u679c\u67d0\u4e9b\u5c5e\u6027\u6709\u7d22\u5f15\uff0c\u90a3\u4e48\u53ef\u4ee5\u5148\u62c6\u5206\uff0c\u5728\u7d22\u5f15 select \u4e4b\u540e\u518d\u6267\u884c\u5176\u4ed6\u7b97\u5b50\uff0c\u5426\u5219\u4e0d\u5982\u4e0d\u62c6\u5206\u3002 \u7b97\u5b50\u53ef\u4ea4\u6362 \u5148\u6267\u884c\u6709\u7d22\u5f15\u7684\u7b97\u5b50\u3002 \u6295\u5f71\u7684\u5c5e\u6027\u53ef\u4ee5\u53ea\u4fdd\u7559\u6700\u540e\u4e00\u6b21\u7684 \u9009\u62e9\u7b97\u5b50\u53ef\u4ee5\u548c\u5408\u5e76\u7ed3\u5408 join \u81ea\u7136\u8fde\u63a5\u662f\u7ed3\u5408\u7684\uff08\u5148\u8fde\u63a5\u4e2d\u95f4\u7ed3\u679c\u5c0f\u7684\uff09 \u5982\u679c\u9009\u62e9\u7b97\u5b50\u53ea\u548c\u4e00\u4e2a\u5173\u7cfb\u6709\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u6267\u884c\u9009\u62e9\u3002\uff08\u9009\u62e9\u7b97\u5b50\u8981\u65e9\u8fdb\u884c\uff0c\u63a8\u5230\u53f6\u5b50\u4e0a\uff09 projection \u540c\u7406\u6295\u5f71\u4e5f\u8981\u65e9\u505a\u3002 \u5982\u679c\u8fde\u63a5\u8981\u7528\u5230\u6295\u5f71\u540e\u4e0d\u4fdd\u7559\u7684\u5c5e\u6027\uff0c\u6211\u4eec\u5728\u7b2c\u4e00\u6b21\u6295\u5f71\u65f6\u8981\u628a\u8fde\u63a5\u7528\u7684\u5c5e\u6027\u4e5f\u4fdd\u7559\u4e0b\u6765\u3002 set operation \u8fd9\u91cc\u7684\u51cf\u6cd5\uff0c\u51cf\u6570\u5173\u7cfb\u5c31\u4e0d\u7528\u505a\u9009\u62e9\u4e86\uff08\u51cf\u53bb\u591a\u7684\u603b\u662f\u6ca1\u95ee\u9898\u7684\uff09\u5bf9\u4ea4\u96c6\u4e5f\u9002\u7528 other","title":"Equivalence Rules"},{"location":"DB/db12/#enumeration-of-equivalent-expressions","text":"Repeat apply all applicable equivalence rules on every subexpression of every equivalent expression found so far add newly generated expressions to the set of equivalent expressions Until no new equivalent expressions are generated above \u53ef\u4ee5\u8fd9\u6837\u627e\u5230\u6240\u6709\u7684\u7b49\u4ef7\u8868\u8fbe\u5f0f\u3002 \u4f46\u662f\u5b9e\u9645\u4e2d\u6211\u4eec\u57fa\u4e8e\u4e00\u4e9b\u7ecf\u9a8c\u89c4\u5219\u8fdb\u884c\u542f\u53d1\u5f0f\u7684\u4f18\u5316","title":"Enumeration of Equivalent Expressions"},{"location":"DB/db12/#statistics-for-cost-estimation","text":"\u4ee3\u4ef7\u4f30\u7b97\u9700\u8981\u7edf\u8ba1\u4fe1\u606f \\(n_r\\) : number of tuples in a relation r. \\(b_r\\) : number of blocks containing tuples of r. \\(l_r\\) : size of a tuple of r. \\(f_r\\) : blocking factor of r \u2014 i.e., the number of tuples of r that fit into one block. \u4e00\u4e2a\u5757\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u5143\u7ec4 \\(V(A, r)\\) : number of distinct values that appear in r for attribute A; same as the size of \\(\\Pi(r)\\) . If tuples of r are stored together physically in a file, then: \\(b_r = \\lceil \\dfrac{n_r}{f_r}\\rceil\\) Histograms attribute age of relation person","title":"Statistics for Cost Estimation"},{"location":"DB/db12/#selection-size-estimation","text":"\u4e2d\u95f4\u7ed3\u679c \\(\\sigma_{A=v}(r)\\) \\(n_r / V(A,r)\\) : number of records that will satisfy the selection. \u8fd9\u6837\u7684\u4f30\u7b97\u57fa\u4e8e\u503c\u662f\u5e73\u5747\u5206\u5e03\u7684 \u5982\u679c\u8981\u627e\u7684\u662f\u4e00\u4e2a key, \u90a3\u4e48 size estimate=1 \\(\\sigma_{A\\leq v}(r)\\) Let \\(c\\) denote the estimated number of tuples satisfying the condition. \\(c = 0\\) if \\(v < \\min(A,r)\\) v \u6bd4\u5c5e\u6027 A \u7684\u6700\u5c0f\u503c\u8fd8\u8981\u5c0f \\(c = n_r\\cdot \\dfrac{v-\\min(A,r)}{\\max(A,r) - \\min A(A,r)}\\) In absence of statistical information c is assumed to be \\(n_r / 2\\) (\u6ca1\u6709\u6700\u5927\u3001\u6700\u5c0f\u7edf\u8ba1\u4fe1\u606f\u65f6). \u6982\u7387\u8bba\u3002 \u6ce8\u610f\u8fd9\u4e9b\u516c\u5f0f\u7684\u8981\u6c42\u662f\u6761\u4ef6\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002","title":"Selection Size Estimation"},{"location":"DB/db12/#joins","text":"The Cartesian product \\(r \\times s\\) contains \\(n_r\\cdot n_s\\) tuples; each tuple occupies \\(s_r + s_s\\) bytes. \\(R \\cap S = \\emptyset\\) \u6ca1\u6709\u516c\u5171\u5c5e\u6027\uff0c\u7b49\u4ef7\u4e8e \\(r\\times s\\) \\(R \\cap S\\) is a key for \\(R\\) , then a tuple of \\(s\\) will join with at most one tuple from \\(r\\) Example If \\(R \\cap S\\) in S is a foreign key in S referencing R, then the number of tuples in \\(r\\bowtie s\\) = the number of tuples in s. If \\(R \\cap S = \\{A\\}\\) is not a key for R or S. \\(n_r * \\dfrac{n_s}{V(A,s)}, n_s * \\dfrac{n_r}{V(A,r)}\\) . \u4ee5\u7b2c\u4e8c\u4e2a\u4e3a\u4f8b\u5b50\uff0c\u7ad9\u5728 s \u7684\u89d2\u5ea6\uff0c\u6bcf\u4e00\u4e2a s \u53ef\u4ee5\u548c\u8fd9\u4e48\u591a\u4e2a\u5143\u7d20\u8fde\u63a5\u3002 \u901a\u5e38\u6211\u4eec\u53d6\u4e8c\u8005\u4e2d\u7684\u8f83\u5c0f\u503c\u3002 Example","title":"Joins"},{"location":"DB/db12/#size-estimation-for-other-operations","text":"\u5916\u90e8\u8fde\u63a5 r, s \u8ba4\u4e3a\u662f r s \u81ea\u7136\u8fde\u63a5\u7684\u7ed3\u679c\u52a0\u4e0a r \u7684\u5927\u5c0f\u3002","title":"Size Estimation for Other Operations"},{"location":"DB/db12/#estimation-of-number-of-distinct-values","text":"\u4f30\u7b97 V(A,r). Selections \\(\\sigma_\\theta(r)\\) , estimate \\(V(A,\\sigma_\\theta(r))\\) If \\(\\theta\\) forces A to take a specified value, \\(V(A,\\sigma_\\theta(r))=1\\) e.g. , A = 3 If \\(\\theta\\) forces A to take on one of a specified set of values: \\(V(A,\\sigma_\\theta(r))=\\) number of specified values e.g. , (A = 1 V A = 3 V A = 4) If the selection condition \\(\\theta\\) is of the form A op v, \\(V(A,\\sigma_\\theta(r))=V(A,r)*s\\) \u5229\u7528\u9009\u62e9\u7387 s \u8ba1\u7b97 In all the other cases, use approx1imate estimate: \\(V(A,\\sigma_\\theta(r))=\\min(V(A,r), \\n_{\\sigma_\\theta(r)})\\) joins \\(r\\bowtie s\\) , estimate \\(V(A,r\\bowtie s)\\) If all attributes in A are from r, the estimated \\(V(A,r\\bowtie s)=\\min(V(A,r), n_{r\\bowtie s})\\) If A contains attributes A1 from r and A2 from s, then estimated \\(V(A,r\\bowtie s)=\\min(V(A1,r)*V(A2-A1,s), V(A1-A2,r)*V(A2,s), n_{r\\bowtie s})\\)","title":"Estimation of Number of Distinct Values"},{"location":"DB/db12/#choice-of-evaluation-plans","text":"Must consider the interaction of evaluation techniques when choosing evaluation plans choosing the cheapest algorithm for each operation independently may not yield best overall algorithm e.g. merge-join may be costlier than hash-join, but may provide a sorted output which reduces the cost for an outer level aggregation. Mergejoin \u4ee3\u4ef7\u9ad8\uff0c\u4f46\u662f\u6709\u4e2a\u597d\u5904\u662f join \u540e\u662f\u6709\u6b21\u5e8f\u7684\uff0c\u5bf9\u4e0a\u5c42\u64cd\u4f5c\u6709\u5229\u3002 \u5982\u679c\u8981\u627e\u6700\u4f18\u7684\u6267\u884c\u8ba1\u5212\uff0c\u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\u901a\u5e38\u6309\u7167\u7ecf\u9a8c\u89c4\u5219\u3002 \u6211\u4eec\u4e3b\u8981\u8003\u8651\u8fde\u63a5\u64cd\u4f5c\u7684\u4f18\u5316\u3002","title":"Choice of Evaluation Plans"},{"location":"DB/db12/#cost-based-join-order-selection","text":"Consider finding the best join-order for \\(r_1\\bowtie r_2\\bowtie \\ldots r_n\\) . There are \\((2(n \u2013 1))!/(n \u2013 1)!\\) different join orders for above expression. Example Using dynamic programming, the least-cost join order for any subset of \\(\\{r_1, r_2, \\ldots r_n\\}\\) is computed only once and stored for future use. Join Order Optimization Algorithm \u5148\u5206\u89e3\u6210\u4e24\u4e2a\u5c0f\u7684\u96c6\u5408 \\(S_1, S-S_1\\) . \u9012\u5f52\u5730\u7ec6\u5206\u3002 \u9012\u5f52\u5230\u6700\u5e95\u5c42\u5c31\u53d8\u4e3a\u4e86\u5bf9\u5355\u4e2a\u8868\u7684\u9009\u62e9\u65b9\u6cd5\u3002","title":"Cost-Based Join-Order Selection"},{"location":"DB/db12/#left-deep-join-trees","text":"In left-deep join trees, the right-hand-side input for each join is a relation, not the result of an intermediate join. \u5de6\u8fb9\u53ef\u4ee5\u662f\u4e2d\u95f4\u7ed3\u679c\uff0c\u53f3\u8fb9\u5fc5\u987b\u662f\u4e00\u4e2a\u5173\u7cfb\u3002","title":"Left Deep Join Trees"},{"location":"DB/db12/#cost-of-optimization","text":"With dynamic programming time complexity of optimization with bushy trees is \\(O(3^n)\\) . Space complexity is \\(O(2^n)\\) left-deep join tree Time complexity of finding best join order is \\(O(n 2^n)\\) Space complexity remains at \\(O(2^n)\\)","title":"Cost of Optimization"},{"location":"DB/db12/#heuristic-optimization","text":"Cost-based optimization is expensive. \u53ef\u4ee5\u7528\u542f\u53d1\u5f0f\u4f18\u5316 Heuristic optimization transforms the query-tree by using a set of rules that typically (but not in all cases) improve execution performance: Perform selection early (reduces the number of tuples) Perform projection early (reduces the number of attributes) Perform most restrictive selection and join operations ( i.e . with smallest result size) before other similar operations. Perform left-deep join order","title":"Heuristic Optimization"},{"location":"DB/db12/#additional-optimization-techniques","text":"","title":"Additional Optimization Techniques"},{"location":"DB/db12/#nested-subqueries","text":"Nested query example: select name from instructor where exists ( select * from teaches where instructor . ID = teaches . ID and teaches . year = 2022 ) \u627e\u51fa 2022 \u5f00\u8bfe\u7684\u8001\u5e08\u7684\u540d\u5b57\u3002 \u4e24\u91cd\u5faa\u73af\uff0c\u4f46\u662f\u4f4e\u6548\u3002 Parameters are variables from outer level query that are used in the nested subquery; such variables are called correlation variables\uff08\u76f8\u5173\u53d8\u91cf\uff09 \u5373\u6765\u81ea\u5916\u5faa\u73af\u7684\u53d8\u91cf\u3002\u5982\u679c\u6ca1\u6709\u76f8\u5173\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u6267\u884c\u5185\u90e8\uff0c\u7136\u540e\u518d\u6267\u884c\u5916\u90e8\u3002 \u628a\u521a\u521a\u90a3\u4e2a\u4f8b\u5b50\u6539\u4e3a\u4e00\u4e2a select \u8bed\u53e5\uff0c\u90a3\u4e48\u4e00\u4e2a\u8001\u5e08\u5982\u679c\u5f00\u4e86\u5f88\u591a\u95e8\u8bfe\u5c31\u4f1a\u51fa\u73b0\u5f88\u591a\u4e2a\u540d\u5b57\u3002\u4f46\u662f\u52a0\u4e0a distinct \u5173\u952e\u8bcd\u540e\u53c8\u65e0\u6cd5\u533a\u5206\u540c\u540d\u60c5\u51b5\u3002 \u534a\u8fde\u63a5 \\(\u22c9\\) _\\theta s$\uff0c\u68c0\u9a8c r \u662f\u5426\u6ee1\u8db3\u67d0\u4e2a\u5173\u7cfb\u3002 If a tuple \\(r_i\\) appears n times in r, it appears n times in the result of \\(r \\(\u22c9\\) _\\theta s\\) , if there is at least one tuple \\(s_i\\) in s matching with \\(r_i\\) . Example The process of replacing a nested query by a query with a join/semijoin (possibly with a temporary relation) is called decorrelation(\u53bb\u9664\u76f8\u5173) Decorrelation of scalar aggregate subqueries can be done using groupby/aggregation in some cases Example","title":"Nested Subqueries"},{"location":"DB/db12/#materialized-views","text":"A materialized view is a view whose contents are computed and stored. \u6709\u4e9b\u6570\u636e\u5e93\u91cc\u628a view \u5b9e\u4f8b\u5316\u4e86\uff0c\u771f\u6b63\u5b58\u50a8\u5728\u5185\u90e8\u7684\u4e34\u65f6\u8868\u3002 create view department_total_salary ( dept_name , total_salary ) as select dept_name , sum ( salary ) from instructor group by dept_name Saves the effort of finding multiple tuples and adding up their amounts. \u4f46\u662f\u9700\u8981\u65f6\u523b\u4fdd\u6301\u8fd9\u4e2a\u89c6\u56fe\u548c\u539f\u8868\u4e00\u81f4\u3002 use incremental view maintenance(\u589e\u91cf\u89c6\u56fe\u7ef4\u62a4) The changes (inserts and deletes) to a relation or expressions are referred to as its differential(\u5dee\u5206) join: \\(V^{new}=V^{old}\\cup (i_r\\bowtie s), V^{new} = V^{old}-(d_r\\bowtie s)\\) join select: \\(V^{new}=V^{old}\\cup \\sigma_\\theta(i_r), V^{new} = V^{old}-\\sigma_\\theta(d_r)\\) projection: For each tuple in a projection \\(\\Pi_A(r)\\) , we will keep a count of how many times it was derived. On insert of a tuple to r, if the resultant tuple is already in \\(\\Pi_A(r)\\) we increment its count, else we add a new tuple with count = 1 On delete of a tuple from r, we decrement the count of the corresponding tuple in \\(\\Pi_A(r)\\) if the count becomes 0, we delete the tuple from \\(\\Pi_A(r)\\) Projection count \\(v= _Ag_{count(B)}\\) insert: For each tuple r in \\(i_r\\) , if the corresponding group is already present in v, we increment its count, else we add a new tuple with count = 1 delete: for each tuple t in \\(i_r\\) .we look for the group t.A in v, and subtract 1 from the count for the group. If the count becomes 0, we delete from v the tuple for the group t.A sum \\(v= _Ag_{sum(B)}\\) min, max \u600e\u4e48\u5229\u7528\u8fd9\u4e9b view? Rewriting queries to use materialized views: Example Replacing a use of a materialized view by the view definition Materialized View Selection \u6709\u54ea\u4e9b\u67e5\u8be2\uff1f\u5404\u79cd\u67e5\u8be2\u7684\u6bd4\u4f8b\uff1f","title":"Materialized Views"},{"location":"DB/db13/","text":"Transactions \u00b6 Abstract Transaction Concept A Simple Transaction Model Concurrent Executions Serializability Recoverability Transaction Isolation Levels Transaction Definition in SQL Transaction Concept \u00b6 A transaction is a unit of program execution that accesses and possibly updates various data items. \u4e00\u6bb5\u539f\u5b50\u6027\u7684\u64cd\u4f5c e.g. transaction to transfer $50 from account A to account B update account set balance = balance - 50 where account_number = A ; update account set balance = balance + 50 where account_number = B ; commit ; ACID Properties \u00b6 Atomicity\uff08\u539f\u5b50\u6027\uff09 \u5168\u6709\u6216\u5168\u65e0 \u7531\u6570\u636e\u5e93\u6062\u590d\u529f\u80fd\u4fdd\u8bc1 Consistency\uff08\u4e00\u81f4\u6027\uff09 \u4fdd\u8bc1\u6570\u636e\u5e93\u5185\u7684\u5185\u5bb9\u6b63\u786e\u6027\uff0c\u4e0e\u5b9e\u9645\u4e1a\u52a1\u76f8\u7b26\u3002\u5982\u8f6c\u8d26\u662f\u4e00\u4e2a\u4eba\u4f59\u989d\u51cf\u5c11\u4e00\u4e2a\u4eba\u589e\u52a0\u3002 consistency \u4e0e\u5f00\u53d1\u4eba\u5458\u6709\u5173\u7cfb\uff08\u4e8b\u52a1\u8bbe\u8ba1\u662f\u5426\u5408\u7406\uff09 Isolation\uff08\u9694\u79bb\u6027\uff09 \u4e8b\u52a1\u5e76\u53d1\u6267\u884c\uff0c\u4f46\u662f\u76f8\u4e92\u9694\u79bb\uff0c\u597d\u50cf\u662f\u4e32\u884c\u6267\u884c\u4e00\u6837\u3002 \u7531\u6570\u636e\u5e93\u7684\u5e76\u53d1\u6267\u884c\u6765\u5b9e\u73b0 Durability\uff08\u6301\u4e45\u6027\uff09 \u4e8b\u52a1\u63d0\u4ea4\u540e\u88ab\u7f13\u5b58\uff0c\u6389\u7535\u4e0d\u80fd\u5931\u53bb buffer \u91cc\u7684\u5185\u5bb9\u3002 A Simple Transaction Model \u00b6 \u8fd9\u4e2a\u6a21\u578b\u4e2d\uff0c\u628a\u4e8b\u52a1\u5bf9\u6570\u636e\u5e93\u7684\u4fee\u6539\u7b80\u5316\u4e3a\u8bfb\u5199\u4e24\u79cd\u64cd\u4f5c\u3002 Transactions access data using two operations: read(X) , which transfers the data item X from the database to a variable, also called X\uff0c in a work area in main memory belonging to the transaction that executed the read operation. write(X) , which transfers the value in the variable X in the main memory work area of the transaction that executed the write operation to the datat item X in database. \u5728\u8fd9\u4e2a\u7b80\u5355\u7684\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u4e0d\u8003\u8651\u6570\u636e\u8bfb\u5230\u5de5\u4f5c\u533a\u57df\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\u64cd\u4f5c\uff0c\u53ea\u8003\u8651\u8bfb\u5199\u3002 Example of Fund Transfer Atomicity requirement \u5982\u679c\u6267\u884c\u7ed3\u675f\u4e4b\u540e\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u6570\u636e\u5e93\u5e94\u8be5\u8981\u64a4\u9500\u4e4b\u524d\u7684\u64cd\u4f5c Durability requirement \u5982\u679c\u4e8b\u52a1\u7ed3\u675f\u4e86\uff0c\u6211\u4eec\u5c31\u628a\u66f4\u65b0\u540c\u6b65 Consistency requirement Explicitly\uff08\u663e\u5f0f\uff09 specified integrity constraints e.g. primary keys , foreign keys \u6570\u636e\u5e93\u628a\u8fd9\u4e2a\u5b9a\u4e49\u653e\u5728\u5185\u90e8\uff0c\u4f1a\u81ea\u5df1\u7ef4\u62a4 Implicit \uff08\u9690\u5f0f\uff09 integrity constraints e.g. sum of balances of all accounts minus sum of loan amounts must equal value of cash-in-hand Isolation requirement \u5728 step 3 6 \u4e4b\u95f4\uff0c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u88ab\u90e8\u5206\u66f4\u65b0\u7684\u6570\u636e\u5e93\uff0cA+B \u4f1a\u5c0f\u4e8e\u6b63\u786e\u7b54\u6848\u3002\u8fd9\u662f\u56e0\u4e3a\u7834\u574f\u4e86\u9694\u79bb\u6027\u3002 Transaction State \u00b6 Active \u2013 the initial state; the transaction stays in this state while it is executing Partially committed \u2013 after the final statement has been executed. \u8bed\u53e5\u6267\u884c\u5b8c\u4e86\uff0c\u51c6\u5907\u63d0\u4ea4\u3002\u80fd\u5426\u63d0\u4ea4\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u6267\u884c\u3002 Failed -- after the discovery that normal execution can no longer proceed. \u4e0d\u80fd\u6b63\u5e38\u63d0\u4ea4\u3002\u6216\u8005\u662f\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u95ee\u9898\u3002 Aborted \u2013 after the transaction has been rolled back and the database restored to its state prior to the start of the transaction. Two options after it has been aborted: restart the transaction kill the transaction Committed \u2013 after successful completion. Concurrent Executions \u00b6 increased processor and disk utilization reduced average response time \u4e8b\u52a1\u662f\u5e76\u53d1\u6267\u884c\u7684\uff0c\u5982\u679c\u4e0d\u52a0\u4ee5\u63a7\u5236\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898 Anomalies in Concurrent Executions Lost Update\uff08\u4e22\u5931\u4fee\u6539\uff09 Lost Update Example \u4e00\u4e2a\u4eba\u8ba2\u7968\u540e\uff0c\u53e6\u4e00\u4e2a\u4eba\u8bfb\u5230\u8fd9\u91cc\u7b2c\u4e00\u4e2a\u4eba\u8fd8\u6ca1\u6709\u4fee\u6539\u7684\u4f59\u91cf\u3002\u5bfc\u81f4\u4e22\u5931\u4e86\u4e00\u6b21\u4fee\u6539\u3002 Dirty Read\uff08\u8bfb\u810f\u6570\u636e\uff09 Dirty Read \u4e00\u4e2a\u4eba\u8ba2\u7968\u540e\uff0c\u53e6\u4e00\u4e2a\u4eba\u8bfb\u6570\u636e\u540e\uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u4eba\u653e\u5f03\u4e86\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u4eba\u4ecd\u7136\u662f\u7528\u7684\u810f\u6570\u636e\u3002 Unrepeatable Read \uff08\u4e0d\u53ef\u91cd\u590d\u8bfb\uff09 Unrepeatable Read Isolation \u8981\u6c42\u6211\u4eec\u8bfb\u5230\u7684\u6570\u636e\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002 Phantom Problem\uff08\u5e7d\u7075\u95ee\u9898\uff09 Phantom Problem unrepeatable \u662f\u9488\u5bf9\u5df2\u7ecf\u5b58\u5728\u7684\u6570\u636e\uff0c\u4f46\u662f\u6570\u636e\u7684\u503c\u4e0d\u540c. Phantom \u662f\u6307\u6570\u636e\u6570\u91cf\u4f1a\u53d8\u591a/\u51cf\u5c11\u3002 Schedules \u00b6 Schedule \u2013 a sequences of instructions that specify the chronological order in which instructions of concurrent transactions are executed. \u4e8b\u52a1\u7684\u6267\u987a\u5e8f\uff0c\u53ef\u4ee5\u662f\u4ea4\u53c9\u6267\u884c\u3002 Schedule Example \u4e32\u884c\u8c03\u5ea6 \u4e32\u884c\u8c03\u5ea6\u4e00\u5b9a\u662f\u6ee1\u8db3\u9694\u79bb\u6027\u7684 \u975e\u4e32\u884c\u8c03\u5ea6\uff0c\u4f46\u7b49\u4ef7\u4e8e\u4e0a\u9762\u7684\u4e32\u884c\u8c03\u5ea6 \u8fd9\u91cc T2 \u7684 readA \u548c T1 \u7684 readB \u53ef\u4ee5\u8c03\u6362\u65f6\u95f4\u6b21\u5e8f\uff0c\u5c31\u5f97\u5230\u4e86\u521a\u521a\u7684\u4e32\u884c\u8c03\u5ea6\u3002 \u4e0b\u9762\u8fd9\u6837\u7684\u8c03\u5ea6\u5c31\u4e0d\u7b49\u4ef7\uff0c\u7834\u574f\u4e86\u9694\u79bb\u6027\u3002 Serializability \u00b6 A (possibly concurrent) schedule is serializable if it is equivalent to a serial schedule. conflict serializability(\u51b2\u7a81\u53ef\u4e32\u884c\u5316) view serializability(\u89c6\u56fe\u53ef\u4e32\u884c\u5316) \u4e32\u884c\u8c03\u5ea6\u4e00\u5b9a\u662f\u53ef\u4e32\u884c\u5316\u7684\uff0c\u4ea4\u9519\u6267\u884c\u4e0d\u4e00\u5b9a\u3002 Conflict Serializability \u00b6 \u6ce8\u610f\u8fd9\u91cc\u9488\u5bf9\u7684\u662f\u540c\u4e00\u4e2a\u6570\u636e\u9879 Q. a conflict between \\(l_i\\) and \\(l_j\\) forces a (logical) temporal order between them. If a schedule S can be transformed into a schedule S\u00b4 by a series of swaps of non-conflicting instructions, we say that S and S\u00b4 are conflict equivalent . \u4ea4\u6362\u4e0d\u51b2\u7a81\u7684\u6307\u4ee4\uff0c\u5f97\u5230\u7684\u662f\u51b2\u7a81\u7b49\u4ef7\u7684\u8c03\u5ea6\u3002 We say that a schedule S is conflict serializable if it is conflict equivalent to a serial schedule. \u51b2\u7a81\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u4e32\u884c\u8c03\u5ea6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8c03\u5ea6\u662f\u53ef\u4e32\u884c\u7684\u3002 Testing for Serializability \u00b6 Consider some schedule of a set of transactions \\(T_1, T_2, \\ldots, T_n\\) Precedence graph\uff08\u524d\u9a71\u56fe\uff09 \u2014 a directed graph where the vertices are the transactions (names). \u5982\u679c T1 \u8981\u5728 T2 \u524d\u9762\uff08\u5373\u627e\u5230\u4e00\u6761 T1 \u7684\u6307\u4ee4\u8981\u6c42\u6bd4 T2 \u4e2d\u7684\u4e00\u6761\u6307\u4ee4\u5148\u6267\u884c\uff09\uff0c\u90a3\u6211\u4eec\u753b\u4e00\u6761\u4ece T1->T2 \u7684\u8fb9\u3002 \u5982\u679c\u627e\u5230\u73af\uff0c\u8bf4\u660e\u662f\u4e0d\u53ef\u4e32\u884c\u5316\u7684\u3002\u5426\u5219\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u3002 Example T1 \u7684 readY \u548c T2 \u7684 writeY \u51b2\u7a81\uff0c\u6240\u4ee5\u8981\u753b\u4e00\u6761\u8fb9\uff0c\u5982\u6b64\u3002 \u6700\u540e\u6709 10 \u79cd\u8c03\u5ea6\u65b9\u5f0f\u3002 \u53ea\u7528\u4e8e\u7406\u8bba\u7814\u7a76\uff0c\u6570\u636e\u5e93\u5185\u4e0d\u4f1a\u8fd9\u6837\u5b9e\u73b0\u3002 View Serializability \u00b6 Example \u521d\u59cb\u503c\u7531\u540c\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u5230\u3002\u4e2d\u95f4\u7ed3\u679c\u662f\u7531\u540c\u4e00\u4e2a\u4e8b\u52a1\u5f97\u5230\u518d\u7531\u53e6\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u51fa\u3002\u6700\u7ec8\u5199\u56de\u6570\u636e\u5e93\u4e5f\u662f\u7531\u540c\u4e00\u4e2a\u4e8b\u52a1\u5199\u3002 A schedule S is view serializable if it is view equivalent to a serial schedule. Every conflict serializable schedule is also view serializable. Below is a schedule which is view-serializable but not conflict serializable. \u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\u90fd\u662f\u89c6\u56fe\u53ef\u4e32\u884c\u5316\u7684\uff0c\u53cd\u4e4b\u4e0d\u4e00\u5b9a\u3002 Example \u7b49\u4ef7\u4e8e T27-28-29. (\u90fd\u662f 27 \u8bfb\u521d\u503c\uff0c\u4e2d\u95f4\u6ca1\u6709\u5176\u4ed6\u8bfb\uff0c\u6700\u540e\u662f 29 \u5199) Other Notions of Serializability \u00b6 \u6709\u7684\u8c03\u5ea6\u65e2\u4e0d\u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u53c8\u4e0d\u662f\u89c6\u56fe\u53ef\u4e32\u884c\u5316\uff0c\u4f46\u5b83\u662f\u53ef\u4e32\u884c\u5316\u7684\u3002 Example \u7b49\u4ef7\u4e8e T1-T5. \u52a0\u51cf\u64cd\u4f5c\u662f\u53ef\u7ed3\u5408\u7684\uff0c\u8fd9\u91cc\u9700\u8981\u4e86\u89e3\u4e8b\u52a1\u91cc\u5177\u4f53\u662f\u4ec0\u4e48\u64cd\u4f5c\u3002\u4f46\u6211\u4eec\u7684\u7b80\u5355\u6a21\u578b\u5bf9\u6b64\u4e0d\u52a0\u4ee5\u533a\u5206\u3002 Recoverable Schedules \u00b6 Recoverable schedule(\u53ef\u6062\u590d\u8c03\u5ea6) \u2014 if a transaction \\(T_j\\) reads a data item previously written by a transaction \\(T_i\\) , then the commit operation of \\(T_i\\) appears before the commit operation of \\(T_j\\) . Example The following schedule (Schedule 11) is not recoverable if T9 commits immediately after the read. \u53ef\u80fd\u4f1a\u8bfb\u810f\u6570\u636e \u5982\u679c T8 \u540e\u7eed\u56de\u6eda, \u4f46 T9 \u5df2\u7ecf\u57fa\u4e8e\u810f\u6570\u636e\u505a\u4e86\u540e\u7eed\u64cd\u4f5c\uff0c\u800c\u4e14\u5df2\u7ecf\u63d0\u4ea4\u4e86\uff0c\u4e0d\u53ef\u6062\u590d\u3002 \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u4e86\u53e6\u4e00\u4e2a\u4e8b\u52a1\u7684\u810f\u6570\u636e\uff0c\u63d0\u4ea4\u6b21\u5e8f\u9700\u8981\u6709\u7ea6\u675f\uff0c\u8981\u5728\u88ab\u8bfb\u4e8b\u52a1\u7684\u540e\u9762\u63d0\u4ea4\u3002 Cascading Rollbacks \u00b6 Cascading rollback \u2013 a single transaction failure leads to a series of transaction rollbacks. Consider the following schedule where none of the transactions has yet committed (so the schedule is recoverable) Example If T10 fails, T11 and T12 must also be rolled back. \u8981\u6709\u7ea7\u8054\u56de\u6eda\u7684\u6062\u590d\u3002 Can lead to the undoing of a significant amount of work. \u6211\u4eec\u66f4\u5e0c\u671b\u7528\u975e\u7ea7\u8054\u7684\u6062\u590d\uff0c\u5426\u5219\u5f00\u9500\u592a\u5927\u3002 Transaction Isolation Levels \u00b6 A database must provide a mechanism that will ensure that all possible schedules are either conflict or view serializable , and \u4fdd\u8bc1\u53ef\u4e32\u884c\u7684 are recoverable and preferably cascadeless \u4fdd\u8bc1\u53ef\u6062\u590d\u7684\uff08\u6700\u597d\u662f\u975e\u7ea7\u8054\uff09 \u6570\u636e\u5e93\u91cc\u63d0\u4f9b\u4e00\u79cd\u534f\u8bae\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u8981\u9075\u4ece\u534f\u8bae\uff0c\u9075\u4ece\u534f\u8bae\u4e0b\u4ea7\u751f\u7684\u8c03\u5ea6\u4e00\u5b9a\u662f\u53ef\u4e32\u884c\u3001\u53ef\u6062\u590d\u7684\u3002 \u8fd9\u662f\u5b8c\u5168\u7684\u9694\u79bb\uff0c\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\u3002 In SQL set transaction isolation level serializable \u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u6570\u636e\u5e93\u7684\u9694\u79bb\u7ea7\u522b\u3002 Serializable \u2014 default \u56db\u79cd\u95ee\u9898\u90fd\u8981\u907f\u514d\uff0c\u4ee3\u4ef7\u6700\u9ad8\u3002 Repeatable read \u2014 only committed records to be read, repeated reads of same record must return same value. However, a transaction may not be serializable \u2013 it may find some records inserted by a transaction but not find others. \u4e0d\u7ba1\u5e7d\u7075\u95ee\u9898\u3002 Read committed \u2014 only committed records can be read, but successive reads of record may return different (but committed) values. \u4fdd\u8bc1\u4e0d\u8bfb\u810f\u6570\u636e\u3002 Read uncommitted \u2014 even uncommitted records may be read. \u6700\u4f4e\u7684\u9694\u79bb\u7ea7\u522b\uff0c\u6709\u4e9b\u6570\u636e\u5e93\u53ea\u662f\u505a\u7edf\u8ba1\u4efb\u52a1\u3002 Lower degrees of consistency useful for gathering approximate information about the database Concurrency Control Protocols \u00b6 Lock-Based Protocols Lock on whole database vs lock on items \u8bfb\u4e4b\u524d\u8981\u8bbf\u95ee\u4e00\u4e2a\u5171\u4eab\u9501\uff0c\u5199\u4e4b\u524d\u8981\u8bbf\u95ee\u4e00\u4e2a\u6392\u4ed6\u9501\uff0c\u51b2\u7a81\u4e86\u5c31\u8981\u7b49\u5f85\u3002\u901a\u8fc7\u9501\u5c31\u89c4\u5b9a\u4e86\u4e00\u4e2a\u6267\u884c\u7684\u6b21\u5e8f\u3002 How long to hold lock? Shared vs exclusive locks Timestamp-Based Protocols Transaction timestamp assigned e.g. when a transaction begins \u4e8b\u52a1\u6267\u884c\u65f6\u5206\u914d\u4e00\u4e2a\u65f6\u95f4\u6233\u3002\u6267\u884c\u6b21\u5e8f\u6309\u7167\u65f6\u95f4\u6233\u6392\u5e8f\u3002 Data items store two timestamps Read timestamp Write timestamp Timestamps are used to detect out of order accesses Validation-Based Protocols Optimistic concurrency control Low rate of conflicts among transactions Each transaction must go through 3 phases: Read phase -> Validation phase -> Write phase \u4e8b\u52a1\u63d0\u4ea4\u7684\u65f6\u5019\u5148\u53bb\u9a8c\u8bc1\u662f\u5426\u6709\u51b2\u7a81\uff0c\u5982\u679c\u6ca1\u6709\u51b2\u7a81\u5c31\u63d0\u4ea4\uff0c\u5982\u679c\u51b2\u7a81\u5c31\u8003\u8651\u653e\u5f03\u67d0\u4e2a\u3002","title":"\u4e8b\u52a1"},{"location":"DB/db13/#transactions","text":"Abstract Transaction Concept A Simple Transaction Model Concurrent Executions Serializability Recoverability Transaction Isolation Levels Transaction Definition in SQL","title":"Transactions"},{"location":"DB/db13/#transaction-concept","text":"A transaction is a unit of program execution that accesses and possibly updates various data items. \u4e00\u6bb5\u539f\u5b50\u6027\u7684\u64cd\u4f5c e.g. transaction to transfer $50 from account A to account B update account set balance = balance - 50 where account_number = A ; update account set balance = balance + 50 where account_number = B ; commit ;","title":"Transaction Concept"},{"location":"DB/db13/#acid-properties","text":"Atomicity\uff08\u539f\u5b50\u6027\uff09 \u5168\u6709\u6216\u5168\u65e0 \u7531\u6570\u636e\u5e93\u6062\u590d\u529f\u80fd\u4fdd\u8bc1 Consistency\uff08\u4e00\u81f4\u6027\uff09 \u4fdd\u8bc1\u6570\u636e\u5e93\u5185\u7684\u5185\u5bb9\u6b63\u786e\u6027\uff0c\u4e0e\u5b9e\u9645\u4e1a\u52a1\u76f8\u7b26\u3002\u5982\u8f6c\u8d26\u662f\u4e00\u4e2a\u4eba\u4f59\u989d\u51cf\u5c11\u4e00\u4e2a\u4eba\u589e\u52a0\u3002 consistency \u4e0e\u5f00\u53d1\u4eba\u5458\u6709\u5173\u7cfb\uff08\u4e8b\u52a1\u8bbe\u8ba1\u662f\u5426\u5408\u7406\uff09 Isolation\uff08\u9694\u79bb\u6027\uff09 \u4e8b\u52a1\u5e76\u53d1\u6267\u884c\uff0c\u4f46\u662f\u76f8\u4e92\u9694\u79bb\uff0c\u597d\u50cf\u662f\u4e32\u884c\u6267\u884c\u4e00\u6837\u3002 \u7531\u6570\u636e\u5e93\u7684\u5e76\u53d1\u6267\u884c\u6765\u5b9e\u73b0 Durability\uff08\u6301\u4e45\u6027\uff09 \u4e8b\u52a1\u63d0\u4ea4\u540e\u88ab\u7f13\u5b58\uff0c\u6389\u7535\u4e0d\u80fd\u5931\u53bb buffer \u91cc\u7684\u5185\u5bb9\u3002","title":"ACID Properties"},{"location":"DB/db13/#a-simple-transaction-model","text":"\u8fd9\u4e2a\u6a21\u578b\u4e2d\uff0c\u628a\u4e8b\u52a1\u5bf9\u6570\u636e\u5e93\u7684\u4fee\u6539\u7b80\u5316\u4e3a\u8bfb\u5199\u4e24\u79cd\u64cd\u4f5c\u3002 Transactions access data using two operations: read(X) , which transfers the data item X from the database to a variable, also called X\uff0c in a work area in main memory belonging to the transaction that executed the read operation. write(X) , which transfers the value in the variable X in the main memory work area of the transaction that executed the write operation to the datat item X in database. \u5728\u8fd9\u4e2a\u7b80\u5355\u7684\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u4e0d\u8003\u8651\u6570\u636e\u8bfb\u5230\u5de5\u4f5c\u533a\u57df\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\u64cd\u4f5c\uff0c\u53ea\u8003\u8651\u8bfb\u5199\u3002 Example of Fund Transfer Atomicity requirement \u5982\u679c\u6267\u884c\u7ed3\u675f\u4e4b\u540e\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u6570\u636e\u5e93\u5e94\u8be5\u8981\u64a4\u9500\u4e4b\u524d\u7684\u64cd\u4f5c Durability requirement \u5982\u679c\u4e8b\u52a1\u7ed3\u675f\u4e86\uff0c\u6211\u4eec\u5c31\u628a\u66f4\u65b0\u540c\u6b65 Consistency requirement Explicitly\uff08\u663e\u5f0f\uff09 specified integrity constraints e.g. primary keys , foreign keys \u6570\u636e\u5e93\u628a\u8fd9\u4e2a\u5b9a\u4e49\u653e\u5728\u5185\u90e8\uff0c\u4f1a\u81ea\u5df1\u7ef4\u62a4 Implicit \uff08\u9690\u5f0f\uff09 integrity constraints e.g. sum of balances of all accounts minus sum of loan amounts must equal value of cash-in-hand Isolation requirement \u5728 step 3 6 \u4e4b\u95f4\uff0c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e2a\u88ab\u90e8\u5206\u66f4\u65b0\u7684\u6570\u636e\u5e93\uff0cA+B \u4f1a\u5c0f\u4e8e\u6b63\u786e\u7b54\u6848\u3002\u8fd9\u662f\u56e0\u4e3a\u7834\u574f\u4e86\u9694\u79bb\u6027\u3002","title":"A Simple Transaction Model"},{"location":"DB/db13/#transaction-state","text":"Active \u2013 the initial state; the transaction stays in this state while it is executing Partially committed \u2013 after the final statement has been executed. \u8bed\u53e5\u6267\u884c\u5b8c\u4e86\uff0c\u51c6\u5907\u63d0\u4ea4\u3002\u80fd\u5426\u63d0\u4ea4\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u6267\u884c\u3002 Failed -- after the discovery that normal execution can no longer proceed. \u4e0d\u80fd\u6b63\u5e38\u63d0\u4ea4\u3002\u6216\u8005\u662f\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u95ee\u9898\u3002 Aborted \u2013 after the transaction has been rolled back and the database restored to its state prior to the start of the transaction. Two options after it has been aborted: restart the transaction kill the transaction Committed \u2013 after successful completion.","title":"Transaction State"},{"location":"DB/db13/#concurrent-executions","text":"increased processor and disk utilization reduced average response time \u4e8b\u52a1\u662f\u5e76\u53d1\u6267\u884c\u7684\uff0c\u5982\u679c\u4e0d\u52a0\u4ee5\u63a7\u5236\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898 Anomalies in Concurrent Executions Lost Update\uff08\u4e22\u5931\u4fee\u6539\uff09 Lost Update Example \u4e00\u4e2a\u4eba\u8ba2\u7968\u540e\uff0c\u53e6\u4e00\u4e2a\u4eba\u8bfb\u5230\u8fd9\u91cc\u7b2c\u4e00\u4e2a\u4eba\u8fd8\u6ca1\u6709\u4fee\u6539\u7684\u4f59\u91cf\u3002\u5bfc\u81f4\u4e22\u5931\u4e86\u4e00\u6b21\u4fee\u6539\u3002 Dirty Read\uff08\u8bfb\u810f\u6570\u636e\uff09 Dirty Read \u4e00\u4e2a\u4eba\u8ba2\u7968\u540e\uff0c\u53e6\u4e00\u4e2a\u4eba\u8bfb\u6570\u636e\u540e\uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u4eba\u653e\u5f03\u4e86\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u4eba\u4ecd\u7136\u662f\u7528\u7684\u810f\u6570\u636e\u3002 Unrepeatable Read \uff08\u4e0d\u53ef\u91cd\u590d\u8bfb\uff09 Unrepeatable Read Isolation \u8981\u6c42\u6211\u4eec\u8bfb\u5230\u7684\u6570\u636e\u5e94\u8be5\u662f\u4e00\u6837\u7684\u3002 Phantom Problem\uff08\u5e7d\u7075\u95ee\u9898\uff09 Phantom Problem unrepeatable \u662f\u9488\u5bf9\u5df2\u7ecf\u5b58\u5728\u7684\u6570\u636e\uff0c\u4f46\u662f\u6570\u636e\u7684\u503c\u4e0d\u540c. Phantom \u662f\u6307\u6570\u636e\u6570\u91cf\u4f1a\u53d8\u591a/\u51cf\u5c11\u3002","title":"Concurrent Executions"},{"location":"DB/db13/#schedules","text":"Schedule \u2013 a sequences of instructions that specify the chronological order in which instructions of concurrent transactions are executed. \u4e8b\u52a1\u7684\u6267\u987a\u5e8f\uff0c\u53ef\u4ee5\u662f\u4ea4\u53c9\u6267\u884c\u3002 Schedule Example \u4e32\u884c\u8c03\u5ea6 \u4e32\u884c\u8c03\u5ea6\u4e00\u5b9a\u662f\u6ee1\u8db3\u9694\u79bb\u6027\u7684 \u975e\u4e32\u884c\u8c03\u5ea6\uff0c\u4f46\u7b49\u4ef7\u4e8e\u4e0a\u9762\u7684\u4e32\u884c\u8c03\u5ea6 \u8fd9\u91cc T2 \u7684 readA \u548c T1 \u7684 readB \u53ef\u4ee5\u8c03\u6362\u65f6\u95f4\u6b21\u5e8f\uff0c\u5c31\u5f97\u5230\u4e86\u521a\u521a\u7684\u4e32\u884c\u8c03\u5ea6\u3002 \u4e0b\u9762\u8fd9\u6837\u7684\u8c03\u5ea6\u5c31\u4e0d\u7b49\u4ef7\uff0c\u7834\u574f\u4e86\u9694\u79bb\u6027\u3002","title":"Schedules"},{"location":"DB/db13/#serializability","text":"A (possibly concurrent) schedule is serializable if it is equivalent to a serial schedule. conflict serializability(\u51b2\u7a81\u53ef\u4e32\u884c\u5316) view serializability(\u89c6\u56fe\u53ef\u4e32\u884c\u5316) \u4e32\u884c\u8c03\u5ea6\u4e00\u5b9a\u662f\u53ef\u4e32\u884c\u5316\u7684\uff0c\u4ea4\u9519\u6267\u884c\u4e0d\u4e00\u5b9a\u3002","title":"Serializability"},{"location":"DB/db13/#conflict-serializability","text":"\u6ce8\u610f\u8fd9\u91cc\u9488\u5bf9\u7684\u662f\u540c\u4e00\u4e2a\u6570\u636e\u9879 Q. a conflict between \\(l_i\\) and \\(l_j\\) forces a (logical) temporal order between them. If a schedule S can be transformed into a schedule S\u00b4 by a series of swaps of non-conflicting instructions, we say that S and S\u00b4 are conflict equivalent . \u4ea4\u6362\u4e0d\u51b2\u7a81\u7684\u6307\u4ee4\uff0c\u5f97\u5230\u7684\u662f\u51b2\u7a81\u7b49\u4ef7\u7684\u8c03\u5ea6\u3002 We say that a schedule S is conflict serializable if it is conflict equivalent to a serial schedule. \u51b2\u7a81\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u4e32\u884c\u8c03\u5ea6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8c03\u5ea6\u662f\u53ef\u4e32\u884c\u7684\u3002","title":"Conflict Serializability"},{"location":"DB/db13/#testing-for-serializability","text":"Consider some schedule of a set of transactions \\(T_1, T_2, \\ldots, T_n\\) Precedence graph\uff08\u524d\u9a71\u56fe\uff09 \u2014 a directed graph where the vertices are the transactions (names). \u5982\u679c T1 \u8981\u5728 T2 \u524d\u9762\uff08\u5373\u627e\u5230\u4e00\u6761 T1 \u7684\u6307\u4ee4\u8981\u6c42\u6bd4 T2 \u4e2d\u7684\u4e00\u6761\u6307\u4ee4\u5148\u6267\u884c\uff09\uff0c\u90a3\u6211\u4eec\u753b\u4e00\u6761\u4ece T1->T2 \u7684\u8fb9\u3002 \u5982\u679c\u627e\u5230\u73af\uff0c\u8bf4\u660e\u662f\u4e0d\u53ef\u4e32\u884c\u5316\u7684\u3002\u5426\u5219\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u3002 Example T1 \u7684 readY \u548c T2 \u7684 writeY \u51b2\u7a81\uff0c\u6240\u4ee5\u8981\u753b\u4e00\u6761\u8fb9\uff0c\u5982\u6b64\u3002 \u6700\u540e\u6709 10 \u79cd\u8c03\u5ea6\u65b9\u5f0f\u3002 \u53ea\u7528\u4e8e\u7406\u8bba\u7814\u7a76\uff0c\u6570\u636e\u5e93\u5185\u4e0d\u4f1a\u8fd9\u6837\u5b9e\u73b0\u3002","title":"Testing for Serializability"},{"location":"DB/db13/#view-serializability","text":"Example \u521d\u59cb\u503c\u7531\u540c\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u5230\u3002\u4e2d\u95f4\u7ed3\u679c\u662f\u7531\u540c\u4e00\u4e2a\u4e8b\u52a1\u5f97\u5230\u518d\u7531\u53e6\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u51fa\u3002\u6700\u7ec8\u5199\u56de\u6570\u636e\u5e93\u4e5f\u662f\u7531\u540c\u4e00\u4e2a\u4e8b\u52a1\u5199\u3002 A schedule S is view serializable if it is view equivalent to a serial schedule. Every conflict serializable schedule is also view serializable. Below is a schedule which is view-serializable but not conflict serializable. \u51b2\u7a81\u53ef\u4e32\u884c\u5316\u7684\u90fd\u662f\u89c6\u56fe\u53ef\u4e32\u884c\u5316\u7684\uff0c\u53cd\u4e4b\u4e0d\u4e00\u5b9a\u3002 Example \u7b49\u4ef7\u4e8e T27-28-29. (\u90fd\u662f 27 \u8bfb\u521d\u503c\uff0c\u4e2d\u95f4\u6ca1\u6709\u5176\u4ed6\u8bfb\uff0c\u6700\u540e\u662f 29 \u5199)","title":"View Serializability"},{"location":"DB/db13/#other-notions-of-serializability","text":"\u6709\u7684\u8c03\u5ea6\u65e2\u4e0d\u662f\u51b2\u7a81\u53ef\u4e32\u884c\u5316\u53c8\u4e0d\u662f\u89c6\u56fe\u53ef\u4e32\u884c\u5316\uff0c\u4f46\u5b83\u662f\u53ef\u4e32\u884c\u5316\u7684\u3002 Example \u7b49\u4ef7\u4e8e T1-T5. \u52a0\u51cf\u64cd\u4f5c\u662f\u53ef\u7ed3\u5408\u7684\uff0c\u8fd9\u91cc\u9700\u8981\u4e86\u89e3\u4e8b\u52a1\u91cc\u5177\u4f53\u662f\u4ec0\u4e48\u64cd\u4f5c\u3002\u4f46\u6211\u4eec\u7684\u7b80\u5355\u6a21\u578b\u5bf9\u6b64\u4e0d\u52a0\u4ee5\u533a\u5206\u3002","title":"Other Notions of Serializability"},{"location":"DB/db13/#recoverable-schedules","text":"Recoverable schedule(\u53ef\u6062\u590d\u8c03\u5ea6) \u2014 if a transaction \\(T_j\\) reads a data item previously written by a transaction \\(T_i\\) , then the commit operation of \\(T_i\\) appears before the commit operation of \\(T_j\\) . Example The following schedule (Schedule 11) is not recoverable if T9 commits immediately after the read. \u53ef\u80fd\u4f1a\u8bfb\u810f\u6570\u636e \u5982\u679c T8 \u540e\u7eed\u56de\u6eda, \u4f46 T9 \u5df2\u7ecf\u57fa\u4e8e\u810f\u6570\u636e\u505a\u4e86\u540e\u7eed\u64cd\u4f5c\uff0c\u800c\u4e14\u5df2\u7ecf\u63d0\u4ea4\u4e86\uff0c\u4e0d\u53ef\u6062\u590d\u3002 \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8bfb\u4e86\u53e6\u4e00\u4e2a\u4e8b\u52a1\u7684\u810f\u6570\u636e\uff0c\u63d0\u4ea4\u6b21\u5e8f\u9700\u8981\u6709\u7ea6\u675f\uff0c\u8981\u5728\u88ab\u8bfb\u4e8b\u52a1\u7684\u540e\u9762\u63d0\u4ea4\u3002","title":"Recoverable Schedules"},{"location":"DB/db13/#cascading-rollbacks","text":"Cascading rollback \u2013 a single transaction failure leads to a series of transaction rollbacks. Consider the following schedule where none of the transactions has yet committed (so the schedule is recoverable) Example If T10 fails, T11 and T12 must also be rolled back. \u8981\u6709\u7ea7\u8054\u56de\u6eda\u7684\u6062\u590d\u3002 Can lead to the undoing of a significant amount of work. \u6211\u4eec\u66f4\u5e0c\u671b\u7528\u975e\u7ea7\u8054\u7684\u6062\u590d\uff0c\u5426\u5219\u5f00\u9500\u592a\u5927\u3002","title":"Cascading Rollbacks"},{"location":"DB/db13/#transaction-isolation-levels","text":"A database must provide a mechanism that will ensure that all possible schedules are either conflict or view serializable , and \u4fdd\u8bc1\u53ef\u4e32\u884c\u7684 are recoverable and preferably cascadeless \u4fdd\u8bc1\u53ef\u6062\u590d\u7684\uff08\u6700\u597d\u662f\u975e\u7ea7\u8054\uff09 \u6570\u636e\u5e93\u91cc\u63d0\u4f9b\u4e00\u79cd\u534f\u8bae\uff0c\u6bcf\u4e2a\u4e8b\u52a1\u8981\u9075\u4ece\u534f\u8bae\uff0c\u9075\u4ece\u534f\u8bae\u4e0b\u4ea7\u751f\u7684\u8c03\u5ea6\u4e00\u5b9a\u662f\u53ef\u4e32\u884c\u3001\u53ef\u6062\u590d\u7684\u3002 \u8fd9\u662f\u5b8c\u5168\u7684\u9694\u79bb\uff0c\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\u3002 In SQL set transaction isolation level serializable \u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u6570\u636e\u5e93\u7684\u9694\u79bb\u7ea7\u522b\u3002 Serializable \u2014 default \u56db\u79cd\u95ee\u9898\u90fd\u8981\u907f\u514d\uff0c\u4ee3\u4ef7\u6700\u9ad8\u3002 Repeatable read \u2014 only committed records to be read, repeated reads of same record must return same value. However, a transaction may not be serializable \u2013 it may find some records inserted by a transaction but not find others. \u4e0d\u7ba1\u5e7d\u7075\u95ee\u9898\u3002 Read committed \u2014 only committed records can be read, but successive reads of record may return different (but committed) values. \u4fdd\u8bc1\u4e0d\u8bfb\u810f\u6570\u636e\u3002 Read uncommitted \u2014 even uncommitted records may be read. \u6700\u4f4e\u7684\u9694\u79bb\u7ea7\u522b\uff0c\u6709\u4e9b\u6570\u636e\u5e93\u53ea\u662f\u505a\u7edf\u8ba1\u4efb\u52a1\u3002 Lower degrees of consistency useful for gathering approximate information about the database","title":"Transaction Isolation Levels"},{"location":"DB/db13/#concurrency-control-protocols","text":"Lock-Based Protocols Lock on whole database vs lock on items \u8bfb\u4e4b\u524d\u8981\u8bbf\u95ee\u4e00\u4e2a\u5171\u4eab\u9501\uff0c\u5199\u4e4b\u524d\u8981\u8bbf\u95ee\u4e00\u4e2a\u6392\u4ed6\u9501\uff0c\u51b2\u7a81\u4e86\u5c31\u8981\u7b49\u5f85\u3002\u901a\u8fc7\u9501\u5c31\u89c4\u5b9a\u4e86\u4e00\u4e2a\u6267\u884c\u7684\u6b21\u5e8f\u3002 How long to hold lock? Shared vs exclusive locks Timestamp-Based Protocols Transaction timestamp assigned e.g. when a transaction begins \u4e8b\u52a1\u6267\u884c\u65f6\u5206\u914d\u4e00\u4e2a\u65f6\u95f4\u6233\u3002\u6267\u884c\u6b21\u5e8f\u6309\u7167\u65f6\u95f4\u6233\u6392\u5e8f\u3002 Data items store two timestamps Read timestamp Write timestamp Timestamps are used to detect out of order accesses Validation-Based Protocols Optimistic concurrency control Low rate of conflicts among transactions Each transaction must go through 3 phases: Read phase -> Validation phase -> Write phase \u4e8b\u52a1\u63d0\u4ea4\u7684\u65f6\u5019\u5148\u53bb\u9a8c\u8bc1\u662f\u5426\u6709\u51b2\u7a81\uff0c\u5982\u679c\u6ca1\u6709\u51b2\u7a81\u5c31\u63d0\u4ea4\uff0c\u5982\u679c\u51b2\u7a81\u5c31\u8003\u8651\u653e\u5f03\u67d0\u4e2a\u3002","title":"Concurrency Control Protocols"},{"location":"DB/db14/","text":"Concurrency Control \u00b6 Abstract Lock-Based Protocols\uff08\u57fa\u4e8e\u9501\u7684\u534f\u8bae\uff09 Deadlock Handling \uff08\u6b7b\u9501\u5904\u7406\uff09 Multiple Granularity \uff08\u591a\u7c92\u5ea6\uff09 Insert and Delete Operations Multiversion Schemes \uff08\u591a\u7248\u672c\u673a\u5236\uff09 Timestamp-Based Protocols \uff08\u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u534f\u8bae\uff09 Validation-Based Protocols \uff08\u57fa\u4e8e\u6709\u6548\u6027\u7684\u534f\u8bae\uff09 Lock-Based Protocols \u00b6 A lock is a mechanism to control concurrent access to a data item exclusive(X) Data item can be both read as well as written. X-lock is requested using lock-X instruction. shared(X) Data item can only be read. S-lock is requested using lock-S instruction. \u8981\u5199\u4e00\u4e2a\u6570\u636e\uff0c\u5148\u7533\u8bf7\u83b7\u5f97 X \u9501\uff1b\u8981\u8bfb\u4e00\u4e2a\u6570\u636e\uff0c\u5148\u7533\u8bf7\u83b7\u5f97 S \u9501\u3002 \u8bbf\u95ee\u7ed3\u675f\u540e\u91ca\u653e\u8fd9\u4e2a\u9501\u3002 \u8bbf\u95ee\u6570\u636e\u4e4b\u524d\u5fc5\u987b\u83b7\u5f97\u5bf9\u5e94\u7684\u9501\uff0c\u5426\u5219\u9700\u8981\u7b49\u5f85\u3002 The Two-Phase Locking Protocol \u00b6 \u4e8b\u52a1\u7684\u52a0\u9501\u548c\u51cf\u9501\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\u3002 Phase 1: Growing Phase (\u589e\u957f\u9636\u6bb5) transaction may obtain locks transaction may not release locks Phase 2: Shrinking Phase(\u7f29\u51cf\u9636\u6bb5) transaction may release locks transaction may not obtain locks \u4e00\u4e2a\u4e8b\u52a1\u4e00\u65e6\u5f00\u59cb\u91ca\u653e\u9501\uff0c\u5c31\u4e0d\u80fd\u518d\u52a0\u9501\u4e86\u3002 \u4e8b\u52a1\u4e24\u4e2a\u9636\u6bb5\u7684\u5206\u754c\u7ebf(lock point), \u5373\u83b7\u5f97\u4e86\u6700\u540e\u4e00\u4e2a\u9501\uff08\u5b8c\u6210\u83b7\u5f97\u8fd9\u4e2a\u52a8\u4f5c\uff09\u7684\u65f6\u95f4\u70b9\u3002 \u8fd9\u6837\u6bcf\u4e2a\u4e8b\u52a1\u90fd\u6709\u4e00\u4e2a lock point, \u6309\u7167\u8fd9\u4e2a\u65f6\u95f4\u6392\u5e8f\u5373\u53ef\u5f97\u5230\u4e32\u884c\u5316\u7684\u6267\u884c\u987a\u5e8f\u3002 Example Two-Phase Locking Protocol assures serializability. It can be proved that the transactions can be serialized in the order of their lock points. \u53ef\u4ee5\u6309 lock points \u4e32\u884c\u5316\uff0c\u4f46\u4e0d\u662f\u53ea\u80fd\u6309\u7167\u8fd9\u4e48\u4e32\u884c\u5316\u3002 \u4e0a\u9762\u57fa\u672c\u7684\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u65e0\u6cd5\u4fdd\u8bc1\u4e8b\u52a1\u7684\u53ef\u6062\u590d\u6027\u3002 Extensions to basic two-phase locking\uff08\u57fa\u672c\u4e24\u9636\u6bb5\u5c01\u9501\uff09 needed to ensure recoverability of freedom from cascading roll-back Strict two-phase locking\uff08\u4e25\u683c\u4e24\u9636\u6bb5\u5c01\u9501\uff09 : a transaction must hold all its exclusive locks till it commits/aborts. Ensures recoverability and avoids cascading roll-backs. S \u9501\u53ef\u4ee5\u7528\u5b8c\u5c31\u653e\uff0c\u4f46 X \u9501\u5fc5\u987b\u5230\u63d0\u4ea4\u7684\u65f6\u5019\u624d\u80fd\u91ca\u653e\uff08\u8fd9\u6837\u522b\u4eba\u5c31\u4e0d\u80fd\u8bbf\u95ee\u4e86\uff0c\u65e0\u6cd5\u8bfb\u810f\u6570\u636e\uff09\u3002\u4ee3\u4ef7\u662f\u964d\u4f4e\u5e76\u53d1\u5ea6\u3002 Rigorous two-phase locking\uff08\u5f3a\u4e24\u9636\u6bb5\u5c01\u9501\uff09 : a transaction must hold all locks till commit/abort. Transactions can be serialized in the order in which they commit. Two-phase locking is not a necessary condition for serializability. Example \u8fd9\u91cc\u653e\u9501\u4e86\u4e4b\u540e\u8fd8\u83b7\u5f97\u9501\u4e86\uff0c\u8fdd\u80cc\u4e86\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u3002 \u6240\u4ee5\u4e0d\u9075\u4ece\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff0c\u4e5f\u53ef\u4ee5\u83b7\u5f97\u51b2\u7a81\u53ef\u4e32\u884c\u7684\u8c03\u5ea6\u3002 2PL - Proof \u00b6 Proof by Contradiction \u5982\u679c\u6709 Ti->Tj \u7684\u6709\u5411\u8fb9\uff0c\u90a3 Ti \u7684 lockpoint \u4e00\u5b9a\u5c0f\u4e8e Tj. Ti->Tj \u80af\u5b9a\u6709\u4e00\u4e2a\u51b2\u7a81\u7684\u8bbf\u95ee\uff08\u5bf9\u540c\u4e00\u4e2a\u6570\u636e\uff09\u90a3 Tj \u5728\u83b7\u5f97\u9501\u7684\u65f6\u5019 Ti \u5df2\u7ecf\u653e\u9501\u4e86\uff0c\u5f97\u8bc1\u3002 Proof by Induction \u53ea\u9700\u8bc1\u660e: Lock point \u6700\u5c0f\u7684\u4e8b\u52a1\uff0c\u53ef\u4ee5\u65e0\u969c\u788d\u5730\u4ea4\u6362\u5230\u8c03\u5ea6\u6700\u524d\u3002 \u5047\u5982\u6709\u4e8b\u52a1\u62e6\u4f4f\u4ed6\u4e86\uff0c\u8bc1\u660e\u8fd9\u662f\u4e0d\u53ef\u80fd\u53d1\u751f\u7684\u3002\uff08\u4e0e lockpoint \u6700\u5c0f\u77db\u76fe\uff09 Lock Conversions \u00b6 \u901a\u5e38\u662f\u5148\u8bfb\u540e\u4fee\u6539\u3002\u4f46\u6211\u4eec\u4e0d\u80fd\u5148\u5f97 S \u9501\u518d\u91ca\u653e\u540e\u5f97 X \u9501\uff08\u8fdd\u80cc\u4e86\u4e24\u9636\u6bb5\u534f\u8bae\uff09\uff0c\u4e5f\u4e0d\u80fd\u76f4\u63a5\u7528 X \u9501\uff08\u964d\u4f4e\u5e76\u53d1\u5ea6\uff09\u3002 Two-phase locking with lock conversions: First Phase: can acquire a lock-S or lock-X on a data item can convert a lock-S to a lock-X ( lock-upgrade ) Second Phase: can release a lock-S or lock-X can convert a lock-X to a lock-S ( lock-downgrade ) This protocol assures serializability. \u7533\u8bf7\u54ea\u4e2a\u9501\u662f\u7531\u6570\u636e\u5e93\u5185\u90e8\u7ba1\u7406\u51b3\u5b9a\uff0c\u4e0d\u662f\u7531\u7a0b\u5e8f\u5458\u663e\u793a\u8c03\u7528\u3002\uff08\u81ea\u52a8\u52a0\u9501\uff09 \u5982\u679c\u5df2\u7ecf\u6709\u9501\u4e86\uff0c\u76f4\u63a5\u8bfb\uff1b\u5426\u5219\u7533\u8bf7\u8bfb\u9501\u3002 Implementation of Locking \u00b6 A lock manager can be implemented as a separate process to which transactions send lock and unlock requests. Lock Table \u00b6 Lock table records granted locks and waiting requests. \u6bcf\u4e2a\u8bb0\u5f55\u7684 id \u53ef\u4ee5\u653e\u8fdb\u54c8\u5e0c\u8868\u3002 \u5982\u8fd9\u91cc\u8bb0\u5f55 123, T1\u3001T8 \u83b7\u5f97\u4e86 S \u9501\uff0c\u4f46 T2 \u5728\u7b49\u5f85\u83b7\u5f97 X \u9501\u3002 T1: lock-X(D) \u901a\u8fc7 D \u7684 id \u627e\u5230\u54c8\u5e0c\u8868\u4e0a\u7684\u9879\uff0c\u5728\u5bf9\u5e94\u9879\u4e0a\u589e\u52a0\u3002\u6839\u636e\u662f\u5426\u76f8\u5bb9\u51b3\u5b9a\u662f\u83b7\u5f97\u9501\u8fd8\u662f\u7b49\u5f85\u3002 unlock \u7c7b\u4f3c\uff0c\u5148\u627e\u5230\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u62ff\u6389\u5bf9\u5e94\u7684\u9879\u3002\u540c\u65f6\u770b\u540e\u7eed\u7684\u9879\u662f\u5426\u53ef\u4ee5\u83b7\u5f97\u9501\u3002 \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1 commit, \u9700\u8981\u653e\u6389\u6240\u6709\u7684\u9501\uff0c\u6211\u4eec\u9700\u8981\u53bb\u627e\u3002\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u4e8b\u52a1\u7684\u8868\uff0c\u6807\u660e\u6bcf\u4e2a\u4e8b\u52a1\u6240\u7528\u7684\u9501\u3002 Deadlock Handling \u00b6 System is deadlocked if there is a set of transactions such that every transaction in the set is waiting for another transaction in the set. Two-phase locking does not ensure freedom from deadlocks. Deadlock prevention protocols ensure that the system will never enter into a deadlock state. Some prevention strategies: Require that each transaction locks all its data items before it begins execution (predeclaration). \u6267\u884c\u524d\u4e00\u6b21\u6027\u83b7\u5f97\u6240\u6709\u9501\u3002 Impose partial ordering of all data items and require that a transaction can lock data items only in the order specified by the partial order (graph-based protocol). \u5bf9\u6570\u636e\u8bbf\u95ee\u89c4\u5b9a\u4e00\u79cd\u6b21\u5e8f\u3002\u6bd4\u5982\u89c4\u5b9a\u5fc5\u987b\u5148\u62ff\u5496\u5561\u518d\u62ff\u5496\u5561\u4f34\u4fa3\u3002 e.g. T1: A-50, B+50. T2: B-10, A+10. \u6211\u4eec\u53ef\u4ee5\u628a\u7b2c\u4e8c\u4e2a\u4e8b\u52a1\u8c03\u6362\u987a\u5e8f\uff0c\u53d8\u4e3a A+10, B-10. \u8fd9\u6837\u6309\u7167 partial order \u80fd\u964d\u4f4e\u6b7b\u9501\u6982\u7387\u3002 Timeout-Based Schemes : a transaction waits for a lock only for a specified amount of time . After that, the wait times out and the transaction is rolled back. \u7b49\u5f85\u4e00\u4f1a\uff0c\u5982\u679c\u8fd8\u662f\u7b49\u4e0d\u5230\u5c31\u653e\u5f03\u3002 thus deadlocks are not possible. simple to implement; but starvation is possible. Also difficult to determine good value of the timeout interval. \u65f6\u957f\u4e0d\u597d\u89c4\u5b9a\u3002\u4f46\u53ef\u80fd\u6709\u4e8b\u52a1\u8001\u662f\u7533\u8bf7\u4e0d\u5230\u81ea\u5df1\u7684\u9501\u3002 Deadlock Detection \u00b6 \u5b9a\u671f\u68c0\u67e5\u6570\u636e\u5e93\u5185\u662f\u5426\u6709\u6b7b\u9501\uff0c\u5982\u679c\u6709\u5c31\u9009\u62e9\u4e00\u4e2a\u4e8b\u52a1\u5c06\u5176\u56de\u6eda\u3002 wait-for graph \u8fd9\u91cc\u7684\u7bad\u5934\u8868\u793a\u5728\u7b49\u5f85\u9501\u3002\u5982 T17->T18 \u8868\u793a T17 \u5728\u7b49\u5f85 T18 \u7684\u9501\u3002 \u5982\u679c\u5f62\u6210\u4e86\u73af\uff0c\u5c31\u8bf4\u660e\u51fa\u73b0\u4e86\u6b7b\u9501\u3002 \u901a\u8fc7\u521a\u521a\u7684 Lock Table, \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7b49\u5f85\u5173\u7cfb\u3002\uff08\u540e\u9762\u7684 waited \u7b49\u5f85\u524d\u9762\u7684 granted\uff09 When deadlock is detected : Some transaction will have to rolled back (made a victim ) to break deadlock. Select that transaction as victim that will incur minimum cost. Rollback -- determine how far to roll back transaction Total rollback: Abort the transaction and then restart it. More effective to roll back transaction only as far as necessary to break deadlock. Starvation happens if same transaction is always chosen as victim. Include the number of rollbacks in the cost factor to avoid starvation Example T1 \u7b49 T2, T2 \u7b49 T6, T6 \u7b49 T1.(\u6ce8\u610f\u8fd9\u91cc T5 \u662f\u7b49\u5f85 T6 \u800c\u4e0d\u662f T2) Graph-Based Protocols \u00b6 \u5047\u8bbe\u6211\u4eec\u77e5\u9053\u6570\u636e\u662f\u6309\u504f\u5e8f\u8bbf\u95ee\u7684\uff0c\u53ef\u4ee5\u6709\u66f4\u9ad8\u7ea7\u7684\u534f\u8bae\u3002 \u6570\u636e\u6309\u7167\u67d0\u79cd\u504f\u5e8f\u5173\u7cfb\u8bbf\u95ee\u3002 The tree-protocol is a simple kind of graph protocol. Only exclusive locks are allowed. \u53ea\u6709\u8fd9\u79cd\u9501\u3002 The first lock by Ti may be on any data item. Subsequently, a data Q can be locked by Ti only if the parent of Q is currently locked by Ti. \u7b2c\u4e00\u4e2a\u9501\u53ef\u4ee5\u653e\u4efb\u610f\u5730\u65b9\uff0c\u540e\u9762\u7684\u9501\u53ea\u80fd\u5728\u7236\u8282\u70b9\u9501\u4f4f\u65f6\u624d\u80fd\u5f80\u4e0b\u9501\u3002 Data items may be unlocked at any time. A data item that has been locked and unlocked by Ti cannot subsequently be relocked by Ti \u653e\u4e86\u4e4b\u540e\u4e0d\u80fd\u518d\u52a0\u9501\u4e86\u3002 Example \u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u5148\u9501 D, \u968f\u540e\u9501 G, \u653e\u6389, \u9501 H, \u8fd9\u65f6 D \u5df2\u7ecf\u6ca1\u7528\u4e86\u53ef\u4ee5\u653e\u6389\u3002\u968f\u540e\u6211\u4eec\u9501 J, H \u4e5f\u5c31\u6ca1\u7528\u4e86\u4e5f\u53ef\u4ee5\u653e\u6389\u3002\u6700\u540e\u653e\u6389 J. The tree protocol ensures conflict serializability as well as freedom from deadlock. Advantages Unlocking may occur earlier in the tree-locking protocol than in the two-phase locking protocol. shorter waiting times, and increase in concurrency \u9501\u53ef\u4ee5\u66f4\u65e9\u91ca\u653e\uff0c\u4e0d\u7528\u7b49\u5f85\u7b2c\u4e8c\u9636\u6bb5\u3002\u7528\u5b8c\u5c31\u53ef\u4ee5\u653e\uff0c\u63d0\u9ad8\u4e86\u5e76\u53d1\u5ea6\u3002 protocol is deadlock-free no rollbacks are required Disadvantages Protocol does not guarantee recoverability or cascade freedom Need to introduce commit dependencies to ensure recoverability \u65e9\u653e\u9501\uff0c\u610f\u5473\u7740\u53ef\u80fd\u4f1a\u8bfb\u810f\u6570\u636e\uff0c\u4e0d\u53ef\u6062\u590d\u3002\u8fd9\u5c31\u5bf9 commit \u987a\u5e8f\u6709\u8981\u6c42\u3002 Transactions may have to lock more data items than needed. increased locking overhead, and additional waiting time \u6bd4\u5982\u521a\u521a\u7684\u56fe\u4e2d\uff0c\u6211\u4eec\u8bbf\u95ee G, J, \u9700\u8981\u4ece D \u5f00\u59cb\u8bbf\u95ee\u3002\u4f1a\u9501\u4e0a\u66f4\u591a\u6570\u636e\u3002 potential decrease in concurrency Multiple Granularity \u00b6 \u53ef\u4ee5\u9501\u5728\u8bb0\u5f55\u4e0a(\u5982 update table set ...; )\uff0c\u4e5f\u53ef\u4ee5\u9501\u5728\u6574\u4e2a\u8868\u4e0a(\u5982 select * from table; )\u3002 Granularity of locking (level in tree where locking is done): fine granularity\uff08\u7ec6\u7c92\u5ea6\uff09 (lower in tree): high concurrency, high locking overhead coarse granularity\uff08\u7c97\u7c92\u5ea6\uff09 (higher in tree): low locking overhead, low concurrency Example of Granularity Hierarchy The levels, starting from the coarsest (top) level are database area File(table) record Intention Lock Modes \u00b6 \u8bb0\u5f55\u548c\u8868\u4e0a\u90fd\u53ef\u4ee5\u52a0 S/X \u9501\u3002\u4f46\u662f\u5f53\u4e8b\u52a1\u6d89\u53ca\u5230\u591a\u4e2a\u7c92\u5ea6\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u51b2\u7a81\uff0c\u5982\u4e00\u4e2a\u8868\u7684 S \u9501\u548c\u4e00\u4e2a\u8bb0\u5f55\u7684 X \u9501\u662f\u51b2\u7a81\u7684\u3002 \u6211\u4eec\u5f15\u5165\u4e86\u5176\u4ed6\u9501\uff0c\u610f\u5411\u9501(IS, IX, SIX) \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8981\u7ed9\u4e00\u4e2a\u8bb0\u5f55\u52a0 S \u9501\uff0c\u90a3\u4e5f\u8981\u5728\u8868\u4e0a\u52a0 IS \u9501\u3002\uff08\u610f\u5411\u5171\u4eab\u9501\uff09 \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8981\u7ed9\u4e00\u4e2a\u8bb0\u5f55\u52a0 X \u9501\uff0c\u90a3\u4e5f\u8981\u5728\u8868\u4e0a\u52a0 IX \u9501\u3002\uff08\u610f\u5411\u6392\u4ed6\u9501\uff09 SIX \u9501\u662f S \u548c IX \u9501\u7684\u7ed3\u5408\u3002\u8981\u8bfb\u6574\u4e2a\u8868\uff0c\u4f46\u53ef\u80fd\u5bf9\u5176\u4e2d\u67d0\u4e9b\u8bb0\u5f55\u8fdb\u884c\u4fee\u6539\u3002\uff08\u5171\u4eab\u610f\u5411\u6392\u4ed6\uff09 \u8fd9\u6837\u5f53\u6211\u4eec\u60f3\u5411\u4e00\u4e2a\u8868\u4e0a S \u9501\u65f6\uff0c\u53d1\u73b0\u8868\u4e0a\u6709 IX \u9501\uff0c\u8fd9\u6837\u6211\u4eec\u5f88\u5feb\u5c31\u53d1\u73b0\u4e86\u51b2\u7a81\uff0c\u9700\u8981\u7b49\u5f85\u3002 IS \u548c IX \u662f\u4e0d\u51b2\u7a81\u7684\u3002\u5728\u8868\u4e0a\u662f\u4e0d\u51b2\u7a81\u7684\uff0c\u53ef\u80fd\u5728\u8bb0\u5f55\u4e0a\u51b2\u7a81\uff08\u5373\u5bf9\u4e00\u4e2a\u8bb0\u5f55\u53c8\u8bfb\u53c8\u5199\uff0c\u51b2\u7a81\u53d1\u751f\u5728\u8bb0\u5f55\u5c42\u9762\u800c\u975e\u8868\uff09\u3002 intention-shared (IS) : indicates explicit locking at a lower level of the tree but only with shared locks. \u5728\u4e0b\u9762\u4f1a\u52a0 S \u9501\u3002 intention-exclusive (IX) : indicates explicit locking at a lower level with exclusive or shared locks \u5728\u4e0b\u9762\u4f1a\u52a0 X \u9501\u3002 shared and intention-exclusive (SIX) : the subtree rooted by that node is locked explicitly in shared mode and explicit locking is being done at a lower level with exclusive-mode locks. \u8981\u7b26\u5408\u76f8\u5bb9\u77e9\u9635\u3002\u4ece\u6700\u7c97\u7684\u7c92\u5ea6\u5f00\u59cb\u8bbf\u95ee\u3002\u8981\u52a0\u9501\u7684\u65f6\u5019\u6ce8\u610f\uff0c\u5bf9\u7236\u4eb2\u7684\u9501\u6709\u8981\u6c42\u3002 Example \u52a0\u9501\u662f\u4ece\u4e0a\u5f80\u4e0b\uff0c\u653e\u9501\u662f\u4ece\u4e0b\u5f80\u4e0a\u3002 \u5148\u5bf9 DB \u52a0 IX, \u5bf9 A1 \u52a0 IX, \u5bf9 Fa \u52a0 SIX, \u5bf9\u67d0\u4e9b\u8bb0\u5f55\u52a0 X. \u5176\u4ed6\u8bb0\u5f55\u5c31\u4e0d\u7528\u518d\u52a0 S \u9501\u4e86(\u56e0\u4e3a\u8868\u662f SIX). Insert and Delete Operations \u00b6 \u6570\u636e\u5e93\u91cc\u9664\u4e86 R/W \u8fd8\u6709\u63d2\u5165\u3001\u5220\u9664\u7b49\u64cd\u4f5c\u3002 \u9700\u8981\u5b9a\u4e49 R/W \u548c\u63d2\u5165/\u5220\u9664\u662f\u5426\u51b2\u7a81\u3002 If two-phase locking is used : A delete operation may be performed only if the transaction deleting the tuple has an exclusive lock on the tuple to be deleted. \u5220\u9664\u524d\u9700\u8981\u52a0 X \u9501\u3002 A transaction that inserts a new tuple into the database is given an X-mode lock on the tuple \u63d2\u5165\u4e4b\u524d\u662f\u6ca1\u6709\u8fd9\u4e2a\u6570\u636e\u7684\uff0c\u65e0\u6cd5\u5148\u52a0\u9501\u3002\u5e94\u8be5\u63d2\u5165\u4e4b\u540e\u9a6c\u4e0a\u52a0\u4e0a X \u9501\u3002 Insertions and deletions can lead to the phantom phenomenon . \u56e0\u6b64\u53ea\u662f\u52a0\u9501\u4e0d\u80fd\u4fdd\u8bc1\u4e32\u884c\u5316\u3002 Index Locking Protocol \u00b6 \u5176\u5b9e\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\u9690\u542b\u5730\u4fee\u6539\u4e86\u4fe1\u606f\uff0c\u53ea\u662f\u6ca1\u6709\u88ab\u8868\u793a\u51fa\u6765\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e2a\u4fe1\u606f\u663e\u793a\u5316\uff0c\u52a0\u9501\u3002 \u5982\u679c\u8868\u4e0a\u6709\u7d22\u5f15\uff0c\u6211\u4eec\u5728\u626b\u63cf\u7d22\u5f15\u7684\u65f6\u5019\u4f1a\u5728\u53f6\u5b50\u4fee\u6539\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u8fdb\u884c\u68c0\u6d4b\u3002 Index Locking on a B+ -Tree \u5148\u5728\u53f6\u5b50\u9875\u52a0\u9501\uff0c\u518d\u5728\u8bb0\u5f55\u4e0a\u52a0\u9501\u3002 \u5982\u679c\u6211\u4eec\u8981\u63d2\u5165\uff0c\u6bd4\u5982 18. \u8fd9\u65f6\u63d2\u5165\u5230\u4e86 10 \u8fd9\u9875\uff0c\u53d1\u73b0\u8fd9\u9875\u88ab\u9501\u4f4f\u4e86\uff0c\u65e0\u6cd5\u63d2\u5165\uff0c\u8fd9\u6837\u5c31\u786e\u4fdd\u4e86\u8fd9\u4e2a\u8303\u56f4\u5185\u65e0\u6cd5\u88ab\u63d2\u5165\uff0c\u4e0d\u4f1a\u6709\u5e7d\u7075\u95ee\u9898\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u8c13\u8bcd\u9501\u3002\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u9501\u4e0a\uff08\u6bd4\u5982\u521a\u521a 11 \u5230 50 \u8fd9\u4e2a\u533a\u95f4\uff09\uff0c\u540e\u7eed\u5982\u679c\u8981\u63d2\u5165 18 \u843d\u5165\u8fd9\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u5c31\u80fd\u68c0\u67e5\u51fa\u6765\u3002\u4f46\u8fd9\u6837\u5b9e\u73b0\u662f\u6bd4\u8f83\u590d\u6742\u7684\u3002 Next-Key Locking To Prevent Phantoms \u00b6 \u521a\u521a\u7684\u4f8b\u5b50\u4e2d, 10 \u4e0d\u5728\u8303\u56f4\u5185\uff0c\u4f46\u6211\u4eec\u628a\u8fd9\u9875\u90fd\u9501\u4f4f\u4e86\uff0c\u4ecd\u7136\u63d2\u4e0d\u8fdb\u53bb\uff0c\u5f71\u54cd\u4e86\u5e76\u53d1\u5ea6\u3002 Next-key locking protocol: provides higher concurrency Lock all values that satisfy index lookup (match lookup value, or fall in lookup range) Also lock next key value in index even for inserts/deletes Lock mode: S for lookups, X for insert/delete/update Next-Key Locking \u67e5\u8be2 7 \u5230 16, \u6211\u4eec\u628a\u7d22\u5f15\u9879\u9501\u8d77\u6765\uff0c\u628a\u4e0b\u4e00\u4e2a\u7d22\u5f15\u503c 18 \u4e5f\u9501\u8d77\u6765\u3002\u63d2\u5165\u7684\u65f6\u5019\u8981\u7533\u8bf7\u8fd9\u4e2a\u9501\u548c\u6bd4\u63d2\u5165\u503c\u5927\u7684\u4e0b\u4e00\u4e2a\u503c\u7684\u9501\uff0c\u8fd9\u91cc\u63d2\u5165 15 \u65f6\u5c31\u8981\u7533\u8bf7 15 \u548c 18 \u7684\u9501\uff0c\u51b2\u7a81\u65e0\u6cd5\u63d2\u5165\u3002\u63d2\u5165 7 \u540c\u7406\u3002","title":"\u5e76\u53d1\u63a7\u5236"},{"location":"DB/db14/#concurrency-control","text":"Abstract Lock-Based Protocols\uff08\u57fa\u4e8e\u9501\u7684\u534f\u8bae\uff09 Deadlock Handling \uff08\u6b7b\u9501\u5904\u7406\uff09 Multiple Granularity \uff08\u591a\u7c92\u5ea6\uff09 Insert and Delete Operations Multiversion Schemes \uff08\u591a\u7248\u672c\u673a\u5236\uff09 Timestamp-Based Protocols \uff08\u57fa\u4e8e\u65f6\u95f4\u6233\u7684\u534f\u8bae\uff09 Validation-Based Protocols \uff08\u57fa\u4e8e\u6709\u6548\u6027\u7684\u534f\u8bae\uff09","title":"Concurrency Control"},{"location":"DB/db14/#lock-based-protocols","text":"A lock is a mechanism to control concurrent access to a data item exclusive(X) Data item can be both read as well as written. X-lock is requested using lock-X instruction. shared(X) Data item can only be read. S-lock is requested using lock-S instruction. \u8981\u5199\u4e00\u4e2a\u6570\u636e\uff0c\u5148\u7533\u8bf7\u83b7\u5f97 X \u9501\uff1b\u8981\u8bfb\u4e00\u4e2a\u6570\u636e\uff0c\u5148\u7533\u8bf7\u83b7\u5f97 S \u9501\u3002 \u8bbf\u95ee\u7ed3\u675f\u540e\u91ca\u653e\u8fd9\u4e2a\u9501\u3002 \u8bbf\u95ee\u6570\u636e\u4e4b\u524d\u5fc5\u987b\u83b7\u5f97\u5bf9\u5e94\u7684\u9501\uff0c\u5426\u5219\u9700\u8981\u7b49\u5f85\u3002","title":"Lock-Based Protocols"},{"location":"DB/db14/#the-two-phase-locking-protocol","text":"\u4e8b\u52a1\u7684\u52a0\u9501\u548c\u51cf\u9501\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\u3002 Phase 1: Growing Phase (\u589e\u957f\u9636\u6bb5) transaction may obtain locks transaction may not release locks Phase 2: Shrinking Phase(\u7f29\u51cf\u9636\u6bb5) transaction may release locks transaction may not obtain locks \u4e00\u4e2a\u4e8b\u52a1\u4e00\u65e6\u5f00\u59cb\u91ca\u653e\u9501\uff0c\u5c31\u4e0d\u80fd\u518d\u52a0\u9501\u4e86\u3002 \u4e8b\u52a1\u4e24\u4e2a\u9636\u6bb5\u7684\u5206\u754c\u7ebf(lock point), \u5373\u83b7\u5f97\u4e86\u6700\u540e\u4e00\u4e2a\u9501\uff08\u5b8c\u6210\u83b7\u5f97\u8fd9\u4e2a\u52a8\u4f5c\uff09\u7684\u65f6\u95f4\u70b9\u3002 \u8fd9\u6837\u6bcf\u4e2a\u4e8b\u52a1\u90fd\u6709\u4e00\u4e2a lock point, \u6309\u7167\u8fd9\u4e2a\u65f6\u95f4\u6392\u5e8f\u5373\u53ef\u5f97\u5230\u4e32\u884c\u5316\u7684\u6267\u884c\u987a\u5e8f\u3002 Example Two-Phase Locking Protocol assures serializability. It can be proved that the transactions can be serialized in the order of their lock points. \u53ef\u4ee5\u6309 lock points \u4e32\u884c\u5316\uff0c\u4f46\u4e0d\u662f\u53ea\u80fd\u6309\u7167\u8fd9\u4e48\u4e32\u884c\u5316\u3002 \u4e0a\u9762\u57fa\u672c\u7684\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u65e0\u6cd5\u4fdd\u8bc1\u4e8b\u52a1\u7684\u53ef\u6062\u590d\u6027\u3002 Extensions to basic two-phase locking\uff08\u57fa\u672c\u4e24\u9636\u6bb5\u5c01\u9501\uff09 needed to ensure recoverability of freedom from cascading roll-back Strict two-phase locking\uff08\u4e25\u683c\u4e24\u9636\u6bb5\u5c01\u9501\uff09 : a transaction must hold all its exclusive locks till it commits/aborts. Ensures recoverability and avoids cascading roll-backs. S \u9501\u53ef\u4ee5\u7528\u5b8c\u5c31\u653e\uff0c\u4f46 X \u9501\u5fc5\u987b\u5230\u63d0\u4ea4\u7684\u65f6\u5019\u624d\u80fd\u91ca\u653e\uff08\u8fd9\u6837\u522b\u4eba\u5c31\u4e0d\u80fd\u8bbf\u95ee\u4e86\uff0c\u65e0\u6cd5\u8bfb\u810f\u6570\u636e\uff09\u3002\u4ee3\u4ef7\u662f\u964d\u4f4e\u5e76\u53d1\u5ea6\u3002 Rigorous two-phase locking\uff08\u5f3a\u4e24\u9636\u6bb5\u5c01\u9501\uff09 : a transaction must hold all locks till commit/abort. Transactions can be serialized in the order in which they commit. Two-phase locking is not a necessary condition for serializability. Example \u8fd9\u91cc\u653e\u9501\u4e86\u4e4b\u540e\u8fd8\u83b7\u5f97\u9501\u4e86\uff0c\u8fdd\u80cc\u4e86\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u3002 \u6240\u4ee5\u4e0d\u9075\u4ece\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\uff0c\u4e5f\u53ef\u4ee5\u83b7\u5f97\u51b2\u7a81\u53ef\u4e32\u884c\u7684\u8c03\u5ea6\u3002","title":"The Two-Phase Locking Protocol"},{"location":"DB/db14/#2pl-proof","text":"Proof by Contradiction \u5982\u679c\u6709 Ti->Tj \u7684\u6709\u5411\u8fb9\uff0c\u90a3 Ti \u7684 lockpoint \u4e00\u5b9a\u5c0f\u4e8e Tj. Ti->Tj \u80af\u5b9a\u6709\u4e00\u4e2a\u51b2\u7a81\u7684\u8bbf\u95ee\uff08\u5bf9\u540c\u4e00\u4e2a\u6570\u636e\uff09\u90a3 Tj \u5728\u83b7\u5f97\u9501\u7684\u65f6\u5019 Ti \u5df2\u7ecf\u653e\u9501\u4e86\uff0c\u5f97\u8bc1\u3002 Proof by Induction \u53ea\u9700\u8bc1\u660e: Lock point \u6700\u5c0f\u7684\u4e8b\u52a1\uff0c\u53ef\u4ee5\u65e0\u969c\u788d\u5730\u4ea4\u6362\u5230\u8c03\u5ea6\u6700\u524d\u3002 \u5047\u5982\u6709\u4e8b\u52a1\u62e6\u4f4f\u4ed6\u4e86\uff0c\u8bc1\u660e\u8fd9\u662f\u4e0d\u53ef\u80fd\u53d1\u751f\u7684\u3002\uff08\u4e0e lockpoint \u6700\u5c0f\u77db\u76fe\uff09","title":"2PL - Proof"},{"location":"DB/db14/#lock-conversions","text":"\u901a\u5e38\u662f\u5148\u8bfb\u540e\u4fee\u6539\u3002\u4f46\u6211\u4eec\u4e0d\u80fd\u5148\u5f97 S \u9501\u518d\u91ca\u653e\u540e\u5f97 X \u9501\uff08\u8fdd\u80cc\u4e86\u4e24\u9636\u6bb5\u534f\u8bae\uff09\uff0c\u4e5f\u4e0d\u80fd\u76f4\u63a5\u7528 X \u9501\uff08\u964d\u4f4e\u5e76\u53d1\u5ea6\uff09\u3002 Two-phase locking with lock conversions: First Phase: can acquire a lock-S or lock-X on a data item can convert a lock-S to a lock-X ( lock-upgrade ) Second Phase: can release a lock-S or lock-X can convert a lock-X to a lock-S ( lock-downgrade ) This protocol assures serializability. \u7533\u8bf7\u54ea\u4e2a\u9501\u662f\u7531\u6570\u636e\u5e93\u5185\u90e8\u7ba1\u7406\u51b3\u5b9a\uff0c\u4e0d\u662f\u7531\u7a0b\u5e8f\u5458\u663e\u793a\u8c03\u7528\u3002\uff08\u81ea\u52a8\u52a0\u9501\uff09 \u5982\u679c\u5df2\u7ecf\u6709\u9501\u4e86\uff0c\u76f4\u63a5\u8bfb\uff1b\u5426\u5219\u7533\u8bf7\u8bfb\u9501\u3002","title":"Lock Conversions"},{"location":"DB/db14/#implementation-of-locking","text":"A lock manager can be implemented as a separate process to which transactions send lock and unlock requests.","title":"Implementation of Locking"},{"location":"DB/db14/#lock-table","text":"Lock table records granted locks and waiting requests. \u6bcf\u4e2a\u8bb0\u5f55\u7684 id \u53ef\u4ee5\u653e\u8fdb\u54c8\u5e0c\u8868\u3002 \u5982\u8fd9\u91cc\u8bb0\u5f55 123, T1\u3001T8 \u83b7\u5f97\u4e86 S \u9501\uff0c\u4f46 T2 \u5728\u7b49\u5f85\u83b7\u5f97 X \u9501\u3002 T1: lock-X(D) \u901a\u8fc7 D \u7684 id \u627e\u5230\u54c8\u5e0c\u8868\u4e0a\u7684\u9879\uff0c\u5728\u5bf9\u5e94\u9879\u4e0a\u589e\u52a0\u3002\u6839\u636e\u662f\u5426\u76f8\u5bb9\u51b3\u5b9a\u662f\u83b7\u5f97\u9501\u8fd8\u662f\u7b49\u5f85\u3002 unlock \u7c7b\u4f3c\uff0c\u5148\u627e\u5230\u5bf9\u5e94\u7684\u6570\u636e\uff0c\u62ff\u6389\u5bf9\u5e94\u7684\u9879\u3002\u540c\u65f6\u770b\u540e\u7eed\u7684\u9879\u662f\u5426\u53ef\u4ee5\u83b7\u5f97\u9501\u3002 \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1 commit, \u9700\u8981\u653e\u6389\u6240\u6709\u7684\u9501\uff0c\u6211\u4eec\u9700\u8981\u53bb\u627e\u3002\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u4e8b\u52a1\u7684\u8868\uff0c\u6807\u660e\u6bcf\u4e2a\u4e8b\u52a1\u6240\u7528\u7684\u9501\u3002","title":"Lock Table"},{"location":"DB/db14/#deadlock-handling","text":"System is deadlocked if there is a set of transactions such that every transaction in the set is waiting for another transaction in the set. Two-phase locking does not ensure freedom from deadlocks. Deadlock prevention protocols ensure that the system will never enter into a deadlock state. Some prevention strategies: Require that each transaction locks all its data items before it begins execution (predeclaration). \u6267\u884c\u524d\u4e00\u6b21\u6027\u83b7\u5f97\u6240\u6709\u9501\u3002 Impose partial ordering of all data items and require that a transaction can lock data items only in the order specified by the partial order (graph-based protocol). \u5bf9\u6570\u636e\u8bbf\u95ee\u89c4\u5b9a\u4e00\u79cd\u6b21\u5e8f\u3002\u6bd4\u5982\u89c4\u5b9a\u5fc5\u987b\u5148\u62ff\u5496\u5561\u518d\u62ff\u5496\u5561\u4f34\u4fa3\u3002 e.g. T1: A-50, B+50. T2: B-10, A+10. \u6211\u4eec\u53ef\u4ee5\u628a\u7b2c\u4e8c\u4e2a\u4e8b\u52a1\u8c03\u6362\u987a\u5e8f\uff0c\u53d8\u4e3a A+10, B-10. \u8fd9\u6837\u6309\u7167 partial order \u80fd\u964d\u4f4e\u6b7b\u9501\u6982\u7387\u3002 Timeout-Based Schemes : a transaction waits for a lock only for a specified amount of time . After that, the wait times out and the transaction is rolled back. \u7b49\u5f85\u4e00\u4f1a\uff0c\u5982\u679c\u8fd8\u662f\u7b49\u4e0d\u5230\u5c31\u653e\u5f03\u3002 thus deadlocks are not possible. simple to implement; but starvation is possible. Also difficult to determine good value of the timeout interval. \u65f6\u957f\u4e0d\u597d\u89c4\u5b9a\u3002\u4f46\u53ef\u80fd\u6709\u4e8b\u52a1\u8001\u662f\u7533\u8bf7\u4e0d\u5230\u81ea\u5df1\u7684\u9501\u3002","title":"Deadlock Handling"},{"location":"DB/db14/#deadlock-detection","text":"\u5b9a\u671f\u68c0\u67e5\u6570\u636e\u5e93\u5185\u662f\u5426\u6709\u6b7b\u9501\uff0c\u5982\u679c\u6709\u5c31\u9009\u62e9\u4e00\u4e2a\u4e8b\u52a1\u5c06\u5176\u56de\u6eda\u3002 wait-for graph \u8fd9\u91cc\u7684\u7bad\u5934\u8868\u793a\u5728\u7b49\u5f85\u9501\u3002\u5982 T17->T18 \u8868\u793a T17 \u5728\u7b49\u5f85 T18 \u7684\u9501\u3002 \u5982\u679c\u5f62\u6210\u4e86\u73af\uff0c\u5c31\u8bf4\u660e\u51fa\u73b0\u4e86\u6b7b\u9501\u3002 \u901a\u8fc7\u521a\u521a\u7684 Lock Table, \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7b49\u5f85\u5173\u7cfb\u3002\uff08\u540e\u9762\u7684 waited \u7b49\u5f85\u524d\u9762\u7684 granted\uff09 When deadlock is detected : Some transaction will have to rolled back (made a victim ) to break deadlock. Select that transaction as victim that will incur minimum cost. Rollback -- determine how far to roll back transaction Total rollback: Abort the transaction and then restart it. More effective to roll back transaction only as far as necessary to break deadlock. Starvation happens if same transaction is always chosen as victim. Include the number of rollbacks in the cost factor to avoid starvation Example T1 \u7b49 T2, T2 \u7b49 T6, T6 \u7b49 T1.(\u6ce8\u610f\u8fd9\u91cc T5 \u662f\u7b49\u5f85 T6 \u800c\u4e0d\u662f T2)","title":"Deadlock Detection"},{"location":"DB/db14/#graph-based-protocols","text":"\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u6570\u636e\u662f\u6309\u504f\u5e8f\u8bbf\u95ee\u7684\uff0c\u53ef\u4ee5\u6709\u66f4\u9ad8\u7ea7\u7684\u534f\u8bae\u3002 \u6570\u636e\u6309\u7167\u67d0\u79cd\u504f\u5e8f\u5173\u7cfb\u8bbf\u95ee\u3002 The tree-protocol is a simple kind of graph protocol. Only exclusive locks are allowed. \u53ea\u6709\u8fd9\u79cd\u9501\u3002 The first lock by Ti may be on any data item. Subsequently, a data Q can be locked by Ti only if the parent of Q is currently locked by Ti. \u7b2c\u4e00\u4e2a\u9501\u53ef\u4ee5\u653e\u4efb\u610f\u5730\u65b9\uff0c\u540e\u9762\u7684\u9501\u53ea\u80fd\u5728\u7236\u8282\u70b9\u9501\u4f4f\u65f6\u624d\u80fd\u5f80\u4e0b\u9501\u3002 Data items may be unlocked at any time. A data item that has been locked and unlocked by Ti cannot subsequently be relocked by Ti \u653e\u4e86\u4e4b\u540e\u4e0d\u80fd\u518d\u52a0\u9501\u4e86\u3002 Example \u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u5148\u9501 D, \u968f\u540e\u9501 G, \u653e\u6389, \u9501 H, \u8fd9\u65f6 D \u5df2\u7ecf\u6ca1\u7528\u4e86\u53ef\u4ee5\u653e\u6389\u3002\u968f\u540e\u6211\u4eec\u9501 J, H \u4e5f\u5c31\u6ca1\u7528\u4e86\u4e5f\u53ef\u4ee5\u653e\u6389\u3002\u6700\u540e\u653e\u6389 J. The tree protocol ensures conflict serializability as well as freedom from deadlock. Advantages Unlocking may occur earlier in the tree-locking protocol than in the two-phase locking protocol. shorter waiting times, and increase in concurrency \u9501\u53ef\u4ee5\u66f4\u65e9\u91ca\u653e\uff0c\u4e0d\u7528\u7b49\u5f85\u7b2c\u4e8c\u9636\u6bb5\u3002\u7528\u5b8c\u5c31\u53ef\u4ee5\u653e\uff0c\u63d0\u9ad8\u4e86\u5e76\u53d1\u5ea6\u3002 protocol is deadlock-free no rollbacks are required Disadvantages Protocol does not guarantee recoverability or cascade freedom Need to introduce commit dependencies to ensure recoverability \u65e9\u653e\u9501\uff0c\u610f\u5473\u7740\u53ef\u80fd\u4f1a\u8bfb\u810f\u6570\u636e\uff0c\u4e0d\u53ef\u6062\u590d\u3002\u8fd9\u5c31\u5bf9 commit \u987a\u5e8f\u6709\u8981\u6c42\u3002 Transactions may have to lock more data items than needed. increased locking overhead, and additional waiting time \u6bd4\u5982\u521a\u521a\u7684\u56fe\u4e2d\uff0c\u6211\u4eec\u8bbf\u95ee G, J, \u9700\u8981\u4ece D \u5f00\u59cb\u8bbf\u95ee\u3002\u4f1a\u9501\u4e0a\u66f4\u591a\u6570\u636e\u3002 potential decrease in concurrency","title":"Graph-Based Protocols"},{"location":"DB/db14/#multiple-granularity","text":"\u53ef\u4ee5\u9501\u5728\u8bb0\u5f55\u4e0a(\u5982 update table set ...; )\uff0c\u4e5f\u53ef\u4ee5\u9501\u5728\u6574\u4e2a\u8868\u4e0a(\u5982 select * from table; )\u3002 Granularity of locking (level in tree where locking is done): fine granularity\uff08\u7ec6\u7c92\u5ea6\uff09 (lower in tree): high concurrency, high locking overhead coarse granularity\uff08\u7c97\u7c92\u5ea6\uff09 (higher in tree): low locking overhead, low concurrency Example of Granularity Hierarchy The levels, starting from the coarsest (top) level are database area File(table) record","title":"Multiple Granularity"},{"location":"DB/db14/#intention-lock-modes","text":"\u8bb0\u5f55\u548c\u8868\u4e0a\u90fd\u53ef\u4ee5\u52a0 S/X \u9501\u3002\u4f46\u662f\u5f53\u4e8b\u52a1\u6d89\u53ca\u5230\u591a\u4e2a\u7c92\u5ea6\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u51b2\u7a81\uff0c\u5982\u4e00\u4e2a\u8868\u7684 S \u9501\u548c\u4e00\u4e2a\u8bb0\u5f55\u7684 X \u9501\u662f\u51b2\u7a81\u7684\u3002 \u6211\u4eec\u5f15\u5165\u4e86\u5176\u4ed6\u9501\uff0c\u610f\u5411\u9501(IS, IX, SIX) \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8981\u7ed9\u4e00\u4e2a\u8bb0\u5f55\u52a0 S \u9501\uff0c\u90a3\u4e5f\u8981\u5728\u8868\u4e0a\u52a0 IS \u9501\u3002\uff08\u610f\u5411\u5171\u4eab\u9501\uff09 \u5982\u679c\u4e00\u4e2a\u4e8b\u52a1\u8981\u7ed9\u4e00\u4e2a\u8bb0\u5f55\u52a0 X \u9501\uff0c\u90a3\u4e5f\u8981\u5728\u8868\u4e0a\u52a0 IX \u9501\u3002\uff08\u610f\u5411\u6392\u4ed6\u9501\uff09 SIX \u9501\u662f S \u548c IX \u9501\u7684\u7ed3\u5408\u3002\u8981\u8bfb\u6574\u4e2a\u8868\uff0c\u4f46\u53ef\u80fd\u5bf9\u5176\u4e2d\u67d0\u4e9b\u8bb0\u5f55\u8fdb\u884c\u4fee\u6539\u3002\uff08\u5171\u4eab\u610f\u5411\u6392\u4ed6\uff09 \u8fd9\u6837\u5f53\u6211\u4eec\u60f3\u5411\u4e00\u4e2a\u8868\u4e0a S \u9501\u65f6\uff0c\u53d1\u73b0\u8868\u4e0a\u6709 IX \u9501\uff0c\u8fd9\u6837\u6211\u4eec\u5f88\u5feb\u5c31\u53d1\u73b0\u4e86\u51b2\u7a81\uff0c\u9700\u8981\u7b49\u5f85\u3002 IS \u548c IX \u662f\u4e0d\u51b2\u7a81\u7684\u3002\u5728\u8868\u4e0a\u662f\u4e0d\u51b2\u7a81\u7684\uff0c\u53ef\u80fd\u5728\u8bb0\u5f55\u4e0a\u51b2\u7a81\uff08\u5373\u5bf9\u4e00\u4e2a\u8bb0\u5f55\u53c8\u8bfb\u53c8\u5199\uff0c\u51b2\u7a81\u53d1\u751f\u5728\u8bb0\u5f55\u5c42\u9762\u800c\u975e\u8868\uff09\u3002 intention-shared (IS) : indicates explicit locking at a lower level of the tree but only with shared locks. \u5728\u4e0b\u9762\u4f1a\u52a0 S \u9501\u3002 intention-exclusive (IX) : indicates explicit locking at a lower level with exclusive or shared locks \u5728\u4e0b\u9762\u4f1a\u52a0 X \u9501\u3002 shared and intention-exclusive (SIX) : the subtree rooted by that node is locked explicitly in shared mode and explicit locking is being done at a lower level with exclusive-mode locks. \u8981\u7b26\u5408\u76f8\u5bb9\u77e9\u9635\u3002\u4ece\u6700\u7c97\u7684\u7c92\u5ea6\u5f00\u59cb\u8bbf\u95ee\u3002\u8981\u52a0\u9501\u7684\u65f6\u5019\u6ce8\u610f\uff0c\u5bf9\u7236\u4eb2\u7684\u9501\u6709\u8981\u6c42\u3002 Example \u52a0\u9501\u662f\u4ece\u4e0a\u5f80\u4e0b\uff0c\u653e\u9501\u662f\u4ece\u4e0b\u5f80\u4e0a\u3002 \u5148\u5bf9 DB \u52a0 IX, \u5bf9 A1 \u52a0 IX, \u5bf9 Fa \u52a0 SIX, \u5bf9\u67d0\u4e9b\u8bb0\u5f55\u52a0 X. \u5176\u4ed6\u8bb0\u5f55\u5c31\u4e0d\u7528\u518d\u52a0 S \u9501\u4e86(\u56e0\u4e3a\u8868\u662f SIX).","title":"Intention Lock Modes"},{"location":"DB/db14/#insert-and-delete-operations","text":"\u6570\u636e\u5e93\u91cc\u9664\u4e86 R/W \u8fd8\u6709\u63d2\u5165\u3001\u5220\u9664\u7b49\u64cd\u4f5c\u3002 \u9700\u8981\u5b9a\u4e49 R/W \u548c\u63d2\u5165/\u5220\u9664\u662f\u5426\u51b2\u7a81\u3002 If two-phase locking is used : A delete operation may be performed only if the transaction deleting the tuple has an exclusive lock on the tuple to be deleted. \u5220\u9664\u524d\u9700\u8981\u52a0 X \u9501\u3002 A transaction that inserts a new tuple into the database is given an X-mode lock on the tuple \u63d2\u5165\u4e4b\u524d\u662f\u6ca1\u6709\u8fd9\u4e2a\u6570\u636e\u7684\uff0c\u65e0\u6cd5\u5148\u52a0\u9501\u3002\u5e94\u8be5\u63d2\u5165\u4e4b\u540e\u9a6c\u4e0a\u52a0\u4e0a X \u9501\u3002 Insertions and deletions can lead to the phantom phenomenon . \u56e0\u6b64\u53ea\u662f\u52a0\u9501\u4e0d\u80fd\u4fdd\u8bc1\u4e32\u884c\u5316\u3002","title":"Insert and Delete Operations"},{"location":"DB/db14/#index-locking-protocol","text":"\u5176\u5b9e\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\u9690\u542b\u5730\u4fee\u6539\u4e86\u4fe1\u606f\uff0c\u53ea\u662f\u6ca1\u6709\u88ab\u8868\u793a\u51fa\u6765\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e2a\u4fe1\u606f\u663e\u793a\u5316\uff0c\u52a0\u9501\u3002 \u5982\u679c\u8868\u4e0a\u6709\u7d22\u5f15\uff0c\u6211\u4eec\u5728\u626b\u63cf\u7d22\u5f15\u7684\u65f6\u5019\u4f1a\u5728\u53f6\u5b50\u4fee\u6539\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u8fdb\u884c\u68c0\u6d4b\u3002 Index Locking on a B+ -Tree \u5148\u5728\u53f6\u5b50\u9875\u52a0\u9501\uff0c\u518d\u5728\u8bb0\u5f55\u4e0a\u52a0\u9501\u3002 \u5982\u679c\u6211\u4eec\u8981\u63d2\u5165\uff0c\u6bd4\u5982 18. \u8fd9\u65f6\u63d2\u5165\u5230\u4e86 10 \u8fd9\u9875\uff0c\u53d1\u73b0\u8fd9\u9875\u88ab\u9501\u4f4f\u4e86\uff0c\u65e0\u6cd5\u63d2\u5165\uff0c\u8fd9\u6837\u5c31\u786e\u4fdd\u4e86\u8fd9\u4e2a\u8303\u56f4\u5185\u65e0\u6cd5\u88ab\u63d2\u5165\uff0c\u4e0d\u4f1a\u6709\u5e7d\u7075\u95ee\u9898\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u8c13\u8bcd\u9501\u3002\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u9501\u4e0a\uff08\u6bd4\u5982\u521a\u521a 11 \u5230 50 \u8fd9\u4e2a\u533a\u95f4\uff09\uff0c\u540e\u7eed\u5982\u679c\u8981\u63d2\u5165 18 \u843d\u5165\u8fd9\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u5c31\u80fd\u68c0\u67e5\u51fa\u6765\u3002\u4f46\u8fd9\u6837\u5b9e\u73b0\u662f\u6bd4\u8f83\u590d\u6742\u7684\u3002","title":"Index Locking Protocol"},{"location":"DB/db14/#next-key-locking-to-prevent-phantoms","text":"\u521a\u521a\u7684\u4f8b\u5b50\u4e2d, 10 \u4e0d\u5728\u8303\u56f4\u5185\uff0c\u4f46\u6211\u4eec\u628a\u8fd9\u9875\u90fd\u9501\u4f4f\u4e86\uff0c\u4ecd\u7136\u63d2\u4e0d\u8fdb\u53bb\uff0c\u5f71\u54cd\u4e86\u5e76\u53d1\u5ea6\u3002 Next-key locking protocol: provides higher concurrency Lock all values that satisfy index lookup (match lookup value, or fall in lookup range) Also lock next key value in index even for inserts/deletes Lock mode: S for lookups, X for insert/delete/update Next-Key Locking \u67e5\u8be2 7 \u5230 16, \u6211\u4eec\u628a\u7d22\u5f15\u9879\u9501\u8d77\u6765\uff0c\u628a\u4e0b\u4e00\u4e2a\u7d22\u5f15\u503c 18 \u4e5f\u9501\u8d77\u6765\u3002\u63d2\u5165\u7684\u65f6\u5019\u8981\u7533\u8bf7\u8fd9\u4e2a\u9501\u548c\u6bd4\u63d2\u5165\u503c\u5927\u7684\u4e0b\u4e00\u4e2a\u503c\u7684\u9501\uff0c\u8fd9\u91cc\u63d2\u5165 15 \u65f6\u5c31\u8981\u7533\u8bf7 15 \u548c 18 \u7684\u9501\uff0c\u51b2\u7a81\u65e0\u6cd5\u63d2\u5165\u3002\u63d2\u5165 7 \u540c\u7406\u3002","title":"Next-Key Locking To Prevent Phantoms"},{"location":"DB/db15/","text":"Recovery System \u00b6 Failure Classification \u00b6 Database application \u903b\u8f91\u9519\u8bef\uff1a\u6bd4\u5982\u4e0d\u6ee1\u8db3\u6570\u636e\u5e93\u7ea6\u675f\u6761\u4ef6\uff08\u4e3b\u952e\uff09 \u7cfb\u7edf\u9519\u8bef\uff1a\u6b7b\u9501\u3002 \u5e38\u7528\u65b9\u6cd5\u662f\u64a4\u9500 undo, \u628a\u8fd9\u4e2a\u4e8b\u4ef6\u62b9\u6389\u3002\uff08\u57fa\u4e8e\u65e5\u5fd7\uff0c\u5728\u4ea7\u751f\u4fee\u6539\u4e4b\u524d\u5148\u8bb0\u65e5\u5fd7\uff0c\u6545\u969c\u540e\u53ef\u4ee5\u6839\u636e\u65e5\u5fd7\u8fdb\u884c\u64a4\u9500\uff09 \u8bb0\u65e5\u5fd7\u6bd4\u8f83\u5feb\uff08\u987a\u5e8f\u8bbf\u95ee\uff09 DBMS \u6389\u7535\u3001\u786c\u4ef6\u6545\u969c\u3001\u8f6f\u4ef6\u6545\u969c system crash \u662f\u5168\u5c40\u6027\u7684\uff0c\u6240\u6709\u8fd0\u884c\u7684\u7a0b\u5e8f\u90fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e00\u7c7b\u662f\u4e8b\u52a1\u5df2\u7ecf\u63d0\u4ea4\uff08\u4f46\u662f\u6570\u636e\u8fd8\u5728\u7f13\u51b2\u533a\uff09\uff0c\u53e6\u4e00\u7c7b\u662f\u6b63\u5728\u6267\u884c\u7684\u4e8b\u52a1\uff08\u8fd8\u6ca1\u6709\u63d0\u4ea4\uff09\u3002 \u5df2\u7ecf\u63d0\u4ea4\u7684\u4e8b\u52a1\u8981 redo(\u6570\u636e\u53ef\u80fd\u6ca1\u5199\u56de\u53bb), \u6ca1\u6709\u5b8c\u6210\u7684\u4e8b\u52a1\u8981 undo. \u5148\u8bb0\u65e5\u5fd7\uff0c\u73b0\u5728\u7684\u6570\u636e\u5e93\u91c7\u7528 repeating history \u7684\u65b9\u6cd5\u3002 Database \u4ecb\u8d28\u6545\u969c \u8981\u9632\u6b62\u4ecb\u8d28\u6545\u969c\uff0c\u9700\u8981\u505a\u5907\u4efd\uff08\u62f7\u8d1d\u6216\u8005\u8fdc\u7a0b\uff09 Storage Structure \u00b6 \u65e5\u5fd7\u53ef\u80fd\u4e5f\u4f1a\u51fa\u6545\u969c\uff1f\u6211\u4eec\u5047\u8bbe\u65e5\u5fd7\u5b58\u50a8\u5728 Stable storage \u91cc\u3002 Volatile storage Nonvolatile storage survives system crashes Stable storage: a mythical(\u865a\u62df\u7684) form of storage that survives all failures approximated by maintaining multiple copies on distinct nonvolatile media \u53ef\u4ee5\u8fd1\u4f3c\u5b9e\u73b0 Implementation \u00b6 Maintain multiple copies of each block on separate disks Failure during data transfer can still result in inconsistent copies \u4fee\u6539\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u53d1\u751f\u6545\u969c Protecting storage media from failure during data transfer Database Recovery \u00b6 Recovery algorithms are techniques to ensure database consistency and transaction atomicity and durability despite failures. Recovery algorithms have two parts Actions taken during normal transaction processing to ensure enough information exists to recover from failures \u5148\u8bb0\u65e5\u5fd7 Actions taken after a failure to recover the database contents to a state that ensures atomicity, consistency and durability \u7406\u60f3\u7684\u7b97\u6cd5\uff1a\u6062\u590d\u5f97\u5f88\u5feb\uff0c\u5bf9\u4e8b\u52a1\u6b63\u5e38\u64cd\u4f5c\u6ca1\u6709\u5f71\u54cd\uff08\u8bb0\u5f55\u4fe1\u606f\u7684\u65f6\u5019\u4e0d\u80fd\u6d88\u8017\u592a\u591a\u6027\u80fd\uff09\uff0c\u5373\u517c\u987e\u4e0a\u9762\u4e24\u4e2a\u90e8\u5206\u3002\u6062\u590d\u7684\u8fc7\u7a0b\u548c\u5e76\u884c\u63a7\u5236\u662f\u76f8\u5173\u7684\u3002 We assume that strict two-phase locking ensures no dirty read. \u4f7f\u7528\u4e25\u683c\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u4fdd\u8bc1\u6ca1\u6709\u810f\u6570\u636e\u3002 Idempotent(\u5e42\u7b49\u6027) : An recovery algorithm is said to be idempotent if executing it several times gives the same result as executing it once. \u7b97\u6cd5\u6062\u590d\u591a\u6b21\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\u3002\uff08\u6062\u590d\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4e5f\u53d1\u751f crash\uff09 Log-Based Recovery \u00b6 Log Records \u00b6 A log is kept on stable storage(\u7a33\u5b9a\u5b58\u50a8\u5668). The log is a sequence of log records , and maintains a record of update activities on the database. When transaction Ti starts, it registers itself by writing a \u201cstart\u201d log record: \\(<T_i\\ start>\\) \u4e8b\u52a1\u5f00\u59cb. Ti \u8868\u793a\u4e8b\u52a1\u7684 id. Before Ti executes write(X), writing \u201cupdate \u201d log record \\(<T_i, X, V_1, V_2>\\) \u4e8b\u52a1\u628a X \u6570\u636e\u9879\u7684\u503c\u4ece V1(old value) \u6539\u4e3a V2(new value). \u8fd9\u4e2a\u5c31\u662f\u6062\u590d\u7684\u57fa\u7840. undo \u5c31\u7528 old value, redo \u7528 new value. Insert \u5c31\u662f old \u4e3a\u7a7a, Delete \u5c31\u662f new \u4e3a\u7a7a\u3002 When Ti finishes it last statement, writing \u201ccommit\u201d log record: \\(<T_i\\ commit>\\) When Ti complete rollback, writing \u201cabort\u201d log record: \\(<T_i\\ abort>\\) Log Example \u8fd9\u91cc\u5f53\u6267\u884c\u5230 T2 \u56de\u6eda\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u8fdb\u884c\u6062\u590d\uff08\u7eff\u8272\u7684\u884c\u8868\u793a\u8865\u507f\u65e5\u5fd7\uff09\u6bd4\u5982 T2 \u628a C \u6062\u590d\u4e3a 500, T3 \u628a B \u6062\u590d\u4e3a 300, \u6700\u540e T2 abort. (undo \u64cd\u4f5c\u4e5f\u4f1a\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d) \u53d1\u751f crash \u7684\u65f6\u5019 repeat history(undo \u6b63\u5e38\u7684\u64cd\u4f5c\u4e5f\u4f1a\u91cd\u590d), \u968f\u540e\u5f97\u5230\u5e76\u6267\u884c undo list.(\u4e8b\u52a1\u5f00\u59cb\u540e\u5148\u628a\u4e8b\u52a1\u653e\u8fdb\u53bb\uff0c\u5982\u679c\u63d0\u4ea4\u6216\u8005\u56de\u6eda\u4e86\u5c31\u628a\u4e8b\u52a1\u79fb\u9664) \u53ea\u9700\u8981\u628a T4 undo.(\u5047\u8bbe\u6545\u969c\u524d\u53ea\u6267\u884c\u5230 15 \u884c) Write-Ahead Logging \u00b6 Before a data in main memory is output to the database, the log records pertaining to data must have been output to stable storage. \u5148\u5199\u65e5\u5fd7\u539f\u5219\u3002 \u6570\u636e\u4fee\u6539\u4e4b\u524d\uff0c\u548c\u6570\u636e\u6709\u5173\u7684\u8bb0\u5f55\u8981\u5148\u5199\u5165\u65e5\u5fd7\u3002 Transaction Commit \u00b6 A transaction is said to have committed when its commit log record is output to stable storage \u65e5\u5fd7\u5df2\u7ecf\u8bb0\u5f55 commit, \u8bf4\u660e\u4e8b\u52a1\u5df2\u7ecf\u63d0\u4ea4\u3002\uff08\u56e0\u4e3a\u540e\u7eed\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6062\u590d\u72b6\u6001\u4e86\uff09 \u4f46\u6b64\u65f6\u6570\u636e\u4e0d\u4e00\u5b9a\u5df2\u7ecf\u5199\u56de\u5230\u6570\u636e\u5e93\u91cc\uff08\u4e0d\u4e00\u5b9a\u9ad8\u6821\uff09 all previous log records of the transaction must have been output already Writes performed by a transaction may still be in the buffer when the transaction commits, and may be output later. \u4e0d\u4e00\u5b9a\u5728\u78c1\u76d8\u3002\u5982\u679c\u7acb\u523b\u5c06 block \u5199\u56de\u78c1\u76d8\u53ef\u80fd\u5f15\u8d77\u5927\u91cf I/O \u64cd\u4f5c Undo(\u64a4\u9500) and Redo\uff08\u91cd\u505a\uff09 Operations \u00b6 Checkpoints \u00b6 Redoing/undoing all transactions recorded in the log can be very slow. Streamline recovery procedure by periodically performing checkpointing. \u91cd\u6f14\u5386\u53f2\u53ef\u80fd\u5f88\u957f\u3002checkpoint \u662f\u786e\u8ba4\u4e4b\u524d\u7684\u64cd\u4f5c\u90fd\u5df2\u7ecf\u53cd\u6620\u5230\u6570\u636e\u5e93\u91cc\u53bb\u4e86\uff0c\u8fd9\u6837\u91cd\u6f14\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece checkpoint \u5f00\u59cb\u3002 Output all log records currently residing in main memory onto stable storage. \u65e5\u5fd7\u4e0d\u662f\u751f\u6210\u5c31\u5f80\u5185\u5b58\u5199\uff0c\u800c\u662f\u6709\u4e00\u4e2a\u65e5\u5fd7\u7f13\u51b2\u533a\u3002 \u786e\u4fdd\u628a\u65e5\u5fd7\u9879\u5199\u5230\u65e5\u5fd7\u4e2d\u53bb\u4e86\u3002 Output all modified buffer blocks to the disk. \u628a buffer \u91cc\u6240\u6709\u6570\u636e\u90fd\u5237\u5199\u4e00\u904d\u3002 Write a log record \\(<checkpoint\\ L>\\) onto stable storage where L is a list of all transactions active at the time of checkpoint. \u5199\u4e00\u4e2a\u65e5\u5fd7\u7684\u6807\u8bb0\uff08\u65b0\u7684\u65e5\u5fd7\u7c7b\u578b\uff09. L \u662f\u5f53\u524d\u6b63\u5728\u5de5\u4f5c\u7684\u4e8b\u52a1\u7684\u8868\u3002\uff08\u7528\u6765\u505a undo list \u7684\u521d\u59cb\u5316\u5217\u8868\uff09 All updates are stopped while doing checkpointing!!! \u505a checkpoint \u7684\u65f6\u5019\u5176\u4ed6\u6d3b\u8dc3\u4e8b\u52a1\u90fd\u8981\u505c\u4e0b\u6765\u3002 Log File with Checkpoint : Example \u91cd\u6f14\u5386\u53f2\u4ece\u6700\u8fd1\u7684 checkpoint \u91cd\u6f14. {T2 T4} \u4f5c\u4e3a undo list \u7684\u521d\u59cb\u5316\u503c\u3002 checkpoint \u4e4b\u95f4\u7684\u95f4\u9694\u5e94\u8be5\u5982\u4f55\u786e\u5b9a\uff1f \u6839\u636e\u65e5\u5fd7\u91cf\u3002 Example of Recovery Log Record Buffering \u00b6 \u6211\u4eec\u5728\u628a\u6570\u636e buffer \u4e2d\u7684\u5757\u5199\u5230\u6570\u636e\u5e93\u65f6\uff0c\u8981\u5148\u628a\u5757\u5bf9\u5e94\u7684\u65e5\u5fd7\u5148\u5199\u5230\u65e5\u5fd7\u6587\u4ef6\uff08\u76f4\u63a5\u628a\u65e5\u5fd7\u5168\u90e8\u5237\u5199\u4e00\u904d\uff09\u3002 \u4e8b\u52a1\u63d0\u4ea4\u4e4b\u540e\u6709\u4e00\u4e2a\u5bf9\u65e5\u5fd7\u7684\u5f3a\u5236\u5237\u5199\u3002 Group commit : several log records can be output using a single output operation, reducing the I/O cost. commit \u53ef\u80fd\u5728\u65e5\u5fd7\u91cc\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4, \u7b49\u5230 buffer \u91cc\u6709\u8db3\u591f\u591a\u7684\u65e5\u5fd7\u8bb0\u5f55\u518d\u5199\u51fa\u53bb\u3002 The recovery algorithm supports the no-force policy(\u975e\u5f3a\u5236) : i.e. , updated blocks need not be written to disk when transaction commits. \u597d\u7684\u6062\u590d\u7b97\u6cd5\uff1a\u6211\u4e8b\u52a1 commit \u4e86\u4f46\u4e0d\u5f3a\u5236\u65e5\u5fd7\u5237\u5199\u51fa\u53bb\u3002 The recovery algorithm supports the steal policy(\u7a83\u53d6\u7b56\u7565) : i.e. , blocks containing updates of uncommitted transactions can be written to disk, even before the transaction commits. \u4e8b\u52a1\u63d0\u4ea4\u4e4b\u524d\u810f\u6570\u636e\u80fd\u4e0d\u80fd\u88ab\u5199\u5230\u78c1\u76d8\u91cc\u53bb\uff1f\uff08\u540c\u6837\u5730\u9700\u8981\u5148\u628a\u65e5\u5fd7\u5199\u51fa\u53bb\uff09 Fuzzy Checkpointing \u00b6 Fuzzy \u6a21\u7cca \u505a checkpoint \u7684\u65f6\u5019\u6211\u4eec\u5982\u679c\u8981\u6c42\u5176\u4ed6\u6d3b\u8dc3\u4e8b\u52a1\u90fd\u505c\u4e0b\u6765\uff0c\u4e00\u6b21\u6027\u628a\u810f\u6570\u636e\u90fd\u5237\u5199\u51fa\u53bb\uff0c\u541e\u5410\u7387\u4f1a\u5ffd\u9ad8\u5ffd\u4f4e\uff0c\u7cfb\u7edf\u7684\u53ef\u7528\u6027\u5c31\u6bd4\u8f83\u5dee\u3002 \u8bb0\u5f55\u810f\u6570\u636e\uff0c\u5728\u540e\u9762\u4e0d check \u7684\u65f6\u5019\u6162\u6162\u5199\u3002 Temporarily stop all updates by transactions Write a \\(<checkpoint\\ L>\\) log record and force log to stable storage Note list M of modified buffer blocks Now permit transactions to proceed with their actions Output to disk all modified buffer blocks in list M \u5728\u628a\u6240\u6709\u810f\u6570\u636e\u90fd\u5199\u56de\u78c1\u76d8\u540e\uff0c\u6211\u4eec\u4f1a\u8ba4\u5b9a\u8fd9\u4e2a checkpoint. \u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u6700\u8fd1\u4e00\u6b21\u6210\u529f\u7684 checkpoint. \u8fd9\u6837 checkpoint \u7684\u65f6\u5019\u5c31\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\uff0c\u4e0d\u7528\u4e00\u4e0b\u5b50\u5199\u810f\u6570\u636e\u4e86\u3002 Failure with Loss of Nonvolatile Storage \u00b6 Can be extended to allow transactions to be active during dump; known as fuzzy dump or online dump. \u7c7b\u4f3c\u4e8e checkpoint, \u4e0d\u662f\u5b8c\u5168\u5907\u4efd\uff0c\u800c\u662f\u8bb0\u5f55\u4e00\u4e0b\uff0c\u968f\u540e\u6162\u6162\u5907\u4efd\u3002 Recovery with Early Lock Release and Logical Undo Operations \u00b6 Logical Undo Logging \u00b6 \u5982\u679c\u65e9\u653e\u9501\uff0c\u540e\u7eed\u6062\u590d\u4e3a old value \u53ef\u80fd\u6ca1\u6709\u610f\u4e49\u3002\u6bd4\u5982\u5b58\u6b3e 100, \u8f6c\u5165 100. \u90a3\u4e48\u6211\u4eec\u6062\u590d\u4e3a 100(\u7269\u7406\u64a4\u9500) \u5c31\u6ca1\u6709\u610f\u4e49\u3002\u8fd9\u4e2a\u65f6\u5019\u5e94\u8be5\u91c7\u7528\u903b\u8f91\u64a4\u9500\uff0c\u5373\u5982\u679c a+=100 , \u6062\u590d\u65f6\u5c31\u5e94\u8be5 a-=100 . \u5982 B+ \u6811\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002 \u6211\u4eec\u9700\u8981\u5bf9\u903b\u8f91\u64cd\u4f5c\u8bb0\u65e5\u5fd7\u3002 Transaction Rollback with Logical Undo \u9700\u8981\u628a\u6bcf\u4e2a\u64cd\u4f5c\u7684\u65e5\u5fd7\u9879\u8bb0\u5f55\u4e0b\u6765\uff08\u5f00\u59cb\u548c\u7ed3\u675f\uff09. C \u8868\u793a\u81ea\u52a0\u64cd\u4f5c\u3002\u8fd9\u91cc\u5728 end \u65f6\u4f1a\u8bb0\u5f55 logical undo \u7684\u64cd\u4f5c(\u51cf\u6cd5\u64a4\u9500\u5bf9\u5e94\u52a0\u6cd5) \u6ce8\u610f\u6211\u4eec\u662f\u5728 end \u7684\u65f6\u5019\u8bb0\u5f55\u903b\u8f91\u64a4\u9500\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u8fd9\u4e2a\u64cd\u4f5c\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u7269\u7406\u64a4\u9500\u3002 \u8fd9\u91cc\u6211\u4eec\u65e9\u653e\u9501\u4e86\uff0c\u6ca1\u6709\u9075\u5faa\u4e25\u683c\u4e24\u9636\u6bb5\u653e\u9501\u534f\u8bae\u3002\u5728 T0 \u8fd8\u6ca1\u6709\u63d0\u4ea4\u7684\u65f6\u5019 T1 \u5c31\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u4fee\u6539. \u6062\u590d\u4e2d\u505a\u7684\u662f\u7269\u7406\u64a4\u9500(old+new), begin/end \u8fd9\u4e9b\u65e5\u5fd7\u5c31\u4e0d\u9700\u8981\u8bb0\u5f55\u4e86\u3002 Failure Recovery with Logical Undo \u8fd9\u91cc\u8fd8\u6ca1\u6709 T2 end, \u56e0\u6b64\u7269\u7406\u64a4\u9500\u3002 ARIES Recovery Algorithm \u00b6 ARIES is a state of the art recovery method. \u6bcf\u4e2a\u65e5\u5fd7\u90fd\u6709\u4e00\u4e2a\u65e5\u5fd7\u7f16\u53f7 log sequence number (LSN) \u6bcf\u4e2a\u6570\u636e\u5757\u91cc\u90fd\u4f1a\u8bb0\u4e00\u4e2a LSN, \u8868\u793a\u8fd9\u4e2a\u5757\u53cd\u5e94\u4e86\u6700\u8fd1\u54ea\u4e2a\u65e5\u5fd7\u7684\u64cd\u4f5c\u3002 ARIES Data Structures \u00b6 Log sequence number (LSN) identifies each log record Must be sequentially increasing Page LSN \u6bcf\u4e2a\u9875(\u5757\u7684 LSN) Log records of several different types Dirty page table \u810f\u9875\u8868\u8981\u8bb0\u5f55\u5728\u65e5\u5fd7\u4e2d\u3002 Log Record \u65e5\u5fd7\u8bb0\u5f55\u901a\u8fc7 UndoNextLSN \u4e32\u8d77\u6765\uff0c\u63d0\u9ad8\u6062\u590d\u6548\u7387\u3002 DirtyPage Table PageLSN of the page RecLSN is an LSN such that log records before this LSN have already been applied to the page version on disk \u6bcf\u4e00\u9875\u90fd\u6709 PageLSN \u548c RecLSN, Rec \u53cd\u5e94\u7684\u662f\u6700\u8fd1\u7684\u88ab\u53cd\u6620\u5230\u6570\u636e\u5e93\u7684\u65e5\u5fd7\u3002 ARIES Data Structures \u8fd9\u91cc 4894.1 \u8868\u793a\u8fd9\u4e2a\u5757\u91cc\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u3002 RecLSN \u8868\u793a 7564 \u5f00\u59cb\u6570\u636e\u5c31\u6ca1\u6709\u53cd\u6620\u5230\u6570\u636e\u5e93\u4e2d\u53bb\u4e86\u3002 Checkpoint log record Contains: DirtyPageTable and list of active transactions For each active transaction, LastLSN, the LSN of the last log record written by the transaction \u8981\u8bb0\u6700\u8fd1\u7684\u4e8b\u52a1\u9879\uff08\u4ece\u54ea\u91cc\u5f00\u59cb\u6062\u590d\uff09 Fixed position on disk notes LSN of last completed checkpoint log record Dirty pages are not written out at checkpoint time Instead, they are flushed out continuously, in the background \u810f\u9875\u4e0d\u4f1a\u5728 check \u7684\u65f6\u5019\u5199\u51fa\u53bb\u3002 Checkpoint is thus very low overhead can be done frequently ARIES Recovery Algorithm \u00b6 Analysis pass Which transactions to undo (undo-list) Which pages were dirty (disk version not up to date) at time of crash \u5f97\u5230 dirty page table. RedoLSN: LSN from which redo should start \u771f\u6b63\u7684 redo \u8981\u4ece\u54ea\u91cc\u5f00\u59cb(RecLSN \u7684\u6700\u5c0f\u503c\u5c31\u662f redo \u7684\u8d77\u70b9) Redo pass \u4ece RedoLSN \u5f00\u59cb\u91cd\u6f14 RecLSN and PageLSNs are used to avoid redoing actions already reflected on page. \u7528\u6765\u4f18\u5316\uff0c\u6709\u4e9b\u65e5\u5fd7\u4e0d\u7528 redo(\u6ca1\u6709\u610f\u4e49) Undo pass \u628a undolist \u8fdb\u884c\u64a4\u9500\u64cd\u4f5c\u3002 Example crash \u4e4b\u540e\uff0c\u5f97\u5230\u4e0a\u9875\u7684 Dirty Page Table \u548c Active TXN Table \u4ee5\u53ca\u78c1\u76d8\u91cc\u7684\u65e5\u5fd7\u3002 Example \u8981\u628a 2390 \u52a0\u5230\u8868\u91cc\u53bb\u3002","title":"\u6545\u969c\u6062\u590d"},{"location":"DB/db15/#recovery-system","text":"","title":"Recovery System"},{"location":"DB/db15/#failure-classification","text":"Database application \u903b\u8f91\u9519\u8bef\uff1a\u6bd4\u5982\u4e0d\u6ee1\u8db3\u6570\u636e\u5e93\u7ea6\u675f\u6761\u4ef6\uff08\u4e3b\u952e\uff09 \u7cfb\u7edf\u9519\u8bef\uff1a\u6b7b\u9501\u3002 \u5e38\u7528\u65b9\u6cd5\u662f\u64a4\u9500 undo, \u628a\u8fd9\u4e2a\u4e8b\u4ef6\u62b9\u6389\u3002\uff08\u57fa\u4e8e\u65e5\u5fd7\uff0c\u5728\u4ea7\u751f\u4fee\u6539\u4e4b\u524d\u5148\u8bb0\u65e5\u5fd7\uff0c\u6545\u969c\u540e\u53ef\u4ee5\u6839\u636e\u65e5\u5fd7\u8fdb\u884c\u64a4\u9500\uff09 \u8bb0\u65e5\u5fd7\u6bd4\u8f83\u5feb\uff08\u987a\u5e8f\u8bbf\u95ee\uff09 DBMS \u6389\u7535\u3001\u786c\u4ef6\u6545\u969c\u3001\u8f6f\u4ef6\u6545\u969c system crash \u662f\u5168\u5c40\u6027\u7684\uff0c\u6240\u6709\u8fd0\u884c\u7684\u7a0b\u5e8f\u90fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e00\u7c7b\u662f\u4e8b\u52a1\u5df2\u7ecf\u63d0\u4ea4\uff08\u4f46\u662f\u6570\u636e\u8fd8\u5728\u7f13\u51b2\u533a\uff09\uff0c\u53e6\u4e00\u7c7b\u662f\u6b63\u5728\u6267\u884c\u7684\u4e8b\u52a1\uff08\u8fd8\u6ca1\u6709\u63d0\u4ea4\uff09\u3002 \u5df2\u7ecf\u63d0\u4ea4\u7684\u4e8b\u52a1\u8981 redo(\u6570\u636e\u53ef\u80fd\u6ca1\u5199\u56de\u53bb), \u6ca1\u6709\u5b8c\u6210\u7684\u4e8b\u52a1\u8981 undo. \u5148\u8bb0\u65e5\u5fd7\uff0c\u73b0\u5728\u7684\u6570\u636e\u5e93\u91c7\u7528 repeating history \u7684\u65b9\u6cd5\u3002 Database \u4ecb\u8d28\u6545\u969c \u8981\u9632\u6b62\u4ecb\u8d28\u6545\u969c\uff0c\u9700\u8981\u505a\u5907\u4efd\uff08\u62f7\u8d1d\u6216\u8005\u8fdc\u7a0b\uff09","title":"Failure Classification"},{"location":"DB/db15/#storage-structure","text":"\u65e5\u5fd7\u53ef\u80fd\u4e5f\u4f1a\u51fa\u6545\u969c\uff1f\u6211\u4eec\u5047\u8bbe\u65e5\u5fd7\u5b58\u50a8\u5728 Stable storage \u91cc\u3002 Volatile storage Nonvolatile storage survives system crashes Stable storage: a mythical(\u865a\u62df\u7684) form of storage that survives all failures approximated by maintaining multiple copies on distinct nonvolatile media \u53ef\u4ee5\u8fd1\u4f3c\u5b9e\u73b0","title":"Storage Structure"},{"location":"DB/db15/#implementation","text":"Maintain multiple copies of each block on separate disks Failure during data transfer can still result in inconsistent copies \u4fee\u6539\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u53d1\u751f\u6545\u969c Protecting storage media from failure during data transfer","title":"Implementation"},{"location":"DB/db15/#database-recovery","text":"Recovery algorithms are techniques to ensure database consistency and transaction atomicity and durability despite failures. Recovery algorithms have two parts Actions taken during normal transaction processing to ensure enough information exists to recover from failures \u5148\u8bb0\u65e5\u5fd7 Actions taken after a failure to recover the database contents to a state that ensures atomicity, consistency and durability \u7406\u60f3\u7684\u7b97\u6cd5\uff1a\u6062\u590d\u5f97\u5f88\u5feb\uff0c\u5bf9\u4e8b\u52a1\u6b63\u5e38\u64cd\u4f5c\u6ca1\u6709\u5f71\u54cd\uff08\u8bb0\u5f55\u4fe1\u606f\u7684\u65f6\u5019\u4e0d\u80fd\u6d88\u8017\u592a\u591a\u6027\u80fd\uff09\uff0c\u5373\u517c\u987e\u4e0a\u9762\u4e24\u4e2a\u90e8\u5206\u3002\u6062\u590d\u7684\u8fc7\u7a0b\u548c\u5e76\u884c\u63a7\u5236\u662f\u76f8\u5173\u7684\u3002 We assume that strict two-phase locking ensures no dirty read. \u4f7f\u7528\u4e25\u683c\u4e24\u9636\u6bb5\u5c01\u9501\u534f\u8bae\u4fdd\u8bc1\u6ca1\u6709\u810f\u6570\u636e\u3002 Idempotent(\u5e42\u7b49\u6027) : An recovery algorithm is said to be idempotent if executing it several times gives the same result as executing it once. \u7b97\u6cd5\u6062\u590d\u591a\u6b21\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\u3002\uff08\u6062\u590d\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4e5f\u53d1\u751f crash\uff09","title":"Database Recovery"},{"location":"DB/db15/#log-based-recovery","text":"","title":"Log-Based Recovery"},{"location":"DB/db15/#log-records","text":"A log is kept on stable storage(\u7a33\u5b9a\u5b58\u50a8\u5668). The log is a sequence of log records , and maintains a record of update activities on the database. When transaction Ti starts, it registers itself by writing a \u201cstart\u201d log record: \\(<T_i\\ start>\\) \u4e8b\u52a1\u5f00\u59cb. Ti \u8868\u793a\u4e8b\u52a1\u7684 id. Before Ti executes write(X), writing \u201cupdate \u201d log record \\(<T_i, X, V_1, V_2>\\) \u4e8b\u52a1\u628a X \u6570\u636e\u9879\u7684\u503c\u4ece V1(old value) \u6539\u4e3a V2(new value). \u8fd9\u4e2a\u5c31\u662f\u6062\u590d\u7684\u57fa\u7840. undo \u5c31\u7528 old value, redo \u7528 new value. Insert \u5c31\u662f old \u4e3a\u7a7a, Delete \u5c31\u662f new \u4e3a\u7a7a\u3002 When Ti finishes it last statement, writing \u201ccommit\u201d log record: \\(<T_i\\ commit>\\) When Ti complete rollback, writing \u201cabort\u201d log record: \\(<T_i\\ abort>\\) Log Example \u8fd9\u91cc\u5f53\u6267\u884c\u5230 T2 \u56de\u6eda\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u8fdb\u884c\u6062\u590d\uff08\u7eff\u8272\u7684\u884c\u8868\u793a\u8865\u507f\u65e5\u5fd7\uff09\u6bd4\u5982 T2 \u628a C \u6062\u590d\u4e3a 500, T3 \u628a B \u6062\u590d\u4e3a 300, \u6700\u540e T2 abort. (undo \u64cd\u4f5c\u4e5f\u4f1a\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d) \u53d1\u751f crash \u7684\u65f6\u5019 repeat history(undo \u6b63\u5e38\u7684\u64cd\u4f5c\u4e5f\u4f1a\u91cd\u590d), \u968f\u540e\u5f97\u5230\u5e76\u6267\u884c undo list.(\u4e8b\u52a1\u5f00\u59cb\u540e\u5148\u628a\u4e8b\u52a1\u653e\u8fdb\u53bb\uff0c\u5982\u679c\u63d0\u4ea4\u6216\u8005\u56de\u6eda\u4e86\u5c31\u628a\u4e8b\u52a1\u79fb\u9664) \u53ea\u9700\u8981\u628a T4 undo.(\u5047\u8bbe\u6545\u969c\u524d\u53ea\u6267\u884c\u5230 15 \u884c)","title":"Log Records"},{"location":"DB/db15/#write-ahead-logging","text":"Before a data in main memory is output to the database, the log records pertaining to data must have been output to stable storage. \u5148\u5199\u65e5\u5fd7\u539f\u5219\u3002 \u6570\u636e\u4fee\u6539\u4e4b\u524d\uff0c\u548c\u6570\u636e\u6709\u5173\u7684\u8bb0\u5f55\u8981\u5148\u5199\u5165\u65e5\u5fd7\u3002","title":"Write-Ahead Logging"},{"location":"DB/db15/#transaction-commit","text":"A transaction is said to have committed when its commit log record is output to stable storage \u65e5\u5fd7\u5df2\u7ecf\u8bb0\u5f55 commit, \u8bf4\u660e\u4e8b\u52a1\u5df2\u7ecf\u63d0\u4ea4\u3002\uff08\u56e0\u4e3a\u540e\u7eed\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6062\u590d\u72b6\u6001\u4e86\uff09 \u4f46\u6b64\u65f6\u6570\u636e\u4e0d\u4e00\u5b9a\u5df2\u7ecf\u5199\u56de\u5230\u6570\u636e\u5e93\u91cc\uff08\u4e0d\u4e00\u5b9a\u9ad8\u6821\uff09 all previous log records of the transaction must have been output already Writes performed by a transaction may still be in the buffer when the transaction commits, and may be output later. \u4e0d\u4e00\u5b9a\u5728\u78c1\u76d8\u3002\u5982\u679c\u7acb\u523b\u5c06 block \u5199\u56de\u78c1\u76d8\u53ef\u80fd\u5f15\u8d77\u5927\u91cf I/O \u64cd\u4f5c","title":"Transaction Commit"},{"location":"DB/db15/#undo-and-redo-operations","text":"","title":"Undo(\u64a4\u9500) and Redo\uff08\u91cd\u505a\uff09 Operations"},{"location":"DB/db15/#checkpoints","text":"Redoing/undoing all transactions recorded in the log can be very slow. Streamline recovery procedure by periodically performing checkpointing. \u91cd\u6f14\u5386\u53f2\u53ef\u80fd\u5f88\u957f\u3002checkpoint \u662f\u786e\u8ba4\u4e4b\u524d\u7684\u64cd\u4f5c\u90fd\u5df2\u7ecf\u53cd\u6620\u5230\u6570\u636e\u5e93\u91cc\u53bb\u4e86\uff0c\u8fd9\u6837\u91cd\u6f14\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece checkpoint \u5f00\u59cb\u3002 Output all log records currently residing in main memory onto stable storage. \u65e5\u5fd7\u4e0d\u662f\u751f\u6210\u5c31\u5f80\u5185\u5b58\u5199\uff0c\u800c\u662f\u6709\u4e00\u4e2a\u65e5\u5fd7\u7f13\u51b2\u533a\u3002 \u786e\u4fdd\u628a\u65e5\u5fd7\u9879\u5199\u5230\u65e5\u5fd7\u4e2d\u53bb\u4e86\u3002 Output all modified buffer blocks to the disk. \u628a buffer \u91cc\u6240\u6709\u6570\u636e\u90fd\u5237\u5199\u4e00\u904d\u3002 Write a log record \\(<checkpoint\\ L>\\) onto stable storage where L is a list of all transactions active at the time of checkpoint. \u5199\u4e00\u4e2a\u65e5\u5fd7\u7684\u6807\u8bb0\uff08\u65b0\u7684\u65e5\u5fd7\u7c7b\u578b\uff09. L \u662f\u5f53\u524d\u6b63\u5728\u5de5\u4f5c\u7684\u4e8b\u52a1\u7684\u8868\u3002\uff08\u7528\u6765\u505a undo list \u7684\u521d\u59cb\u5316\u5217\u8868\uff09 All updates are stopped while doing checkpointing!!! \u505a checkpoint \u7684\u65f6\u5019\u5176\u4ed6\u6d3b\u8dc3\u4e8b\u52a1\u90fd\u8981\u505c\u4e0b\u6765\u3002 Log File with Checkpoint : Example \u91cd\u6f14\u5386\u53f2\u4ece\u6700\u8fd1\u7684 checkpoint \u91cd\u6f14. {T2 T4} \u4f5c\u4e3a undo list \u7684\u521d\u59cb\u5316\u503c\u3002 checkpoint \u4e4b\u95f4\u7684\u95f4\u9694\u5e94\u8be5\u5982\u4f55\u786e\u5b9a\uff1f \u6839\u636e\u65e5\u5fd7\u91cf\u3002 Example of Recovery","title":"Checkpoints"},{"location":"DB/db15/#log-record-buffering","text":"\u6211\u4eec\u5728\u628a\u6570\u636e buffer \u4e2d\u7684\u5757\u5199\u5230\u6570\u636e\u5e93\u65f6\uff0c\u8981\u5148\u628a\u5757\u5bf9\u5e94\u7684\u65e5\u5fd7\u5148\u5199\u5230\u65e5\u5fd7\u6587\u4ef6\uff08\u76f4\u63a5\u628a\u65e5\u5fd7\u5168\u90e8\u5237\u5199\u4e00\u904d\uff09\u3002 \u4e8b\u52a1\u63d0\u4ea4\u4e4b\u540e\u6709\u4e00\u4e2a\u5bf9\u65e5\u5fd7\u7684\u5f3a\u5236\u5237\u5199\u3002 Group commit : several log records can be output using a single output operation, reducing the I/O cost. commit \u53ef\u80fd\u5728\u65e5\u5fd7\u91cc\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4, \u7b49\u5230 buffer \u91cc\u6709\u8db3\u591f\u591a\u7684\u65e5\u5fd7\u8bb0\u5f55\u518d\u5199\u51fa\u53bb\u3002 The recovery algorithm supports the no-force policy(\u975e\u5f3a\u5236) : i.e. , updated blocks need not be written to disk when transaction commits. \u597d\u7684\u6062\u590d\u7b97\u6cd5\uff1a\u6211\u4e8b\u52a1 commit \u4e86\u4f46\u4e0d\u5f3a\u5236\u65e5\u5fd7\u5237\u5199\u51fa\u53bb\u3002 The recovery algorithm supports the steal policy(\u7a83\u53d6\u7b56\u7565) : i.e. , blocks containing updates of uncommitted transactions can be written to disk, even before the transaction commits. \u4e8b\u52a1\u63d0\u4ea4\u4e4b\u524d\u810f\u6570\u636e\u80fd\u4e0d\u80fd\u88ab\u5199\u5230\u78c1\u76d8\u91cc\u53bb\uff1f\uff08\u540c\u6837\u5730\u9700\u8981\u5148\u628a\u65e5\u5fd7\u5199\u51fa\u53bb\uff09","title":"Log Record Buffering"},{"location":"DB/db15/#fuzzy-checkpointing","text":"Fuzzy \u6a21\u7cca \u505a checkpoint \u7684\u65f6\u5019\u6211\u4eec\u5982\u679c\u8981\u6c42\u5176\u4ed6\u6d3b\u8dc3\u4e8b\u52a1\u90fd\u505c\u4e0b\u6765\uff0c\u4e00\u6b21\u6027\u628a\u810f\u6570\u636e\u90fd\u5237\u5199\u51fa\u53bb\uff0c\u541e\u5410\u7387\u4f1a\u5ffd\u9ad8\u5ffd\u4f4e\uff0c\u7cfb\u7edf\u7684\u53ef\u7528\u6027\u5c31\u6bd4\u8f83\u5dee\u3002 \u8bb0\u5f55\u810f\u6570\u636e\uff0c\u5728\u540e\u9762\u4e0d check \u7684\u65f6\u5019\u6162\u6162\u5199\u3002 Temporarily stop all updates by transactions Write a \\(<checkpoint\\ L>\\) log record and force log to stable storage Note list M of modified buffer blocks Now permit transactions to proceed with their actions Output to disk all modified buffer blocks in list M \u5728\u628a\u6240\u6709\u810f\u6570\u636e\u90fd\u5199\u56de\u78c1\u76d8\u540e\uff0c\u6211\u4eec\u4f1a\u8ba4\u5b9a\u8fd9\u4e2a checkpoint. \u6709\u4e00\u4e2a\u6307\u9488\u6307\u5411\u6700\u8fd1\u4e00\u6b21\u6210\u529f\u7684 checkpoint. \u8fd9\u6837 checkpoint \u7684\u65f6\u5019\u5c31\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\uff0c\u4e0d\u7528\u4e00\u4e0b\u5b50\u5199\u810f\u6570\u636e\u4e86\u3002","title":"Fuzzy Checkpointing"},{"location":"DB/db15/#failure-with-loss-of-nonvolatile-storage","text":"Can be extended to allow transactions to be active during dump; known as fuzzy dump or online dump. \u7c7b\u4f3c\u4e8e checkpoint, \u4e0d\u662f\u5b8c\u5168\u5907\u4efd\uff0c\u800c\u662f\u8bb0\u5f55\u4e00\u4e0b\uff0c\u968f\u540e\u6162\u6162\u5907\u4efd\u3002","title":"Failure with Loss of Nonvolatile Storage"},{"location":"DB/db15/#recovery-with-early-lock-release-and-logical-undo-operations","text":"","title":"Recovery with Early Lock Release and Logical Undo Operations"},{"location":"DB/db15/#logical-undo-logging","text":"\u5982\u679c\u65e9\u653e\u9501\uff0c\u540e\u7eed\u6062\u590d\u4e3a old value \u53ef\u80fd\u6ca1\u6709\u610f\u4e49\u3002\u6bd4\u5982\u5b58\u6b3e 100, \u8f6c\u5165 100. \u90a3\u4e48\u6211\u4eec\u6062\u590d\u4e3a 100(\u7269\u7406\u64a4\u9500) \u5c31\u6ca1\u6709\u610f\u4e49\u3002\u8fd9\u4e2a\u65f6\u5019\u5e94\u8be5\u91c7\u7528\u903b\u8f91\u64a4\u9500\uff0c\u5373\u5982\u679c a+=100 , \u6062\u590d\u65f6\u5c31\u5e94\u8be5 a-=100 . \u5982 B+ \u6811\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002 \u6211\u4eec\u9700\u8981\u5bf9\u903b\u8f91\u64cd\u4f5c\u8bb0\u65e5\u5fd7\u3002 Transaction Rollback with Logical Undo \u9700\u8981\u628a\u6bcf\u4e2a\u64cd\u4f5c\u7684\u65e5\u5fd7\u9879\u8bb0\u5f55\u4e0b\u6765\uff08\u5f00\u59cb\u548c\u7ed3\u675f\uff09. C \u8868\u793a\u81ea\u52a0\u64cd\u4f5c\u3002\u8fd9\u91cc\u5728 end \u65f6\u4f1a\u8bb0\u5f55 logical undo \u7684\u64cd\u4f5c(\u51cf\u6cd5\u64a4\u9500\u5bf9\u5e94\u52a0\u6cd5) \u6ce8\u610f\u6211\u4eec\u662f\u5728 end \u7684\u65f6\u5019\u8bb0\u5f55\u903b\u8f91\u64a4\u9500\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u8fd9\u4e2a\u64cd\u4f5c\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u7269\u7406\u64a4\u9500\u3002 \u8fd9\u91cc\u6211\u4eec\u65e9\u653e\u9501\u4e86\uff0c\u6ca1\u6709\u9075\u5faa\u4e25\u683c\u4e24\u9636\u6bb5\u653e\u9501\u534f\u8bae\u3002\u5728 T0 \u8fd8\u6ca1\u6709\u63d0\u4ea4\u7684\u65f6\u5019 T1 \u5c31\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u4fee\u6539. \u6062\u590d\u4e2d\u505a\u7684\u662f\u7269\u7406\u64a4\u9500(old+new), begin/end \u8fd9\u4e9b\u65e5\u5fd7\u5c31\u4e0d\u9700\u8981\u8bb0\u5f55\u4e86\u3002 Failure Recovery with Logical Undo \u8fd9\u91cc\u8fd8\u6ca1\u6709 T2 end, \u56e0\u6b64\u7269\u7406\u64a4\u9500\u3002","title":"Logical Undo Logging"},{"location":"DB/db15/#aries-recovery-algorithm","text":"ARIES is a state of the art recovery method. \u6bcf\u4e2a\u65e5\u5fd7\u90fd\u6709\u4e00\u4e2a\u65e5\u5fd7\u7f16\u53f7 log sequence number (LSN) \u6bcf\u4e2a\u6570\u636e\u5757\u91cc\u90fd\u4f1a\u8bb0\u4e00\u4e2a LSN, \u8868\u793a\u8fd9\u4e2a\u5757\u53cd\u5e94\u4e86\u6700\u8fd1\u54ea\u4e2a\u65e5\u5fd7\u7684\u64cd\u4f5c\u3002","title":"ARIES Recovery Algorithm"},{"location":"DB/db15/#aries-data-structures","text":"Log sequence number (LSN) identifies each log record Must be sequentially increasing Page LSN \u6bcf\u4e2a\u9875(\u5757\u7684 LSN) Log records of several different types Dirty page table \u810f\u9875\u8868\u8981\u8bb0\u5f55\u5728\u65e5\u5fd7\u4e2d\u3002 Log Record \u65e5\u5fd7\u8bb0\u5f55\u901a\u8fc7 UndoNextLSN \u4e32\u8d77\u6765\uff0c\u63d0\u9ad8\u6062\u590d\u6548\u7387\u3002 DirtyPage Table PageLSN of the page RecLSN is an LSN such that log records before this LSN have already been applied to the page version on disk \u6bcf\u4e00\u9875\u90fd\u6709 PageLSN \u548c RecLSN, Rec \u53cd\u5e94\u7684\u662f\u6700\u8fd1\u7684\u88ab\u53cd\u6620\u5230\u6570\u636e\u5e93\u7684\u65e5\u5fd7\u3002 ARIES Data Structures \u8fd9\u91cc 4894.1 \u8868\u793a\u8fd9\u4e2a\u5757\u91cc\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u3002 RecLSN \u8868\u793a 7564 \u5f00\u59cb\u6570\u636e\u5c31\u6ca1\u6709\u53cd\u6620\u5230\u6570\u636e\u5e93\u4e2d\u53bb\u4e86\u3002 Checkpoint log record Contains: DirtyPageTable and list of active transactions For each active transaction, LastLSN, the LSN of the last log record written by the transaction \u8981\u8bb0\u6700\u8fd1\u7684\u4e8b\u52a1\u9879\uff08\u4ece\u54ea\u91cc\u5f00\u59cb\u6062\u590d\uff09 Fixed position on disk notes LSN of last completed checkpoint log record Dirty pages are not written out at checkpoint time Instead, they are flushed out continuously, in the background \u810f\u9875\u4e0d\u4f1a\u5728 check \u7684\u65f6\u5019\u5199\u51fa\u53bb\u3002 Checkpoint is thus very low overhead can be done frequently","title":"ARIES Data Structures"},{"location":"DB/db15/#aries-recovery-algorithm_1","text":"Analysis pass Which transactions to undo (undo-list) Which pages were dirty (disk version not up to date) at time of crash \u5f97\u5230 dirty page table. RedoLSN: LSN from which redo should start \u771f\u6b63\u7684 redo \u8981\u4ece\u54ea\u91cc\u5f00\u59cb(RecLSN \u7684\u6700\u5c0f\u503c\u5c31\u662f redo \u7684\u8d77\u70b9) Redo pass \u4ece RedoLSN \u5f00\u59cb\u91cd\u6f14 RecLSN and PageLSNs are used to avoid redoing actions already reflected on page. \u7528\u6765\u4f18\u5316\uff0c\u6709\u4e9b\u65e5\u5fd7\u4e0d\u7528 redo(\u6ca1\u6709\u610f\u4e49) Undo pass \u628a undolist \u8fdb\u884c\u64a4\u9500\u64cd\u4f5c\u3002 Example crash \u4e4b\u540e\uff0c\u5f97\u5230\u4e0a\u9875\u7684 Dirty Page Table \u548c Active TXN Table \u4ee5\u53ca\u78c1\u76d8\u91cc\u7684\u65e5\u5fd7\u3002 Example \u8981\u628a 2390 \u52a0\u5230\u8868\u91cc\u53bb\u3002","title":"ARIES Recovery Algorithm"},{"location":"DB/db2/","text":"Relational Model \u00b6 Structure of Relational Databases \u00b6 Concepts \u00b6 Formally, given set \\(D_1, D_2, \\ldots, D_n\\) a relation \\(r\\) is a subset of \\(D_1\\times D_2\\times \\ldots D_n\\) . Thus a relation is a set of n-tuple \\((a_1,a_2,\\ldots,a_n)\\) where each \\(a_i\\in D_i\\) . \\(A_1,A_2,\\ldots,A_n\\) are attributes . \\(R=(A_1,A_2,\\ldots,A_n)\\) is a relation schema . e.g. instructor = (ID, name, dept_name, salary). A relation instance \\(r\\) defined over schema R is denoted by \\(r(R)\\) . \u56e0\u4e3a\u5173\u7cfb\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u5173\u7cfb\u90fd\u662f\u65e0\u5e8f\u7684\u3002 Attributes \u00b6 The set of allowed values for each attribute is called the domain (\u57df)of the attribute Attribute values are (normally) required to be atomic (\u539f\u5b50\u7684); that is, indivisible The special value null (\u7a7a\u503c) is a member of every domain Database Schema \u00b6 Database schema -- is the logical structure of the database. Database instance -- is a snapshot of the data in the database at a given instant in time. Example schema \u662f\u62bd\u8c61\u7684\u5b9a\u4e49, instance \u662f\u5177\u4f53\u7684\u5b9e\u4f8b\u3002 Keys \u00b6 Let \\(K\\subsetneqq R\\) \\(K\\) is a superkey (\u8d85\u952e) of \\(R\\) if values for K are sufficient to identify (\u552f\u4e00\u786e\u5b9a) a unique tuple of each possible relation \\(r(R)\\) e.g. \\(\\{ID\\}\\) or \\(\\{ID, name\\}\\) Superkey \\(K\\) is a candidate key (\u5019\u9009\u952e) if \\(K\\) is minimal. \u5373 \\(K\\) \u4e2d\u6ca1\u6709\u5197\u4f59\u5c5e\u6027 One of the candidate keys is selected to be the primary key (\u4e3b\u952e) . Foreign key (\u5916\u952e) Relation \\(r_1\\) may include among its attributes the primary key of another relation \\(r_2\\) . This attribute is called a foreign key from \\(r_1\\) , referencing \\(r_2\\) . \u7c7b\u4f3c\u4e8e\u6307\u9488\uff0c\u5916\u952e\u9650\u5236\u5c31\u662f\u5173\u7cfb \\(r_1\\) \u5f15\u7528\u7684\u4e3b\u952e\u5fc5\u987b\u5728\u5173\u7cfb \\(r_2\\) \u4e2d\u51fa\u73b0\u3002 Example \u5de6\u4fa7\u8868\u7684\u8001\u5e08 ID \u5fc5\u987b\u51fa\u73b0\u5728\u53f3\u4fa7\u8868\u4e2d\u3002 Why we need foreign key constraint? \u6570\u636e\u5e93\u662f\u652f\u6301\u7531\u5b8c\u6574\u7ea6\u675f\u6761\u4ef6\u5b9a\u4e49\u51fa\u6765\u7684\uff0c\u5e76\u7ef4\u62a4\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\u3002\u5219\u5f53\u6211\u4eec\u5b9a\u4e49\u5916\u952e\u540e\uff0c\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u9ec4\u8272\u6761\u76ee\u662f\u4e0d\u4f1a\u51fa\u73b0\u7684\u3002 Referential integrity (\u53c2\u7167\u5b8c\u6574\u6027) \u7c7b\u4f3c\u4e8e\u5916\u952e\u9650\u5236\uff0c\u4f46\u4e0d\u5c40\u9650\u4e8e\u4e3b\u952e\u3002 Example \u8fd9\u91cc \\(time_slot_id\\) \u5e76\u4e0d\u662f\u5173\u7cfb \\(r_2\\) \u7684\u4e3b\u952e\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u662f\u5916\u952e\u9650\u5236\u3002 Example course \u6307\u8bfe\u7a0b\u4fe1\u606f\uff0c\u65e0\u8bba\u662f\u5426\u5f00\u8bfe\uff0c\u90fd\u4f1a\u6709\u5176\u5b9a\u4e49\u3002 section \u8868\u793a\u6559\u5b66\u73ed\uff0c\u771f\u6b63\u5f00\u8bfe\u65f6\u5c31\u6709\u76f8\u5e94\u7684\u5b9e\u4f8b\u3002\uff08\u7c7b\u6bd4\u4e8e\u9ad8\u94c1\u7684\u5217\u8f66\u53f7\uff0c\u548c\u6bcf\u5929\u5bf9\u5e94\u7684\u73ed\u6b21\uff09 teachers \u5177\u4f53\u6559\u54ea\u4e2a\u6559\u5b66\u73ed\u7684\u8001\u5e08 takes \u8868\u793a\u5b66\u751f\u6ce8\u518c\u8bfe\u7a0b time_slot \u8868\u793a\u4e00\u95e8\u8bfe\u7684\u5177\u4f53\u4e0a\u8bfe\u65f6\u95f4\u6bb5\uff0c\u5982\u6570\u636e\u5e93\u5728\u5468\u4e00 3, 4, 5 \u8282; \u5468\u4e00 7, 8 \u8282\u3002 \u4e0a\u56fe\u4e2d\u7ea2\u7ebf\u8868\u793a\u5f15\u7528\u5b8c\u6574\u6027\u7684\u7ea6\u675f\uff1b\u9ed1\u7ebf\u8868\u793a\u5916\u952e\u7ea6\u675f\u3002 Relational Algebra \u00b6 Six basic operators select: \\(\\sigma\\) project: \\(\\Pi\\) union: \\(\\cup\\) set difference: \\(-\\) Cartesian product(\u7b1b\u5361\u5c14\u79ef): \\(\\times\\) rename: \\(\\rho\\) Select \u00b6 \\(\\sigma_p(r)=\\{t|t\\in r\\ and\\ p(t)\\}\\) , where \\(p\\) is called selection predicate . Select Example Project \u00b6 The project operation is a unary operation that returns its argument relation, with certain attributes left out. \\(\\prod_{A_1,A_2,\\ldots, A_k}(r)\\) where \\(A_i\\) are attribute names and \\(r\\) is a relation name. The result is defined as the relation of k columns obtained by erasing the columns that are not listed. \u4f1a\u5bf9\u7ed3\u679c\u8fdb\u884c\u53bb\u91cd\u3002 Projection Example Union \u00b6 The union operation allows us to combine two relations. \\(r\\cup s = \\{t| t\\in r \\ or \\ t\\in s\\}\\) \\(r\\) and \\(s\\) must have the same arity (\u5143\u6570) (same number f attributes) The attribute domains must be compatible \u5f53\u5c5e\u6027\u6709\u5173\u8054\u7c7b\u578b\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8f93\u5165 \\(i\\) , \u4e24\u4e2a\u8f93\u5165\u5173\u7cfb\u7684\u7b2c \\(i\\) \u4e2a\u5c5e\u6027\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\u3002 Projection Example Set Difference \u00b6 The set-difference operation allows us to find tuples that are in one relation but are not in another. \\(r-s=\\{t|t\\in r\\ and\\ t\\notin s\\}\\) Set differences must be taken between compatible relations. Projection Example Cartesian-Product \u00b6 The Cartesian-product operation (denoted by \\(\\times\\) ) allows us to combine information from any two relations. \\(r\\times s =\\{t\\ q|t\\in r\\ and\\ q\\in s\\}\\) Projection Example Rename=n \u00b6 Allows us to refer to a relation by more than one name. \\(\\rho_X(E)\\) Composition of Operations 1 Find the names of all instructors in the Physics department, along with the course_id of all courses they have taught. \u8fd9\u4e24\u6761\u8bed\u53e5\u542b\u4e49\u4e00\u6837\uff0c\u4f46\u7b2c\u4e8c\u6761\u6211\u4eec\u5148\u8fdb\u884c\u4e86\u4e00\u6b21 select, \u6761\u76ee\u5c11\u4e86\u66f4\u9ad8\u6548\u3002 Composition of Operations 2 Find the largest salary in the university. find instructor salaries that are less than some other instructor salary ( i.e. not maximum) using a copy of instructor under a new name \\(d\\) . \\(\\prod_{instructor.salary}(\\sigma_{instructor.salary<d.salary}(instructor \\times \\rho_d(instructor)))\\) find the largest salary \\(\\prod_{instructor}-\\prod_{instructor.salary}(\\sigma_{instructor.salary}<d.salary(instructor\\times \\rho_d(instructor)))\\) \u6211\u4eec\u7b2c\u4e00\u6b65\u5c06\u4e24\u4e2a\u5173\u7cfb\u62fc\u8d77\u6765\u4e4b\u540e\uff0c\u9650\u5b9a instructor \u7684\u5de5\u8d44\u5c0f\u4e8e d, \u968f\u540e\u6295\u5f71\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u4e0d\u662f\u6700\u5927\u503c\u7684\u85aa\u6c34\u3002\uff08\u56e0\u4e3a\u4efb\u4f55\u4e0d\u662f\u6700\u5927\u503c\u7684\u85aa\u6c34\u90fd\u4f1a\u5728\u7b1b\u5361\u5c14\u79ef select \u540e\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd9\u6837\u6295\u5f71\u4e4b\u540e\u4ecd\u4f1a\u5b58\u5728\u3002\u4f46\u6700\u5927\u503c\u5c31\u4e0d\u4f1a\u6709\u5143\u7ec4\u5b58\u5728\uff09\uff0c\u6700\u540e\u7528\u5168\u96c6\u51cf\u6389\u5373\u53ef\u3002 Additional Operations \u00b6 Set intersection: \\(r \\cap s\\) Natural join: \\(r\\bowtie s\\) Assignment: \\(\\leftarrow\\) Outer join : \\(r \\rtimes s\\) , \\(r \\ltimes s\\) , \\(r\\) \u27d7 \\(s\\) Division Operator: \\(r \\div s\\) Set-Intersection \u00b6 The set-intersection operation allows us to find tuples that are in both the input relations. \\(r\\cap s=\\{t| t\\in r\\ and\\ t\\in s\\}\\) \\(r, s\\) have the same arity attributes of \\(r\\) and s are compatible Set-Intersection Operation Example Natural-Join Operation \u00b6 Let r and s be relations on schemas R and S respectively. Then, \\(r\\bowtie s\\) is a relation on schema \\(R \\cup S\\) obtained as follows: Consider each pair of tuples \\(t_r\\) from \\(r\\) and \\(t_s\\) from \\(s\\) . If \\(t_r\\) and \\(t_s\\) have the same value on each of the attributes in \\(R \\cap S\\) , add a tuple $t $ to the result, where \\(t\\) has the same value as \\(t_r\\) on \\(r\\) \\(t\\) has the same value as \\(t_s\\) on \\(s\\) \u5373\u5171\u540c\u5c5e\u6027\u8981\u6709\u76f8\u540c\u7684\u503c\uff0c\u624d\u80fd\u5728\u62fc\u63a5\u540e\u7684\u7ed3\u679c\u4e2d\u4fdd\u7559\u3002 \u5bf9\u4e58\u6cd5\u7684\u6269\u5c55\uff0c\u76f8\u5f53\u4e8e\u5148 \\(\\times\\) \u518d select, \u6700\u540e project. Natural Join Example Theta Join \\(r\\bowtie_\\theta s=\\sigma_\\theta (r\\times s)\\) \u6761\u4ef6\u8fde\u63a5 Outer Join \u00b6 Computes the join and then adds tuples form one relation that does not match tuples in the other relation to the result of the join. Uses null values : null signifies that the value is unknown or does not exist All comparisons involving null are (roughly speaking) false by definition Outer join can be expressed using basic operations. \\(r\\rtimes s=(r\\bowtie s)\\cup (r-\\cap_R(r\\bowtie s)\\times \\{null,\\ldots,null\\})\\) \\(r\\ltimes s=(r\\bowtie s)\\cup \\{null,\\ldots,null\\}\\times (s-\\cap_R(r\\bowtie s))\\) \\(r\\) \u27d7 \\(s\\) \\(=(r\\bowtie s)\\cup (r-\\cap_R(r\\bowtie s))\\times \\{(null, \\ldots)\\}\\cup\\{(null,\\ldots,null)\\}\\times (s-\\cap_s(r\\bowtie s))\\) Outer Join Example Semijoin \u00b6 \\(r\\ltimes_\\theta s\\) \u4fdd\u7559 \\(r\\) \u4e2d\u80fd\u4e0e \\(s\\) \u76f8\u8fde\u7684\u5143\u7ec4\u3002 Semijoin Example Division \u00b6 Given relations \\(r(R)\\) and \\(s(S)\\) , such that \\(S \\subset R\\) , \\(r\\div s\\) is the largest relation \\(t(R-S)\\) such that \\(t\\times s \\subsetneqq r\\) We can write \\(r\\div s\\) as \\[ \\begin{align*} temp1 & \\leftarrow \\Pi_{R-S}(r)\\\\ temp2 & \\leftarrow \\Pi_{R-S}((temp1 \\times s)- \\Pi_{R-S,S}(r))\\\\ result & = temp1 - temp2 \\end{align*} \\] Division Example Aggregate Functions and Operations \u00b6 Aggregation function \uff08\u805a\u5408\u51fd\u6570\uff09takes a collection of values and returns a single value as a result. avg : average value min : minimum value max : maximum value sum : sum of values count : number of values Aggregate operation in relational algebra \\(G_1,G_2,\\ldots,G_n \\mathcal{G}_{F_1(A_1),\\ldots F_n(A_n)}(E)\\) Aggregate Operation Example \u5206\u7ec4\u7ed3\u679c\u6ca1\u6709\u540d\u5b57\uff0c\u53ef\u4ee5\u7528 rename \u6216\u8005 as \u8fdb\u884c\u6539\u540d\u3002 e.g. dept_name G avg(salary) as avg_sal (instructor) Multiset Relational Algebra \u00b6 \u5173\u7cfb\u4ee3\u6570\u4e2d\uff0c\u6211\u4eec\u8981\u6c42\u5173\u7cfb\u8981\u662f\u4e00\u4e2a\u4e25\u683c\u7684\u96c6\u5408\u3002 \u4f46\u5b9e\u9645\u6570\u636e\u5e93\u4e2d\u5e76\u4e0d\u662f\uff0c\u800c\u662f\u4e00\u4e2a\u591a\u91cd\u96c6\uff0c\u5141\u8bb8\u6709\u91cd\u590d\u5143\u7d20\u5b58\u5728\u3002 \u56e0\u4e3a\u4e00\u4e9b\u64cd\u4f5c\u7684\u4e2d\u95f4\u7ed3\u679c\u4f1a\u5e26\u6765\u91cd\u590d\u5143\u7d20\uff0c\u8981\u4fdd\u6301\u96c6\u5408\u7279\u6027\u5f00\u9500\u5f88\u5927\uff0c\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e2d\u4e0d\u4f1a\u53bb\u91cd \u3002 SQL and Relational Algebra \u00b6 select A1, A2, ... An from r1, r2, ... rm where P is equivalent to \\(\\Pi_{A_1,\\ldots, A_n}(\\sigma_P(r_1\\times r_2\\ldots r_m))\\) select A1, A2, sum(A3) from r1, r2, ... rm where P group by A1, A2 is equivalent to \\(A_1, A_2 \\mathcal{G} sum(A_3)(\\sigma_P(r_1\\times r_2\\times\\ldots r_m))\\) \u8fd9\u91cc\u6309 \\(A_1,A_2\\) \u5206\u7ec4\uff0c\u90a3\u4e48\u7ed3\u679c\u7684\u8868\u4e2d\u4f1a\u6709 \\(A_1,A_2,sum(A_3)\\) \u4e09\u5217\uff08\u5206\u7ec4\u4f9d\u636e+\u5206\u7ec4\u540e\u7684\u805a\u5408\u7ed3\u679c\uff09\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7684\u5c31\u662f\u8fd9\u4e09\u5217\uff0c\u6240\u4ee5\u5206\u7ec4\u5373\u53ef\u3002\u4f46\u662f\u5047\u8bbe\u6211\u4eec\u53ea\u9700\u8981 \\(A_1, sumA3\\) \u90a3\u4e48\u6700\u540e\u8fd8\u9700\u8981\u6295\u5f71\u3002","title":"\u5173\u7cfb\u6a21\u578b"},{"location":"DB/db2/#relational-model","text":"","title":"Relational Model"},{"location":"DB/db2/#structure-of-relational-databases","text":"","title":"Structure of Relational Databases"},{"location":"DB/db2/#concepts","text":"Formally, given set \\(D_1, D_2, \\ldots, D_n\\) a relation \\(r\\) is a subset of \\(D_1\\times D_2\\times \\ldots D_n\\) . Thus a relation is a set of n-tuple \\((a_1,a_2,\\ldots,a_n)\\) where each \\(a_i\\in D_i\\) . \\(A_1,A_2,\\ldots,A_n\\) are attributes . \\(R=(A_1,A_2,\\ldots,A_n)\\) is a relation schema . e.g. instructor = (ID, name, dept_name, salary). A relation instance \\(r\\) defined over schema R is denoted by \\(r(R)\\) . \u56e0\u4e3a\u5173\u7cfb\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u6240\u4ee5\u5173\u7cfb\u90fd\u662f\u65e0\u5e8f\u7684\u3002","title":"Concepts"},{"location":"DB/db2/#attributes","text":"The set of allowed values for each attribute is called the domain (\u57df)of the attribute Attribute values are (normally) required to be atomic (\u539f\u5b50\u7684); that is, indivisible The special value null (\u7a7a\u503c) is a member of every domain","title":"Attributes"},{"location":"DB/db2/#database-schema","text":"Database schema -- is the logical structure of the database. Database instance -- is a snapshot of the data in the database at a given instant in time. Example schema \u662f\u62bd\u8c61\u7684\u5b9a\u4e49, instance \u662f\u5177\u4f53\u7684\u5b9e\u4f8b\u3002","title":"Database Schema"},{"location":"DB/db2/#keys","text":"Let \\(K\\subsetneqq R\\) \\(K\\) is a superkey (\u8d85\u952e) of \\(R\\) if values for K are sufficient to identify (\u552f\u4e00\u786e\u5b9a) a unique tuple of each possible relation \\(r(R)\\) e.g. \\(\\{ID\\}\\) or \\(\\{ID, name\\}\\) Superkey \\(K\\) is a candidate key (\u5019\u9009\u952e) if \\(K\\) is minimal. \u5373 \\(K\\) \u4e2d\u6ca1\u6709\u5197\u4f59\u5c5e\u6027 One of the candidate keys is selected to be the primary key (\u4e3b\u952e) . Foreign key (\u5916\u952e) Relation \\(r_1\\) may include among its attributes the primary key of another relation \\(r_2\\) . This attribute is called a foreign key from \\(r_1\\) , referencing \\(r_2\\) . \u7c7b\u4f3c\u4e8e\u6307\u9488\uff0c\u5916\u952e\u9650\u5236\u5c31\u662f\u5173\u7cfb \\(r_1\\) \u5f15\u7528\u7684\u4e3b\u952e\u5fc5\u987b\u5728\u5173\u7cfb \\(r_2\\) \u4e2d\u51fa\u73b0\u3002 Example \u5de6\u4fa7\u8868\u7684\u8001\u5e08 ID \u5fc5\u987b\u51fa\u73b0\u5728\u53f3\u4fa7\u8868\u4e2d\u3002 Why we need foreign key constraint? \u6570\u636e\u5e93\u662f\u652f\u6301\u7531\u5b8c\u6574\u7ea6\u675f\u6761\u4ef6\u5b9a\u4e49\u51fa\u6765\u7684\uff0c\u5e76\u7ef4\u62a4\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\u3002\u5219\u5f53\u6211\u4eec\u5b9a\u4e49\u5916\u952e\u540e\uff0c\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u9ec4\u8272\u6761\u76ee\u662f\u4e0d\u4f1a\u51fa\u73b0\u7684\u3002 Referential integrity (\u53c2\u7167\u5b8c\u6574\u6027) \u7c7b\u4f3c\u4e8e\u5916\u952e\u9650\u5236\uff0c\u4f46\u4e0d\u5c40\u9650\u4e8e\u4e3b\u952e\u3002 Example \u8fd9\u91cc \\(time_slot_id\\) \u5e76\u4e0d\u662f\u5173\u7cfb \\(r_2\\) \u7684\u4e3b\u952e\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u662f\u5916\u952e\u9650\u5236\u3002 Example course \u6307\u8bfe\u7a0b\u4fe1\u606f\uff0c\u65e0\u8bba\u662f\u5426\u5f00\u8bfe\uff0c\u90fd\u4f1a\u6709\u5176\u5b9a\u4e49\u3002 section \u8868\u793a\u6559\u5b66\u73ed\uff0c\u771f\u6b63\u5f00\u8bfe\u65f6\u5c31\u6709\u76f8\u5e94\u7684\u5b9e\u4f8b\u3002\uff08\u7c7b\u6bd4\u4e8e\u9ad8\u94c1\u7684\u5217\u8f66\u53f7\uff0c\u548c\u6bcf\u5929\u5bf9\u5e94\u7684\u73ed\u6b21\uff09 teachers \u5177\u4f53\u6559\u54ea\u4e2a\u6559\u5b66\u73ed\u7684\u8001\u5e08 takes \u8868\u793a\u5b66\u751f\u6ce8\u518c\u8bfe\u7a0b time_slot \u8868\u793a\u4e00\u95e8\u8bfe\u7684\u5177\u4f53\u4e0a\u8bfe\u65f6\u95f4\u6bb5\uff0c\u5982\u6570\u636e\u5e93\u5728\u5468\u4e00 3, 4, 5 \u8282; \u5468\u4e00 7, 8 \u8282\u3002 \u4e0a\u56fe\u4e2d\u7ea2\u7ebf\u8868\u793a\u5f15\u7528\u5b8c\u6574\u6027\u7684\u7ea6\u675f\uff1b\u9ed1\u7ebf\u8868\u793a\u5916\u952e\u7ea6\u675f\u3002","title":"Keys"},{"location":"DB/db2/#relational-algebra","text":"Six basic operators select: \\(\\sigma\\) project: \\(\\Pi\\) union: \\(\\cup\\) set difference: \\(-\\) Cartesian product(\u7b1b\u5361\u5c14\u79ef): \\(\\times\\) rename: \\(\\rho\\)","title":"Relational Algebra"},{"location":"DB/db2/#select","text":"\\(\\sigma_p(r)=\\{t|t\\in r\\ and\\ p(t)\\}\\) , where \\(p\\) is called selection predicate . Select Example","title":"Select"},{"location":"DB/db2/#project","text":"The project operation is a unary operation that returns its argument relation, with certain attributes left out. \\(\\prod_{A_1,A_2,\\ldots, A_k}(r)\\) where \\(A_i\\) are attribute names and \\(r\\) is a relation name. The result is defined as the relation of k columns obtained by erasing the columns that are not listed. \u4f1a\u5bf9\u7ed3\u679c\u8fdb\u884c\u53bb\u91cd\u3002 Projection Example","title":"Project"},{"location":"DB/db2/#union","text":"The union operation allows us to combine two relations. \\(r\\cup s = \\{t| t\\in r \\ or \\ t\\in s\\}\\) \\(r\\) and \\(s\\) must have the same arity (\u5143\u6570) (same number f attributes) The attribute domains must be compatible \u5f53\u5c5e\u6027\u6709\u5173\u8054\u7c7b\u578b\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8f93\u5165 \\(i\\) , \u4e24\u4e2a\u8f93\u5165\u5173\u7cfb\u7684\u7b2c \\(i\\) \u4e2a\u5c5e\u6027\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\u3002 Projection Example","title":"Union"},{"location":"DB/db2/#set-difference","text":"The set-difference operation allows us to find tuples that are in one relation but are not in another. \\(r-s=\\{t|t\\in r\\ and\\ t\\notin s\\}\\) Set differences must be taken between compatible relations. Projection Example","title":"Set Difference"},{"location":"DB/db2/#cartesian-product","text":"The Cartesian-product operation (denoted by \\(\\times\\) ) allows us to combine information from any two relations. \\(r\\times s =\\{t\\ q|t\\in r\\ and\\ q\\in s\\}\\) Projection Example","title":"Cartesian-Product"},{"location":"DB/db2/#renamen","text":"Allows us to refer to a relation by more than one name. \\(\\rho_X(E)\\) Composition of Operations 1 Find the names of all instructors in the Physics department, along with the course_id of all courses they have taught. \u8fd9\u4e24\u6761\u8bed\u53e5\u542b\u4e49\u4e00\u6837\uff0c\u4f46\u7b2c\u4e8c\u6761\u6211\u4eec\u5148\u8fdb\u884c\u4e86\u4e00\u6b21 select, \u6761\u76ee\u5c11\u4e86\u66f4\u9ad8\u6548\u3002 Composition of Operations 2 Find the largest salary in the university. find instructor salaries that are less than some other instructor salary ( i.e. not maximum) using a copy of instructor under a new name \\(d\\) . \\(\\prod_{instructor.salary}(\\sigma_{instructor.salary<d.salary}(instructor \\times \\rho_d(instructor)))\\) find the largest salary \\(\\prod_{instructor}-\\prod_{instructor.salary}(\\sigma_{instructor.salary}<d.salary(instructor\\times \\rho_d(instructor)))\\) \u6211\u4eec\u7b2c\u4e00\u6b65\u5c06\u4e24\u4e2a\u5173\u7cfb\u62fc\u8d77\u6765\u4e4b\u540e\uff0c\u9650\u5b9a instructor \u7684\u5de5\u8d44\u5c0f\u4e8e d, \u968f\u540e\u6295\u5f71\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u4e0d\u662f\u6700\u5927\u503c\u7684\u85aa\u6c34\u3002\uff08\u56e0\u4e3a\u4efb\u4f55\u4e0d\u662f\u6700\u5927\u503c\u7684\u85aa\u6c34\u90fd\u4f1a\u5728\u7b1b\u5361\u5c14\u79ef select \u540e\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd9\u6837\u6295\u5f71\u4e4b\u540e\u4ecd\u4f1a\u5b58\u5728\u3002\u4f46\u6700\u5927\u503c\u5c31\u4e0d\u4f1a\u6709\u5143\u7ec4\u5b58\u5728\uff09\uff0c\u6700\u540e\u7528\u5168\u96c6\u51cf\u6389\u5373\u53ef\u3002","title":"Rename=n"},{"location":"DB/db2/#additional-operations","text":"Set intersection: \\(r \\cap s\\) Natural join: \\(r\\bowtie s\\) Assignment: \\(\\leftarrow\\) Outer join : \\(r \\rtimes s\\) , \\(r \\ltimes s\\) , \\(r\\) \u27d7 \\(s\\) Division Operator: \\(r \\div s\\)","title":"Additional Operations"},{"location":"DB/db2/#set-intersection","text":"The set-intersection operation allows us to find tuples that are in both the input relations. \\(r\\cap s=\\{t| t\\in r\\ and\\ t\\in s\\}\\) \\(r, s\\) have the same arity attributes of \\(r\\) and s are compatible Set-Intersection Operation Example","title":"Set-Intersection"},{"location":"DB/db2/#natural-join-operation","text":"Let r and s be relations on schemas R and S respectively. Then, \\(r\\bowtie s\\) is a relation on schema \\(R \\cup S\\) obtained as follows: Consider each pair of tuples \\(t_r\\) from \\(r\\) and \\(t_s\\) from \\(s\\) . If \\(t_r\\) and \\(t_s\\) have the same value on each of the attributes in \\(R \\cap S\\) , add a tuple $t $ to the result, where \\(t\\) has the same value as \\(t_r\\) on \\(r\\) \\(t\\) has the same value as \\(t_s\\) on \\(s\\) \u5373\u5171\u540c\u5c5e\u6027\u8981\u6709\u76f8\u540c\u7684\u503c\uff0c\u624d\u80fd\u5728\u62fc\u63a5\u540e\u7684\u7ed3\u679c\u4e2d\u4fdd\u7559\u3002 \u5bf9\u4e58\u6cd5\u7684\u6269\u5c55\uff0c\u76f8\u5f53\u4e8e\u5148 \\(\\times\\) \u518d select, \u6700\u540e project. Natural Join Example Theta Join \\(r\\bowtie_\\theta s=\\sigma_\\theta (r\\times s)\\) \u6761\u4ef6\u8fde\u63a5","title":"Natural-Join Operation"},{"location":"DB/db2/#outer-join","text":"Computes the join and then adds tuples form one relation that does not match tuples in the other relation to the result of the join. Uses null values : null signifies that the value is unknown or does not exist All comparisons involving null are (roughly speaking) false by definition Outer join can be expressed using basic operations. \\(r\\rtimes s=(r\\bowtie s)\\cup (r-\\cap_R(r\\bowtie s)\\times \\{null,\\ldots,null\\})\\) \\(r\\ltimes s=(r\\bowtie s)\\cup \\{null,\\ldots,null\\}\\times (s-\\cap_R(r\\bowtie s))\\) \\(r\\) \u27d7 \\(s\\) \\(=(r\\bowtie s)\\cup (r-\\cap_R(r\\bowtie s))\\times \\{(null, \\ldots)\\}\\cup\\{(null,\\ldots,null)\\}\\times (s-\\cap_s(r\\bowtie s))\\) Outer Join Example","title":"Outer Join"},{"location":"DB/db2/#semijoin","text":"\\(r\\ltimes_\\theta s\\) \u4fdd\u7559 \\(r\\) \u4e2d\u80fd\u4e0e \\(s\\) \u76f8\u8fde\u7684\u5143\u7ec4\u3002 Semijoin Example","title":"Semijoin"},{"location":"DB/db2/#division","text":"Given relations \\(r(R)\\) and \\(s(S)\\) , such that \\(S \\subset R\\) , \\(r\\div s\\) is the largest relation \\(t(R-S)\\) such that \\(t\\times s \\subsetneqq r\\) We can write \\(r\\div s\\) as \\[ \\begin{align*} temp1 & \\leftarrow \\Pi_{R-S}(r)\\\\ temp2 & \\leftarrow \\Pi_{R-S}((temp1 \\times s)- \\Pi_{R-S,S}(r))\\\\ result & = temp1 - temp2 \\end{align*} \\] Division Example","title":"Division"},{"location":"DB/db2/#aggregate-functions-and-operations","text":"Aggregation function \uff08\u805a\u5408\u51fd\u6570\uff09takes a collection of values and returns a single value as a result. avg : average value min : minimum value max : maximum value sum : sum of values count : number of values Aggregate operation in relational algebra \\(G_1,G_2,\\ldots,G_n \\mathcal{G}_{F_1(A_1),\\ldots F_n(A_n)}(E)\\) Aggregate Operation Example \u5206\u7ec4\u7ed3\u679c\u6ca1\u6709\u540d\u5b57\uff0c\u53ef\u4ee5\u7528 rename \u6216\u8005 as \u8fdb\u884c\u6539\u540d\u3002 e.g. dept_name G avg(salary) as avg_sal (instructor)","title":"Aggregate Functions and Operations"},{"location":"DB/db2/#multiset-relational-algebra","text":"\u5173\u7cfb\u4ee3\u6570\u4e2d\uff0c\u6211\u4eec\u8981\u6c42\u5173\u7cfb\u8981\u662f\u4e00\u4e2a\u4e25\u683c\u7684\u96c6\u5408\u3002 \u4f46\u5b9e\u9645\u6570\u636e\u5e93\u4e2d\u5e76\u4e0d\u662f\uff0c\u800c\u662f\u4e00\u4e2a\u591a\u91cd\u96c6\uff0c\u5141\u8bb8\u6709\u91cd\u590d\u5143\u7d20\u5b58\u5728\u3002 \u56e0\u4e3a\u4e00\u4e9b\u64cd\u4f5c\u7684\u4e2d\u95f4\u7ed3\u679c\u4f1a\u5e26\u6765\u91cd\u590d\u5143\u7d20\uff0c\u8981\u4fdd\u6301\u96c6\u5408\u7279\u6027\u5f00\u9500\u5f88\u5927\uff0c\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e2d\u4e0d\u4f1a\u53bb\u91cd \u3002","title":"Multiset Relational Algebra"},{"location":"DB/db2/#sql-and-relational-algebra","text":"select A1, A2, ... An from r1, r2, ... rm where P is equivalent to \\(\\Pi_{A_1,\\ldots, A_n}(\\sigma_P(r_1\\times r_2\\ldots r_m))\\) select A1, A2, sum(A3) from r1, r2, ... rm where P group by A1, A2 is equivalent to \\(A_1, A_2 \\mathcal{G} sum(A_3)(\\sigma_P(r_1\\times r_2\\times\\ldots r_m))\\) \u8fd9\u91cc\u6309 \\(A_1,A_2\\) \u5206\u7ec4\uff0c\u90a3\u4e48\u7ed3\u679c\u7684\u8868\u4e2d\u4f1a\u6709 \\(A_1,A_2,sum(A_3)\\) \u4e09\u5217\uff08\u5206\u7ec4\u4f9d\u636e+\u5206\u7ec4\u540e\u7684\u805a\u5408\u7ed3\u679c\uff09\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7684\u5c31\u662f\u8fd9\u4e09\u5217\uff0c\u6240\u4ee5\u5206\u7ec4\u5373\u53ef\u3002\u4f46\u662f\u5047\u8bbe\u6211\u4eec\u53ea\u9700\u8981 \\(A_1, sumA3\\) \u90a3\u4e48\u6700\u540e\u8fd8\u9700\u8981\u6295\u5f71\u3002","title":"SQL and Relational Algebra"},{"location":"DB/db3/","text":"Introduction to SQL \u00b6 Abstract Data Definition Basic Query Structure Additional Basic Operations Set Operations Null Values Aggregate Functions Nested Subqueries Modification of the Database Data Definition \u00b6 Domain Types in SQL \u00b6 char(n). Fixed length character string, with user-specified length n. \u5b9a\u957f\u5b57\u7b26\u4e32. C \u8bed\u8a00\u91cc\u5b57\u7b26\u4e32\u7ed3\u5c3e\u6709 \\0 , \u4f46\u6570\u636e\u5e93\u91cc\u6ca1\u6709\uff0c\u957f\u5ea6\u7531\u5b9a\u4e49\u800c\u5f97\u3002 varchar(n). Variable length character strings, with user-specified maximum length n. \u4e0d\u5b9a\u957f\u5b57\u7b26\u4e32\u3002\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u6bd4\u8f83\u53ef\u80fd\u6709\u95ee\u9898\uff08\u6bd4\u5982\u5b9a\u957f\u548c\u4e0d\u5b9a\u957f\u7684\u5b57\u7b26\u4e32\uff09 int. Integer (a finite subset of the integers that is machine-dependent). smallint. Small integer (a machine-dependent subset of the integer domain type). numeric(p,d). Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point. p \u8868\u793a\u6709\u6548\u6570\u5b57\u4f4d\u6570, d \u8868\u793a\u5c0f\u6570\u70b9\u540e\u591a\u5c11\u4f4d\u3002 e.g. number(3,1) allows 44.5 to be store exactly, but neither 444.5 or 0.32 real, double precision. Floating point and double-precision floating point numbers, with machine-dependent precision. float(n). Floating point number, with user-specified precision of at least n digits. Built-in Data Types in SQL \u00b6 date : Dates, containing a (4 digit) year, month and date e.g. date \u20182005-7-27\u2019 time : Time of day, in hours, minutes and seconds. e.g. time \u201809:00:30\u2019 time \u201809:00:30.75\u2019 timestamp: date plus time of day e.g. timestamp \u20182005-7-27 09:00:30.75\u2019 interval : period of time e.g. interval \u20181\u2019 day Subtracting a date/time/timestamp value from another gives an interval value. Interval values can be added to date/time/timestamp values built-in date, time functions: current_date(), current_time(), year(x), month(x), day(x), hour(x), minute(x), second(x) Create Table Construct \u00b6 An SQL relation is defined using the create table command: create table r ( A1 D1 , A2 D2 , ..., An Dn , ( integrity - constraint1 ), .., ( integrity - constraintk )) \\(r\\) is the name of the relation each \\(Ai\\) is an attribute name in the schema of relation \\(r\\) \\(Di\\) is the data type of values in the domain of attribute \\(Ai\\) Integrity Constraints in Create Table not null primary key \\((A_1,\\ldots,A_n)\\) \u4e0d\u80fd\u4e3a\u7a7a; \u8868\u5185\u4e0d\u80fd\u6709\u76f8\u540c\u7684 keys. \u5426\u5219\u8fd9\u6837\u7684\u6570\u636e\u662f\u63d2\u5165\u4e0d\u8fdb\u53bb\u7684\u3002 foreign key \\((A_m,\\ldots,A_n)\\) references r \u9690\u542b\uff1a\u5f15\u7528\u5bf9\u5e94\u8868\u7684\u4e3b\u952e\u3002 \u5982\u679c\u4e0d\u7b26\u5408\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\uff0c\u63d2\u5165\u53ef\u80fd\u4f1a\u5931\u8d25\u3002 Example \u53ef\u4ee5\u7ed9\u4e00\u4e2a\u7f3a\u7701\u503c e.g. \u3000 default 0 Example sec_id can be dropped from primary key above, to ensure a student cannot be registered for two sections of the same course in the same semester \u5982\u679c\u5f15\u7528\u7684\u8868\u4e2d\u6709\u6761\u76ee\u88ab\u5220\u9664\uff0c\u53ef\u80fd\u4f1a\u7834\u574f\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\u3002\u6709\u4e0b\u9762\u7684\u65b9\u6cd5\uff1a restrict : \u5982\u679c\u6709\u6761\u76ee\u662f\u88ab\u5f15\u7528\u7684\uff0c\u90a3\u4e48\u4e0d\u5141\u8bb8\u5220\u9664\u3002 cascade : \u5f15\u7528\u7684\u6761\u76ee\u88ab\u5220\u4e86\u4e4b\u540e\uff0c\u5f15\u7528\u8005\u4e5f\u4e00\u5e76\u5220\u9664 set null : \u5f15\u7528\u8005\u7684\u6307\u9488\u8bbe\u4e3a null . set default \u5982\u679c\u5f15\u7528\u7684\u8868\u4e2d\u6709\u66f4\u65b0\uff0c\u4e5f\u6709\u7c7b\u4f3c\u4e0a\u9762\u7684\u56db\u79cd\u65b9\u6cd5\u3002 \u5728 create table \u4e2d\u5b9a\u4e49 on delete cascade |set null |restrict |set default on update cascade |set null |restrict |set default Drop and Alter Table Constructs \u00b6 drop table student Deletes the table and its contents \u628a\u5185\u5bb9\u548c\u8868\u5168\u5220\u4e86\uff0c\u4e4b\u540e\u4e0d\u80fd\u518d\u5f80\u8868\u91cc\u63d2\u5165\u3002 delete from student Deletes all contents of table, but retains table alter table \u53ef\u4ee5\u52a8\u6001\u4fee\u6539\u8868\u7684\u5b9a\u4e49 alter table r add A D where A is the name of the attribute to be added to relation r and D is the domain of A. All tuples in the relation are assigned null as the value for the new attribute. e.g. alter table student add resume varchar(256); \u8fd8\u53ef\u4ee5\u589e\u52a0\u5916\u952e\u7ea6\u675f\u6761\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u5220\u6389 alter table r drop A where A is the name of an attribute of relation r Dropping of attributes not supported by many databases \u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u8868\uff0c\u7136\u540e\u628a\u9664\u4e86\u8981\u5220\u7684\u5217\u4ee5\u5916\u7684\u5217\u642c\u79fb\u8fc7\u53bb\u3002 \u5173\u7cfb\u6570\u636e\u5e93\u7684\u4e09\u5c42\u62bd\u8c61 \u7528\u6237\u5c42\uff1a\u7531 DML \u5b9a\u4e49\u64cd\u4f5c, \u5982 select \u8bed\u53e5\u3002 \u903b\u8f91\u5c42\uff1a\u7531 create table \u51b3\u5b9a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u8868\u7684\u5143\u7d20\uff0c\u4ee5\u53ca\u5404\u79cd\u952e\uff0c\u6784\u6210\u4e86\u6a21\u5f0f\u56fe\u3002 Basic Query Structure \u00b6 The select Clause \u00b6 The select clause list the attributes desired in the result of a query. SQL names are case insensitive \u5927\u5c0f\u5199\u4e0d\u654f\u611f\u3002\uff08\u5c5e\u6027\u540d\u5b57\u3001\u8868\u7684\u540d\u5b57\u7b49\uff09 To force the elimination of duplicates, insert the keyword distinct after select. e.g. select distinct dept_name from instructor \u53ef\u4ee5\u52a0 all \u8868\u793a\u4e0d\u53bb\u91cd\uff0c \u52a0\u4e0d\u52a0\u65e0\u6240\u8c13 An asterisk in the select clause denotes \u201call attributes\u201d e.g. select * from instructor The select clause can contain arithmetic expressions involving the operation, +, \u2013, \\(\\div\\) , and /, and operating on constants or attributes of tuples. \u53ef\u4ee5\u6709\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97 e.g. select ID, name, salary/12 from instructor The where Clause \u00b6 The where clause specifies conditions that the result must satisfy. Corresponds to the selection predicate of the relational algebra. SQL includes a between comparison operator e.g. select name from instructor where salary between 90000 and 100000 Tuple comparison \u5143\u7ec4\u76f8\u7b49\u7b49\u4ef7\u4e8e\u5404\u4e2a\u5143\u7d20\u90fd\u76f8\u7b49\u3002 e.g. select name, course_id from instructor, teaches where (instructor.ID, dept_name) = (teaches.ID, \u2019Biology\u2019); The from clause \u00b6 The from clause lists the relations involved in the query. Corresponds to the Cartesian product operation of the relational algebra. Natural Join \u00b6 e.g. select * from instructor natural join teaches; e.g. select name, course_id from instructor, teaches where instructor.ID = teaches.ID; select name, course_id from instructor natural join teaches; \u4e0a\u9762\u4e24\u6761\u8bed\u53e5\u662f\u7b49\u4ef7\u7684\u3002 Unrelated attributes with same name which get equated incorrectly! Example course(course_id,title, dept_name,credits\uff09 , teaches(ID, course_id,sec_id,semester, year) , instructor(ID, name, dept_name,salary\uff09 \u8fd9\u91cc\u7684 department \u542b\u4e49\u5404\u6709\u4e0d\u540c\uff0c\u4e0d\u80fd\u76f4\u63a5\u81ea\u7136\u8fde\u63a5\u3002 \u53ef\u4ee5\u5199\u6210 select name, title from (instructor natural join teaches\uff09join course using(course_id); \u5373\u89c4\u5b9a\u8fde\u63a5\u7684\u5c5e\u6027\uff0c\u5bf9\u5e94\u4e8e \\(\\sigma_\\theta\\) Find students who takes courses across his/her department. \u53ef\u5199\u4f5c select distinct student . id from ( student natural join takes ) join course using ( course_id \uff09 where student . dept_name <> course . dept_name The Rename Operation \u00b6 The SQL allows renaming relations and attributes using the as clause. old-name as new-name e.g. select distinct T. name from instructor as T, instructor as S where T.salary > S.salary and S.dept_name = \u2018Comp. Sci.\u2019 Keyword as is optional and may be omitted. String Operations \u00b6 SQL includes a string-matching operator for comparisons on character strings. The operator like uses patterns that are described using two special characters. \u6ce8\u610f\u5355\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\u3002 percent (%) . The % character matches any substring. e.g. select name from instructor where name like '%dar%'; \u627e\u540d\u5b57\u91cc\u9762\u542b\u6709 dar \u7684\u5b57\u7b26\u4e32\u3002 underscore (_) . The _ character matches any character. Match the string \u5339\u914d\u5b57\u7b26\u4e32 '100 %' \u4f46\u662f % \u7b26\u53f7\u88ab\u6211\u4eec\u4f5c\u4e3a\u4e86\u901a\u914d\u7b26\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7528\u5230\u8f6c\u4e49\u7b26 \\ . \\% \u5373\u5c06 % \u4f5c\u4e3a\u6b63\u5e38\u5b57\u7b26\u5339\u914d\u3002 \\ \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u57fa\u672c\u7b26\u53f7\uff0c\u6211\u4eec\u9700\u8981\u5728\u540e\u9762\u5199\u51fa escape \u8868\u793a\u5176\u5728\u8fd9\u91cc\u4f5c\u4e3a\u8f6c\u4e49\u7b26\u3002\u7c7b\u4f3c\u5730\u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u8f6c\u4e49\u7b26\u5b9a\u4e49\u4e3a # . like \u2018 100 \\ % ' escape ' \\ ' like \u2018100 \\%' like \u2018 100 #% ' escape \u2018#' SQL supports a variety of string operations such as concatenation (using || ) converting from upper to lower case (and vice versa) finding string length, extracting substrings, etc. Ordering the Display of Tuples \u00b6 \u5173\u7cfb\u662f\u65e0\u5e8f\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u80fd\u89c4\u5b9a\u663e\u793a\u51fa\u6765\u7684\u987a\u5e8f\u3002 We may specify desc for descending order or asc for ascending order, for each attribute; ascending order is the default. e.g. order by name desc \u53ef\u4ee5\u6392\u5e8f\u7684\u7c7b\u578b\uff0c\u5982\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3002 Can sort on multiple attributes e.g. order by dept_name, name \u5148\u6309\u7b2c\u4e00\u4e2a\u6392\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\u518d\u6309\u7b2c\u4e8c\u4e2a\u6392\u3002 The limit Clause \u00b6 The limit clause can be used to constrain the number of rows returned by the select statement. limit clause takes one or two numeric arguments, which must both be nonnegative integer constants: limit offset, row_count limit row_count == limit 0, row_count e.g. select name from instructor order by salary desc limit 3\uff1b // limit 0,3 Set Operations \u00b6 union, intersect, except \u662f\u4e25\u683c\u7684\u96c6\u5408\u64cd\u4f5c\uff0c\u4f1a\u5bf9\u7ed3\u679c\u53bb\u91cd. union all , intersect all and except all . \u4fdd\u6301\u591a\u91cd\u96c6\u3002 Example Null Values \u00b6 null signifies an unknown value or that a value does not exist . The result of any arithmetic expression involving null is null. e.g. 5 + null returns null The predicate is null can be used to check for null values. e.g. Find all instructors whose salary is null. select name from instructor where salary is null Comparisons with null values return the special truth value: unknown . Result of select predicate is treated as false if it evaluates to unknown Aggregate Functions \u00b6 Example \u6ce8\u610f\u5728 select \u91cc\u51fa\u73b0\u7684\u5c5e\u6027\uff0c\u9664\u4e86\u7edf\u8ba1\u51fd\u6570\u4ee5\u5916\uff0c\u4e00\u5b9a\u8981\u662f\u5206\u7ec4\u5c5e\u6027\u91cc\u51fa\u73b0\u8fc7\u7684\u3002 Having Clause \u00b6 \u5bf9\u5206\u7ec4\u540e\u7684\u7ec4\u8fdb\u884c\u7b5b\u9009\u3002 e.g. select dept_name , count ( * ) as cnt from instructor where salary >= 100000 group by dept_name having count ( * ) > 10 order by cnt ; predicates in the having clause are applied after the formation of groups whereas predicates in the where clause are applied before forming groups . Null Values and Aggregates \u00b6 select sum (salary) from instructor Above statement ignores null amounts Result is null if there is no non-null amount All aggregate operations except count(*) ignore tuples with null values on the aggregated attributes Arithmetric expression with Aggregate functions \u7b2c\u4e8c\u4e2a\u8868\u793a\u91cd\u540d\u7387\u5c0f\u4e8e\u5343\u5206\u4e4b\u4e00\u7684\u7cfb\u3002 Nested Subqueries \u00b6 A subquery is a select-from-where expression that is nested within another query. Set Membership \u00b6 in, not in Example \u9664\u4e86\u5355\u4e2a\u5143\u7d20\u5916\uff0c\u5143\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528 in, not in Set Comparison \u00b6 some \u67d0\u4e9b\u6210\u5458 all \u6240\u6709\u6210\u5458 Example \u5de5\u8d44\u5927\u4e8e\u751f\u7269\u7cfb\u4e2d\u7684\u67d0\u4e9b\u8001\u5e08\u7684\u8001\u5e08. select name from instructor where salary > some ( select salary from instructor where dept_name = \u2019 Biology \u2019 ); Scalar Subquery \u00b6 Scalar (\u6807\u91cf) subquery is one which is used where a single value is expected. Example select name from instructor where salary * 10 > ( select budget from department where department . dept_name = instructor . dept_name ) \u8fd9\u91cc dept_name \u662f\u8fd9\u4e2a\u8868\u7684\u4e3b\u952e\uff0c\u53ea\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u4e0d\u7528 some, all \u7684\u3002 Runtime error if subquery returns more than one result tuple. Test for Empty Relations \u00b6 The exists construct returns the value true if the argument subquery is nonempty. exists r \\(\\Leftrightarrow r \\neq \\emptyset\\) not exists r \\(\\Leftrightarrow r = \\emptyset\\) Example 09FALL \u5f00\u7684\u8bfe\uff0c\u800c\u4e14 10SPRING \u4e5f\u5f00\u4e86\u8bfe\u3002 select course_id from section as S where semester = \u2019 Fall \u2019 and year = 2009 and exists ( select * from section as T where semester = \u2019 Spring \u2019 and year = 2010 and S . course_id = T . course_id ); Example Find all students who have taken all courses offered in the Biology department. SQL \u8bed\u53e5\u5f80\u5f80\u9700\u8981\u9006\u5411\u8003\u8651\uff0c\u5373\u627e\u5230\u8fd9\u6837\u7684\u5b66\u751f\uff0c\u4e0d\u5b58\u5728\u4ed6\u6ca1\u9009\u8fc7\u7684\u751f\u7269\u7cfb\u7684\u8bfe\u3002 select distinct S . ID , S . name from student as S where not exists ( ( select course_id from course where dept_name = \u2019 Biology \u2019 ) except ( select T . course_id from takes as T where S . ID = T . ID )); Test for Absence of Duplicate Tuples \u00b6 The unique construct tests whether a subquery has any duplicate tuples in its result. \u9a8c\u8bc1\u662f\u5426\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u800c\u975e\u591a\u91cd\u96c6\u3002 Evaluates to \u201ctrue\u201d on an empty set. \u53ef\u4ee5\u5c06 unique \u7406\u89e3\u4e3a at most once. Example \u5982\u679c\u4e0d\u52a0 exist, \u53ef\u80fd\u6709\u6ca1\u5f00\u8fc7\u7684\u8bfe\u4e5f\u88ab\u7b97\u8fdb\u53bb\u3002\u6211\u4eec\u8fd9\u91cc\u6c42\u5f97\u662f\u6070\u597d\u53ea\u5f00\u8fc7\u4e00\u6b21\u7684\u3002 Example \u4e5f\u53ef\u4ee5\u7528 group by count(*) > 1 \u5b9e\u73b0\u3002 With Clause \u00b6 The with clause provides a way of defining a temporary view whose definition is available only to the query in which the with clause occurs. \u6784\u9020\u4e00\u4e2a\u4e34\u65f6\u8868 Example Find all departments with the maximum budget. with max_budget ( value ) as ( select max ( budget ) from department ) select dept_name from department , max_budget where department . budget = max_budget . value ; Complex Queries using With Clause Modification of the Database \u00b6 Deletion \u00b6 Example Insertion \u00b6 Example \u7b2c\u4e8c\u79cd\u5199\u6cd5\uff0c\u53ef\u4ee5\u4e0d\u7528\u4e25\u683c\u6309\u7167\u5b9a\u4e49\u7684\u5143\u7d20\u987a\u5e8f\uff0c\u53ea\u8981\u548c\u81ea\u5df1\u5199\u7684\u5bf9\u5e94\u5373\u53ef\u3002 \u9664\u4e86\u57fa\u672c\u5199\u6cd5\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728 insert \u540e\u8ddf\u67e5\u8be2\u8bed\u53e5\uff0c\u628a\u67e5\u8be2\u7ed3\u679c\u63d2\u5165\u5230\u8868\u91cc\u53bb\u3002 Example Updates \u00b6 update ... set ... The order is important. So it can be done better using the case statement. Example","title":"SQL \u8bed\u8a00\u4ecb\u7ecd"},{"location":"DB/db3/#introduction-to-sql","text":"Abstract Data Definition Basic Query Structure Additional Basic Operations Set Operations Null Values Aggregate Functions Nested Subqueries Modification of the Database","title":"Introduction to SQL"},{"location":"DB/db3/#data-definition","text":"","title":"Data Definition"},{"location":"DB/db3/#domain-types-in-sql","text":"char(n). Fixed length character string, with user-specified length n. \u5b9a\u957f\u5b57\u7b26\u4e32. C \u8bed\u8a00\u91cc\u5b57\u7b26\u4e32\u7ed3\u5c3e\u6709 \\0 , \u4f46\u6570\u636e\u5e93\u91cc\u6ca1\u6709\uff0c\u957f\u5ea6\u7531\u5b9a\u4e49\u800c\u5f97\u3002 varchar(n). Variable length character strings, with user-specified maximum length n. \u4e0d\u5b9a\u957f\u5b57\u7b26\u4e32\u3002\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u6bd4\u8f83\u53ef\u80fd\u6709\u95ee\u9898\uff08\u6bd4\u5982\u5b9a\u957f\u548c\u4e0d\u5b9a\u957f\u7684\u5b57\u7b26\u4e32\uff09 int. Integer (a finite subset of the integers that is machine-dependent). smallint. Small integer (a machine-dependent subset of the integer domain type). numeric(p,d). Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point. p \u8868\u793a\u6709\u6548\u6570\u5b57\u4f4d\u6570, d \u8868\u793a\u5c0f\u6570\u70b9\u540e\u591a\u5c11\u4f4d\u3002 e.g. number(3,1) allows 44.5 to be store exactly, but neither 444.5 or 0.32 real, double precision. Floating point and double-precision floating point numbers, with machine-dependent precision. float(n). Floating point number, with user-specified precision of at least n digits.","title":"Domain Types in SQL"},{"location":"DB/db3/#built-in-data-types-in-sql","text":"date : Dates, containing a (4 digit) year, month and date e.g. date \u20182005-7-27\u2019 time : Time of day, in hours, minutes and seconds. e.g. time \u201809:00:30\u2019 time \u201809:00:30.75\u2019 timestamp: date plus time of day e.g. timestamp \u20182005-7-27 09:00:30.75\u2019 interval : period of time e.g. interval \u20181\u2019 day Subtracting a date/time/timestamp value from another gives an interval value. Interval values can be added to date/time/timestamp values built-in date, time functions: current_date(), current_time(), year(x), month(x), day(x), hour(x), minute(x), second(x)","title":"Built-in Data Types in SQL"},{"location":"DB/db3/#create-table-construct","text":"An SQL relation is defined using the create table command: create table r ( A1 D1 , A2 D2 , ..., An Dn , ( integrity - constraint1 ), .., ( integrity - constraintk )) \\(r\\) is the name of the relation each \\(Ai\\) is an attribute name in the schema of relation \\(r\\) \\(Di\\) is the data type of values in the domain of attribute \\(Ai\\) Integrity Constraints in Create Table not null primary key \\((A_1,\\ldots,A_n)\\) \u4e0d\u80fd\u4e3a\u7a7a; \u8868\u5185\u4e0d\u80fd\u6709\u76f8\u540c\u7684 keys. \u5426\u5219\u8fd9\u6837\u7684\u6570\u636e\u662f\u63d2\u5165\u4e0d\u8fdb\u53bb\u7684\u3002 foreign key \\((A_m,\\ldots,A_n)\\) references r \u9690\u542b\uff1a\u5f15\u7528\u5bf9\u5e94\u8868\u7684\u4e3b\u952e\u3002 \u5982\u679c\u4e0d\u7b26\u5408\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\uff0c\u63d2\u5165\u53ef\u80fd\u4f1a\u5931\u8d25\u3002 Example \u53ef\u4ee5\u7ed9\u4e00\u4e2a\u7f3a\u7701\u503c e.g. \u3000 default 0 Example sec_id can be dropped from primary key above, to ensure a student cannot be registered for two sections of the same course in the same semester \u5982\u679c\u5f15\u7528\u7684\u8868\u4e2d\u6709\u6761\u76ee\u88ab\u5220\u9664\uff0c\u53ef\u80fd\u4f1a\u7834\u574f\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\u3002\u6709\u4e0b\u9762\u7684\u65b9\u6cd5\uff1a restrict : \u5982\u679c\u6709\u6761\u76ee\u662f\u88ab\u5f15\u7528\u7684\uff0c\u90a3\u4e48\u4e0d\u5141\u8bb8\u5220\u9664\u3002 cascade : \u5f15\u7528\u7684\u6761\u76ee\u88ab\u5220\u4e86\u4e4b\u540e\uff0c\u5f15\u7528\u8005\u4e5f\u4e00\u5e76\u5220\u9664 set null : \u5f15\u7528\u8005\u7684\u6307\u9488\u8bbe\u4e3a null . set default \u5982\u679c\u5f15\u7528\u7684\u8868\u4e2d\u6709\u66f4\u65b0\uff0c\u4e5f\u6709\u7c7b\u4f3c\u4e0a\u9762\u7684\u56db\u79cd\u65b9\u6cd5\u3002 \u5728 create table \u4e2d\u5b9a\u4e49 on delete cascade |set null |restrict |set default on update cascade |set null |restrict |set default","title":"Create Table Construct"},{"location":"DB/db3/#drop-and-alter-table-constructs","text":"drop table student Deletes the table and its contents \u628a\u5185\u5bb9\u548c\u8868\u5168\u5220\u4e86\uff0c\u4e4b\u540e\u4e0d\u80fd\u518d\u5f80\u8868\u91cc\u63d2\u5165\u3002 delete from student Deletes all contents of table, but retains table alter table \u53ef\u4ee5\u52a8\u6001\u4fee\u6539\u8868\u7684\u5b9a\u4e49 alter table r add A D where A is the name of the attribute to be added to relation r and D is the domain of A. All tuples in the relation are assigned null as the value for the new attribute. e.g. alter table student add resume varchar(256); \u8fd8\u53ef\u4ee5\u589e\u52a0\u5916\u952e\u7ea6\u675f\u6761\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u5220\u6389 alter table r drop A where A is the name of an attribute of relation r Dropping of attributes not supported by many databases \u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u8868\uff0c\u7136\u540e\u628a\u9664\u4e86\u8981\u5220\u7684\u5217\u4ee5\u5916\u7684\u5217\u642c\u79fb\u8fc7\u53bb\u3002 \u5173\u7cfb\u6570\u636e\u5e93\u7684\u4e09\u5c42\u62bd\u8c61 \u7528\u6237\u5c42\uff1a\u7531 DML \u5b9a\u4e49\u64cd\u4f5c, \u5982 select \u8bed\u53e5\u3002 \u903b\u8f91\u5c42\uff1a\u7531 create table \u51b3\u5b9a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u8868\u7684\u5143\u7d20\uff0c\u4ee5\u53ca\u5404\u79cd\u952e\uff0c\u6784\u6210\u4e86\u6a21\u5f0f\u56fe\u3002","title":"Drop and Alter Table Constructs"},{"location":"DB/db3/#basic-query-structure","text":"","title":"Basic Query Structure"},{"location":"DB/db3/#the-select-clause","text":"The select clause list the attributes desired in the result of a query. SQL names are case insensitive \u5927\u5c0f\u5199\u4e0d\u654f\u611f\u3002\uff08\u5c5e\u6027\u540d\u5b57\u3001\u8868\u7684\u540d\u5b57\u7b49\uff09 To force the elimination of duplicates, insert the keyword distinct after select. e.g. select distinct dept_name from instructor \u53ef\u4ee5\u52a0 all \u8868\u793a\u4e0d\u53bb\u91cd\uff0c \u52a0\u4e0d\u52a0\u65e0\u6240\u8c13 An asterisk in the select clause denotes \u201call attributes\u201d e.g. select * from instructor The select clause can contain arithmetic expressions involving the operation, +, \u2013, \\(\\div\\) , and /, and operating on constants or attributes of tuples. \u53ef\u4ee5\u6709\u52a0\u51cf\u4e58\u9664\u8fd0\u7b97 e.g. select ID, name, salary/12 from instructor","title":"The select Clause"},{"location":"DB/db3/#the-where-clause","text":"The where clause specifies conditions that the result must satisfy. Corresponds to the selection predicate of the relational algebra. SQL includes a between comparison operator e.g. select name from instructor where salary between 90000 and 100000 Tuple comparison \u5143\u7ec4\u76f8\u7b49\u7b49\u4ef7\u4e8e\u5404\u4e2a\u5143\u7d20\u90fd\u76f8\u7b49\u3002 e.g. select name, course_id from instructor, teaches where (instructor.ID, dept_name) = (teaches.ID, \u2019Biology\u2019);","title":"The where Clause"},{"location":"DB/db3/#the-from-clause","text":"The from clause lists the relations involved in the query. Corresponds to the Cartesian product operation of the relational algebra.","title":"The from clause"},{"location":"DB/db3/#natural-join","text":"e.g. select * from instructor natural join teaches; e.g. select name, course_id from instructor, teaches where instructor.ID = teaches.ID; select name, course_id from instructor natural join teaches; \u4e0a\u9762\u4e24\u6761\u8bed\u53e5\u662f\u7b49\u4ef7\u7684\u3002 Unrelated attributes with same name which get equated incorrectly! Example course(course_id,title, dept_name,credits\uff09 , teaches(ID, course_id,sec_id,semester, year) , instructor(ID, name, dept_name,salary\uff09 \u8fd9\u91cc\u7684 department \u542b\u4e49\u5404\u6709\u4e0d\u540c\uff0c\u4e0d\u80fd\u76f4\u63a5\u81ea\u7136\u8fde\u63a5\u3002 \u53ef\u4ee5\u5199\u6210 select name, title from (instructor natural join teaches\uff09join course using(course_id); \u5373\u89c4\u5b9a\u8fde\u63a5\u7684\u5c5e\u6027\uff0c\u5bf9\u5e94\u4e8e \\(\\sigma_\\theta\\) Find students who takes courses across his/her department. \u53ef\u5199\u4f5c select distinct student . id from ( student natural join takes ) join course using ( course_id \uff09 where student . dept_name <> course . dept_name","title":"Natural Join"},{"location":"DB/db3/#the-rename-operation","text":"The SQL allows renaming relations and attributes using the as clause. old-name as new-name e.g. select distinct T. name from instructor as T, instructor as S where T.salary > S.salary and S.dept_name = \u2018Comp. Sci.\u2019 Keyword as is optional and may be omitted.","title":"The Rename Operation"},{"location":"DB/db3/#string-operations","text":"SQL includes a string-matching operator for comparisons on character strings. The operator like uses patterns that are described using two special characters. \u6ce8\u610f\u5355\u5f15\u53f7\u8868\u793a\u5b57\u7b26\u4e32\u3002 percent (%) . The % character matches any substring. e.g. select name from instructor where name like '%dar%'; \u627e\u540d\u5b57\u91cc\u9762\u542b\u6709 dar \u7684\u5b57\u7b26\u4e32\u3002 underscore (_) . The _ character matches any character. Match the string \u5339\u914d\u5b57\u7b26\u4e32 '100 %' \u4f46\u662f % \u7b26\u53f7\u88ab\u6211\u4eec\u4f5c\u4e3a\u4e86\u901a\u914d\u7b26\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7528\u5230\u8f6c\u4e49\u7b26 \\ . \\% \u5373\u5c06 % \u4f5c\u4e3a\u6b63\u5e38\u5b57\u7b26\u5339\u914d\u3002 \\ \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u57fa\u672c\u7b26\u53f7\uff0c\u6211\u4eec\u9700\u8981\u5728\u540e\u9762\u5199\u51fa escape \u8868\u793a\u5176\u5728\u8fd9\u91cc\u4f5c\u4e3a\u8f6c\u4e49\u7b26\u3002\u7c7b\u4f3c\u5730\u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u8f6c\u4e49\u7b26\u5b9a\u4e49\u4e3a # . like \u2018 100 \\ % ' escape ' \\ ' like \u2018100 \\%' like \u2018 100 #% ' escape \u2018#' SQL supports a variety of string operations such as concatenation (using || ) converting from upper to lower case (and vice versa) finding string length, extracting substrings, etc.","title":"String Operations"},{"location":"DB/db3/#ordering-the-display-of-tuples","text":"\u5173\u7cfb\u662f\u65e0\u5e8f\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u80fd\u89c4\u5b9a\u663e\u793a\u51fa\u6765\u7684\u987a\u5e8f\u3002 We may specify desc for descending order or asc for ascending order, for each attribute; ascending order is the default. e.g. order by name desc \u53ef\u4ee5\u6392\u5e8f\u7684\u7c7b\u578b\uff0c\u5982\u5b57\u7b26\u4e32\u3001\u6570\u5b57\u3002 Can sort on multiple attributes e.g. order by dept_name, name \u5148\u6309\u7b2c\u4e00\u4e2a\u6392\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\u518d\u6309\u7b2c\u4e8c\u4e2a\u6392\u3002","title":"Ordering the Display of Tuples"},{"location":"DB/db3/#the-limit-clause","text":"The limit clause can be used to constrain the number of rows returned by the select statement. limit clause takes one or two numeric arguments, which must both be nonnegative integer constants: limit offset, row_count limit row_count == limit 0, row_count e.g. select name from instructor order by salary desc limit 3\uff1b // limit 0,3","title":"The limit Clause"},{"location":"DB/db3/#set-operations","text":"union, intersect, except \u662f\u4e25\u683c\u7684\u96c6\u5408\u64cd\u4f5c\uff0c\u4f1a\u5bf9\u7ed3\u679c\u53bb\u91cd. union all , intersect all and except all . \u4fdd\u6301\u591a\u91cd\u96c6\u3002 Example","title":"Set Operations"},{"location":"DB/db3/#null-values","text":"null signifies an unknown value or that a value does not exist . The result of any arithmetic expression involving null is null. e.g. 5 + null returns null The predicate is null can be used to check for null values. e.g. Find all instructors whose salary is null. select name from instructor where salary is null Comparisons with null values return the special truth value: unknown . Result of select predicate is treated as false if it evaluates to unknown","title":"Null Values"},{"location":"DB/db3/#aggregate-functions","text":"Example \u6ce8\u610f\u5728 select \u91cc\u51fa\u73b0\u7684\u5c5e\u6027\uff0c\u9664\u4e86\u7edf\u8ba1\u51fd\u6570\u4ee5\u5916\uff0c\u4e00\u5b9a\u8981\u662f\u5206\u7ec4\u5c5e\u6027\u91cc\u51fa\u73b0\u8fc7\u7684\u3002","title":"Aggregate Functions"},{"location":"DB/db3/#having-clause","text":"\u5bf9\u5206\u7ec4\u540e\u7684\u7ec4\u8fdb\u884c\u7b5b\u9009\u3002 e.g. select dept_name , count ( * ) as cnt from instructor where salary >= 100000 group by dept_name having count ( * ) > 10 order by cnt ; predicates in the having clause are applied after the formation of groups whereas predicates in the where clause are applied before forming groups .","title":"Having Clause"},{"location":"DB/db3/#null-values-and-aggregates","text":"select sum (salary) from instructor Above statement ignores null amounts Result is null if there is no non-null amount All aggregate operations except count(*) ignore tuples with null values on the aggregated attributes Arithmetric expression with Aggregate functions \u7b2c\u4e8c\u4e2a\u8868\u793a\u91cd\u540d\u7387\u5c0f\u4e8e\u5343\u5206\u4e4b\u4e00\u7684\u7cfb\u3002","title":"Null Values and Aggregates"},{"location":"DB/db3/#nested-subqueries","text":"A subquery is a select-from-where expression that is nested within another query.","title":"Nested Subqueries"},{"location":"DB/db3/#set-membership","text":"in, not in Example \u9664\u4e86\u5355\u4e2a\u5143\u7d20\u5916\uff0c\u5143\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528 in, not in","title":"Set Membership"},{"location":"DB/db3/#set-comparison","text":"some \u67d0\u4e9b\u6210\u5458 all \u6240\u6709\u6210\u5458 Example \u5de5\u8d44\u5927\u4e8e\u751f\u7269\u7cfb\u4e2d\u7684\u67d0\u4e9b\u8001\u5e08\u7684\u8001\u5e08. select name from instructor where salary > some ( select salary from instructor where dept_name = \u2019 Biology \u2019 );","title":"Set Comparison"},{"location":"DB/db3/#scalar-subquery","text":"Scalar (\u6807\u91cf) subquery is one which is used where a single value is expected. Example select name from instructor where salary * 10 > ( select budget from department where department . dept_name = instructor . dept_name ) \u8fd9\u91cc dept_name \u662f\u8fd9\u4e2a\u8868\u7684\u4e3b\u952e\uff0c\u53ea\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u4e0d\u7528 some, all \u7684\u3002 Runtime error if subquery returns more than one result tuple.","title":"Scalar Subquery"},{"location":"DB/db3/#test-for-empty-relations","text":"The exists construct returns the value true if the argument subquery is nonempty. exists r \\(\\Leftrightarrow r \\neq \\emptyset\\) not exists r \\(\\Leftrightarrow r = \\emptyset\\) Example 09FALL \u5f00\u7684\u8bfe\uff0c\u800c\u4e14 10SPRING \u4e5f\u5f00\u4e86\u8bfe\u3002 select course_id from section as S where semester = \u2019 Fall \u2019 and year = 2009 and exists ( select * from section as T where semester = \u2019 Spring \u2019 and year = 2010 and S . course_id = T . course_id ); Example Find all students who have taken all courses offered in the Biology department. SQL \u8bed\u53e5\u5f80\u5f80\u9700\u8981\u9006\u5411\u8003\u8651\uff0c\u5373\u627e\u5230\u8fd9\u6837\u7684\u5b66\u751f\uff0c\u4e0d\u5b58\u5728\u4ed6\u6ca1\u9009\u8fc7\u7684\u751f\u7269\u7cfb\u7684\u8bfe\u3002 select distinct S . ID , S . name from student as S where not exists ( ( select course_id from course where dept_name = \u2019 Biology \u2019 ) except ( select T . course_id from takes as T where S . ID = T . ID ));","title":"Test for Empty Relations"},{"location":"DB/db3/#test-for-absence-of-duplicate-tuples","text":"The unique construct tests whether a subquery has any duplicate tuples in its result. \u9a8c\u8bc1\u662f\u5426\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u800c\u975e\u591a\u91cd\u96c6\u3002 Evaluates to \u201ctrue\u201d on an empty set. \u53ef\u4ee5\u5c06 unique \u7406\u89e3\u4e3a at most once. Example \u5982\u679c\u4e0d\u52a0 exist, \u53ef\u80fd\u6709\u6ca1\u5f00\u8fc7\u7684\u8bfe\u4e5f\u88ab\u7b97\u8fdb\u53bb\u3002\u6211\u4eec\u8fd9\u91cc\u6c42\u5f97\u662f\u6070\u597d\u53ea\u5f00\u8fc7\u4e00\u6b21\u7684\u3002 Example \u4e5f\u53ef\u4ee5\u7528 group by count(*) > 1 \u5b9e\u73b0\u3002","title":"Test for Absence of Duplicate Tuples"},{"location":"DB/db3/#with-clause","text":"The with clause provides a way of defining a temporary view whose definition is available only to the query in which the with clause occurs. \u6784\u9020\u4e00\u4e2a\u4e34\u65f6\u8868 Example Find all departments with the maximum budget. with max_budget ( value ) as ( select max ( budget ) from department ) select dept_name from department , max_budget where department . budget = max_budget . value ; Complex Queries using With Clause","title":"With Clause"},{"location":"DB/db3/#modification-of-the-database","text":"","title":"Modification of the Database"},{"location":"DB/db3/#deletion","text":"Example","title":"Deletion"},{"location":"DB/db3/#insertion","text":"Example \u7b2c\u4e8c\u79cd\u5199\u6cd5\uff0c\u53ef\u4ee5\u4e0d\u7528\u4e25\u683c\u6309\u7167\u5b9a\u4e49\u7684\u5143\u7d20\u987a\u5e8f\uff0c\u53ea\u8981\u548c\u81ea\u5df1\u5199\u7684\u5bf9\u5e94\u5373\u53ef\u3002 \u9664\u4e86\u57fa\u672c\u5199\u6cd5\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728 insert \u540e\u8ddf\u67e5\u8be2\u8bed\u53e5\uff0c\u628a\u67e5\u8be2\u7ed3\u679c\u63d2\u5165\u5230\u8868\u91cc\u53bb\u3002 Example","title":"Insertion"},{"location":"DB/db3/#updates","text":"update ... set ... The order is important. So it can be done better using the case statement. Example","title":"Updates"},{"location":"DB/db4/","text":"Intermediate SQL \u00b6 Abstract Joined Relation SQL Data Types and Schemas Integrity Constraints Views Indexes Transactions Authorization Joined Relations \u00b6 Join operations take two relations and return as a result another relation. Join operations are typically used as subquery expressions in the from clause Join condition \u2013 defines which tuples in the two relations match, and what attributes are present in the result of the join. Join type \u2013 defines how tuples in each relation that do not match any tuple in the other relation (based on the join condition) are treated. using \u662f\u4e00\u4e2a\u7b49\u503c\u8fde\u63a5\uff0c\u7c7b\u4f3c\u4e8e\u81ea\u7136\u8fde\u63a5\uff0c\u8fd9\u4e9b\u5c5e\u6027\u76f8\u540c\u624d\u80fd\u8fde\u63a5 SQL Data Types and Schemas \u00b6 User-Defined Types \u00b6 create type construct in SQL creates user-defined type. Example create type Dollars as numeric (12,2) final \u5b9a\u4e49\u4e86 Dollars \u8fd9\u4e2a\u7c7b\u578b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5b83\u5f53\u4f5c\u5143\u7c7b\u578b\u4f7f\u7528\u3002 create table department ( dept_name varchar ( 20 ), building varchar ( 15 ), budget Dollars ); \u8fd9\u6837\u53ef\u4ee5\u652f\u6301\u5f3a\u7c7b\u578b\u68c0\u67e5\uff0c\u53ef\u4ee5\u9632\u6b62\u5982 200 \u7f8e\u5143 + 300 RMB \u5f97\u5230 500 \u5143\u7684\u9519\u8bef\u3002 Domains \u00b6 create domain construct in SQL-92 creates user-defined domain types. Domains can have constraints, such as not null , specified on them. Example create domain person_name char(20) not null create domain degree_level varchar ( 10 ) constraint degree_level_test check ( value in ( \u2019 Bachelors \u2019 , \u2019 Masters \u2019 , \u2019 Doctorate \u2019 )); \u8fd9\u91cc\u7684 constraint \u53ef\u4ee5\u5bf9 domain \u7684\u53d6\u503c\u8fdb\u884c\u9650\u5236\u3002 \u4e0d\u540c type \u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u5b9a\u4e49\u76f8\u540c\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u884c\u8fd0\u7b97\u3002\u4e0d\u540c domain \u7684\u53d8\u91cf\uff08\u57fa\u7840\u7c7b\u578b\u76f8\u540c\uff09\u53ef\u4ee5\u8fd0\u7b97\u3002 Large-Object Types \u00b6 Large objects (photos, videos, CAD files, etc.) are stored as a large object: blob : binary large object -- object is a large collection of uninterpreted binary data (whose interpretation is left to an application outside of the database system) \u5b58\u50a8\u5927\u5bf9\u8c61\u6570\u636e\u7c7b\u578b\uff0c\u5b9e\u9645\u4e0a\u53ea\u662f\u5b58\u653e\u6307\u9488\u3002 BLOB in MySQL TinyBlob \uff1a 0 ~ 255 bytes. Blob\uff1a 0 ~ 64K bytes. MediumBlob \uff1a 0 ~ 16M bytes. LargeBlob : 0 ~ 4G bytes. clob : character large object -- object is a large collection of character data \u6587\u672c\u5927\u5bf9\u8c61 Integrity Constraints \u00b6 not null primary key unique unique(A1, A2, ..., Am) The unique specification states that the attributes A1, A2, ..., Am form a super key \uff08\u4e0d\u4e00\u5b9a\u662f candidate key) \u6bd4\u5982\u5b66\u751f\u4e2a\u4eba\u4fe1\u606f\uff0c\u6211\u4eec\u77e5\u9053 ID \u662f\u4e3b\u952e\uff0c\u4f46\u5b9e\u9645\u4e0a\u90ae\u7bb1\u3001\u7535\u8bdd\u53f7\u7801\u7b49\u4e5f\u4e0d\u80fd\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u901a\u8fc7\u8bed\u53e5\u544a\u8bc9\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u4f1a\u4e3a\u6211\u4eec\u7ef4\u62a4\u8fd9\u4e9b\u7ea6\u675f\u6761\u4ef6\u3002 Candidate keys are permitted to be null (in contrast to primary keys). check (P) , where P is a predicate Example \u53ef\u4ee5\u6709\u590d\u6742\u67e5\u8be2\uff0c\u4f46\u8bb8\u591a\u6570\u636e\u5e93\u4e0d\u652f\u6301\u3002 e.g. check ((course_id, sec_id, semester, year) in (select course_id, sec_id, semester, year from teaches)) * foreign key Integrity Constraint Violation During Transactions \u5728\u4e00\u4e2a\u4eba\u7684\u7236\u6bcd\u8fd8\u6ca1\u63d2\u5165\u7684\u65f6\u5019\uff0c\u65e0\u6cd5\u63d2\u5165\u8fd9\u4e2a\u4eba\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002 \u53ef\u4ee5\u89c4\u5b9a\uff0c\u5728\u8fd9\u4e2a\u4e8b\u52a1\u7ed3\u675f\u65f6\u518d\u68c0\u67e5\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\uff0c\u4e2d\u95f4\u72b6\u6001\u53ef\u4ee5\u4e0d\u6ee1\u8db3\u3002 assertion create assertion <assertion-name> check <predicate>; Example \u9a8c\u8bc1\u4e00\u4e2a\u5b66\u751f\u83b7\u5f97\u7684\u603b\u5b66\u5206\uff0c\u8981\u7b49\u4e8e\u83b7\u5f97\u7684\u6bcf\u95e8\u8bfe\u7684\u5b66\u5206\u7684\u603b\u548c\u3002 \u4f46\u4f7f\u7528 assert \u540e\uff0c\u6bcf\u4e2a\u5143\u7ec4\u7684\u6bcf\u6b21\u72b6\u6001\u66f4\u65b0\u65f6\u90fd\u8981\u8fdb\u884c\u68c0\u67e5\uff0c\u5f00\u9500\u8fc7\u5927\uff0c\u6570\u636e\u5e93\u4e00\u822c\u4e0d\u652f\u6301\u3002 Views \u00b6 A view provides a mechanism to hide certain data from the view of certain users. View Definition \u00b6 A view is defined using the create view statement which has the form create view v as < query expression > Example view \u53ef\u4ee5\u9690\u6389\u4e00\u4e9b\u7ec6\u8282\uff0c\u6216\u8005\u52a0\u4e0a\u4e00\u4e9b\u7edf\u8ba1\u6570\u636e\u3002\u53ef\u4ee5\u628a view \u5f53\u4f5c\u8868\u8fdb\u884c\u67e5\u8be2\u3002 \u9690\u85cf\u4e0d\u5fc5\u8981\u7684\u7ec6\u8282\uff0c\u7b80\u5316\u7528\u6237\u89c6\u91ce \u65b9\u4fbf\u67e5\u8be2\u4e66\u5199 \u6709\u5229\u4e8e\u6743\u9650\u63a7\u5236\uff08\u5982\u7528\u6237\u53ef\u4ee5\u770b\u5230\u5de5\u8d44\u603b\u548c\uff0c\u4f46\u4e0d\u80fd\u770b\u5230\u6bcf\u4e2a\u4eba\u7684\u5de5\u8d44\uff09 \u6709\u72ec\u7acb\u6027\uff0c\u4f7f\u5f97\u6570\u636e\u5e93\u5e94\u7528\u5177\u6709\u8f83\u5f3a\u7684\u9002\u5e94\u6027\u3002 \u53ef\u4ee5\u57fa\u4e8e\u89c6\u56fe\u518d\u5b9a\u4e49\u89c6\u56fe\u3002 Views Defined Using Other Views Update of a View \u00b6 \u5bf9\u4e00\u4e2a view \u8fdb\u884c\u4fee\u6539\uff0c\u76f8\u5f53\u4e8e\u901a\u8fc7\u8fd9\u4e2a\u7a97\u53e3\u5bf9\u539f\u8868\u7ee7\u7eed\u4fee\u6539\u3002 Example \u63d2\u5165\u540e\uff0c\u539f\u8868\u4e5f\u4f1a\u6709\u8fd9\u6761\u6570\u636e\uff0c\u5bf9\u4e8e\u5176\u7f3a\u5c11\u7684 salary \u5c5e\u6027\uff0c\u6211\u4eec\u8bbe\u5b9a\u4e3a NULL . \u5982\u679c\u8fd9\u4e2a\u5c5e\u6027\u7684\u7ea6\u675f\u662f not NULL \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u65e0\u6cd5\u6267\u884c\u8fd9\u6b21\u63d2\u5165\u3002 \u5982\u679c\u89c6\u56fe\u4e2d\u6709\u7edf\u8ba1\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\u662f\u4e0d\u53ef\u4fee\u6539\u7684\u3002 \u6d89\u53ca\u5230\u5355\u4e2a\u8868\uff0c\u53ea\u662f\u9009\u51fa\u4e86\u90e8\u5206\u5c5e\u6027\uff08\u53bb\u6389\u975e\u4e3b\u5c5e\u6027\uff09\u7684\u884c\u5217\u89c6\u56fe\u662f\u53ef\u66f4\u65b0\u7684\u3002 View and Logical Data Indepencence \u00b6 If relation \\(S(a, b, c)\\) is split into two sub relations \\(S1(a,b)\\) and \\(S2(a,c)\\) How to realize the logical data independence? create table S1...; create table S2...; insert into S1 select a, b from S; insert into S2 select a, c from S; drop table S; create view S(a, b, c) as select a, b, c from S1 natural join S2; select * from S where... \u5b9e\u9645\u4e0a\u662f\u5728\u505a select * from S1 natural join S2 where ... \uff08\u7cfb\u7edf\u4f1a\u5e2e\u6211\u8fd9\u6837\u505a\uff0c\u7a0b\u5e8f\u4e0d\u7528\u6539\uff0c\u53ea\u662f\u6267\u884c\u6539\u53d8\u4e86\uff09 insert into S values (1,2,3) \u5b9e\u9645\u4e0a\u662f\u5728\u505a insert into S1 values (1,2) \u548c insert into S2 values (1,3) *Materialized Views \u00b6 \u7269\u5316\u89c6\u56fe Materializing a view : create a physical table containing all the tuples in the result of the query defining the view. \u672c\u6765\u7684\u89c6\u56fe\u662f\u4e00\u4e2a\u865a\u7684\u8868\uff0c\u4e3a\u4e86\u67e5\u8be2\u6267\u884c\u6548\u7387\uff0c\u6211\u4eec\u53ef\u4ee5\u628a view \u5b9a\u4e49\u4e3a Materializing view, \u5373\u751f\u6210\u4e00\u5f20\u4e34\u65f6\u8868\u4e0e\u5176\u5bf9\u5e94\u3002 If relations used in the query are updated, the materialized view result becomes out of date. * Need to maintain the view , by updating the view whenever the underlying relations are updated. Indexes \u00b6 Indices are data structures used to speed up access to records with specified values for index attributes. Index \u76f8\u5f53\u4e8e\u5728\u6570\u636e\u4e0a\u5efa\u7acb\u4e86 B+ \u6811\u7d22\u5f15\u3002\uff08\u7269\u7406\u5c42\u9762\uff09 Example create table student ( ID varchar ( 5 ), name varchar ( 20 ) not null , dept_name varchar ( 20 ), tot_cred numeric ( 3 , 0 ) default 0 , primary key ( ID ) ) create index studentID_index on student ( ID ) select * from student where ID = \u201812345\u2019 \u5728\u6570\u636e\u5e93\u5185\u4e0d\u540c\u7684\u7269\u7406\u5b9e\u73b0\u6709\u4e0d\u540c\u7684\u67e5\u627e\u65b9\u6cd5\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u7d22\u5f15\uff0c\u53ea\u80fd\u987a\u5e8f\u67e5\u627e\u3002\u5982\u679c\u6709\u7d22\u5f15\uff0c\u7cfb\u7edf\u5185\u4f1a\u5229\u7528\u7d22\u5f15\u67e5\u627e\u3002 Transactions \u00b6 Transactions begin implicitly Ended by commit work or rollback work By default on most databases: each SQL statement commits automatically Can turn off auto commit for a session e.g. in MySQL, SET AUTOCOMMIT=0; Transaction examplex SET AUTOCOMMIT = 0 UPDATE account SET balance = balance - 100 WHERE ano = \u2018 1001 \u2019 ; UPDATE account SETbalance = balance + 100 WHERE ano = \u2018 1002 \u2019 ; COMMIT ; UPDATE account SET balance = balance - 200 WHERE ano = \u2018 1003 \u2019 ; UPDATE account SET balance = balance + 200 WHERE ano = \u2018 1004 \u2019 ; COMMIT ; UPDATE account SET balance = balance + balance * 2 . 5 % ; COMMIT ; ACID Properties \u00b6 A transaction is a unit of program execution that accesses and possibly updates various data items.To preserve the integrity of data the database system must ensure: (\u539f\u5b50\u6027\u3001\u4e00\u81f4\u6027\u3001\u72ec\u7acb\u6027\u3001\u6301\u7eed\u6027) Atomicity . Either all operations of the transaction are properly reflected in the database or none are. Consistency . Execution of a transaction in isolation preserves the consistency of the database. \u6570\u636e\u5e93\u6267\u884c\u4e8b\u52a1\u524d\u540e\u90fd\u662f\u4e00\u81f4\u7684\u3002 Isolation . Although multiple transactions may execute concurrently, each transaction must be unaware of other concurrently executing transactions. Intermediate transaction results must be hidden from other concurrently executed transactions. \u5f88\u591a\u4e8b\u60c5\u5171\u540c\u6267\u884c\uff0c\u4ed6\u4eec\u4e0d\u80fd\u4e92\u76f8\u5f71\u54cd\u3002 That is, for every pair of transactions \\(T_i\\) and \\(T_j\\) , it appears to \\(T_i\\) that either \\(T_j\\) , finished execution before \\(T_i\\) started, or \\(T_j\\) started execution after \\(T_i\\) finished. Durability . After a transaction completes successfully, the changes it has made to the database persist, even if there are system failures. \u6570\u636e\u5e93\u7684\u4e8b\u52a1\u4e00\u65e6\u63d0\u4ea4\uff0c\u8fd9\u4e2a\u4fee\u6539\u5c31\u8981\u6301\u7eed\u5730\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u53bb\uff0c\u4e0d\u80fd\u4e22\u5931\u3002\u5982\u78c1\u76d8\u51fa\u95ee\u9898\u4e86\uff0c\u65ad\u7535\u4e86\u7b49\u4f1a\u5f15\u53d1\u8fd9\u4e2a\u95ee\u9898\u3002 \u901a\u5e38\u4f7f\u7528\u65e5\u5fd7\u3002 Authorization \u00b6 Forms of authorization on parts of the database \u6570\u636e\u5c42\u9762\uff0c\u5373\u8868\u5df2\u7ecf\u5b58\u5728\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u7684\u64cd\u4f5c Select - allows reading, but not modification of data. Insert - allows insertion of new data, but not modification of existing data. Update - allows modification, but not deletion of data. Delete - allows deletion of data. Forms of authorization to modify the database schema \u80fd\u5426\u5b9a\u4e49\u8868\uff0c\u7d22\u5f15\u7b49 Index - allows creation and deletion of indices. Resources - allows creation of new relations. Alteration - allows addition or deletion of attributes in a relation. Drop - allows deletion of relations. Authorization Specification in SQL \u00b6 grant <privilege list> on <relation name or view name> to <user list> \u628a\u67d0\u4e2a\u8868\u6216\u8005\u89c6\u56fe\u4e0a\u7684\u6743\u9650\u6388\u6743\u7ed9\u7528\u6237 <user list> is: a user-id public , which allows all valid users the privilege granted A role (more on this later) Example update \u53ef\u4ee5\u7ec6\u5316\u5230\u5177\u4f53\u53ef\u4ee5\u5bf9\u54ea\u5217\u8fdb\u884c\u4fee\u6539\u3002 Revoking Authorization in SQL \u00b6 The revoke statement is used to revoke authorization. revoke <privilege list> on <relation name or view name> from <user list> Roles \u00b6 Privileges can be granted to roles. \u89d2\u8272\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u7ec4\u6743\u9650\u7684\u96c6\u5408\uff0c\u5982\u5b66\u6821\u7684\u6559\u52a1\u7ba1\u7406\u5458\u3001\u8001\u5e08\u3002 create role <role-name> \u521b\u9020\u89d2\u8272\uff0c\u968f\u540e\u53ef\u4ee5\u628a\u6743\u9650\u6388\u4e88\u7ed9\u4ed6\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u628a\u89d2\u8272\u7684\u6743\u9650\u6388\u4e88\u7ed9\u7528\u6237/\u5176\u4ed6\u89d2\u8272\u3002 Example create role instructor ; grant select on takes to instructor ; // \u6388\u4e88\u6743\u9650\u7ed9\u89d2\u8272 grant instructor to Amit ; // \u5c06\u89d2\u8272\u7684\u6743\u9650\u6388\u4e88\u7ed9\u7528\u6237 create role teaching_assistant ; grant teaching_assistant to instructor ; // \u53ef\u4ee5\u5c06\u89d2\u8272\u7684\u6743\u9650\u6388\u4e88\u7ed9\u5176\u4ed6\u89d2\u8272 Other Authorization Features \u00b6 \u5f15\u7528\u7684\u6743\u9650\u6bd4\u8f83\u7279\u6b8a references privilege to create foreign key Example grant reference (dept_name) on department to Mariano; \u5982\u679c\u4e0d\u4f5c\u4e3a\u6743\u9650\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u95f4\u63a5\u7684\u5916\u952e\u7ea6\u675f\u548c cascade \u5220\u6389\u88ab\u5f15\u7528\u7684\u6570\u636e\u3002\uff08\u5220\u6389\u996e\u7528\u8005\uff0c\u5219\u88ab\u5f15\u7528\u8005\u4e5f\u8981\u88ab\u5220\u9664\uff09\u56e0\u6b64\u8fd9\u4e5f\u662f\u4e2a\u6743\u9650 transfer of privileges grant select on department to Amit with grant option; \u52a0\u4e0a with grant option \u540e\uff0c\u7528\u6237\u53ef\u4ee5\u628a\u83b7\u5f97\u7684\u6743\u9650\u4f20\u9012\u4e0b\u53bb\u3002 revoke select on department from Amit, Satoshi cascade; cascade \u628a\u8be5\u7528\u6237\u53ca\u5176\u6388\u4e88\u7684\u6743\u9650\u5168\u90e8\u6536\u56de\uff0c\u7ea7\u8054\u53cd\u5e94\u3002 revoke select on department from Amit, Satoshi restrict; restrict \u53ea\u6536\u56de\u8be5\u7528\u6237\u7684\u6743\u9650\u3002 revoke grant option for select on department from Amit; \u6536\u56de\u7528\u6237\u8f6c\u6388\u7684\u6743\u529b\u3002","title":"\u4e2d\u7ea7 SQL"},{"location":"DB/db4/#intermediate-sql","text":"Abstract Joined Relation SQL Data Types and Schemas Integrity Constraints Views Indexes Transactions Authorization","title":"Intermediate SQL"},{"location":"DB/db4/#joined-relations","text":"Join operations take two relations and return as a result another relation. Join operations are typically used as subquery expressions in the from clause Join condition \u2013 defines which tuples in the two relations match, and what attributes are present in the result of the join. Join type \u2013 defines how tuples in each relation that do not match any tuple in the other relation (based on the join condition) are treated. using \u662f\u4e00\u4e2a\u7b49\u503c\u8fde\u63a5\uff0c\u7c7b\u4f3c\u4e8e\u81ea\u7136\u8fde\u63a5\uff0c\u8fd9\u4e9b\u5c5e\u6027\u76f8\u540c\u624d\u80fd\u8fde\u63a5","title":"Joined Relations"},{"location":"DB/db4/#sql-data-types-and-schemas","text":"","title":"SQL Data Types and Schemas"},{"location":"DB/db4/#user-defined-types","text":"create type construct in SQL creates user-defined type. Example create type Dollars as numeric (12,2) final \u5b9a\u4e49\u4e86 Dollars \u8fd9\u4e2a\u7c7b\u578b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5b83\u5f53\u4f5c\u5143\u7c7b\u578b\u4f7f\u7528\u3002 create table department ( dept_name varchar ( 20 ), building varchar ( 15 ), budget Dollars ); \u8fd9\u6837\u53ef\u4ee5\u652f\u6301\u5f3a\u7c7b\u578b\u68c0\u67e5\uff0c\u53ef\u4ee5\u9632\u6b62\u5982 200 \u7f8e\u5143 + 300 RMB \u5f97\u5230 500 \u5143\u7684\u9519\u8bef\u3002","title":"User-Defined Types"},{"location":"DB/db4/#domains","text":"create domain construct in SQL-92 creates user-defined domain types. Domains can have constraints, such as not null , specified on them. Example create domain person_name char(20) not null create domain degree_level varchar ( 10 ) constraint degree_level_test check ( value in ( \u2019 Bachelors \u2019 , \u2019 Masters \u2019 , \u2019 Doctorate \u2019 )); \u8fd9\u91cc\u7684 constraint \u53ef\u4ee5\u5bf9 domain \u7684\u53d6\u503c\u8fdb\u884c\u9650\u5236\u3002 \u4e0d\u540c type \u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u5b9a\u4e49\u76f8\u540c\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u884c\u8fd0\u7b97\u3002\u4e0d\u540c domain \u7684\u53d8\u91cf\uff08\u57fa\u7840\u7c7b\u578b\u76f8\u540c\uff09\u53ef\u4ee5\u8fd0\u7b97\u3002","title":"Domains"},{"location":"DB/db4/#large-object-types","text":"Large objects (photos, videos, CAD files, etc.) are stored as a large object: blob : binary large object -- object is a large collection of uninterpreted binary data (whose interpretation is left to an application outside of the database system) \u5b58\u50a8\u5927\u5bf9\u8c61\u6570\u636e\u7c7b\u578b\uff0c\u5b9e\u9645\u4e0a\u53ea\u662f\u5b58\u653e\u6307\u9488\u3002 BLOB in MySQL TinyBlob \uff1a 0 ~ 255 bytes. Blob\uff1a 0 ~ 64K bytes. MediumBlob \uff1a 0 ~ 16M bytes. LargeBlob : 0 ~ 4G bytes. clob : character large object -- object is a large collection of character data \u6587\u672c\u5927\u5bf9\u8c61","title":"Large-Object Types"},{"location":"DB/db4/#integrity-constraints","text":"not null primary key unique unique(A1, A2, ..., Am) The unique specification states that the attributes A1, A2, ..., Am form a super key \uff08\u4e0d\u4e00\u5b9a\u662f candidate key) \u6bd4\u5982\u5b66\u751f\u4e2a\u4eba\u4fe1\u606f\uff0c\u6211\u4eec\u77e5\u9053 ID \u662f\u4e3b\u952e\uff0c\u4f46\u5b9e\u9645\u4e0a\u90ae\u7bb1\u3001\u7535\u8bdd\u53f7\u7801\u7b49\u4e5f\u4e0d\u80fd\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u901a\u8fc7\u8bed\u53e5\u544a\u8bc9\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u4f1a\u4e3a\u6211\u4eec\u7ef4\u62a4\u8fd9\u4e9b\u7ea6\u675f\u6761\u4ef6\u3002 Candidate keys are permitted to be null (in contrast to primary keys). check (P) , where P is a predicate Example \u53ef\u4ee5\u6709\u590d\u6742\u67e5\u8be2\uff0c\u4f46\u8bb8\u591a\u6570\u636e\u5e93\u4e0d\u652f\u6301\u3002 e.g. check ((course_id, sec_id, semester, year) in (select course_id, sec_id, semester, year from teaches)) * foreign key Integrity Constraint Violation During Transactions \u5728\u4e00\u4e2a\u4eba\u7684\u7236\u6bcd\u8fd8\u6ca1\u63d2\u5165\u7684\u65f6\u5019\uff0c\u65e0\u6cd5\u63d2\u5165\u8fd9\u4e2a\u4eba\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002 \u53ef\u4ee5\u89c4\u5b9a\uff0c\u5728\u8fd9\u4e2a\u4e8b\u52a1\u7ed3\u675f\u65f6\u518d\u68c0\u67e5\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\uff0c\u4e2d\u95f4\u72b6\u6001\u53ef\u4ee5\u4e0d\u6ee1\u8db3\u3002 assertion create assertion <assertion-name> check <predicate>; Example \u9a8c\u8bc1\u4e00\u4e2a\u5b66\u751f\u83b7\u5f97\u7684\u603b\u5b66\u5206\uff0c\u8981\u7b49\u4e8e\u83b7\u5f97\u7684\u6bcf\u95e8\u8bfe\u7684\u5b66\u5206\u7684\u603b\u548c\u3002 \u4f46\u4f7f\u7528 assert \u540e\uff0c\u6bcf\u4e2a\u5143\u7ec4\u7684\u6bcf\u6b21\u72b6\u6001\u66f4\u65b0\u65f6\u90fd\u8981\u8fdb\u884c\u68c0\u67e5\uff0c\u5f00\u9500\u8fc7\u5927\uff0c\u6570\u636e\u5e93\u4e00\u822c\u4e0d\u652f\u6301\u3002","title":"Integrity Constraints"},{"location":"DB/db4/#views","text":"A view provides a mechanism to hide certain data from the view of certain users.","title":"Views"},{"location":"DB/db4/#view-definition","text":"A view is defined using the create view statement which has the form create view v as < query expression > Example view \u53ef\u4ee5\u9690\u6389\u4e00\u4e9b\u7ec6\u8282\uff0c\u6216\u8005\u52a0\u4e0a\u4e00\u4e9b\u7edf\u8ba1\u6570\u636e\u3002\u53ef\u4ee5\u628a view \u5f53\u4f5c\u8868\u8fdb\u884c\u67e5\u8be2\u3002 \u9690\u85cf\u4e0d\u5fc5\u8981\u7684\u7ec6\u8282\uff0c\u7b80\u5316\u7528\u6237\u89c6\u91ce \u65b9\u4fbf\u67e5\u8be2\u4e66\u5199 \u6709\u5229\u4e8e\u6743\u9650\u63a7\u5236\uff08\u5982\u7528\u6237\u53ef\u4ee5\u770b\u5230\u5de5\u8d44\u603b\u548c\uff0c\u4f46\u4e0d\u80fd\u770b\u5230\u6bcf\u4e2a\u4eba\u7684\u5de5\u8d44\uff09 \u6709\u72ec\u7acb\u6027\uff0c\u4f7f\u5f97\u6570\u636e\u5e93\u5e94\u7528\u5177\u6709\u8f83\u5f3a\u7684\u9002\u5e94\u6027\u3002 \u53ef\u4ee5\u57fa\u4e8e\u89c6\u56fe\u518d\u5b9a\u4e49\u89c6\u56fe\u3002 Views Defined Using Other Views","title":"View Definition"},{"location":"DB/db4/#update-of-a-view","text":"\u5bf9\u4e00\u4e2a view \u8fdb\u884c\u4fee\u6539\uff0c\u76f8\u5f53\u4e8e\u901a\u8fc7\u8fd9\u4e2a\u7a97\u53e3\u5bf9\u539f\u8868\u7ee7\u7eed\u4fee\u6539\u3002 Example \u63d2\u5165\u540e\uff0c\u539f\u8868\u4e5f\u4f1a\u6709\u8fd9\u6761\u6570\u636e\uff0c\u5bf9\u4e8e\u5176\u7f3a\u5c11\u7684 salary \u5c5e\u6027\uff0c\u6211\u4eec\u8bbe\u5b9a\u4e3a NULL . \u5982\u679c\u8fd9\u4e2a\u5c5e\u6027\u7684\u7ea6\u675f\u662f not NULL \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u65e0\u6cd5\u6267\u884c\u8fd9\u6b21\u63d2\u5165\u3002 \u5982\u679c\u89c6\u56fe\u4e2d\u6709\u7edf\u8ba1\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\u662f\u4e0d\u53ef\u4fee\u6539\u7684\u3002 \u6d89\u53ca\u5230\u5355\u4e2a\u8868\uff0c\u53ea\u662f\u9009\u51fa\u4e86\u90e8\u5206\u5c5e\u6027\uff08\u53bb\u6389\u975e\u4e3b\u5c5e\u6027\uff09\u7684\u884c\u5217\u89c6\u56fe\u662f\u53ef\u66f4\u65b0\u7684\u3002","title":"Update of a View"},{"location":"DB/db4/#view-and-logical-data-indepencence","text":"If relation \\(S(a, b, c)\\) is split into two sub relations \\(S1(a,b)\\) and \\(S2(a,c)\\) How to realize the logical data independence? create table S1...; create table S2...; insert into S1 select a, b from S; insert into S2 select a, c from S; drop table S; create view S(a, b, c) as select a, b, c from S1 natural join S2; select * from S where... \u5b9e\u9645\u4e0a\u662f\u5728\u505a select * from S1 natural join S2 where ... \uff08\u7cfb\u7edf\u4f1a\u5e2e\u6211\u8fd9\u6837\u505a\uff0c\u7a0b\u5e8f\u4e0d\u7528\u6539\uff0c\u53ea\u662f\u6267\u884c\u6539\u53d8\u4e86\uff09 insert into S values (1,2,3) \u5b9e\u9645\u4e0a\u662f\u5728\u505a insert into S1 values (1,2) \u548c insert into S2 values (1,3)","title":"View and Logical Data Indepencence"},{"location":"DB/db4/#materialized-views","text":"\u7269\u5316\u89c6\u56fe Materializing a view : create a physical table containing all the tuples in the result of the query defining the view. \u672c\u6765\u7684\u89c6\u56fe\u662f\u4e00\u4e2a\u865a\u7684\u8868\uff0c\u4e3a\u4e86\u67e5\u8be2\u6267\u884c\u6548\u7387\uff0c\u6211\u4eec\u53ef\u4ee5\u628a view \u5b9a\u4e49\u4e3a Materializing view, \u5373\u751f\u6210\u4e00\u5f20\u4e34\u65f6\u8868\u4e0e\u5176\u5bf9\u5e94\u3002 If relations used in the query are updated, the materialized view result becomes out of date. * Need to maintain the view , by updating the view whenever the underlying relations are updated.","title":"*Materialized Views"},{"location":"DB/db4/#indexes","text":"Indices are data structures used to speed up access to records with specified values for index attributes. Index \u76f8\u5f53\u4e8e\u5728\u6570\u636e\u4e0a\u5efa\u7acb\u4e86 B+ \u6811\u7d22\u5f15\u3002\uff08\u7269\u7406\u5c42\u9762\uff09 Example create table student ( ID varchar ( 5 ), name varchar ( 20 ) not null , dept_name varchar ( 20 ), tot_cred numeric ( 3 , 0 ) default 0 , primary key ( ID ) ) create index studentID_index on student ( ID ) select * from student where ID = \u201812345\u2019 \u5728\u6570\u636e\u5e93\u5185\u4e0d\u540c\u7684\u7269\u7406\u5b9e\u73b0\u6709\u4e0d\u540c\u7684\u67e5\u627e\u65b9\u6cd5\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u7d22\u5f15\uff0c\u53ea\u80fd\u987a\u5e8f\u67e5\u627e\u3002\u5982\u679c\u6709\u7d22\u5f15\uff0c\u7cfb\u7edf\u5185\u4f1a\u5229\u7528\u7d22\u5f15\u67e5\u627e\u3002","title":"Indexes"},{"location":"DB/db4/#transactions","text":"Transactions begin implicitly Ended by commit work or rollback work By default on most databases: each SQL statement commits automatically Can turn off auto commit for a session e.g. in MySQL, SET AUTOCOMMIT=0; Transaction examplex SET AUTOCOMMIT = 0 UPDATE account SET balance = balance - 100 WHERE ano = \u2018 1001 \u2019 ; UPDATE account SETbalance = balance + 100 WHERE ano = \u2018 1002 \u2019 ; COMMIT ; UPDATE account SET balance = balance - 200 WHERE ano = \u2018 1003 \u2019 ; UPDATE account SET balance = balance + 200 WHERE ano = \u2018 1004 \u2019 ; COMMIT ; UPDATE account SET balance = balance + balance * 2 . 5 % ; COMMIT ;","title":"Transactions"},{"location":"DB/db4/#acid-properties","text":"A transaction is a unit of program execution that accesses and possibly updates various data items.To preserve the integrity of data the database system must ensure: (\u539f\u5b50\u6027\u3001\u4e00\u81f4\u6027\u3001\u72ec\u7acb\u6027\u3001\u6301\u7eed\u6027) Atomicity . Either all operations of the transaction are properly reflected in the database or none are. Consistency . Execution of a transaction in isolation preserves the consistency of the database. \u6570\u636e\u5e93\u6267\u884c\u4e8b\u52a1\u524d\u540e\u90fd\u662f\u4e00\u81f4\u7684\u3002 Isolation . Although multiple transactions may execute concurrently, each transaction must be unaware of other concurrently executing transactions. Intermediate transaction results must be hidden from other concurrently executed transactions. \u5f88\u591a\u4e8b\u60c5\u5171\u540c\u6267\u884c\uff0c\u4ed6\u4eec\u4e0d\u80fd\u4e92\u76f8\u5f71\u54cd\u3002 That is, for every pair of transactions \\(T_i\\) and \\(T_j\\) , it appears to \\(T_i\\) that either \\(T_j\\) , finished execution before \\(T_i\\) started, or \\(T_j\\) started execution after \\(T_i\\) finished. Durability . After a transaction completes successfully, the changes it has made to the database persist, even if there are system failures. \u6570\u636e\u5e93\u7684\u4e8b\u52a1\u4e00\u65e6\u63d0\u4ea4\uff0c\u8fd9\u4e2a\u4fee\u6539\u5c31\u8981\u6301\u7eed\u5730\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u53bb\uff0c\u4e0d\u80fd\u4e22\u5931\u3002\u5982\u78c1\u76d8\u51fa\u95ee\u9898\u4e86\uff0c\u65ad\u7535\u4e86\u7b49\u4f1a\u5f15\u53d1\u8fd9\u4e2a\u95ee\u9898\u3002 \u901a\u5e38\u4f7f\u7528\u65e5\u5fd7\u3002","title":"ACID Properties"},{"location":"DB/db4/#authorization","text":"Forms of authorization on parts of the database \u6570\u636e\u5c42\u9762\uff0c\u5373\u8868\u5df2\u7ecf\u5b58\u5728\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u7684\u64cd\u4f5c Select - allows reading, but not modification of data. Insert - allows insertion of new data, but not modification of existing data. Update - allows modification, but not deletion of data. Delete - allows deletion of data. Forms of authorization to modify the database schema \u80fd\u5426\u5b9a\u4e49\u8868\uff0c\u7d22\u5f15\u7b49 Index - allows creation and deletion of indices. Resources - allows creation of new relations. Alteration - allows addition or deletion of attributes in a relation. Drop - allows deletion of relations.","title":"Authorization"},{"location":"DB/db4/#authorization-specification-in-sql","text":"grant <privilege list> on <relation name or view name> to <user list> \u628a\u67d0\u4e2a\u8868\u6216\u8005\u89c6\u56fe\u4e0a\u7684\u6743\u9650\u6388\u6743\u7ed9\u7528\u6237 <user list> is: a user-id public , which allows all valid users the privilege granted A role (more on this later) Example update \u53ef\u4ee5\u7ec6\u5316\u5230\u5177\u4f53\u53ef\u4ee5\u5bf9\u54ea\u5217\u8fdb\u884c\u4fee\u6539\u3002","title":"Authorization Specification in SQL"},{"location":"DB/db4/#revoking-authorization-in-sql","text":"The revoke statement is used to revoke authorization. revoke <privilege list> on <relation name or view name> from <user list>","title":"Revoking Authorization in SQL"},{"location":"DB/db4/#roles","text":"Privileges can be granted to roles. \u89d2\u8272\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u7ec4\u6743\u9650\u7684\u96c6\u5408\uff0c\u5982\u5b66\u6821\u7684\u6559\u52a1\u7ba1\u7406\u5458\u3001\u8001\u5e08\u3002 create role <role-name> \u521b\u9020\u89d2\u8272\uff0c\u968f\u540e\u53ef\u4ee5\u628a\u6743\u9650\u6388\u4e88\u7ed9\u4ed6\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u628a\u89d2\u8272\u7684\u6743\u9650\u6388\u4e88\u7ed9\u7528\u6237/\u5176\u4ed6\u89d2\u8272\u3002 Example create role instructor ; grant select on takes to instructor ; // \u6388\u4e88\u6743\u9650\u7ed9\u89d2\u8272 grant instructor to Amit ; // \u5c06\u89d2\u8272\u7684\u6743\u9650\u6388\u4e88\u7ed9\u7528\u6237 create role teaching_assistant ; grant teaching_assistant to instructor ; // \u53ef\u4ee5\u5c06\u89d2\u8272\u7684\u6743\u9650\u6388\u4e88\u7ed9\u5176\u4ed6\u89d2\u8272","title":"Roles"},{"location":"DB/db4/#other-authorization-features","text":"\u5f15\u7528\u7684\u6743\u9650\u6bd4\u8f83\u7279\u6b8a references privilege to create foreign key Example grant reference (dept_name) on department to Mariano; \u5982\u679c\u4e0d\u4f5c\u4e3a\u6743\u9650\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u95f4\u63a5\u7684\u5916\u952e\u7ea6\u675f\u548c cascade \u5220\u6389\u88ab\u5f15\u7528\u7684\u6570\u636e\u3002\uff08\u5220\u6389\u996e\u7528\u8005\uff0c\u5219\u88ab\u5f15\u7528\u8005\u4e5f\u8981\u88ab\u5220\u9664\uff09\u56e0\u6b64\u8fd9\u4e5f\u662f\u4e2a\u6743\u9650 transfer of privileges grant select on department to Amit with grant option; \u52a0\u4e0a with grant option \u540e\uff0c\u7528\u6237\u53ef\u4ee5\u628a\u83b7\u5f97\u7684\u6743\u9650\u4f20\u9012\u4e0b\u53bb\u3002 revoke select on department from Amit, Satoshi cascade; cascade \u628a\u8be5\u7528\u6237\u53ca\u5176\u6388\u4e88\u7684\u6743\u9650\u5168\u90e8\u6536\u56de\uff0c\u7ea7\u8054\u53cd\u5e94\u3002 revoke select on department from Amit, Satoshi restrict; restrict \u53ea\u6536\u56de\u8be5\u7528\u6237\u7684\u6743\u9650\u3002 revoke grant option for select on department from Amit; \u6536\u56de\u7528\u6237\u8f6c\u6388\u7684\u6743\u529b\u3002","title":"Other Authorization Features"},{"location":"DB/db5/","text":"Advanced SQL \u00b6 Accessing SQL from a Programming Language \u00b6 Not all queries can be expressed in SQL, since SQL does not provide the full expressive power of a general-purpose language. \u4e0d\u662f\u6240\u6709\u7684\u67e5\u8be2\u90fd\u80fd\u7528 SQL \u8bed\u8a00\u8868\u8fbe\u3002 Non-declarative actions -- such as printing a report, interacting with a user, or sending the results of a query to a graphical user interface -- cannot be done from within SQL. \u7528\u6237\u4ea4\u4e92\u662f\u56fe\u5f62\u754c\u9762\uff0c\u8bed\u97f3\u3001\u56fe\u50cf\uff0c\u6570\u636e\u5e93\u4e0d\u5177\u5907\u8fd9\u65b9\u9762\u7684\u529f\u80fd\u3002 \u4ece\u9ad8\u7ea7\u8bed\u8a00\uff08\u5982 C\uff09\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u4e3b\u8981\u662f\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\uff1a API (Application Program Interface) -- A general-purpose program can connect to and communicate with a database server using a collection of functions. \u51fd\u6570\u5e93 Embedded SQL -- provides a means by which a program can interact with a database server. \u628a SQL \u8bed\u53e5\u5d4c\u5165\u5230\u8bed\u8a00\u5185 The SQL statements are translated at compile time into function calls. At runtime, these function calls connect to the database using an API that provides dynamic SQL facilities. JDBC and ODBC \u00b6 API (application-program interface) for a program to interact with a database server Application makes calls to Connect with the database server \u5efa\u7acb\u8fde\u63a5 Send SQL commands to the database server \u6307\u4ee4\u53d1\u9001\u5230\u670d\u52a1\u5668 Fetch tuples of result one-by-one into program variables \u62ff\u56de\u7ed3\u679c SQL \u4e0e C \u8bed\u8a00\u5b58\u5728\u9e3f\u6c9f\uff08\u5982 select \u5f97\u5230\u7684\u662f\u96c6\u5408\uff0c\u4f46\u662f C \u8bed\u8a00\u6ca1\u6709\u8fd9\u79cd\u7c7b\u578b\uff09\u4f1a\u8fd4\u56de\u6307\u9488/\u8fed\u4ee3\u5668 ODBC (Open Database Connectivity) works with C, C++, C# JDBC (Java Database Connectivity) works with Java \u901a\u8fc7\u7c7b\u5b9a\u4e49\uff0c\u5c06\u6570\u636e\u5e93\u64cd\u4f5c\u5c01\u88c5\u5230 Java \u5185 Embedded SQL in C SQLJ - embedded SQL in Java JPA (Java Persistence API) - OR mapping of Java JDBC \u00b6 JDBC is a Java API for communicating with database systems supporting SQL. public static void JDBCexample ( String dbid , String userid , String passwd ) { try { Connection conn = DriverManager . getConnection ( \"jdbc:oracle:thin:@db.yale.edu:2000:univdb\" , userid , passwd ); Statement stmt = conn . createStatement (); ... Do Actual Work ... stmt . close (); conn . close (); } catch ( SQLException sqle ) { System . out . println ( \"SQLException : \" + sqle ); } } Open a connection Create a \u201cstatement\u201d object Execute queries using the Statement object to send queries and fetch results Exception mechanism to handle errors Example Update to database Update to database try { stmt . executeUpdate ( \"insert into instructor values(\u201977987\u2019, \u2019Kim\u2019, \u2019Physics\u2019, 98000)\" ); } catch ( SQLException sqle ) { System . out . println ( \"Could not insert tuple. \" + sqle ); } Execute query and fetch and print results ResultSet rset = stmt . executeQuery ( \"select dept_name, avg (salary) from instructor group by dept_name\" ); while ( rset . next ()) { System . out . println ( rset . getString ( \"dept_name\" ) + \" \" + rset . getFloat ( 2 )); } Getting result fields: rset . getString ( \u201c dept_name \u201d ) and rset . getString ( 1 ) equivalent if dept_name is the first argument of select result . Dealing with Null values int a = rset . getInt ( \u201c a \u201d ); if ( rset . wasNull ()) Systems . out . println ( \u201c Got null value \u201d ); Prepared Statement Prepared Statement PreparedStatement pStmt = conn . prepareStatement ( \"insert into instructor values(?,?,?,?)\" ); pStmt . setString ( 1 , \"88877\" ); pStmt . setString ( 2 , \"Perry\" ); pStmt . setString ( 3 , \"Finance\" ); pStmt . setInt ( 4 , 125000 ); pStmt . executeUpdate (); pStmt . setString ( 1 , \"88878\" ); pStmt . executeUpdate (); \u8fd9\u91cc\u7a7a\u683c\u662f\u5360\u4f4d\u7b26\uff0c\u8868\u793a\u6267\u884c\u65f6\u9700\u8981\u63d0\u4f9b\u56db\u4e2a\u53c2\u6570\u3002 setString, setInt \u5c31\u662f\u628a\u7b2c\u51e0\u4e2a\u5360\u4f4d\u7b26\u8bbe\u7f6e\u4e3a\u53c2\u6570\uff0c\u5e76 executeUpdate \u8fdb\u884c\u63d2\u5165\u3002 SQL Injection Always use prepared statements when taking an input from the user and adding it to a query. NEVER create a query by concatenating strings which you get as inputs. SQL \u6ce8\u5165\u653b\u51fb\u3002 Suppose query is constructed using select * from instructor where name = \u2019\" + name + \u201c \u2019 Suppose the user, instead of entering a name, enters: X\u2019 or \u2019Y\u2019 = \u2019Y then the resulting string of the statement becomes: select * from instructor where name = \u2019\" + \"X\u2019 or \u2019Y\u2019 = \u2019Y\" + \u201c\u2019 which is: select * from instructor where name = \u2019X\u2019 or \u2019Y\u2019 = \u2019Y\u2019 User could have even used X\u2019; update instructor set salary = salary + 10000; then select * from instructor where name = \u2019X\u2019; update instructor set salary = salary + 10000; Always use prepared statements, with user inputs as parameters Metadata Features ResultSet metadata Example after executing query to get a ResultSet rs: ResultSetMetaData rsmd = rs . getMetaData (); for ( int i = 1 ; i <= rsmd . getColumnCount (); i ++ ) { System . out . println ( rsmd . getColumnName ( i )); System . out . println ( rsmd . getColumnTypeName ( i )); } Database metadata Example DatabaseMetaData dbmd = conn . getMetaData (); ResultSet rs = dbmd . getColumns ( null , \"univdb\" , \"department\" , \"%\" ); // Arguments to getColumns: Catalog, Schema-pattern, Table-pattern, // and Column-Pattern // Returns: One row for each column; row has a number of attributes // such as COLUMN_NAME, TYPE_NAME while ( rs . next ()) { System . out . println ( rs . getString ( \"COLUMN_NAME\" ), rs . getString ( \"TYPE_NAME\" ); Transaction Control in JDBC Can turn off automatic commit on a connection conn.setAutoCommit(false); Transactions must then be committed or rolled back explicitly conn.commit(); or conn.rollback(); conn.setAutoCommit(true) turns on automatic commit. \u6240\u6709\u7684\u6570\u636e\u5e93\u529f\u80fd\u90fd\u662f\u901a\u8fc7 Java \u5c01\u88c5\u597d\u7684\u7c7b\u6765\u5b9e\u73b0\u7684\u3002 SQLJ \u00b6 SQLJ: embedded SQL in Java # sql iterator deptInfoIter ( String dept name , int avgSal ); deptInfoIter iter = null ; # sql iter = { select dept_name , avg ( salary ) as avgSal from instructor group by dept name }; while ( iter . next ()) { String deptName = iter . dept_name (); int avgSal = iter . avgSal (); System . out . println ( deptName + \" \" + avgSal ); } iter . close (); \u5d4c\u5165\u90fd\u8981 #sql \u6807\u8bc6\uff0c\u6700\u540e\u4f1a\u88ab\u7f16\u8bd1\u5668\u8f6c\u5316\u4e3a Java \u7684\u7c7b\u3002 ODBC \u00b6 Each database system supporting ODBC provides a \"driver\" library that must be linked with the client program. Example int ODBCexample () { RETCODE error ; HENV env ; /* environment */ HDBC conn ; /* database connection */ SQLAllocEnv ( & env ); SQLAllocConnect ( env , & conn ); SQLConnect ( conn , \u201c db . yale . edu \", SQL_NTS, \" avi \", SQL_NTS, \" avipasswd \", SQL_NTS); { ... Do actual work ... } SQLDisconnect ( conn ); SQLFreeConnect ( conn ); SQLFreeEnv ( env ); } \u540c\u4e00\u4e2a\u6570\u636e\u5e93\u53ef\u80fd\u670d\u52a1\u4e8e\u591a\u4e2a\u7528\u6237\uff0c\u800c\u4e14\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u53ef\u80fd\u4e0d\u540c\uff0c\u5982\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u6807\u5fd7\u53ef\u80fd\u4e5f\u4e0d\u540c\uff0c\u56e0\u6b64\u9700\u8981\u7528 SQL_NTS \u6807\u8bc6\u3002 Program sends SQL commands to database by using SQLExecDirect Result tuples are fetched using SQLFetch() SQLBindCol() binds C language variables to attributes of the query result When a tuple is fetched, its attribute values are automatically stored in corresponding C variables. Arguments to SQLBindCol() ODBC stmt variable, attribute position in query result The type conversion from SQL to C. The address of the variable. For variable-length types like character arrays, The maximum length of the variable Location to store actual length when a tuple is fetched. Note: A negative value returned for the length field indicates null value Example Main body of program char deptname [ 80 ]; float salary ; int lenOut1 , lenOut2 ; HSTMT stmt ; char * sqlquery = \"select dept_name, sum (salary) from instructor group by dept_name\" ; SQLAllocStmt ( conn , & stmt ); error = SQLExecDirect ( stmt , sqlquery , SQL_NTS ); if ( error == SQL SUCCESS ) { SQLBindCol ( stmt , 1 , SQL_C_CHAR , deptname , 80 , & lenOut1 ); SQLBindCol ( stmt , 2 , SQL_C_FLOAT , & salary , 0 , & lenOut2 ); while ( SQLFetch ( stmt ) == SQL_SUCCESS ) { printf ( \" %s %g \\n \" , deptname , salary ); } } SQLFreeStmt ( stmt , SQL_DROP ); \u5b9a\u4e49\u6570\u7ec4\u9700\u8981\u591a\u4e00\u4e2a\uff0c\u5426\u5219\u4f1a\u6709\u622a\u65ad\u3002\u5982 char deptname[11]; \u624d\u80fd\u5b9a\u4e49\u5341\u4e2a\u5143\u7ec4\u3002 \u5982\u679c\u7ed3\u679c\u4e3a\u7a7a\uff0c\u5219 lenOut \u4e3a -1. ODBC Prepared Statements SQL statement prepared: compiled at the database To prepare a statement SQLPrepare(stmt, <SQL String>); To bind parameters SQLBindParameter(stmt, <parameter#>, ... type information and value omitted for simplicity..) To execute the statement retcode = SQLExecute(stmt); Can have placeholders: e.g. insert into account values(?,?,?) Repeatedly executed with actual values for the placeholders More ODBC Features Metadata features finding all the relations in the database and finding the names and types of columns of a query result or a relation in the database. By default, each SQL statement is treated as a separate transaction that is committed automatically. Can turn off automatic commit on a connection SQLSetConnectOption(conn, SQL_AUTOCOMMIT, 0)} Transactions must then be committed or rolled back explicitly by SQLTransact(conn, SQL_COMMIT) or SQLTransact(conn, SQL_ROLLBACK) Embedded SQL \u00b6 A language to which SQL queries are embedded is referred to as a host language , and the SQL structures permitted in the host language comprise embedded SQL. \u5982\u628a SQL \u5d4c\u5165\u5230 C \u8bed\u8a00\uff0c\u90a3\u4e48 C \u8bed\u8a00\u662f host. \u5728\u7f16\u8bd1\u524d\uff0c\u6709\u4e00\u4e2a\u9884\u7f16\u8bd1\u5668\uff0c\u5c06 SQL \u8bed\u53e5\u7ffb\u8bd1\u3002 EXEC SQL statement is used in the host language to identify embedded SQL request to the preprocessor (in Java, # SQL { ... }; ) Issues with Embedded SQL Mark the start point and end point of Embedded SQL EXEC SQL <statement>\uff1b //C Communication between database and programming language e.g. SQLCA\u3001SQLDA Address the mismatching issue between SQL and host lanugage. Handle result (set) with cursor Mapping of basic data types e.g. SQL: Date \\(\\rightarrow\\) C: char(12) Example insert \u3001 delete \u3001 update \u3001 select ( single record ) main ( ) { EXEC SQL INCLUDE SQLCA ; //\u58f0\u660e\u6bb5\u5f00\u59cb EXEC SQL BEGIN DECLARE SECTION ; char account_no [ 11 ]; //host variables(\u5bbf\u4e3b\u53d8\u91cf)\u58f0\u660e char branch_name [ 16 ]; int balance ; EXEC SQL END DECLARE SECTION ; //\u58f0\u660e\u6bb5\u7ed3\u675f EXEC SQL CONNECT TO bank_db USER Adam Using Eve ; scanf ( \u201c % s % s % d \u201d , account_no , branch_name , balance ); EXEC SQL insert into account values ( : account_no , : branch_name , : balance ); If ( SQLCA . sqlcode ! = 0 ) printf ( \u201c Error ! \\ n \u201d ); else printf ( \u201c Success ! \\ n \u201d ); } \u6700\u5f00\u59cb\u58f0\u660e\u6bb5\u4e2d\u7684 host \u8bed\u53e5\uff0c\u53ef\u4ee5\u7528\u5728 SQL \u8bed\u53e5\u91cc\u3002 \u4e24\u70b9\u4e0d\u5e73\u8861\uff1a\u6ca1\u6709\u96c6\u5408\uff1b\u6ca1\u6709 NULL\uff1b\u6ca1\u6709\u65e5\u671f\u7c7b\u578b \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u4f46 ODBC \u53ea\u6709\u5728\u8fd0\u884c\u65f6\u624d\u6709\u3002 Static\uff1a Embedded SQL statements( include relation names and attribute names) are hard coded in program. Dynamic\uff1aEmbedded SQL statements are built at run time Procedural Constructs in SQL \u00b6 SQL provides a module language Permits definition of procedures in SQL, with if-then-else statements, for and while loops, etc. Stored Procedures Can store procedures in the database then execute them using the call statement permit external applications to operate on the database without knowing about internal details SQL Functions \u00b6 Example SQL \u51fd\u6570\u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a table. Example SQL Procedures \u00b6 \u6709\u8f93\u5165\u53c2\u6570( in )\u548c\u8f93\u51fa\u53c2\u6570( out ) Example Procedural Constructs \u00b6 Compound statement: begin ... end , May contain multiple SQL statements between begin and end . Local variables can be declared within a compound statements While and repeat statements e.g. declare n integer default 0 ; while n < 10 do set n = n + 1 end while repeat set n = n \u2013 1 until n = 0 end repeat For loop Permits iteration over all results of a query e.g. declare n integer default 0 ; for r as select budget from department where dept_name = \u2018 Music \u2019 do set n = n - r . budget end for r \u8868\u793a\u8fd4\u56de\u7684\u6bcf\u4e00\u884c Example procedure External Language Functions/Procedures \u00b6 SQL \u53ef\u4ee5\u8bbf\u95ee\u7531 C \u8bed\u8a00\u5b9a\u4e49\u7684\u51fd\u6570\uff08\u8fc7\u7a0b\uff09 Example create procedure dept_count_proc ( in dept_name varchar ( 20 ), count integer ) language C external name \u2019 / usr / avi / bin / dept_count_proc \u2019 create function dept_count ( dept_name varchar ( 20 )) returns integer language C external name \u2018 / usr / avi / bin / dept_count \u2019 \u53ef\u80fd\u6bd4\u8f83\u5371\u9669\uff0c\u653e\u5728\u865a\u62df\u673a\uff08Java\uff09\u6216\u8005\u72ec\u7acb\u7684\u7ebf\u7a0b Triggers \u00b6 A trigger is a statement that is executed automatically by the system as a side effect of a modification to the database. Trigger - ECA rule E : Event \uff08 insert, delete \uff0cupdate\uff09 C : Condition A : Action To design a trigger mechanism, we must: Specify the conditions under which the trigger is to be executed. Specify the actions to be taken when the trigger executes. Example time_slot_id Example \u8fd9\u91cc time_slot_id \u4e0d\u662f\u4e3b\u952e\uff0c\u56e0\u6b64\u5220\u9664\u4e0d\u4f1a\u5f15\u8d77\u5176\u4ed6\u5f71\u54cd\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e2a\u89e6\u53d1\u5668\uff0c\u7528\u6765\u68c0\u67e5\u5f53\u524d\u8bfe\u7a0b\u7684 time_slot_id \u662f\u5426\u5728\u8868\u5185\u3002 \u7b2c\u4e8c\u4e2a\u89e6\u53d1\u5668\u8868\u793a\uff0ctime_slot_id \u5df2\u7ecf\u88ab\u5220\u5b8c\u4e86\uff0c\u4f46\u4f9d\u7136\u6709\u8bfe\u7a0b\u5728\u5f15\u7528\uff0c\u5c31\u8981 rollback. Triggering event can be insert, delete or update Triggers on update can be restricted to specific attributes e.g. after(before) update of takes on grade Values of attributes before and after an update can be referenced referencing old row as: for deletes and updates referencing new row as: for inserts and updates Trigger to Maintain credits_earned value \u5982\u679c\u672c\u6765\u6302\u79d1\uff0c\u6216\u8005\u6ca1\u6709\u6210\u7ee9\uff0c\u66f4\u65b0\u540e\u4e0d\u518d\u6302\u79d1\u800c\u4e14\u6709\u6210\u7ee9\uff0c\u5c31\u628a\u5b66\u5206\u52a0\u4e0a\u53bb\u3002 \u8981\u614e\u7528\u89e6\u53d1\u5668\uff0c\u7528\u5728\u5200\u5203\u4e0a\uff0c\u53ef\u80fd\u4f1a\u5f15\u53d1\u8fde\u9501\u53cd\u5e94\u3002 Instead of executing a separate action for each affected row, a single action can be executed for all rows affected by a transaction Use for each statement instead of for each row Use referencing old table or referencing new table to refer to temporary tables (called transition tables) containing the affected rows Can be more efficient when dealing with SQL statements that update a large number of rows Example","title":"\u9ad8\u7ea7 SQL"},{"location":"DB/db5/#advanced-sql","text":"","title":"Advanced SQL"},{"location":"DB/db5/#accessing-sql-from-a-programming-language","text":"Not all queries can be expressed in SQL, since SQL does not provide the full expressive power of a general-purpose language. \u4e0d\u662f\u6240\u6709\u7684\u67e5\u8be2\u90fd\u80fd\u7528 SQL \u8bed\u8a00\u8868\u8fbe\u3002 Non-declarative actions -- such as printing a report, interacting with a user, or sending the results of a query to a graphical user interface -- cannot be done from within SQL. \u7528\u6237\u4ea4\u4e92\u662f\u56fe\u5f62\u754c\u9762\uff0c\u8bed\u97f3\u3001\u56fe\u50cf\uff0c\u6570\u636e\u5e93\u4e0d\u5177\u5907\u8fd9\u65b9\u9762\u7684\u529f\u80fd\u3002 \u4ece\u9ad8\u7ea7\u8bed\u8a00\uff08\u5982 C\uff09\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u4e3b\u8981\u662f\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\uff1a API (Application Program Interface) -- A general-purpose program can connect to and communicate with a database server using a collection of functions. \u51fd\u6570\u5e93 Embedded SQL -- provides a means by which a program can interact with a database server. \u628a SQL \u8bed\u53e5\u5d4c\u5165\u5230\u8bed\u8a00\u5185 The SQL statements are translated at compile time into function calls. At runtime, these function calls connect to the database using an API that provides dynamic SQL facilities.","title":"Accessing SQL from a Programming Language"},{"location":"DB/db5/#jdbc-and-odbc","text":"API (application-program interface) for a program to interact with a database server Application makes calls to Connect with the database server \u5efa\u7acb\u8fde\u63a5 Send SQL commands to the database server \u6307\u4ee4\u53d1\u9001\u5230\u670d\u52a1\u5668 Fetch tuples of result one-by-one into program variables \u62ff\u56de\u7ed3\u679c SQL \u4e0e C \u8bed\u8a00\u5b58\u5728\u9e3f\u6c9f\uff08\u5982 select \u5f97\u5230\u7684\u662f\u96c6\u5408\uff0c\u4f46\u662f C \u8bed\u8a00\u6ca1\u6709\u8fd9\u79cd\u7c7b\u578b\uff09\u4f1a\u8fd4\u56de\u6307\u9488/\u8fed\u4ee3\u5668 ODBC (Open Database Connectivity) works with C, C++, C# JDBC (Java Database Connectivity) works with Java \u901a\u8fc7\u7c7b\u5b9a\u4e49\uff0c\u5c06\u6570\u636e\u5e93\u64cd\u4f5c\u5c01\u88c5\u5230 Java \u5185 Embedded SQL in C SQLJ - embedded SQL in Java JPA (Java Persistence API) - OR mapping of Java","title":"JDBC and ODBC"},{"location":"DB/db5/#jdbc","text":"JDBC is a Java API for communicating with database systems supporting SQL. public static void JDBCexample ( String dbid , String userid , String passwd ) { try { Connection conn = DriverManager . getConnection ( \"jdbc:oracle:thin:@db.yale.edu:2000:univdb\" , userid , passwd ); Statement stmt = conn . createStatement (); ... Do Actual Work ... stmt . close (); conn . close (); } catch ( SQLException sqle ) { System . out . println ( \"SQLException : \" + sqle ); } } Open a connection Create a \u201cstatement\u201d object Execute queries using the Statement object to send queries and fetch results Exception mechanism to handle errors Example Update to database Update to database try { stmt . executeUpdate ( \"insert into instructor values(\u201977987\u2019, \u2019Kim\u2019, \u2019Physics\u2019, 98000)\" ); } catch ( SQLException sqle ) { System . out . println ( \"Could not insert tuple. \" + sqle ); } Execute query and fetch and print results ResultSet rset = stmt . executeQuery ( \"select dept_name, avg (salary) from instructor group by dept_name\" ); while ( rset . next ()) { System . out . println ( rset . getString ( \"dept_name\" ) + \" \" + rset . getFloat ( 2 )); } Getting result fields: rset . getString ( \u201c dept_name \u201d ) and rset . getString ( 1 ) equivalent if dept_name is the first argument of select result . Dealing with Null values int a = rset . getInt ( \u201c a \u201d ); if ( rset . wasNull ()) Systems . out . println ( \u201c Got null value \u201d ); Prepared Statement Prepared Statement PreparedStatement pStmt = conn . prepareStatement ( \"insert into instructor values(?,?,?,?)\" ); pStmt . setString ( 1 , \"88877\" ); pStmt . setString ( 2 , \"Perry\" ); pStmt . setString ( 3 , \"Finance\" ); pStmt . setInt ( 4 , 125000 ); pStmt . executeUpdate (); pStmt . setString ( 1 , \"88878\" ); pStmt . executeUpdate (); \u8fd9\u91cc\u7a7a\u683c\u662f\u5360\u4f4d\u7b26\uff0c\u8868\u793a\u6267\u884c\u65f6\u9700\u8981\u63d0\u4f9b\u56db\u4e2a\u53c2\u6570\u3002 setString, setInt \u5c31\u662f\u628a\u7b2c\u51e0\u4e2a\u5360\u4f4d\u7b26\u8bbe\u7f6e\u4e3a\u53c2\u6570\uff0c\u5e76 executeUpdate \u8fdb\u884c\u63d2\u5165\u3002 SQL Injection Always use prepared statements when taking an input from the user and adding it to a query. NEVER create a query by concatenating strings which you get as inputs. SQL \u6ce8\u5165\u653b\u51fb\u3002 Suppose query is constructed using select * from instructor where name = \u2019\" + name + \u201c \u2019 Suppose the user, instead of entering a name, enters: X\u2019 or \u2019Y\u2019 = \u2019Y then the resulting string of the statement becomes: select * from instructor where name = \u2019\" + \"X\u2019 or \u2019Y\u2019 = \u2019Y\" + \u201c\u2019 which is: select * from instructor where name = \u2019X\u2019 or \u2019Y\u2019 = \u2019Y\u2019 User could have even used X\u2019; update instructor set salary = salary + 10000; then select * from instructor where name = \u2019X\u2019; update instructor set salary = salary + 10000; Always use prepared statements, with user inputs as parameters Metadata Features ResultSet metadata Example after executing query to get a ResultSet rs: ResultSetMetaData rsmd = rs . getMetaData (); for ( int i = 1 ; i <= rsmd . getColumnCount (); i ++ ) { System . out . println ( rsmd . getColumnName ( i )); System . out . println ( rsmd . getColumnTypeName ( i )); } Database metadata Example DatabaseMetaData dbmd = conn . getMetaData (); ResultSet rs = dbmd . getColumns ( null , \"univdb\" , \"department\" , \"%\" ); // Arguments to getColumns: Catalog, Schema-pattern, Table-pattern, // and Column-Pattern // Returns: One row for each column; row has a number of attributes // such as COLUMN_NAME, TYPE_NAME while ( rs . next ()) { System . out . println ( rs . getString ( \"COLUMN_NAME\" ), rs . getString ( \"TYPE_NAME\" ); Transaction Control in JDBC Can turn off automatic commit on a connection conn.setAutoCommit(false); Transactions must then be committed or rolled back explicitly conn.commit(); or conn.rollback(); conn.setAutoCommit(true) turns on automatic commit. \u6240\u6709\u7684\u6570\u636e\u5e93\u529f\u80fd\u90fd\u662f\u901a\u8fc7 Java \u5c01\u88c5\u597d\u7684\u7c7b\u6765\u5b9e\u73b0\u7684\u3002","title":"JDBC"},{"location":"DB/db5/#sqlj","text":"SQLJ: embedded SQL in Java # sql iterator deptInfoIter ( String dept name , int avgSal ); deptInfoIter iter = null ; # sql iter = { select dept_name , avg ( salary ) as avgSal from instructor group by dept name }; while ( iter . next ()) { String deptName = iter . dept_name (); int avgSal = iter . avgSal (); System . out . println ( deptName + \" \" + avgSal ); } iter . close (); \u5d4c\u5165\u90fd\u8981 #sql \u6807\u8bc6\uff0c\u6700\u540e\u4f1a\u88ab\u7f16\u8bd1\u5668\u8f6c\u5316\u4e3a Java \u7684\u7c7b\u3002","title":"SQLJ"},{"location":"DB/db5/#odbc","text":"Each database system supporting ODBC provides a \"driver\" library that must be linked with the client program. Example int ODBCexample () { RETCODE error ; HENV env ; /* environment */ HDBC conn ; /* database connection */ SQLAllocEnv ( & env ); SQLAllocConnect ( env , & conn ); SQLConnect ( conn , \u201c db . yale . edu \", SQL_NTS, \" avi \", SQL_NTS, \" avipasswd \", SQL_NTS); { ... Do actual work ... } SQLDisconnect ( conn ); SQLFreeConnect ( conn ); SQLFreeEnv ( env ); } \u540c\u4e00\u4e2a\u6570\u636e\u5e93\u53ef\u80fd\u670d\u52a1\u4e8e\u591a\u4e2a\u7528\u6237\uff0c\u800c\u4e14\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u53ef\u80fd\u4e0d\u540c\uff0c\u5982\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u6807\u5fd7\u53ef\u80fd\u4e5f\u4e0d\u540c\uff0c\u56e0\u6b64\u9700\u8981\u7528 SQL_NTS \u6807\u8bc6\u3002 Program sends SQL commands to database by using SQLExecDirect Result tuples are fetched using SQLFetch() SQLBindCol() binds C language variables to attributes of the query result When a tuple is fetched, its attribute values are automatically stored in corresponding C variables. Arguments to SQLBindCol() ODBC stmt variable, attribute position in query result The type conversion from SQL to C. The address of the variable. For variable-length types like character arrays, The maximum length of the variable Location to store actual length when a tuple is fetched. Note: A negative value returned for the length field indicates null value Example Main body of program char deptname [ 80 ]; float salary ; int lenOut1 , lenOut2 ; HSTMT stmt ; char * sqlquery = \"select dept_name, sum (salary) from instructor group by dept_name\" ; SQLAllocStmt ( conn , & stmt ); error = SQLExecDirect ( stmt , sqlquery , SQL_NTS ); if ( error == SQL SUCCESS ) { SQLBindCol ( stmt , 1 , SQL_C_CHAR , deptname , 80 , & lenOut1 ); SQLBindCol ( stmt , 2 , SQL_C_FLOAT , & salary , 0 , & lenOut2 ); while ( SQLFetch ( stmt ) == SQL_SUCCESS ) { printf ( \" %s %g \\n \" , deptname , salary ); } } SQLFreeStmt ( stmt , SQL_DROP ); \u5b9a\u4e49\u6570\u7ec4\u9700\u8981\u591a\u4e00\u4e2a\uff0c\u5426\u5219\u4f1a\u6709\u622a\u65ad\u3002\u5982 char deptname[11]; \u624d\u80fd\u5b9a\u4e49\u5341\u4e2a\u5143\u7ec4\u3002 \u5982\u679c\u7ed3\u679c\u4e3a\u7a7a\uff0c\u5219 lenOut \u4e3a -1. ODBC Prepared Statements SQL statement prepared: compiled at the database To prepare a statement SQLPrepare(stmt, <SQL String>); To bind parameters SQLBindParameter(stmt, <parameter#>, ... type information and value omitted for simplicity..) To execute the statement retcode = SQLExecute(stmt); Can have placeholders: e.g. insert into account values(?,?,?) Repeatedly executed with actual values for the placeholders More ODBC Features Metadata features finding all the relations in the database and finding the names and types of columns of a query result or a relation in the database. By default, each SQL statement is treated as a separate transaction that is committed automatically. Can turn off automatic commit on a connection SQLSetConnectOption(conn, SQL_AUTOCOMMIT, 0)} Transactions must then be committed or rolled back explicitly by SQLTransact(conn, SQL_COMMIT) or SQLTransact(conn, SQL_ROLLBACK)","title":"ODBC"},{"location":"DB/db5/#embedded-sql","text":"A language to which SQL queries are embedded is referred to as a host language , and the SQL structures permitted in the host language comprise embedded SQL. \u5982\u628a SQL \u5d4c\u5165\u5230 C \u8bed\u8a00\uff0c\u90a3\u4e48 C \u8bed\u8a00\u662f host. \u5728\u7f16\u8bd1\u524d\uff0c\u6709\u4e00\u4e2a\u9884\u7f16\u8bd1\u5668\uff0c\u5c06 SQL \u8bed\u53e5\u7ffb\u8bd1\u3002 EXEC SQL statement is used in the host language to identify embedded SQL request to the preprocessor (in Java, # SQL { ... }; ) Issues with Embedded SQL Mark the start point and end point of Embedded SQL EXEC SQL <statement>\uff1b //C Communication between database and programming language e.g. SQLCA\u3001SQLDA Address the mismatching issue between SQL and host lanugage. Handle result (set) with cursor Mapping of basic data types e.g. SQL: Date \\(\\rightarrow\\) C: char(12) Example insert \u3001 delete \u3001 update \u3001 select ( single record ) main ( ) { EXEC SQL INCLUDE SQLCA ; //\u58f0\u660e\u6bb5\u5f00\u59cb EXEC SQL BEGIN DECLARE SECTION ; char account_no [ 11 ]; //host variables(\u5bbf\u4e3b\u53d8\u91cf)\u58f0\u660e char branch_name [ 16 ]; int balance ; EXEC SQL END DECLARE SECTION ; //\u58f0\u660e\u6bb5\u7ed3\u675f EXEC SQL CONNECT TO bank_db USER Adam Using Eve ; scanf ( \u201c % s % s % d \u201d , account_no , branch_name , balance ); EXEC SQL insert into account values ( : account_no , : branch_name , : balance ); If ( SQLCA . sqlcode ! = 0 ) printf ( \u201c Error ! \\ n \u201d ); else printf ( \u201c Success ! \\ n \u201d ); } \u6700\u5f00\u59cb\u58f0\u660e\u6bb5\u4e2d\u7684 host \u8bed\u53e5\uff0c\u53ef\u4ee5\u7528\u5728 SQL \u8bed\u53e5\u91cc\u3002 \u4e24\u70b9\u4e0d\u5e73\u8861\uff1a\u6ca1\u6709\u96c6\u5408\uff1b\u6ca1\u6709 NULL\uff1b\u6ca1\u6709\u65e5\u671f\u7c7b\u578b \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u4f46 ODBC \u53ea\u6709\u5728\u8fd0\u884c\u65f6\u624d\u6709\u3002 Static\uff1a Embedded SQL statements( include relation names and attribute names) are hard coded in program. Dynamic\uff1aEmbedded SQL statements are built at run time","title":"Embedded SQL"},{"location":"DB/db5/#procedural-constructs-in-sql","text":"SQL provides a module language Permits definition of procedures in SQL, with if-then-else statements, for and while loops, etc. Stored Procedures Can store procedures in the database then execute them using the call statement permit external applications to operate on the database without knowing about internal details","title":"Procedural Constructs in SQL"},{"location":"DB/db5/#sql-functions","text":"Example SQL \u51fd\u6570\u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a table. Example","title":"SQL Functions"},{"location":"DB/db5/#sql-procedures","text":"\u6709\u8f93\u5165\u53c2\u6570( in )\u548c\u8f93\u51fa\u53c2\u6570( out ) Example","title":"SQL Procedures"},{"location":"DB/db5/#procedural-constructs","text":"Compound statement: begin ... end , May contain multiple SQL statements between begin and end . Local variables can be declared within a compound statements While and repeat statements e.g. declare n integer default 0 ; while n < 10 do set n = n + 1 end while repeat set n = n \u2013 1 until n = 0 end repeat For loop Permits iteration over all results of a query e.g. declare n integer default 0 ; for r as select budget from department where dept_name = \u2018 Music \u2019 do set n = n - r . budget end for r \u8868\u793a\u8fd4\u56de\u7684\u6bcf\u4e00\u884c Example procedure","title":"Procedural Constructs"},{"location":"DB/db5/#external-language-functionsprocedures","text":"SQL \u53ef\u4ee5\u8bbf\u95ee\u7531 C \u8bed\u8a00\u5b9a\u4e49\u7684\u51fd\u6570\uff08\u8fc7\u7a0b\uff09 Example create procedure dept_count_proc ( in dept_name varchar ( 20 ), count integer ) language C external name \u2019 / usr / avi / bin / dept_count_proc \u2019 create function dept_count ( dept_name varchar ( 20 )) returns integer language C external name \u2018 / usr / avi / bin / dept_count \u2019 \u53ef\u80fd\u6bd4\u8f83\u5371\u9669\uff0c\u653e\u5728\u865a\u62df\u673a\uff08Java\uff09\u6216\u8005\u72ec\u7acb\u7684\u7ebf\u7a0b","title":"External Language Functions/Procedures"},{"location":"DB/db5/#triggers","text":"A trigger is a statement that is executed automatically by the system as a side effect of a modification to the database. Trigger - ECA rule E : Event \uff08 insert, delete \uff0cupdate\uff09 C : Condition A : Action To design a trigger mechanism, we must: Specify the conditions under which the trigger is to be executed. Specify the actions to be taken when the trigger executes. Example time_slot_id Example \u8fd9\u91cc time_slot_id \u4e0d\u662f\u4e3b\u952e\uff0c\u56e0\u6b64\u5220\u9664\u4e0d\u4f1a\u5f15\u8d77\u5176\u4ed6\u5f71\u54cd\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e2a\u89e6\u53d1\u5668\uff0c\u7528\u6765\u68c0\u67e5\u5f53\u524d\u8bfe\u7a0b\u7684 time_slot_id \u662f\u5426\u5728\u8868\u5185\u3002 \u7b2c\u4e8c\u4e2a\u89e6\u53d1\u5668\u8868\u793a\uff0ctime_slot_id \u5df2\u7ecf\u88ab\u5220\u5b8c\u4e86\uff0c\u4f46\u4f9d\u7136\u6709\u8bfe\u7a0b\u5728\u5f15\u7528\uff0c\u5c31\u8981 rollback. Triggering event can be insert, delete or update Triggers on update can be restricted to specific attributes e.g. after(before) update of takes on grade Values of attributes before and after an update can be referenced referencing old row as: for deletes and updates referencing new row as: for inserts and updates Trigger to Maintain credits_earned value \u5982\u679c\u672c\u6765\u6302\u79d1\uff0c\u6216\u8005\u6ca1\u6709\u6210\u7ee9\uff0c\u66f4\u65b0\u540e\u4e0d\u518d\u6302\u79d1\u800c\u4e14\u6709\u6210\u7ee9\uff0c\u5c31\u628a\u5b66\u5206\u52a0\u4e0a\u53bb\u3002 \u8981\u614e\u7528\u89e6\u53d1\u5668\uff0c\u7528\u5728\u5200\u5203\u4e0a\uff0c\u53ef\u80fd\u4f1a\u5f15\u53d1\u8fde\u9501\u53cd\u5e94\u3002 Instead of executing a separate action for each affected row, a single action can be executed for all rows affected by a transaction Use for each statement instead of for each row Use referencing old table or referencing new table to refer to temporary tables (called transition tables) containing the affected rows Can be more efficient when dealing with SQL statements that update a large number of rows Example","title":"Triggers"},{"location":"DB/db6/","text":"Entity-Relationship Model \u00b6 Example \u00b6 \u4e00\u4e2a\u65b9\u5f62\u6846\u5c31\u662f\u4e00\u4e2a\u5b9e\u4f53\u7684\u96c6\u5408\uff0c\u4e0b\u9762\u5217\u51fa\u5176\u5c5e\u6027\u3002 \u5b9e\u4f53\u4e0e\u5b9e\u4f53\u4e4b\u95f4\u6709\u5173\u7cfb\uff0c\u4e00\u4e2a\u83f1\u5f62\u6846\u8868\u793a\u5173\u7cfb\u3002 \u4e00\u5bf9\u4e00( \\(\\leftrightarrow\\) )/\u4e00\u5bf9\u591a/\u591a\u5bf9\u4e00( \\(\\leftarrow, \\rightarrow\\) )\u3002 \u8fd9\u91cc instructor \u5b9e\u4f53\u91cc\u4e0d\u9700\u8981 dept \u5c5e\u6027\uff0c\u56e0\u4e3a\u5728 department \u5b9e\u4f53\u91cc\u6709\u4e86\uff0c\u5426\u5219\u4f1a\u5197\u4f59\u3002 \u6bcf\u4e2a\u5b9e\u4f53\u76f4\u63a5\u8f6c\u6362\u4e3a\u5173\u7cfb\u6a21\u5f0f\u3002 \u5173\u7cfb\u8f6c\u6362\u4e3a\u5143\u7ec4\uff0c\u5143\u7d20\u4e3a\u4e24\u4e2a\u8868\u7684 primary key. \u5bf9\u4e8e\u4e00\u5bf9\u591a\u7684\u60c5\u51b5\uff08\u5982 instructor \u548c department\uff09\u8f6c\u6362\u540e primary key \u4ecd\u4e3a ID. \u4e3a\u4e86\u51cf\u5c11\u8868\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u628a primary key \u76f8\u540c\u7684\u8868\u5408\u5e76\u3002 \u53cc\u6a2a\u7ebf\u4e0e\u5355\u6a2a\u7ebf\u4e0d\u540c \u53cc\u6a2a\u7ebf\u8868\u793a\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5fc5\u987b\u53c2\u4e0e\u5173\u7cfb\uff0c\u800c\u5355\u6a2a\u7ebf\u5219\u8868\u793a\u5bf9\u8c61\u53ef\u4ee5\u4e0d\u53c2\u4e0e\u5173\u7cfb\u3002\u5982 inst_dept \u4e2d\u5982\u679c department - inst_dep \u4e3a\u53cc\u6a2a\u7ebf\uff0c\u5219\u8868\u793a\u6bcf\u4e00\u4e2a\u7cfb\u90fd\u8981\u6709\u8001\u5e08\u3002 \u6709\u4e9b\u8054\u7cfb\u662f\u9690\u542b\u7684\uff0c\u5982\u6388\u8bfe\u8001\u5e08\u548c\u542c\u8bfe\u7684\u5b66\u751f\u3002 section \u4e0d\u8db3\u4ee5\u552f\u4e00\u786e\u5b9a\u5143\u7ec4\uff0c\u79f0\u4e3a\u5f31\u5b9e\u4f53\uff0c\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u5b9e\u4f53\uff08\u5982 OOP\u3001DB \u90fd\u53ef\u4ee5\u6709\u540c\u6837\u5e74\u4efd\u5b66\u671f\u7684 1 \u73ed\uff09\u3002\u56e0\u4e3a\u8bfe\u7a0b\u53f7 course_id \u653e\u5728 section \u4f1a\u6709\u5197\u4f59\uff0c\u56e0\u6b64\u6ca1\u6709\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5bfc\u81f4\u5f62\u6210\u4e86\u4e00\u4e2a\u5f31\u5b9e\u4f53\u3002 sec_course \u8868\u793a\u8054\u7cfb\u7684\u662f\u5f31\u5b9e\u4f53\uff08\u53cc\u6846\uff09\uff0c section \u4e0d\u80fd\u79bb\u5f00 course \u5b58\u5728\u3002 relationship \u4e0a\u4e5f\u53ef\u4ee5\u5e26\u5c5e\u6027\uff0c\u5982 takes \u4e0a\u7684 grade . \u5173\u7cfb\u53cc\u65b9\u53ef\u4ee5\u662f\u76f8\u540c\u7684\u5b9e\u4f53\u96c6\u5408\uff0c course \u8fd9\u91cc\u7684 prereq \u662f\u591a\u5bf9\u591a\uff0c\u8868\u793a\u4e00\u95e8\u8bfe\u53ef\u4ee5\u6709\u591a\u95e8\u9884\u4fee\u8bfe\uff0c\u4e00\u95e8\u8bfe\u4e5f\u53ef\u4ee5\u662f\u591a\u95e8\u8bfe\u7684\u9884\u4fee\u8bfe\u3002 {} \u91cc\u9762\u662f\u591a\u4e2a\u503c\uff0c\u8868\u793a\u590d\u5408\u5c5e\u6027\u3002\u8fd9\u91cc\u8868\u793a time_slot_id \u5b9e\u9645\u4e0a\u53ef\u4ee5\u7531\u8fd9\u4e09\u4e2a\u5c5e\u6027\u590d\u5408\u800c\u6210\u3002 Database Modeling \u00b6 A database can be modeled as: a collection of entities , relationship among entities. Entities \u00b6 An entity is an object that exists and is distinguishable from other objects. e.g. specific person, company, event, plant * Entities have attributes e.g. people have names and addresses An entity set is a set of entities of the same type that share the same properties. e.g. * set of all persons, companies, trees, holidays Entity sets can be represented graphically as follows: Rectangles represent entity sets. Attributes listed inside entity rectangle Underline indicates primary key attributes Example Relationship Sets \u00b6 A relationship is an association among several entities. A relationship set is a mathematical relation among n \uf0b3 2 entities, each taken from entity \\(\\{(e_1, e_2, ... e_n) | e_1 \\in E_1, e_2 \\in E_2, ..., e_n \\in E_n\\}\\) where \\((e_1, e_2, ..., e_n)\\) is a relationship. \u672c\u8d28\u4e5f\u662f\u4e00\u4e2a\u96c6\u5408\u3002\u6700\u5f00\u59cb\u7684\u4f8b\u5b50\u4e2d\u5747\u4e3a\u662f\u4e8c\u5143\u8054\u7cfb\uff0c\u5373\u662f\u4e24\u4e2a\u5b9e\u4f53\u96c6\u5408\u7684\u5173\u7cfb\uff0c\u4f46\u662f\u5173\u7cfb\u53ef\u4ee5\u662f\u591a\u5143\u7684\uff0c\u5373\u591a\u4e2a\u5b9e\u4f53\u3002\u5982\u8001\u5e08\uff0c\u540c\u5b66\uff0cSRTP \u9879\u76ee\u53ef\u4ee5\u5171\u540c\u5f62\u6210\u4e00\u4e2a\u5173\u7cfb\u3002 Example Relationship Sets with Attributes \u00b6 An attribute can also be property of a relationship set. e.g. The advisor relationship set between entity sets instructor and student may have the attribute date which tracks when the student started being associated with the advisor. Example Roles \u00b6 Entity sets of a relationship need not be distinct. Each occurrence of an entity set plays a \u201crole\u201d in the relationship The labels course_id and prereq_id are called roles. Example Degree(\u5ea6) of a Relationship Set \u00b6 binary relationship\uff08\u4e8c\u5143\u8054\u7cfb\uff09 involve two entity sets (or degree two). most relationship sets in a database system are binary. \u5c3d\u91cf\u4e0d\u7528\u591a\u5143\u8054\u7cfb\uff0c\u56e0\u4e3a\u4e8c\u5143\u8054\u7cfb\u6bd4\u8f83\u6e05\u6670\u3002\u800c\u4e14\u4efb\u4f55\u7684\u591a\u5143\u8054\u7cfb\u90fd\u53ef\u4ee5\u901a\u8fc7\u5f15\u5165\u4e2d\u4ecb\u5b9e\u4f53\u8f6c\u5316\u4e3a\u4e8c\u5143\u8054\u7cfb\u3002 Example \u8f6c\u5316\u4e3a\u4e8c\u5143\u8054\u7cfb\uff1a\u628a\u591a\u5143\u8054\u7cfb\u5b9e\u4f53\u5316\u3002\u5982 proj_guide \u91cc\u6709\u8001\u5e08\u3001\u5b66\u751f\u3001\u5de5\u7a0b\u7684 id. \u968f\u540e\u8fd9\u4e2a\u5b9e\u4f53\u53c8\u548c\u53e6\u5916\u4e09\u4e2a\u5b9e\u4f53\u5404\u6709\u4e00\u4e2a\u4e8c\u5143\u8054\u7cfb\u3002 Attributes \u00b6 An entity is represented by a set of attributes, that is descriptive properties possessed by all members of an entity set. Attribute types : Simple\uff08\u7b80\u5355\uff09 and composite\uff08\u590d\u5408\uff09 attributes. Single-valued\uff08\u5355\u503c\uff09 and multivalued\uff08\u591a\u503c\uff09 attributes e.g. multivalued attribute: phone_numbers Derived\uff08\u6d3e\u751f\uff09 attributes Can be computed from other attributes e.g. age , given date_of_birth Example Mapping Cardinality Constraints \u00b6 \u6620\u5c04\u57fa\u6570\u7ea6\u675f Express the number of entities to which another entity can be associated via a relationship set. One to one One to many Many to one Many to many We express cardinality constraints by drawing either a directed line ( \\(\\rightarrow\\) ), signifying \u201cone,\u201d or an undirected line ( \\(\u2014\\) ), signifying \u201cmany,\u201d between the relationship set and the entity set. Total and Partial Participation \u00b6 Total participation (indicated by double line): every entity in the entity set participates in at least one relationship in the relationship set \u6240\u6709\u5143\u7d20\u90fd\u8981\u53c2\u4e0e\u5173\u7cfb Partial participation : some entities may not participate in any relationship in the relationship set Notation for Expressing More Complex Constraints \u00b6 A line may have an associated minimum and maximum cardinality, shown in the form l..h, where l is the minimum and h the maximum cardinality A minimum value of 1 indicates total participation. A maximum value of 1 indicates that the entity participates in at most one relationship A maximum value of * indicates no limit. Example \u591a\u5143\u5173\u7cfb\u91cc\uff0c\u6211\u4eec\u53ea\u5141\u8bb8\u6700\u591a\u6709\u4e00\u4e2a\u7bad\u5934\u3002 Primary Key \u00b6 Primary Key for Relationship Sets \u591a\u5143\u8054\u7cfb\u7684 primary key \u662f\u4e24\u7aef key \u7684\u7ec4\u5408\u3002\u5982\u679c\u662f\u4e00\u5bf9\u4e00\u7684\u8054\u7cfb\uff0c\u90a3\u4e48\u5355\u4e2a\u5b9e\u4f53\u7684 key \u4e5f\u53ef\u4ee5\u4f5c\u4e3a primary key. \u4e00\u5bf9\u591a\u7684\u8054\u7cfb\uff08\u5982\u5bfc\u5e08\u548c\u5b66\u751f\u5c31\u662f\u4e00\u5bf9\u591a\uff0c\u90a3\u4e48\u4e3b\u952e\u5e94\u8be5\u4e3a\u5b66\u751f\uff09 Weak Entity Sets \u00b6 An entity set that does not have a primary key is referred to as a weak entity set . The existence of a weak entity set depends on the existence of a identifying entity set\uff08\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\uff09 It must relate to the identifying entity set via a total, one-to-many relationship set from the identifying to the weak entity set Identifying relationship\uff08\u6807\u8bc6\u6027\u8054\u7cfb\uff09 depicted using a double diamond The discriminator(\u5206\u8fa8\u7b26\uff0cor partial key) of a weak entity set is the set of attributes that distinguishes among all the entities of a weak entity set when the identifying entity they depend is known. We underline the discriminator of a weak entity set with a dashed line. \uff08\u865a\u7ebf\uff09 We put the identifying relationship of a weak entity in a double diamond. \uff08\u53cc\u6846\uff09 Example Redundant Attributes Reduction to Relational Schemas \u00b6 \u4e00\u4e2a ER \u56fe\u53ef\u4ee5\u8f6c\u6362\u6210\u591a\u79cd\u6a21\u5f0f\uff08\u56fe\u6570\u636e\u5e93\u3001\u9762\u5411\u5bf9\u8c61\u3001\u5173\u7cfb\u6a21\u5f0f\u7b49\uff09 A strong entity set reduces to a schema with the same attributes course(course_id, title, credits) A weak entity set becomes a table that includes a column for the primary key of the identifying strong entity set. Primary key of the table is the union of the discriminator of the weak entity set and the primary key of the identifying strong entity set. \u6807\u8bc6\u96c6\u5408\u7684\u4e3b\u952e\u52a0\u4e0a\u5f31\u5b9e\u4f53\u96c6\u7684\u5206\u8fa8\u7b26\u3002 section(course_id, sec_id, semester, year) A many-to-many relationship set is represented as a schema with attributes for the primary keys of the two participating entity sets, and any descriptive attributes of the relationship set. \u5373\u4e24\u4e2a\u96c6\u5408\u7684\u4e3b\u952e\u62fc\u8d77\u6765\uff0c\u52a0\u4e0a\u5173\u7cfb\u7684\u9644\u5e26\u5c5e\u6027\u3002 Example advisor = (s_id, i_id) \u4e3a\u4ec0\u4e48\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u4e00\u5b9a\u8981\u8f6c\u5316\u6210\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f Many-to-one and one-to-many relationship sets that are total on the many-side can be represented by adding an extra attribute to the \u201cmany\u201d side, containing the primary key of the \u201cone\u201d side. \u591a\u5bf9\u4e00\u53ef\u4ee5\u4e0d\u8f6c\u6362\u4e3a\u5355\u72ec\u7684\u5173\u7cfb\u6a21\u5f0f\uff0c\u76f4\u63a5\u5728\u201c\u591a\u201c\u90a3\u4e2a\u8868\u4e0a\u6dfb\u52a0\u201d\u4e00\u201c\u7684\u4e3b\u952e\u5373\u53ef\u3002 Example inst_dept \u672c\u8d28\u5c31\u662f\u5c06 instructor \u548c department \u5408\u5e76\uff0c\u5728 instrutor \u7684\u5c5e\u6027\u4e0a\u6dfb\u52a0 dept_name . department ( dept_name , building , budget ) instructor ( ID , name , salary ) inst_dept ( ID , dept_name ) // \u8f6c\u6362\u540e\uff08\u5373\u5408\u5e76\uff09 department ( dept_name , building , budget ) instructor ( ID , name , salary , dept_name ) \u5404\u6709\u5229\u5f0a\uff0c\u7b2c\u4e00\u79cd\u5199\u6cd5\u8868\u53ef\u80fd\u4f1a\u592a\u591a\uff0c\u7b2c\u4e8c\u79cd\u5199\u6cd5\u5408\u5728\u4e00\u8d77\u8868\u53ef\u80fd\u592a\u5927\uff0c\u4e0d\u5229\u4e8e\u7ba1\u7406\u3002 Composite and Multivalued Attributes \u00b6 Composite attributes are flattened out by creating a separate attribute for each component attribute. \u5c31\u50cf\u5728 C \u8bed\u8a00\u91cc\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u3002\u4f46\u662f\u5173\u7cfb\u6570\u636e\u5e93\u91cc\u6bcf\u4e2a\u5c5e\u6027\u90fd\u5fc5\u987b\u662f\u7b80\u5355\u6570\u636e\u7c7b\u578b\uff0c\u5c31\u5fc5\u987b\u628a\u8fd9\u4e9b\u590d\u5408\u5c5e\u6027\u94fa\u5e73\u3002 e.g. instructor ( ID , first_name , middle_initial , last_name , street_number , street_name , apt_number , city , state , zip_code , date_of_birth , age ) A multivalued attribute M of an entity E is represented by a separate schema EM. Schema EM has attributes corresponding to the primary key of E and an attribute corresponding to multivalued attribute M. Example Special Case Design Issues \u00b6 Common Mistakes in E-R Diagrams \u00b6 \u4fe1\u606f\u5197\u4f59 student \u7684 dept_name \u5e94\u8be5\u53bb\u6389 \u5173\u7cfb\u5c5e\u6027\u4f7f\u7528\u4e0d\u5f53 \u8fd9\u91cc\u4e00\u95e8\u8bfe\u53ef\u80fd\u6709\u5f88\u591a\u6b21\u4f5c\u4e1a\uff0c\u4e0d\u80fd\u53ea\u7528\u4e00\u4e2a\u5b9e\u4f53\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a Use of entity sets vs. attributes \u00b6 \u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u660e\u786e\u653e\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u7535\u8bdd\u53f7\u7801\u53ef\u4ee5\u9644\u5c5e\u66f4\u591a\u5c5e\u6027\uff0c\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\u53ef\u4ee5\u7531\u591a\u4eba\u5171\u4eab\u3002\uff08\u5982\u529e\u516c\u5ba4\u7684\u516c\u5171\u7535\u8bdd\uff09 Use of entity sets vs. relationship sets \u00b6 Possible guideline is to designate a relationship set to describe an action that occurs between entities. \u5b9e\u4f53\u53ef\u4ee5\u4fbf\u4e8e\u4e0e\u5176\u4ed6\u5b9e\u4f53\u5efa\u7acb\u8054\u7cfb\u3002 \u5982\u7535\u5546\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u5ba2\u6237\u548c\u5546\u54c1\u7528 buy \u8054\u7cfb\u8d77\u6765\uff0c\u4f46\u540e\u7eed\u8fd8\u4f1a\u6709\u4ed8\u6b3e\u3001\u7269\u6d41\u7b49\u60c5\u51b5\uff0c\u6211\u4eec\u6700\u597d\u628a buy \u5b9e\u4f53\u5316\u4e3a\u8ba2\u5355\u3002 Placement of relationship attributes \u00b6 \u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u6b21\u8bbf\u95ee\u7684\u8bbf\u95ee\u65e5\u671f\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u53ea\u80fd\u8bb0\u5f55\u7528\u6237\u6700\u8fd1\u4e00\u6b21\u8bbf\u95ee\u65e5\u671f\uff0c\u4e0d\u5b8c\u6574\u3002 Binary Vs. Non-Binary Relationships \u00b6 Binary versus n-ary relationship sets Although it is possible to replace any nonbinary (n-ary, for \\(n >2\\) ) relationship set by a number of distinct binary relationship sets, a n-ary relationship set shows more clearly that several entities participate in a single relationship. Some relationships that appear to be non-binary may be better represented using binary relationships e.g. A ternary relationship parents, relating a child to his/her father and mother, is best replaced by two binary relationships, father and mother Using two binary relationships allows partial information ( e.g. , only mother being know) But there are some relationships that are naturally non-binary e.g. : proj_guide Converting Non-Binary Relationships Extended ER Features \u00b6 Specialization\uff08\u7279\u5316\uff09 Top-down design process; we designate subgroupings within an entity set that are distinctive from other entities in the set. Attribute inheritance \u2013 a lower-level entity set inherits all the attributes and relationship participation of the higher-level entity set to which it is linked. Generalization\uff08\u6982\u5316\uff09 A bottom-up design process \u2013 combine a number of entity sets that share the same features into a higher-level entity set.","title":"\u5b9e\u4f53-\u5173\u7cfb\u6a21\u578b"},{"location":"DB/db6/#entity-relationship-model","text":"","title":"Entity-Relationship Model"},{"location":"DB/db6/#example","text":"\u4e00\u4e2a\u65b9\u5f62\u6846\u5c31\u662f\u4e00\u4e2a\u5b9e\u4f53\u7684\u96c6\u5408\uff0c\u4e0b\u9762\u5217\u51fa\u5176\u5c5e\u6027\u3002 \u5b9e\u4f53\u4e0e\u5b9e\u4f53\u4e4b\u95f4\u6709\u5173\u7cfb\uff0c\u4e00\u4e2a\u83f1\u5f62\u6846\u8868\u793a\u5173\u7cfb\u3002 \u4e00\u5bf9\u4e00( \\(\\leftrightarrow\\) )/\u4e00\u5bf9\u591a/\u591a\u5bf9\u4e00( \\(\\leftarrow, \\rightarrow\\) )\u3002 \u8fd9\u91cc instructor \u5b9e\u4f53\u91cc\u4e0d\u9700\u8981 dept \u5c5e\u6027\uff0c\u56e0\u4e3a\u5728 department \u5b9e\u4f53\u91cc\u6709\u4e86\uff0c\u5426\u5219\u4f1a\u5197\u4f59\u3002 \u6bcf\u4e2a\u5b9e\u4f53\u76f4\u63a5\u8f6c\u6362\u4e3a\u5173\u7cfb\u6a21\u5f0f\u3002 \u5173\u7cfb\u8f6c\u6362\u4e3a\u5143\u7ec4\uff0c\u5143\u7d20\u4e3a\u4e24\u4e2a\u8868\u7684 primary key. \u5bf9\u4e8e\u4e00\u5bf9\u591a\u7684\u60c5\u51b5\uff08\u5982 instructor \u548c department\uff09\u8f6c\u6362\u540e primary key \u4ecd\u4e3a ID. \u4e3a\u4e86\u51cf\u5c11\u8868\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u628a primary key \u76f8\u540c\u7684\u8868\u5408\u5e76\u3002 \u53cc\u6a2a\u7ebf\u4e0e\u5355\u6a2a\u7ebf\u4e0d\u540c \u53cc\u6a2a\u7ebf\u8868\u793a\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5fc5\u987b\u53c2\u4e0e\u5173\u7cfb\uff0c\u800c\u5355\u6a2a\u7ebf\u5219\u8868\u793a\u5bf9\u8c61\u53ef\u4ee5\u4e0d\u53c2\u4e0e\u5173\u7cfb\u3002\u5982 inst_dept \u4e2d\u5982\u679c department - inst_dep \u4e3a\u53cc\u6a2a\u7ebf\uff0c\u5219\u8868\u793a\u6bcf\u4e00\u4e2a\u7cfb\u90fd\u8981\u6709\u8001\u5e08\u3002 \u6709\u4e9b\u8054\u7cfb\u662f\u9690\u542b\u7684\uff0c\u5982\u6388\u8bfe\u8001\u5e08\u548c\u542c\u8bfe\u7684\u5b66\u751f\u3002 section \u4e0d\u8db3\u4ee5\u552f\u4e00\u786e\u5b9a\u5143\u7ec4\uff0c\u79f0\u4e3a\u5f31\u5b9e\u4f53\uff0c\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u5b9e\u4f53\uff08\u5982 OOP\u3001DB \u90fd\u53ef\u4ee5\u6709\u540c\u6837\u5e74\u4efd\u5b66\u671f\u7684 1 \u73ed\uff09\u3002\u56e0\u4e3a\u8bfe\u7a0b\u53f7 course_id \u653e\u5728 section \u4f1a\u6709\u5197\u4f59\uff0c\u56e0\u6b64\u6ca1\u6709\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5bfc\u81f4\u5f62\u6210\u4e86\u4e00\u4e2a\u5f31\u5b9e\u4f53\u3002 sec_course \u8868\u793a\u8054\u7cfb\u7684\u662f\u5f31\u5b9e\u4f53\uff08\u53cc\u6846\uff09\uff0c section \u4e0d\u80fd\u79bb\u5f00 course \u5b58\u5728\u3002 relationship \u4e0a\u4e5f\u53ef\u4ee5\u5e26\u5c5e\u6027\uff0c\u5982 takes \u4e0a\u7684 grade . \u5173\u7cfb\u53cc\u65b9\u53ef\u4ee5\u662f\u76f8\u540c\u7684\u5b9e\u4f53\u96c6\u5408\uff0c course \u8fd9\u91cc\u7684 prereq \u662f\u591a\u5bf9\u591a\uff0c\u8868\u793a\u4e00\u95e8\u8bfe\u53ef\u4ee5\u6709\u591a\u95e8\u9884\u4fee\u8bfe\uff0c\u4e00\u95e8\u8bfe\u4e5f\u53ef\u4ee5\u662f\u591a\u95e8\u8bfe\u7684\u9884\u4fee\u8bfe\u3002 {} \u91cc\u9762\u662f\u591a\u4e2a\u503c\uff0c\u8868\u793a\u590d\u5408\u5c5e\u6027\u3002\u8fd9\u91cc\u8868\u793a time_slot_id \u5b9e\u9645\u4e0a\u53ef\u4ee5\u7531\u8fd9\u4e09\u4e2a\u5c5e\u6027\u590d\u5408\u800c\u6210\u3002","title":"Example"},{"location":"DB/db6/#database-modeling","text":"A database can be modeled as: a collection of entities , relationship among entities.","title":"Database Modeling"},{"location":"DB/db6/#entities","text":"An entity is an object that exists and is distinguishable from other objects. e.g. specific person, company, event, plant * Entities have attributes e.g. people have names and addresses An entity set is a set of entities of the same type that share the same properties. e.g. * set of all persons, companies, trees, holidays Entity sets can be represented graphically as follows: Rectangles represent entity sets. Attributes listed inside entity rectangle Underline indicates primary key attributes Example","title":"Entities"},{"location":"DB/db6/#relationship-sets","text":"A relationship is an association among several entities. A relationship set is a mathematical relation among n \uf0b3 2 entities, each taken from entity \\(\\{(e_1, e_2, ... e_n) | e_1 \\in E_1, e_2 \\in E_2, ..., e_n \\in E_n\\}\\) where \\((e_1, e_2, ..., e_n)\\) is a relationship. \u672c\u8d28\u4e5f\u662f\u4e00\u4e2a\u96c6\u5408\u3002\u6700\u5f00\u59cb\u7684\u4f8b\u5b50\u4e2d\u5747\u4e3a\u662f\u4e8c\u5143\u8054\u7cfb\uff0c\u5373\u662f\u4e24\u4e2a\u5b9e\u4f53\u96c6\u5408\u7684\u5173\u7cfb\uff0c\u4f46\u662f\u5173\u7cfb\u53ef\u4ee5\u662f\u591a\u5143\u7684\uff0c\u5373\u591a\u4e2a\u5b9e\u4f53\u3002\u5982\u8001\u5e08\uff0c\u540c\u5b66\uff0cSRTP \u9879\u76ee\u53ef\u4ee5\u5171\u540c\u5f62\u6210\u4e00\u4e2a\u5173\u7cfb\u3002 Example","title":"Relationship Sets"},{"location":"DB/db6/#relationship-sets-with-attributes","text":"An attribute can also be property of a relationship set. e.g. The advisor relationship set between entity sets instructor and student may have the attribute date which tracks when the student started being associated with the advisor. Example","title":"Relationship Sets with Attributes"},{"location":"DB/db6/#roles","text":"Entity sets of a relationship need not be distinct. Each occurrence of an entity set plays a \u201crole\u201d in the relationship The labels course_id and prereq_id are called roles. Example","title":"Roles"},{"location":"DB/db6/#degree-of-a-relationship-set","text":"binary relationship\uff08\u4e8c\u5143\u8054\u7cfb\uff09 involve two entity sets (or degree two). most relationship sets in a database system are binary. \u5c3d\u91cf\u4e0d\u7528\u591a\u5143\u8054\u7cfb\uff0c\u56e0\u4e3a\u4e8c\u5143\u8054\u7cfb\u6bd4\u8f83\u6e05\u6670\u3002\u800c\u4e14\u4efb\u4f55\u7684\u591a\u5143\u8054\u7cfb\u90fd\u53ef\u4ee5\u901a\u8fc7\u5f15\u5165\u4e2d\u4ecb\u5b9e\u4f53\u8f6c\u5316\u4e3a\u4e8c\u5143\u8054\u7cfb\u3002 Example \u8f6c\u5316\u4e3a\u4e8c\u5143\u8054\u7cfb\uff1a\u628a\u591a\u5143\u8054\u7cfb\u5b9e\u4f53\u5316\u3002\u5982 proj_guide \u91cc\u6709\u8001\u5e08\u3001\u5b66\u751f\u3001\u5de5\u7a0b\u7684 id. \u968f\u540e\u8fd9\u4e2a\u5b9e\u4f53\u53c8\u548c\u53e6\u5916\u4e09\u4e2a\u5b9e\u4f53\u5404\u6709\u4e00\u4e2a\u4e8c\u5143\u8054\u7cfb\u3002","title":"Degree(\u5ea6) of a Relationship Set"},{"location":"DB/db6/#attributes","text":"An entity is represented by a set of attributes, that is descriptive properties possessed by all members of an entity set. Attribute types : Simple\uff08\u7b80\u5355\uff09 and composite\uff08\u590d\u5408\uff09 attributes. Single-valued\uff08\u5355\u503c\uff09 and multivalued\uff08\u591a\u503c\uff09 attributes e.g. multivalued attribute: phone_numbers Derived\uff08\u6d3e\u751f\uff09 attributes Can be computed from other attributes e.g. age , given date_of_birth Example","title":"Attributes"},{"location":"DB/db6/#mapping-cardinality-constraints","text":"\u6620\u5c04\u57fa\u6570\u7ea6\u675f Express the number of entities to which another entity can be associated via a relationship set. One to one One to many Many to one Many to many We express cardinality constraints by drawing either a directed line ( \\(\\rightarrow\\) ), signifying \u201cone,\u201d or an undirected line ( \\(\u2014\\) ), signifying \u201cmany,\u201d between the relationship set and the entity set.","title":"Mapping Cardinality Constraints"},{"location":"DB/db6/#total-and-partial-participation","text":"Total participation (indicated by double line): every entity in the entity set participates in at least one relationship in the relationship set \u6240\u6709\u5143\u7d20\u90fd\u8981\u53c2\u4e0e\u5173\u7cfb Partial participation : some entities may not participate in any relationship in the relationship set","title":"Total and Partial Participation"},{"location":"DB/db6/#notation-for-expressing-more-complex-constraints","text":"A line may have an associated minimum and maximum cardinality, shown in the form l..h, where l is the minimum and h the maximum cardinality A minimum value of 1 indicates total participation. A maximum value of 1 indicates that the entity participates in at most one relationship A maximum value of * indicates no limit. Example \u591a\u5143\u5173\u7cfb\u91cc\uff0c\u6211\u4eec\u53ea\u5141\u8bb8\u6700\u591a\u6709\u4e00\u4e2a\u7bad\u5934\u3002","title":"Notation for Expressing More Complex Constraints"},{"location":"DB/db6/#primary-key","text":"Primary Key for Relationship Sets \u591a\u5143\u8054\u7cfb\u7684 primary key \u662f\u4e24\u7aef key \u7684\u7ec4\u5408\u3002\u5982\u679c\u662f\u4e00\u5bf9\u4e00\u7684\u8054\u7cfb\uff0c\u90a3\u4e48\u5355\u4e2a\u5b9e\u4f53\u7684 key \u4e5f\u53ef\u4ee5\u4f5c\u4e3a primary key. \u4e00\u5bf9\u591a\u7684\u8054\u7cfb\uff08\u5982\u5bfc\u5e08\u548c\u5b66\u751f\u5c31\u662f\u4e00\u5bf9\u591a\uff0c\u90a3\u4e48\u4e3b\u952e\u5e94\u8be5\u4e3a\u5b66\u751f\uff09","title":"Primary Key"},{"location":"DB/db6/#weak-entity-sets","text":"An entity set that does not have a primary key is referred to as a weak entity set . The existence of a weak entity set depends on the existence of a identifying entity set\uff08\u6807\u8bc6\u6027\u5b9e\u4f53\u96c6\uff09 It must relate to the identifying entity set via a total, one-to-many relationship set from the identifying to the weak entity set Identifying relationship\uff08\u6807\u8bc6\u6027\u8054\u7cfb\uff09 depicted using a double diamond The discriminator(\u5206\u8fa8\u7b26\uff0cor partial key) of a weak entity set is the set of attributes that distinguishes among all the entities of a weak entity set when the identifying entity they depend is known. We underline the discriminator of a weak entity set with a dashed line. \uff08\u865a\u7ebf\uff09 We put the identifying relationship of a weak entity in a double diamond. \uff08\u53cc\u6846\uff09 Example Redundant Attributes","title":"Weak Entity Sets"},{"location":"DB/db6/#reduction-to-relational-schemas","text":"\u4e00\u4e2a ER \u56fe\u53ef\u4ee5\u8f6c\u6362\u6210\u591a\u79cd\u6a21\u5f0f\uff08\u56fe\u6570\u636e\u5e93\u3001\u9762\u5411\u5bf9\u8c61\u3001\u5173\u7cfb\u6a21\u5f0f\u7b49\uff09 A strong entity set reduces to a schema with the same attributes course(course_id, title, credits) A weak entity set becomes a table that includes a column for the primary key of the identifying strong entity set. Primary key of the table is the union of the discriminator of the weak entity set and the primary key of the identifying strong entity set. \u6807\u8bc6\u96c6\u5408\u7684\u4e3b\u952e\u52a0\u4e0a\u5f31\u5b9e\u4f53\u96c6\u7684\u5206\u8fa8\u7b26\u3002 section(course_id, sec_id, semester, year) A many-to-many relationship set is represented as a schema with attributes for the primary keys of the two participating entity sets, and any descriptive attributes of the relationship set. \u5373\u4e24\u4e2a\u96c6\u5408\u7684\u4e3b\u952e\u62fc\u8d77\u6765\uff0c\u52a0\u4e0a\u5173\u7cfb\u7684\u9644\u5e26\u5c5e\u6027\u3002 Example advisor = (s_id, i_id) \u4e3a\u4ec0\u4e48\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u4e00\u5b9a\u8981\u8f6c\u5316\u6210\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f Many-to-one and one-to-many relationship sets that are total on the many-side can be represented by adding an extra attribute to the \u201cmany\u201d side, containing the primary key of the \u201cone\u201d side. \u591a\u5bf9\u4e00\u53ef\u4ee5\u4e0d\u8f6c\u6362\u4e3a\u5355\u72ec\u7684\u5173\u7cfb\u6a21\u5f0f\uff0c\u76f4\u63a5\u5728\u201c\u591a\u201c\u90a3\u4e2a\u8868\u4e0a\u6dfb\u52a0\u201d\u4e00\u201c\u7684\u4e3b\u952e\u5373\u53ef\u3002 Example inst_dept \u672c\u8d28\u5c31\u662f\u5c06 instructor \u548c department \u5408\u5e76\uff0c\u5728 instrutor \u7684\u5c5e\u6027\u4e0a\u6dfb\u52a0 dept_name . department ( dept_name , building , budget ) instructor ( ID , name , salary ) inst_dept ( ID , dept_name ) // \u8f6c\u6362\u540e\uff08\u5373\u5408\u5e76\uff09 department ( dept_name , building , budget ) instructor ( ID , name , salary , dept_name ) \u5404\u6709\u5229\u5f0a\uff0c\u7b2c\u4e00\u79cd\u5199\u6cd5\u8868\u53ef\u80fd\u4f1a\u592a\u591a\uff0c\u7b2c\u4e8c\u79cd\u5199\u6cd5\u5408\u5728\u4e00\u8d77\u8868\u53ef\u80fd\u592a\u5927\uff0c\u4e0d\u5229\u4e8e\u7ba1\u7406\u3002","title":"Reduction to Relational Schemas"},{"location":"DB/db6/#composite-and-multivalued-attributes","text":"Composite attributes are flattened out by creating a separate attribute for each component attribute. \u5c31\u50cf\u5728 C \u8bed\u8a00\u91cc\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u3002\u4f46\u662f\u5173\u7cfb\u6570\u636e\u5e93\u91cc\u6bcf\u4e2a\u5c5e\u6027\u90fd\u5fc5\u987b\u662f\u7b80\u5355\u6570\u636e\u7c7b\u578b\uff0c\u5c31\u5fc5\u987b\u628a\u8fd9\u4e9b\u590d\u5408\u5c5e\u6027\u94fa\u5e73\u3002 e.g. instructor ( ID , first_name , middle_initial , last_name , street_number , street_name , apt_number , city , state , zip_code , date_of_birth , age ) A multivalued attribute M of an entity E is represented by a separate schema EM. Schema EM has attributes corresponding to the primary key of E and an attribute corresponding to multivalued attribute M. Example Special Case","title":"Composite and Multivalued Attributes"},{"location":"DB/db6/#design-issues","text":"","title":"Design Issues"},{"location":"DB/db6/#common-mistakes-in-e-r-diagrams","text":"\u4fe1\u606f\u5197\u4f59 student \u7684 dept_name \u5e94\u8be5\u53bb\u6389 \u5173\u7cfb\u5c5e\u6027\u4f7f\u7528\u4e0d\u5f53 \u8fd9\u91cc\u4e00\u95e8\u8bfe\u53ef\u80fd\u6709\u5f88\u591a\u6b21\u4f5c\u4e1a\uff0c\u4e0d\u80fd\u53ea\u7528\u4e00\u4e2a\u5b9e\u4f53\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a","title":"Common Mistakes in E-R Diagrams"},{"location":"DB/db6/#use-of-entity-sets-vs-attributes","text":"\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u660e\u786e\u653e\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u7535\u8bdd\u53f7\u7801\u53ef\u4ee5\u9644\u5c5e\u66f4\u591a\u5c5e\u6027\uff0c\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\u53ef\u4ee5\u7531\u591a\u4eba\u5171\u4eab\u3002\uff08\u5982\u529e\u516c\u5ba4\u7684\u516c\u5171\u7535\u8bdd\uff09","title":"Use of entity sets vs. attributes"},{"location":"DB/db6/#use-of-entity-sets-vs-relationship-sets","text":"Possible guideline is to designate a relationship set to describe an action that occurs between entities. \u5b9e\u4f53\u53ef\u4ee5\u4fbf\u4e8e\u4e0e\u5176\u4ed6\u5b9e\u4f53\u5efa\u7acb\u8054\u7cfb\u3002 \u5982\u7535\u5546\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u5ba2\u6237\u548c\u5546\u54c1\u7528 buy \u8054\u7cfb\u8d77\u6765\uff0c\u4f46\u540e\u7eed\u8fd8\u4f1a\u6709\u4ed8\u6b3e\u3001\u7269\u6d41\u7b49\u60c5\u51b5\uff0c\u6211\u4eec\u6700\u597d\u628a buy \u5b9e\u4f53\u5316\u4e3a\u8ba2\u5355\u3002","title":"Use of entity sets vs. relationship sets"},{"location":"DB/db6/#placement-of-relationship-attributes","text":"\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u6b21\u8bbf\u95ee\u7684\u8bbf\u95ee\u65e5\u671f\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u53ea\u80fd\u8bb0\u5f55\u7528\u6237\u6700\u8fd1\u4e00\u6b21\u8bbf\u95ee\u65e5\u671f\uff0c\u4e0d\u5b8c\u6574\u3002","title":"Placement of relationship attributes"},{"location":"DB/db6/#binary-vs-non-binary-relationships","text":"Binary versus n-ary relationship sets Although it is possible to replace any nonbinary (n-ary, for \\(n >2\\) ) relationship set by a number of distinct binary relationship sets, a n-ary relationship set shows more clearly that several entities participate in a single relationship. Some relationships that appear to be non-binary may be better represented using binary relationships e.g. A ternary relationship parents, relating a child to his/her father and mother, is best replaced by two binary relationships, father and mother Using two binary relationships allows partial information ( e.g. , only mother being know) But there are some relationships that are naturally non-binary e.g. : proj_guide Converting Non-Binary Relationships","title":"Binary Vs. Non-Binary Relationships"},{"location":"DB/db6/#extended-er-features","text":"Specialization\uff08\u7279\u5316\uff09 Top-down design process; we designate subgroupings within an entity set that are distinctive from other entities in the set. Attribute inheritance \u2013 a lower-level entity set inherits all the attributes and relationship participation of the higher-level entity set to which it is linked. Generalization\uff08\u6982\u5316\uff09 A bottom-up design process \u2013 combine a number of entity sets that share the same features into a higher-level entity set.","title":"Extended ER Features"},{"location":"DB/db7/","text":"Relational Database Design \u00b6 Introduction \u00b6 Example What about combining instructor and department? Pitfalls of the \u201cbad\u201d relations Information repetition (\u4fe1\u606f\u91cd\u590d) Insertion anomalies (\u63d2\u5165\u5f02\u5e38) Update difficulty (\u66f4\u65b0\u56f0\u96be) \u6570\u636e\u4e4b\u95f4\u5b58\u5728\u7740\u9690\u542b\u7684\u51fd\u6570\u7ea6\u675f\u5173\u7cfb\uff0c\u77e5\u9053\u4e86 id \u5c31\u53ef\u4ee5\u51b3\u5b9a\u5176\u4ed6\u5143\u7d20\u3002 e.g. id \\(\\rightarrow\\) name, salary, dept_name; dept_name \\(\\rightarrow\\) building, budget \u4ea7\u751f\u5197\u4f59\u7684\u539f\u56e0\u662f dept_name \u51b3\u5b9a\u4e86\u90e8\u5206\u5c5e\u6027\uff0c\u4f46\u4ed6\u5374\u4e0d\u662f\u8fd9\u4e2a\u8868\u7684 primary key. \u597d\u7684\u5173\u7cfb\uff1a\u53ea\u6709 candidate key \u80fd\u51b3\u5b9a\u5176\u4ed6\u5c5e\u6027\u3002 \u62c6\u8868\u540e\u8981\u6709\u91cd\u53e0\u7684\u5c5e\u6027\uff0c\u5426\u5219\u65e0\u6cd5\u62fc\u63a5\u56de\u53bb\u3002\u8fd9\u91cc\u7684\u516c\u5171\u5c5e\u6027\u5fc5\u987b\u662f\u5206\u62c6\u51fa\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f\u7684 primary key, \u8fd9\u662f\u65e0\u635f\uff08\u6ca1\u6709\u4fe1\u606f\u635f\u5931\uff09\u8fde\u63a5\u3002 lossy decomposition employee(ID, name, street, city, salary) \\(\\rightarrow\\) employee1 (ID, name) and employee2 (name, street, city, salary) Example of Lossless-Join Decomposition Lossless-join Decomposition \u00b6 Let \\(R\\) be a relation schema and let \\(R_1\\) and \\(R_2\\) form a decomposition of \\(R\\) . That is \\(R = R_1 \\cup R_2\\) . We say that the decomposition is a lossless decomposition if there is no loss of information by replacing R with the two relation schemas \\(R = R_1 \\cup R_2\\) . Formally, \\(r = \\prod_{R_1}(r) \\bowtie \\prod_{R_2}(r)\\) . And, conversely a decomposition is lossy if \\(r\\subset \\prod_{R_1}(r) \\bowtie \\prod_{R_2}(r)\\) Note : more tuples implies more uncertainty (less information) . A decomposition of \\(R\\) into \\(R_1\\) and \\(R_2\\) is lossless join if at least one of the following dependencies holds: (\u5145\u5206\u6761\u4ef6) \\(R_1\\cap R_2\\rightarrow R_1\\) \\(R_1\\cap R_2 \\rightarrow R_2\\) \u5373\u516c\u5171\u5c5e\u6027\u662f\u5176\u4e2d\u4e00\u4e2a\u5173\u7cfb\u7684 Key. Devise a Theory for the Following \u00b6 Decide whether a particular relation R is in \u201cgood\u201d form. In the case that a relation R is not in \u201cgood\u201d form, decompose it into a set of relations \\(\\{R_1, R_2, \\ldots, R_n\\}\\) such that each relation is in good form the decomposition is a lossless-join decomposition \u5982\u679c\u5173\u7cfb\u662f\u4e0d\u597d\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u628a\u5b83\u65e0\u635f\u5206\u89e3\u6210\u597d\u7684\u5173\u7cfb\u3002 Our theory is based on: functional dependencies multivalued dependencies Normal Forms(NF): \\(1NF \\rightarrow 2NF \\rightarrow 3NF \\rightarrow **BCNF** \\rightarrow 4NF\\) \u6709\u4e9b\u51fd\u6570\u4f9d\u8d56\uff0c\u4e0d\u80fd\u5728 BCNF \u4e2d\u5f97\u5230\u4f53\u73b0\uff0c\u9700\u8981\u628a\u51e0\u4e2a\u8868\u62fc\u5728\u4e00\u8d77\u624d\u80fd\u4f53\u73b0\uff0c\u53eb\u4f9d\u8d56\u4fdd\u6301\u3002\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u4ece BCNF \u56de\u5230 3NF. Functional Dependencies \u00b6 Functional Dependencies are constraints on the set of legal relations. (\u6765\u81ea\u4e8e\u5e94\u7528\u5c42\u9762\u7684\u89c4\u5b9a) Require that the value for a certain set of attributes determines uniquely the value for another set of attributes. e.g. dept_name \\(\\rightarrow\\) building A functional dependency is a generalization of the notion of a key . Let \\(R\\) be a relation schema \\(\\alpha\\subseteq R\\) and \\(\\beta\\subseteq R\\) ( \\(\\alpha, \\beta\\) \u662f\u5c5e\u6027\u7684\u96c6\u5408) The functional dependency \\(\\alpha\\rightarrow \\beta\\) holds on \\(R\\) if and only if for any legal relations \\(r(R)\\) , whenever any two tuples \\(t_1\\) and \\(t_2\\) of \\(r\\) agree on the attributes \\(\\alpha\\) , they also agree on the attributes \\(\\beta\\) . That is, \\[ t_1[\\alpha] = t2 [\\alpha] \\Rightarrow t_1[\\beta ] = t_2 [\\beta ] \\] \u901a\u8fc7\u6570\u636e\u5e93\u5b9e\u4f8b\u53ef\u4ee5\u8bc1\u4f2a\u51fd\u6570\u4f9d\u8d56\uff0c\u4f46\u4e0d\u80fd\u8bc1\u5b9e\u3002\uff08\u4f9d\u8d56\u662f\u6765\u81ea\u5e94\u7528\u5c42\u9762\u7684\u89c4\u5b9a\uff0c\u5148\u6709\u51fd\u6570\u4f9d\u8d56\uff0c\u518d\u6709\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff09 Example \\(A\\rightarrow B\\) \u53ef\u4ee5\u8bc1\u4f2a\uff0c\u4f46\u4e5f\u4e0d\u80fd\u56e0\u6b64\u5c31\u8bf4 \\(B\\rightarrow A\\) K is a superkey for relation schema \\(R\\) if and only if \\(K\\rightarrow R\\) K is a candidate key for \\(R\\) if and only if \\(K\\rightarrow R\\) , and for no \\(\\alpha\\subset K\\) , \\(\\alpha\\rightarrow R\\) A functional dependency is trivial if it is satisfied by all relations. \u5168\u96c6\u53ef\u4ee5\u51b3\u5b9a\u5b50\u96c6\u3002 In general, \\(\\alpha\\rightarrow \\beta\\) is trivial if \\(\\beta\\subseteq \\alpha\\) Closure(\u95ed\u5305) \u00b6 Closure of a Set of Functional Dependencies \u00b6 Given a set \\(F\\) of functional dependencies, there are certain other functional dependencies that are logically implied by \\(F\\) . The set of all functional dependencies logically implied by \\(F\\) is the closure of \\(F\\) . We denote the closure of \\(F\\) by \\(F^+\\) . e.g. \\(F=\\{A\\rightarrow B,B\\rightarrow C\\}\\) then \\(F^+=\\{A\\rightarrow B, B\\rightarrow C, A\\rightarrow C, AB\\rightarrow B, AB\\rightarrow C,\\ldots\\}\\) We can find \\(F^+\\) , the closure of \\(F\\) , by repeatedly applying Armstrong\u2019s Axioms : if \\(\\beta\\subseteq \\alpha\\) then \\(\\alpha \\rightarrow \\beta\\) ( reflexivity , \u81ea\u53cd\u5f8b) if \\(\\alpha\\rightarrow \\beta\\) then \\(\\gamma \\alpha \\rightarrow \\gamma \\beta\\) ( augmentation , \u589e\u8865\u5f8b) if \\(\\alpha\\rightarrow \\beta\\) and \\(\\beta \\rightarrow \\gamma\\) then \\(\\alpha\\rightarrow \\gamma\\) ( transitivity , \u4f20\u9012\u5f8b) These rules are Sound\uff08\u6b63\u786e\u6709\u6548\u7684\uff09 generate only functional dependencies that actually hold Complete\uff08\u5b8c\u5907\u7684\uff09 generate all functional dependencies that hold Example Additional rules: If \\(\\alpha\\rightarrow \\beta\\) holds and \\(\\alpha\\rightarrow \\gamma\\) holds, then \\(\\alpha\\rightarrow \\beta\\gamma\\) holds ( union , \u5408\u5e76) If \\(\\alpha\\rightarrow \\beta\\gamma\\) holds, then \\(\\alpha\\rightarrow \\beta\\) holds and \\(\\alpha\\rightarrow \\gamma\\) holds ( decomposition , \u5206\u89e3) If \\(\\alpha\\rightarrow \\beta\\) holds and \\(\\gamma \\beta\\rightarrow \\delta\\) holds, then \\(\\alpha \\gamma\\rightarrow \\delta\\) holds (pseudotransitivity\uff0c\u4f2a\u4f20\u9012) Example \u51fd\u6570\u4f9d\u8d56\uff0c\u53f3\u8fb9\u7684\u516c\u5171\u5c5e\u6027\u53ef\u4ee5\u53bb\u6389\uff0c\u4f7f\u5f97\u51fd\u6570\u53cc\u65b9\u6ca1\u6709\u4ea4\u96c6\u3002 Closure of Attribute Sets \u00b6 Given a set of attributes \\(a\\) , define the closure of a under \\(F\\) (denoted by \\(a+\\) ) as the set of attributes that are functionally determined by \\(a\\) under \\(F\\) Example Uses of Attribute Closure \u00b6 Testing for superkey : To test if \\(\\alpha\\) is a superkey, we compute \\(\\alpha+\\) , and check if \\(\\alpha+\\) contains all attributes of \\(R\\) . Testing functional dependencies To check if a functional dependency \\(\\alpha\\rightarrow \\beta\\) holds (or, in other words, is in \\(F+\\) ), just check if \\(\\beta\\subseteq\\alpha+\\) . That is, we compute \\(\\alpha+\\) by using attribute closure, and then check if it contains \\(\\beta\\) . Is a simple and cheap test, and very useful Computing closure of F For each \\(\\gamma\\subseteq R\\) , we find the closure \\(\\gamma+\\) , and for each \\(S \\subseteq \\gamma+\\) , we output a functional dependency \\(\\gamma\\rightarrow S\\) . Example Canonical Cover\uff08\u6b63\u5219\u8986\u76d6\uff09 \u00b6 \u51fd\u6570\u4f9d\u8d56\u662f\u6700\u7b80\u5355\u7684\u5f62\u5f0f\uff0c\u4e0d\u5b58\u5728\u5197\u4f59\u7684\u51fd\u6570\u4f9d\u8d56\u3002 a canonical cover of F is a \u201cminimal\u201d set of functional dependencies equivalent to F, having no redundant dependencies or redundant parts of dependencies. Example A canonical cover for \\(F\\) is a set of dependencies Fc such that \\(F\\) logically implies all dependencies in \\(F_c\\) \\(F_c\\) logically implies all dependencies in \\(F\\) No functional dependency in \\(F_c\\) contains an extraneous attribute Each left side of functional dependency in \\(F_c\\) is unique. Computing a Canonical Cover Boyce-Codd Normal FormAZSX \u00b6 A relation schema \\(R\\) is in BCNF with respect to a set \\(F\\) of functional dependencies if for all functional dependencies in \\(F^+\\) of the form where \\(\\alpha \\subseteq R\\) and \\(\\beta \\subseteq R\\) , at least one of the following holds \\(\\alpha \\rightarrow \\beta\\) is trivial \\(\\alpha\\) is a superkey for \\(R\\) . \u4efb\u4f55\u975e\u5e73\u51e1\u7684\u51fd\u6570\u4f9d\u8d56\u7684\u5de6\u8fb9\u90fd\u662f\u4e00\u4e2a key. Decomposing a Schema into BCNF \u00b6 \u5bf9\u4e8e\u4e0d\u662f key \u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u5c31\u628a\u5b83\u5206\u89e3\u51fa\u6765\u4f5c\u4e3a\u5355\u72ec\u7684\u5173\u7cfb\u6a21\u5f0f\u3002 Suppose we have a schema \\(R\\) and a non-trivial dependency \\(\\alpha\\rightarrow \\beta\\) causes a violation of BCNF. We decompose \\(R\\) into: \\((\\alpha \\cup \\beta)\\) and \\((R-(\\beta-\\alpha))\\) \\(\\alpha\\) \u4f5c\u4e3a\u4e24\u4e2a\u5173\u7cfb\u6a21\u5f0f\u7684\u516c\u5171\u5c5e\u6027\uff0c\u4e5f\u662f\u4e00\u4e2a\u5173\u7cfb\u7684 key, \u8fd9\u6837\u624d\u662f\u65e0\u635f\u5206\u89e3\u3002 Example Dependency Preservation \u00b6 \u4f9d\u8d56\u4fdd\u6301\uff1a\u539f\u6765\u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u90fd\u53ef\u4ee5\u5728\u5206\u89e3\u540e\u7684\u51fd\u6570\u4f9d\u8d56\u4e2d\u5f97\u5230\u5355\u72ec\u68c0\u9a8c\u3002\u5426\u5219\u9700\u8981\u628a\u51e0\u4e2a\u5173\u7cfb\u8fde\u63a5\u5728\u4e00\u8d77\u624d\u80fd\u68c0\u9a8c\u4f9d\u8d56\u7684\uff0c\u79f0\u4e3a\u4f9d\u8d56\u4e0d\u4fdd\u6301\u3002 Constraints, including functional dependencies, are costly to check in practice unless they pertain to only one relation. If it is sufficient to test only those dependencies on each individual relation of a decomposition in order to ensure that all functional dependencies hold, then that decomposition is dependency preserving (\u4fdd\u6301\u4f9d\u8d56) . \uff08\u5982\u679c\u901a\u8fc7\u68c0\u9a8c\u5355\u4e00\u5173\u7cfb\u4e0a\u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u5c31\u80fd\u786e\u4fdd\u6240\u6709\u7684\u51fd\u6570\u4f9d\u8d56\u6210\u7acb\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u5206\u89e3\u662f\u4f9d\u8d56\u4fdd\u6301\u7684\uff09 \uff08\u6216\u8005\uff0c\u539f\u6765\u5173\u7cfbR\u4e0a\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u90fd\u53ef\u4ee5\u5728\u5206\u89e3\u540e\u7684\u5355\u4e00\u5173\u7cfb\u4e0a\u5f97\u5230\u68c0\u9a8c\u6216\u8005\u63a8\u5bfc\u5f97\u5230\u3002\uff09 Because it is not always possible to achieve both BCNF and dependency preservation, we consider a weaker normal form, known as third normal form . Let \\(F_i\\) be the set of all functional dependencies in \\(F^+\\) that include only attributes in \\(R_i\\) . ( \\(F_i\\) : the restriction of \\(F\\) on \\(R_i\\) ) A decomposition is dependency preserving, if \\((F_1\\cup F_2 \\cup \\ldots \\cup F_n )^+ = F^+\\) If it is not, then checking updates for violation of functional dependencies may require computing joins, which is expensive. Example Example Third Normal Form \u00b6 \u4efb\u4f55\u4e00\u4e2a\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56\uff0c\u5982\u679c\u5de6\u8fb9\u4e0d\u662f\u4e00\u4e2a super key, \u90a3\u4e48\u53f3\u8fb9\u5fc5\u987b\u5305\u542b\u5728\u4e00\u4e2a candidate key \u91cc\u9762\u3002 A relation schema \\(R\\) is in third normal form (3NF) if for all: $\\alpha\\rightarrow \\beta $ in \\(F^+\\) at least one of the following holds: \\(\\alpha\\rightarrow \\beta\\) is trivial (i.e., \\(\\beta \\in \\alpha\\) ) \\(\\alpha\\) is a superkey for R Each attribute A in \\(\\beta-\\alpha\\) is contained in a candidate key for \\(R\\) . \u5019\u9009\u7801\u6709\u5f88\u591a\u4e2a\uff0c\u5305\u542b\u5728\u67d0\u4e00\u4e2a\u5019\u9009\u7801\u5373\u53ef\u3002 Example Goals of Normalization In the case that a relation scheme R is not in \u201cgood\u201d form, decompose it into a set of relation scheme \\(\\{R_1, R_2, \\ldots, R_n\\}\\) such that each relation scheme is in good form ( i.e. , BCNF or 3NF) the decomposition is a lossless-join decomposition Preferably, the decomposition should be dependency preserving E-R Modeling and Normal Forms \u8fd9\u91cc\u7684\u65e0\u635f\u5206\u89e3\uff0c\u5148\u6307\u5b9a\u4e00\u4e2a\u8def\u5f84\uff0c\u8003\u8651\u6bcf\u4e24\u4e2a\u5173\u7cfb\u76f4\u63a5\u662f\u5426\u65e0\u635f\uff08\u516c\u5171\u5c5e\u6027\u662f\u5426\u4e3a\u5176\u4e2d\u4e00\u4e2a\u5173\u7cfb\u7684 key\uff09\u3002 Multivalued Dependencies \u00b6 There are database schemas in BCNF that do not seem to be sufficiently normalized. Example \u5b58\u5728\u4e24\u79cd\u4e0d\u76f8\u5173\u7684\u591a\u503c\u4f9d\u8d56\u3002\u8001\u5e08 id \u53ef\u4ee5\u591a\u503c\u51b3\u5b9a child_name, \u53c8\u53ef\u4ee5\u591a\u503c\u51b3\u5b9a phone, \u4f46\u8fd9\u4e24\u4e2a\u5c5e\u6027\u662f\u4e0d\u76f8\u5173\u7684\uff0c\u653e\u5728\u4e00\u4e2a\u8868\u91cc\u5c31\u4f1a\u7ec4\u5408\u3002 \u7b2c\u4e8c\u5f20\u56fe\u7684\u4e3a Fourth Normal Form (4NF) . \u56db\u8303\u5f0f\uff1a\u4e0d\u5b58\u5728\u975e\u5e73\u51e1\u7684\u591a\u503c\u4f9d\u8d56\u3002 Let R be a relation schema and let \\(\\alpha\\subset R\\) and \\(\\beta\\subset R\\) . The multivalued dependency \\(\\alpha\\rightarrow\\rightarrow\\beta\\) holds on \\(R\\) if in any legal relation \\(r(R)\\) , for all pairs for tuples \\(t_1\\) and \\(t_2\\) in \\(r\\) such that \\(t_1[\\alpha] = t_2 [\\alpha]\\) , there exist tuples \\(t_3\\) and \\(t_4\\) in \\(r\\) such that: \\[ t_3[\\alpha] = t_4[\\alpha] = t_1[\\alpha]=t_2[\\alpha]\\\\ t_3[\\beta]=t_1[\\beta]\\\\ t_3[R-\\beta]=t_2[R-\\beta]\\\\ t_4[\\beta]=t_2[\\beta]\\\\ t_4[R-\\beta]=t_1[R-\\beta] \\] A relation schema \\(R\\) is in 4NF with respect to a set \\(D\\) of functional and multivalued dependencies if for all multivalued dependencies in \\(D^+\\) of the form \\(\\alpha\\rightarrow \\rightarrow \\beta\\) , where \\(\\alpha\\subset R\\) and \\(\\beta\\subset R\\) , at least one of the following hold: \\(\\alpha\\rightarrow \\rightarrow \\beta\\) is trivial (i.e., \\(\\beta \\subset \\alpha\\) or \\(\\alpha \\cup \\beta= R\\) ) \u5373\u9664\u4e86 \\(\\alpha,\\beta\\) \u4e3a\u6ca1\u6709\u5176\u4ed6\u5c5e\u6027\u3002 \\(\\alpha\\) is a superkey for schema \\(R\\) \u4efb\u4f55\u4e00\u4e2a\u591a\u503c\u4f9d\u8d56\uff0c\u8981\u4e48\u5de6\u8fb9\u5c31\u662f\u4e2a key, \u8981\u4e48\u8fd9\u4e2a\u4f9d\u8d56\u662f\u5e73\u51e1\u7684\u3002 E-R Modeling and Normal Forms \u4e0d\u662f BCNF, \u56e0\u6b64\u4e5f\u4e0d\u662f 4NF. Overall Database Design Process \u00b6 Denormalization for Performance Some aspects of database design are not caught by normalization. \u6709\u65f6\u5019\u6211\u4eec\u9700\u8981\u5f15\u5165\u5197\u4f59\uff0c\u6765\u4fdd\u6301\u6027\u80fd\u3002 Example","title":"\u5173\u7cfb\u6570\u636e\u5e93\u8bbe\u8ba1"},{"location":"DB/db7/#relational-database-design","text":"","title":"Relational Database Design"},{"location":"DB/db7/#introduction","text":"Example What about combining instructor and department? Pitfalls of the \u201cbad\u201d relations Information repetition (\u4fe1\u606f\u91cd\u590d) Insertion anomalies (\u63d2\u5165\u5f02\u5e38) Update difficulty (\u66f4\u65b0\u56f0\u96be) \u6570\u636e\u4e4b\u95f4\u5b58\u5728\u7740\u9690\u542b\u7684\u51fd\u6570\u7ea6\u675f\u5173\u7cfb\uff0c\u77e5\u9053\u4e86 id \u5c31\u53ef\u4ee5\u51b3\u5b9a\u5176\u4ed6\u5143\u7d20\u3002 e.g. id \\(\\rightarrow\\) name, salary, dept_name; dept_name \\(\\rightarrow\\) building, budget \u4ea7\u751f\u5197\u4f59\u7684\u539f\u56e0\u662f dept_name \u51b3\u5b9a\u4e86\u90e8\u5206\u5c5e\u6027\uff0c\u4f46\u4ed6\u5374\u4e0d\u662f\u8fd9\u4e2a\u8868\u7684 primary key. \u597d\u7684\u5173\u7cfb\uff1a\u53ea\u6709 candidate key \u80fd\u51b3\u5b9a\u5176\u4ed6\u5c5e\u6027\u3002 \u62c6\u8868\u540e\u8981\u6709\u91cd\u53e0\u7684\u5c5e\u6027\uff0c\u5426\u5219\u65e0\u6cd5\u62fc\u63a5\u56de\u53bb\u3002\u8fd9\u91cc\u7684\u516c\u5171\u5c5e\u6027\u5fc5\u987b\u662f\u5206\u62c6\u51fa\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f\u7684 primary key, \u8fd9\u662f\u65e0\u635f\uff08\u6ca1\u6709\u4fe1\u606f\u635f\u5931\uff09\u8fde\u63a5\u3002 lossy decomposition employee(ID, name, street, city, salary) \\(\\rightarrow\\) employee1 (ID, name) and employee2 (name, street, city, salary) Example of Lossless-Join Decomposition","title":"Introduction"},{"location":"DB/db7/#lossless-join-decomposition","text":"Let \\(R\\) be a relation schema and let \\(R_1\\) and \\(R_2\\) form a decomposition of \\(R\\) . That is \\(R = R_1 \\cup R_2\\) . We say that the decomposition is a lossless decomposition if there is no loss of information by replacing R with the two relation schemas \\(R = R_1 \\cup R_2\\) . Formally, \\(r = \\prod_{R_1}(r) \\bowtie \\prod_{R_2}(r)\\) . And, conversely a decomposition is lossy if \\(r\\subset \\prod_{R_1}(r) \\bowtie \\prod_{R_2}(r)\\) Note : more tuples implies more uncertainty (less information) . A decomposition of \\(R\\) into \\(R_1\\) and \\(R_2\\) is lossless join if at least one of the following dependencies holds: (\u5145\u5206\u6761\u4ef6) \\(R_1\\cap R_2\\rightarrow R_1\\) \\(R_1\\cap R_2 \\rightarrow R_2\\) \u5373\u516c\u5171\u5c5e\u6027\u662f\u5176\u4e2d\u4e00\u4e2a\u5173\u7cfb\u7684 Key.","title":"Lossless-join Decomposition"},{"location":"DB/db7/#devise-a-theory-for-the-following","text":"Decide whether a particular relation R is in \u201cgood\u201d form. In the case that a relation R is not in \u201cgood\u201d form, decompose it into a set of relations \\(\\{R_1, R_2, \\ldots, R_n\\}\\) such that each relation is in good form the decomposition is a lossless-join decomposition \u5982\u679c\u5173\u7cfb\u662f\u4e0d\u597d\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u628a\u5b83\u65e0\u635f\u5206\u89e3\u6210\u597d\u7684\u5173\u7cfb\u3002 Our theory is based on: functional dependencies multivalued dependencies Normal Forms(NF): \\(1NF \\rightarrow 2NF \\rightarrow 3NF \\rightarrow **BCNF** \\rightarrow 4NF\\) \u6709\u4e9b\u51fd\u6570\u4f9d\u8d56\uff0c\u4e0d\u80fd\u5728 BCNF \u4e2d\u5f97\u5230\u4f53\u73b0\uff0c\u9700\u8981\u628a\u51e0\u4e2a\u8868\u62fc\u5728\u4e00\u8d77\u624d\u80fd\u4f53\u73b0\uff0c\u53eb\u4f9d\u8d56\u4fdd\u6301\u3002\u8fd9\u65f6\u6211\u4eec\u9700\u8981\u4ece BCNF \u56de\u5230 3NF.","title":"Devise a Theory for the Following"},{"location":"DB/db7/#functional-dependencies","text":"Functional Dependencies are constraints on the set of legal relations. (\u6765\u81ea\u4e8e\u5e94\u7528\u5c42\u9762\u7684\u89c4\u5b9a) Require that the value for a certain set of attributes determines uniquely the value for another set of attributes. e.g. dept_name \\(\\rightarrow\\) building A functional dependency is a generalization of the notion of a key . Let \\(R\\) be a relation schema \\(\\alpha\\subseteq R\\) and \\(\\beta\\subseteq R\\) ( \\(\\alpha, \\beta\\) \u662f\u5c5e\u6027\u7684\u96c6\u5408) The functional dependency \\(\\alpha\\rightarrow \\beta\\) holds on \\(R\\) if and only if for any legal relations \\(r(R)\\) , whenever any two tuples \\(t_1\\) and \\(t_2\\) of \\(r\\) agree on the attributes \\(\\alpha\\) , they also agree on the attributes \\(\\beta\\) . That is, \\[ t_1[\\alpha] = t2 [\\alpha] \\Rightarrow t_1[\\beta ] = t_2 [\\beta ] \\] \u901a\u8fc7\u6570\u636e\u5e93\u5b9e\u4f8b\u53ef\u4ee5\u8bc1\u4f2a\u51fd\u6570\u4f9d\u8d56\uff0c\u4f46\u4e0d\u80fd\u8bc1\u5b9e\u3002\uff08\u4f9d\u8d56\u662f\u6765\u81ea\u5e94\u7528\u5c42\u9762\u7684\u89c4\u5b9a\uff0c\u5148\u6709\u51fd\u6570\u4f9d\u8d56\uff0c\u518d\u6709\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff09 Example \\(A\\rightarrow B\\) \u53ef\u4ee5\u8bc1\u4f2a\uff0c\u4f46\u4e5f\u4e0d\u80fd\u56e0\u6b64\u5c31\u8bf4 \\(B\\rightarrow A\\) K is a superkey for relation schema \\(R\\) if and only if \\(K\\rightarrow R\\) K is a candidate key for \\(R\\) if and only if \\(K\\rightarrow R\\) , and for no \\(\\alpha\\subset K\\) , \\(\\alpha\\rightarrow R\\) A functional dependency is trivial if it is satisfied by all relations. \u5168\u96c6\u53ef\u4ee5\u51b3\u5b9a\u5b50\u96c6\u3002 In general, \\(\\alpha\\rightarrow \\beta\\) is trivial if \\(\\beta\\subseteq \\alpha\\)","title":"Functional Dependencies"},{"location":"DB/db7/#closure","text":"","title":"Closure(\u95ed\u5305)"},{"location":"DB/db7/#closure-of-a-set-of-functional-dependencies","text":"Given a set \\(F\\) of functional dependencies, there are certain other functional dependencies that are logically implied by \\(F\\) . The set of all functional dependencies logically implied by \\(F\\) is the closure of \\(F\\) . We denote the closure of \\(F\\) by \\(F^+\\) . e.g. \\(F=\\{A\\rightarrow B,B\\rightarrow C\\}\\) then \\(F^+=\\{A\\rightarrow B, B\\rightarrow C, A\\rightarrow C, AB\\rightarrow B, AB\\rightarrow C,\\ldots\\}\\) We can find \\(F^+\\) , the closure of \\(F\\) , by repeatedly applying Armstrong\u2019s Axioms : if \\(\\beta\\subseteq \\alpha\\) then \\(\\alpha \\rightarrow \\beta\\) ( reflexivity , \u81ea\u53cd\u5f8b) if \\(\\alpha\\rightarrow \\beta\\) then \\(\\gamma \\alpha \\rightarrow \\gamma \\beta\\) ( augmentation , \u589e\u8865\u5f8b) if \\(\\alpha\\rightarrow \\beta\\) and \\(\\beta \\rightarrow \\gamma\\) then \\(\\alpha\\rightarrow \\gamma\\) ( transitivity , \u4f20\u9012\u5f8b) These rules are Sound\uff08\u6b63\u786e\u6709\u6548\u7684\uff09 generate only functional dependencies that actually hold Complete\uff08\u5b8c\u5907\u7684\uff09 generate all functional dependencies that hold Example Additional rules: If \\(\\alpha\\rightarrow \\beta\\) holds and \\(\\alpha\\rightarrow \\gamma\\) holds, then \\(\\alpha\\rightarrow \\beta\\gamma\\) holds ( union , \u5408\u5e76) If \\(\\alpha\\rightarrow \\beta\\gamma\\) holds, then \\(\\alpha\\rightarrow \\beta\\) holds and \\(\\alpha\\rightarrow \\gamma\\) holds ( decomposition , \u5206\u89e3) If \\(\\alpha\\rightarrow \\beta\\) holds and \\(\\gamma \\beta\\rightarrow \\delta\\) holds, then \\(\\alpha \\gamma\\rightarrow \\delta\\) holds (pseudotransitivity\uff0c\u4f2a\u4f20\u9012) Example \u51fd\u6570\u4f9d\u8d56\uff0c\u53f3\u8fb9\u7684\u516c\u5171\u5c5e\u6027\u53ef\u4ee5\u53bb\u6389\uff0c\u4f7f\u5f97\u51fd\u6570\u53cc\u65b9\u6ca1\u6709\u4ea4\u96c6\u3002","title":"Closure of a Set of Functional Dependencies"},{"location":"DB/db7/#closure-of-attribute-sets","text":"Given a set of attributes \\(a\\) , define the closure of a under \\(F\\) (denoted by \\(a+\\) ) as the set of attributes that are functionally determined by \\(a\\) under \\(F\\) Example","title":"Closure of Attribute Sets"},{"location":"DB/db7/#uses-of-attribute-closure","text":"Testing for superkey : To test if \\(\\alpha\\) is a superkey, we compute \\(\\alpha+\\) , and check if \\(\\alpha+\\) contains all attributes of \\(R\\) . Testing functional dependencies To check if a functional dependency \\(\\alpha\\rightarrow \\beta\\) holds (or, in other words, is in \\(F+\\) ), just check if \\(\\beta\\subseteq\\alpha+\\) . That is, we compute \\(\\alpha+\\) by using attribute closure, and then check if it contains \\(\\beta\\) . Is a simple and cheap test, and very useful Computing closure of F For each \\(\\gamma\\subseteq R\\) , we find the closure \\(\\gamma+\\) , and for each \\(S \\subseteq \\gamma+\\) , we output a functional dependency \\(\\gamma\\rightarrow S\\) . Example","title":"Uses of Attribute Closure"},{"location":"DB/db7/#canonical-cover","text":"\u51fd\u6570\u4f9d\u8d56\u662f\u6700\u7b80\u5355\u7684\u5f62\u5f0f\uff0c\u4e0d\u5b58\u5728\u5197\u4f59\u7684\u51fd\u6570\u4f9d\u8d56\u3002 a canonical cover of F is a \u201cminimal\u201d set of functional dependencies equivalent to F, having no redundant dependencies or redundant parts of dependencies. Example A canonical cover for \\(F\\) is a set of dependencies Fc such that \\(F\\) logically implies all dependencies in \\(F_c\\) \\(F_c\\) logically implies all dependencies in \\(F\\) No functional dependency in \\(F_c\\) contains an extraneous attribute Each left side of functional dependency in \\(F_c\\) is unique. Computing a Canonical Cover","title":"Canonical Cover\uff08\u6b63\u5219\u8986\u76d6\uff09"},{"location":"DB/db7/#boyce-codd-normal-formazsx","text":"A relation schema \\(R\\) is in BCNF with respect to a set \\(F\\) of functional dependencies if for all functional dependencies in \\(F^+\\) of the form where \\(\\alpha \\subseteq R\\) and \\(\\beta \\subseteq R\\) , at least one of the following holds \\(\\alpha \\rightarrow \\beta\\) is trivial \\(\\alpha\\) is a superkey for \\(R\\) . \u4efb\u4f55\u975e\u5e73\u51e1\u7684\u51fd\u6570\u4f9d\u8d56\u7684\u5de6\u8fb9\u90fd\u662f\u4e00\u4e2a key.","title":"Boyce-Codd Normal FormAZSX"},{"location":"DB/db7/#decomposing-a-schema-into-bcnf","text":"\u5bf9\u4e8e\u4e0d\u662f key \u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u5c31\u628a\u5b83\u5206\u89e3\u51fa\u6765\u4f5c\u4e3a\u5355\u72ec\u7684\u5173\u7cfb\u6a21\u5f0f\u3002 Suppose we have a schema \\(R\\) and a non-trivial dependency \\(\\alpha\\rightarrow \\beta\\) causes a violation of BCNF. We decompose \\(R\\) into: \\((\\alpha \\cup \\beta)\\) and \\((R-(\\beta-\\alpha))\\) \\(\\alpha\\) \u4f5c\u4e3a\u4e24\u4e2a\u5173\u7cfb\u6a21\u5f0f\u7684\u516c\u5171\u5c5e\u6027\uff0c\u4e5f\u662f\u4e00\u4e2a\u5173\u7cfb\u7684 key, \u8fd9\u6837\u624d\u662f\u65e0\u635f\u5206\u89e3\u3002 Example","title":"Decomposing a Schema into BCNF"},{"location":"DB/db7/#dependency-preservation","text":"\u4f9d\u8d56\u4fdd\u6301\uff1a\u539f\u6765\u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u90fd\u53ef\u4ee5\u5728\u5206\u89e3\u540e\u7684\u51fd\u6570\u4f9d\u8d56\u4e2d\u5f97\u5230\u5355\u72ec\u68c0\u9a8c\u3002\u5426\u5219\u9700\u8981\u628a\u51e0\u4e2a\u5173\u7cfb\u8fde\u63a5\u5728\u4e00\u8d77\u624d\u80fd\u68c0\u9a8c\u4f9d\u8d56\u7684\uff0c\u79f0\u4e3a\u4f9d\u8d56\u4e0d\u4fdd\u6301\u3002 Constraints, including functional dependencies, are costly to check in practice unless they pertain to only one relation. If it is sufficient to test only those dependencies on each individual relation of a decomposition in order to ensure that all functional dependencies hold, then that decomposition is dependency preserving (\u4fdd\u6301\u4f9d\u8d56) . \uff08\u5982\u679c\u901a\u8fc7\u68c0\u9a8c\u5355\u4e00\u5173\u7cfb\u4e0a\u7684\u51fd\u6570\u4f9d\u8d56\uff0c\u5c31\u80fd\u786e\u4fdd\u6240\u6709\u7684\u51fd\u6570\u4f9d\u8d56\u6210\u7acb\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u5206\u89e3\u662f\u4f9d\u8d56\u4fdd\u6301\u7684\uff09 \uff08\u6216\u8005\uff0c\u539f\u6765\u5173\u7cfbR\u4e0a\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u4f9d\u8d56\uff0c\u90fd\u53ef\u4ee5\u5728\u5206\u89e3\u540e\u7684\u5355\u4e00\u5173\u7cfb\u4e0a\u5f97\u5230\u68c0\u9a8c\u6216\u8005\u63a8\u5bfc\u5f97\u5230\u3002\uff09 Because it is not always possible to achieve both BCNF and dependency preservation, we consider a weaker normal form, known as third normal form . Let \\(F_i\\) be the set of all functional dependencies in \\(F^+\\) that include only attributes in \\(R_i\\) . ( \\(F_i\\) : the restriction of \\(F\\) on \\(R_i\\) ) A decomposition is dependency preserving, if \\((F_1\\cup F_2 \\cup \\ldots \\cup F_n )^+ = F^+\\) If it is not, then checking updates for violation of functional dependencies may require computing joins, which is expensive. Example Example","title":"Dependency Preservation"},{"location":"DB/db7/#third-normal-form","text":"\u4efb\u4f55\u4e00\u4e2a\u975e\u5e73\u51e1\u51fd\u6570\u4f9d\u8d56\uff0c\u5982\u679c\u5de6\u8fb9\u4e0d\u662f\u4e00\u4e2a super key, \u90a3\u4e48\u53f3\u8fb9\u5fc5\u987b\u5305\u542b\u5728\u4e00\u4e2a candidate key \u91cc\u9762\u3002 A relation schema \\(R\\) is in third normal form (3NF) if for all: $\\alpha\\rightarrow \\beta $ in \\(F^+\\) at least one of the following holds: \\(\\alpha\\rightarrow \\beta\\) is trivial (i.e., \\(\\beta \\in \\alpha\\) ) \\(\\alpha\\) is a superkey for R Each attribute A in \\(\\beta-\\alpha\\) is contained in a candidate key for \\(R\\) . \u5019\u9009\u7801\u6709\u5f88\u591a\u4e2a\uff0c\u5305\u542b\u5728\u67d0\u4e00\u4e2a\u5019\u9009\u7801\u5373\u53ef\u3002 Example Goals of Normalization In the case that a relation scheme R is not in \u201cgood\u201d form, decompose it into a set of relation scheme \\(\\{R_1, R_2, \\ldots, R_n\\}\\) such that each relation scheme is in good form ( i.e. , BCNF or 3NF) the decomposition is a lossless-join decomposition Preferably, the decomposition should be dependency preserving E-R Modeling and Normal Forms \u8fd9\u91cc\u7684\u65e0\u635f\u5206\u89e3\uff0c\u5148\u6307\u5b9a\u4e00\u4e2a\u8def\u5f84\uff0c\u8003\u8651\u6bcf\u4e24\u4e2a\u5173\u7cfb\u76f4\u63a5\u662f\u5426\u65e0\u635f\uff08\u516c\u5171\u5c5e\u6027\u662f\u5426\u4e3a\u5176\u4e2d\u4e00\u4e2a\u5173\u7cfb\u7684 key\uff09\u3002","title":"Third Normal Form"},{"location":"DB/db7/#multivalued-dependencies","text":"There are database schemas in BCNF that do not seem to be sufficiently normalized. Example \u5b58\u5728\u4e24\u79cd\u4e0d\u76f8\u5173\u7684\u591a\u503c\u4f9d\u8d56\u3002\u8001\u5e08 id \u53ef\u4ee5\u591a\u503c\u51b3\u5b9a child_name, \u53c8\u53ef\u4ee5\u591a\u503c\u51b3\u5b9a phone, \u4f46\u8fd9\u4e24\u4e2a\u5c5e\u6027\u662f\u4e0d\u76f8\u5173\u7684\uff0c\u653e\u5728\u4e00\u4e2a\u8868\u91cc\u5c31\u4f1a\u7ec4\u5408\u3002 \u7b2c\u4e8c\u5f20\u56fe\u7684\u4e3a Fourth Normal Form (4NF) . \u56db\u8303\u5f0f\uff1a\u4e0d\u5b58\u5728\u975e\u5e73\u51e1\u7684\u591a\u503c\u4f9d\u8d56\u3002 Let R be a relation schema and let \\(\\alpha\\subset R\\) and \\(\\beta\\subset R\\) . The multivalued dependency \\(\\alpha\\rightarrow\\rightarrow\\beta\\) holds on \\(R\\) if in any legal relation \\(r(R)\\) , for all pairs for tuples \\(t_1\\) and \\(t_2\\) in \\(r\\) such that \\(t_1[\\alpha] = t_2 [\\alpha]\\) , there exist tuples \\(t_3\\) and \\(t_4\\) in \\(r\\) such that: \\[ t_3[\\alpha] = t_4[\\alpha] = t_1[\\alpha]=t_2[\\alpha]\\\\ t_3[\\beta]=t_1[\\beta]\\\\ t_3[R-\\beta]=t_2[R-\\beta]\\\\ t_4[\\beta]=t_2[\\beta]\\\\ t_4[R-\\beta]=t_1[R-\\beta] \\] A relation schema \\(R\\) is in 4NF with respect to a set \\(D\\) of functional and multivalued dependencies if for all multivalued dependencies in \\(D^+\\) of the form \\(\\alpha\\rightarrow \\rightarrow \\beta\\) , where \\(\\alpha\\subset R\\) and \\(\\beta\\subset R\\) , at least one of the following hold: \\(\\alpha\\rightarrow \\rightarrow \\beta\\) is trivial (i.e., \\(\\beta \\subset \\alpha\\) or \\(\\alpha \\cup \\beta= R\\) ) \u5373\u9664\u4e86 \\(\\alpha,\\beta\\) \u4e3a\u6ca1\u6709\u5176\u4ed6\u5c5e\u6027\u3002 \\(\\alpha\\) is a superkey for schema \\(R\\) \u4efb\u4f55\u4e00\u4e2a\u591a\u503c\u4f9d\u8d56\uff0c\u8981\u4e48\u5de6\u8fb9\u5c31\u662f\u4e2a key, \u8981\u4e48\u8fd9\u4e2a\u4f9d\u8d56\u662f\u5e73\u51e1\u7684\u3002 E-R Modeling and Normal Forms \u4e0d\u662f BCNF, \u56e0\u6b64\u4e5f\u4e0d\u662f 4NF.","title":"Multivalued Dependencies"},{"location":"DB/db7/#overall-database-design-process","text":"Denormalization for Performance Some aspects of database design are not caught by normalization. \u6709\u65f6\u5019\u6211\u4eec\u9700\u8981\u5f15\u5165\u5197\u4f59\uff0c\u6765\u4fdd\u6301\u6027\u80fd\u3002 Example","title":"Overall Database Design Process"},{"location":"DB/db8/","text":"Physical Storage Systems \u00b6 Abstract Classification of Physical Storage Media Storage Hierarchy Magnetic Disks Disk Interface Standards Performance Measures of Disks Optimization of Disk-Block Access Flash Storage & SSD Storage Class Memory(NVM) Storage Hierarchy \u00b6 volatile storage(\u6613\u5931\u5b58\u50a8) loses contents when power is switched off. non-volatile storage\uff08\u975e\u6613\u5931\u5b58\u50a8\uff09 Contents persist even when power is switched off. \u4e3b\u8981\u4ece speed, cost, reliability \u8861\u91cf \u4ece\u9ad8\u5c42\u5f80\u4f4e\u5c42\u8d70\uff0c\u5b58\u50a8\u8bbe\u5907\u53d8\u5f97\u66f4\u6162\uff0c\u66f4\u4fbf\u5b9c\u548c\u66f4\u5927\u3002 primary storage : Fastest media but volatile (cache, main memory). secondary storage : next level in hierarchy, non-volatile, moderately fast access time also called on-line storage tertiary storage : lowest level in hierarchy, non-volatile, slow access time also called off-line storage \u5e38\u7528\u6765\u5907\u4efd NVM (non-volatile memory) \u8bbf\u95ee\u548c\u5185\u5b58\u4e00\u6837\uff0c\u4ee5\u5b57\u8282\u5bfb\u5740\uff0c\u800c\u4e14\u6389\u7535\u80fd\u4fdd\u6301\u6570\u636e\u3002 Magnetic Disks \u00b6 \u4e00\u4e2a\u78c1\u76d8\u6709\u4e0a\u5341\u4e07\u4e2a track(\u78c1\u9053), \u4e00\u4e2a\u78c1\u9053\u53c8\u6709\u4e0a\u5343\u4e2a sector(\u6247\u533a\uff0c\u662f\u8ba1\u7b97\u673a\u548c\u78c1\u76d8\u4ea4\u6362\u6570\u636e\u7684\u6700\u5c0f\u5355\u4f4d). arm assemly \u7528\u6765\u5bfb\u9053\uff0c\u8bfb\u5199\u5934\u5171\u8fdb\u9000\uff0c\u5bfb\u627e\u6570\u636e\u5728\u54ea\u4e2a\u78c1\u9053\u4e0a\u3002 \u7b49\u5bf9\u5e94\u6247\u533a\u65cb\u8f6c\u5230\u8bfb\u5199\u5934\uff0c\u624d\u5f00\u59cb\u4f20\u8f93\u6570\u636e\u3002 \u540c\u6837\u78c1\u9053\u7ec4\u6210\u7684\u67f1\u9762\u3002\u5bf9\u4e8e\u5927\u6587\u4ef6\uff0c\u6700\u597d\u5b58\u5728\u540c\u4e00\u4e2a\u67f1\u9762\u4e0a\uff0c\u8fd9\u6837\u53ef\u4ee5\u5e76\u884c\u8bfb\u5199\u3002 Read-write head Surface of platter divided into circular tracks\uff08\u78c1\u9053\uff09 Each track is divided into sectors\uff08\u6247\u533a\uff09 To read/write a sector disk arm swings to position head on right track platter spins continually; data is read/written as sector passes under head Cylinder\uff08\u67f1\u9762\uff09 i consists of ith track of all the platters Disk controller(\u78c1\u76d8\u63a7\u5236\u5668) \u2013 interfaces between the computer system and the disk drive hardware. Performance Measures of Disks \u00b6 Access time(\u8bbf\u95ee\u65f6\u95f4) \u2013 the time it takes from when a read or write request is issued to when data transfer begins. Consists of: Seek time\uff08\u5bfb\u9053\u65f6\u95f4 \uff09\u2013 time it takes to reposition the arm over the correct track. Average seek time is \u00bd the worst case seek time. 4 to 10 milliseconds on typical disks Rotational latency\uff08\u65cb\u8f6c\u5ef6\u8fdf\uff09 \u2013 time it takes for the sector to be accessed to appear under the head. Average latency is \u00bd of the worst case latency. 4 to 11 milliseconds on typical disks (5400 to 15000 r.p.m.) Data-transfer rate\uff08\u6570\u636e\u4f20\u8f93\u7387\uff09 \u2013 the rate at which data can be retrieved from or stored to the disk. \u5185\u5b58\u4f20\u8f93\u662f\u4ee5\u5757\u4e3a\u5355\u4f4d\u7684\u3002\u5373\u4f7f\u662f\u60f3\u8981\u8bbf\u95ee\u4e00\u4e2a byte, \u4e5f\u9700\u8981\u628a\u8fd9\u4e2a byte \u6240\u5728\u7684 4k \u5185\u5b58\u8bfb\u8fdb\u6765\u3002 Disk block is a logical unit for storage allocation and retrieval Smaller blocks: more transfers from disk Larger blocks: more space wasted due to partially filled blocks Sequential access pattern(\u987a\u5e8f\u8bbf\u95ee\u6a21\u5f0f) \u8fde\u7eed\u7684\u8bfb\u5199\u8bf7\u6c42\u53ea\u9700\u8981\u7b2c\u4e00\u6b21\u8bbf\u95ee\u78c1\u76d8 Random access pattern\uff08\u968f\u673a\u8bbf\u95ee\u6a21\u5f0f\uff09 \u6162\uff0c\u5e0c\u671b\u5c3d\u91cf\u591a\u4e00\u4e9b\u987a\u5e8f\u8bbf\u95ee\u3002 \u53ef\u4ee5\u7528\u4e00\u4e2a\u65e5\u5fd7\u628a\u8981\u4fee\u6539\u7684\u6570\u636e\u8bb0\u5f55\u4e0b\u6765\uff0c\u540e\u9762\u518d\u8fdb\u884c\u4fee\u6539\uff0c\u5c3d\u91cf\u7528\u987a\u5e8f\u8bbf\u95ee\u66ff\u6362\u968f\u673a\u8bbf\u95ee\u3002 I/O operations per second (IOPS \uff0c\u6bcf\u79d2I/O\u64cd\u4f5c\u6570) Number of random block reads that a disk can support per second. \u6bcf\u79d2\u53ef\u4ee5\u652f\u6301\u968f\u673a\u8bfb\u7684\u6b21\u6570\u3002 Mean time to failure (MTTF\uff0c\u5e73\u5747\u6545\u969c\u65f6\u95f4) the average time the disk is expected to run continuously without any failure. Optimization of Disk-Block Access \u00b6 Buffering : in-memory buffer to cache disk blocks \u6570\u636e\u8bfb\u8fdb\u6765\u5c31\u4e22\uff0c\u6bd4\u8f83\u53ef\u60dc\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5b83\u653e\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u4e07\u4e00\u540e\u9762\u9700\u8981\u4f7f\u7528\u53ef\u4ee5\u4e0d\u7528\u518d\u8bfb\u3002 Read-ahead(Prefetch) : Read extra blocks from a track in anticipation that they will be requested soon \u9884\u53d6\uff0c\u8bfb\u67d0\u5757\u65f6\u9884\u6d4b\u90bb\u8fd1\u51e0\u5757\u4e5f\u4f1a\u88ab\u8bbf\u95ee\uff0c\u4e8e\u662f\u5c31\u4e00\u8d77\u53d6\u5230\u5185\u5b58\u4e2d\u3002\u8981\u6709\u4f9d\u636e\u5730\u9884\u53d6\uff0c\u4e0d\u7136\u65e0\u7528\u7684\u6570\u636e\u4f1a\u5360\u7528\u7f13\u5b58\u3002 Disk-arm-scheduling algorithms re-order block requests so that disk arm movement is minimized elevator algorithm File organization Allocate blocks of a file in as contiguous a manner as possible \u9884\u5148\u5206\u914d\u5f97\u5230\u7684\u5185\u5b58\u662f\u8fde\u7eed\u7684 Files may get fragmented Sequential access to a fragmented file results in increased disk arm movement Some systems have utilities to defragment the file system, in order to speed up file access Nonvolatile write buffers\uff08\u975e\u6613\u5931\u6027\u5199\u7f13\u5b58\uff09 speed up disk writes by writing blocks to a non-volatile RAM buffer immediately \u628a\u8981\u5199\u7684\u6570\u636e\u5148\u5199\u5230\u4e00\u4e2a\u5feb\u901f\u7684\u975e\u6613\u5931\u7684\u7f13\u5b58\u91cc\uff0c\u5982 NVM. \u8fd9\u65f6\u4e0a\u9762\u7684\u7a0b\u5e8f\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u4e86, NVM \u518d\u62e9\u673a\u5c06\u6570\u636e\u5199\u56de\u5230\u78c1\u76d8\u3002 Log disk\uff08\u65e5\u5fd7\u78c1\u76d8\uff09 a disk devoted to writing a sequential log of block updates Flash Storage \u00b6 NAND flas requires page-at-a-time read (page: 512 bytes to 4 KB) \u987a\u5e8f\u8bfb\u5199\u548c\u968f\u673a\u8bfb\u5199\u5dee\u4e0d\u591a Page can only be written once \u50cf\u9ed1\u677f\uff0c\u5199\u4e86\u6570\u636e\u5982\u679c\u8981\u518d\u5199\u9700\u8981\u628a\u4e4b\u524d\u7684\u64e6\u6389\u3002 SSD(Solid State Disks) Use standard block-oriented disk interfaces, but store data on multiple flash storage devices internally \u53ef\u80fd\u6709\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u6211\u4eec\u53cd\u590d\u8bfb\u5199\u3001\u64e6\u53bb\u67d0\u51e0\u4e2a\u5757\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u5b83\u4eec\u574f\u7684\u5f88\u5feb\u3002 Remapping of logical page addresses to physical page addresses avoids waiting for erase Flash translation table tracks mapping also stored in a label field of flash page remapping carried out by flash translation layer wear leveling(\u78e8\u635f\u5747\u8861) evenly distributed erase operators across physical blocks Persistence \u5373\u6389\u7535\u662f\u5426\u80fd\u4fdd\u6301\u539f\u6570\u636e\u3002","title":"\u7269\u7406\u5b58\u50a8\u7cfb\u7edf"},{"location":"DB/db8/#physical-storage-systems","text":"Abstract Classification of Physical Storage Media Storage Hierarchy Magnetic Disks Disk Interface Standards Performance Measures of Disks Optimization of Disk-Block Access Flash Storage & SSD Storage Class Memory(NVM)","title":"Physical Storage Systems"},{"location":"DB/db8/#storage-hierarchy","text":"volatile storage(\u6613\u5931\u5b58\u50a8) loses contents when power is switched off. non-volatile storage\uff08\u975e\u6613\u5931\u5b58\u50a8\uff09 Contents persist even when power is switched off. \u4e3b\u8981\u4ece speed, cost, reliability \u8861\u91cf \u4ece\u9ad8\u5c42\u5f80\u4f4e\u5c42\u8d70\uff0c\u5b58\u50a8\u8bbe\u5907\u53d8\u5f97\u66f4\u6162\uff0c\u66f4\u4fbf\u5b9c\u548c\u66f4\u5927\u3002 primary storage : Fastest media but volatile (cache, main memory). secondary storage : next level in hierarchy, non-volatile, moderately fast access time also called on-line storage tertiary storage : lowest level in hierarchy, non-volatile, slow access time also called off-line storage \u5e38\u7528\u6765\u5907\u4efd NVM (non-volatile memory) \u8bbf\u95ee\u548c\u5185\u5b58\u4e00\u6837\uff0c\u4ee5\u5b57\u8282\u5bfb\u5740\uff0c\u800c\u4e14\u6389\u7535\u80fd\u4fdd\u6301\u6570\u636e\u3002","title":"Storage Hierarchy"},{"location":"DB/db8/#magnetic-disks","text":"\u4e00\u4e2a\u78c1\u76d8\u6709\u4e0a\u5341\u4e07\u4e2a track(\u78c1\u9053), \u4e00\u4e2a\u78c1\u9053\u53c8\u6709\u4e0a\u5343\u4e2a sector(\u6247\u533a\uff0c\u662f\u8ba1\u7b97\u673a\u548c\u78c1\u76d8\u4ea4\u6362\u6570\u636e\u7684\u6700\u5c0f\u5355\u4f4d). arm assemly \u7528\u6765\u5bfb\u9053\uff0c\u8bfb\u5199\u5934\u5171\u8fdb\u9000\uff0c\u5bfb\u627e\u6570\u636e\u5728\u54ea\u4e2a\u78c1\u9053\u4e0a\u3002 \u7b49\u5bf9\u5e94\u6247\u533a\u65cb\u8f6c\u5230\u8bfb\u5199\u5934\uff0c\u624d\u5f00\u59cb\u4f20\u8f93\u6570\u636e\u3002 \u540c\u6837\u78c1\u9053\u7ec4\u6210\u7684\u67f1\u9762\u3002\u5bf9\u4e8e\u5927\u6587\u4ef6\uff0c\u6700\u597d\u5b58\u5728\u540c\u4e00\u4e2a\u67f1\u9762\u4e0a\uff0c\u8fd9\u6837\u53ef\u4ee5\u5e76\u884c\u8bfb\u5199\u3002 Read-write head Surface of platter divided into circular tracks\uff08\u78c1\u9053\uff09 Each track is divided into sectors\uff08\u6247\u533a\uff09 To read/write a sector disk arm swings to position head on right track platter spins continually; data is read/written as sector passes under head Cylinder\uff08\u67f1\u9762\uff09 i consists of ith track of all the platters Disk controller(\u78c1\u76d8\u63a7\u5236\u5668) \u2013 interfaces between the computer system and the disk drive hardware.","title":"Magnetic Disks"},{"location":"DB/db8/#performance-measures-of-disks","text":"Access time(\u8bbf\u95ee\u65f6\u95f4) \u2013 the time it takes from when a read or write request is issued to when data transfer begins. Consists of: Seek time\uff08\u5bfb\u9053\u65f6\u95f4 \uff09\u2013 time it takes to reposition the arm over the correct track. Average seek time is \u00bd the worst case seek time. 4 to 10 milliseconds on typical disks Rotational latency\uff08\u65cb\u8f6c\u5ef6\u8fdf\uff09 \u2013 time it takes for the sector to be accessed to appear under the head. Average latency is \u00bd of the worst case latency. 4 to 11 milliseconds on typical disks (5400 to 15000 r.p.m.) Data-transfer rate\uff08\u6570\u636e\u4f20\u8f93\u7387\uff09 \u2013 the rate at which data can be retrieved from or stored to the disk. \u5185\u5b58\u4f20\u8f93\u662f\u4ee5\u5757\u4e3a\u5355\u4f4d\u7684\u3002\u5373\u4f7f\u662f\u60f3\u8981\u8bbf\u95ee\u4e00\u4e2a byte, \u4e5f\u9700\u8981\u628a\u8fd9\u4e2a byte \u6240\u5728\u7684 4k \u5185\u5b58\u8bfb\u8fdb\u6765\u3002 Disk block is a logical unit for storage allocation and retrieval Smaller blocks: more transfers from disk Larger blocks: more space wasted due to partially filled blocks Sequential access pattern(\u987a\u5e8f\u8bbf\u95ee\u6a21\u5f0f) \u8fde\u7eed\u7684\u8bfb\u5199\u8bf7\u6c42\u53ea\u9700\u8981\u7b2c\u4e00\u6b21\u8bbf\u95ee\u78c1\u76d8 Random access pattern\uff08\u968f\u673a\u8bbf\u95ee\u6a21\u5f0f\uff09 \u6162\uff0c\u5e0c\u671b\u5c3d\u91cf\u591a\u4e00\u4e9b\u987a\u5e8f\u8bbf\u95ee\u3002 \u53ef\u4ee5\u7528\u4e00\u4e2a\u65e5\u5fd7\u628a\u8981\u4fee\u6539\u7684\u6570\u636e\u8bb0\u5f55\u4e0b\u6765\uff0c\u540e\u9762\u518d\u8fdb\u884c\u4fee\u6539\uff0c\u5c3d\u91cf\u7528\u987a\u5e8f\u8bbf\u95ee\u66ff\u6362\u968f\u673a\u8bbf\u95ee\u3002 I/O operations per second (IOPS \uff0c\u6bcf\u79d2I/O\u64cd\u4f5c\u6570) Number of random block reads that a disk can support per second. \u6bcf\u79d2\u53ef\u4ee5\u652f\u6301\u968f\u673a\u8bfb\u7684\u6b21\u6570\u3002 Mean time to failure (MTTF\uff0c\u5e73\u5747\u6545\u969c\u65f6\u95f4) the average time the disk is expected to run continuously without any failure.","title":"Performance Measures of Disks"},{"location":"DB/db8/#optimization-of-disk-block-access","text":"Buffering : in-memory buffer to cache disk blocks \u6570\u636e\u8bfb\u8fdb\u6765\u5c31\u4e22\uff0c\u6bd4\u8f83\u53ef\u60dc\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5b83\u653e\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u4e07\u4e00\u540e\u9762\u9700\u8981\u4f7f\u7528\u53ef\u4ee5\u4e0d\u7528\u518d\u8bfb\u3002 Read-ahead(Prefetch) : Read extra blocks from a track in anticipation that they will be requested soon \u9884\u53d6\uff0c\u8bfb\u67d0\u5757\u65f6\u9884\u6d4b\u90bb\u8fd1\u51e0\u5757\u4e5f\u4f1a\u88ab\u8bbf\u95ee\uff0c\u4e8e\u662f\u5c31\u4e00\u8d77\u53d6\u5230\u5185\u5b58\u4e2d\u3002\u8981\u6709\u4f9d\u636e\u5730\u9884\u53d6\uff0c\u4e0d\u7136\u65e0\u7528\u7684\u6570\u636e\u4f1a\u5360\u7528\u7f13\u5b58\u3002 Disk-arm-scheduling algorithms re-order block requests so that disk arm movement is minimized elevator algorithm File organization Allocate blocks of a file in as contiguous a manner as possible \u9884\u5148\u5206\u914d\u5f97\u5230\u7684\u5185\u5b58\u662f\u8fde\u7eed\u7684 Files may get fragmented Sequential access to a fragmented file results in increased disk arm movement Some systems have utilities to defragment the file system, in order to speed up file access Nonvolatile write buffers\uff08\u975e\u6613\u5931\u6027\u5199\u7f13\u5b58\uff09 speed up disk writes by writing blocks to a non-volatile RAM buffer immediately \u628a\u8981\u5199\u7684\u6570\u636e\u5148\u5199\u5230\u4e00\u4e2a\u5feb\u901f\u7684\u975e\u6613\u5931\u7684\u7f13\u5b58\u91cc\uff0c\u5982 NVM. \u8fd9\u65f6\u4e0a\u9762\u7684\u7a0b\u5e8f\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u4e86, NVM \u518d\u62e9\u673a\u5c06\u6570\u636e\u5199\u56de\u5230\u78c1\u76d8\u3002 Log disk\uff08\u65e5\u5fd7\u78c1\u76d8\uff09 a disk devoted to writing a sequential log of block updates","title":"Optimization of Disk-Block Access"},{"location":"DB/db8/#flash-storage","text":"NAND flas requires page-at-a-time read (page: 512 bytes to 4 KB) \u987a\u5e8f\u8bfb\u5199\u548c\u968f\u673a\u8bfb\u5199\u5dee\u4e0d\u591a Page can only be written once \u50cf\u9ed1\u677f\uff0c\u5199\u4e86\u6570\u636e\u5982\u679c\u8981\u518d\u5199\u9700\u8981\u628a\u4e4b\u524d\u7684\u64e6\u6389\u3002 SSD(Solid State Disks) Use standard block-oriented disk interfaces, but store data on multiple flash storage devices internally \u53ef\u80fd\u6709\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u6211\u4eec\u53cd\u590d\u8bfb\u5199\u3001\u64e6\u53bb\u67d0\u51e0\u4e2a\u5757\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u5b83\u4eec\u574f\u7684\u5f88\u5feb\u3002 Remapping of logical page addresses to physical page addresses avoids waiting for erase Flash translation table tracks mapping also stored in a label field of flash page remapping carried out by flash translation layer wear leveling(\u78e8\u635f\u5747\u8861) evenly distributed erase operators across physical blocks Persistence \u5373\u6389\u7535\u662f\u5426\u80fd\u4fdd\u6301\u539f\u6570\u636e\u3002","title":"Flash Storage"},{"location":"DB/db9/","text":"Data Storage Structures \u00b6 Abstract File Organization Fixed-Length Records Variable-Length Records Organization of Records in Files Heap File Organization Sequential File Organization Multitable Clustering File Organization Table Partition Data-Dictionary Storage Storage Access & Buffer manager LRU strategy Clock algorithm Columnar Representation File Organization \u00b6 The database is stored as a collection of files . Each file is a sequence of records . A record is a sequence of fields . One approach: assume record size is fixed each file has records of one particular type only different files are used for different relations Fixed-Length Records \u00b6 Store record i starting from byte \\(n \\times (i \u2013 1)\\) , where n is the size of each record. Record access is simple but records may cross blocks Modification: do not allow records to cross block boundaries Deletion of record i: alternatives: move records \\(i + 1,\\ldots , n\\) to \\(i, \\ldots. , n \u2013 1\\) move record n to i do not move records, but link all free records on a free list \u8981\u5220\u9664\u7684\u6761\u6253\u4e0a\u6807\u8bb0\uff0c\u5f62\u6210\u4e00\u4e2a\u7a7a\u8bb0\u5f55\u7684\u94fe\u8868\u3002 \u4ee5\u540e\u5982\u679c\u8981\u5f80\u8fd9\u4e2a\u5757\u91cc\u63d2\u5165\uff0c\u76f4\u63a5\u901a\u8fc7\u6307\u9488\u627e\u5230\u7a7a\u8bb0\u5f55\u63d2\u5165\u5373\u53ef\uff0c\u968f\u540e\u66f4\u65b0\u6307\u9488\u3002 Variable-Length Records \u00b6 Variable-length records arise in database systems in several ways: Storage of multiple record types in a file. Record types that allow variable lengths for one or more fields such as strings ( varchar ) Record types that allow repeating fields (used in some older data models). Variable length attributes represented by fixed size (offset, length) , with actual data stored after all fixed length attributes Null values represented by null-value bitmap\uff08\u7a7a\u4f4d\u56fe\uff09 Example \u4e0d\u5b9a\u957f\u7684\u4fdd\u5b58\u5728\u540e\u9762\uff0c\u5b9a\u957f\u7684 (offset, length) \u4fdd\u5b58\u5728\u524d\u9762\u3002 \u8fd9\u91cc\u4f4d\u7f6e 12 \u653e\u7684 65000 \u662f\u5b9a\u957f\u7684 salary. \u4f4d\u7f6e 20 \u653e\u7684 0000, \u8868\u793a\u524d\u9762\u56db\u4e2a\u5c5e\u6027\u5747\u662f\u975e\u7a7a\u7684, 1 \u8868\u793a\u7a7a\u3002\uff08\u653e\u5728\u524d\u9762\u4e5f\u53ef\u4ee5\uff0c\u53ea\u8981\u5728\u4e00\u4e2a\u56fa\u5b9a\u4f4d\u7f6e\u80fd\u627e\u5230\u5373\u53ef\uff09 \u524d\u63d0\uff1a\u6bcf\u4e00\u4e2a\u8bb0\u5f55\u90fd\u662f\u88ab\u653e\u5728\u4e00\u8d77\u7684\u3002\uff08\u6709\u6309\u5217\u5b58\u50a8\u7684\u65b9\u5f0f\uff09 Slotted Page Structure \u00b6 Slotted page\uff08\u5206\u69fd\u9875\uff09 header contains: number of record entries end of free space in the block \u4e00\u4e2a\u6307\u9488\u6307\u5411 free space \u672b\u5c3e\uff0c\u7528\u6765\u5206\u914d\u5185\u5b58 location and size of each record \u5f53\u5220\u9664\u7684\u65f6\u5019\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u628a\u540e\u9762\u7684\u8bb0\u5f55\u632a\u8fc7\u53bb\uff0c\u8ba9\u81ea\u7531\u7a7a\u95f4\u66f4\u7d27\u51d1\uff0c\u8fd9\u6837\u9700\u8981\u4fee\u6539 entries, free space \u7684\u6307\u9488, \u504f\u79fb\u91cf\u4e5f\u8981\u8c03\u6574\u3002\u4e5f\u53ef\u4ee5\u6682\u65f6\u4e0d\u8c03\u6574\uff0c\u7b49\u540e\u9762\u5982\u679c\u9700\u8981\u5206\u914d\u5185\u5b58\u4f46\u4e0d\u591f\u7528\u65f6\uff0c\u518d\u4e00\u6b21\u6027\u91cd\u6574\u4e4b\u524d\u7684\u7a7a\u95f4\u3002 Organization of Records in Files \u00b6 \u63d2\u5165\u5230\u54ea\u4e2a\u6587\u4ef6\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff1f Heap \u2013 record can be placed anywhere in the file where there is space \u6709\u4f4d\u7f6e\u6211\u5c31\u63d2\u8fdb\u53bb Sequential \u2013 store records in sequential order, based on the value of the search key of each record \u63d2\u5165\u7684\u5143\u7d20\u7ef4\u62a4\u4e00\u4e2a\u6b21\u5e8f In a multitable clustering file organization records of several different relations can be stored in the same file Motivation: store related records on the same block to minimize I/O B+-tree file organization - Ordered storage even with inserts/deletes Hashing \u2013 a hash function computed on search key; the result specifies in which block of the file the record should be placed Heap File Organization \u00b6 Array with 1 entry per block. Each entry is a few bits to a byte, and records fraction of block that is free Free-space map \u7ef4\u62a4\u4e00\u4e2a\u7a7a\u95f2\u5757\u7684\u5730\u56fe\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u5757\u7684\u7a7a\u95f2\u7a0b\u5ea6\u3002 Example 3 bits per block, value divided by 8 indicates \u5982 4 \u8868\u793a 4/8 \u7a7a\u95f2\u3002 \u987a\u5e8f\u8bbf\u95ee\u6bd4\u8f83\u4f4e\u6548\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u7b2c\u4e8c\u5c42\u6765\u8868\u793a\u5176\u4e2d\u7684\u6700\u5927\u7a7a\u95f2\u5757\u3002 Sequential File Organization \u00b6 Suitable for applications that require sequential processing of the entire file The records in the file are ordered by a search-key Deletion \u2013 use pointer chains Insertion \u2013 locate the position where the record is to be inserted \u8981\u66f4\u65b0 pointer chain \u6548\u7387\u4f4e\u3002\u6211\u4eec\u628a\u63d2\u5165\u7684\u653e\u5728\u672b\u5c3e\uff0c\u901a\u8fc7\u6307\u9488\u7ef4\u62a4\u79e9\u5e8f\u3002 Need to reorganize the file from time to time to restore sequential order. Multitable Clustering File Organization \u00b6 Store several relations in one file using a multitable clustering file organization. Example \u5bf9\u4e8e\u8001\u5e08\u548c\u90e8\u5206\u7ecf\u5e38\u4e00\u8d77\u8bbf\u95ee\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u4fe1\u606f\u653e\u5728\u4e00\u8d77\u3002\uff08\u5982\u679c\u4e24\u4e2a\u8868\u7ecf\u5e38\u8fde\u63a5\uff0c\u8fd9\u6837\u6bd4\u8f83\u9ad8\u6548\uff09 \u4f46\u8fd9\u6837\u5bf9\u4e8e\u5355\u72ec\u67e5\u627e\u67d0\u4e2a\u4fe1\u606f\u5c31\u4e0d\u592a\u65b9\u4fbf\u3002 Table Partitioning \u00b6 Table partitioning : Records in a relation can be partitioned into smaller relations that are stored separately \u4e00\u4e2a\u8868\u592a\u5927\uff0c\u5bf9\u4e8e\u5e76\u884c\u8bbf\u95ee\u53ef\u80fd\u5f15\u53d1\u51b2\u7a81\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u8868\u5206\u5f00\uff0c\u5982\u5bf9\u4e8e\u6240\u6709\u8001\u5e08\u7684\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8ba1\u7b97\u673a\u7cfb\u7684\u8001\u5e08\u5206\u51fa\u6765\uff0c\u6570\u5b66\u7cfb\u7684\u8001\u5e08\u5206\u51fa\u6765\u3002\uff08\u6c34\u5e73\u5206\u5272\uff09\u4e5f\u53ef\u4ee5\u6309\u5217\u5b58\u50a8\u3002 Data Dictionary Storage \u00b6 The Data dictionary (also called system catalog ) stores metadata; that is, data about data, such as \u5b9a\u4e49\u7684\u6570\u636e\u4e5f\u662f\u6570\u636e (metadata) \u6211\u4eec\u4e5f\u9700\u8981\u628a\u5b83\u4eec\u5b58\u50a8\u4e0b\u6765\u3002 Information about relations User and accounting information, including passwords Statistical and descriptive data Physical file organization information Information about indices Storage Access & Buffer manager \u00b6 Blocks are units of both storage allocation and data transfer. Buffer \u2013 portion of main memory available to store copies of disk blocks. Buffer manager \u2013 subsystem responsible for allocating buffer space in main memory. \u5982\u6211\u4eec\u8981\u627e\u67d0\u5757\uff0c\u5148\u5728 buffer \u4e2d\u627e\uff0c\u5982\u679c\u6ca1\u627e\u5230\u5c31\u4ece\u78c1\u76d8\u4e2d\u8bfb\u51fa\u6765\u653e\u5230 buffer \u4e2d\u3002\u5f53 buffer \u5b8c\u4e86\u5c31\u9700\u8981\u8003\u8651\u5982\u4f55\u66ff\u6362\uff0c\u66ff\u6362\u54ea\u4e00\u5757\u3002 LRU Example \u5982\u679c 4 \u88ab\u4fee\u6539\u8fc7\u4e86\uff0c\u90a3\u4e48\u66ff\u6362\u65f6\u9700\u8981\u5148\u628a\u8fd9\u5757\u5199\u56de\u5230\u78c1\u76d8\u4e2d\u3002\u5199\u56de\u65f6\u4e5f\u8981\u6ce8\u610f\u6389\u7535\u7b49\u95ee\u9898\u3002 Programs call on the buffer manager when they need a block from disk. If the block is already in the buffer, buffer manager returns the address of the block in main memory If the block is not in the buffer, the buffer manager Allocates space in the buffer for the block \u5728 buffer \u91cc\u66ff\u6362\u7a7a\u95f4\uff0c\u5982\u679c\u6709\u7a7a\u4f4d\u53ef\u4ee5\u76f4\u63a5\u5206\u914d\uff0c\u5426\u5219\u9700\u8981\u66ff\u6362\u3002 Replacing (throwing out) some other block, if required, to make space for the new block. \u6709\u4e0d\u540c\u7684\u7b56\u7565\u8fdb\u884c\u9009\u62e9\u8981\u4e22\u5f03\u7684\u5757\u3002 Replaced block written back to disk only if it was modified since the most recent time that it was written to/fetched from the disk. Reads the block from the disk to the buffer, and returns the address of the block in main memory to requester. Pinned block memory block that is not allowed to be written back to disk \u6b63\u5728\u8bbf\u95ee\u8fd9\u4e00\u5757\uff0c\u90a3\u4e48\u8fd9\u4e00\u5757\u4e0d\u80fd\u88ab\u66ff\u6362\u51fa\u53bb Pin done before reading/writing data from a block Unpin done when read /write is complete Multiple concurrent pin/unpin operations possible Keep a pin count, buffer block can be evicted only if pin count = 0 Shared and exclusive locks on buffer Readers get shared lock , updates to a block require exclusive lock Locking rules: Only one process can get exclusive lock at a time Shared lock cannot be concurrently with exclusive lock Multiple processes may be given shared lock concurrently Buffer-Replacement Policies \u00b6 LRU strategy - replace the block least recently used. Idea behind LRU \u2013 use past pattern of block references as a predictor of future references \u7528\u8fc7\u53bb\u7684\u8bbf\u95ee\u6a21\u5f0f\u63a8\u65ad\u8bb2\u6765\u7684\u8bbf\u95ee\u6a21\u5f0f LRU can be a bad strategy Toss-immediate strategy \u2013 frees the space occupied by a block as soon as the final tuple of that block has been processed Most recently used (MRU) strategy \u2013 system must pin the block currently being processed. After the final tuple of that block has been processed, the block is unpinned, and it becomes the most recently used block. Buffer managers also support forced output of blocks for the purpose of recovery \u6700\u597d\u7684\u7b56\u7565\u662f\u57fa\u4e8e\u9884\u6d4b\u7684\uff0c\u4f46\u662f\u9884\u6d4b\u672c\u8eab\u662f\u5f88\u96be\u7684\uff0c\u9700\u8981\u5229\u7528\u4eba\u5de5\u667a\u80fd\u7684\u65b9\u6cd5\u3002 Clock: An approximation of LRU \u00b6 Arrange block into a cycle, store one reference_bit per block When pin_count reduces to 0, set reference_bit =1 reference_bit as the 2 nd chance bit do for each block in cycle { if ( reference_bit == 1 ) set reference_bit = 0 ; else if ( reference_bit == 0 ) choose this block for replacement ; } until a page is chosen ;","title":"\u6570\u636e\u5b58\u50a8\u7ed3\u6784"},{"location":"DB/db9/#data-storage-structures","text":"Abstract File Organization Fixed-Length Records Variable-Length Records Organization of Records in Files Heap File Organization Sequential File Organization Multitable Clustering File Organization Table Partition Data-Dictionary Storage Storage Access & Buffer manager LRU strategy Clock algorithm Columnar Representation","title":"Data Storage Structures"},{"location":"DB/db9/#file-organization","text":"The database is stored as a collection of files . Each file is a sequence of records . A record is a sequence of fields . One approach: assume record size is fixed each file has records of one particular type only different files are used for different relations","title":"File Organization"},{"location":"DB/db9/#fixed-length-records","text":"Store record i starting from byte \\(n \\times (i \u2013 1)\\) , where n is the size of each record. Record access is simple but records may cross blocks Modification: do not allow records to cross block boundaries Deletion of record i: alternatives: move records \\(i + 1,\\ldots , n\\) to \\(i, \\ldots. , n \u2013 1\\) move record n to i do not move records, but link all free records on a free list \u8981\u5220\u9664\u7684\u6761\u6253\u4e0a\u6807\u8bb0\uff0c\u5f62\u6210\u4e00\u4e2a\u7a7a\u8bb0\u5f55\u7684\u94fe\u8868\u3002 \u4ee5\u540e\u5982\u679c\u8981\u5f80\u8fd9\u4e2a\u5757\u91cc\u63d2\u5165\uff0c\u76f4\u63a5\u901a\u8fc7\u6307\u9488\u627e\u5230\u7a7a\u8bb0\u5f55\u63d2\u5165\u5373\u53ef\uff0c\u968f\u540e\u66f4\u65b0\u6307\u9488\u3002","title":"Fixed-Length Records"},{"location":"DB/db9/#variable-length-records","text":"Variable-length records arise in database systems in several ways: Storage of multiple record types in a file. Record types that allow variable lengths for one or more fields such as strings ( varchar ) Record types that allow repeating fields (used in some older data models). Variable length attributes represented by fixed size (offset, length) , with actual data stored after all fixed length attributes Null values represented by null-value bitmap\uff08\u7a7a\u4f4d\u56fe\uff09 Example \u4e0d\u5b9a\u957f\u7684\u4fdd\u5b58\u5728\u540e\u9762\uff0c\u5b9a\u957f\u7684 (offset, length) \u4fdd\u5b58\u5728\u524d\u9762\u3002 \u8fd9\u91cc\u4f4d\u7f6e 12 \u653e\u7684 65000 \u662f\u5b9a\u957f\u7684 salary. \u4f4d\u7f6e 20 \u653e\u7684 0000, \u8868\u793a\u524d\u9762\u56db\u4e2a\u5c5e\u6027\u5747\u662f\u975e\u7a7a\u7684, 1 \u8868\u793a\u7a7a\u3002\uff08\u653e\u5728\u524d\u9762\u4e5f\u53ef\u4ee5\uff0c\u53ea\u8981\u5728\u4e00\u4e2a\u56fa\u5b9a\u4f4d\u7f6e\u80fd\u627e\u5230\u5373\u53ef\uff09 \u524d\u63d0\uff1a\u6bcf\u4e00\u4e2a\u8bb0\u5f55\u90fd\u662f\u88ab\u653e\u5728\u4e00\u8d77\u7684\u3002\uff08\u6709\u6309\u5217\u5b58\u50a8\u7684\u65b9\u5f0f\uff09","title":"Variable-Length Records"},{"location":"DB/db9/#slotted-page-structure","text":"Slotted page\uff08\u5206\u69fd\u9875\uff09 header contains: number of record entries end of free space in the block \u4e00\u4e2a\u6307\u9488\u6307\u5411 free space \u672b\u5c3e\uff0c\u7528\u6765\u5206\u914d\u5185\u5b58 location and size of each record \u5f53\u5220\u9664\u7684\u65f6\u5019\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u628a\u540e\u9762\u7684\u8bb0\u5f55\u632a\u8fc7\u53bb\uff0c\u8ba9\u81ea\u7531\u7a7a\u95f4\u66f4\u7d27\u51d1\uff0c\u8fd9\u6837\u9700\u8981\u4fee\u6539 entries, free space \u7684\u6307\u9488, \u504f\u79fb\u91cf\u4e5f\u8981\u8c03\u6574\u3002\u4e5f\u53ef\u4ee5\u6682\u65f6\u4e0d\u8c03\u6574\uff0c\u7b49\u540e\u9762\u5982\u679c\u9700\u8981\u5206\u914d\u5185\u5b58\u4f46\u4e0d\u591f\u7528\u65f6\uff0c\u518d\u4e00\u6b21\u6027\u91cd\u6574\u4e4b\u524d\u7684\u7a7a\u95f4\u3002","title":"Slotted Page Structure"},{"location":"DB/db9/#organization-of-records-in-files","text":"\u63d2\u5165\u5230\u54ea\u4e2a\u6587\u4ef6\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff1f Heap \u2013 record can be placed anywhere in the file where there is space \u6709\u4f4d\u7f6e\u6211\u5c31\u63d2\u8fdb\u53bb Sequential \u2013 store records in sequential order, based on the value of the search key of each record \u63d2\u5165\u7684\u5143\u7d20\u7ef4\u62a4\u4e00\u4e2a\u6b21\u5e8f In a multitable clustering file organization records of several different relations can be stored in the same file Motivation: store related records on the same block to minimize I/O B+-tree file organization - Ordered storage even with inserts/deletes Hashing \u2013 a hash function computed on search key; the result specifies in which block of the file the record should be placed","title":"Organization of Records in Files"},{"location":"DB/db9/#heap-file-organization","text":"Array with 1 entry per block. Each entry is a few bits to a byte, and records fraction of block that is free Free-space map \u7ef4\u62a4\u4e00\u4e2a\u7a7a\u95f2\u5757\u7684\u5730\u56fe\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u5757\u7684\u7a7a\u95f2\u7a0b\u5ea6\u3002 Example 3 bits per block, value divided by 8 indicates \u5982 4 \u8868\u793a 4/8 \u7a7a\u95f2\u3002 \u987a\u5e8f\u8bbf\u95ee\u6bd4\u8f83\u4f4e\u6548\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u7b2c\u4e8c\u5c42\u6765\u8868\u793a\u5176\u4e2d\u7684\u6700\u5927\u7a7a\u95f2\u5757\u3002","title":"Heap File Organization"},{"location":"DB/db9/#sequential-file-organization","text":"Suitable for applications that require sequential processing of the entire file The records in the file are ordered by a search-key Deletion \u2013 use pointer chains Insertion \u2013 locate the position where the record is to be inserted \u8981\u66f4\u65b0 pointer chain \u6548\u7387\u4f4e\u3002\u6211\u4eec\u628a\u63d2\u5165\u7684\u653e\u5728\u672b\u5c3e\uff0c\u901a\u8fc7\u6307\u9488\u7ef4\u62a4\u79e9\u5e8f\u3002 Need to reorganize the file from time to time to restore sequential order.","title":"Sequential File Organization"},{"location":"DB/db9/#multitable-clustering-file-organization","text":"Store several relations in one file using a multitable clustering file organization. Example \u5bf9\u4e8e\u8001\u5e08\u548c\u90e8\u5206\u7ecf\u5e38\u4e00\u8d77\u8bbf\u95ee\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u4fe1\u606f\u653e\u5728\u4e00\u8d77\u3002\uff08\u5982\u679c\u4e24\u4e2a\u8868\u7ecf\u5e38\u8fde\u63a5\uff0c\u8fd9\u6837\u6bd4\u8f83\u9ad8\u6548\uff09 \u4f46\u8fd9\u6837\u5bf9\u4e8e\u5355\u72ec\u67e5\u627e\u67d0\u4e2a\u4fe1\u606f\u5c31\u4e0d\u592a\u65b9\u4fbf\u3002","title":"Multitable Clustering File Organization"},{"location":"DB/db9/#table-partitioning","text":"Table partitioning : Records in a relation can be partitioned into smaller relations that are stored separately \u4e00\u4e2a\u8868\u592a\u5927\uff0c\u5bf9\u4e8e\u5e76\u884c\u8bbf\u95ee\u53ef\u80fd\u5f15\u53d1\u51b2\u7a81\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u8868\u5206\u5f00\uff0c\u5982\u5bf9\u4e8e\u6240\u6709\u8001\u5e08\u7684\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8ba1\u7b97\u673a\u7cfb\u7684\u8001\u5e08\u5206\u51fa\u6765\uff0c\u6570\u5b66\u7cfb\u7684\u8001\u5e08\u5206\u51fa\u6765\u3002\uff08\u6c34\u5e73\u5206\u5272\uff09\u4e5f\u53ef\u4ee5\u6309\u5217\u5b58\u50a8\u3002","title":"Table Partitioning"},{"location":"DB/db9/#data-dictionary-storage","text":"The Data dictionary (also called system catalog ) stores metadata; that is, data about data, such as \u5b9a\u4e49\u7684\u6570\u636e\u4e5f\u662f\u6570\u636e (metadata) \u6211\u4eec\u4e5f\u9700\u8981\u628a\u5b83\u4eec\u5b58\u50a8\u4e0b\u6765\u3002 Information about relations User and accounting information, including passwords Statistical and descriptive data Physical file organization information Information about indices","title":"Data Dictionary Storage"},{"location":"DB/db9/#storage-access-buffer-manager","text":"Blocks are units of both storage allocation and data transfer. Buffer \u2013 portion of main memory available to store copies of disk blocks. Buffer manager \u2013 subsystem responsible for allocating buffer space in main memory. \u5982\u6211\u4eec\u8981\u627e\u67d0\u5757\uff0c\u5148\u5728 buffer \u4e2d\u627e\uff0c\u5982\u679c\u6ca1\u627e\u5230\u5c31\u4ece\u78c1\u76d8\u4e2d\u8bfb\u51fa\u6765\u653e\u5230 buffer \u4e2d\u3002\u5f53 buffer \u5b8c\u4e86\u5c31\u9700\u8981\u8003\u8651\u5982\u4f55\u66ff\u6362\uff0c\u66ff\u6362\u54ea\u4e00\u5757\u3002 LRU Example \u5982\u679c 4 \u88ab\u4fee\u6539\u8fc7\u4e86\uff0c\u90a3\u4e48\u66ff\u6362\u65f6\u9700\u8981\u5148\u628a\u8fd9\u5757\u5199\u56de\u5230\u78c1\u76d8\u4e2d\u3002\u5199\u56de\u65f6\u4e5f\u8981\u6ce8\u610f\u6389\u7535\u7b49\u95ee\u9898\u3002 Programs call on the buffer manager when they need a block from disk. If the block is already in the buffer, buffer manager returns the address of the block in main memory If the block is not in the buffer, the buffer manager Allocates space in the buffer for the block \u5728 buffer \u91cc\u66ff\u6362\u7a7a\u95f4\uff0c\u5982\u679c\u6709\u7a7a\u4f4d\u53ef\u4ee5\u76f4\u63a5\u5206\u914d\uff0c\u5426\u5219\u9700\u8981\u66ff\u6362\u3002 Replacing (throwing out) some other block, if required, to make space for the new block. \u6709\u4e0d\u540c\u7684\u7b56\u7565\u8fdb\u884c\u9009\u62e9\u8981\u4e22\u5f03\u7684\u5757\u3002 Replaced block written back to disk only if it was modified since the most recent time that it was written to/fetched from the disk. Reads the block from the disk to the buffer, and returns the address of the block in main memory to requester. Pinned block memory block that is not allowed to be written back to disk \u6b63\u5728\u8bbf\u95ee\u8fd9\u4e00\u5757\uff0c\u90a3\u4e48\u8fd9\u4e00\u5757\u4e0d\u80fd\u88ab\u66ff\u6362\u51fa\u53bb Pin done before reading/writing data from a block Unpin done when read /write is complete Multiple concurrent pin/unpin operations possible Keep a pin count, buffer block can be evicted only if pin count = 0 Shared and exclusive locks on buffer Readers get shared lock , updates to a block require exclusive lock Locking rules: Only one process can get exclusive lock at a time Shared lock cannot be concurrently with exclusive lock Multiple processes may be given shared lock concurrently","title":"Storage Access &amp; Buffer manager"},{"location":"DB/db9/#buffer-replacement-policies","text":"LRU strategy - replace the block least recently used. Idea behind LRU \u2013 use past pattern of block references as a predictor of future references \u7528\u8fc7\u53bb\u7684\u8bbf\u95ee\u6a21\u5f0f\u63a8\u65ad\u8bb2\u6765\u7684\u8bbf\u95ee\u6a21\u5f0f LRU can be a bad strategy Toss-immediate strategy \u2013 frees the space occupied by a block as soon as the final tuple of that block has been processed Most recently used (MRU) strategy \u2013 system must pin the block currently being processed. After the final tuple of that block has been processed, the block is unpinned, and it becomes the most recently used block. Buffer managers also support forced output of blocks for the purpose of recovery \u6700\u597d\u7684\u7b56\u7565\u662f\u57fa\u4e8e\u9884\u6d4b\u7684\uff0c\u4f46\u662f\u9884\u6d4b\u672c\u8eab\u662f\u5f88\u96be\u7684\uff0c\u9700\u8981\u5229\u7528\u4eba\u5de5\u667a\u80fd\u7684\u65b9\u6cd5\u3002","title":"Buffer-Replacement Policies"},{"location":"DB/db9/#clock-an-approximation-of-lru","text":"Arrange block into a cycle, store one reference_bit per block When pin_count reduces to 0, set reference_bit =1 reference_bit as the 2 nd chance bit do for each block in cycle { if ( reference_bit == 1 ) set reference_bit = 0 ; else if ( reference_bit == 0 ) choose this block for replacement ; } until a page is chosen ;","title":"Clock: An approximation of LRU"},{"location":"ICS/","text":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba \u00b6 Abstract \u8fd9\u91cc\u662f\u6d59\u6c5f\u5927\u5b66 \u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba \u8bfe\u7a0b\u7b14\u8bb0\u53ca\u76f8\u5173\u77e5\u8bc6 \u8001\u5e08: Yale Patt and Jiang Xiaohong \u53c2\u8003: Introduction to Computing Systems: From Bits and Gates to C and Beyond 3 rd (\u6559\u6750) Patt\u4e0a\u8bfe\u65f6\u8bb0\u7684\u7b14\u8bb0\u548c\u52a9\u6559TSjj\u590d\u4e60\u8bfe\u7b14\u8bb0\u3002 \u5185\u5bb9: Chapter 1: Introduction Chapter 2: Bits, Data Types and Operations Chapter 3: Digital Logic Structures Chapter 4: The von Neumann Model Chapter 5: LC-3 Chapter 6: Programming Chapter 7: Assembly Language Chapter 8: Data Structures Chapter 9: I/0","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba"},{"location":"ICS/#_1","text":"Abstract \u8fd9\u91cc\u662f\u6d59\u6c5f\u5927\u5b66 \u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba \u8bfe\u7a0b\u7b14\u8bb0\u53ca\u76f8\u5173\u77e5\u8bc6 \u8001\u5e08: Yale Patt and Jiang Xiaohong \u53c2\u8003: Introduction to Computing Systems: From Bits and Gates to C and Beyond 3 rd (\u6559\u6750) Patt\u4e0a\u8bfe\u65f6\u8bb0\u7684\u7b14\u8bb0\u548c\u52a9\u6559TSjj\u590d\u4e60\u8bfe\u7b14\u8bb0\u3002 \u5185\u5bb9: Chapter 1: Introduction Chapter 2: Bits, Data Types and Operations Chapter 3: Digital Logic Structures Chapter 4: The von Neumann Model Chapter 5: LC-3 Chapter 6: Programming Chapter 7: Assembly Language Chapter 8: Data Structures Chapter 9: I/0","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u6982\u8bba"},{"location":"ICS/ICS-1/","text":"Chapter 1 Introduction \u00b6 Abstract Covered in Lecture 1 2022.7.11 Topics: 1. Two major themes: Abstraction and Hardware vs Software 2. A computer system 3. Level of Transfomation Two major themes \u00b6 Abstraction \u00b6 Too much or too tedious low-level details are abstracted into high-level interfaces that are easy to understand and use, thereby improving efficiency. Example You get in a taxi and you tell the driver to go to the airport. By contrast you can tell the driver each step like making a right turn, going down this street ten blocks and so on, which is not efficienct at all. However if you just tell him to go to the airport, then things are done. There is an underlying assumption, when everything about the detail is just fine. If we want to combine multiple components into a larger system, we should be careful about the components below the abstractions. Hardware vs Software \u00b6 Both are important. A computer system \u00b6 CPU : operating data MEM : storage or memory Input & output devices \uff08I/O) Input: By typing input informations to CPU(keyboard) Output: Show the outcome done by CPU on monitor Level of Transfomation \u00b6 problem(in natural languages)->electrons by a sequence of transformation called level of transformation Problem (Natural language) Algorithm (eliminate ambiguity) Program (Python, C++, ...) Instruction set architecture(ISA) Micro-architecture Logic circuit Electronic circuit Electrons problem \u00b6 Natural languages may have ambiguity. Example \"\u5b89\" can mean peace(a woman in a house.), safety(\u516c\u5b89 police), contentment while it can also mean inexpensive, cheap in Japenese. \u201c\u4e1c\u897f\u201d means direction east and west, while it also means item, which may cause ambiguity. However, The statement of the problem should have No Ambiguity . Algorithm \u00b6 Algorithm is a procedure step by step. definite, means no ambiguity. effective computability(\u53ef\u884c\u7684), means every step can be successfully carried out. finiteness, means the procedure will terminate. programs \u00b6 Transform the algorithm into a computer program in one of the programming languages precisely. high-level languages: they are independent of the computer on which the programs will execute. We say the language is\u201cmachine independent.(Python, C++,...) low-level languages: they are tied to the computer on which the programs will execute. There is generally one such low-level language for each computer. That language is called the assembly language for that computer.(x86) Instruction Set Architecture(ISA) \u00b6 ISA is the interface between software(program) and hardware. Example \u6c7d\u8f66\u7684 ISA \u5c31\u662f\u4eba\u9700\u8981\u77e5\u9053\u4ed6\u80fd\u8ba9\u8f66\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u8f66\u9700\u8981\u505a\u5230\u4eba\u6307\u5b9a\u7684\u4efb\u52a1\u7684\u89c4\u8303\u3002 \u5bf9\u4e8e\u4e00\u8f86\u8f66\u7684\u8e0f\u677f\uff0c\u4eba\u77e5\u9053\u5982\u679c\u4ed6\u8e29\u4e0b\u53bb\uff0c\u90a3\u4e48\u8fd9\u8f86\u8f66\u4f1a\u5239\u8f66\u3002\u8f66\u77e5\u9053\u5982\u679c\u8e0f\u677f\u53d7\u5230\u4e86\u538b\u529b\uff0c\u8f66\u7684\u786c\u4ef6\u4f1a\u8ba9\u8f66\u505c\u4e0b\u3002ISA \u7684\u4f5c\u7528\u5c31\u662f\u5c06\u4eba\u8e29\u5239\u8f66\u548c\u8f66\u505c\u4e0b\u5bf9\u5e94\u8d77\u6765\u3002 e.g. x86(1979 8086, 286, 386, 486), Power-PC, Sparc ISA contains: opcode: is used to describe operation data type: a representation of operand . addressing mode: mechanism that computer can use to find the address of the operands.(\u5bfb\u5740\u6a21\u5f0f) Address ability: how many bytes per memory-slot Microarchitecture \u00b6 Example \u6240\u6709\u7684\u6c7d\u8f66\u90fd\u6709\u76f8\u540c\u7684 ISA\uff0c\u4f8b\u5982\u6240\u6709\u7684\u6c7d\u8f66\u4e2d\u4e09\u4e2a\u8e0f\u677f\u7684\u5b9a\u4e49\u5b8c\u5168\u76f8\u540c\uff0c\u5373\u4e2d\u95f4\u7684\u662f\u5239\u8f66\u3001\u53f3\u8fb9\u7684\u662f\u6cb9\u95e8\u3001\u5de6\u8fb9\u7684\u662f\u79bb\u5408\u5668\u3002 \u800c\u5c06 ISA \u5b9e\u73b0\u7684\u5177\u4f53\u7ec4\u7ec7\uff08\u5fae\u7ed3\u6784\uff09\u662f\u6307\u8f66\u76d6\u677f\u4e0b\u7684\u201c\u5185\u5bb9\u201d\u3002\u6240\u6709\u7684\u6c7d\u8f66\uff0c\u5176\u5236\u9020\u548c\u6a21\u578b\u90fd\u4e0d\u5c3d\u76f8\u540c\uff0c\u8fd9\u53d6\u51b3\u4e8e\u8bbe\u8ba1\u8005\u5728\u5236\u9020\u4e4b\u524d\u6240\u505a\u7684\u6743\u8861\u51b3\u7b56\uff0c\u5982\u6709\u7684\u5236\u52a8\u7cfb\u7edf\u91c7\u7528\u5239\u8f66\u7247\uff0c\u6709\u7684\u91c7\u7528\u5236\u52a8\u9f13\uff1b\u6709\u7684\u662f\u516b\u7f38\u53d1\u52a8\u673a\uff0c\u6709\u7684\u662f\u516d\u7f38\uff0c\u8fd8\u6709\u7684\u662f\u56db\u7f38\uff1b\u6709\u7684\u6709\u6da1\u8f6e\u589e\u538b\uff0c\u6709\u7684\u6ca1\u6709\u3002\u6211\u4eec\u79f0\u8fd9\u4e9b\u5dee\u5f02\u6027\u7684\u7ec6\u8282\u4e3a\u4e00\u4e2a\u7279\u5b9a\u6c7d\u8f66\u7684\u201c\u5fae\u7ed3\u6784\u201d\uff0c\u5b83\u4eec\u53cd\u6620\u4e86\u8bbe\u8ba1\u8005\u5728\u6210\u672c\u548c\u6027\u80fd\u4e4b\u95f4\u6240\u505a\u7684\u6743\u8861\u51b3\u7b56\u3002 e.g. \u5bf9\u540c\u6837\u6307\u4ee4\u96c6 x86, \u4ed6\u7684\u5fae\u7ed3\u6784\u4ece 8086, 80286, 80386, 80486...\u76f4\u5230\u5982\u4eca\u7684\u7684 Skylake. Note ISA \u5c06\u6211\u4eec\u7684\u7a0b\u5e8f(language)\u8f6c\u5316\u4e3a 01 \u5b57\u7b26\u4e32(\u7c7b\u4f3c\u4e8e\u6c47\u7f16\u4e2d\u7684\u673a\u5668\u7801 \u5982E8 01\u4ee3\u8868jmp)\uff0c\u800c\u5fae\u7ed3\u6784\u662f\u5176\u5bf9\u5e94\u7684\u7269\u7406\u5b9e\u73b0(\u7535\u8def)\u3002 \u56e0\u6b64\u5bf9\u4e8e\u540c\u6837\u7684 01 \u5b57\u7b26\u4e32\uff0c\u5176\u5b9e\u73b0\u7684\u529f\u80fd\u76f8\u540c\uff0c\u4f46\u53ef\u4ee5\u6709\u5404\u79cd\u4e0d\u540c\u7684\u7269\u7406\u5b9e\u73b0\uff1b\u4f46\u4e00\u5957\u5fae\u7ed3\u6784\u53ea\u80fd\u5b9e\u73b0\u4e00\u7c7b ISA. \u2014\u2014by tsjj Logic Circuit and devices will be discussed later.","title":"Introduction"},{"location":"ICS/ICS-1/#chapter-1-introduction","text":"Abstract Covered in Lecture 1 2022.7.11 Topics: 1. Two major themes: Abstraction and Hardware vs Software 2. A computer system 3. Level of Transfomation","title":"Chapter 1 Introduction"},{"location":"ICS/ICS-1/#two-major-themes","text":"","title":"Two major themes"},{"location":"ICS/ICS-1/#abstraction","text":"Too much or too tedious low-level details are abstracted into high-level interfaces that are easy to understand and use, thereby improving efficiency. Example You get in a taxi and you tell the driver to go to the airport. By contrast you can tell the driver each step like making a right turn, going down this street ten blocks and so on, which is not efficienct at all. However if you just tell him to go to the airport, then things are done. There is an underlying assumption, when everything about the detail is just fine. If we want to combine multiple components into a larger system, we should be careful about the components below the abstractions.","title":"Abstraction"},{"location":"ICS/ICS-1/#hardware-vs-software","text":"Both are important.","title":"Hardware vs Software"},{"location":"ICS/ICS-1/#a-computer-system","text":"CPU : operating data MEM : storage or memory Input & output devices \uff08I/O) Input: By typing input informations to CPU(keyboard) Output: Show the outcome done by CPU on monitor","title":"A computer system"},{"location":"ICS/ICS-1/#level-of-transfomation","text":"problem(in natural languages)->electrons by a sequence of transformation called level of transformation Problem (Natural language) Algorithm (eliminate ambiguity) Program (Python, C++, ...) Instruction set architecture(ISA) Micro-architecture Logic circuit Electronic circuit Electrons","title":"Level of Transfomation"},{"location":"ICS/ICS-1/#problem","text":"Natural languages may have ambiguity. Example \"\u5b89\" can mean peace(a woman in a house.), safety(\u516c\u5b89 police), contentment while it can also mean inexpensive, cheap in Japenese. \u201c\u4e1c\u897f\u201d means direction east and west, while it also means item, which may cause ambiguity. However, The statement of the problem should have No Ambiguity .","title":"problem"},{"location":"ICS/ICS-1/#algorithm","text":"Algorithm is a procedure step by step. definite, means no ambiguity. effective computability(\u53ef\u884c\u7684), means every step can be successfully carried out. finiteness, means the procedure will terminate.","title":"Algorithm"},{"location":"ICS/ICS-1/#programs","text":"Transform the algorithm into a computer program in one of the programming languages precisely. high-level languages: they are independent of the computer on which the programs will execute. We say the language is\u201cmachine independent.(Python, C++,...) low-level languages: they are tied to the computer on which the programs will execute. There is generally one such low-level language for each computer. That language is called the assembly language for that computer.(x86)","title":"programs"},{"location":"ICS/ICS-1/#instruction-set-architectureisa","text":"ISA is the interface between software(program) and hardware. Example \u6c7d\u8f66\u7684 ISA \u5c31\u662f\u4eba\u9700\u8981\u77e5\u9053\u4ed6\u80fd\u8ba9\u8f66\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u8f66\u9700\u8981\u505a\u5230\u4eba\u6307\u5b9a\u7684\u4efb\u52a1\u7684\u89c4\u8303\u3002 \u5bf9\u4e8e\u4e00\u8f86\u8f66\u7684\u8e0f\u677f\uff0c\u4eba\u77e5\u9053\u5982\u679c\u4ed6\u8e29\u4e0b\u53bb\uff0c\u90a3\u4e48\u8fd9\u8f86\u8f66\u4f1a\u5239\u8f66\u3002\u8f66\u77e5\u9053\u5982\u679c\u8e0f\u677f\u53d7\u5230\u4e86\u538b\u529b\uff0c\u8f66\u7684\u786c\u4ef6\u4f1a\u8ba9\u8f66\u505c\u4e0b\u3002ISA \u7684\u4f5c\u7528\u5c31\u662f\u5c06\u4eba\u8e29\u5239\u8f66\u548c\u8f66\u505c\u4e0b\u5bf9\u5e94\u8d77\u6765\u3002 e.g. x86(1979 8086, 286, 386, 486), Power-PC, Sparc ISA contains: opcode: is used to describe operation data type: a representation of operand . addressing mode: mechanism that computer can use to find the address of the operands.(\u5bfb\u5740\u6a21\u5f0f) Address ability: how many bytes per memory-slot","title":"Instruction Set Architecture(ISA)"},{"location":"ICS/ICS-1/#microarchitecture","text":"Example \u6240\u6709\u7684\u6c7d\u8f66\u90fd\u6709\u76f8\u540c\u7684 ISA\uff0c\u4f8b\u5982\u6240\u6709\u7684\u6c7d\u8f66\u4e2d\u4e09\u4e2a\u8e0f\u677f\u7684\u5b9a\u4e49\u5b8c\u5168\u76f8\u540c\uff0c\u5373\u4e2d\u95f4\u7684\u662f\u5239\u8f66\u3001\u53f3\u8fb9\u7684\u662f\u6cb9\u95e8\u3001\u5de6\u8fb9\u7684\u662f\u79bb\u5408\u5668\u3002 \u800c\u5c06 ISA \u5b9e\u73b0\u7684\u5177\u4f53\u7ec4\u7ec7\uff08\u5fae\u7ed3\u6784\uff09\u662f\u6307\u8f66\u76d6\u677f\u4e0b\u7684\u201c\u5185\u5bb9\u201d\u3002\u6240\u6709\u7684\u6c7d\u8f66\uff0c\u5176\u5236\u9020\u548c\u6a21\u578b\u90fd\u4e0d\u5c3d\u76f8\u540c\uff0c\u8fd9\u53d6\u51b3\u4e8e\u8bbe\u8ba1\u8005\u5728\u5236\u9020\u4e4b\u524d\u6240\u505a\u7684\u6743\u8861\u51b3\u7b56\uff0c\u5982\u6709\u7684\u5236\u52a8\u7cfb\u7edf\u91c7\u7528\u5239\u8f66\u7247\uff0c\u6709\u7684\u91c7\u7528\u5236\u52a8\u9f13\uff1b\u6709\u7684\u662f\u516b\u7f38\u53d1\u52a8\u673a\uff0c\u6709\u7684\u662f\u516d\u7f38\uff0c\u8fd8\u6709\u7684\u662f\u56db\u7f38\uff1b\u6709\u7684\u6709\u6da1\u8f6e\u589e\u538b\uff0c\u6709\u7684\u6ca1\u6709\u3002\u6211\u4eec\u79f0\u8fd9\u4e9b\u5dee\u5f02\u6027\u7684\u7ec6\u8282\u4e3a\u4e00\u4e2a\u7279\u5b9a\u6c7d\u8f66\u7684\u201c\u5fae\u7ed3\u6784\u201d\uff0c\u5b83\u4eec\u53cd\u6620\u4e86\u8bbe\u8ba1\u8005\u5728\u6210\u672c\u548c\u6027\u80fd\u4e4b\u95f4\u6240\u505a\u7684\u6743\u8861\u51b3\u7b56\u3002 e.g. \u5bf9\u540c\u6837\u6307\u4ee4\u96c6 x86, \u4ed6\u7684\u5fae\u7ed3\u6784\u4ece 8086, 80286, 80386, 80486...\u76f4\u5230\u5982\u4eca\u7684\u7684 Skylake. Note ISA \u5c06\u6211\u4eec\u7684\u7a0b\u5e8f(language)\u8f6c\u5316\u4e3a 01 \u5b57\u7b26\u4e32(\u7c7b\u4f3c\u4e8e\u6c47\u7f16\u4e2d\u7684\u673a\u5668\u7801 \u5982E8 01\u4ee3\u8868jmp)\uff0c\u800c\u5fae\u7ed3\u6784\u662f\u5176\u5bf9\u5e94\u7684\u7269\u7406\u5b9e\u73b0(\u7535\u8def)\u3002 \u56e0\u6b64\u5bf9\u4e8e\u540c\u6837\u7684 01 \u5b57\u7b26\u4e32\uff0c\u5176\u5b9e\u73b0\u7684\u529f\u80fd\u76f8\u540c\uff0c\u4f46\u53ef\u4ee5\u6709\u5404\u79cd\u4e0d\u540c\u7684\u7269\u7406\u5b9e\u73b0\uff1b\u4f46\u4e00\u5957\u5fae\u7ed3\u6784\u53ea\u80fd\u5b9e\u73b0\u4e00\u7c7b ISA. \u2014\u2014by tsjj Logic Circuit and devices will be discussed later.","title":"Microarchitecture"},{"location":"ICS/ICS-10/","text":"Chapter 10 Calculator \u00b6 Abstract Covered in Lecture 10, 2022.7.21 Topics:","title":"Chapter 10 Calculator"},{"location":"ICS/ICS-10/#chapter-10-calculator","text":"Abstract Covered in Lecture 10, 2022.7.21 Topics:","title":"Chapter 10 Calculator"},{"location":"ICS/ICS-2/","text":"Chapter 2 Bits, Data Types and Operations \u00b6 Abstract Covered in Lecture 1 2022.7.11 and Lecture 2 2022.7.12 Topics: 1. the bit binary digit codes 2. data type(unsigned integer, signed integer, logical variable, float number, ASCII) n bits, can represent \\(2^n\\) numbers, ranging from 0 to \\(2^{n-1}\\) Bits, Bytes \u00b6 bit: only 1/0 byte: 1 byte = 8 bits Data Type \u00b6 Integer \u00b6 Unsigned Integer \u00b6 n bits, can represent \\(2^n\\) numbers. range: \\([0,2^{n-1}]\\) Signed Integer \u00b6 signed-magnitude(\u539f\u7801): a leading 0 signifies a positive integer, a leading 1 signify a negative integer. In a 4-bit example, \\(0110=6,\\ 1110=-6\\) ,can represent \\([-7, 7]\\) . It has the problem of \"positive zero\" and \"negative zero\". 1's Complement(\u53cd\u7801): For a non-negative number, its opposite number is obtained after bitwise inversion. In a 4-bit example, \\(0110=6,\\ 1001=-6\\) , can represent [-7, 7], also has the problem of \"positive zero\" and \"negative zero\". It has also the problem above. 2's Complement(\u8865\u7801) : The highest bit of the 2's complement is the sign bit. The sign bit is 0 for non-negative numbers, and 1 for negative numbers. For an n-bit signed number, the weight of the sign bit is \\(-2^{n-1}\\) . range: \\([-2^{n-1},2^{n-1}-1]\\) . Obtain 2's Complement: \u6309\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00 Extension sign extension: Fill sign bit when extending.(\u4e0d\u4f1a\u6539\u53d8\u6570\u5b57\u5927\u5c0f) zero extension: Fill 0 when extending. Example \u4e24\u4e2a\u6570 0100 1100 \u548c 1011. 0100 1100(76) + 1011(-5) = 11111011 \u4f46 11111011 != 71 \u56e0\u4e3a\u4e24\u4e2a\u6570\u5b57\u957f\u5ea6\u4e0d\u540c\uff0c\u8981\u5bf91011\u7b26\u53f7\u6269\u5145\u4e3a 1111 1011(-5)\uff0c\u518d\u76f8\u52a0\u5373\u53ef\u3002 Overflow The only possible overflow situations: positive + positive == negative, that is, carry to the sign bit, and the sign bit becomes 1 after adding negative + negative == positive\uff0cthe sign bit becomes 0 after adding. Conversion between binary and decimal \u75282\u4e58\u5341\u8fdb\u5236\u5c0f\u6570\uff0c\u5c06\u79ef\u7684\u6574\u6570\u90e8\u5206\u53d6\u51fa\uff0c\u518d\u7528 2 \u4e58\u4f59\u4e0b\u7684\u5c0f\u6570\u90e8\u5206\uff0c\u518d\u5c06\u79ef\u7684\u6574\u6570\u90e8\u5206\u53d6\u51fa\uff0c\u5982\u6b64\u76f4\u5230\u79ef\u4e2d\u7684\u6574\u6570\u90e8\u5206\u4e3a 0/1\uff0c\u6b64\u65f6 0/1 \u4e3a\u4e8c\u8fdb\u5236\u7684\u6700\u540e\u4e00\u4f4d\u3002\u6216\u8005\u8fbe\u5230\u6240\u8981\u6c42\u7684\u7cbe\u5ea6\u4e3a\u6b62\u3002 \u7136\u540e\u628a\u53d6\u51fa\u7684\u6574\u6570\u90e8\u5206\u6309\u987a\u5e8f\u6392\u5217\u8d77\u6765\uff0c\u5148\u53d6\u7684\u6574\u6570\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u5c0f\u6570\u7684\u9ad8\u4f4d\u6709\u6548\u4f4d\uff0c\u540e\u53d6\u7684\u6574\u6570\u4f5c\u4e3a\u4f4e\u4f4d\u6709\u6548\u4f4d\u3002 Logical Variables \u00b6 bit vector: number string of 0 or 1. functions: AND, OR, Exclusive-OR (XOR), Equivalence, NAND, NOR Info \\(X\\cdot Y\\Leftrightarrow X\\ AND\\ Y\\) \\(X+Y\\Leftrightarrow X\\ OR\\ Y\\) \\(X\\oplus Y\\Leftrightarrow X\\ XOR\\ Y\\) \\(\\overline X \\Leftrightarrow NOT\\ X\\) Be careful of the diffrence of +(AND) and +(plus). Floating Point \u00b6 S exp frac Float 1 8 23 Double 1 11 52 Normalized form: \\(N=(-1)^S\\times M\\times 2^E\\) S: sign. \\(S=1\\) indicates the number is negative. M: \u5c3e\u6570. Normally, \\(M=1.frac\\) . E: \u9636\u7801. Normally, \\(E=exp-Bias\\) where \\(Bias=127\\) for floating point numbers. \\(Bias = 1023\\) for double. Note \u5f53 \\(exp=0\\) \u65f6, \u89c4\u5b9a \\(M=0.frac\\) . \u5176\u4e2d \\(frac=0\\) \u65f6, \u8868\u793a\u7684\u6570\u5b57\u4e3a 0.(\u53ef\u80fd\u6709 +0/-0) \u5f53 \\(exp=1111\\ 1111\\) \u65f6 \u82e5 \\(frac=0\\) , \u5219\u8868\u793a \\(+\\inf /\\) \\(-\\inf\\) . \u82e5 \\(frac\\neq 0\\) , \u5219\u8868\u793a NaN(Not a number). e.g. \\(1/0, \\inf/\\inf\\) . How to represent decimal number in the floating point type? Convert decimal to binary. Convert binary to floating point. ASCII Code \u00b6 Ameican Standard Code for Informationo Interchange. Hexadecimal Notation \u00b6 convert 4(resp. 3) binary bits to 1 hexadecimal(resp. octal) bits. \\(A=1010,\\ B=1011,\\ C=1100,\\ D=1101,\\ E=1110,\\ F=1111\\)","title":"Bits, Data Types and Operations"},{"location":"ICS/ICS-2/#chapter-2-bits-data-types-and-operations","text":"Abstract Covered in Lecture 1 2022.7.11 and Lecture 2 2022.7.12 Topics: 1. the bit binary digit codes 2. data type(unsigned integer, signed integer, logical variable, float number, ASCII) n bits, can represent \\(2^n\\) numbers, ranging from 0 to \\(2^{n-1}\\)","title":"Chapter 2 Bits, Data Types and Operations"},{"location":"ICS/ICS-2/#bits-bytes","text":"bit: only 1/0 byte: 1 byte = 8 bits","title":"Bits, Bytes"},{"location":"ICS/ICS-2/#data-type","text":"","title":"Data Type"},{"location":"ICS/ICS-2/#integer","text":"","title":"Integer"},{"location":"ICS/ICS-2/#unsigned-integer","text":"n bits, can represent \\(2^n\\) numbers. range: \\([0,2^{n-1}]\\)","title":"Unsigned Integer"},{"location":"ICS/ICS-2/#signed-integer","text":"signed-magnitude(\u539f\u7801): a leading 0 signifies a positive integer, a leading 1 signify a negative integer. In a 4-bit example, \\(0110=6,\\ 1110=-6\\) ,can represent \\([-7, 7]\\) . It has the problem of \"positive zero\" and \"negative zero\". 1's Complement(\u53cd\u7801): For a non-negative number, its opposite number is obtained after bitwise inversion. In a 4-bit example, \\(0110=6,\\ 1001=-6\\) , can represent [-7, 7], also has the problem of \"positive zero\" and \"negative zero\". It has also the problem above. 2's Complement(\u8865\u7801) : The highest bit of the 2's complement is the sign bit. The sign bit is 0 for non-negative numbers, and 1 for negative numbers. For an n-bit signed number, the weight of the sign bit is \\(-2^{n-1}\\) . range: \\([-2^{n-1},2^{n-1}-1]\\) . Obtain 2's Complement: \u6309\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00 Extension sign extension: Fill sign bit when extending.(\u4e0d\u4f1a\u6539\u53d8\u6570\u5b57\u5927\u5c0f) zero extension: Fill 0 when extending. Example \u4e24\u4e2a\u6570 0100 1100 \u548c 1011. 0100 1100(76) + 1011(-5) = 11111011 \u4f46 11111011 != 71 \u56e0\u4e3a\u4e24\u4e2a\u6570\u5b57\u957f\u5ea6\u4e0d\u540c\uff0c\u8981\u5bf91011\u7b26\u53f7\u6269\u5145\u4e3a 1111 1011(-5)\uff0c\u518d\u76f8\u52a0\u5373\u53ef\u3002 Overflow The only possible overflow situations: positive + positive == negative, that is, carry to the sign bit, and the sign bit becomes 1 after adding negative + negative == positive\uff0cthe sign bit becomes 0 after adding. Conversion between binary and decimal \u75282\u4e58\u5341\u8fdb\u5236\u5c0f\u6570\uff0c\u5c06\u79ef\u7684\u6574\u6570\u90e8\u5206\u53d6\u51fa\uff0c\u518d\u7528 2 \u4e58\u4f59\u4e0b\u7684\u5c0f\u6570\u90e8\u5206\uff0c\u518d\u5c06\u79ef\u7684\u6574\u6570\u90e8\u5206\u53d6\u51fa\uff0c\u5982\u6b64\u76f4\u5230\u79ef\u4e2d\u7684\u6574\u6570\u90e8\u5206\u4e3a 0/1\uff0c\u6b64\u65f6 0/1 \u4e3a\u4e8c\u8fdb\u5236\u7684\u6700\u540e\u4e00\u4f4d\u3002\u6216\u8005\u8fbe\u5230\u6240\u8981\u6c42\u7684\u7cbe\u5ea6\u4e3a\u6b62\u3002 \u7136\u540e\u628a\u53d6\u51fa\u7684\u6574\u6570\u90e8\u5206\u6309\u987a\u5e8f\u6392\u5217\u8d77\u6765\uff0c\u5148\u53d6\u7684\u6574\u6570\u4f5c\u4e3a\u4e8c\u8fdb\u5236\u5c0f\u6570\u7684\u9ad8\u4f4d\u6709\u6548\u4f4d\uff0c\u540e\u53d6\u7684\u6574\u6570\u4f5c\u4e3a\u4f4e\u4f4d\u6709\u6548\u4f4d\u3002","title":"Signed Integer"},{"location":"ICS/ICS-2/#logical-variables","text":"bit vector: number string of 0 or 1. functions: AND, OR, Exclusive-OR (XOR), Equivalence, NAND, NOR Info \\(X\\cdot Y\\Leftrightarrow X\\ AND\\ Y\\) \\(X+Y\\Leftrightarrow X\\ OR\\ Y\\) \\(X\\oplus Y\\Leftrightarrow X\\ XOR\\ Y\\) \\(\\overline X \\Leftrightarrow NOT\\ X\\) Be careful of the diffrence of +(AND) and +(plus).","title":"Logical Variables"},{"location":"ICS/ICS-2/#floating-point","text":"S exp frac Float 1 8 23 Double 1 11 52 Normalized form: \\(N=(-1)^S\\times M\\times 2^E\\) S: sign. \\(S=1\\) indicates the number is negative. M: \u5c3e\u6570. Normally, \\(M=1.frac\\) . E: \u9636\u7801. Normally, \\(E=exp-Bias\\) where \\(Bias=127\\) for floating point numbers. \\(Bias = 1023\\) for double. Note \u5f53 \\(exp=0\\) \u65f6, \u89c4\u5b9a \\(M=0.frac\\) . \u5176\u4e2d \\(frac=0\\) \u65f6, \u8868\u793a\u7684\u6570\u5b57\u4e3a 0.(\u53ef\u80fd\u6709 +0/-0) \u5f53 \\(exp=1111\\ 1111\\) \u65f6 \u82e5 \\(frac=0\\) , \u5219\u8868\u793a \\(+\\inf /\\) \\(-\\inf\\) . \u82e5 \\(frac\\neq 0\\) , \u5219\u8868\u793a NaN(Not a number). e.g. \\(1/0, \\inf/\\inf\\) . How to represent decimal number in the floating point type? Convert decimal to binary. Convert binary to floating point.","title":"Floating Point"},{"location":"ICS/ICS-2/#ascii-code","text":"Ameican Standard Code for Informationo Interchange.","title":"ASCII Code"},{"location":"ICS/ICS-2/#hexadecimal-notation","text":"convert 4(resp. 3) binary bits to 1 hexadecimal(resp. octal) bits. \\(A=1010,\\ B=1011,\\ C=1100,\\ D=1101,\\ E=1110,\\ F=1111\\)","title":"Hexadecimal Notation"},{"location":"ICS/ICS-3/","text":"Chapter 3 Digital Logic Structures \u00b6 Abstract Covered in Lecture 2, 2022.7.12 and Lecture 3, 2022.7.13 Topics: 1. Transistors 2. Transistors \u00b6 N-type Gate \u901a 1.2V \u7684\u65f6\u5019\u5bfc\u7ebf\u63a5\u901a(short circuit), \u901a 0V \u65f6\u5bfc\u7ebf\u65ad\u5f00(open circuit). \u5176\u4e2d Gate \u79f0\u4f5c\u6805\u6781, Drain \u79f0\u4f5c\u6f0f\u6781, Source \u79f0\u4f5c\u6e90\u6781. P-type Gate \u901a 0V \u7684\u65f6\u5019\u5bfc\u7ebf\u63a5\u901a, \u901a 1.2V \u65f6\u5bfc\u7ebf\u65ad\u5f00. Note P-type: P\u65adN\u901a N-type: N\u65adP\u901a \u5176\u4e2d P \u6307 Positive(1.2V/\u63a5\u7535\u6e90\u6b63\u6781) \u5176\u4e2d N \u6307 Negtive(0V/\u63a5\u5730/\u63a5\u7535\u6e90\u8d1f\u6781) Logical Gates \u00b6 \u5176\u4e2d\u53ef\u4ee5\u76f4\u63a5\u7528\u5c0f\u7a7a\u5fc3\u5706\u8868\u793a\"\u975e\". The Not Gate(Inverter) \u00b6 In Out 0 1 1 0 OR and NOR Gates \u00b6 NOR Gate \u00b6 \u4e3a\u4ec0\u4e48\u4e0d\u53ef\u4ee5\u76f4\u63a5\u5c06 P-type \u76f4\u63a5\u63a5\u5730? \u8fd9\u6837 C \u59cb\u7ec8\u548c\u5730\u63a5\u89e6, \u5f53 A, B \u7684\u503c\u5747\u4e3a 0 \u65f6, \u4e0a\u65b9\u4e5f\u4f1a\u63a5\u901a. \u8fd9\u6837 C \u4f1a\u540c\u65f6\u548c\u9ad8\u4f4e\u7535\u538b\u63a5\u901a. may burn the house!(by Patt) OR Gate \u00b6 A(in) B(in) C(NOR) D(OR) 0 0 1 0 0 1 0 1 1 0 0 1 1 1 0 1 Question \u4f46 P \u578b mos \u6676\u4f53\u7ba1\u7684\u6e90\u6781\u5fc5\u987b\u63a5\u6b63\u6781, \u6f0f\u6781\u5fc5\u987b\u63a5\u8d1f\u6781. \u5426\u5219\u4f1a\u6709\u4f20\u8f93\u7535\u538b\u635f\u5931. AND and NAND Gates \u00b6 A B C(NAND) D(AND) 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 1 Combinational Logic Circuits \u00b6 property: only about Right now , means their result is independent on the any past information stored in memory. Decoder(\u8bd1\u7801\u5668) \u00b6 n input, \\(2^n\\) outputs, only one output is logically 1 correspounding to the input pattern. Mux(Multiplexer \u6570\u636e\u9009\u62e9\u5668) \u00b6 The funtion of a mux is to select only one of the input and connect it to the output. Example \\(S=0\\) , C \u8f93\u51fa A \u7684\u503c; \\(S=1\\) , C \u8f93\u51fa B \u7684\u503c. \u7b80\u5199\u4e3a: In general, a mux consist of \\(2^n\\) inputs and n select lines. \\(2^n\\) \u4e2a\u8f93\u5165\u5bf9\u5e94\u5404\u4e0d\u76f8\u540c\u7684\u9009\u62e9\u7ebf\u7684\u7ec4\u5408(n \u6761\u7ebf\u6709 \\(2^n\\) \u79cd\u7ec4\u5408), \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u4e2a S(n bits), \u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u8f93\u5165\u88ab\u9009\u4e2d. Info \u7ebf\u4e0a\u7684\u4e00\u6487\u52a0\u6570\u5b57\u8868\u793a\u4fe1\u53f7\u7684\u4f4d\u6570. e.g. \u56fe\u4e2d ABCD \u90fd\u662f\u4e00\u4f4d\u7684\u8f93\u5165\u4fe1\u53f7, \u4f46\u9009\u62e9\u4fe1\u53f7 S \u4e3a\u4e24\u4f4d. One-Bit Adder(Full Adder) \u00b6 \\(A_i\\) \\(B_i\\) \\(C_i\\) \\(C_{i+1}\\) \\(S_i\\) 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 1 1 0 1 0 0 0 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1 \u5176\u4e2d \\(A_i, B_i\\) \u8868\u793a A/B \u7684\u7b2c i \u4f4d, \\(S_i\\) \u8868\u793a\u6267\u884c\u52a0\u6cd5\u4e4b\u540e\u7b2c i \u4f4d\u7684\u503c, \\(C_{i+1}\\) \u8868\u793a\u662f\u5426\u6709\u8fdb\u4f4d. A circuit for adding two 4-bit binary numbers using block above. \u5176\u4e2d,\u6700\u53f3\u8fb9\u7684\u4e00\u4e2a\u7535\u8def\u76f8\u5f53\u4e8e\u662f\u534a\u52a0\u5668(half adder), \u56e0\u4e3a\u4ed6\u76f8\u5f53\u4e8e\u6ca1\u6709\u8fdb\u4f4d(carry=0), \u53e6\u5916\u4e09\u4e2a\u7535\u8def\u662f\u5168\u52a0\u5668. PLA(the Programmable Logic Array) \u00b6 \u5176\u4e2d \\(2^n\\) \u4e2a\u8f93\u5165, \u7ecf\u8fc7 Decoder \u5f97\u5230\u8f93\u5165\u7684\u7ec4\u5408. \u6700\u540e\u5f97\u5230\u6211\u4eec\u5e0c\u671b\u751f\u6210\u7684\u51fd\u6570. Logic Completeness \u00b6 {AND, OR, NOT} is logically complete because we can buile a circuit to carry out the specification of any truth table without other kind of gate(by PLA). !!! Question Is NAND logically completeness? Yes. \\(P\\ NAND\\ Q=NOT (P\\ AND\\ Q)\\) so \\(P\\ NAND\\ P=NOT\\ P\\) , \\(P\\ AND\\ Q=NOT(P\\ NAND\\ Q)\\) , \\(P\\ OR\\ Q=(NOT\\ P)\\ NAND (NOT\\ Q)\\) Basic Storage Elements \u00b6 The R-S Latch(RS \u9501\u5b58\u5668) \u00b6 \u5176\u4e2d a \u65e2\u662f\u6211\u4eec\u5b58\u50a8\u7684\u503c, \u4e5f\u662f\u6211\u4eec\u8981\u8f93\u51fa\u7684\u503c(a \u8f93\u51fa Q, b \u8f93\u51fa\u975e Q). \u5de5\u4f5c\u8fc7\u7a0b: \u8d77\u521d \\(S=R=1\\) , \u5904\u4e8e\u6df7\u6c8c\u72b6\u6001, \u4e0d\u77e5 a/b \u7684\u503c. \u4f7f\u7528\u65f6: \u628a S(set) \u62e8\u4e00\u4e0b\u5230 0, \u5219 a->1, \u6210\u529f\u5c06 1 \u5b58\u5165. \u518d\u628a S->1, \u6b64\u65f6 \\(S=R=1\\) \u5904\u4e8e\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001, \u53ea\u8981 S/R \u4e0d\u6539\u53d8, \u5b58\u50a8\u7684\u503c\u5c31\u4e0d\u4f1a\u6539\u53d8. \u628a R(reset) \u628a 0, \u5219 a->0, \u6210\u529f\u5c06 0 \u5b58\u5165. \u518d\u628a R->1, \u56de\u5230\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001. \u975e\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001: \\(S=R=0\\) , \u6df7\u6c8c\u72b6\u6001, \u800c\u4e14\u6b64\u65f6 \\(a=b=1\\) , \u4e0d\u6ee1\u8db3 Q \u4e0e\u975e Q \u7684\u5b9a\u4e49, \u6b64\u65f6\u7535\u8def\u7684\u8f93\u51fa\u53d6\u51b3\u7535\u8def\u7684\u6027\u8d28. R S Q \u975eQ 1 1 ? ? Unknown 0 1 1 0 Set 1 1 1 0 The latch \"remenber\" the value 1 0 0 1 Reset 1 1 0 1 The latch \"remenber\" the value 0 0 1 1 Both go to high 1 1 ? ? Unknown The Gated D Latch(D \u9501\u5b58\u5668) \u00b6 WE: Write Enable. WE is asserted(WE=1, can write): D->1, S=1 R=0, 1 is stored. D->0, S=0 R=1, 0 is stored. Thus, we can think that the Gated D Latch store the value of D. WE is not asserted(WE=0, only read): R=1 S=1, so whether D is 0 or 1 it cannot change the stored value. The Concept of Memory \u00b6 Address Space \u00b6 We refer to the unique identifier associated with each memory location as its address . We refer to the total number of uniquely identifiable locations as the memory\u2019s address space . Addressability \u00b6 We refer to the number of bits of information stored in each location as its addressability . For \\(2^n\\) -by-m-bit memory, its address space is \\(2^n\\) while its addressability is m. Example \u5047\u8bbe\u7389\u6e56\u4e03\u5e62 6 \u697c\u4e3a\u4e00\u5757\u5185\u5b58, \u5176\u4e2d\u8fd9\u4e00\u697c\u4e00\u5171\u6709 20 \u95f4\u5bdd\u5ba4, \u8fd9\u5c31\u662f\u5185\u5b58\u7a7a\u95f4.(\u56e0\u4e3a\u6bcf\u95f4\u5bdd\u5ba4\u90fd\u6709\u72ec\u4e00\u65e0\u4e8c\u7684\u5bdd\u5ba4\u53f7) \u800c\u6bcf\u95f4\u5bdd\u5ba4\u90fd\u662f\u56db\u4eba\u95f4, \u56e0\u6b64\u53ef\u5bfb\u5740\u80fd\u529b\u662f 4, \u8868\u793a\u6700\u5c0f\u7684\u5bfb\u5740\u5355\u5143. A \\(2^2\\) -by-3-Bit Memory \u5176\u4e2d A[] \u8868\u793a\u5730\u5740, D[] \u8868\u793a\u6570\u636e.(A[1:0] \u53ef\u4ee5\u7406\u89e3\u4e3a Python \u91cc\u7684 list) \u4ece A[1:0] \u4e2d\u8f93\u5165\u5730\u5740, \u901a\u8fc7 Decoder \u5bf9\u5e94\u67d0\u4e00\u884c. \u5176\u4e2d\u6bcf\u4e00\u884c\u4e3a 3 bits, \u56e0\u6b64\u6709\u4e09\u4e2a\u5b58\u50a8\u5668. WE=0 \u65f6\u8bfb\u53d6\u6570\u636e, \u6b64\u65f6\u6bcf\u4e2a bit \u4e2d\u7684\u5b58\u50a8\u5668(R=S=1, \u53ea\u80fd\u8bfb)\u5c06\u5176\u4e2d\u7684\u503c\u8bfb\u51fa, \u901a\u8fc7 mux \u6700\u540e\u8f93\u51fa\u51fa\u6765\u5f97\u5230 D[2:0]. WE=1 \u65f6\u5199\u5165\u6570\u636e, \u6b64\u65f6\u6bcf\u4e2a bit \u4e2d\u4e3a D\u9501\u5b58\u5668, \u7531\u4e0a\u6587\u53ef\u77e5\u4f1a\u76f4\u63a5\u5199\u5165 D \u7684\u503c, \u5373 \\(D_i[2:0]\\) . \u6b64\u65f6\u4e5f\u4f1a\u6709\u8f93\u51fa. Sequential Logic Circuits \u00b6 property: they contain store elements to keep track of prior history information. State \u00b6 The state of a system is a snapshot of all the relevant elements of the system at the moment the snapshot is taken. Finite State Machine \u00b6 A finite state machine contains: A finite number of states. A finite number of external inputs. A finite number of external outpus. An explicit specification of all state transitions. An explicit specification of what determines each external output value. Combination lock \u6211\u4eec\u9700\u8981\u4f9d\u6b21\u62e8\u5230 R3-L22-R13(L/R \u4ee3\u8868\u62e8\u7684\u65b9\u5411), \u9501\u624d\u80fd\u6253\u5f00. \u5426\u5219\u5982R13-L2-R\u4e5f\u662f\u4e0d\u80fd\u6253\u5f00\u9501\u7684. state machine: The Synchronous Finite State Machine \u00b6 In the example above, there is no fixed amount of time between successive inputs to the finite state machine, which means we can dial R3 and wait for a day then dail L22. (asynchoronous) However, computers work in synchronous way because the state transistions take place, one after the other, at identical fixed units of time. Example:A Danger Sign \u8d77\u521d, 1-5 \u53f7\u706f\u5904\u4e8e\u5173\u95ed. \u5f53\u5f00\u5173\u5904\u4e8e ON \u72b6\u6001\u65f6, \u7b2c\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u540e 1, 2 \u706f\u4eae; \u7b2c\u4e8c\u4e2a\u5355\u4f4d\u65f6\u95f4\u540e 3, 4 \u706f\u4eae; \u7b2c\u4e09\u4e2a\u5355\u4f4d\u65f6\u95f4\u540e, 5 \u706f\u4eae. \u72b6\u6001\u673a: \u5176\u5bf9\u5e94\u7684\u7535\u8def: \u5176\u4e2d store element 1 \u5b58\u50a8\u4f4e\u4f4d, element 2 \u5b58\u50a8\u9ad8\u4f4d. \u7531\u6b64\u5f97\u5230\u7684\u7ec4\u5408\u7535\u8def:(\u53ef\u901a\u8fc7\u771f\u503c\u8868\u5f97\u5230) But in the previous example, there is a question: The process is so fast that the input of next cyle will be the output of the last cycle almost immediately. So we have no idea what the state of the finite state machine woule be for the next clock cycle. Master-Slave Flip-flop \u00b6 process: In the first half A(WE=1), the slave read the value from the master and update the value by combinational circuits(Q) while the master remain the same. In the second half B(WE=0), the value updated by combinational circuit is stored in master while the slave remain the same. Timing diagram the slave load the value from the master. the combinational logic finishes its update/calculation(proper delay). So it enters the next cycle. the master load the updated value, so it also enters the next value. repeat 1","title":"Digital Logic Structures"},{"location":"ICS/ICS-3/#chapter-3-digital-logic-structures","text":"Abstract Covered in Lecture 2, 2022.7.12 and Lecture 3, 2022.7.13 Topics: 1. Transistors 2.","title":"Chapter 3 Digital Logic Structures"},{"location":"ICS/ICS-3/#transistors","text":"N-type Gate \u901a 1.2V \u7684\u65f6\u5019\u5bfc\u7ebf\u63a5\u901a(short circuit), \u901a 0V \u65f6\u5bfc\u7ebf\u65ad\u5f00(open circuit). \u5176\u4e2d Gate \u79f0\u4f5c\u6805\u6781, Drain \u79f0\u4f5c\u6f0f\u6781, Source \u79f0\u4f5c\u6e90\u6781. P-type Gate \u901a 0V \u7684\u65f6\u5019\u5bfc\u7ebf\u63a5\u901a, \u901a 1.2V \u65f6\u5bfc\u7ebf\u65ad\u5f00. Note P-type: P\u65adN\u901a N-type: N\u65adP\u901a \u5176\u4e2d P \u6307 Positive(1.2V/\u63a5\u7535\u6e90\u6b63\u6781) \u5176\u4e2d N \u6307 Negtive(0V/\u63a5\u5730/\u63a5\u7535\u6e90\u8d1f\u6781)","title":"Transistors"},{"location":"ICS/ICS-3/#logical-gates","text":"\u5176\u4e2d\u53ef\u4ee5\u76f4\u63a5\u7528\u5c0f\u7a7a\u5fc3\u5706\u8868\u793a\"\u975e\".","title":"Logical Gates"},{"location":"ICS/ICS-3/#the-not-gateinverter","text":"In Out 0 1 1 0","title":"The Not Gate(Inverter)"},{"location":"ICS/ICS-3/#or-and-nor-gates","text":"","title":"OR and NOR Gates"},{"location":"ICS/ICS-3/#nor-gate","text":"\u4e3a\u4ec0\u4e48\u4e0d\u53ef\u4ee5\u76f4\u63a5\u5c06 P-type \u76f4\u63a5\u63a5\u5730? \u8fd9\u6837 C \u59cb\u7ec8\u548c\u5730\u63a5\u89e6, \u5f53 A, B \u7684\u503c\u5747\u4e3a 0 \u65f6, \u4e0a\u65b9\u4e5f\u4f1a\u63a5\u901a. \u8fd9\u6837 C \u4f1a\u540c\u65f6\u548c\u9ad8\u4f4e\u7535\u538b\u63a5\u901a. may burn the house!(by Patt)","title":"NOR Gate"},{"location":"ICS/ICS-3/#or-gate","text":"A(in) B(in) C(NOR) D(OR) 0 0 1 0 0 1 0 1 1 0 0 1 1 1 0 1 Question \u4f46 P \u578b mos \u6676\u4f53\u7ba1\u7684\u6e90\u6781\u5fc5\u987b\u63a5\u6b63\u6781, \u6f0f\u6781\u5fc5\u987b\u63a5\u8d1f\u6781. \u5426\u5219\u4f1a\u6709\u4f20\u8f93\u7535\u538b\u635f\u5931.","title":"OR Gate"},{"location":"ICS/ICS-3/#and-and-nand-gates","text":"A B C(NAND) D(AND) 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 1","title":"AND and NAND Gates"},{"location":"ICS/ICS-3/#combinational-logic-circuits","text":"property: only about Right now , means their result is independent on the any past information stored in memory.","title":"Combinational Logic Circuits"},{"location":"ICS/ICS-3/#decoder","text":"n input, \\(2^n\\) outputs, only one output is logically 1 correspounding to the input pattern.","title":"Decoder(\u8bd1\u7801\u5668)"},{"location":"ICS/ICS-3/#muxmultiplexer","text":"The funtion of a mux is to select only one of the input and connect it to the output. Example \\(S=0\\) , C \u8f93\u51fa A \u7684\u503c; \\(S=1\\) , C \u8f93\u51fa B \u7684\u503c. \u7b80\u5199\u4e3a: In general, a mux consist of \\(2^n\\) inputs and n select lines. \\(2^n\\) \u4e2a\u8f93\u5165\u5bf9\u5e94\u5404\u4e0d\u76f8\u540c\u7684\u9009\u62e9\u7ebf\u7684\u7ec4\u5408(n \u6761\u7ebf\u6709 \\(2^n\\) \u79cd\u7ec4\u5408), \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u4e00\u4e2a S(n bits), \u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u8f93\u5165\u88ab\u9009\u4e2d. Info \u7ebf\u4e0a\u7684\u4e00\u6487\u52a0\u6570\u5b57\u8868\u793a\u4fe1\u53f7\u7684\u4f4d\u6570. e.g. \u56fe\u4e2d ABCD \u90fd\u662f\u4e00\u4f4d\u7684\u8f93\u5165\u4fe1\u53f7, \u4f46\u9009\u62e9\u4fe1\u53f7 S \u4e3a\u4e24\u4f4d.","title":"Mux(Multiplexer \u6570\u636e\u9009\u62e9\u5668)"},{"location":"ICS/ICS-3/#one-bit-adderfull-adder","text":"\\(A_i\\) \\(B_i\\) \\(C_i\\) \\(C_{i+1}\\) \\(S_i\\) 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 1 1 0 1 0 0 0 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1 \u5176\u4e2d \\(A_i, B_i\\) \u8868\u793a A/B \u7684\u7b2c i \u4f4d, \\(S_i\\) \u8868\u793a\u6267\u884c\u52a0\u6cd5\u4e4b\u540e\u7b2c i \u4f4d\u7684\u503c, \\(C_{i+1}\\) \u8868\u793a\u662f\u5426\u6709\u8fdb\u4f4d. A circuit for adding two 4-bit binary numbers using block above. \u5176\u4e2d,\u6700\u53f3\u8fb9\u7684\u4e00\u4e2a\u7535\u8def\u76f8\u5f53\u4e8e\u662f\u534a\u52a0\u5668(half adder), \u56e0\u4e3a\u4ed6\u76f8\u5f53\u4e8e\u6ca1\u6709\u8fdb\u4f4d(carry=0), \u53e6\u5916\u4e09\u4e2a\u7535\u8def\u662f\u5168\u52a0\u5668.","title":"One-Bit Adder(Full Adder)"},{"location":"ICS/ICS-3/#plathe-programmable-logic-array","text":"\u5176\u4e2d \\(2^n\\) \u4e2a\u8f93\u5165, \u7ecf\u8fc7 Decoder \u5f97\u5230\u8f93\u5165\u7684\u7ec4\u5408. \u6700\u540e\u5f97\u5230\u6211\u4eec\u5e0c\u671b\u751f\u6210\u7684\u51fd\u6570.","title":"PLA(the Programmable Logic Array)"},{"location":"ICS/ICS-3/#logic-completeness","text":"{AND, OR, NOT} is logically complete because we can buile a circuit to carry out the specification of any truth table without other kind of gate(by PLA). !!! Question Is NAND logically completeness? Yes. \\(P\\ NAND\\ Q=NOT (P\\ AND\\ Q)\\) so \\(P\\ NAND\\ P=NOT\\ P\\) , \\(P\\ AND\\ Q=NOT(P\\ NAND\\ Q)\\) , \\(P\\ OR\\ Q=(NOT\\ P)\\ NAND (NOT\\ Q)\\)","title":"Logic Completeness"},{"location":"ICS/ICS-3/#basic-storage-elements","text":"","title":"Basic Storage Elements"},{"location":"ICS/ICS-3/#the-r-s-latchrs","text":"\u5176\u4e2d a \u65e2\u662f\u6211\u4eec\u5b58\u50a8\u7684\u503c, \u4e5f\u662f\u6211\u4eec\u8981\u8f93\u51fa\u7684\u503c(a \u8f93\u51fa Q, b \u8f93\u51fa\u975e Q). \u5de5\u4f5c\u8fc7\u7a0b: \u8d77\u521d \\(S=R=1\\) , \u5904\u4e8e\u6df7\u6c8c\u72b6\u6001, \u4e0d\u77e5 a/b \u7684\u503c. \u4f7f\u7528\u65f6: \u628a S(set) \u62e8\u4e00\u4e0b\u5230 0, \u5219 a->1, \u6210\u529f\u5c06 1 \u5b58\u5165. \u518d\u628a S->1, \u6b64\u65f6 \\(S=R=1\\) \u5904\u4e8e\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001, \u53ea\u8981 S/R \u4e0d\u6539\u53d8, \u5b58\u50a8\u7684\u503c\u5c31\u4e0d\u4f1a\u6539\u53d8. \u628a R(reset) \u628a 0, \u5219 a->0, \u6210\u529f\u5c06 0 \u5b58\u5165. \u518d\u628a R->1, \u56de\u5230\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001. \u975e\u6b63\u5e38\u5de5\u4f5c\u72b6\u6001: \\(S=R=0\\) , \u6df7\u6c8c\u72b6\u6001, \u800c\u4e14\u6b64\u65f6 \\(a=b=1\\) , \u4e0d\u6ee1\u8db3 Q \u4e0e\u975e Q \u7684\u5b9a\u4e49, \u6b64\u65f6\u7535\u8def\u7684\u8f93\u51fa\u53d6\u51b3\u7535\u8def\u7684\u6027\u8d28. R S Q \u975eQ 1 1 ? ? Unknown 0 1 1 0 Set 1 1 1 0 The latch \"remenber\" the value 1 0 0 1 Reset 1 1 0 1 The latch \"remenber\" the value 0 0 1 1 Both go to high 1 1 ? ? Unknown","title":"The R-S Latch(RS \u9501\u5b58\u5668)"},{"location":"ICS/ICS-3/#the-gated-d-latchd","text":"WE: Write Enable. WE is asserted(WE=1, can write): D->1, S=1 R=0, 1 is stored. D->0, S=0 R=1, 0 is stored. Thus, we can think that the Gated D Latch store the value of D. WE is not asserted(WE=0, only read): R=1 S=1, so whether D is 0 or 1 it cannot change the stored value.","title":"The Gated D Latch(D \u9501\u5b58\u5668)"},{"location":"ICS/ICS-3/#the-concept-of-memory","text":"","title":"The Concept of Memory"},{"location":"ICS/ICS-3/#address-space","text":"We refer to the unique identifier associated with each memory location as its address . We refer to the total number of uniquely identifiable locations as the memory\u2019s address space .","title":"Address Space"},{"location":"ICS/ICS-3/#addressability","text":"We refer to the number of bits of information stored in each location as its addressability . For \\(2^n\\) -by-m-bit memory, its address space is \\(2^n\\) while its addressability is m. Example \u5047\u8bbe\u7389\u6e56\u4e03\u5e62 6 \u697c\u4e3a\u4e00\u5757\u5185\u5b58, \u5176\u4e2d\u8fd9\u4e00\u697c\u4e00\u5171\u6709 20 \u95f4\u5bdd\u5ba4, \u8fd9\u5c31\u662f\u5185\u5b58\u7a7a\u95f4.(\u56e0\u4e3a\u6bcf\u95f4\u5bdd\u5ba4\u90fd\u6709\u72ec\u4e00\u65e0\u4e8c\u7684\u5bdd\u5ba4\u53f7) \u800c\u6bcf\u95f4\u5bdd\u5ba4\u90fd\u662f\u56db\u4eba\u95f4, \u56e0\u6b64\u53ef\u5bfb\u5740\u80fd\u529b\u662f 4, \u8868\u793a\u6700\u5c0f\u7684\u5bfb\u5740\u5355\u5143. A \\(2^2\\) -by-3-Bit Memory \u5176\u4e2d A[] \u8868\u793a\u5730\u5740, D[] \u8868\u793a\u6570\u636e.(A[1:0] \u53ef\u4ee5\u7406\u89e3\u4e3a Python \u91cc\u7684 list) \u4ece A[1:0] \u4e2d\u8f93\u5165\u5730\u5740, \u901a\u8fc7 Decoder \u5bf9\u5e94\u67d0\u4e00\u884c. \u5176\u4e2d\u6bcf\u4e00\u884c\u4e3a 3 bits, \u56e0\u6b64\u6709\u4e09\u4e2a\u5b58\u50a8\u5668. WE=0 \u65f6\u8bfb\u53d6\u6570\u636e, \u6b64\u65f6\u6bcf\u4e2a bit \u4e2d\u7684\u5b58\u50a8\u5668(R=S=1, \u53ea\u80fd\u8bfb)\u5c06\u5176\u4e2d\u7684\u503c\u8bfb\u51fa, \u901a\u8fc7 mux \u6700\u540e\u8f93\u51fa\u51fa\u6765\u5f97\u5230 D[2:0]. WE=1 \u65f6\u5199\u5165\u6570\u636e, \u6b64\u65f6\u6bcf\u4e2a bit \u4e2d\u4e3a D\u9501\u5b58\u5668, \u7531\u4e0a\u6587\u53ef\u77e5\u4f1a\u76f4\u63a5\u5199\u5165 D \u7684\u503c, \u5373 \\(D_i[2:0]\\) . \u6b64\u65f6\u4e5f\u4f1a\u6709\u8f93\u51fa.","title":"Addressability"},{"location":"ICS/ICS-3/#sequential-logic-circuits","text":"property: they contain store elements to keep track of prior history information.","title":"Sequential Logic Circuits"},{"location":"ICS/ICS-3/#state","text":"The state of a system is a snapshot of all the relevant elements of the system at the moment the snapshot is taken.","title":"State"},{"location":"ICS/ICS-3/#finite-state-machine","text":"A finite state machine contains: A finite number of states. A finite number of external inputs. A finite number of external outpus. An explicit specification of all state transitions. An explicit specification of what determines each external output value. Combination lock \u6211\u4eec\u9700\u8981\u4f9d\u6b21\u62e8\u5230 R3-L22-R13(L/R \u4ee3\u8868\u62e8\u7684\u65b9\u5411), \u9501\u624d\u80fd\u6253\u5f00. \u5426\u5219\u5982R13-L2-R\u4e5f\u662f\u4e0d\u80fd\u6253\u5f00\u9501\u7684. state machine:","title":"Finite State Machine"},{"location":"ICS/ICS-3/#the-synchronous-finite-state-machine","text":"In the example above, there is no fixed amount of time between successive inputs to the finite state machine, which means we can dial R3 and wait for a day then dail L22. (asynchoronous) However, computers work in synchronous way because the state transistions take place, one after the other, at identical fixed units of time. Example:A Danger Sign \u8d77\u521d, 1-5 \u53f7\u706f\u5904\u4e8e\u5173\u95ed. \u5f53\u5f00\u5173\u5904\u4e8e ON \u72b6\u6001\u65f6, \u7b2c\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u540e 1, 2 \u706f\u4eae; \u7b2c\u4e8c\u4e2a\u5355\u4f4d\u65f6\u95f4\u540e 3, 4 \u706f\u4eae; \u7b2c\u4e09\u4e2a\u5355\u4f4d\u65f6\u95f4\u540e, 5 \u706f\u4eae. \u72b6\u6001\u673a: \u5176\u5bf9\u5e94\u7684\u7535\u8def: \u5176\u4e2d store element 1 \u5b58\u50a8\u4f4e\u4f4d, element 2 \u5b58\u50a8\u9ad8\u4f4d. \u7531\u6b64\u5f97\u5230\u7684\u7ec4\u5408\u7535\u8def:(\u53ef\u901a\u8fc7\u771f\u503c\u8868\u5f97\u5230) But in the previous example, there is a question: The process is so fast that the input of next cyle will be the output of the last cycle almost immediately. So we have no idea what the state of the finite state machine woule be for the next clock cycle.","title":"The Synchronous Finite State Machine"},{"location":"ICS/ICS-3/#master-slave-flip-flop","text":"process: In the first half A(WE=1), the slave read the value from the master and update the value by combinational circuits(Q) while the master remain the same. In the second half B(WE=0), the value updated by combinational circuit is stored in master while the slave remain the same. Timing diagram the slave load the value from the master. the combinational logic finishes its update/calculation(proper delay). So it enters the next cycle. the master load the updated value, so it also enters the next value. repeat 1","title":"Master-Slave Flip-flop"},{"location":"ICS/ICS-4/","text":"Chapter 4 The von Neumann Model \u00b6 Abstract Covered in Lecture 3, 2022.7.13 and Lecture 4, 2022.7.14 Topics: 1. The von Neumann Model 2. Brief introduction to the instruction in LC-3 Basic Components \u00b6 An important idea missing in Chapter 1: All computers containing the five parts are capable of computing exactly the same things given enough time and enough memory. The only difference is the time and memory. Note that CPU = Control and Processing Unit. Abstract PC \u6307\u5411\u8981\u6267\u884c\u7684\u547d\u4ee4(\u5730\u5740), IP \u5b58\u50a8\u5f53\u524d\u6267\u884c\u7684\u547d\u4ee4. Control Unit \u5411 Processing Unit \u53d1\u51fa\u4fe1\u53f7(\u5982\u6267\u884c\u52a0\u6cd5). Processing Unit \u8d1f\u8d23\u6267\u884c\u547d\u4ee4, \u5176\u4e2d TEMP \u4e3a\u5bc4\u5b58\u5668, \u901f\u5ea6\u76f8\u6bd4\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\u5feb\u5f88\u591a(\u56e0\u4e3a\u5185\u5b58\u5c5e\u4e8e CPU \u5916\u7684\u4e8b\u7269) Memory \u00b6 Memory is used to store information. Every memory location has an address asscoiated, and store a value in that location. Address Stored Value 0 .. 1 .. 2 4 3 .. 4 2 location 2 is called pointer variable. Address Space and Addressability \u00b6 just for review. Address space: The number of uniquely identifiable memory locations. Addressability: The number of bits stored in each memory location. Read from the memory \u00b6 Load the address you want read to MAR (Memory's Address Register), then interrogate the memory. The information stored in the location having that address will be placed in the MDR (Memory's Data Register).(automatically?) Write to the memory \u00b6 Load the address you want write to MAR, and the value to be stored in the MDR, then interrogate the memory. The information contained in the MDR will be written into the memory location whose address is in the MAR. Processing Unit \u00b6 Processing unit is the actual unit that carries out the processing of information in the computer. Processing unit can be complex, but now we only focus on the simple case. ALU(Arithmetic and Logic Unit) \u00b6 ALU normally proccess data element of a fixed size referred to as the word length of the computer. The data elements are called words . In LC-3, ALU can perform ADD, AND and NOT operations. And it process 16-bits words, which means it has a word length of 16 bits. TEMP \u00b6 usually refer to register to store information temporarily. Why we need register? \u5185\u5b58\u4e0d\u5c5e\u4e8e CPU, \u56e0\u6b64\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e\u4f1a\u5f88\u6162. \u56e0\u6b64\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u5bc4\u5b58\u5668\u6765\u6682\u65f6\u5b58\u50a8\u6570\u636e, \u4ee5\u4fbf\u8fd0\u7b97. Typically, the size of each register is identical to the size of values processed by the ALU. In LC-3, we have 8 registers(R0, R1, ... R7), each containing 16 bits. Input and Output \u00b6 Some devices that get input from users, and some display the result to users. Control unit \u00b6 It is in charge of making all the other parts of the computer play together. When we describe the step-by-step process of executing a computer program, it is the control unit that keeps track of both where we are within the process of executing the program and where we are in the process of executing each instruction. Control unit in LC-3 consists of program counter(PC) and instruction register (IR) . PC contains the address of the next instruction, IR contains the current instruction. Instruction Processing \u00b6 Operation instructions: operate on date. e.g. ADD, AND, NOT data movement: move information from the processing unit to and from memory and to and from input/output devices. e.g. load, store control: altering the sequential processing of instructions. e.g. BR The Instruction \u00b6 ADD \u00b6 reg + imm5 -> reg / reg + reg -> reg bits[15:12]: opcode, 0001<->ADD bits[11:9]: DR(Destination Register) bits[8:6]: SR1(Source Register 1) bits[5]: bits[5]=0, the form is SR1 + SR2 -> DR then bits[5:3] is just used to fill the space. bits[3:0]: SR2 bits[5]=1, then form is SR1 + imm5 -> DR then bits[5:0] will be sign-extended to 16 bits as the second operand. AND \u00b6 reg AND imm5 -> reg / reg AND reg -> reg (the same as ADD except the opcode 0101) Trick We can set bit[5]=1 and set bit[4:0]=0, and let SR1=DR. Then the instruction becomes Reg AND 0 -> Reg , we refer to this technique as initializeing reg to 0. LD \u00b6 LD represent load, which means go to a particular memory location, read the value and store it in one of the registers. LD takes PC+offset as its addressing mode, which we will introduce in detail later. bits[15:12]: opcode, 0010<->LD bits[11:9]: DR, stored the value that will be read from the memory. bits[8:0]: offset, and it also will be sign-extended to 16 bits . Then PC+offset will be the source address. Eventually, M[PC+offset] -> DR . The Instruction Cycle \u00b6 Instructions are processed under the direction of the control unit in a very systematic, step-by-step manner. It consists of 6 sequential phases. Note that the instruction cycle is not the clock cycle rather made up by it and not all instructions need all 6 phases. Fetch \u00b6 Obtain the next instruction from memory and load it into IR.(Instruction Register) IP!=IR IP(Instruction Pointer) is a pointer to the the instruction while IR is the value of the instruction(contain opcode, register bits and sth). IP->IR(IP = the address of IR) Load the MAR with the contents of the PC, and simultaneously increment the PC. (in one clock cycle) Interrogate memory, resulting in the instructio being placed int the MDR. (in at least one clock cycle) Load the IR with the contents of the MDR. (in one clock cycle) Decode \u00b6 Examine the instruction in order to figure out what the microarchitecture is being asked to do.(by decoders) In LC-3, IR[15:12] will be decoded. Evaluate address \u00b6 Computes the address of the memory location that is needed to process the instruction, and this phase only happens when we go to memory to specify where we will store in or where we will read from. e.g. LD has this phase. Fetch Operand \u00b6 Obtain the source operands needed to process the instruction. e.g. In the LD example, loading MAR with the address calculated in the EVALUATE ADDRESS phase and reading that memory that resulted in the source operand being placed in MDR. Execute \u00b6 Carries out the execution of the instruction. e.g. add two values. Store Result \u00b6 Writes the result to its designated destinations. ADD in LC-3 An ADD instruction can fetch its source operands, perform the ADD in ALU and store the result all in a single clock cycle. Changing the Sequence of Execution \u00b6 BR \u00b6 BR(Conditional Branch) may change the contents of the PC. BR also uses PC+offset as its addressing mode. bits[15:12]: opcode 0000<->BR bits[11:9]: condition, is used to decide whehter it will change PC or not, the detail will be cover later. bits[8:0]: offset, how to calculate the address is the same as that in LD instruction. Condition Code Condition code(CC): three single-bit registers.(N for Negative, Z for Zero, P for Positive) Individually set or cleared each time one of the eight GPR is written into as a result of execution of one of the operate instructions or one of the load instructions. Which instructions will modify the value of CC? See instruction set table where there is a '+' for those instructions or find the answer from the FSM. During the EXECUTE phase of the BR instruction cycle, the processor examines the condition codes whose associated bits in the instruction, bits[11:9], are 1. If any of the condition codes that are examined are set, the jump!","title":"The von Neumann Model"},{"location":"ICS/ICS-4/#chapter-4-the-von-neumann-model","text":"Abstract Covered in Lecture 3, 2022.7.13 and Lecture 4, 2022.7.14 Topics: 1. The von Neumann Model 2. Brief introduction to the instruction in LC-3","title":"Chapter 4 The von Neumann Model"},{"location":"ICS/ICS-4/#basic-components","text":"An important idea missing in Chapter 1: All computers containing the five parts are capable of computing exactly the same things given enough time and enough memory. The only difference is the time and memory. Note that CPU = Control and Processing Unit. Abstract PC \u6307\u5411\u8981\u6267\u884c\u7684\u547d\u4ee4(\u5730\u5740), IP \u5b58\u50a8\u5f53\u524d\u6267\u884c\u7684\u547d\u4ee4. Control Unit \u5411 Processing Unit \u53d1\u51fa\u4fe1\u53f7(\u5982\u6267\u884c\u52a0\u6cd5). Processing Unit \u8d1f\u8d23\u6267\u884c\u547d\u4ee4, \u5176\u4e2d TEMP \u4e3a\u5bc4\u5b58\u5668, \u901f\u5ea6\u76f8\u6bd4\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\u5feb\u5f88\u591a(\u56e0\u4e3a\u5185\u5b58\u5c5e\u4e8e CPU \u5916\u7684\u4e8b\u7269)","title":"Basic Components"},{"location":"ICS/ICS-4/#memory","text":"Memory is used to store information. Every memory location has an address asscoiated, and store a value in that location. Address Stored Value 0 .. 1 .. 2 4 3 .. 4 2 location 2 is called pointer variable.","title":"Memory"},{"location":"ICS/ICS-4/#address-space-and-addressability","text":"just for review. Address space: The number of uniquely identifiable memory locations. Addressability: The number of bits stored in each memory location.","title":"Address Space and Addressability"},{"location":"ICS/ICS-4/#read-from-the-memory","text":"Load the address you want read to MAR (Memory's Address Register), then interrogate the memory. The information stored in the location having that address will be placed in the MDR (Memory's Data Register).(automatically?)","title":"Read from the memory"},{"location":"ICS/ICS-4/#write-to-the-memory","text":"Load the address you want write to MAR, and the value to be stored in the MDR, then interrogate the memory. The information contained in the MDR will be written into the memory location whose address is in the MAR.","title":"Write to the memory"},{"location":"ICS/ICS-4/#processing-unit","text":"Processing unit is the actual unit that carries out the processing of information in the computer. Processing unit can be complex, but now we only focus on the simple case.","title":"Processing Unit"},{"location":"ICS/ICS-4/#aluarithmetic-and-logic-unit","text":"ALU normally proccess data element of a fixed size referred to as the word length of the computer. The data elements are called words . In LC-3, ALU can perform ADD, AND and NOT operations. And it process 16-bits words, which means it has a word length of 16 bits.","title":"ALU(Arithmetic and Logic Unit)"},{"location":"ICS/ICS-4/#temp","text":"usually refer to register to store information temporarily. Why we need register? \u5185\u5b58\u4e0d\u5c5e\u4e8e CPU, \u56e0\u6b64\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e\u4f1a\u5f88\u6162. \u56e0\u6b64\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u5bc4\u5b58\u5668\u6765\u6682\u65f6\u5b58\u50a8\u6570\u636e, \u4ee5\u4fbf\u8fd0\u7b97. Typically, the size of each register is identical to the size of values processed by the ALU. In LC-3, we have 8 registers(R0, R1, ... R7), each containing 16 bits.","title":"TEMP"},{"location":"ICS/ICS-4/#input-and-output","text":"Some devices that get input from users, and some display the result to users.","title":"Input and Output"},{"location":"ICS/ICS-4/#control-unit","text":"It is in charge of making all the other parts of the computer play together. When we describe the step-by-step process of executing a computer program, it is the control unit that keeps track of both where we are within the process of executing the program and where we are in the process of executing each instruction. Control unit in LC-3 consists of program counter(PC) and instruction register (IR) . PC contains the address of the next instruction, IR contains the current instruction.","title":"Control unit"},{"location":"ICS/ICS-4/#instruction-processing","text":"Operation instructions: operate on date. e.g. ADD, AND, NOT data movement: move information from the processing unit to and from memory and to and from input/output devices. e.g. load, store control: altering the sequential processing of instructions. e.g. BR","title":"Instruction Processing"},{"location":"ICS/ICS-4/#the-instruction","text":"","title":"The Instruction"},{"location":"ICS/ICS-4/#add","text":"reg + imm5 -> reg / reg + reg -> reg bits[15:12]: opcode, 0001<->ADD bits[11:9]: DR(Destination Register) bits[8:6]: SR1(Source Register 1) bits[5]: bits[5]=0, the form is SR1 + SR2 -> DR then bits[5:3] is just used to fill the space. bits[3:0]: SR2 bits[5]=1, then form is SR1 + imm5 -> DR then bits[5:0] will be sign-extended to 16 bits as the second operand.","title":"ADD"},{"location":"ICS/ICS-4/#and","text":"reg AND imm5 -> reg / reg AND reg -> reg (the same as ADD except the opcode 0101) Trick We can set bit[5]=1 and set bit[4:0]=0, and let SR1=DR. Then the instruction becomes Reg AND 0 -> Reg , we refer to this technique as initializeing reg to 0.","title":"AND"},{"location":"ICS/ICS-4/#ld","text":"LD represent load, which means go to a particular memory location, read the value and store it in one of the registers. LD takes PC+offset as its addressing mode, which we will introduce in detail later. bits[15:12]: opcode, 0010<->LD bits[11:9]: DR, stored the value that will be read from the memory. bits[8:0]: offset, and it also will be sign-extended to 16 bits . Then PC+offset will be the source address. Eventually, M[PC+offset] -> DR .","title":"LD"},{"location":"ICS/ICS-4/#the-instruction-cycle","text":"Instructions are processed under the direction of the control unit in a very systematic, step-by-step manner. It consists of 6 sequential phases. Note that the instruction cycle is not the clock cycle rather made up by it and not all instructions need all 6 phases.","title":"The Instruction Cycle"},{"location":"ICS/ICS-4/#fetch","text":"Obtain the next instruction from memory and load it into IR.(Instruction Register) IP!=IR IP(Instruction Pointer) is a pointer to the the instruction while IR is the value of the instruction(contain opcode, register bits and sth). IP->IR(IP = the address of IR) Load the MAR with the contents of the PC, and simultaneously increment the PC. (in one clock cycle) Interrogate memory, resulting in the instructio being placed int the MDR. (in at least one clock cycle) Load the IR with the contents of the MDR. (in one clock cycle)","title":"Fetch"},{"location":"ICS/ICS-4/#decode","text":"Examine the instruction in order to figure out what the microarchitecture is being asked to do.(by decoders) In LC-3, IR[15:12] will be decoded.","title":"Decode"},{"location":"ICS/ICS-4/#evaluate-address","text":"Computes the address of the memory location that is needed to process the instruction, and this phase only happens when we go to memory to specify where we will store in or where we will read from. e.g. LD has this phase.","title":"Evaluate address"},{"location":"ICS/ICS-4/#fetch-operand","text":"Obtain the source operands needed to process the instruction. e.g. In the LD example, loading MAR with the address calculated in the EVALUATE ADDRESS phase and reading that memory that resulted in the source operand being placed in MDR.","title":"Fetch Operand"},{"location":"ICS/ICS-4/#execute","text":"Carries out the execution of the instruction. e.g. add two values.","title":"Execute"},{"location":"ICS/ICS-4/#store-result","text":"Writes the result to its designated destinations. ADD in LC-3 An ADD instruction can fetch its source operands, perform the ADD in ALU and store the result all in a single clock cycle.","title":"Store Result"},{"location":"ICS/ICS-4/#changing-the-sequence-of-execution","text":"","title":"Changing the Sequence of Execution"},{"location":"ICS/ICS-4/#br","text":"BR(Conditional Branch) may change the contents of the PC. BR also uses PC+offset as its addressing mode. bits[15:12]: opcode 0000<->BR bits[11:9]: condition, is used to decide whehter it will change PC or not, the detail will be cover later. bits[8:0]: offset, how to calculate the address is the same as that in LD instruction. Condition Code Condition code(CC): three single-bit registers.(N for Negative, Z for Zero, P for Positive) Individually set or cleared each time one of the eight GPR is written into as a result of execution of one of the operate instructions or one of the load instructions. Which instructions will modify the value of CC? See instruction set table where there is a '+' for those instructions or find the answer from the FSM. During the EXECUTE phase of the BR instruction cycle, the processor examines the condition codes whose associated bits in the instruction, bits[11:9], are 1. If any of the condition codes that are examined are set, the jump!","title":"BR"},{"location":"ICS/ICS-5/","text":"Chapter 5 LC-3 \u00b6 Abstract Covered in Lecture 4, 2022.7.14 and Lecture 5, 2022.7.15 Topics: 1. ISA of LC-3. 2. Microarchitecture of LC-3. ISA \u00b6 Memory Organization \u00b6 address space: \\(2^{16}\\) (i.e.65536) locations. Not all 65536 addresses are actually used for memory locations. addressability: 16 bits. It's also called word-addressable . Registers \u00b6 Each register is called a GPR(General Purpose Register). They are referred to as R0, R1, ... R7. Instruction Set \u00b6 An instruction is made up of two things, opcode and oprands. The instruction set is defined by its set of opcdeos, data types and addressing modes. opcode: 3 different kinds. Operates, data movement and control. Data Types \u00b6 Every opcode will interpret the bit patterns of its operands according to the data type it's designed to support. Addressing Modes \u00b6 Addressing mode is a mechanism for specifying where the operand is located. 5 modes in LC-3: immediate(or literal), register and 3 memory addressing modes: PC-relative, indirect and Base+offset. Operate Instructions \u00b6 Operation instructions process data. ADD, AND and NOT \u00b6 NOT Its opcode is 1001, and bits[11:9] is DR, bits[8:6] is SR, and bits[5:0] are set to 1. its datapath: ADD Note that no all 2's complement intergers can be immediate operands. its datapath: \u6ce8: AND \u4e0e ADD \u7684 datapath \u76f8\u540c \u5b9e\u73b0 SUB `A - B = A + (-B)' \u6240\u4ee5\u6211\u4eec\u5c06 B \u6309\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00. LEA \u00b6 LEA(opcode=1110) loads the register specified by bits[11:9] of the instruction with the value formed by adding the incremented PC to the sign-extended bits[8:0] of the instruction. LEA is useful to initiallize a register with an address. Note that the values to be loaded into the register does not involve any access to memory. Note that LEA does not effect on CC. Data Movement Instructions \u00b6 Data movement instructions between GPR and memory or between registers and input/output devices. The LC-3 contains 6 instructions that move formation:\u3000LD, LDR, LDI, ST, STR, STI. The format: bits[8:0]: address generation bits. PC-Relative Mode \u00b6 LD(opcode=0010) and ST(opcode=0011) specify the PC-relative addressing mode. The memory address is computed by signed-extending bits[8:0] to 16 bits and adding the result to the incremented PC(incremented during FETCH phase). Note that CC will be set depending on whether the value loaded or stored. Note that the address of the memory opearand is limited to a small range.( \\([-255, +256]\\) ) Indirect Mode \u00b6 LDI(opcode=1010) and STI(opcode=1011) specify the indirect addressing mode. An address is first formed exactly the same way as with LD, however, the result is the address of the address of the operand . So we need to interrogate memory first to obtain the address of the operand (like LD). Note that the address of the operand can be anywhere. Base+offset Mode \u00b6 LDR(opcode=0110) and STR(opcode=0111) specify the Base+offset addressing mode. The address is obtained by adding a signed-extended 6-bit(bits[5:0]) offset to a base register(bits[8:6]). Note that the address of the operand can also be anywhere. Control Instructions \u00b6 The LC-3 has 5 opcodes that enable the sequential execution flow to be broken: conditional branch, unconditional jump, subroutine call(funtion), TRAP(service call) and RTI. Conditional Branches \u00b6 Note that if all bits[11:9] are 1, then it equals an unconditional branch. If all bits[11:9] are 0, then it equals nop . Two methods of Loop Control loop control with a counter loop control with a sentinel If we don't know ahead of time how many iterations we will want to perform. JMP \u00b6 The JMP instruction(opcode=1100) loads the PC with the contents of the register specified by bits[8:6] of the instruction. (its addressing mode is by register) TRAP \u00b6 The TRAP instruction(opcode=1111) changes the PC to a memory address that is part of the operating system so that the OS will perform some task on behalf of the program. Once the service call ends, the PC is set to be the address of the instruction following the TRAP instruction. Input a character from the keyboard(trapvector = x23) Output a character to the monitor(trapvector = x21) Halt the program(trapvector = x25) Datapath \u00b6 The Global Bus \u00b6 The heavy black structure with arrowheads at both ends represents the data path's global bus. The LC-3 global bus consists of 16 wires to allow one structure to transfer up to 16 bits of information. Exactly one value can be transferred on the bus at one time. ** So you can see everywhere can transfer value to the global bus has a gate to ensure there is only one value transferred on the global bus. The structure wishing to obtain the value being supplied can do by asserting its LD.x(Load Enable) signal. Note that not all computers have a single global bus. Memory \u00b6 Note that there is a MEM.EN,R.W to decide whether the memory is read from or written to. the ALU and the Register File \u00b6 Don't forget the value may input to logic to set CC or not. the PC and the PCMUX \u00b6 the MARMUX \u00b6","title":"LC-3"},{"location":"ICS/ICS-5/#chapter-5-lc-3","text":"Abstract Covered in Lecture 4, 2022.7.14 and Lecture 5, 2022.7.15 Topics: 1. ISA of LC-3. 2. Microarchitecture of LC-3.","title":"Chapter 5 LC-3"},{"location":"ICS/ICS-5/#isa","text":"","title":"ISA"},{"location":"ICS/ICS-5/#memory-organization","text":"address space: \\(2^{16}\\) (i.e.65536) locations. Not all 65536 addresses are actually used for memory locations. addressability: 16 bits. It's also called word-addressable .","title":"Memory Organization"},{"location":"ICS/ICS-5/#registers","text":"Each register is called a GPR(General Purpose Register). They are referred to as R0, R1, ... R7.","title":"Registers"},{"location":"ICS/ICS-5/#instruction-set","text":"An instruction is made up of two things, opcode and oprands. The instruction set is defined by its set of opcdeos, data types and addressing modes. opcode: 3 different kinds. Operates, data movement and control.","title":"Instruction Set"},{"location":"ICS/ICS-5/#data-types","text":"Every opcode will interpret the bit patterns of its operands according to the data type it's designed to support.","title":"Data Types"},{"location":"ICS/ICS-5/#addressing-modes","text":"Addressing mode is a mechanism for specifying where the operand is located. 5 modes in LC-3: immediate(or literal), register and 3 memory addressing modes: PC-relative, indirect and Base+offset.","title":"Addressing Modes"},{"location":"ICS/ICS-5/#operate-instructions","text":"Operation instructions process data.","title":"Operate Instructions"},{"location":"ICS/ICS-5/#add-and-and-not","text":"NOT Its opcode is 1001, and bits[11:9] is DR, bits[8:6] is SR, and bits[5:0] are set to 1. its datapath: ADD Note that no all 2's complement intergers can be immediate operands. its datapath: \u6ce8: AND \u4e0e ADD \u7684 datapath \u76f8\u540c \u5b9e\u73b0 SUB `A - B = A + (-B)' \u6240\u4ee5\u6211\u4eec\u5c06 B \u6309\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00.","title":"ADD, AND and NOT"},{"location":"ICS/ICS-5/#lea","text":"LEA(opcode=1110) loads the register specified by bits[11:9] of the instruction with the value formed by adding the incremented PC to the sign-extended bits[8:0] of the instruction. LEA is useful to initiallize a register with an address. Note that the values to be loaded into the register does not involve any access to memory. Note that LEA does not effect on CC.","title":"LEA"},{"location":"ICS/ICS-5/#data-movement-instructions","text":"Data movement instructions between GPR and memory or between registers and input/output devices. The LC-3 contains 6 instructions that move formation:\u3000LD, LDR, LDI, ST, STR, STI. The format: bits[8:0]: address generation bits.","title":"Data Movement Instructions"},{"location":"ICS/ICS-5/#pc-relative-mode","text":"LD(opcode=0010) and ST(opcode=0011) specify the PC-relative addressing mode. The memory address is computed by signed-extending bits[8:0] to 16 bits and adding the result to the incremented PC(incremented during FETCH phase). Note that CC will be set depending on whether the value loaded or stored. Note that the address of the memory opearand is limited to a small range.( \\([-255, +256]\\) )","title":"PC-Relative Mode"},{"location":"ICS/ICS-5/#indirect-mode","text":"LDI(opcode=1010) and STI(opcode=1011) specify the indirect addressing mode. An address is first formed exactly the same way as with LD, however, the result is the address of the address of the operand . So we need to interrogate memory first to obtain the address of the operand (like LD). Note that the address of the operand can be anywhere.","title":"Indirect Mode"},{"location":"ICS/ICS-5/#baseoffset-mode","text":"LDR(opcode=0110) and STR(opcode=0111) specify the Base+offset addressing mode. The address is obtained by adding a signed-extended 6-bit(bits[5:0]) offset to a base register(bits[8:6]). Note that the address of the operand can also be anywhere.","title":"Base+offset Mode"},{"location":"ICS/ICS-5/#control-instructions","text":"The LC-3 has 5 opcodes that enable the sequential execution flow to be broken: conditional branch, unconditional jump, subroutine call(funtion), TRAP(service call) and RTI.","title":"Control Instructions"},{"location":"ICS/ICS-5/#conditional-branches","text":"Note that if all bits[11:9] are 1, then it equals an unconditional branch. If all bits[11:9] are 0, then it equals nop . Two methods of Loop Control loop control with a counter loop control with a sentinel If we don't know ahead of time how many iterations we will want to perform.","title":"Conditional Branches"},{"location":"ICS/ICS-5/#jmp","text":"The JMP instruction(opcode=1100) loads the PC with the contents of the register specified by bits[8:6] of the instruction. (its addressing mode is by register)","title":"JMP"},{"location":"ICS/ICS-5/#trap","text":"The TRAP instruction(opcode=1111) changes the PC to a memory address that is part of the operating system so that the OS will perform some task on behalf of the program. Once the service call ends, the PC is set to be the address of the instruction following the TRAP instruction. Input a character from the keyboard(trapvector = x23) Output a character to the monitor(trapvector = x21) Halt the program(trapvector = x25)","title":"TRAP"},{"location":"ICS/ICS-5/#datapath","text":"","title":"Datapath"},{"location":"ICS/ICS-5/#the-global-bus","text":"The heavy black structure with arrowheads at both ends represents the data path's global bus. The LC-3 global bus consists of 16 wires to allow one structure to transfer up to 16 bits of information. Exactly one value can be transferred on the bus at one time. ** So you can see everywhere can transfer value to the global bus has a gate to ensure there is only one value transferred on the global bus. The structure wishing to obtain the value being supplied can do by asserting its LD.x(Load Enable) signal. Note that not all computers have a single global bus.","title":"The Global Bus"},{"location":"ICS/ICS-5/#memory","text":"Note that there is a MEM.EN,R.W to decide whether the memory is read from or written to.","title":"Memory"},{"location":"ICS/ICS-5/#the-alu-and-the-register-file","text":"Don't forget the value may input to logic to set CC or not.","title":"the ALU and the Register File"},{"location":"ICS/ICS-5/#the-pc-and-the-pcmux","text":"","title":"the PC and the PCMUX"},{"location":"ICS/ICS-5/#the-marmux","text":"","title":"the MARMUX"},{"location":"ICS/ICS-6/","text":"Chapter 6 Programming \u00b6 Abstract Covered in Lecture 6, 2022.7.16 Topics: 1. Structured Programming 2. Debugging Structured Programming \u00b6 The larger tasks are systematically broken down into smaller ones, which is called systematic decomposition. There are basically 3 constructs for doing this. sequential construct: carry out the first subtask completey, then go to the second. Never go back. conditional construct: the task consists of doing one of 2 subtasks but not both, depending on some condition. iterative construct: the task consists of doing a subtask a number of times as long as some condition is true. Debugging \u00b6 The debugging program should be able to Write values into memory locations and registers. Execute instruction sequences in a program. Stop execution when desired. Examine what is in memory and registers at any point in the program. common errors: incorrectly setting the loop times. confusing LDI and LD. forgetting the CC so BR tests the wrong condition. corner cases.","title":"Programming"},{"location":"ICS/ICS-6/#chapter-6-programming","text":"Abstract Covered in Lecture 6, 2022.7.16 Topics: 1. Structured Programming 2. Debugging","title":"Chapter 6 Programming"},{"location":"ICS/ICS-6/#structured-programming","text":"The larger tasks are systematically broken down into smaller ones, which is called systematic decomposition. There are basically 3 constructs for doing this. sequential construct: carry out the first subtask completey, then go to the second. Never go back. conditional construct: the task consists of doing one of 2 subtasks but not both, depending on some condition. iterative construct: the task consists of doing a subtask a number of times as long as some condition is true.","title":"Structured Programming"},{"location":"ICS/ICS-6/#debugging","text":"The debugging program should be able to Write values into memory locations and registers. Execute instruction sequences in a program. Stop execution when desired. Examine what is in memory and registers at any point in the program. common errors: incorrectly setting the loop times. confusing LDI and LD. forgetting the CC so BR tests the wrong condition. corner cases.","title":"Debugging"},{"location":"ICS/ICS-7/","text":"Chapter 7 Assembly Language \u00b6 Abstract Covered in Lecture 5, 2022.7.16 Topics: 1. Assembler 2. Assembly Language Assembly Language \u00b6 From ISA to language. Assembly language is a low-level language. High-level languages tend to be ISA independent. Low-level languages are very much ISA dependent. In fact, it is usually the case that each ISA has only one assembly language. The translation program is called an assembler and the translation process is called assembly . Warning \u6c47\u7f16\u8bed\u8a00\u8f6c\u4e3a\u673a\u5668\u7801\u7684\u8fc7\u7a0b\u53eb \u6c47\u7f16 , \u800c\u4e0d\u662f \u7f16\u8bd1 . \u7f16\u8bd1\u662f\u5bf9\u9ad8\u7ea7\u8bed\u8a00(\u5982 C)\u800c\u8a00. Instructions \u00b6 An instrution in assembly language consists of 4 parts, and two of it(Label and Comment) are optional. Label Opcode Opearnds ; Comment Opcodes \u00b6 The Opcode is a symbolic name for the opcode of the correspounding LC-3 instruction so we can memorize the instruction easier. e.g. ADD , AND , or LDR rather than 0001, 0101 or 0110. Operands \u00b6 The number of operands depends on the operation being performed. e.g. ADD requires 3 operands. A literal value must contain a symbol identifying the representation base of the number. We use # for decimal, x for hexadecimal, and b for binary. (must) Labels \u00b6 Labels are symbolic names used to identify memory locations that are referred explicitly in the program. In LC-3, a label consists of from 1 to 20 alphanumeric characters starting with a letter of the alphabet.(reserved words excluded) There are 2 reasons for explicitly referring to a memory location. The location is the target of a branch instruction. The location contains a value that is loaded or stored. Comments \u00b6 Comments are messages intened only for human consumption. They have no effect on the translation process and indeed are not acted on by the LC-3 assembler. They are identified by semicolons. A semicolon signifies the rest of the line is a commment and is to be ignored by the assembler. Pseudo-Ops \u00b6 Pseudo-op is also called assembler directive , and it dose no t refer to an operation that will be performed by the program during execution. .ORIG \u00b6 .OGIR tells the assembler where in memory to place the LC-3 program.(to specify the start address) .FILL \u00b6 .FILL tells the assembler to set aside the next location in the program and initiallize it with the value of the operand. The value can be either a number or a label. e.g. x3006: .FILL x0030 then x0030 will be stored in the location x3006. .BLKW \u00b6 .BLKW tells the assembler to set aside some number of sequential memory locations.(i.e. a BL oc K of W ords) e.g. x3007: .BLKW 1 then the location x3007 will be set aside. .STRINGZ \u00b6 .STRINGZ tells the assembler to initiallize a sequence of n+1 memory locations. The argument is asquence of n characters inside double quotation marks. The first n words of memroy are initiallize with the zero-extended ASCII codes of the correspounding characters in the string. The final word is 0.( \\0 ) .END \u00b6 .END tells the assembler it has reached the end of the program. Note Note does not stop the program during execution. In fact, .END does not even exist at the time of execution. The Assembly Process \u00b6 It's the job of the LC-3 assembler to perform the translation from the LC-3 assembly language into a machine language program. We use the command assemble and it requires the filename of your assembly language program as an argument, and it produces the file outfile, which is in the ISA of LC-3. assemble soutiona1.asm outfile A Two-Pass Process \u00b6 The First Pass: Creating the Symbol Table \u00b6 The symbol table is simply a correspoundence of symbolic names with their 16-bit memory addresses. In the first pass we identify each label with the memory address of its assigned entry. e.g. The Second Pass: Generating the Machine Language Program \u00b6 The second pass consists of going through the assembly language line by line, with the help of the symbol table. At each line, the assembly language instruction is translated into an LC-3 machine language instruction. LD The only part of the LD instruction left to do is the PCoffset. So it's necessary that the address of the source is no more than +256 or -255 memory locations from the LD instruction. Otherwise, assembly error. Beyond the Assembly of a Single Assembly Language Program \u00b6 The Executable Image \u00b6 When a computer begins execution of a program, the entity being executed is called a executable image . The executable image is created from modules often created independently by several different programmers(also different object files). Example we write PTR .FILL STARTofFILE in the program but there is no such a label in our program while the label is in another module by different programmer. We can use .EXTERNAL STARTofFILE , then at link time when all modules are combined, the linker will find the symbol table entry.","title":"Assembly Language"},{"location":"ICS/ICS-7/#chapter-7-assembly-language","text":"Abstract Covered in Lecture 5, 2022.7.16 Topics: 1. Assembler 2. Assembly Language","title":"Chapter 7 Assembly Language"},{"location":"ICS/ICS-7/#assembly-language","text":"From ISA to language. Assembly language is a low-level language. High-level languages tend to be ISA independent. Low-level languages are very much ISA dependent. In fact, it is usually the case that each ISA has only one assembly language. The translation program is called an assembler and the translation process is called assembly . Warning \u6c47\u7f16\u8bed\u8a00\u8f6c\u4e3a\u673a\u5668\u7801\u7684\u8fc7\u7a0b\u53eb \u6c47\u7f16 , \u800c\u4e0d\u662f \u7f16\u8bd1 . \u7f16\u8bd1\u662f\u5bf9\u9ad8\u7ea7\u8bed\u8a00(\u5982 C)\u800c\u8a00.","title":"Assembly Language"},{"location":"ICS/ICS-7/#instructions","text":"An instrution in assembly language consists of 4 parts, and two of it(Label and Comment) are optional. Label Opcode Opearnds ; Comment","title":"Instructions"},{"location":"ICS/ICS-7/#opcodes","text":"The Opcode is a symbolic name for the opcode of the correspounding LC-3 instruction so we can memorize the instruction easier. e.g. ADD , AND , or LDR rather than 0001, 0101 or 0110.","title":"Opcodes"},{"location":"ICS/ICS-7/#operands","text":"The number of operands depends on the operation being performed. e.g. ADD requires 3 operands. A literal value must contain a symbol identifying the representation base of the number. We use # for decimal, x for hexadecimal, and b for binary. (must)","title":"Operands"},{"location":"ICS/ICS-7/#labels","text":"Labels are symbolic names used to identify memory locations that are referred explicitly in the program. In LC-3, a label consists of from 1 to 20 alphanumeric characters starting with a letter of the alphabet.(reserved words excluded) There are 2 reasons for explicitly referring to a memory location. The location is the target of a branch instruction. The location contains a value that is loaded or stored.","title":"Labels"},{"location":"ICS/ICS-7/#comments","text":"Comments are messages intened only for human consumption. They have no effect on the translation process and indeed are not acted on by the LC-3 assembler. They are identified by semicolons. A semicolon signifies the rest of the line is a commment and is to be ignored by the assembler.","title":"Comments"},{"location":"ICS/ICS-7/#pseudo-ops","text":"Pseudo-op is also called assembler directive , and it dose no t refer to an operation that will be performed by the program during execution.","title":"Pseudo-Ops"},{"location":"ICS/ICS-7/#orig","text":".OGIR tells the assembler where in memory to place the LC-3 program.(to specify the start address)","title":".ORIG"},{"location":"ICS/ICS-7/#fill","text":".FILL tells the assembler to set aside the next location in the program and initiallize it with the value of the operand. The value can be either a number or a label. e.g. x3006: .FILL x0030 then x0030 will be stored in the location x3006.","title":".FILL"},{"location":"ICS/ICS-7/#blkw","text":".BLKW tells the assembler to set aside some number of sequential memory locations.(i.e. a BL oc K of W ords) e.g. x3007: .BLKW 1 then the location x3007 will be set aside.","title":".BLKW"},{"location":"ICS/ICS-7/#stringz","text":".STRINGZ tells the assembler to initiallize a sequence of n+1 memory locations. The argument is asquence of n characters inside double quotation marks. The first n words of memroy are initiallize with the zero-extended ASCII codes of the correspounding characters in the string. The final word is 0.( \\0 )","title":".STRINGZ"},{"location":"ICS/ICS-7/#end","text":".END tells the assembler it has reached the end of the program. Note Note does not stop the program during execution. In fact, .END does not even exist at the time of execution.","title":".END"},{"location":"ICS/ICS-7/#the-assembly-process","text":"It's the job of the LC-3 assembler to perform the translation from the LC-3 assembly language into a machine language program. We use the command assemble and it requires the filename of your assembly language program as an argument, and it produces the file outfile, which is in the ISA of LC-3. assemble soutiona1.asm outfile","title":"The Assembly Process"},{"location":"ICS/ICS-7/#a-two-pass-process","text":"","title":"A Two-Pass Process"},{"location":"ICS/ICS-7/#the-first-pass-creating-the-symbol-table","text":"The symbol table is simply a correspoundence of symbolic names with their 16-bit memory addresses. In the first pass we identify each label with the memory address of its assigned entry. e.g.","title":"The First Pass: Creating the Symbol Table"},{"location":"ICS/ICS-7/#the-second-pass-generating-the-machine-language-program","text":"The second pass consists of going through the assembly language line by line, with the help of the symbol table. At each line, the assembly language instruction is translated into an LC-3 machine language instruction. LD The only part of the LD instruction left to do is the PCoffset. So it's necessary that the address of the source is no more than +256 or -255 memory locations from the LD instruction. Otherwise, assembly error.","title":"The Second Pass: Generating the Machine Language Program"},{"location":"ICS/ICS-7/#beyond-the-assembly-of-a-single-assembly-language-program","text":"","title":"Beyond the Assembly of a Single Assembly Language Program"},{"location":"ICS/ICS-7/#the-executable-image","text":"When a computer begins execution of a program, the entity being executed is called a executable image . The executable image is created from modules often created independently by several different programmers(also different object files). Example we write PTR .FILL STARTofFILE in the program but there is no such a label in our program while the label is in another module by different programmer. We can use .EXTERNAL STARTofFILE , then at link time when all modules are combined, the linker will find the symbol table entry.","title":"The Executable Image"},{"location":"ICS/ICS-8/","text":"Chapter 8 Data Structures \u00b6 Abstract Covered in Lecture 6, 2022.7.16 and Lecture 7, 2022.7.18 Topics: 1. Stack 2. Subroutine 3. Linked-List 4. Queue(self-learning) 5. Character Strings 6. Recursion The Stack \u00b6 We say the stack is an abstract data type . The concept of a stack has nothing to do with how it is implemented. The concept of a stack is the specification of how it is to be accessed: Last In, First Out, or LIFO . Implementaions \u00b6 Stack pointer : keeps track of the top of the stack. We use R6 to contain the address of the top of the stack. Note that elements that were popped are still present in memory. However, those values cannot be accessed from memory, as long as every access to memory is controlled by the stack mechanism. When values are pushed and popped to and from a stack implemented in sequential memory locations, the data already stored on the stack does not physically move. Push \u00b6 We say we push an element onto the stack when we insert it. PUSH ADD R6, R6, #-1 STR R0, R6, #0 Overflow If we run out of available space, we cannot store the value, which is called overflow situation. PUSH LD R1, MAX ;MAX <-- negative of the top of the stack. ADD R2, R6, R1 BRz OVERFLOW ; ADD R6, R6, #-1 STR R0, R6, #0 RET Pop \u00b6 We say we pop an element from the stack when we remove it. POP LDR R0, R6, #0 ADD R6, R6, #1 Underflow Poping items that have not been previously pushed results is called underflow situation. POP LD R1, EMPTY ;EMPTY <-- negative of the bottom of the stack. ADD R2, R6, R1 BRz OVERFLOW ; LDR R0, R6, #0 ADD R6, R6, #1 RET Subroutine \u00b6 It is often useful to be able to invoke a program fragment multiple times within the same program without having to specify its details in the source program each time it is needed. Such program fragments are called subroutines , or alternatively, procedures, or in C terminology, functions. JSR & JSRR \u00b6 The instruction JSR and JSRR loads the PC by the addressing mode, then it will save the return address in R7(incremented PC). opcode: bit[15:12], 0100 for both JSR and JSRR . Addressing mode: it depends on bit[11]. JSR : bit[11]=1, it uses PCoffset11. bit[10:0] will be signed extension JSRR : bit[11]=0, it uses BaseR. bits[8:6] identifies the Base Register and the the other bits is 0(offset is set to 0). The Call/Return Mechanism \u00b6 caller : The program contains the call(i.e. JSR(R) ). callee : The subroutine that contians the return(i.e. JMP R7 ). Saveing and Restoring Registers \u00b6 caller save : the calling program saves the restores the registers. callee save : the subroutine saves and restores the registers. Character Strings \u00b6 ZEXT the characters in ASCII and place them in sequential memory. End with x0000. Linked-Lists \u00b6","title":"Data Structures"},{"location":"ICS/ICS-8/#chapter-8-data-structures","text":"Abstract Covered in Lecture 6, 2022.7.16 and Lecture 7, 2022.7.18 Topics: 1. Stack 2. Subroutine 3. Linked-List 4. Queue(self-learning) 5. Character Strings 6. Recursion","title":"Chapter 8 Data Structures"},{"location":"ICS/ICS-8/#the-stack","text":"We say the stack is an abstract data type . The concept of a stack has nothing to do with how it is implemented. The concept of a stack is the specification of how it is to be accessed: Last In, First Out, or LIFO .","title":"The Stack"},{"location":"ICS/ICS-8/#implementaions","text":"Stack pointer : keeps track of the top of the stack. We use R6 to contain the address of the top of the stack. Note that elements that were popped are still present in memory. However, those values cannot be accessed from memory, as long as every access to memory is controlled by the stack mechanism. When values are pushed and popped to and from a stack implemented in sequential memory locations, the data already stored on the stack does not physically move.","title":"Implementaions"},{"location":"ICS/ICS-8/#push","text":"We say we push an element onto the stack when we insert it. PUSH ADD R6, R6, #-1 STR R0, R6, #0 Overflow If we run out of available space, we cannot store the value, which is called overflow situation. PUSH LD R1, MAX ;MAX <-- negative of the top of the stack. ADD R2, R6, R1 BRz OVERFLOW ; ADD R6, R6, #-1 STR R0, R6, #0 RET","title":"Push"},{"location":"ICS/ICS-8/#pop","text":"We say we pop an element from the stack when we remove it. POP LDR R0, R6, #0 ADD R6, R6, #1 Underflow Poping items that have not been previously pushed results is called underflow situation. POP LD R1, EMPTY ;EMPTY <-- negative of the bottom of the stack. ADD R2, R6, R1 BRz OVERFLOW ; LDR R0, R6, #0 ADD R6, R6, #1 RET","title":"Pop"},{"location":"ICS/ICS-8/#subroutine","text":"It is often useful to be able to invoke a program fragment multiple times within the same program without having to specify its details in the source program each time it is needed. Such program fragments are called subroutines , or alternatively, procedures, or in C terminology, functions.","title":"Subroutine"},{"location":"ICS/ICS-8/#jsr-jsrr","text":"The instruction JSR and JSRR loads the PC by the addressing mode, then it will save the return address in R7(incremented PC). opcode: bit[15:12], 0100 for both JSR and JSRR . Addressing mode: it depends on bit[11]. JSR : bit[11]=1, it uses PCoffset11. bit[10:0] will be signed extension JSRR : bit[11]=0, it uses BaseR. bits[8:6] identifies the Base Register and the the other bits is 0(offset is set to 0).","title":"JSR &amp; JSRR"},{"location":"ICS/ICS-8/#the-callreturn-mechanism","text":"caller : The program contains the call(i.e. JSR(R) ). callee : The subroutine that contians the return(i.e. JMP R7 ).","title":"The Call/Return Mechanism"},{"location":"ICS/ICS-8/#saveing-and-restoring-registers","text":"caller save : the calling program saves the restores the registers. callee save : the subroutine saves and restores the registers.","title":"Saveing and Restoring Registers"},{"location":"ICS/ICS-8/#character-strings","text":"ZEXT the characters in ASCII and place them in sequential memory. End with x0000.","title":"Character Strings"},{"location":"ICS/ICS-8/#linked-lists","text":"","title":"Linked-Lists"},{"location":"ICS/ICS-9/","text":"Chapter 9 I/0 \u00b6 Abstract Covered in Lecture 8, 2022.7.19 and Lecture 9, 2022.7.20 Topics: 1. Input & Output 2. Trap 3. Interrupt Privilege, Priority and the Memory Address Space \u00b6 Privilege and Priority \u00b6 Privilege: the right to do something. It contains Supervisor mode and User mode. Priority: the urgency of a program to execute. PSR (Process Status Register) bit[15] is the privilege bit(0 for having privilege, 1 for not) bit[10:8] is the priority. priority level 0-7(PL0 ~PL7). The PL of a program is always the same as the PL of the request to run the program. Organization of Memory \u00b6 Addresses xFE00 to xFFFF do not correspond to memory locations at all. Addresses xFE00 to xFFFF are used to identify registers that take part in input and output functions and some special registers associated with the processor. Address space != Memory location In LC-3, our address space is \\(2^{16}\\) while not all addresses are for memory. xFE00-xFFFF actually doesn't belong to memory location. Each stack has a stack pointer, SSP(Supervisor Stack Pointer) and USP(User Stack Pointer), and only one of the 2 stacks is active at any one time. R6 is generally used as SP for the active stack, and we have 2 registers Saved_SSP and Saved_USP to save the SP not in use. e.g. When from Supervisor mode to User mode, SP is stored in Saved_SSP and is loaded from Saved_USP. Input/Output \u00b6 Some Basic Characteristics of I/O \u00b6 All I/O activity is controlled by instructions in the computer\u2019s ISA. Does the ISA need special instructions for dealing with I/O? Does the I/O device execute at the same speed as the computer, and if not, what manages the difference in speeds? Is the transfer of information between the computer and the I/O device initiated by a program executing in the computer, or is it initiated by the I/O device? Memory-Mapped I/O vs. Special I/O Instructions \u00b6 Some computers use special input and output instructions while most computers prefer to use the same data movement instructions that are used to move data in and out of memory. Memory-Mapped I/O : the I/O device registers are mapped to a set of addresses that are allocated to I/O device registerds. Address xFE00 to xFFFF are reserved for I/O device registers. Note By memory-mapped I/O, we can regard the device registers as the memory locations so we can use the same instructions. Asynchronous vs. Synchronous \u00b6 I/O devices usually operate at speeds very different from that of a microprocessor, and not in lockstep. We call this latter characteristic asynchronous . Need protocol or handshaking mechanism. => Synchronization A single flag, called the ready bit , is enough to synchronize. When the ready bit is 1, it means we need to read a value or write a value. Interrupt-Driven vs. Polling \u00b6 Interrupt-Driven I/O is that the keyboard controls the interaction. The processor does it own thing untill being interrupted by an announcement from the keyboard. Polling is that that the processor controls the interaction. The processor interrogates the ready bit untill it detects it's set. Input from the Keyboard \u00b6 KBSR (KeyBoard Status Register) address xFE00 is assgned to KBSR. bit[15] is the ready bit. KBDR (KeyBoard Data Register) address xFE02 is assgned to KBDR. bit[7:0] are used for the data, bit[15:8] contain x00. Output to the Monitor \u00b6 The figure is almost the same as Figure 9.3 DSR (Display Status Register) address xFE04 is assgned to DSR. bit[15] is the ready bit. DDR (Display Data Register) address xFE06 is assgned to DDR. bit[7:0] are used for the data, bit[15:8] contain x00 Datapath: Operating System Service Routines(LC-3 Trap Routines) \u00b6 The Trap Mechanism \u00b6 A set of service routines A table of the starting addresses: Trap Vector Table is stored in memory locations x0000 to x00FF. What is stored here is the starting address of trap. The TRAP instruction A linkage back to the user program The TRAP Instruction \u00b6 Its opcode is 1111, bit[11:8] must be 0, and bit[7:0] is the trap vector. During the EXECUTE phase we do 3 things: PSR and PC are both pushed onto the system stack.cThe return linkage is automatically save in the PC(+1). PSR[15] will be set to 0 and [10:8] remains unchanged. Note that the trap service doesn't need the privilege.(but when executing we should be Super) So if we are User Mode, we will turn to Super Mode. Save R6 in Saved_USP and load R6 from Saved_SSP. The 8-bit trap-vector is zero-extended to 16 bits to form an address that correspounds to a location in the Trap Vector Table. The RTI Instruction \u00b6 RTI(Return from Trap or Interrupt) Its opcode is 1000, with no operands, bits[11:0] must be zero. It pops the top two values on the system stack into the PC and the PSR. Then PSR[15] is restored. Interrupt \u00b6 Is the transfer of information between the computer and the I/O device initiated by a program executing in the computer, or is it initiated by the I/O device? computer: polling I/O device: interrupt What Is Interrupt-Driven I/O? \u00b6 The I/O device can: force the running program to stop, have the processor execute a program that carries out the needs of the I/O device, have the stopped program resume execution as if nothing had happened. Since polling requires the processor to waste a lot of time, we have interrupt-driven I/O. How to achieve Interrupt-Driven I/O? \u00b6 There are 2 parts to interrupt-driven I/O: the mechanism that enables an I/O devices to interrupt the processor the mechanism that handles the interrupt request Part\u2160: Causing the Interrupt to Occur \u00b6 The I/O device must want service. The ready bit of the KBSR or the DSR is set to be 1. The device must have the right to request the service. In most I/O devices, the interrupt enable(IE) bit is part of the DSR/KDSR.( IE bit:bit[14]) The interrupt request signal from the I/O device is the logical AND of the IE bit and the ready bit. The device must be more urgent than what the processor is currently doing. To interrupt the running program, the device must have a higher priority than the program that is currently running. If the INT signal is asserted, we can trigger our interrupt. !!! Note Although interrupts can happen at any time, but we assume the interrupt only happens between the instruction. It will not interrupt the instruction executing. So when INT signal is asserted, we will test whether we can enable the processor to stop. Part\u2161: Handling the Interrupt Request \u00b6 Initiate the interrupt Save the state of the interrupted program PC, PSR, USP, GPR, memory locations. (in LC-3, only PC and PSR are stored in the stack and USP is stored by Save_USP) (push PSR first then push PC) Load the state of the interrupt rouinte Most processors use the mechanism of vectored interrupts interrupt vector provided by the device -> choose -> INTV; Interrupt Vector Table at x0100 to x01FF Service the interrupt Return from the interrupt by RTI (pop PC and PSR, and may adjust SP) Not Just I/O Devices \u4e0d\u53ea\u6709 I/O \u4f1a\u5e26\u6765\u4e2d\u65ad. \u4e2d\u65ad\u5411\u91cf\u8868\u4e2d 0100~0","title":"I/0"},{"location":"ICS/ICS-9/#chapter-9-i0","text":"Abstract Covered in Lecture 8, 2022.7.19 and Lecture 9, 2022.7.20 Topics: 1. Input & Output 2. Trap 3. Interrupt","title":"Chapter 9 I/0"},{"location":"ICS/ICS-9/#privilege-priority-and-the-memory-address-space","text":"","title":"Privilege, Priority and the Memory Address Space"},{"location":"ICS/ICS-9/#privilege-and-priority","text":"Privilege: the right to do something. It contains Supervisor mode and User mode. Priority: the urgency of a program to execute. PSR (Process Status Register) bit[15] is the privilege bit(0 for having privilege, 1 for not) bit[10:8] is the priority. priority level 0-7(PL0 ~PL7). The PL of a program is always the same as the PL of the request to run the program.","title":"Privilege and Priority"},{"location":"ICS/ICS-9/#organization-of-memory","text":"Addresses xFE00 to xFFFF do not correspond to memory locations at all. Addresses xFE00 to xFFFF are used to identify registers that take part in input and output functions and some special registers associated with the processor. Address space != Memory location In LC-3, our address space is \\(2^{16}\\) while not all addresses are for memory. xFE00-xFFFF actually doesn't belong to memory location. Each stack has a stack pointer, SSP(Supervisor Stack Pointer) and USP(User Stack Pointer), and only one of the 2 stacks is active at any one time. R6 is generally used as SP for the active stack, and we have 2 registers Saved_SSP and Saved_USP to save the SP not in use. e.g. When from Supervisor mode to User mode, SP is stored in Saved_SSP and is loaded from Saved_USP.","title":"Organization of Memory"},{"location":"ICS/ICS-9/#inputoutput","text":"","title":"Input/Output"},{"location":"ICS/ICS-9/#some-basic-characteristics-of-io","text":"All I/O activity is controlled by instructions in the computer\u2019s ISA. Does the ISA need special instructions for dealing with I/O? Does the I/O device execute at the same speed as the computer, and if not, what manages the difference in speeds? Is the transfer of information between the computer and the I/O device initiated by a program executing in the computer, or is it initiated by the I/O device?","title":"Some Basic Characteristics of I/O"},{"location":"ICS/ICS-9/#memory-mapped-io-vs-special-io-instructions","text":"Some computers use special input and output instructions while most computers prefer to use the same data movement instructions that are used to move data in and out of memory. Memory-Mapped I/O : the I/O device registers are mapped to a set of addresses that are allocated to I/O device registerds. Address xFE00 to xFFFF are reserved for I/O device registers. Note By memory-mapped I/O, we can regard the device registers as the memory locations so we can use the same instructions.","title":"Memory-Mapped I/O vs. Special I/O Instructions"},{"location":"ICS/ICS-9/#asynchronous-vs-synchronous","text":"I/O devices usually operate at speeds very different from that of a microprocessor, and not in lockstep. We call this latter characteristic asynchronous . Need protocol or handshaking mechanism. => Synchronization A single flag, called the ready bit , is enough to synchronize. When the ready bit is 1, it means we need to read a value or write a value.","title":"Asynchronous vs. Synchronous"},{"location":"ICS/ICS-9/#interrupt-driven-vs-polling","text":"Interrupt-Driven I/O is that the keyboard controls the interaction. The processor does it own thing untill being interrupted by an announcement from the keyboard. Polling is that that the processor controls the interaction. The processor interrogates the ready bit untill it detects it's set.","title":"Interrupt-Driven vs. Polling"},{"location":"ICS/ICS-9/#input-from-the-keyboard","text":"KBSR (KeyBoard Status Register) address xFE00 is assgned to KBSR. bit[15] is the ready bit. KBDR (KeyBoard Data Register) address xFE02 is assgned to KBDR. bit[7:0] are used for the data, bit[15:8] contain x00.","title":"Input from the Keyboard"},{"location":"ICS/ICS-9/#output-to-the-monitor","text":"The figure is almost the same as Figure 9.3 DSR (Display Status Register) address xFE04 is assgned to DSR. bit[15] is the ready bit. DDR (Display Data Register) address xFE06 is assgned to DDR. bit[7:0] are used for the data, bit[15:8] contain x00 Datapath:","title":"Output to the Monitor"},{"location":"ICS/ICS-9/#operating-system-service-routineslc-3-trap-routines","text":"","title":"Operating System Service Routines(LC-3 Trap Routines)"},{"location":"ICS/ICS-9/#the-trap-mechanism","text":"A set of service routines A table of the starting addresses: Trap Vector Table is stored in memory locations x0000 to x00FF. What is stored here is the starting address of trap. The TRAP instruction A linkage back to the user program","title":"The Trap Mechanism"},{"location":"ICS/ICS-9/#the-trap-instruction","text":"Its opcode is 1111, bit[11:8] must be 0, and bit[7:0] is the trap vector. During the EXECUTE phase we do 3 things: PSR and PC are both pushed onto the system stack.cThe return linkage is automatically save in the PC(+1). PSR[15] will be set to 0 and [10:8] remains unchanged. Note that the trap service doesn't need the privilege.(but when executing we should be Super) So if we are User Mode, we will turn to Super Mode. Save R6 in Saved_USP and load R6 from Saved_SSP. The 8-bit trap-vector is zero-extended to 16 bits to form an address that correspounds to a location in the Trap Vector Table.","title":"The TRAP Instruction"},{"location":"ICS/ICS-9/#the-rti-instruction","text":"RTI(Return from Trap or Interrupt) Its opcode is 1000, with no operands, bits[11:0] must be zero. It pops the top two values on the system stack into the PC and the PSR. Then PSR[15] is restored.","title":"The RTI Instruction"},{"location":"ICS/ICS-9/#interrupt","text":"Is the transfer of information between the computer and the I/O device initiated by a program executing in the computer, or is it initiated by the I/O device? computer: polling I/O device: interrupt","title":"Interrupt"},{"location":"ICS/ICS-9/#what-is-interrupt-driven-io","text":"The I/O device can: force the running program to stop, have the processor execute a program that carries out the needs of the I/O device, have the stopped program resume execution as if nothing had happened. Since polling requires the processor to waste a lot of time, we have interrupt-driven I/O.","title":"What Is Interrupt-Driven I/O?"},{"location":"ICS/ICS-9/#how-to-achieve-interrupt-driven-io","text":"There are 2 parts to interrupt-driven I/O: the mechanism that enables an I/O devices to interrupt the processor the mechanism that handles the interrupt request","title":"How to achieve Interrupt-Driven I/O?"},{"location":"ICS/ICS-9/#parti-causing-the-interrupt-to-occur","text":"The I/O device must want service. The ready bit of the KBSR or the DSR is set to be 1. The device must have the right to request the service. In most I/O devices, the interrupt enable(IE) bit is part of the DSR/KDSR.( IE bit:bit[14]) The interrupt request signal from the I/O device is the logical AND of the IE bit and the ready bit. The device must be more urgent than what the processor is currently doing. To interrupt the running program, the device must have a higher priority than the program that is currently running. If the INT signal is asserted, we can trigger our interrupt. !!! Note Although interrupts can happen at any time, but we assume the interrupt only happens between the instruction. It will not interrupt the instruction executing. So when INT signal is asserted, we will test whether we can enable the processor to stop.","title":"Part\u2160: Causing the Interrupt to Occur"},{"location":"ICS/ICS-9/#partii-handling-the-interrupt-request","text":"Initiate the interrupt Save the state of the interrupted program PC, PSR, USP, GPR, memory locations. (in LC-3, only PC and PSR are stored in the stack and USP is stored by Save_USP) (push PSR first then push PC) Load the state of the interrupt rouinte Most processors use the mechanism of vectored interrupts interrupt vector provided by the device -> choose -> INTV; Interrupt Vector Table at x0100 to x01FF Service the interrupt Return from the interrupt by RTI (pop PC and PSR, and may adjust SP) Not Just I/O Devices \u4e0d\u53ea\u6709 I/O \u4f1a\u5e26\u6765\u4e2d\u65ad. \u4e2d\u65ad\u5411\u91cf\u8868\u4e2d 0100~0","title":"Part\u2161: Handling the Interrupt Request"},{"location":"Logic/","text":"\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840 \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u6559\u6750: Logic and Computer Design Fundamental, M. Morris R. Mano, Charles R. Kime, Tom Martin \u8001\u5e08: \u8463\u4e9a\u6ce2/TA: \u53f6\u5fd7\u8c6a","title":"\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840"},{"location":"Logic/#_1","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u6559\u6750: Logic and Computer Design Fundamental, M. Morris R. Mano, Charles R. Kime, Tom Martin \u8001\u5e08: \u8463\u4e9a\u6ce2/TA: \u53f6\u5fd7\u8c6a","title":"\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840"},{"location":"Logic/logic01/","text":"Digital Systems and Information \u00b6 Abstract \u6570\u5b57\u7cfb\u7edf\uff1a\u6570\u5b57\u4fe1\u53f7\uff0c\u5178\u578b\u6570\u5b57\u7cfb\u7edf\u3002 Digital Systems: Digital signal, typical digital systems \u8ba1\u7b97\u673a\u5185\u4fe1\u606f\u8868\u793a\u6cd5 Information Representation \u6570\u5236 Number systems \u8fdb\u4f4d\u8ba1\u6570\u5236\u7684\u6982\u5ff5\u548c\u5341\u3001\u4e8c\u3001\u5341\u516d\u3001\u516b\u5236\u6570\u7684\u8868\u793a Positive radix, positional number systems, decimal, binary, octal and hexadecimal \u4e0d\u540c\u8fdb\u4f4d\u6570\u5236\u4e4b\u95f4\u7684\u8f6c\u6362 Conversion Between Bases \u7f16\u7801\u7684\u6982\u5ff5\u53ca\u5e26\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u7684\u7f16\u7801\u3002 Representation for unsigned and signed binary numbers \u771f\u503c\u3001\u6307\u5b9a\u957f\u5ea6\u7684\u673a\u5668\u6570\uff1a\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801\u3002 Magnitude, Signed-Magnitude, Signed-1\u2019s Complement, Signed-2\u2019s Complement \u5341\u8fdb\u5236\u6570\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\uff1aBCD \u7801 Binary coded decimal (BCD) \u5b57\u7b26\u7f16\u7801\uff1aASCII ASCII Character Codes \u5404\u79cd\u4fe1\u606f\u7684\u7f16\u7801 Non-numeric Binary Codes Digital Systems \u00b6 Types of Digital Systems \u00b6 no state presen: Combinational Logic System(output = Function(Input)). state present: Sequential System state updated at discrete time(\u7cfb\u7edf\u91cc\u6709\u7edf\u4e00\u7684\u65f6\u949f, \u6bcf\u4e00\u79d2\u949f\u51b3\u5b9a\u8981\u4e0d\u8981\u66f4\u65b0, \u8fd9\u4e2a\u66f4\u65b0\u53ea\u4f1a\u5728\u6bcf\u79d2\u949f\u7684\u8fb9\u754c\u4ea7\u751f)/any time -> Synchronous /asynchronous Sequential System State = Function(State, Input) Output = Function(State) or Function(State, Input) state \u4e0d\u80fd\u53ea\u548c input \u6709\u5173\u5417? -- \u4e0d\u80fd, \u8fd9\u6837 state \u7684\u5b58\u5728\u5c31\u6ca1\u6709\u5fc5\u8981\u4e86(\u6bcf\u6b21\u7684 state \u53ea\u662f\u4f5c\u4e3a\u4e86 input \u5230 output \u7684\u4e2d\u95f4\u91cf.) Example \u6c7d\u8f66\u4e0a\u7684\u91cc\u7a0b\u8868, \u8f93\u5165 count up \u548c reset \u4fe1\u53f7. \u5982\u679c count up \u5c31\u628a\u91cc\u7a0b\u52a0\u4e00. \u8f93\u51fa\u5c31\u662f\u53ef\u89c6\u5316\u7684\u663e\u5f0f\u91cc\u7a0b. \u72b6\u6001\u5c31\u662f\u91cc\u7a0b\u8868\u7684\u503c. \u8fd9\u662f\u975e\u540c\u6b65\u7684, \u56e0\u4e3a\u66f4\u65b0\u4fe1\u53f7\u7684\u65f6\u95f4\u4e0d\u4f9d\u8d56\u7edf\u4e00\u65f6\u949f, \u5728\u4efb\u610f\u65f6\u523b\u90fd\u53ef\u4ee5\u53d1\u751f. Embedded Systems \u00b6 analog input(\u6a21\u62df\u8f93\u5165) : A-to-D : \u628a\u6a21\u62df\u4fe1\u53f7\u8f6c\u5316\u4e3a\u6570\u5b57\u4fe1\u53f7(\u5904\u7406\u5668\u4e0d\u80fd\u5904\u7406\u6a21\u62df\u4fe1\u53f7) D-to-A : \u5904\u7406\u540e\u628a\u6570\u5b57\u4fe1\u53f7\u8f6c\u5316\u4e3a\u819c\u4f60\u4fe1\u53f7 \u4e5f\u6709\u5176\u4ed6\u7684\u6570\u5b57\u8f93\u5165\u8f93\u51fa(\u5982\u6309\u952e) \u6838\u5fc3 : AD & DA, \u5d4c\u5165\u5f0f\u7cfb\u7edf\u533a\u522b\u4e8e\u65e5\u5e38\u8ba1\u7b97\u673a Example \u5bf9\u7a7a\u8c03, input \u662f\u6e29\u5ea6\u4f20\u611f\u5668(\u7535\u963b). \u8f93\u5165\u662f\u4e00\u4e2a\u7535\u538b\u503c, \u7a7a\u8c03\u5982\u4f55\u7406\u89e3\u7535\u538b\u53d8\u5316? \u5468\u671f\u6027\u91c7\u6837: \u91c7\u6837\u7684\u5468\u671f\u662f\u7531\u8f93\u5165\u4fe1\u53f7\u7684\u4fe1\u53f7\u9891\u7387\u51b3\u5b9a.(\u9999\u519c\u5b9a\u7406) \u91cf\u5316: (\u5e26\u8bef\u5dee) \u79bb\u6563\u5316\u6570\u636e Information Representation \u00b6 Binary values are represented abstractly by: digits 0 and 1 words (symbols) False (F) and True (T) words (symbols) Low (L) and High (H) and words On and Off. Binary values are represented by values or ranges of values of physical quantities \u4fe1\u53f7\u7684\u5206\u7c7b: \u4e3a\u4ec0\u4e48\u9009\u62e9\u4e8c\u8fdb\u5236\u6570\u503c\u8868\u793a? ---\u66f4\u597d \u5bf9\u6297\u6570\u636e\u4f20\u8f93\u4e2d\u7684\u5e72\u6270 \u566a\u58f0\u5bb9\u9650 0.3V(0.6-0.9 0.1-0.4\u4e4b\u95f4\u53ef\u4ee5\u7ee7\u7eed\u4fdd\u7559\u4fe1\u606f\u7684\u6b63\u786e\u6027) Number Systems - Representation \u00b6 A number with radix(\u57fa\u6570) r is represented by a string of digits: \\(A_{n-1}A_{n-2}\\cdots A_1A_0.A_{-1}A_{-2}\\dots A_{-m}\\) . \\(Number_r = (\\sum\\limits_{i=0}^{i=n-1}A_i\\times r^i)+(\\sum\\limits_{j=-m}^{j=-1}A_j\\times r^j)\\) \\(2^{10} = 1024\\) is Kilo, denoted \"K\". \\(2^{20}\\) is Mega, denoted \"M\". \\(2^{30}\\) is Giga, denoted \"G\". \\(2^{40}\\) is Tera, denoted \"T\". Binary Arithmetic \u00b6 \u4e8c\u8fdb\u5236\u4e58\u6cd5: \u6839\u636e\u4e58\u6570\u5bf9\u5e94\u4f4d\u662f 1 \u8fd8\u662f 0, \u5982\u679c\u662f 1 \u5c31\u79fb\u4f4d\u5e76\u52a0\u8d77\u6765. Convert between Bases Integral Part Repeatedly divide the number by the new radix and save the remainders. The digits for the new radix are the remainders in reverse order of their computation. If the new radix is > 10, then convert all remainders > 10 to digits A, B, ... Fractional Part Repeatedly multiply the fraction by the new radix and save the integer digits that result. The digits for the new radix are the integer digits in order of their computation.If the new radix is > 10, then convert all integers > 10 to digits A, B, ... Warning \u6ce8\u610f\u5c0f\u6570\u90e8\u5206\u8865 0 \u662f\u5728\u53f3\u4fa7(\u6700\u540e) (11 111 101. 010 011 11 0 ) 2 != (375.233) 8 \u6700\u540e\u8981\u8865 0, \u5e94\u4e3a (375.236) 8 Binary Coding \u00b6 \u4e8c\u8fdb\u5236\u7f16\u7801 Numeric Must represent range of data needed Very desirable to represent data such that simple, straightforward computation for common arithmetic operations permitted Tight relation to binary numbers Non-numeric Greater flexibility since arithmetic operations not applied. Not tied to binary numbers Given M elements to be reprented by a binary code, the minimum number of bits, n satisfies \\(2^n>=M>2^{n-1}\\) so \\(n=\\lfloor{log_2{M}}\\rfloor\\) . \u53ef\u4ee5 r = 2 \u8868\u793a 4 \u4e2a\u5143\u7d20(00, 01, 10, 11), \u4e5f\u53ef\u4ee5 r = 4(0001, 0010, 0100, 1000). The second code is called \"one hot\" code(\u72ec\u70ed\u7f16\u7801) . \u5e38\u89c1\u5bf9\u5341\u8fdb\u5236\u7684\u5341\u4e2a\u6570\u5b57\u8fdb\u884c\u7f16\u7801: 8421 : Binary Code Decimal(BCD \u7801) \u6709\u6743\u7f16\u7801, \u6bcf\u4e2a\u7801\u90fd\u6709\u4f4d\u6743 Excess3(\u4f593\u7801) : 8421 + 3 \u5f97\u5230 Excess3 \u7684\u503c. \u7f16\u7801\u6210\u5bf9\u51fa\u73b0, i \u548c 9 - i \u4e92\u53cd. \u5728\u901a\u4fe1\u65f6\u5f88\u6709\u7528\u5904. 84-2-1 : \u7c7b\u4f3c 8421 \u7801, \u4e5f\u662f\u6210\u5bf9\u51fa\u73b0. Gray \u683c\u96f7\u7801 : \u76f8\u90bb\u4e24\u4e2a\u7801\u4e4b\u95f4\u53ea\u6709\u4e00\u4f4d\u4e0d\u540c. \u6ce8: 13 = D = 1101(\u8fdb\u5236\u8f6c\u5316), \u4f46\u5728\u4ee5\u4e0a\u65b9\u5f0f\u4e2d\u4f1a\u88ab\u8868\u793a\u6210 0001 0011(BCD\u7801), \u6211\u4eec\u5e94\u8be5\u5206\u522b\u7f16\u7801\u6bcf\u4e2a\u6570\u5b57. BCD Codes \u00b6 \u53ef\u4ee5\u8ba1\u7b97\uff0c\u4f46\u8981\u4fee\u6b63\u3002\uff08\u8d85\u8fc7 9 \u8981\u52a0 6\uff09 Example \u4e3a\u4ec0\u4e48\u9700\u8981 BCD \u7f16\u7801 \u7535\u5b50\u8868\u4e2d\u6709\u65f6\u9488\u79d2, \u6211\u4eec\u5982\u679c\u7528\u4e8c\u8fdb\u5236\u4fdd\u5b58\u65f6\u9488\u79d2, \u90a3\u4e48 \u52a0\u52309\u4ee5\u4e0a\u5f97\u5230 ABCD..., \u5f53\u6211\u4eec\u60f3\u8981\u663e\u793a\u8fd9\u4e9b\u503c\u65f6, \u6211\u4eec\u8981\u5148\u505a\u8fdb\u5236\u8f6c\u6362, \u518d\u663e\u793a(\u5982 A \u8f6c\u4e3a 10) \u8fd9\u5176\u4e2d\u8981\u505a\u9664\u6cd5, \u6210\u672c\u9ad8. \u4f46\u6211\u4eec\u7528\u4e24\u4f4d BCD \u7801\u8868\u793a, \u5c31\u53ef\u4ee5\u76f4\u63a5\u663e\u793a\u7ed3\u679c\u4e86. ASCII Codes \u00b6 \u5e38\u7528\u7684 ASCII Code: 0 <-> 30 16 A <-> 41 16 a <-> 61 16 Delete (DEL) is all bits set. Parity Bit Error-Detection Codes \u00b6 \u7528\u6765\u68c0\u6d4b\u6570\u636e\u4f20\u8f93\u4e2d\u662f\u5426\u53d1\u751f\u9519\u8bef A code word has even parity if the number of 1\u2019s in the code word is even. A code word has odd parity if the number of 1\u2019s in the code word is odd. \u6dfb\u52a0\u4e00\u4f4d\uff0c\u8868\u793a\u7f16\u7801\u7684\u5947\u5076\u6027\u3002\u5bf9\u5076\u6821\u9a8c\u6765\u8bf4\uff0c\u5f53 1 \u7684\u4e2a\u6570\u4e3a\u5076\u6570\u65f6\u6821\u9a8c\u4f4d\u4e3a 0; \u5bf9\u5947\u6821\u9a8c\u6765\u8bf4\uff0c\u5f53 1 \u7684\u4e2a\u6570\u4e3a\u5947\u6570\u65f6\u6821\u9a8c\u4f4d\u4e3a 1. Gray Codes \u00b6 \u5e94\u7528: \u5149\u5b66\u4f20\u611f\u5668 \u7f16\u7801\u5668\u76d8\u5305\u542b\u4e0d\u900f\u660e\u533a\u57df\u548c\u900f\u660e\u533a\u57df\u3002 Opaque\u8868\u793a0 ,clear\u8868\u793a1\u3002\u5149\u901a\u8fc7\u7f16\u7801\u5668\u7684\u6bcf\u4e00\u4e2a\u73af\uff0c\u4e0e\u7f16\u7801\u7684\u4e00\u4e2a\u4f4d\u76f8\u5bf9\u5e94\uff0c\u7167\u5c04\u5728\u4f20\u611f\u5668\u4e0a\uff0c\u4ea7\u751f\u4e00\u4e2a0\u62161 \u89d2\u7f16\u7801\u5668, \u6d4b\u91cf\u8f6c\u8f74\u8f6c\u5411\u7684\u89d2\u5ea6. \u4e09\u4e2a\u4f20\u611f\u5668\u4e0d\u4f1a\u5728\u540c\u4e00\u6761\u76f4\u7ebf(\u5b89\u88c5\u8bef\u5dee), \u5b58\u5728\u4e2d\u95f4\u72b6\u51b5. \u4f46\u683c\u96f7\u7f16\u7801\u76d8, \u76f8\u90bb\u7f16\u7801\u53ea\u5dee\u4e00\u4f4d, \u5bf9\u7ed3\u679c\u4e0d\u4f1a\u5e26\u6765\u5f71\u54cd. \u4f8b\u5982\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u7f16\u7801 011 \u548c 100 \u6765\u8bf4\uff0c\u8fd8\u6709\u53ef\u80fd\u51fa\u73b0 000, 001, 010, 110, 101, 111; \u4f46\u5bf9\u4e8e\u683c\u96f7\u7f16\u7801\uff0c\u4efb\u4f55\u65f6\u5019\u4ed6\u90fd\u80fd\u4ea7\u751f\u6b63\u786e\u7684\u7f16\u53f7\u3002 Unicode \u00b6 Unicode extends ASCII to 65536(ASCII \u6700\u591a\u53ea\u6709 7 \u4e2a\u4e8c\u8fdb\u5236\u4f4d, \u540e\u6269\u5c55\u4e3a 8 \u4e2a) 2 bytes(16 bits) code words \u53ef\u4ee5\u7528\u6765\u7f16\u7801\u4e2d\u6587/\u97e9\u6587...\u7b49\u5b57\u7b26(ASCII \u53ea\u80fd\u5904\u7406\u82f1\u6587\u5b57\u6bcd)","title":"\u6570\u5b57\u7cfb\u7edf\u548c\u4fe1\u606f"},{"location":"Logic/logic01/#digital-systems-and-information","text":"Abstract \u6570\u5b57\u7cfb\u7edf\uff1a\u6570\u5b57\u4fe1\u53f7\uff0c\u5178\u578b\u6570\u5b57\u7cfb\u7edf\u3002 Digital Systems: Digital signal, typical digital systems \u8ba1\u7b97\u673a\u5185\u4fe1\u606f\u8868\u793a\u6cd5 Information Representation \u6570\u5236 Number systems \u8fdb\u4f4d\u8ba1\u6570\u5236\u7684\u6982\u5ff5\u548c\u5341\u3001\u4e8c\u3001\u5341\u516d\u3001\u516b\u5236\u6570\u7684\u8868\u793a Positive radix, positional number systems, decimal, binary, octal and hexadecimal \u4e0d\u540c\u8fdb\u4f4d\u6570\u5236\u4e4b\u95f4\u7684\u8f6c\u6362 Conversion Between Bases \u7f16\u7801\u7684\u6982\u5ff5\u53ca\u5e26\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u7684\u7f16\u7801\u3002 Representation for unsigned and signed binary numbers \u771f\u503c\u3001\u6307\u5b9a\u957f\u5ea6\u7684\u673a\u5668\u6570\uff1a\u539f\u7801\u3001\u53cd\u7801\u3001\u8865\u7801\u3002 Magnitude, Signed-Magnitude, Signed-1\u2019s Complement, Signed-2\u2019s Complement \u5341\u8fdb\u5236\u6570\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\uff1aBCD \u7801 Binary coded decimal (BCD) \u5b57\u7b26\u7f16\u7801\uff1aASCII ASCII Character Codes \u5404\u79cd\u4fe1\u606f\u7684\u7f16\u7801 Non-numeric Binary Codes","title":"Digital Systems and Information"},{"location":"Logic/logic01/#digital-systems","text":"","title":"Digital Systems"},{"location":"Logic/logic01/#types-of-digital-systems","text":"no state presen: Combinational Logic System(output = Function(Input)). state present: Sequential System state updated at discrete time(\u7cfb\u7edf\u91cc\u6709\u7edf\u4e00\u7684\u65f6\u949f, \u6bcf\u4e00\u79d2\u949f\u51b3\u5b9a\u8981\u4e0d\u8981\u66f4\u65b0, \u8fd9\u4e2a\u66f4\u65b0\u53ea\u4f1a\u5728\u6bcf\u79d2\u949f\u7684\u8fb9\u754c\u4ea7\u751f)/any time -> Synchronous /asynchronous Sequential System State = Function(State, Input) Output = Function(State) or Function(State, Input) state \u4e0d\u80fd\u53ea\u548c input \u6709\u5173\u5417? -- \u4e0d\u80fd, \u8fd9\u6837 state \u7684\u5b58\u5728\u5c31\u6ca1\u6709\u5fc5\u8981\u4e86(\u6bcf\u6b21\u7684 state \u53ea\u662f\u4f5c\u4e3a\u4e86 input \u5230 output \u7684\u4e2d\u95f4\u91cf.) Example \u6c7d\u8f66\u4e0a\u7684\u91cc\u7a0b\u8868, \u8f93\u5165 count up \u548c reset \u4fe1\u53f7. \u5982\u679c count up \u5c31\u628a\u91cc\u7a0b\u52a0\u4e00. \u8f93\u51fa\u5c31\u662f\u53ef\u89c6\u5316\u7684\u663e\u5f0f\u91cc\u7a0b. \u72b6\u6001\u5c31\u662f\u91cc\u7a0b\u8868\u7684\u503c. \u8fd9\u662f\u975e\u540c\u6b65\u7684, \u56e0\u4e3a\u66f4\u65b0\u4fe1\u53f7\u7684\u65f6\u95f4\u4e0d\u4f9d\u8d56\u7edf\u4e00\u65f6\u949f, \u5728\u4efb\u610f\u65f6\u523b\u90fd\u53ef\u4ee5\u53d1\u751f.","title":"Types of Digital Systems"},{"location":"Logic/logic01/#embedded-systems","text":"analog input(\u6a21\u62df\u8f93\u5165) : A-to-D : \u628a\u6a21\u62df\u4fe1\u53f7\u8f6c\u5316\u4e3a\u6570\u5b57\u4fe1\u53f7(\u5904\u7406\u5668\u4e0d\u80fd\u5904\u7406\u6a21\u62df\u4fe1\u53f7) D-to-A : \u5904\u7406\u540e\u628a\u6570\u5b57\u4fe1\u53f7\u8f6c\u5316\u4e3a\u819c\u4f60\u4fe1\u53f7 \u4e5f\u6709\u5176\u4ed6\u7684\u6570\u5b57\u8f93\u5165\u8f93\u51fa(\u5982\u6309\u952e) \u6838\u5fc3 : AD & DA, \u5d4c\u5165\u5f0f\u7cfb\u7edf\u533a\u522b\u4e8e\u65e5\u5e38\u8ba1\u7b97\u673a Example \u5bf9\u7a7a\u8c03, input \u662f\u6e29\u5ea6\u4f20\u611f\u5668(\u7535\u963b). \u8f93\u5165\u662f\u4e00\u4e2a\u7535\u538b\u503c, \u7a7a\u8c03\u5982\u4f55\u7406\u89e3\u7535\u538b\u53d8\u5316? \u5468\u671f\u6027\u91c7\u6837: \u91c7\u6837\u7684\u5468\u671f\u662f\u7531\u8f93\u5165\u4fe1\u53f7\u7684\u4fe1\u53f7\u9891\u7387\u51b3\u5b9a.(\u9999\u519c\u5b9a\u7406) \u91cf\u5316: (\u5e26\u8bef\u5dee) \u79bb\u6563\u5316\u6570\u636e","title":"Embedded Systems"},{"location":"Logic/logic01/#information-representation","text":"Binary values are represented abstractly by: digits 0 and 1 words (symbols) False (F) and True (T) words (symbols) Low (L) and High (H) and words On and Off. Binary values are represented by values or ranges of values of physical quantities \u4fe1\u53f7\u7684\u5206\u7c7b: \u4e3a\u4ec0\u4e48\u9009\u62e9\u4e8c\u8fdb\u5236\u6570\u503c\u8868\u793a? ---\u66f4\u597d \u5bf9\u6297\u6570\u636e\u4f20\u8f93\u4e2d\u7684\u5e72\u6270 \u566a\u58f0\u5bb9\u9650 0.3V(0.6-0.9 0.1-0.4\u4e4b\u95f4\u53ef\u4ee5\u7ee7\u7eed\u4fdd\u7559\u4fe1\u606f\u7684\u6b63\u786e\u6027)","title":"Information Representation"},{"location":"Logic/logic01/#number-systems-representation","text":"A number with radix(\u57fa\u6570) r is represented by a string of digits: \\(A_{n-1}A_{n-2}\\cdots A_1A_0.A_{-1}A_{-2}\\dots A_{-m}\\) . \\(Number_r = (\\sum\\limits_{i=0}^{i=n-1}A_i\\times r^i)+(\\sum\\limits_{j=-m}^{j=-1}A_j\\times r^j)\\) \\(2^{10} = 1024\\) is Kilo, denoted \"K\". \\(2^{20}\\) is Mega, denoted \"M\". \\(2^{30}\\) is Giga, denoted \"G\". \\(2^{40}\\) is Tera, denoted \"T\".","title":"Number Systems - Representation"},{"location":"Logic/logic01/#binary-arithmetic","text":"\u4e8c\u8fdb\u5236\u4e58\u6cd5: \u6839\u636e\u4e58\u6570\u5bf9\u5e94\u4f4d\u662f 1 \u8fd8\u662f 0, \u5982\u679c\u662f 1 \u5c31\u79fb\u4f4d\u5e76\u52a0\u8d77\u6765. Convert between Bases Integral Part Repeatedly divide the number by the new radix and save the remainders. The digits for the new radix are the remainders in reverse order of their computation. If the new radix is > 10, then convert all remainders > 10 to digits A, B, ... Fractional Part Repeatedly multiply the fraction by the new radix and save the integer digits that result. The digits for the new radix are the integer digits in order of their computation.If the new radix is > 10, then convert all integers > 10 to digits A, B, ... Warning \u6ce8\u610f\u5c0f\u6570\u90e8\u5206\u8865 0 \u662f\u5728\u53f3\u4fa7(\u6700\u540e) (11 111 101. 010 011 11 0 ) 2 != (375.233) 8 \u6700\u540e\u8981\u8865 0, \u5e94\u4e3a (375.236) 8","title":"Binary Arithmetic"},{"location":"Logic/logic01/#binary-coding","text":"\u4e8c\u8fdb\u5236\u7f16\u7801 Numeric Must represent range of data needed Very desirable to represent data such that simple, straightforward computation for common arithmetic operations permitted Tight relation to binary numbers Non-numeric Greater flexibility since arithmetic operations not applied. Not tied to binary numbers Given M elements to be reprented by a binary code, the minimum number of bits, n satisfies \\(2^n>=M>2^{n-1}\\) so \\(n=\\lfloor{log_2{M}}\\rfloor\\) . \u53ef\u4ee5 r = 2 \u8868\u793a 4 \u4e2a\u5143\u7d20(00, 01, 10, 11), \u4e5f\u53ef\u4ee5 r = 4(0001, 0010, 0100, 1000). The second code is called \"one hot\" code(\u72ec\u70ed\u7f16\u7801) . \u5e38\u89c1\u5bf9\u5341\u8fdb\u5236\u7684\u5341\u4e2a\u6570\u5b57\u8fdb\u884c\u7f16\u7801: 8421 : Binary Code Decimal(BCD \u7801) \u6709\u6743\u7f16\u7801, \u6bcf\u4e2a\u7801\u90fd\u6709\u4f4d\u6743 Excess3(\u4f593\u7801) : 8421 + 3 \u5f97\u5230 Excess3 \u7684\u503c. \u7f16\u7801\u6210\u5bf9\u51fa\u73b0, i \u548c 9 - i \u4e92\u53cd. \u5728\u901a\u4fe1\u65f6\u5f88\u6709\u7528\u5904. 84-2-1 : \u7c7b\u4f3c 8421 \u7801, \u4e5f\u662f\u6210\u5bf9\u51fa\u73b0. Gray \u683c\u96f7\u7801 : \u76f8\u90bb\u4e24\u4e2a\u7801\u4e4b\u95f4\u53ea\u6709\u4e00\u4f4d\u4e0d\u540c. \u6ce8: 13 = D = 1101(\u8fdb\u5236\u8f6c\u5316), \u4f46\u5728\u4ee5\u4e0a\u65b9\u5f0f\u4e2d\u4f1a\u88ab\u8868\u793a\u6210 0001 0011(BCD\u7801), \u6211\u4eec\u5e94\u8be5\u5206\u522b\u7f16\u7801\u6bcf\u4e2a\u6570\u5b57.","title":"Binary Coding"},{"location":"Logic/logic01/#bcd-codes","text":"\u53ef\u4ee5\u8ba1\u7b97\uff0c\u4f46\u8981\u4fee\u6b63\u3002\uff08\u8d85\u8fc7 9 \u8981\u52a0 6\uff09 Example \u4e3a\u4ec0\u4e48\u9700\u8981 BCD \u7f16\u7801 \u7535\u5b50\u8868\u4e2d\u6709\u65f6\u9488\u79d2, \u6211\u4eec\u5982\u679c\u7528\u4e8c\u8fdb\u5236\u4fdd\u5b58\u65f6\u9488\u79d2, \u90a3\u4e48 \u52a0\u52309\u4ee5\u4e0a\u5f97\u5230 ABCD..., \u5f53\u6211\u4eec\u60f3\u8981\u663e\u793a\u8fd9\u4e9b\u503c\u65f6, \u6211\u4eec\u8981\u5148\u505a\u8fdb\u5236\u8f6c\u6362, \u518d\u663e\u793a(\u5982 A \u8f6c\u4e3a 10) \u8fd9\u5176\u4e2d\u8981\u505a\u9664\u6cd5, \u6210\u672c\u9ad8. \u4f46\u6211\u4eec\u7528\u4e24\u4f4d BCD \u7801\u8868\u793a, \u5c31\u53ef\u4ee5\u76f4\u63a5\u663e\u793a\u7ed3\u679c\u4e86.","title":"BCD Codes"},{"location":"Logic/logic01/#ascii-codes","text":"\u5e38\u7528\u7684 ASCII Code: 0 <-> 30 16 A <-> 41 16 a <-> 61 16 Delete (DEL) is all bits set.","title":"ASCII Codes"},{"location":"Logic/logic01/#parity-bit-error-detection-codes","text":"\u7528\u6765\u68c0\u6d4b\u6570\u636e\u4f20\u8f93\u4e2d\u662f\u5426\u53d1\u751f\u9519\u8bef A code word has even parity if the number of 1\u2019s in the code word is even. A code word has odd parity if the number of 1\u2019s in the code word is odd. \u6dfb\u52a0\u4e00\u4f4d\uff0c\u8868\u793a\u7f16\u7801\u7684\u5947\u5076\u6027\u3002\u5bf9\u5076\u6821\u9a8c\u6765\u8bf4\uff0c\u5f53 1 \u7684\u4e2a\u6570\u4e3a\u5076\u6570\u65f6\u6821\u9a8c\u4f4d\u4e3a 0; \u5bf9\u5947\u6821\u9a8c\u6765\u8bf4\uff0c\u5f53 1 \u7684\u4e2a\u6570\u4e3a\u5947\u6570\u65f6\u6821\u9a8c\u4f4d\u4e3a 1.","title":"Parity Bit Error-Detection Codes"},{"location":"Logic/logic01/#gray-codes","text":"\u5e94\u7528: \u5149\u5b66\u4f20\u611f\u5668 \u7f16\u7801\u5668\u76d8\u5305\u542b\u4e0d\u900f\u660e\u533a\u57df\u548c\u900f\u660e\u533a\u57df\u3002 Opaque\u8868\u793a0 ,clear\u8868\u793a1\u3002\u5149\u901a\u8fc7\u7f16\u7801\u5668\u7684\u6bcf\u4e00\u4e2a\u73af\uff0c\u4e0e\u7f16\u7801\u7684\u4e00\u4e2a\u4f4d\u76f8\u5bf9\u5e94\uff0c\u7167\u5c04\u5728\u4f20\u611f\u5668\u4e0a\uff0c\u4ea7\u751f\u4e00\u4e2a0\u62161 \u89d2\u7f16\u7801\u5668, \u6d4b\u91cf\u8f6c\u8f74\u8f6c\u5411\u7684\u89d2\u5ea6. \u4e09\u4e2a\u4f20\u611f\u5668\u4e0d\u4f1a\u5728\u540c\u4e00\u6761\u76f4\u7ebf(\u5b89\u88c5\u8bef\u5dee), \u5b58\u5728\u4e2d\u95f4\u72b6\u51b5. \u4f46\u683c\u96f7\u7f16\u7801\u76d8, \u76f8\u90bb\u7f16\u7801\u53ea\u5dee\u4e00\u4f4d, \u5bf9\u7ed3\u679c\u4e0d\u4f1a\u5e26\u6765\u5f71\u54cd. \u4f8b\u5982\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u7f16\u7801 011 \u548c 100 \u6765\u8bf4\uff0c\u8fd8\u6709\u53ef\u80fd\u51fa\u73b0 000, 001, 010, 110, 101, 111; \u4f46\u5bf9\u4e8e\u683c\u96f7\u7f16\u7801\uff0c\u4efb\u4f55\u65f6\u5019\u4ed6\u90fd\u80fd\u4ea7\u751f\u6b63\u786e\u7684\u7f16\u53f7\u3002","title":"Gray Codes"},{"location":"Logic/logic01/#unicode","text":"Unicode extends ASCII to 65536(ASCII \u6700\u591a\u53ea\u6709 7 \u4e2a\u4e8c\u8fdb\u5236\u4f4d, \u540e\u6269\u5c55\u4e3a 8 \u4e2a) 2 bytes(16 bits) code words \u53ef\u4ee5\u7528\u6765\u7f16\u7801\u4e2d\u6587/\u97e9\u6587...\u7b49\u5b57\u7b26(ASCII \u53ea\u80fd\u5904\u7406\u82f1\u6587\u5b57\u6bcd)","title":"Unicode"},{"location":"Logic/logic02/","text":"Combinational Logic Circuits \u00b6 Abstract \u5e03\u5c14\u4ee3\u6570(Boolean)\u7684\u6982\u5ff5 Boolean Algebra \u53d8\u91cf\u4e0e\u771f\u503c\u7684\u5173\u7cfb Binary Variables \u4e8c\u503c\u903b\u8f91\u548c\u95e8 Binary Logic and Gates \u4e09\u79cd\u57fa\u672c\u8fd0\u7b97 Three basic logic operations \u57fa\u672c\u8fd0\u7b97\u6cd5\u5219\u4e0e\u7535\u8def\u7b26\u53f7 Operation Definitions and Logic Gate Symbols \u57fa\u672c\u8fd0\u7b97\u516c\u5f0f\u3001\u89c4\u5219\u3001\u53cd\u6f14\uff0c\u5bf9\u5076\u89c4\u5219 basic identities, DeMorgan\u2019s Theorem, Dual Theorem \u57fa\u672c\u903b\u8f91\u7535\u8def\u4e0e\u5176\u903b\u8f91\u7279\u6027\u3002\u4e0e\uff0c\u6216\u7684\u5f00\u3001\u5173\u95e8\u7279\u70b9\uff0c\u5f02\u6216\u7684\u540c\u76f8\u3001\u53cd\u76f8\u6027\u8d28 Logic Gates and implementation, AND, OR gates used to control gate open or close, XOR gates used as a controllable invertor \u903b\u8f91\u51fd\u6570\u7684\u5316\u7b80 Simplification \u5316\u7b80\u7684\u6807\u51c6\u3001\u516c\u5f0f\u5316\u5316\u7b80\u3001\u6700\u5c0f\u9879\uff0c\u6700\u5927\u9879\u53ca\u5176\u76f8\u4e92\u5173\u7cfb\u3001\u5361\u8bfa\u56fe\u5316\u7b80\u3001\u8d28\u8574\u6db5\u9879\u3001\u5fc5\u8981\u8d28\u8574\u6db5\u9879\uff0c\u95e8\u8f93\u5165\u6210\u672c Boolean Algebraic Proof, Boolean Function Optimization, Canonical Forms, Minterms, Maxterms and their relationship, K-map simplification, Prime Implicants, Gate input Cotes \u542b\u4efb\u610f\u9879\u51fd\u6570\u5316\u7b80 Don't Cares in K-Maps \u4e0d\u540c\u51fd\u6570\u5f62\u5f0f\u7684\u53d8\u6362\u53ca\u4e0e\u6700\u5c0f\u9879\u7684\u5173\u7cfb SOM form, POM form, Standard forms, SOP form, POS form, Conversion between forms \u51fd\u6570\u7684\u4e94\u79cd\u8868\u793a\u5f62\u5f0f\uff1a\u771f\u503c\u8868\u3001\u903b\u8f91\u89e3\u6790\u5f0f\u3001\u6ce2\u5f62\u56fe\u3001\u5361\u8bfa\u56fe\u3001\u903b\u8f91\u7535\u8def\u56fe Truth Table, Boolean Equations, Wave form, K-map, Logic Diagram \u9ad8\u963b\u8f93\u51fa(\u4e09\u6001\u95e8) Hi-Impedance Outputs, Three state buffer Gate Circuits and Boolen Equations \u00b6 Binary Logic and Gates \u00b6 Binary Logic \u00b6 Binary variables take one of two values. e.g. True/False, On/Off, Yes/No, 1/0... Logical variables operate on binary variables and binary values . AND denoted by a dot( \\(\\cdot\\) or \\(\\cap\\) ) OR denoted by a plus(+ or \\(\\cup\\) ) NOT denoted by \\(\\overline{a}\\) ' or ~ Truth tables a tabular listing of the values of a function for all possible combinations of values on its arguments. Logical Function Implementation : Logical Gates \u00b6 PMOS / NMOS \u4e0a\u9762\u7684\u662f PMOS, \u4e0b\u9762\u662f NMOS. PMOS \u662f P \u65ad N \u901a, NMOS \u662f N \u65ad P \u901a. \u8be6\u89c1 ICS notes NAND/NOR \u624d\u662f\u6700\u57fa\u672c\u7684, \u4ed6\u4eec\u53ef\u4ee5\u72ec\u7acb\u5b9e\u73b0 OR AND NOT . Question \u80fd\u4e0d\u80fd\u628a\u4e24\u4e2a\u903b\u8f91\u95e8\u7684\u8f93\u51fa\u63a5\u5728\u4e00\u8d77?(\u5982 NAND \u548c NOT \u7684\u8f93\u51fa)? -> \u53ef\u80fd\u4e00\u4e2a\u8f93\u51fa\u662f 1, \u4e00\u4e2a\u8f93\u51fa\u662f 0. \u77ed\u8def, \u82af\u7247\u70e7\u6389, \u5192\u70df. \u80fd\u4e0d\u80fd\u628a NOT \u95e8\u4e2d\u53d8\u4e3a X \u548c Y \u4e24\u4e2a\u8f93\u5165\u5206\u522b\u5bf9\u5e94 CMOS \u548c NMOS? ->\u4e0d\u80fd. \u5f53 X,Y=1,0 \u65f6\u4e0a\u4e0b\u90fd\u63a5\u901a, \u77ed\u8def. \u5f53 X,Y=0,1 \u65f6\u8f93\u51fa\u89d2\u5904\u4e8e HZ(\u9ad8\u963b\u6001). \u4e09\u6001\u95e8\u5141\u8bb8\u5668\u4ef6\u8f93\u51fa\u8fd9\u6837\u7684\u7ed3\u679c. Logical Gate Symbols and Behavior waveform behavior in time: Note \u6ce8\u610f\u7ad6\u5411\u5173\u7cfb. \u7ed3\u679c\u5728\u8f93\u5165\u6539\u53d8\u7684\u65f6\u5019\u6539\u53d8. \u6700\u597d\u7528\u76f4\u5c3a\u94c5\u7b14\u753b\u51fa\u7ad6\u5411\u865a\u7ebf. Gate Delay In actual physical gates, if one or more input changes causes the output to change, the output change does not occur instantaneously. The delay between an input change(s) and the resulting output change is the gate delay denoted by tG. \u5f88\u591a\u65f6\u5019\u6211\u4eec\u4f1a\u505a tradeoff, \u4f7f\u7528\u66f4\u6602\u8d35\u7684\u5668\u6750\u6765\u83b7\u5f97\u66f4\u5c0f\u7684 delay. Note \u53ea\u6709\u771f\u503c\u8868\u662f\u552f\u4e00, \u786e\u5b9a\u7684. \u4f46\u516c\u5f0f, \u539f\u7406\u56fe\u53ef\u4ee5\u6709\u591a\u79cd\u5f62\u5f0f. Boolen Algebra \u00b6 (\u5de6\u53f3\u516c\u5f0f\u662f\u5bf9\u5076\u7684) precedence : parentheses > NOT > AND > OR The dual of an algebraic expression is obtained by interchanging + and \u00b7 and interchanging 0\u2019s and 1\u2019s. \u5bf9\u5076\u5f0f\u53ef\u4ee5\u7528\u4e8e\u51fd\u6570\u5316\u7b80. \u6ce8: \u975e\u4e0d\u53d8! self-dual : the dual expression = the original expression. Boolean Algebraic Proofs 1 AB + A'C + BC = AB + A'C (Consensus Theorem) Justification 1: 1 . X = X Justification 2: X + X\u2019 = 1 \u539f\u5f0f = AB + A\u2019C + ABC + A\u2019BC X(Y + Z) = XY + XZ (Distributive Law) = AB + ABC + A\u2019C + A\u2019BC X + Y = Y + X (Commutative Law) = AB . 1 + ABC + A\u2019C . 1 + A\u2019C . B X . 1 = X, X . Y = Y . X (Commutative Law) = AB (1 + C) + A\u2019C (1 + B) X(Y + Z) = XY +XZ (Distributive Law) = AB . 1 + A\u2019C . 1 = AB + A\u2019C X . 1 = X \u6700\u597d\u5c06\u6bcf\u4e00\u6b65\u7528\u7684\u516c\u5f0f\u5199\u51fa\u6765 Boolean Algebraic Proofs 2 (X+Y)'Z + XY' = Y'(X+Z) \u539f\u5f0f = X\u2019 Y\u2019 Z + X Y\u2019 (A + B)\u2019 = A\u2019 . B\u2019 (DeMorgan\u2019s Law) = Y\u2019 X\u2019 Z + Y\u2019 X A . B = B . A (Commutative Law) = Y\u2019 (X\u2019 Z + X) A(B + C) = AB + AC (Distributive Law) = Y\u2019 (X\u2019 + X)(Z + X) A + BC = (A + B)(A + C) (Distributive Law) = Y\u2019 . 1 . (Z + X) A + A\u2019 = 1 = Y\u2019 (X + Z) 1 . A = A, A + B = B + A (Commutative Law) \u7559\u610f\u5b9a\u7406 15 Boolean Algebraic Proofs 3 Complementing Functions Use Demorgan's Theroem interchange AND and OR operators. complement each constant value and literal. Note \u5bf9\u6bd4\u53cd\u51fd\u6570\u548c\u5bf9\u5076\u51fd\u6570. Canonical Forms \u00b6 \u4efb\u4f55\u903b\u8f91\u51fd\u6570, \u53ef\u4ee5\u5199\u4e3a Sum of Minterms(SOM) or Product of Maxterms(POM). Maxterm and Minterm \u00b6 Minterms Minterms are AND terms with each variable present in either true or complemented form.(\u6bcf\u4e2a\u53d8\u91cf\u90fd\u4f1a\u51fa\u73b0\u4e14\u53ea\u51fa\u73b0\u4e00\u6b21) n variables -> \\(2^n\\) minterms Maxterms Maxterms are OR terms with each variable present in either true or complemented form.(\u6bcf\u4e2a\u53d8\u91cf\u90fd\u4f1a\u51fa\u73b0\u4e14\u53ea\u51fa\u73b0\u4e00\u6b21) n variables -> \\(2^n\\) maxterms Example Index Minterm Maxterm 0 \\(\\overline x\\ \\overline y\\) \\(x+y\\) 1 \\(\\overline x\\ y\\) \\(x+\\overline y\\) 2 \\(x\\ \\overline y\\) \\(\\overline x+y\\) 3 \\(x\\ y\\) \\(\\overline x+\\overline y\\) The index is important for describing which variables in the terms are true and which are complemented. index \u5c31\u662f\u5bf9\u5e94\u4f7f\u5f97 minterm = 1 \u7684\u552f\u4e00\u7684\u53d6\u503c. e.g. index = 1 means only when x = 0, y = 1 then \\(\\overline{x} y = 1\\) maxterm \u4e0e minterm \u5bf9\u5076, \u6240\u4ee5 index \u662f\u4f7f\u5f97 maxterm = 0 \u7684\u552f\u4e00\u7684\u53d6\u503c. \u5982 index = 1, \u5219 minterm \u91cc\u5bf9\u5e94\u7684\u5b57\u6bcd\u5e94\u4e3a\u539f\u53d8\u91cf, maxterm \u91cc\u7684\u5b57\u6bcd\u5e94\u4e3a\u53cd\u53d8\u91cf. Note that the Standard Order of variables: usually alphabetically . We find that \\(m_i = \\overline{M_i}\\) . We can implement any function by \"ORing\" the minterms corresponding to \"1\" entries in the function table. These are called the minterms of the function . Minterm Function Example it can also be written as \\(\\sum m(1,4,7) = \\sum(1,4,7)\\) . We can implement any function by \"ANDing\" the maxterms corresponding to \"0\" entries in the function table. These are called the maxterms of the function . Maxterm Function Example it can also be written as \\(\\prod M(0, 2, 3, 5, 7) = \\prod(0, 2, 3, 5, 7)\\) Canonical Forms \u00b6 Canonical Sum of Minterms Boolen function -> Sum of Minterms: expand all terms first to explicitly list all minterms. Do this by \"ANDing\" any term missing a variable v with a term \\((v+\\overline{v})\\) . \\(F=A+\\overline{B} C\\) F = A(B + B\u2019)(C + C\u2019) + (A + A\u2019) B\u2019 C = ABC + ABC\u2019 + AB\u2019C + AB\u2019C\u2019 + AB\u2019C + A\u2019B\u2019C = ABC + ABC\u2019 + AB\u2019C + AB\u2019C\u2019 + A\u2019B\u2019C = m7 + m6 + m5 + m4 + m1 = m1 + m4 + m5 + m6 + m7 Canonical Product of Maxterms The method for Maxterms is similar, just \"ORing\" terms missing variables v with a term equal \\(v\\cdot \\overline{v}\\) then applying the distributive law. \\(f(A,B,C)=A\\overline C + BC+\\overline A \\overline B\\) Function Complements The complement of a function expressed as a sum of minterms is constructed by selecting the minterms missing in the sum-of-minterms canonical forms. \u6bcf\u4e00\u4e2a minterm \u8981\u4e48\u5728\u51fd\u6570\u91cc, \u8981\u4e48\u5728\u5176\u53cd\u51fd\u6570\u91cc. \u6c42\u51fd\u6570\u7684\u53cd\u51fd\u6570, \u53ea\u9700\u8981\u6240\u6709minterms \u53bb\u6389\u539f\u51fd\u6570\u4e2d\u5b58\u5728\u7684 minterms \u5373\u53ef. e.g. \\(F(x,y,z)=\\sum_m(1,3,5,7)\\) then \\(\\overline F(x,y,z) = \\sum_m(0,2,4,6)\\) It also can be writed as \\(\\overline F= \\overline m_1 \\cdot \\overline m_3 \\cdot \\overline m_5 \\cdot \\overline m_7 = M_1 \\cdot M_3 \\cdot M_5 \\cdot M_7=\\prod _M(1,3,5,7)\\) Conversion between Forms Idea : \\(F=\\sum_m m_i\\) while \\(\\overline{F} = \\sum_M M_i\\) Maxterms \u7684\u6c42\u6cd5\u4e0d\u662f\u5f88\u81ea\u7136, \u4e00\u822c\u5148\u6c42\u53cd\u51fd\u6570\u7684 Minterms \u518d\u5c06\u4ed6\u4eec\u53d6\u53cd\u8f6c\u4e3a Minterms. Find the function complement by swapping terms in the list with terms not in the list. Change from products to sums, or vice versa. \u5982\u4e0a\u6587\u7684\u4f8b\u5b50\u4e2d \\(F(x,y,z)=\\sum_m(1,3,5,7), \\overline{F}=\\sum_m(0,2,4,6)\\) \u6545 \\(F = \\prod_M(0,2,4,6)\\) Standard Forms Standard Sum-of-Products (SOP) form: equations are written as an OR of AND terms. Standard Product-of-Sums (POS) form: equations are written as an AND of OR terms SOP and POS are two-level network of gates. SOP The first level consists of n-input AND gates The second level is a single OR gate (with fewer than 2^n^ inputs) Info Standard Forms \u7528\u6765\u505a \u7535\u8def\u5b9e\u73b0 , \u4e00\u822c\u4f1a\u8fdb\u884c SOM POM \u5316\u7b80, \u4f46\u4f1a\u7701\u7565\u4e00\u4e9b\u4e1c\u897f. \u4f9d\u7136\u6309\u7167 Standard Order, \u4f46\u6bcf\u4e00\u9879\u4e2d\u4e0d\u4e00\u5b9a\u9700\u8981\u6240\u6709\u53d8\u91cf. SOP POS \u4e5f\u88ab\u79f0\u4e3a \u4e24\u6781\u51fd\u6570 . \u5982 SOP : \\(ABD+\\overline A \\overline B C +B\\) , POS : \\((A+B)\\cdot (A+\\overline B+\\overline C)\\cdot C\\) \u4ed6\u4eec\u8def\u5f84\u4e0a\u6700\u591a\u53ea\u9700\u8981\u7ecf\u8fc7\u4e24\u4e2a\u7535\u8def\u95e8, \u8fd9\u79f0\u4e3a\u4e8c\u7ea7\u7535\u8def. \u53cd\u89c2 \\((AB+C)(A+C), AB\\overline C+AC(A+B)\\) \u6700\u591a\u5c31\u9700\u8981\u7ecf\u8fc7\u4e09\u4e2a\u7535\u8def\u95e8. \u4e3a\u4ec0\u4e48\u9700\u8981\u964d\u4f4e\u7535\u8def\u95e8\u7684\u7ea7\u6570? \u7535\u8def\u95e8\u6709\u5ef6\u8fdf, \u7ecf\u8fc7\u7684\u7535\u8def\u95e8\u8d8a\u591a\u5ef6\u8fdf\u8d8a\u5927, \u610f\u5473\u7740\u6700\u540e\u7535\u8def\u505a\u51fa\u6765\u7684\u8ba1\u7b97\u673a\u4e0d\u6613\u63d0\u9ad8\u529f\u7387. \\(F = \\overline A\\overline B C + A \\overline B\\overline C + A\\overline B C + AB\\overline C + ABC\\) F = A\u2019 B\u2019 C + A (B\u2019 C\u2019 + B C\u2019 + B\u2019 C + B C) = A\u2019 B\u2019 C + A (B\u2019 + B) (C\u2019 + C) = A\u2019 B\u2019 C + A.1.1 = A\u2019 B\u2019 C + A = B\u2019C + A Circuit Optimization \u00b6 Goal : To obtain the simplest implementation for a given function. Distinct cost criteria we will use: Literal cost (L) Gate input cost (G) Gate input cost with NOTs (GN) Two-Level Optimization \u00b6 Literal Cost \u00b6 literal is a variable or its complement literal cost is the number of literal appearances in a Boolean expression corresponding to the logic circuit diagram. e.g. \\(F=BD+A\\overline BC+ A\\overline C\\overline D\\) its L=8 \\(F=BD+A\\overline BC+ A\\overline B\\overline D + AB\\overline C\\) its L=11 Gate Input Cost \u00b6 Gate input costs is the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations. (G - inverters not counted, GN - inverters counted) For SOP and POS equations: all literal appearances(L) the number of terms excluding single literal terms , (G). e.g. for A+BC its L=3 while G=1 optionally, the number of distinct complemented single literals(GN). e.g. \\(F=BD +A\\overline BC+A\\overline C\\overline D\\) G=8(L)+3=11, GN=11+3=14. \\(F=BD+A\\overline BC+A\\overline B\\overline D+AB\\overline C\\) G=11+4=15, GN=15+3(only BCD)=18. Cost Criteria When do we stop trying to reduce the cost? Do we know when we have a minimum cost? Map Manipulation \u00b6 Karnaugh maps(K-map) A K-map is a collection of squares Each square represents a minterm The collection of squares is a graphical representation of a Boolean function Adjacent squares differ in the value of one variable Alternative algebraic expressions for the same function are derived by recognizing patterns of squares The K-map can be viewed as A reorganized version of the truth table A topologically-warped Venn diagram as used to visualize sets in algebra of sets Two-Variable Maps \u00b6 Example F=x+y y=0 y=1 x=0 0 1 x=1 1 1 For function F(x,y), the two adjacent cells containing 1\u2019s can be combined using the Minimization Theorem: \\(F(x,y)=(x \\ \\overline y + x\\ y ) + (x\\ y + \\overline x \\ y) = x + y\\) Three-Variable Maps \u00b6 Note \u6ce8\u610f\u5217, \u8981\u6309\u7167Gray codes\u7684\u987a\u5e8f\u6392\u5217, \u5373\u76f8\u90bb\u4e24\u5217\u53ea\u76f8\u5dee\u4e00\u4f4d. \u56e0\u6b64\u5217\u6807\u53f7\u4e3a 00 01 11 10. \u76f8\u90bb\u4e24\u4e2a\u5c0f\u65b9\u683c\u90fd\u53ea\u6709\u4e00\u4e2a\u53d8\u91cf\u4e0d\u540c. \u53ef\u4ee5\u5377\u8d77\u6765, \u5373\u6700\u5de6\u8fb9\u4e00\u5217\u548c\u6700\u53f3\u8fb9\u4e00\u5217 Alternatie Map Labeling Example \u6ce8\u610f\u5230 3 2 \u683c\u90fd\u662f 1, \u56e0\u6b64 \\(\\bar xy\\bar z + \\bar x y z = \\bar xy\\) , \u6ca1\u6709\u53d8\u5316\u7684\u53d8\u91cf\u53ef\u4ee5\u4fdd\u7559, \u53d8\u5316\u4e86\u7684\u53d8\u91cf\u53ef\u4ee5\u6d88\u6389. \u540c\u7406 4 5 \u683c\u53ef\u5316\u4e3a \\(x \\bar y\\) 3 7 \u683c: \\(yz\\) ; 6 7\u683c: \\(x y\\) ; 4 6 \u683c \\(: x\\bar z\\) Combining Squares \u53ef\u4ee5\u753b 2^n^ \u5927\u5c0f\u7684\u65b9\u5f62\u683c(\u5373\u4e00\u6b21\u8981\u5305\u62ec 2^n^ \u4e2a\u5c0f\u65b9\u683c) For 3-variable K-Map : One square represents a minterm with three variables Two adjacent squares represent a product term with two variables Four \u201cadjacent\u201d terms represent a product term with one variable Eight \u201cadjacent\u201d terms is the function of all ones (no variables) = 1. Example Warning \u683c\u96f7\u7801! \u4e24\u4fa7\u53ef\u4ee5\u5377\u8d77\u6765 \u5316\u7b80\u601d\u8def: \u7528\u6700\u5927\u7684\u6700\u5c11\u7684\u5708\u628a\u6240\u6709\u7684 1 \u5708\u5b8c.(\u5708\u4e0e\u5708\u4e4b\u95f4\u53ef\u4ee5\u6709\u4ea4\u53c9) \u4e00\u5b9a\u662f SOP Example Four Variable Maps \u00b6 Note \u6ce8\u610f\u56db\u4e2a\u89d2\u4e5f\u53ef\u4ee5\u5377(0 2 8 10 -> \\(\\overline X \\ \\overline Z\\) ) Example F = XZ + X'Z' \u5316\u7b80\u7ed3\u679c\u4e0d\u552f\u4e00 Don't Cares(\u65e0\u5173\u9879) in K-Maps \u00b6 By placing \u201cdon't cares\u201d (an \u201cx\u201d entry) in the function table or map, the cost of the logic circuit may be lowered. \u5982\u6211\u4eec\u628a BCD \u7801\u4f5c\u4e3a\u8f93\u5165, \u6709\u6548\u6570\u5b57 0 - 9, \u5982\u679c\u90a3\u4e48 9 \u4ee5\u4e0a\u7684\u8f93\u5165\u7ec4\u5408\u6211\u4eec\u4e0d\u5728\u4e4e\u8f93\u51fa\u7ed3\u679c, \u79f0\u4e3a\u65e0\u5173\u9879, \u5728\u5361\u8bfa\u56fe\u4e0a\u753b x. BCD 5 or More X \u53ef\u5708\u53ef\u4e0d\u5708! Example Find the optimum POS solution: \\(F(A,B,C,D)=\\sum\\limits_m(3,9,11,12,13,14,15)+\\sum d(1,4,6)\\) Hint: Use \\(\\overline F\\) and complement it to get the result. ans: F' = B' D' + A' B (\u6c42 F' \u65f6\u5728\u5361\u8bfa\u56fe\u4e2d\u5708\u7a7a\u683c\uff0c\u800c\u4e0d\u662f 1) F = (B + D)(A + B') Systematic Simplification \u00b6 A Prime Implicant (\u8d28\u8574\u542b\u9879) is a product term obtained by combining the maximum possible number of adjacent squares in the map into a rectangle with the number of squares a power of 2. A prime implicant is called an Essential Prime Implicant (\u5fc5\u8981\u8d28\u8574\u6db5\u9879) if it is the only prime implicant that covers (includes) one or more minterms. \u8d28\u8574\u6db5\u9879\u662f\u5bf9\u67d0\u4e2a \"1\" \u800c\u8a00\u5305\u62ec\u5b83\u7684\u6700\u5927\u65b9\u5f62\u3002\u5bf9\u67d0\u4e2a \"1\" \u800c\u8a00\u5982\u679c\u5b83\u7684\u8d28\u8574\u6db5\u9879\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u5b83\u662f\u5fc5\u8981\u7684\u3002 Find All Prime Implicants Find Essential ones \u5904\u7406\u5269\u4e0b\u7684 1 Example \u54ea\u4e9b 1 \u53ea\u88ab\u4e00\u4e2a\u8d28\u8574\u542b\u5708\u5305\u56f4\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u5fc5\u8981\u8d28\u8574\u6db5\u9879 Example Find all prime implicants for: \\(G(A,B,C,D)=\\sum\\limits_m(0,2,3,4,7,12,13,14,15)\\) Hint: There are seven prime implicants! Prime Implicants are AB, B C' D', A' C' D', A' B' D', A' B' C, A' C D, B C D. ony AB Essential. Multi-Level Circuit Optimization \u00b6 \u4e24\u7ea7\u95e8\u7684\u5ef6\u8fdf\u4f4e\uff0c\u4f46 cost \u9ad8\u3002 Transformation Examples Integrated Circuits \u00b6 \u96c6\u6210\u7535\u8def Integrated circuit (informally, a \u201cchip\u201d ) is a semiconductor crystal (most often silicon) containing the electronic components for the digital gates and storage elements which are interconnected on the chip. Terminology - Levels of chip integration SSI (small-scale integrated) - fewer than 10 gates MSI (medium-scale integrated) - 10 to 100 gates LSI (large-scale integrated) - 100 to thousands of gates VLSI (very large-scale integrated) - thousands to 100s of millions of gates Technology Parameters Fan-in \u6247\u5165\u7cfb\u6570 \u2013 the number of inputs available on a gate \u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u7aef\u7684\u4e0a\u9650 \u7406\u60f3\u60c5\u51b5\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u53ef\u4ee5\u63a5\u65e0\u6570\u4e2a\u95e8\u7684\u8f93\u5165\uff0c\u4f46\u5b9e\u9645\u4e0a\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u7aef\u90fd\u4f1a\u82b1\u8d39\u4e00\u4e9b\u7535\u6d41\uff0c\u800c\u95e8\u8f93\u51fa\u7684\u7535\u6d41\u662f\u6709\u9650\u7684\uff0c\u4ece\u96c6\u6210\u7535\u8def\u672c\u8eab\u4f1a\u8981\u6c42\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u6700\u591a\u80fd\u62c9\u591a\u5c11\u95e8\u7684\u8f93\u5165\u3002 Fan-out \u6247\u51fa\u7cfb\u6570 \u2013 the number of standard loads driven by a gate output \u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u5e26\u4e86\u5f88\u591a\u95e8\u7684\u8f93\u5165\uff1f\uff08\u50cf\u706b\u8f66\u5934\u5e26\u4e86\u5f88\u591a\u8f66\u53a2\uff09 \u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u4e0d\u80fd\u63a5\u5230\u592a\u591a\u95e8\u7684\u8f93\u5165\u4e0a\u53bb\uff0c\u4e00\u822c\u4f1a\u7528 buffer \u505a\u7f13\u51b2 e.g. 1 standard load equals the load contributed by the input of 1 inverter. Transition time - the time required for the gate output to change from H to L, \\(t_{HL}\\) , or from L to H, \\(t_{LH}\\) \u5e26\u7684\u95e8\u8d8a\u591a\uff0c\u4e0a\u5347\u65f6\u95f4\u5c31\u8d8a\u591a\u3002 \u6211\u4eec\u4f1a\u9650\u5236\u8fc7\u6e21\u65f6\u95f4\uff0c\u8bbe\u7f6e maximum fan-out Logic Levels \u2013 the signal value ranges for 1 and 0 on the inputs and 1 and 0 on the outputs (see Figure 1-1) Noise Margin \u2013 the maximum external noise voltage superimposed on a normal input value that will not cause an undesirable change in the circuit output Cost for a gate - a measure of the contribution by the gate to the cost of the integrated circuit Ignoring the wiring area, the gate area is roughly proportional to the gate input count. Propagation Delay \u2013 The time required for a change in the value of a signal to propagate from an input to an output Power Dissipation \u2013 the amount of power drawn from the power supply and consumed by the gate Propagation Delay \u00b6 Delay is usually measured at the 50% point with respect to the H and L output voltage levels. High-to-low ( \\(t_{PHL}\\) ) and low-to-high ( \\(t_{PLH}\\) ) output signal changes may have different propagation delays. \u6ce8\u610f HL/PL \u6307\u7684\u662f \u8f93\u51fa\u7aef \u7684\u65f6\u95f4\u53d8\u5316\u3002 Info \u5982\u679c\u8fd9\u91cc\u6709 n \u4e2a\u975e\u95e8\u4e32\u8054 \u8ba1\u7b97 \\(t_{PHL}\\) \u9700\u8981 \\(t_{3PHL} + t_{2PLH} + t_{1PHL}\\) \u4ece\u7ed3\u679c\u5012\u63a8 \u5982\u679c\u53ea\u6c42 \\(t_{pd}\\) \u53ea\u9700\u8981\u628a\u6bcf\u7ea7\u7684 \\(t_{pd}\\) \u76f8\u52a0\u5373\u53ef\u3002 Delay Mode Transport delay - a change in the output in response to a change on the inputs occurs after a fixed specified delay \u8f93\u51fa\u6574\u4f53\u5f80\u540e\u79fb Inertial delay - similar to transport delay, except that if the input changes such that the output is to change twice in a time interval less than the rejection time , the output changes do not occur. Models typical electronic circuit behavior, namely, rejects narrow \u201cpulses\u201d on the outputs \u9664\u4e86\u8f93\u51fa\u5f80\u540e\u79fb\uff0c\u5728\u60ef\u6027\u5ef6\u8fdf\u4e0b\uff0c\u5f88\u7a84\u7684\u8109\u51b2\uff08\u5c0f\u4e8e rejection time\uff09\u4f1a\u88ab\u6d88\u9664\u6389\u3002 Example \u84dd\u7ebf\u8868\u660e propagation time, \u9ed1\u7ebf\u8868\u660e rejection time. \u56e0\u6b64 ab de \u8fd9\u4e2a\u8109\u51b2\u88ab\u5403\u6389 Circuit Delay Example \u6700\u5f00\u59cb S \u7531 0->1 \u540e 0.9s Y \u4ece 0->1 S \u4ece 1->0 \u540e\u4e0b\u65b9\u7684\u4e0e\u95e8 0.4s \u540e\u4f1a\u4ece 1->0, \u4f46\u4e0a\u65b9\u7684\u4e0e\u95e8 0.6s \u540e\u624d\u4f1a\u4ece 0->1. \u4f46 0.9s \u540e Y \u624d\u4f1a 1->0, \u6b64\u540e\u518d\u8fc7 0.2s(\u5171 1.1s) \u540e Y \u4ece 0-> 1. \u8fd9\u91cc Y \u51fa\u73b0\u4e86\u4e00\u4e2a\u5c0f\u5c16\u5cf0\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u7535\u8def\u4ea7\u751f\u7684 \u5192\u9669 \u3002 S \u7684\u4e24\u6761\u8def\u5f84\u6211\u4eec\u53d1\u73b0\u5ef6\u8fdf\u4e0d\u540c\uff0c\u8fd9\u79cd\u6211\u4eec\u79f0\u4e4b\u4e3a\u7535\u8def\u4e2d\u7684 \u7ade\u4e89 \u3002 Fan-out and Delay The fan-out loading a gate\u2019s output affects the gate\u2019s propagation delay\u3002 SL (Standard Load): \u4ee5\u975e\u95e8\u4e3a\u6807\u51c6\u3002\u5e26\u4e00\u4e2a\u975e\u95e8\u9700\u8981...\u7684\u8d1f\u8f7d Example One realistic equation for tpd for a NAND gate with 4 inputs is: \\(t_{pd} = 0.07 + 0.021 SL\\) ns SL is the number of standard loads the gate is driving, i. e. , its fan-out in standard loads For SL = 4.5, tpd = 0.165 ns \u7531\u5de5\u827a\u7a0b\u5ea6+\u8d1f\u8f7d\u60c5\u51b5\u51b3\u5b9a Cost/Performance Tradeoffs Example NAND gate G with 20 standard loads on its output has a delay of 0.45 ns and has a normalized cost of 2.0. A buffer H has a normalized cost of 1.5. The NAND gate driving the buffer with 20 standard loads gives a total delay of 0.33 ns 1. The cost of this portion of the circuit cannot be more than 2.5 2. The delay of this portion of the circuit cannot be more than 0.40 ns 3. The delay of this portion of the circuit must be less than 0.40 ns and the cost less than 3.0 ans: 1. No buffer 2. Use buffer 3. Irrelevant - buffer needed to satisfy delay constraint, but cannot satisfy cost constraint. Additional Gates and Circuits \u00b6 Other Gate Types \u00b6 Why? Implementation feasibility and low cost Power in implementing Boolean functions Convenient conceptual representation Gate classifications Primitive gate - a gate that can be described using a single primitive operation type (AND or OR) plus an optional inversion(s). Complex gate - a gate that requires more than one primitive operation type for its description Primitive gate \u00b6 Buffer \u00b6 \u6ca1\u6709\u903b\u8f91\u529f\u80fd\uff0c\u4f46\u6709\u5f88\u5f3a\u7684\u5e26\u8d1f\u8f7d\u7684\u80fd\u529b\uff0c\u80fd\u591f\u62c9\u9ad8\u7535\u5e73\uff0c\u964d\u4f4e\u4f20\u8f93\u5ef6\u8fdf\u3002 NAND \u00b6 \u4e0e\u975e\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f \u5148\u975e\u540e\u6216 \\(F=\\overline{X} + \\overline{Y} + \\overline{Z}\\) A NAND gate with one input degenerates to an inverter. Universal gate - a gate type that can implement any Boolean function. \u6700\u9ad8\u6548 \u6211\u4eec\u4e00\u822c\u4e0d\u4f7f\u7528\u4e0e\u975e\u95e8\u505a\u903b\u8f91\u8fd0\u7b97\uff0c\u56e0\u4e3a\u4ed6\u4e0d\u6ee1\u8db3\u4ea4\u6362\u3001\u7ed3\u5408\u5f8b\u3002\u4e00\u822c\u5728\u6700\u540e\u628a\u4e0e\u6216\u975e\u8f6c\u4e3a\u7528\u4e0e\u975e\u5b9e\u73b0\u3002 NOR \u00b6 \u4e5f\u53ef\u4ee5\u5229\u7528 De Morgan \u53d8\u4e3a \u5148\u975e\u540e\u4e0e\uff0c\u5176\u4ed6\u540c\u4e0e\u975e\u3002 Complex gate \u00b6 Exclusive OR/ Exclusive NOR \u00b6 eXclusive OR(XOR) and XNORs gate Definitions : \\(X\\oplus Y = X\\ \\overline Y +\\overline X \\ Y\\) \\(\\overline {X\\oplus Y} = X\\ \\overline Y +\\overline X \\ Y\\) the XNOR function also known as the equivalence function , denoted by the operator ' \\(\\equiv\\) '. \u91cd\u8981\u516c\u5f0f\uff08\u8981\u8bb0\uff09 (\u7b2c\u4e00\u884c & \u6700\u540e\u4e00\u884c\u5f88\u91cd\u8981) \u4e25\u683c\u6765\u8bf4\uff0c\u53ea\u6709\u4e24\u53d8\u91cf\u7684\u5f02\u6216\u3002\u5bf9\u4e8e\u591a\u4e8e\u4e24\u4e2a\u8f93\u5165\u7684\uff0c\u6211\u4eec\u7528\u5947\u51fd\u6570/\u5076\u51fd\u6570\u4ee3\u66ff\u3002 \u5bf9\u4e8e\u4e09\u53d8\u91cf\u7684\u5f02\u6216 \\(X\\oplus Y = \\overline X \\ \\overline Y \\ Z + \\overline X \\ Y \\overline Z + X \\ \\overline Y \\ \\overline Z + X\\ Y\\ Z\\) \u5361\u8bfa\u56fe\u65e0\u6cd5\u518d\u5316\u7b80 1 1 1 1 \u6211\u4eec\u79f0\u5b83\u4e3a\u5947\u51fd\u6570\uff0c\u56e0\u4e3a minterm \u91cc 1 \u7684\u4e2a\u6570( \\(=\\sum m(1(001),2(010),4(100),7(111))\\) )\u4e3a\u5947\u6570\u3002\u5176\u53cd\u51fd\u6570\u4e3a\u5076\u51fd\u6570\u3002 Symbol \u6ce8\u610f bubble \u6ce1\u6ce1(\u8868\u793a inverter) Implementation \u4e0b\u9762\u7684\u5b9e\u73b0\u9700\u8981 \\(4\\times 4=16\\) \u4e2a\u6676\u4f53\u7ba1\u3002\u4f46\u5b9e\u9645\u4e2d\u6700\u7b80\u5355\u53ea\u9700\u8981 10 \u4e2a\u6676\u4f53\u7ba1\uff0c\u5c31\u53ef\u4ee5\u6784\u9020\u51fa XOR \u95e8\u3002 Odd and Even Functions \u00b6 The 1s of an odd function correspond to minterms having an index with an odd number of 1s. The 1s of an even function correspond to minterms having an index with an even number of 1s. Example xor \u90fd\u662f\u5947\u51fd\u6570. \u5982 \\(F=(X\\oplus Y)\\oplus Z \\\\ F=(W\\oplus X)\\oplus (Y\\oplus Z)\\) Parity Generators and Checkers \u5947\u5076\u6821\u9a8c\uff1a\u4f20\u8f93\u82e5\u5e72\u4e2a\u6570\u636e\u4f4d\uff0c\u589e\u52a0\u4e00\u4e2a\u6570\u636e\u4f4d\uff0c\u7528\u6765\u8868\u793a\u6570\u636e\u4f4d\u7684\u5947\u5076\u6027\u3002\u8f93\u5165\u548c\u8f93\u51fa\u7aef\u7684\u5947\u5076\u4f4d\u5e94\u8be5\u76f8\u540c\u3002 Example Hi-Impedance Outputs \u00b6 \u9ad8\u963b\u8f93\u51fa Three-state logic adds a third logic value, Hi-Impedance (Hi-Z), giving three states: 0, 1, and Hi-Z on the outputs. \u6709\u6761\u4ef6\u60c5\u51b5\u4e0b\u5141\u8bb8\u95e8\u7684\u8f93\u51fa\u63a5\u5728\u4e00\u8d77\u3002 3-State Buffer Resolving 3-State Values on a Connection \u628a\u4e24\u4e2a\u4e09\u6001\u95e8\u7684\u8f93\u51fa\u63a5\u5728\u4e00\u8d77\uff1a Resolution Table B1 B0 OUT 0 Hi-Z 0 1 Hi-Z 1 Hi-Z 0 0 Hi-Z 1 1 Hi-Z Hi-Z Hi-Z Info \u4e0d\u5141\u8bb8\u540c\u65f6\u4e24\u4e2a\u95e8\u540c\u65f6\u8f93\u51fa\u6709\u6548\u8f93\u51fa\uff01\u5426\u5219\u53ef\u80fd\u4ea7\u751f\u5927\u7535\u6d41\u635f\u574f\u7535\u8def\u3002 \u56e0\u6b64\u5bf9\u4e8e n \u4e2a\u4e09\u6001\u95e8\uff0c\u5171 2n+1 \u79cd\u6709\u6548\u7ec4\u5408\u3002 3-State Logic Circuit \u6b64\u65f6\uff0c\u4e24\u4e2a\u4e09\u6001\u95e8\u4e0d\u4f1a\u540c\u65f6\u8f93\u51fa\u6709\u6548\u8f93\u51fa\u3002 More Complex Gates \u00b6 The remaining complex gates are SOP or POS structures with and without an output inverter. A - AND O - OR I - Inverter Numbers of inputs on first-level \u201cgates\u201d or directly to second-level \u201cgates\u201d e.g. AOI(AND-OR-Invert), 2-2-1 AO means 2-input ANDS driving an OR with one additional OR input.","title":"\u7ec4\u5408\u903b\u8f91\u7535\u8def"},{"location":"Logic/logic02/#combinational-logic-circuits","text":"Abstract \u5e03\u5c14\u4ee3\u6570(Boolean)\u7684\u6982\u5ff5 Boolean Algebra \u53d8\u91cf\u4e0e\u771f\u503c\u7684\u5173\u7cfb Binary Variables \u4e8c\u503c\u903b\u8f91\u548c\u95e8 Binary Logic and Gates \u4e09\u79cd\u57fa\u672c\u8fd0\u7b97 Three basic logic operations \u57fa\u672c\u8fd0\u7b97\u6cd5\u5219\u4e0e\u7535\u8def\u7b26\u53f7 Operation Definitions and Logic Gate Symbols \u57fa\u672c\u8fd0\u7b97\u516c\u5f0f\u3001\u89c4\u5219\u3001\u53cd\u6f14\uff0c\u5bf9\u5076\u89c4\u5219 basic identities, DeMorgan\u2019s Theorem, Dual Theorem \u57fa\u672c\u903b\u8f91\u7535\u8def\u4e0e\u5176\u903b\u8f91\u7279\u6027\u3002\u4e0e\uff0c\u6216\u7684\u5f00\u3001\u5173\u95e8\u7279\u70b9\uff0c\u5f02\u6216\u7684\u540c\u76f8\u3001\u53cd\u76f8\u6027\u8d28 Logic Gates and implementation, AND, OR gates used to control gate open or close, XOR gates used as a controllable invertor \u903b\u8f91\u51fd\u6570\u7684\u5316\u7b80 Simplification \u5316\u7b80\u7684\u6807\u51c6\u3001\u516c\u5f0f\u5316\u5316\u7b80\u3001\u6700\u5c0f\u9879\uff0c\u6700\u5927\u9879\u53ca\u5176\u76f8\u4e92\u5173\u7cfb\u3001\u5361\u8bfa\u56fe\u5316\u7b80\u3001\u8d28\u8574\u6db5\u9879\u3001\u5fc5\u8981\u8d28\u8574\u6db5\u9879\uff0c\u95e8\u8f93\u5165\u6210\u672c Boolean Algebraic Proof, Boolean Function Optimization, Canonical Forms, Minterms, Maxterms and their relationship, K-map simplification, Prime Implicants, Gate input Cotes \u542b\u4efb\u610f\u9879\u51fd\u6570\u5316\u7b80 Don't Cares in K-Maps \u4e0d\u540c\u51fd\u6570\u5f62\u5f0f\u7684\u53d8\u6362\u53ca\u4e0e\u6700\u5c0f\u9879\u7684\u5173\u7cfb SOM form, POM form, Standard forms, SOP form, POS form, Conversion between forms \u51fd\u6570\u7684\u4e94\u79cd\u8868\u793a\u5f62\u5f0f\uff1a\u771f\u503c\u8868\u3001\u903b\u8f91\u89e3\u6790\u5f0f\u3001\u6ce2\u5f62\u56fe\u3001\u5361\u8bfa\u56fe\u3001\u903b\u8f91\u7535\u8def\u56fe Truth Table, Boolean Equations, Wave form, K-map, Logic Diagram \u9ad8\u963b\u8f93\u51fa(\u4e09\u6001\u95e8) Hi-Impedance Outputs, Three state buffer","title":"Combinational Logic Circuits"},{"location":"Logic/logic02/#gate-circuits-and-boolen-equations","text":"","title":"Gate Circuits and Boolen Equations"},{"location":"Logic/logic02/#binary-logic-and-gates","text":"","title":"Binary Logic and Gates"},{"location":"Logic/logic02/#binary-logic","text":"Binary variables take one of two values. e.g. True/False, On/Off, Yes/No, 1/0... Logical variables operate on binary variables and binary values . AND denoted by a dot( \\(\\cdot\\) or \\(\\cap\\) ) OR denoted by a plus(+ or \\(\\cup\\) ) NOT denoted by \\(\\overline{a}\\) ' or ~ Truth tables a tabular listing of the values of a function for all possible combinations of values on its arguments. Logical Function Implementation :","title":"Binary Logic"},{"location":"Logic/logic02/#logical-gates","text":"PMOS / NMOS \u4e0a\u9762\u7684\u662f PMOS, \u4e0b\u9762\u662f NMOS. PMOS \u662f P \u65ad N \u901a, NMOS \u662f N \u65ad P \u901a. \u8be6\u89c1 ICS notes NAND/NOR \u624d\u662f\u6700\u57fa\u672c\u7684, \u4ed6\u4eec\u53ef\u4ee5\u72ec\u7acb\u5b9e\u73b0 OR AND NOT . Question \u80fd\u4e0d\u80fd\u628a\u4e24\u4e2a\u903b\u8f91\u95e8\u7684\u8f93\u51fa\u63a5\u5728\u4e00\u8d77?(\u5982 NAND \u548c NOT \u7684\u8f93\u51fa)? -> \u53ef\u80fd\u4e00\u4e2a\u8f93\u51fa\u662f 1, \u4e00\u4e2a\u8f93\u51fa\u662f 0. \u77ed\u8def, \u82af\u7247\u70e7\u6389, \u5192\u70df. \u80fd\u4e0d\u80fd\u628a NOT \u95e8\u4e2d\u53d8\u4e3a X \u548c Y \u4e24\u4e2a\u8f93\u5165\u5206\u522b\u5bf9\u5e94 CMOS \u548c NMOS? ->\u4e0d\u80fd. \u5f53 X,Y=1,0 \u65f6\u4e0a\u4e0b\u90fd\u63a5\u901a, \u77ed\u8def. \u5f53 X,Y=0,1 \u65f6\u8f93\u51fa\u89d2\u5904\u4e8e HZ(\u9ad8\u963b\u6001). \u4e09\u6001\u95e8\u5141\u8bb8\u5668\u4ef6\u8f93\u51fa\u8fd9\u6837\u7684\u7ed3\u679c. Logical Gate Symbols and Behavior waveform behavior in time: Note \u6ce8\u610f\u7ad6\u5411\u5173\u7cfb. \u7ed3\u679c\u5728\u8f93\u5165\u6539\u53d8\u7684\u65f6\u5019\u6539\u53d8. \u6700\u597d\u7528\u76f4\u5c3a\u94c5\u7b14\u753b\u51fa\u7ad6\u5411\u865a\u7ebf. Gate Delay In actual physical gates, if one or more input changes causes the output to change, the output change does not occur instantaneously. The delay between an input change(s) and the resulting output change is the gate delay denoted by tG. \u5f88\u591a\u65f6\u5019\u6211\u4eec\u4f1a\u505a tradeoff, \u4f7f\u7528\u66f4\u6602\u8d35\u7684\u5668\u6750\u6765\u83b7\u5f97\u66f4\u5c0f\u7684 delay. Note \u53ea\u6709\u771f\u503c\u8868\u662f\u552f\u4e00, \u786e\u5b9a\u7684. \u4f46\u516c\u5f0f, \u539f\u7406\u56fe\u53ef\u4ee5\u6709\u591a\u79cd\u5f62\u5f0f.","title":"Logical Gates"},{"location":"Logic/logic02/#boolen-algebra","text":"(\u5de6\u53f3\u516c\u5f0f\u662f\u5bf9\u5076\u7684) precedence : parentheses > NOT > AND > OR The dual of an algebraic expression is obtained by interchanging + and \u00b7 and interchanging 0\u2019s and 1\u2019s. \u5bf9\u5076\u5f0f\u53ef\u4ee5\u7528\u4e8e\u51fd\u6570\u5316\u7b80. \u6ce8: \u975e\u4e0d\u53d8! self-dual : the dual expression = the original expression. Boolean Algebraic Proofs 1 AB + A'C + BC = AB + A'C (Consensus Theorem) Justification 1: 1 . X = X Justification 2: X + X\u2019 = 1 \u539f\u5f0f = AB + A\u2019C + ABC + A\u2019BC X(Y + Z) = XY + XZ (Distributive Law) = AB + ABC + A\u2019C + A\u2019BC X + Y = Y + X (Commutative Law) = AB . 1 + ABC + A\u2019C . 1 + A\u2019C . B X . 1 = X, X . Y = Y . X (Commutative Law) = AB (1 + C) + A\u2019C (1 + B) X(Y + Z) = XY +XZ (Distributive Law) = AB . 1 + A\u2019C . 1 = AB + A\u2019C X . 1 = X \u6700\u597d\u5c06\u6bcf\u4e00\u6b65\u7528\u7684\u516c\u5f0f\u5199\u51fa\u6765 Boolean Algebraic Proofs 2 (X+Y)'Z + XY' = Y'(X+Z) \u539f\u5f0f = X\u2019 Y\u2019 Z + X Y\u2019 (A + B)\u2019 = A\u2019 . B\u2019 (DeMorgan\u2019s Law) = Y\u2019 X\u2019 Z + Y\u2019 X A . B = B . A (Commutative Law) = Y\u2019 (X\u2019 Z + X) A(B + C) = AB + AC (Distributive Law) = Y\u2019 (X\u2019 + X)(Z + X) A + BC = (A + B)(A + C) (Distributive Law) = Y\u2019 . 1 . (Z + X) A + A\u2019 = 1 = Y\u2019 (X + Z) 1 . A = A, A + B = B + A (Commutative Law) \u7559\u610f\u5b9a\u7406 15 Boolean Algebraic Proofs 3 Complementing Functions Use Demorgan's Theroem interchange AND and OR operators. complement each constant value and literal. Note \u5bf9\u6bd4\u53cd\u51fd\u6570\u548c\u5bf9\u5076\u51fd\u6570.","title":"Boolen Algebra"},{"location":"Logic/logic02/#canonical-forms","text":"\u4efb\u4f55\u903b\u8f91\u51fd\u6570, \u53ef\u4ee5\u5199\u4e3a Sum of Minterms(SOM) or Product of Maxterms(POM).","title":"Canonical Forms"},{"location":"Logic/logic02/#maxterm-and-minterm","text":"Minterms Minterms are AND terms with each variable present in either true or complemented form.(\u6bcf\u4e2a\u53d8\u91cf\u90fd\u4f1a\u51fa\u73b0\u4e14\u53ea\u51fa\u73b0\u4e00\u6b21) n variables -> \\(2^n\\) minterms Maxterms Maxterms are OR terms with each variable present in either true or complemented form.(\u6bcf\u4e2a\u53d8\u91cf\u90fd\u4f1a\u51fa\u73b0\u4e14\u53ea\u51fa\u73b0\u4e00\u6b21) n variables -> \\(2^n\\) maxterms Example Index Minterm Maxterm 0 \\(\\overline x\\ \\overline y\\) \\(x+y\\) 1 \\(\\overline x\\ y\\) \\(x+\\overline y\\) 2 \\(x\\ \\overline y\\) \\(\\overline x+y\\) 3 \\(x\\ y\\) \\(\\overline x+\\overline y\\) The index is important for describing which variables in the terms are true and which are complemented. index \u5c31\u662f\u5bf9\u5e94\u4f7f\u5f97 minterm = 1 \u7684\u552f\u4e00\u7684\u53d6\u503c. e.g. index = 1 means only when x = 0, y = 1 then \\(\\overline{x} y = 1\\) maxterm \u4e0e minterm \u5bf9\u5076, \u6240\u4ee5 index \u662f\u4f7f\u5f97 maxterm = 0 \u7684\u552f\u4e00\u7684\u53d6\u503c. \u5982 index = 1, \u5219 minterm \u91cc\u5bf9\u5e94\u7684\u5b57\u6bcd\u5e94\u4e3a\u539f\u53d8\u91cf, maxterm \u91cc\u7684\u5b57\u6bcd\u5e94\u4e3a\u53cd\u53d8\u91cf. Note that the Standard Order of variables: usually alphabetically . We find that \\(m_i = \\overline{M_i}\\) . We can implement any function by \"ORing\" the minterms corresponding to \"1\" entries in the function table. These are called the minterms of the function . Minterm Function Example it can also be written as \\(\\sum m(1,4,7) = \\sum(1,4,7)\\) . We can implement any function by \"ANDing\" the maxterms corresponding to \"0\" entries in the function table. These are called the maxterms of the function . Maxterm Function Example it can also be written as \\(\\prod M(0, 2, 3, 5, 7) = \\prod(0, 2, 3, 5, 7)\\)","title":"Maxterm and Minterm"},{"location":"Logic/logic02/#canonical-forms_1","text":"Canonical Sum of Minterms Boolen function -> Sum of Minterms: expand all terms first to explicitly list all minterms. Do this by \"ANDing\" any term missing a variable v with a term \\((v+\\overline{v})\\) . \\(F=A+\\overline{B} C\\) F = A(B + B\u2019)(C + C\u2019) + (A + A\u2019) B\u2019 C = ABC + ABC\u2019 + AB\u2019C + AB\u2019C\u2019 + AB\u2019C + A\u2019B\u2019C = ABC + ABC\u2019 + AB\u2019C + AB\u2019C\u2019 + A\u2019B\u2019C = m7 + m6 + m5 + m4 + m1 = m1 + m4 + m5 + m6 + m7 Canonical Product of Maxterms The method for Maxterms is similar, just \"ORing\" terms missing variables v with a term equal \\(v\\cdot \\overline{v}\\) then applying the distributive law. \\(f(A,B,C)=A\\overline C + BC+\\overline A \\overline B\\) Function Complements The complement of a function expressed as a sum of minterms is constructed by selecting the minterms missing in the sum-of-minterms canonical forms. \u6bcf\u4e00\u4e2a minterm \u8981\u4e48\u5728\u51fd\u6570\u91cc, \u8981\u4e48\u5728\u5176\u53cd\u51fd\u6570\u91cc. \u6c42\u51fd\u6570\u7684\u53cd\u51fd\u6570, \u53ea\u9700\u8981\u6240\u6709minterms \u53bb\u6389\u539f\u51fd\u6570\u4e2d\u5b58\u5728\u7684 minterms \u5373\u53ef. e.g. \\(F(x,y,z)=\\sum_m(1,3,5,7)\\) then \\(\\overline F(x,y,z) = \\sum_m(0,2,4,6)\\) It also can be writed as \\(\\overline F= \\overline m_1 \\cdot \\overline m_3 \\cdot \\overline m_5 \\cdot \\overline m_7 = M_1 \\cdot M_3 \\cdot M_5 \\cdot M_7=\\prod _M(1,3,5,7)\\) Conversion between Forms Idea : \\(F=\\sum_m m_i\\) while \\(\\overline{F} = \\sum_M M_i\\) Maxterms \u7684\u6c42\u6cd5\u4e0d\u662f\u5f88\u81ea\u7136, \u4e00\u822c\u5148\u6c42\u53cd\u51fd\u6570\u7684 Minterms \u518d\u5c06\u4ed6\u4eec\u53d6\u53cd\u8f6c\u4e3a Minterms. Find the function complement by swapping terms in the list with terms not in the list. Change from products to sums, or vice versa. \u5982\u4e0a\u6587\u7684\u4f8b\u5b50\u4e2d \\(F(x,y,z)=\\sum_m(1,3,5,7), \\overline{F}=\\sum_m(0,2,4,6)\\) \u6545 \\(F = \\prod_M(0,2,4,6)\\) Standard Forms Standard Sum-of-Products (SOP) form: equations are written as an OR of AND terms. Standard Product-of-Sums (POS) form: equations are written as an AND of OR terms SOP and POS are two-level network of gates. SOP The first level consists of n-input AND gates The second level is a single OR gate (with fewer than 2^n^ inputs) Info Standard Forms \u7528\u6765\u505a \u7535\u8def\u5b9e\u73b0 , \u4e00\u822c\u4f1a\u8fdb\u884c SOM POM \u5316\u7b80, \u4f46\u4f1a\u7701\u7565\u4e00\u4e9b\u4e1c\u897f. \u4f9d\u7136\u6309\u7167 Standard Order, \u4f46\u6bcf\u4e00\u9879\u4e2d\u4e0d\u4e00\u5b9a\u9700\u8981\u6240\u6709\u53d8\u91cf. SOP POS \u4e5f\u88ab\u79f0\u4e3a \u4e24\u6781\u51fd\u6570 . \u5982 SOP : \\(ABD+\\overline A \\overline B C +B\\) , POS : \\((A+B)\\cdot (A+\\overline B+\\overline C)\\cdot C\\) \u4ed6\u4eec\u8def\u5f84\u4e0a\u6700\u591a\u53ea\u9700\u8981\u7ecf\u8fc7\u4e24\u4e2a\u7535\u8def\u95e8, \u8fd9\u79f0\u4e3a\u4e8c\u7ea7\u7535\u8def. \u53cd\u89c2 \\((AB+C)(A+C), AB\\overline C+AC(A+B)\\) \u6700\u591a\u5c31\u9700\u8981\u7ecf\u8fc7\u4e09\u4e2a\u7535\u8def\u95e8. \u4e3a\u4ec0\u4e48\u9700\u8981\u964d\u4f4e\u7535\u8def\u95e8\u7684\u7ea7\u6570? \u7535\u8def\u95e8\u6709\u5ef6\u8fdf, \u7ecf\u8fc7\u7684\u7535\u8def\u95e8\u8d8a\u591a\u5ef6\u8fdf\u8d8a\u5927, \u610f\u5473\u7740\u6700\u540e\u7535\u8def\u505a\u51fa\u6765\u7684\u8ba1\u7b97\u673a\u4e0d\u6613\u63d0\u9ad8\u529f\u7387. \\(F = \\overline A\\overline B C + A \\overline B\\overline C + A\\overline B C + AB\\overline C + ABC\\) F = A\u2019 B\u2019 C + A (B\u2019 C\u2019 + B C\u2019 + B\u2019 C + B C) = A\u2019 B\u2019 C + A (B\u2019 + B) (C\u2019 + C) = A\u2019 B\u2019 C + A.1.1 = A\u2019 B\u2019 C + A = B\u2019C + A","title":"Canonical Forms"},{"location":"Logic/logic02/#circuit-optimization","text":"Goal : To obtain the simplest implementation for a given function. Distinct cost criteria we will use: Literal cost (L) Gate input cost (G) Gate input cost with NOTs (GN)","title":"Circuit Optimization"},{"location":"Logic/logic02/#two-level-optimization","text":"","title":"Two-Level Optimization"},{"location":"Logic/logic02/#literal-cost","text":"literal is a variable or its complement literal cost is the number of literal appearances in a Boolean expression corresponding to the logic circuit diagram. e.g. \\(F=BD+A\\overline BC+ A\\overline C\\overline D\\) its L=8 \\(F=BD+A\\overline BC+ A\\overline B\\overline D + AB\\overline C\\) its L=11","title":"Literal Cost"},{"location":"Logic/logic02/#gate-input-cost","text":"Gate input costs is the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations. (G - inverters not counted, GN - inverters counted) For SOP and POS equations: all literal appearances(L) the number of terms excluding single literal terms , (G). e.g. for A+BC its L=3 while G=1 optionally, the number of distinct complemented single literals(GN). e.g. \\(F=BD +A\\overline BC+A\\overline C\\overline D\\) G=8(L)+3=11, GN=11+3=14. \\(F=BD+A\\overline BC+A\\overline B\\overline D+AB\\overline C\\) G=11+4=15, GN=15+3(only BCD)=18. Cost Criteria When do we stop trying to reduce the cost? Do we know when we have a minimum cost?","title":"Gate Input Cost"},{"location":"Logic/logic02/#map-manipulation","text":"Karnaugh maps(K-map) A K-map is a collection of squares Each square represents a minterm The collection of squares is a graphical representation of a Boolean function Adjacent squares differ in the value of one variable Alternative algebraic expressions for the same function are derived by recognizing patterns of squares The K-map can be viewed as A reorganized version of the truth table A topologically-warped Venn diagram as used to visualize sets in algebra of sets","title":"Map Manipulation"},{"location":"Logic/logic02/#two-variable-maps","text":"Example F=x+y y=0 y=1 x=0 0 1 x=1 1 1 For function F(x,y), the two adjacent cells containing 1\u2019s can be combined using the Minimization Theorem: \\(F(x,y)=(x \\ \\overline y + x\\ y ) + (x\\ y + \\overline x \\ y) = x + y\\)","title":"Two-Variable Maps"},{"location":"Logic/logic02/#three-variable-maps","text":"Note \u6ce8\u610f\u5217, \u8981\u6309\u7167Gray codes\u7684\u987a\u5e8f\u6392\u5217, \u5373\u76f8\u90bb\u4e24\u5217\u53ea\u76f8\u5dee\u4e00\u4f4d. \u56e0\u6b64\u5217\u6807\u53f7\u4e3a 00 01 11 10. \u76f8\u90bb\u4e24\u4e2a\u5c0f\u65b9\u683c\u90fd\u53ea\u6709\u4e00\u4e2a\u53d8\u91cf\u4e0d\u540c. \u53ef\u4ee5\u5377\u8d77\u6765, \u5373\u6700\u5de6\u8fb9\u4e00\u5217\u548c\u6700\u53f3\u8fb9\u4e00\u5217 Alternatie Map Labeling Example \u6ce8\u610f\u5230 3 2 \u683c\u90fd\u662f 1, \u56e0\u6b64 \\(\\bar xy\\bar z + \\bar x y z = \\bar xy\\) , \u6ca1\u6709\u53d8\u5316\u7684\u53d8\u91cf\u53ef\u4ee5\u4fdd\u7559, \u53d8\u5316\u4e86\u7684\u53d8\u91cf\u53ef\u4ee5\u6d88\u6389. \u540c\u7406 4 5 \u683c\u53ef\u5316\u4e3a \\(x \\bar y\\) 3 7 \u683c: \\(yz\\) ; 6 7\u683c: \\(x y\\) ; 4 6 \u683c \\(: x\\bar z\\) Combining Squares \u53ef\u4ee5\u753b 2^n^ \u5927\u5c0f\u7684\u65b9\u5f62\u683c(\u5373\u4e00\u6b21\u8981\u5305\u62ec 2^n^ \u4e2a\u5c0f\u65b9\u683c) For 3-variable K-Map : One square represents a minterm with three variables Two adjacent squares represent a product term with two variables Four \u201cadjacent\u201d terms represent a product term with one variable Eight \u201cadjacent\u201d terms is the function of all ones (no variables) = 1. Example Warning \u683c\u96f7\u7801! \u4e24\u4fa7\u53ef\u4ee5\u5377\u8d77\u6765 \u5316\u7b80\u601d\u8def: \u7528\u6700\u5927\u7684\u6700\u5c11\u7684\u5708\u628a\u6240\u6709\u7684 1 \u5708\u5b8c.(\u5708\u4e0e\u5708\u4e4b\u95f4\u53ef\u4ee5\u6709\u4ea4\u53c9) \u4e00\u5b9a\u662f SOP Example","title":"Three-Variable Maps"},{"location":"Logic/logic02/#four-variable-maps","text":"Note \u6ce8\u610f\u56db\u4e2a\u89d2\u4e5f\u53ef\u4ee5\u5377(0 2 8 10 -> \\(\\overline X \\ \\overline Z\\) ) Example F = XZ + X'Z' \u5316\u7b80\u7ed3\u679c\u4e0d\u552f\u4e00","title":"Four Variable Maps"},{"location":"Logic/logic02/#dont-cares-in-k-maps","text":"By placing \u201cdon't cares\u201d (an \u201cx\u201d entry) in the function table or map, the cost of the logic circuit may be lowered. \u5982\u6211\u4eec\u628a BCD \u7801\u4f5c\u4e3a\u8f93\u5165, \u6709\u6548\u6570\u5b57 0 - 9, \u5982\u679c\u90a3\u4e48 9 \u4ee5\u4e0a\u7684\u8f93\u5165\u7ec4\u5408\u6211\u4eec\u4e0d\u5728\u4e4e\u8f93\u51fa\u7ed3\u679c, \u79f0\u4e3a\u65e0\u5173\u9879, \u5728\u5361\u8bfa\u56fe\u4e0a\u753b x. BCD 5 or More X \u53ef\u5708\u53ef\u4e0d\u5708! Example Find the optimum POS solution: \\(F(A,B,C,D)=\\sum\\limits_m(3,9,11,12,13,14,15)+\\sum d(1,4,6)\\) Hint: Use \\(\\overline F\\) and complement it to get the result. ans: F' = B' D' + A' B (\u6c42 F' \u65f6\u5728\u5361\u8bfa\u56fe\u4e2d\u5708\u7a7a\u683c\uff0c\u800c\u4e0d\u662f 1) F = (B + D)(A + B')","title":"Don't Cares(\u65e0\u5173\u9879) in K-Maps"},{"location":"Logic/logic02/#systematic-simplification","text":"A Prime Implicant (\u8d28\u8574\u542b\u9879) is a product term obtained by combining the maximum possible number of adjacent squares in the map into a rectangle with the number of squares a power of 2. A prime implicant is called an Essential Prime Implicant (\u5fc5\u8981\u8d28\u8574\u6db5\u9879) if it is the only prime implicant that covers (includes) one or more minterms. \u8d28\u8574\u6db5\u9879\u662f\u5bf9\u67d0\u4e2a \"1\" \u800c\u8a00\u5305\u62ec\u5b83\u7684\u6700\u5927\u65b9\u5f62\u3002\u5bf9\u67d0\u4e2a \"1\" \u800c\u8a00\u5982\u679c\u5b83\u7684\u8d28\u8574\u6db5\u9879\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u5b83\u662f\u5fc5\u8981\u7684\u3002 Find All Prime Implicants Find Essential ones \u5904\u7406\u5269\u4e0b\u7684 1 Example \u54ea\u4e9b 1 \u53ea\u88ab\u4e00\u4e2a\u8d28\u8574\u542b\u5708\u5305\u56f4\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u5fc5\u8981\u8d28\u8574\u6db5\u9879 Example Find all prime implicants for: \\(G(A,B,C,D)=\\sum\\limits_m(0,2,3,4,7,12,13,14,15)\\) Hint: There are seven prime implicants! Prime Implicants are AB, B C' D', A' C' D', A' B' D', A' B' C, A' C D, B C D. ony AB Essential.","title":"Systematic Simplification"},{"location":"Logic/logic02/#multi-level-circuit-optimization","text":"\u4e24\u7ea7\u95e8\u7684\u5ef6\u8fdf\u4f4e\uff0c\u4f46 cost \u9ad8\u3002 Transformation Examples","title":"Multi-Level Circuit Optimization"},{"location":"Logic/logic02/#integrated-circuits","text":"\u96c6\u6210\u7535\u8def Integrated circuit (informally, a \u201cchip\u201d ) is a semiconductor crystal (most often silicon) containing the electronic components for the digital gates and storage elements which are interconnected on the chip. Terminology - Levels of chip integration SSI (small-scale integrated) - fewer than 10 gates MSI (medium-scale integrated) - 10 to 100 gates LSI (large-scale integrated) - 100 to thousands of gates VLSI (very large-scale integrated) - thousands to 100s of millions of gates Technology Parameters Fan-in \u6247\u5165\u7cfb\u6570 \u2013 the number of inputs available on a gate \u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u7aef\u7684\u4e0a\u9650 \u7406\u60f3\u60c5\u51b5\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u53ef\u4ee5\u63a5\u65e0\u6570\u4e2a\u95e8\u7684\u8f93\u5165\uff0c\u4f46\u5b9e\u9645\u4e0a\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u95e8\u7684\u8f93\u5165\u7aef\u90fd\u4f1a\u82b1\u8d39\u4e00\u4e9b\u7535\u6d41\uff0c\u800c\u95e8\u8f93\u51fa\u7684\u7535\u6d41\u662f\u6709\u9650\u7684\uff0c\u4ece\u96c6\u6210\u7535\u8def\u672c\u8eab\u4f1a\u8981\u6c42\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u6700\u591a\u80fd\u62c9\u591a\u5c11\u95e8\u7684\u8f93\u5165\u3002 Fan-out \u6247\u51fa\u7cfb\u6570 \u2013 the number of standard loads driven by a gate output \u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u5e26\u4e86\u5f88\u591a\u95e8\u7684\u8f93\u5165\uff1f\uff08\u50cf\u706b\u8f66\u5934\u5e26\u4e86\u5f88\u591a\u8f66\u53a2\uff09 \u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u4e0d\u80fd\u63a5\u5230\u592a\u591a\u95e8\u7684\u8f93\u5165\u4e0a\u53bb\uff0c\u4e00\u822c\u4f1a\u7528 buffer \u505a\u7f13\u51b2 e.g. 1 standard load equals the load contributed by the input of 1 inverter. Transition time - the time required for the gate output to change from H to L, \\(t_{HL}\\) , or from L to H, \\(t_{LH}\\) \u5e26\u7684\u95e8\u8d8a\u591a\uff0c\u4e0a\u5347\u65f6\u95f4\u5c31\u8d8a\u591a\u3002 \u6211\u4eec\u4f1a\u9650\u5236\u8fc7\u6e21\u65f6\u95f4\uff0c\u8bbe\u7f6e maximum fan-out Logic Levels \u2013 the signal value ranges for 1 and 0 on the inputs and 1 and 0 on the outputs (see Figure 1-1) Noise Margin \u2013 the maximum external noise voltage superimposed on a normal input value that will not cause an undesirable change in the circuit output Cost for a gate - a measure of the contribution by the gate to the cost of the integrated circuit Ignoring the wiring area, the gate area is roughly proportional to the gate input count. Propagation Delay \u2013 The time required for a change in the value of a signal to propagate from an input to an output Power Dissipation \u2013 the amount of power drawn from the power supply and consumed by the gate","title":"Integrated Circuits"},{"location":"Logic/logic02/#propagation-delay","text":"Delay is usually measured at the 50% point with respect to the H and L output voltage levels. High-to-low ( \\(t_{PHL}\\) ) and low-to-high ( \\(t_{PLH}\\) ) output signal changes may have different propagation delays. \u6ce8\u610f HL/PL \u6307\u7684\u662f \u8f93\u51fa\u7aef \u7684\u65f6\u95f4\u53d8\u5316\u3002 Info \u5982\u679c\u8fd9\u91cc\u6709 n \u4e2a\u975e\u95e8\u4e32\u8054 \u8ba1\u7b97 \\(t_{PHL}\\) \u9700\u8981 \\(t_{3PHL} + t_{2PLH} + t_{1PHL}\\) \u4ece\u7ed3\u679c\u5012\u63a8 \u5982\u679c\u53ea\u6c42 \\(t_{pd}\\) \u53ea\u9700\u8981\u628a\u6bcf\u7ea7\u7684 \\(t_{pd}\\) \u76f8\u52a0\u5373\u53ef\u3002 Delay Mode Transport delay - a change in the output in response to a change on the inputs occurs after a fixed specified delay \u8f93\u51fa\u6574\u4f53\u5f80\u540e\u79fb Inertial delay - similar to transport delay, except that if the input changes such that the output is to change twice in a time interval less than the rejection time , the output changes do not occur. Models typical electronic circuit behavior, namely, rejects narrow \u201cpulses\u201d on the outputs \u9664\u4e86\u8f93\u51fa\u5f80\u540e\u79fb\uff0c\u5728\u60ef\u6027\u5ef6\u8fdf\u4e0b\uff0c\u5f88\u7a84\u7684\u8109\u51b2\uff08\u5c0f\u4e8e rejection time\uff09\u4f1a\u88ab\u6d88\u9664\u6389\u3002 Example \u84dd\u7ebf\u8868\u660e propagation time, \u9ed1\u7ebf\u8868\u660e rejection time. \u56e0\u6b64 ab de \u8fd9\u4e2a\u8109\u51b2\u88ab\u5403\u6389 Circuit Delay Example \u6700\u5f00\u59cb S \u7531 0->1 \u540e 0.9s Y \u4ece 0->1 S \u4ece 1->0 \u540e\u4e0b\u65b9\u7684\u4e0e\u95e8 0.4s \u540e\u4f1a\u4ece 1->0, \u4f46\u4e0a\u65b9\u7684\u4e0e\u95e8 0.6s \u540e\u624d\u4f1a\u4ece 0->1. \u4f46 0.9s \u540e Y \u624d\u4f1a 1->0, \u6b64\u540e\u518d\u8fc7 0.2s(\u5171 1.1s) \u540e Y \u4ece 0-> 1. \u8fd9\u91cc Y \u51fa\u73b0\u4e86\u4e00\u4e2a\u5c0f\u5c16\u5cf0\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u7535\u8def\u4ea7\u751f\u7684 \u5192\u9669 \u3002 S \u7684\u4e24\u6761\u8def\u5f84\u6211\u4eec\u53d1\u73b0\u5ef6\u8fdf\u4e0d\u540c\uff0c\u8fd9\u79cd\u6211\u4eec\u79f0\u4e4b\u4e3a\u7535\u8def\u4e2d\u7684 \u7ade\u4e89 \u3002 Fan-out and Delay The fan-out loading a gate\u2019s output affects the gate\u2019s propagation delay\u3002 SL (Standard Load): \u4ee5\u975e\u95e8\u4e3a\u6807\u51c6\u3002\u5e26\u4e00\u4e2a\u975e\u95e8\u9700\u8981...\u7684\u8d1f\u8f7d Example One realistic equation for tpd for a NAND gate with 4 inputs is: \\(t_{pd} = 0.07 + 0.021 SL\\) ns SL is the number of standard loads the gate is driving, i. e. , its fan-out in standard loads For SL = 4.5, tpd = 0.165 ns \u7531\u5de5\u827a\u7a0b\u5ea6+\u8d1f\u8f7d\u60c5\u51b5\u51b3\u5b9a Cost/Performance Tradeoffs Example NAND gate G with 20 standard loads on its output has a delay of 0.45 ns and has a normalized cost of 2.0. A buffer H has a normalized cost of 1.5. The NAND gate driving the buffer with 20 standard loads gives a total delay of 0.33 ns 1. The cost of this portion of the circuit cannot be more than 2.5 2. The delay of this portion of the circuit cannot be more than 0.40 ns 3. The delay of this portion of the circuit must be less than 0.40 ns and the cost less than 3.0 ans: 1. No buffer 2. Use buffer 3. Irrelevant - buffer needed to satisfy delay constraint, but cannot satisfy cost constraint.","title":"Propagation Delay"},{"location":"Logic/logic02/#additional-gates-and-circuits","text":"","title":"Additional Gates and Circuits"},{"location":"Logic/logic02/#other-gate-types","text":"Why? Implementation feasibility and low cost Power in implementing Boolean functions Convenient conceptual representation Gate classifications Primitive gate - a gate that can be described using a single primitive operation type (AND or OR) plus an optional inversion(s). Complex gate - a gate that requires more than one primitive operation type for its description","title":"Other Gate Types"},{"location":"Logic/logic02/#primitive-gate","text":"","title":"Primitive gate"},{"location":"Logic/logic02/#buffer","text":"\u6ca1\u6709\u903b\u8f91\u529f\u80fd\uff0c\u4f46\u6709\u5f88\u5f3a\u7684\u5e26\u8d1f\u8f7d\u7684\u80fd\u529b\uff0c\u80fd\u591f\u62c9\u9ad8\u7535\u5e73\uff0c\u964d\u4f4e\u4f20\u8f93\u5ef6\u8fdf\u3002","title":"Buffer"},{"location":"Logic/logic02/#nand","text":"\u4e0e\u975e\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f \u5148\u975e\u540e\u6216 \\(F=\\overline{X} + \\overline{Y} + \\overline{Z}\\) A NAND gate with one input degenerates to an inverter. Universal gate - a gate type that can implement any Boolean function. \u6700\u9ad8\u6548 \u6211\u4eec\u4e00\u822c\u4e0d\u4f7f\u7528\u4e0e\u975e\u95e8\u505a\u903b\u8f91\u8fd0\u7b97\uff0c\u56e0\u4e3a\u4ed6\u4e0d\u6ee1\u8db3\u4ea4\u6362\u3001\u7ed3\u5408\u5f8b\u3002\u4e00\u822c\u5728\u6700\u540e\u628a\u4e0e\u6216\u975e\u8f6c\u4e3a\u7528\u4e0e\u975e\u5b9e\u73b0\u3002","title":"NAND"},{"location":"Logic/logic02/#nor","text":"\u4e5f\u53ef\u4ee5\u5229\u7528 De Morgan \u53d8\u4e3a \u5148\u975e\u540e\u4e0e\uff0c\u5176\u4ed6\u540c\u4e0e\u975e\u3002","title":"NOR"},{"location":"Logic/logic02/#complex-gate","text":"","title":"Complex gate"},{"location":"Logic/logic02/#exclusive-or-exclusive-nor","text":"eXclusive OR(XOR) and XNORs gate Definitions : \\(X\\oplus Y = X\\ \\overline Y +\\overline X \\ Y\\) \\(\\overline {X\\oplus Y} = X\\ \\overline Y +\\overline X \\ Y\\) the XNOR function also known as the equivalence function , denoted by the operator ' \\(\\equiv\\) '. \u91cd\u8981\u516c\u5f0f\uff08\u8981\u8bb0\uff09 (\u7b2c\u4e00\u884c & \u6700\u540e\u4e00\u884c\u5f88\u91cd\u8981) \u4e25\u683c\u6765\u8bf4\uff0c\u53ea\u6709\u4e24\u53d8\u91cf\u7684\u5f02\u6216\u3002\u5bf9\u4e8e\u591a\u4e8e\u4e24\u4e2a\u8f93\u5165\u7684\uff0c\u6211\u4eec\u7528\u5947\u51fd\u6570/\u5076\u51fd\u6570\u4ee3\u66ff\u3002 \u5bf9\u4e8e\u4e09\u53d8\u91cf\u7684\u5f02\u6216 \\(X\\oplus Y = \\overline X \\ \\overline Y \\ Z + \\overline X \\ Y \\overline Z + X \\ \\overline Y \\ \\overline Z + X\\ Y\\ Z\\) \u5361\u8bfa\u56fe\u65e0\u6cd5\u518d\u5316\u7b80 1 1 1 1 \u6211\u4eec\u79f0\u5b83\u4e3a\u5947\u51fd\u6570\uff0c\u56e0\u4e3a minterm \u91cc 1 \u7684\u4e2a\u6570( \\(=\\sum m(1(001),2(010),4(100),7(111))\\) )\u4e3a\u5947\u6570\u3002\u5176\u53cd\u51fd\u6570\u4e3a\u5076\u51fd\u6570\u3002 Symbol \u6ce8\u610f bubble \u6ce1\u6ce1(\u8868\u793a inverter) Implementation \u4e0b\u9762\u7684\u5b9e\u73b0\u9700\u8981 \\(4\\times 4=16\\) \u4e2a\u6676\u4f53\u7ba1\u3002\u4f46\u5b9e\u9645\u4e2d\u6700\u7b80\u5355\u53ea\u9700\u8981 10 \u4e2a\u6676\u4f53\u7ba1\uff0c\u5c31\u53ef\u4ee5\u6784\u9020\u51fa XOR \u95e8\u3002","title":"Exclusive OR/ Exclusive NOR"},{"location":"Logic/logic02/#odd-and-even-functions","text":"The 1s of an odd function correspond to minterms having an index with an odd number of 1s. The 1s of an even function correspond to minterms having an index with an even number of 1s. Example xor \u90fd\u662f\u5947\u51fd\u6570. \u5982 \\(F=(X\\oplus Y)\\oplus Z \\\\ F=(W\\oplus X)\\oplus (Y\\oplus Z)\\) Parity Generators and Checkers \u5947\u5076\u6821\u9a8c\uff1a\u4f20\u8f93\u82e5\u5e72\u4e2a\u6570\u636e\u4f4d\uff0c\u589e\u52a0\u4e00\u4e2a\u6570\u636e\u4f4d\uff0c\u7528\u6765\u8868\u793a\u6570\u636e\u4f4d\u7684\u5947\u5076\u6027\u3002\u8f93\u5165\u548c\u8f93\u51fa\u7aef\u7684\u5947\u5076\u4f4d\u5e94\u8be5\u76f8\u540c\u3002 Example","title":"Odd and Even Functions"},{"location":"Logic/logic02/#hi-impedance-outputs","text":"\u9ad8\u963b\u8f93\u51fa Three-state logic adds a third logic value, Hi-Impedance (Hi-Z), giving three states: 0, 1, and Hi-Z on the outputs. \u6709\u6761\u4ef6\u60c5\u51b5\u4e0b\u5141\u8bb8\u95e8\u7684\u8f93\u51fa\u63a5\u5728\u4e00\u8d77\u3002 3-State Buffer Resolving 3-State Values on a Connection \u628a\u4e24\u4e2a\u4e09\u6001\u95e8\u7684\u8f93\u51fa\u63a5\u5728\u4e00\u8d77\uff1a Resolution Table B1 B0 OUT 0 Hi-Z 0 1 Hi-Z 1 Hi-Z 0 0 Hi-Z 1 1 Hi-Z Hi-Z Hi-Z Info \u4e0d\u5141\u8bb8\u540c\u65f6\u4e24\u4e2a\u95e8\u540c\u65f6\u8f93\u51fa\u6709\u6548\u8f93\u51fa\uff01\u5426\u5219\u53ef\u80fd\u4ea7\u751f\u5927\u7535\u6d41\u635f\u574f\u7535\u8def\u3002 \u56e0\u6b64\u5bf9\u4e8e n \u4e2a\u4e09\u6001\u95e8\uff0c\u5171 2n+1 \u79cd\u6709\u6548\u7ec4\u5408\u3002 3-State Logic Circuit \u6b64\u65f6\uff0c\u4e24\u4e2a\u4e09\u6001\u95e8\u4e0d\u4f1a\u540c\u65f6\u8f93\u51fa\u6709\u6548\u8f93\u51fa\u3002","title":"Hi-Impedance Outputs"},{"location":"Logic/logic02/#more-complex-gates","text":"The remaining complex gates are SOP or POS structures with and without an output inverter. A - AND O - OR I - Inverter Numbers of inputs on first-level \u201cgates\u201d or directly to second-level \u201cgates\u201d e.g. AOI(AND-OR-Invert), 2-2-1 AO means 2-input ANDS driving an OR with one additional OR input.","title":"More Complex Gates"},{"location":"Logic/logic03/","text":"Combinational Logic Design \u00b6 Abstract Part 1 \u2013 Design Procedure Part 2 \u2013 Combinational Logic Part 3 \u2013 Arithmetic Functions Design Procedure \u00b6 A combinational logic circuit has: A set of m Boolean inputs, A set of n Boolean outputs, and n switching functions, each mapping the \\(2^m\\) input combinations to an output such that the current output depends only on the current input values no state Hierarchical Design \u00b6 Decompose the function into smaller pieces called blocks Decompose each block\u2019s function into smaller blocks, repeating as necessary until all blocks are small enough Any block not decomposed is called a primitive block The collection of all blocks including the decomposed ones is a hierarchy e.g. \u5b9e\u4f8b\u5316\u6a21\u5757\u548c\u51fd\u6570\u8c03\u7528\u7684\u533a\u522b \u7535\u8def\u4e0a\u5b9e\u4f8b\u5316\u6a21\u5757\uff1a\u590d\u5236\u4e00\u5757\u5e76\u5d4c\u5165\u5230\u7535\u8def\u4e2d\u3002\u4e14\u540c\u65f6\u5b9e\u4f8b\u7684\u6a21\u5757\u662f\u540c\u65f6\u5728\u8fd0\u884c\uff0c\u5982\u4e0a\u56fe\u4e2d\u56db\u4e2a\u5b9e\u4f8b\u5316\u7684\u5947\u51fd\u6570\u6a21\u5757\u3002\uff08\u5b9e\u9645\u4e0a\u786c\u4ef6\u91cc\u505a\u4e32\u884c\u662f\u975e\u5e38\u9ebb\u70e6\u7684\uff0c\u9700\u8981\u72b6\u6001\u673a\u6765\u7ea6\u675f\u884c\u4e3a\u903b\u8f91\uff09 \u4f46 C \u8bed\u8a00\u51fd\u6570\u4f53\u53ea\u6709\u4e00\u4efd\u4ee3\u7801\uff0c\u53ea\u662f PC \u8df3\u5230\u51fd\u6570\u90e8\u5206\u3002 Reusable Functions: \u628a\u5e38\u7528\u7684\u64cd\u4f5c\u62bd\u8c61\u6210\u6a21\u5757\uff0c\u5e76\u63d0\u524d\u5b9a\u4e49\u597d\u5ef6\u8fdf\u7b49\u7b49\u7279\u6027\u3002\u5f53\u9700\u8981\u4f7f\u7528\u65f6\uff0c\u6211\u4eec\u628a\u7535\u8def\u5f15\u811a\u63a5\u5165\u5373\u53ef\u3002 Top-Down versus Bottom-Up A top-down design proceeds from an abstract, high-level specification to a more and more detailed design by decomposition and successive refinement A bottom-up design starts with detailed primitive blocks and combines them into larger and more complex functional blocks Design Procedure \u00b6 Specification Write a specification for the circuit if one is not already available Formulation Derive a truth table or initial Boolean equations that define the required relationships between the inputs and outputs, if not in the specification Apply hierarchical design if appropriate 3. Optimization Apply 2-level and multiple-level optimization Draw a logic diagram or provide a netlist for the resulting circuit using ANDs, ORs, and inverters Technology Mapping Map the logic diagram or netlist to the implementation \u4e3a\u4ec0\u4e48\u9700\u8981\u8fd9\u6b65\uff1f \u5f88\u591a\u65f6\u5019\u9700\u8981\u7528\u9884\u5148\u5b9a\u4e49\u597d\u7684\u4e0e\u975e\u95e8\uff0c\u6216\u8005\u5176\u4ed6\u57fa\u672c\u6a21\u5757\uff08\u5982 XOR\uff09\u76f4\u63a5\u5957\u5165\u7535\u8def\u4e2d\u53bb\uff0c\u53ef\u4ee5\u964d\u4f4e\u7535\u8def\u7684\u6210\u672c\u548c\u5ef6\u8fdf\u3002 technology selected Verification Verify the correctness of the final design manually or using simulation.(\u4eff\u771f) BCD to Excess-3 code converter Specification Transforms BCD code for the decimal digits to Excess-3 code for the decimal digits BCD code words for digits 0 through 9: 4-bit patterns 0000 to 1001, respectively \u5176\u4ed6\u8f93\u5165\u8ba4\u4e3a\u662f\u65e0\u5173\u9879\u3002 Excess-3 code words for digits 0 through 9: 4-bit patterns consisting of 3 (binary 0011) added to each BCD code word Implementation: multiple-level circuit. NAND gates(including inverters) Formulation Optimization two-level W X Y Z \u8f93\u51fa\u4e5f\u9700\u8981\u56db\u4e2a\u903b\u8f91\u51fd\u6570\u3002 \u5355\u72ec ABCD \u56db\u8f93\u5165 \u5bf9\u5e94\u4e00\u4e2a\u8f93\u51fa W, \u7528\u5361\u8bfa\u56fe\u5316\u7b80\u3002 \u5f97\u5230 \\(W=A+BC+BD, X=\\overline B C+\\overline B D+B \\overline C\\overline D, Y=CD+\\overline C\\overline D, Z=\\overline D\\) * multiple-level \\(G=7+10+6+0=23\\) . \u4f18\u5316\u540e: \\(T_1=C+D, W=A+BT_1, X=\\overline B T_1B \\overline C\\overline D, Y=CD+\\overline C\\overline D, Z=\\overline D\\) \\(G=2+4+7+6+0=19\\) , \u6700\u591a\u662f\u4e09\u7ea7\u7535\u8def\u3002 \\(\\overline C\\overline D=\\overline{C+D}=\\overline{T_1},T_1=C+D, W=A+BT_1, X=\\overline B T_1B \\overline C\\overline D, Y=CD+\\overline C\\overline D, Z=\\overline D\\) \\(G = 2 +1 + 4 + 6 + 4 + 0 = 17\\) \uff0c\u6700\u591a\u662f\u56db\u7ea7\u7535\u8def\u3002 \u4e3a\u4ec0\u4e48\u8981\u7b97 T1 \u975e\uff1aABCD \u662f\u5916\u90e8\u8f93\u5165\u7684\u5f15\u811a\uff0c\u4e00\u822c\u540c\u65f6\u6709\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\u3002\u4f46 T1 \u662f\u5185\u90e8\u4ea7\u751f\u7684\u4fe1\u53f7\uff0c\u5bf9\u8fd9\u4e2a\u4fe1\u53f7\u7684\u975e\u8981\u81ea\u5df1\u8ba1\u7b97\u5f97\u5230\u3002 Technology Mapping Mapping with a library containing inverters and 2-input NAND, 2-input NOR, and 2-2 AOI(\u4e0e\u6216\u975e) gates Verification (\u4e3a\u4ec0\u4e48\u6709\u7684\u65f6\u5019\u7b97 G, \u6709\u7684\u65f6\u5019\u7b97 GN. \u56e0\u4e3a\u89e6\u53d1\u5668\u540c\u65f6\u6709\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\uff0c\u6240\u4ee5\u5f88\u591a\u65f6\u5019\u4e0d\u9700\u8981\u5355\u72ec\u7b97 GN.\uff09 Chip Design Styles \u00b6 Full custom: \u5168\u90e8\u81ea\u5df1\u5b9a\u5236\u5316\uff0c\u4e0d\u7528\u5148\u5b9a\u4e49\u597d\u7684\u6a21\u578b\u3002\uff08\u56e0\u4e3a\u5e93\u4f1a\u8003\u8651\u901a\u7528\u6027\uff0c\u5b8c\u6574\uff0c\u5e26\u6765\u6210\u672c\u5f00\u9500\u6bd4\u8f83\u9ad8\uff0c\u5ef6\u8fdf\u4e5f\u76f8\u5bf9\u5927\uff09 \u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u7814\u53d1\u6210\u672c\u9ad8\uff0c\u4f46\u751f\u4ea7\u6210\u672c\u6700\u4f4e\u3002 \u7528\u4e8e\u9ad8\u6027\u80fd\uff0c\u6216\u8005\u751f\u4ea7\u91cf\u975e\u5e38\u5927\u7684\u65f6\u5019\u3002 Justifiable only for dense, fast chips with high sales volume. Standard cell: \u4f7f\u7528\u9884\u5148\u89c4\u5b9a\u597d\u7684\u6807\u51c6\u5e93(\u5982\u51e0\u8f93\u5165\u7684\u4e0e\u95e8) Gate array: \u7814\u53d1\u6210\u672c\u4f4e\u3002\u4e70\u73b0\u6210\u7684\u82af\u7247\uff0c\u5199\u8fdb\u4ee3\u7801\u5373\u53ef\u6267\u884c\u3002\u6210\u672c\u6700\u4f4e\uff08\u4e0d\u7528\u6d41\u7247\uff09 Cell Libraries Cell - a pre-designed primitive block Cell library - a collection of cells available for design using a particular implementation technology Cell characterization - a detailed specification of a cell for use by a designer - often based on actual cell design and fabrication and measured values \u5305\u62ec\u539f\u7406\u56fe\uff0c\u82af\u7247\u9762\u79ef\uff0c\u8f93\u5165\u8d1f\u8f7d\uff0c\u5ef6\u8fdf\uff0c\u5de5\u827a\u6620\u5c04\u7684\u6a21\u677f\u5e93\uff0c\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\u5982\u4f55\u5b9e\u73b0\u3002 e.g. Mapping to NAND gates \u00b6 \u5982\u4f55\u53ea\u7528 NAND/NOR \u505a\u5de5\u827a\u6620\u5c04 \u5047\u8bbe\uff1a\u4e0d\u8003\u8651 gate loading \u548c delay. \u53ef\u4ee5\u6709\u4efb\u610f\u8f93\u5165\u7684\u4e0e\u975e/\u6216\u975e\u95e8\u3002 The mapping is accomplished by: Replacing AND and OR symbols Pushing inverters through circuit fan-out points Canceling inverter pairs Example b -> c \u5c31\u662f\u628a 5 \u63a8\u51fa\u6563\u51fa\u70b9\uff0c\u968f\u540e\u548c\u5176\u4ed6\u975e\u95e8\u76f8\u6d88\u3002 NONR \u4e0e NAND \u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86 replace \u8fd9\u6b65\u3002 Verification \u00b6 \u9a8c\u8bc1\u65b9\u6cd5\uff1a\u771f\u503c\u8868/\u4eff\u771f/\u903b\u8f91\u51fd\u6570 \u5c0f\u7ec6\u8282\uff1a\u4eff\u771f\u8f93\u51fa\u4e2d\u6709\u5c0f\u8109\u51b2\uff0c\u56e0\u4e3a\u5ef6\u8fdf\u4ea7\u751f\u3002\u5982\u679c\u6ca1\u6709\u60ef\u6027\u5ef6\u8fdf\uff0c\u6211\u4eec\u8981\u8003\u8651\u628a\u5b83\u5438\u6536\u6389\u3002 Behaviour Simulation \u770b\u4e0d\u5230\uff0c\u56e0\u4e3a\u4ed6\u4e0d\u8003\u8651\u4f20\u8f93\u5ef6\u8fdf\u3002\u591a\u8003\u8651\u4f7f\u7528\u6709\u5ef6\u8fdf\u7684\u4eff\u771f Combinational Logic \u00b6 functional block: \u504f\u9ad8\u5c42\u903b\u8f91\u5e94\u7528\uff0c\u5982\u8bd1\u7801\u5668\uff0c\u9009\u62e9\u5668\u3002 Rudimentary Logic Functions \u00b6 b \u4e2d\u8868\u793a\u63a5\u5730\u548c\u63a5\u7535\u6e90\u3002 Multiple-bit Rudimentary Functions \u00b6 A wide line is used to represent a bus which is a vector signal. b \u4e2d 4 \u8868\u793a\u4f4d\u5bbd\uff0c4 \u4f4d\u4fe1\u53f7\u3002 Sets of bits can be split from the bus as shown in \u00a9 for bits 2 and 1 of F. The sets of bits need not be continuous as shown in (d) for bits 3, 1, and 0 of F. Enabling Function \u00b6 Enabling permits an input signal to pass through to an output Disabling blocks an input signal from passing through to an output, replacing it with a fixed value The value on the output when it is disable can be Hi-Z (as for three-state buffers and transmission gates), 0 , or 1 Example (a) when disabled, 0 output (b) when disabled, 1 output. \u5176\u4e2d\u4e5f\u53ef\u4ee5\u5199 \\(\\overline {EN}\\) \u7136\u540e\u76f4\u63a5\u63a5\u6216\u95e8\uff0c\u4e0d\u7528\u6807 inverter. Decoding \u00b6 Decoding - the conversion of an n-bit input code to an m-bit output code with \\(n \\leq m\\leq 2^n\\) such that each valid code word produces a unique output code. Circuits that perform decoding are called decoders . 3-8 \u8bd1\u7801\u5668 \u5176\u771f\u503c\u8868\uff1a Example \u6734\u7d20\u5b9e\u73b0 n-to-m \u7684\u8bd1\u7801\u5668\u6709 \\(n\\times m\\) \u95e8\u8f93\u5165\u6210\u672c.( \\(2\\times 2^n\\) ) \u8bd1\u7801\u5668\u5e38\u7528\u4e8e\u5185\u5b58\uff0c\u63a5\u5728\u5730\u5740\u603b\u7ebf\u3002 \\(32-2^{32}\\) \u8bd1\u7801. \u6210\u672c \\(32\\times 2^{32}\\) \u5982\u4f55\u51cf\u5c11\u5b9e\u73b0\u6210\u672c\uff1f Decode Expansion \u00b6 3-8 \u8bd1\u7801\u5668\uff0c\u8f93\u5165\u5206\u6210\u4e24\u90e8\u5206\uff0cA \u7528 1-2 \u8bd1\u7801\u5668, B C \u7528 2-4 \u8bd1\u7801\u5668 \u62bd\u8c61\u4e3a\u884c\u5217\u8bd1\u7801\uff1a\u4e00\u7ec4\u662f\u884c\u8bd1\u7801\uff0c\u4e00\u7ec4\u662f\u5217\u8bd1\u7801\u3002 \u5bf9\u4e8e \\(n - 2^n\\) \u8bbe\u8ba1\u4e24\u4e2a\u8bd1\u7801\u5668\uff0c\u4e00\u4e2a \\(\\dfrac{n}{2}\\) \u8f93\u5165 \\(2^{\\frac{n}{2}}\\) \u7684\u884c\u8bd1\u7801\u5668\uff0c\u4e00\u4e2a \\(\\dfrac{n}{2}\\) \u8f93\u5165 \\(2^{\\frac{n}{2}}\\) \u8f93\u51fa\u7684\u5217\u8bd1\u7801\u5668\u3002 \u8fd9\u6837\u518d\u628a\u884c\u5217\u7684\u8f93\u51fa\u7528 2-AND \u8fde\u63a5\uff0c\u6211\u4eec\u53ea\u9700\u8981 \\(2^{\\frac{n}{2}}\\times 2^{\\frac{n}{2}}=2^n\\) \u4e2a AND \u95e8, \u4e2d\u95f4\u4e0e\u95e8\u9635\u5217\u7684\u6210\u672c\u662f \\(2^n\\times 2 =2^{n+1}\\) . \u8bd1\u7801\u5ef6\u8fdf\u52a0\u5927\uff0c\u4f46\u964d\u4f4e\u6210\u672c\u3002 Decoder with Enable \u00b6 Note Alternatively, (b) can be viewed as distributing value of signal EN to 1 of 4 outputs In this case, called demultiplexer(\u5206\u914d\u5668) . \u628a D1 \u770b\u4f5c D1=EN. \u5373 \\(A_1, A_0\\) \u51b3\u5b9a\u628a EN \u7684\u4fe1\u53f7\u5206\u914d\u5230\u54ea\u4e2a\u5f15\u811a\u3002 Combinational Logic Implementation - Decoder and OR Gates \u00b6 Implement m functions of n variables with: Sum-of-minterms expressions One n-to-2n-line decoder m OR gates, one for each output \u628a\u6700\u5c0f\u9879\u6216\u8d77\u6765\uff0c\u5f97\u5230\u4efb\u610f\u7684\u903b\u8f91\u51fd\u6570 Binary Adder BCD-to-Segment Decoder \u4e03\u6bb5\u6570\u7801\u7ba1\u91cc\uff0c\u4eae\u4e0d\u540c\u7684\u6bb5\u5373\u53ef\u8868\u793a\u4e0d\u540c\u7684\u6570\u5b57 \u4e0a\u4e3a\u5171\u9633\u6781\uff08\u8f93\u51fa 0 \u624d\u80fd\u4eae\uff0c\u9634\u6781\u76f8\u53cd\uff09\u4e0b\u4e3a\u5171\u9634\u6781 \u8f93\u5165\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u4eae\u5bf9\u5e94\u7684\u6570\u7801\u7ba1\uff0c\u4f7f\u5176\u53ef\u4ee5\u663e\u793a\u5728\u6570\u7801\u7ba1\u4e0a Encoding \u00b6 Encoding - the opposite of decoding - the conversion of an m-bit input code to a n-bit output code with \\(n <=m <= 2^n\\) such that each valid code word produces a unique output code \u4e00\u4e2a\u8bd1\u7801\u5668 \\(2^n\\) \u8f93\u5165\uff0cn \u4e2a\u8f93\u51fa\u3002\u5e38\u7528\u4e8e\u4e2d\u65ad\u4fe1\u53f7\uff0c\u8ba1\u7b97\u673a\u54cd\u5e94\uff0c\u544a\u8bc9 CPU \u54ea\u4e00\u53f7\u7684\u4e2d\u65ad\u53d1\u751f\u4e86\uff08\u8fd9\u91cc\u5c31\u8981\u8fdb\u884c\u7f16\u7801\uff09 decimal-BCD encoder Inputs : 10 bits corresponding to decimal digits 0 through 9, (D0, \u2026, D9) Outputs : 4 bits with BCD codes Function : If input bit Di is a 1, then the output (A3, A2, A1, A0) is the BCD code for i. A3 = D8 + D9; A2 = D4 + D5 + D6 + D7; A1 = D2 + D3 + D6 + D7; A0 = D1 + D3 + D5 + D7 + D9 \u5982\u679c\u8f93\u5165\u7684 10 \u6839\u7ebf\u91cc\uff0c\u6709\u4e24\u4e2a\u8f93\u5165\u90fd\u4e3a 1, \u53ef\u80fd\u4f1a\u5f97\u5230\u6ca1\u6709\u610f\u4e49\u7684\u8f93\u51fa\uff0c\u9700\u8981\u4f18\u5148\u7ea7\u3002 Priority Encoder \u00b6 \u5982\u679c\u8fd9\u91cc\u6709\u591a\u4e2a\u8f93\u5165\u4e3a 1, encoder \u4f1a\u5c06\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u503c\u7f16\u7801\u3002 Example V \u8868\u793a\u662f\u662f\u5426\u6709\u6709\u6548\u4fe1\u53f7\u8fdb\u5165 \\(A2 = D4\\) \\(A1 = \\overline{D4} D3 + \\overline{D4} D2 = \\overline{D4}F1, F1 = (D3 + D2)\\) \\(A0 = \\overline{D4} D3 + \\overline{D4}\\overline{D3}\\overline{D2} D1 = \\overline{D4} (D3 + \\overline{D2} D1)\\) \\(V = D4 + F1 + D1 + D0\\) Multiplexers \u00b6 Circuits that perform selecting have: A set of information inputs from which the selection is made A single output A set of control lines for making the selection Logic circuits that perform selecting are called multiplexers . A typical multiplexer has n control inputs \\((S{n - 1},... S_0)\\) called selection inputs, \\(2^n\\) information inputs \\((I_{2^n - 1}, \u2026 I_0)\\) , and one output Y. \u5982\u679c\u8f93\u5165 \\(m<2^n\\) \u4e5f\u53ef\u4ee5\u8bbe\u8ba1\u4e3a n select lines \u7684 multiplexers. 2-to-1-Line Multiplexer S = 0 \u65f6\u9009\u62e9 \\(I_0\\) ; S = 1 \u65f6\u9009\u62e9 \\(I_1\\) . Equation: \\(Y=\\overline S I_0+SI_1\\) \u753b\u7535\u8def\u56fe\u65f6\uff0c\u8981\u5206\u6210\u4e24\u5757\uff1a\u7b2c\u4e00\u90e8\u5206 1-2 \u8bd1\u7801\u5668\uff0c\u540e\u4e00\u90e8\u5206\u662f 2-2 \u4e0e\u6216\u7ed3\u6784\u3002\uff08\u7ed3\u6784\u590d\u6742\u540e\uff0c\u5176\u5b9e\u5c31\u662f\u5c06\u8fd9\u4e24\u90e8\u5206\u6269\u5c55\uff09 In general, \\(2^n\\) -to-1-line multiplexers: n-to- \\(2^n\\) -line decoder \\(2^n \\times 2\\) AND-OR Example \u4efb\u4f55\u65f6\u523b\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u662f 1, \u76f8\u5f53\u4e8e\u53ea\u6709\u4e00\u4e2a\u4e0e\u95e8\u88ab enable, \u5176\u4f59\u90fd disable. \u8fd9\u6837\u5c31\u80fd\u9009\u62e9\u51fa enable \u7684\u4fe1\u53f7\u3002 \u591a\u4f4d\u7684\u6570\u636e\u9009\u62e9\u3002\u8fd9\u91cc\u6709\u56db\u7ec4\u4fe1\u53f7\uff0c\u6bcf\u7ec4\u4fe1\u53f7\u90fd\u662f\u56db\u4e2a\u8f93\u5165\u7684\u4e00\u4f4d\uff0c\u4f46\u9009\u62e9\u903b\u8f91\u5bf9\u4e8e\u56db\u7ec4\u4fe1\u53f7\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u6700\u540e\u9009\u51fa\u6765\u7684\u90fd\u662f\u540c\u4e00\u7ec4\u4fe1\u53f7\u3002\u5373\u6700\u540e\u8f93\u51fa\u7684\u56db\u4f4d\u4fe1\u53f7\u90fd\u6765\u81ea\u540c\u4e00\u6839\u603b\u7ebf\uff0c \u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u7528\u4e0e\u6216\u7ed3\u6784\uff0c\u4f7f\u7528\u4e09\u6001\u95e8\u5b9e\u73b0 mux. \u4e09\u6001\u95e8\u6539\u8fdb Mux (\u5229\u7528\u4e09\u6001\u95e8\u53ef\u4ee5\u5c06\u8f93\u51fa\u5e76\u5728\u4e00\u8d77\uff0c\u540c\u65f6\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u6709\u6709\u6548\u8f93\u51fa\u3002\u6211\u4eec\u8fd9\u91cc\u8bd1\u7801\u5668\u53ea\u4f1a\u6709\u4e00\u4e2a\u8f93\u51fa\u4e3a 1, \u4fdd\u8bc1\u4e86\u7535\u8def\u5b89\u5168\uff1b\u8fd9\u6837\u8fd8\u53ef\u4ee5\u964d\u4f4e\u6210\u672c) \u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u8bd1\u7801\u5668\u4e5f\u4f7f\u7528\u4e09\u6001\u95e8\uff1a \u8fd9\u91cc\u6211\u4eec\u662f\u4e24\u5c42\u9009\u62e9\u7684\u903b\u8f91\uff0cS0 = 0 \u65f6\u5148\u9009\u51fa I0(00) \u548c I2(10), S1 \u518d\u8fdb\u884c\u7b2c\u4e8c\u5c42\u7684\u9009\u62e9\u3002 Combinational Logic Implementation- Multiplexer Approach \u00b6 \u5bf9\u4e8e\u4e00\u4e2a n \u53d8\u91cf\u7684\u903b\u8f91\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u62bd\u8c61\u4e3a n \u4e2a\u8f93\u5165\u5bf9\u5e94\u4e00\u4e2a\u8f93\u51fa\u3002\u6211\u4eec\u53ef\u4ee5\u7528 Mux \u5bf9\u5e94\u771f\u503c\u8868\u4e2d\u7684 \\(2^n\\) \u884c\u7684\u7ed3\u679c\uff0c\u7528 n \u8f93\u5165\u4f5c\u4e3a\u9009\u62e9\u7ebf\u6765\u67e5\u8868\u3002 Gray to Binary Code \u76f8\u5f53\u4e8e\u5229\u7528 ABC \u67e5\u8868\uff0c\u5982\u679c mux \u9009\u62e9\u51fa\u4e00\u4f4d\uff08\u6839\u636e\u771f\u503c\u8868\u5f97\u5230\uff09 \u6ce8\u610f\u5f15\u811a\u987a\u5e8f\uff01 \u6211\u4eec\u53ef\u4ee5\u505a\u8fdb\u4e00\u6b65\u6539\u8fdb\uff0c \\(n+1\\) \u53d8\u91cf\u7528 \\(2^n-1\\) mux \u5bf9\u4e8e \\(F(A,B,C)\\) \u5f53 A B \u786e\u5b9a\u65f6\uff0c\u6700\u540e\u53ef\u80fd\u8f93\u51fa\u53ea\u53ef\u80fd\u4e3a \\(1,0,C,\\overline C\\) \u5229\u7528\u8fd9\u70b9\u6211\u4eec\u53ef\u4ee5\u6539\u9020\u771f\u503c\u8868\uff0c \u7406\u8bba\u4e0a\u8fd8\u53ef\u4ee5\u653e\u66f4\u591a\u53d8\u91cf\u5230\u53e6\u4e00\u8fb9 Arithmetic Functions \u00b6 Cell - subfunction block \u5355\u5143\u6a21\u5757\uff0c\u5904\u7406\u6bcf\u4f4d Functional Blocks: Addition \u00b6 Addition Development: Half-Adder (HA) , a 2-input bit-wise addition functional block.(no carry input) Full-Adder (FA) , a 3-input bit-wise addition functional block. Ripple Carry Adder , an iterative array to perform binary addition. Carry-Look-Ahead Adder (CLA) , a hierarchical structure to improve performance. Half-Adder \u00b6 \\(S=X\\oplus Y, C=XY\\) . Full Adder \u00b6 S \u65e0\u6cd5\u5316\u7b80\uff0c\u4f46\u53ef\u4ee5\u8868\u793a\u4e3a\u5947\u51fd\u6570\uff08\u5f02\u6216\uff09 \\(S=X\\overline Y\\overline Z+\\overline X Y \\overline Z + \\overline X\\overline YZ+XYZ=X\\oplus Y\\oplus Z\\) \\(C=XY+XZ+YZ=XY+(X\\oplus Y)Z\\) . The term \\(XY\\) is carry generate .( \\(XY=1\\) \u65f6\u4e00\u5b9a\u4f1a\u6709\u8fdb\u4f4d) The term \\(X\\oplus Y\\) is carry propagate .( \\(X\\oplus Y=1\\) \u65f6 X,Y\u6709\u4e00\u4e2a\u662f 0, \u4e00\u5b9a\u4f1a\u628a\u8fdb\u4f4d\u4f20\u4e0b\u53bb\uff0c\u5373 \\(C=Z\\) ) Note \u6ce8\u610f C \u7684\u6539\u5199\uff0c\u8fd9\u91cc\u6539\u4e3a\u5f02\u6216\u4e0d\u6539\u53d8\u7ed3\u679c\uff0c\u540c\u65f6\u56e0\u4e3a\u5df2\u7ecf\u6709 xor \u4e86\uff0c\u53ef\u4ee5\u8282\u7ea6\u4e00\u4e2a\u95e8\u3002 Implementation : Binary Adders \u00b6 \u5b9e\u73b0\u4e8c\u8fdb\u5236\u591a\u4f4d\u52a0\u6cd5 4-bit Ripple-Carry Binary Adder \u00b6 \u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u968f\u7740\u52a0\u6cd5\u5668\u4f4d\u6570\u7684\u589e\u52a0\uff0c\u5ef6\u8fdf\u4f1a\u8d8a\u6765\u8d8a\u5927\u3002 \u5982\u4e0b\u56fe\u4e2d\uff0c\u6700\u957f\u7684\u8def\u5f84\u662f\u4ece A0 \u6216 B0 \u5230 S3. Carry Lookahead \u00b6 \u5bf9\u4e8e\u72b6\u6001 i, \u6211\u4eec\u79f0 \\(G_i\\) \u4e3a generate , \\(P_i\\) \u4e3a propagate . \\(G_i\\) , \\(P_i\\) , and \\(S_i\\) are local to each cell of the adder \\(C_i\\) is also local each cell \u5168\u52a0\u5668\u7684\u66f4\u65b0\u53ef\u4ee5\u5b9a\u4e49\u4e3a \\[ \\begin{align*} P_i & =A_i\\oplus B_i, \\ G_i = A_iB_i\\\\ S_i & =P_i\\oplus C_i,\\ C_{i+1} = G_i+P_iC_i \\end{align*} \\] \u8fd9\u6837 \\(C_{i+1}\\) \u53ef\u4ee5\u4ece cells \u4e2d\u53bb\u6389\uff0c\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u5f97\u5230\u4e00\u7ec4\u8de8\u8d8a\u591a\u4e2a\u5355\u5143\u7684\u8fdb\u4f4d\u65b9\u7a0b\uff1a \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e0b\u9762\u7684 Carry Look-ahead Adder : \u8fd9\u6837\u7684\u8d85\u524d\u8fdb\u4f4d\u5168\u52a0\u5668\uff0c\u907f\u514d\u4e86\u56e0\u4e3a\u4f4d\u8fc7\u591a\u800c\u9020\u6210\u5ef6\u8fdf\u8fc7\u5927\u3002\u9ad8\u4f4d\u7684\u7ed3\u679c\u76f4\u63a5\u7531\u4f4e\u4f4d\u7684\u7ed3\u679c\u5f97\u5230\u3002 This could be extended to more than four bits; in practice, due to limited gate fan-in, such extension is not feasible. The concept is extended another level by considering group generate( \\(G_{0-3}\\) ) and group propagate( \\(P_{0-3}\\) ) functions: \u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86 16-bits adder Exactly the same structure. So CLA could be used to generate Group Carry . \u7c7b\u4f3c\u601d\u8def\u53ef\u5f97\u5230 64 \u4f4d\u7684\u52a0\u6cd5\u5668\u3002 Example Unsigned Subtraction \u00b6 Subtract the subtrahend(\u51cf\u6570) N from the minuend(\u88ab\u51cf\u6570) M If no end borrow occurs, then \\(M\\geq N\\) , and the result is a non-negative number and correct. If an end borrow occurs , the \\(N > M\\) and the difference \\(M - N + 2^n\\) is subtracted from \\(2^n\\) , and a minus sign is appended to the result. To do both unsigned addition and unsigned subtraction requires: \u590d\u6742\uff0c\u6210\u672c\u9ad8 Complements \u00b6 Diminished Radix Complement of N \u53cd\u7801 defined as \\(r^n-1-N\\) ( \\(r^n-1\\) \u662f bits[n-1:0] \u5168\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u7528\u5b83\u51cf\u53bb N \u5373\u53ef\u5f97\u5230 N \u6309\u4f4d\u53d6\u53cd\u7684\u7ed3\u679c\uff0c\u5373\u53cd\u7801) The 1's complement is obtained by complementing each individual bit (bitwise NOT). 2\u2019s complement \u8865\u7801 defined as \\(r^n-N\\) \u53cd\u7801\u6309\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00 \u4e5f\u53ef\u4ee5\u8fd9\u6837\u6c42\u8865\u7801\uff1a\u4ece\u53f3\u5f80\u5de6\u7b2c\u4e00\u4e2a 1 \u4e4b\u524d\u4e0d\u53d8\uff0c\u6b64\u540e\u5176\u4ed6\u4f4d\u5168\u90e8\u6c42\u53cd Subtraction is done by adding the complement of the subtrahend. Subtraction with 2\u2019s Complement Add the 2's complement of the subtrahend N to the minuend M: \\(M + (2^n -N) = M - N + 2^n\\) if \\(M\\geq N\\) , the sum produces end carry \\(r^n\\) which is discarded; from above, \\(M - N\\) remains. If \\(M < N\\) , the sum does not produce an end carry and, from above, is equal to \\(2^n - ( N - M )\\) , the 2's complement of \\(( N - M )\\) . To obtain the result \\((N \u2013 M)\\) , take the 2's complement of the sum and place a \\(-\\) to its left. Example \u8fdb\u4f4d\u662f 1 \u8868\u660e\u7ed3\u679c\u4e3a\u6b63\uff0c\u4e0d\u9700\u5bf9\u7ed3\u679c\u4fee\u6b63 \u8fdb\u4f4d\u662f 0 \u8868\u660e\u7ed3\u679c\u4e3a\u8d1f\uff0c\u9700\u5bf9\u7ed3\u679c\u4fee\u6b63 Signed Integers \u00b6 Signed Integer Representations : \u7b2c n-1 \u4f4d\u8868\u793a\u6b63\u8d1f\uff0c\u540e\u9762 bits[n-2:0] \u8868\u793a\u7edd\u5bf9\u503c\u5927\u5c0f Signed-Complement Signed 1's Complement Signed 2's Complement \u8be6\u89c1 ICS notes Signed-Magnitude Arithmetic \u00b6 \u68c0\u67e5\u4e09\u4e2a\u7b26\u53f7\u4f4d\u7684\u5947\u5076\u6027\uff08\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u7b26\u53f7\u4f4d\u548c\u52a0\u51cf\u6cd5\u7684\u7b26\u53f7\u4f4d\uff0c\u6211\u4eec\u4e00\u822c\u8ba4\u4e3a\u52a0\u6cd5\u662f 0, \u51cf\u6cd5\u662f 1\uff09\u7528\u4e8e\u5224\u65ad\u6ea2\u51fa \u53ef\u80fd\u6ea2\u51fa\u7684\u60c5\u51b5\uff1a\u6b63\u52a0\u6b63(000), \u6b63\u51cf\u8d1f(011), \u8d1f\u51cf\u6b63(101), \u8d1f\u52a0\u8d1f(110) If the parity of the three signs is 0:(overflow may happen) Add the magnitudes. Check for overflow (a carry out of the MSB) The sign of the result is the same as the sign of the first operand. If the parity of the three signs is 1: Subtract the second magnitude from the first. If a borrow occurs: take the two\u2019s complement of result and make the result sign the complement of the sign of the first operand. Overflow will never occur. Signed-Complement Arithmetic \u00b6 Addition: Add the numbers including the sign bits, discarding a carry out of the sign bits (2's Complement), or using an end-around carry (1's Complement). If the sign bits were the same for both numbers and the sign of the result is different, an overflow has occurred. The sign of the result is computed in step 1. Subtraction: Form the complement of the number you are subtracting and follow the rules for addition. Signed 2\u2019s Complement Examples 1101 + 0011 Result is 0000. The carry out of the MSB is discarded. 1101 - 0011 Complement 0011 to 1101 and add. Result is 1010. The carry out of the MSB is discarded. 2\u2019s Complement Adder/Subtractor \u5229\u7528\u5f02\u6216\u95e8\uff0c\u5f53 S=0 \u65f6\u5f02\u6216\u95e8\u76f8\u5f53\u4e8e\u4fdd\u6301\u53e6\u4e00\u4e2a\u4fe1\u53f7\uff0c\u5f53 S=1 \u65f6\u5f02\u6216\u95e8\u76f8\u5f53\u4e8e\u5bf9\u53e6\u4e00\u4e2a\u4fe1\u53f7\u53d6\u53cd\u3002 Overflow Detection Overflow occurs if n + 1 bits are required to contain the result from an n-bit addition or subtraction Example Simplest way to implement overflow \\(V = C_n \\oplus C_{n - 1}\\) \\(C_n\\) \u662f\u6ea2\u51fa\u53bb\u7684\u4f4d\uff0c \\(C_{n-1}\\) \u662f\u8fd0\u7b97\u540e\u7684\u7b26\u53f7\u4f4d\u3002 \u622a\u65ad Arithmetic Logic Unit (ALU) \u00b6 Decompose the arithmetic circuit into: An n-bit parallel adder A block of logic that selects four choices for the B input to the adder Example \u5176\u4e2d \\(Y_i=B_iS_0+\\overline B_iS_1\\) S0 S1 \u7684\u53d8\u5316\u53ef\u4ee5\u7ed9\u52a0\u6cd5\u5668\u63d0\u4f9b\u4e0d\u540c\u7684\u8f93\u5165\uff0c\u5305\u62ec -1(\u4e8c\u8fdb\u5236\u6bcf\u4e00\u4f4d\u90fd\u662f 1) 0 \\(B\\) \\(\\overline B\\)","title":"\u7ec4\u5408\u903b\u8f91\u7535\u8def\u8bbe\u8ba1"},{"location":"Logic/logic03/#combinational-logic-design","text":"Abstract Part 1 \u2013 Design Procedure Part 2 \u2013 Combinational Logic Part 3 \u2013 Arithmetic Functions","title":"Combinational Logic Design"},{"location":"Logic/logic03/#design-procedure","text":"A combinational logic circuit has: A set of m Boolean inputs, A set of n Boolean outputs, and n switching functions, each mapping the \\(2^m\\) input combinations to an output such that the current output depends only on the current input values no state","title":"Design Procedure"},{"location":"Logic/logic03/#hierarchical-design","text":"Decompose the function into smaller pieces called blocks Decompose each block\u2019s function into smaller blocks, repeating as necessary until all blocks are small enough Any block not decomposed is called a primitive block The collection of all blocks including the decomposed ones is a hierarchy e.g. \u5b9e\u4f8b\u5316\u6a21\u5757\u548c\u51fd\u6570\u8c03\u7528\u7684\u533a\u522b \u7535\u8def\u4e0a\u5b9e\u4f8b\u5316\u6a21\u5757\uff1a\u590d\u5236\u4e00\u5757\u5e76\u5d4c\u5165\u5230\u7535\u8def\u4e2d\u3002\u4e14\u540c\u65f6\u5b9e\u4f8b\u7684\u6a21\u5757\u662f\u540c\u65f6\u5728\u8fd0\u884c\uff0c\u5982\u4e0a\u56fe\u4e2d\u56db\u4e2a\u5b9e\u4f8b\u5316\u7684\u5947\u51fd\u6570\u6a21\u5757\u3002\uff08\u5b9e\u9645\u4e0a\u786c\u4ef6\u91cc\u505a\u4e32\u884c\u662f\u975e\u5e38\u9ebb\u70e6\u7684\uff0c\u9700\u8981\u72b6\u6001\u673a\u6765\u7ea6\u675f\u884c\u4e3a\u903b\u8f91\uff09 \u4f46 C \u8bed\u8a00\u51fd\u6570\u4f53\u53ea\u6709\u4e00\u4efd\u4ee3\u7801\uff0c\u53ea\u662f PC \u8df3\u5230\u51fd\u6570\u90e8\u5206\u3002 Reusable Functions: \u628a\u5e38\u7528\u7684\u64cd\u4f5c\u62bd\u8c61\u6210\u6a21\u5757\uff0c\u5e76\u63d0\u524d\u5b9a\u4e49\u597d\u5ef6\u8fdf\u7b49\u7b49\u7279\u6027\u3002\u5f53\u9700\u8981\u4f7f\u7528\u65f6\uff0c\u6211\u4eec\u628a\u7535\u8def\u5f15\u811a\u63a5\u5165\u5373\u53ef\u3002 Top-Down versus Bottom-Up A top-down design proceeds from an abstract, high-level specification to a more and more detailed design by decomposition and successive refinement A bottom-up design starts with detailed primitive blocks and combines them into larger and more complex functional blocks","title":"Hierarchical Design"},{"location":"Logic/logic03/#design-procedure_1","text":"Specification Write a specification for the circuit if one is not already available Formulation Derive a truth table or initial Boolean equations that define the required relationships between the inputs and outputs, if not in the specification Apply hierarchical design if appropriate 3. Optimization Apply 2-level and multiple-level optimization Draw a logic diagram or provide a netlist for the resulting circuit using ANDs, ORs, and inverters Technology Mapping Map the logic diagram or netlist to the implementation \u4e3a\u4ec0\u4e48\u9700\u8981\u8fd9\u6b65\uff1f \u5f88\u591a\u65f6\u5019\u9700\u8981\u7528\u9884\u5148\u5b9a\u4e49\u597d\u7684\u4e0e\u975e\u95e8\uff0c\u6216\u8005\u5176\u4ed6\u57fa\u672c\u6a21\u5757\uff08\u5982 XOR\uff09\u76f4\u63a5\u5957\u5165\u7535\u8def\u4e2d\u53bb\uff0c\u53ef\u4ee5\u964d\u4f4e\u7535\u8def\u7684\u6210\u672c\u548c\u5ef6\u8fdf\u3002 technology selected Verification Verify the correctness of the final design manually or using simulation.(\u4eff\u771f) BCD to Excess-3 code converter Specification Transforms BCD code for the decimal digits to Excess-3 code for the decimal digits BCD code words for digits 0 through 9: 4-bit patterns 0000 to 1001, respectively \u5176\u4ed6\u8f93\u5165\u8ba4\u4e3a\u662f\u65e0\u5173\u9879\u3002 Excess-3 code words for digits 0 through 9: 4-bit patterns consisting of 3 (binary 0011) added to each BCD code word Implementation: multiple-level circuit. NAND gates(including inverters) Formulation Optimization two-level W X Y Z \u8f93\u51fa\u4e5f\u9700\u8981\u56db\u4e2a\u903b\u8f91\u51fd\u6570\u3002 \u5355\u72ec ABCD \u56db\u8f93\u5165 \u5bf9\u5e94\u4e00\u4e2a\u8f93\u51fa W, \u7528\u5361\u8bfa\u56fe\u5316\u7b80\u3002 \u5f97\u5230 \\(W=A+BC+BD, X=\\overline B C+\\overline B D+B \\overline C\\overline D, Y=CD+\\overline C\\overline D, Z=\\overline D\\) * multiple-level \\(G=7+10+6+0=23\\) . \u4f18\u5316\u540e: \\(T_1=C+D, W=A+BT_1, X=\\overline B T_1B \\overline C\\overline D, Y=CD+\\overline C\\overline D, Z=\\overline D\\) \\(G=2+4+7+6+0=19\\) , \u6700\u591a\u662f\u4e09\u7ea7\u7535\u8def\u3002 \\(\\overline C\\overline D=\\overline{C+D}=\\overline{T_1},T_1=C+D, W=A+BT_1, X=\\overline B T_1B \\overline C\\overline D, Y=CD+\\overline C\\overline D, Z=\\overline D\\) \\(G = 2 +1 + 4 + 6 + 4 + 0 = 17\\) \uff0c\u6700\u591a\u662f\u56db\u7ea7\u7535\u8def\u3002 \u4e3a\u4ec0\u4e48\u8981\u7b97 T1 \u975e\uff1aABCD \u662f\u5916\u90e8\u8f93\u5165\u7684\u5f15\u811a\uff0c\u4e00\u822c\u540c\u65f6\u6709\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\u3002\u4f46 T1 \u662f\u5185\u90e8\u4ea7\u751f\u7684\u4fe1\u53f7\uff0c\u5bf9\u8fd9\u4e2a\u4fe1\u53f7\u7684\u975e\u8981\u81ea\u5df1\u8ba1\u7b97\u5f97\u5230\u3002 Technology Mapping Mapping with a library containing inverters and 2-input NAND, 2-input NOR, and 2-2 AOI(\u4e0e\u6216\u975e) gates Verification (\u4e3a\u4ec0\u4e48\u6709\u7684\u65f6\u5019\u7b97 G, \u6709\u7684\u65f6\u5019\u7b97 GN. \u56e0\u4e3a\u89e6\u53d1\u5668\u540c\u65f6\u6709\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\uff0c\u6240\u4ee5\u5f88\u591a\u65f6\u5019\u4e0d\u9700\u8981\u5355\u72ec\u7b97 GN.\uff09","title":"Design Procedure"},{"location":"Logic/logic03/#chip-design-styles","text":"Full custom: \u5168\u90e8\u81ea\u5df1\u5b9a\u5236\u5316\uff0c\u4e0d\u7528\u5148\u5b9a\u4e49\u597d\u7684\u6a21\u578b\u3002\uff08\u56e0\u4e3a\u5e93\u4f1a\u8003\u8651\u901a\u7528\u6027\uff0c\u5b8c\u6574\uff0c\u5e26\u6765\u6210\u672c\u5f00\u9500\u6bd4\u8f83\u9ad8\uff0c\u5ef6\u8fdf\u4e5f\u76f8\u5bf9\u5927\uff09 \u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u7814\u53d1\u6210\u672c\u9ad8\uff0c\u4f46\u751f\u4ea7\u6210\u672c\u6700\u4f4e\u3002 \u7528\u4e8e\u9ad8\u6027\u80fd\uff0c\u6216\u8005\u751f\u4ea7\u91cf\u975e\u5e38\u5927\u7684\u65f6\u5019\u3002 Justifiable only for dense, fast chips with high sales volume. Standard cell: \u4f7f\u7528\u9884\u5148\u89c4\u5b9a\u597d\u7684\u6807\u51c6\u5e93(\u5982\u51e0\u8f93\u5165\u7684\u4e0e\u95e8) Gate array: \u7814\u53d1\u6210\u672c\u4f4e\u3002\u4e70\u73b0\u6210\u7684\u82af\u7247\uff0c\u5199\u8fdb\u4ee3\u7801\u5373\u53ef\u6267\u884c\u3002\u6210\u672c\u6700\u4f4e\uff08\u4e0d\u7528\u6d41\u7247\uff09 Cell Libraries Cell - a pre-designed primitive block Cell library - a collection of cells available for design using a particular implementation technology Cell characterization - a detailed specification of a cell for use by a designer - often based on actual cell design and fabrication and measured values \u5305\u62ec\u539f\u7406\u56fe\uff0c\u82af\u7247\u9762\u79ef\uff0c\u8f93\u5165\u8d1f\u8f7d\uff0c\u5ef6\u8fdf\uff0c\u5de5\u827a\u6620\u5c04\u7684\u6a21\u677f\u5e93\uff0c\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\u5982\u4f55\u5b9e\u73b0\u3002 e.g.","title":"Chip Design Styles"},{"location":"Logic/logic03/#mapping-to-nand-gates","text":"\u5982\u4f55\u53ea\u7528 NAND/NOR \u505a\u5de5\u827a\u6620\u5c04 \u5047\u8bbe\uff1a\u4e0d\u8003\u8651 gate loading \u548c delay. \u53ef\u4ee5\u6709\u4efb\u610f\u8f93\u5165\u7684\u4e0e\u975e/\u6216\u975e\u95e8\u3002 The mapping is accomplished by: Replacing AND and OR symbols Pushing inverters through circuit fan-out points Canceling inverter pairs Example b -> c \u5c31\u662f\u628a 5 \u63a8\u51fa\u6563\u51fa\u70b9\uff0c\u968f\u540e\u548c\u5176\u4ed6\u975e\u95e8\u76f8\u6d88\u3002 NONR \u4e0e NAND \u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86 replace \u8fd9\u6b65\u3002","title":"Mapping to NAND gates"},{"location":"Logic/logic03/#verification","text":"\u9a8c\u8bc1\u65b9\u6cd5\uff1a\u771f\u503c\u8868/\u4eff\u771f/\u903b\u8f91\u51fd\u6570 \u5c0f\u7ec6\u8282\uff1a\u4eff\u771f\u8f93\u51fa\u4e2d\u6709\u5c0f\u8109\u51b2\uff0c\u56e0\u4e3a\u5ef6\u8fdf\u4ea7\u751f\u3002\u5982\u679c\u6ca1\u6709\u60ef\u6027\u5ef6\u8fdf\uff0c\u6211\u4eec\u8981\u8003\u8651\u628a\u5b83\u5438\u6536\u6389\u3002 Behaviour Simulation \u770b\u4e0d\u5230\uff0c\u56e0\u4e3a\u4ed6\u4e0d\u8003\u8651\u4f20\u8f93\u5ef6\u8fdf\u3002\u591a\u8003\u8651\u4f7f\u7528\u6709\u5ef6\u8fdf\u7684\u4eff\u771f","title":"Verification"},{"location":"Logic/logic03/#combinational-logic","text":"functional block: \u504f\u9ad8\u5c42\u903b\u8f91\u5e94\u7528\uff0c\u5982\u8bd1\u7801\u5668\uff0c\u9009\u62e9\u5668\u3002","title":"Combinational Logic"},{"location":"Logic/logic03/#rudimentary-logic-functions","text":"b \u4e2d\u8868\u793a\u63a5\u5730\u548c\u63a5\u7535\u6e90\u3002","title":"Rudimentary Logic Functions"},{"location":"Logic/logic03/#multiple-bit-rudimentary-functions","text":"A wide line is used to represent a bus which is a vector signal. b \u4e2d 4 \u8868\u793a\u4f4d\u5bbd\uff0c4 \u4f4d\u4fe1\u53f7\u3002 Sets of bits can be split from the bus as shown in \u00a9 for bits 2 and 1 of F. The sets of bits need not be continuous as shown in (d) for bits 3, 1, and 0 of F.","title":"Multiple-bit Rudimentary Functions"},{"location":"Logic/logic03/#enabling-function","text":"Enabling permits an input signal to pass through to an output Disabling blocks an input signal from passing through to an output, replacing it with a fixed value The value on the output when it is disable can be Hi-Z (as for three-state buffers and transmission gates), 0 , or 1 Example (a) when disabled, 0 output (b) when disabled, 1 output. \u5176\u4e2d\u4e5f\u53ef\u4ee5\u5199 \\(\\overline {EN}\\) \u7136\u540e\u76f4\u63a5\u63a5\u6216\u95e8\uff0c\u4e0d\u7528\u6807 inverter.","title":"Enabling Function"},{"location":"Logic/logic03/#decoding","text":"Decoding - the conversion of an n-bit input code to an m-bit output code with \\(n \\leq m\\leq 2^n\\) such that each valid code word produces a unique output code. Circuits that perform decoding are called decoders . 3-8 \u8bd1\u7801\u5668 \u5176\u771f\u503c\u8868\uff1a Example \u6734\u7d20\u5b9e\u73b0 n-to-m \u7684\u8bd1\u7801\u5668\u6709 \\(n\\times m\\) \u95e8\u8f93\u5165\u6210\u672c.( \\(2\\times 2^n\\) ) \u8bd1\u7801\u5668\u5e38\u7528\u4e8e\u5185\u5b58\uff0c\u63a5\u5728\u5730\u5740\u603b\u7ebf\u3002 \\(32-2^{32}\\) \u8bd1\u7801. \u6210\u672c \\(32\\times 2^{32}\\) \u5982\u4f55\u51cf\u5c11\u5b9e\u73b0\u6210\u672c\uff1f","title":"Decoding"},{"location":"Logic/logic03/#decode-expansion","text":"3-8 \u8bd1\u7801\u5668\uff0c\u8f93\u5165\u5206\u6210\u4e24\u90e8\u5206\uff0cA \u7528 1-2 \u8bd1\u7801\u5668, B C \u7528 2-4 \u8bd1\u7801\u5668 \u62bd\u8c61\u4e3a\u884c\u5217\u8bd1\u7801\uff1a\u4e00\u7ec4\u662f\u884c\u8bd1\u7801\uff0c\u4e00\u7ec4\u662f\u5217\u8bd1\u7801\u3002 \u5bf9\u4e8e \\(n - 2^n\\) \u8bbe\u8ba1\u4e24\u4e2a\u8bd1\u7801\u5668\uff0c\u4e00\u4e2a \\(\\dfrac{n}{2}\\) \u8f93\u5165 \\(2^{\\frac{n}{2}}\\) \u7684\u884c\u8bd1\u7801\u5668\uff0c\u4e00\u4e2a \\(\\dfrac{n}{2}\\) \u8f93\u5165 \\(2^{\\frac{n}{2}}\\) \u8f93\u51fa\u7684\u5217\u8bd1\u7801\u5668\u3002 \u8fd9\u6837\u518d\u628a\u884c\u5217\u7684\u8f93\u51fa\u7528 2-AND \u8fde\u63a5\uff0c\u6211\u4eec\u53ea\u9700\u8981 \\(2^{\\frac{n}{2}}\\times 2^{\\frac{n}{2}}=2^n\\) \u4e2a AND \u95e8, \u4e2d\u95f4\u4e0e\u95e8\u9635\u5217\u7684\u6210\u672c\u662f \\(2^n\\times 2 =2^{n+1}\\) . \u8bd1\u7801\u5ef6\u8fdf\u52a0\u5927\uff0c\u4f46\u964d\u4f4e\u6210\u672c\u3002","title":"Decode Expansion"},{"location":"Logic/logic03/#decoder-with-enable","text":"Note Alternatively, (b) can be viewed as distributing value of signal EN to 1 of 4 outputs In this case, called demultiplexer(\u5206\u914d\u5668) . \u628a D1 \u770b\u4f5c D1=EN. \u5373 \\(A_1, A_0\\) \u51b3\u5b9a\u628a EN \u7684\u4fe1\u53f7\u5206\u914d\u5230\u54ea\u4e2a\u5f15\u811a\u3002","title":"Decoder with Enable"},{"location":"Logic/logic03/#combinational-logic-implementation-decoder-and-or-gates","text":"Implement m functions of n variables with: Sum-of-minterms expressions One n-to-2n-line decoder m OR gates, one for each output \u628a\u6700\u5c0f\u9879\u6216\u8d77\u6765\uff0c\u5f97\u5230\u4efb\u610f\u7684\u903b\u8f91\u51fd\u6570 Binary Adder BCD-to-Segment Decoder \u4e03\u6bb5\u6570\u7801\u7ba1\u91cc\uff0c\u4eae\u4e0d\u540c\u7684\u6bb5\u5373\u53ef\u8868\u793a\u4e0d\u540c\u7684\u6570\u5b57 \u4e0a\u4e3a\u5171\u9633\u6781\uff08\u8f93\u51fa 0 \u624d\u80fd\u4eae\uff0c\u9634\u6781\u76f8\u53cd\uff09\u4e0b\u4e3a\u5171\u9634\u6781 \u8f93\u5165\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u4eae\u5bf9\u5e94\u7684\u6570\u7801\u7ba1\uff0c\u4f7f\u5176\u53ef\u4ee5\u663e\u793a\u5728\u6570\u7801\u7ba1\u4e0a","title":"Combinational Logic Implementation - Decoder and OR Gates"},{"location":"Logic/logic03/#encoding","text":"Encoding - the opposite of decoding - the conversion of an m-bit input code to a n-bit output code with \\(n <=m <= 2^n\\) such that each valid code word produces a unique output code \u4e00\u4e2a\u8bd1\u7801\u5668 \\(2^n\\) \u8f93\u5165\uff0cn \u4e2a\u8f93\u51fa\u3002\u5e38\u7528\u4e8e\u4e2d\u65ad\u4fe1\u53f7\uff0c\u8ba1\u7b97\u673a\u54cd\u5e94\uff0c\u544a\u8bc9 CPU \u54ea\u4e00\u53f7\u7684\u4e2d\u65ad\u53d1\u751f\u4e86\uff08\u8fd9\u91cc\u5c31\u8981\u8fdb\u884c\u7f16\u7801\uff09 decimal-BCD encoder Inputs : 10 bits corresponding to decimal digits 0 through 9, (D0, \u2026, D9) Outputs : 4 bits with BCD codes Function : If input bit Di is a 1, then the output (A3, A2, A1, A0) is the BCD code for i. A3 = D8 + D9; A2 = D4 + D5 + D6 + D7; A1 = D2 + D3 + D6 + D7; A0 = D1 + D3 + D5 + D7 + D9 \u5982\u679c\u8f93\u5165\u7684 10 \u6839\u7ebf\u91cc\uff0c\u6709\u4e24\u4e2a\u8f93\u5165\u90fd\u4e3a 1, \u53ef\u80fd\u4f1a\u5f97\u5230\u6ca1\u6709\u610f\u4e49\u7684\u8f93\u51fa\uff0c\u9700\u8981\u4f18\u5148\u7ea7\u3002","title":"Encoding"},{"location":"Logic/logic03/#priority-encoder","text":"\u5982\u679c\u8fd9\u91cc\u6709\u591a\u4e2a\u8f93\u5165\u4e3a 1, encoder \u4f1a\u5c06\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u503c\u7f16\u7801\u3002 Example V \u8868\u793a\u662f\u662f\u5426\u6709\u6709\u6548\u4fe1\u53f7\u8fdb\u5165 \\(A2 = D4\\) \\(A1 = \\overline{D4} D3 + \\overline{D4} D2 = \\overline{D4}F1, F1 = (D3 + D2)\\) \\(A0 = \\overline{D4} D3 + \\overline{D4}\\overline{D3}\\overline{D2} D1 = \\overline{D4} (D3 + \\overline{D2} D1)\\) \\(V = D4 + F1 + D1 + D0\\)","title":"Priority Encoder"},{"location":"Logic/logic03/#multiplexers","text":"Circuits that perform selecting have: A set of information inputs from which the selection is made A single output A set of control lines for making the selection Logic circuits that perform selecting are called multiplexers . A typical multiplexer has n control inputs \\((S{n - 1},... S_0)\\) called selection inputs, \\(2^n\\) information inputs \\((I_{2^n - 1}, \u2026 I_0)\\) , and one output Y. \u5982\u679c\u8f93\u5165 \\(m<2^n\\) \u4e5f\u53ef\u4ee5\u8bbe\u8ba1\u4e3a n select lines \u7684 multiplexers. 2-to-1-Line Multiplexer S = 0 \u65f6\u9009\u62e9 \\(I_0\\) ; S = 1 \u65f6\u9009\u62e9 \\(I_1\\) . Equation: \\(Y=\\overline S I_0+SI_1\\) \u753b\u7535\u8def\u56fe\u65f6\uff0c\u8981\u5206\u6210\u4e24\u5757\uff1a\u7b2c\u4e00\u90e8\u5206 1-2 \u8bd1\u7801\u5668\uff0c\u540e\u4e00\u90e8\u5206\u662f 2-2 \u4e0e\u6216\u7ed3\u6784\u3002\uff08\u7ed3\u6784\u590d\u6742\u540e\uff0c\u5176\u5b9e\u5c31\u662f\u5c06\u8fd9\u4e24\u90e8\u5206\u6269\u5c55\uff09 In general, \\(2^n\\) -to-1-line multiplexers: n-to- \\(2^n\\) -line decoder \\(2^n \\times 2\\) AND-OR Example \u4efb\u4f55\u65f6\u523b\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u662f 1, \u76f8\u5f53\u4e8e\u53ea\u6709\u4e00\u4e2a\u4e0e\u95e8\u88ab enable, \u5176\u4f59\u90fd disable. \u8fd9\u6837\u5c31\u80fd\u9009\u62e9\u51fa enable \u7684\u4fe1\u53f7\u3002 \u591a\u4f4d\u7684\u6570\u636e\u9009\u62e9\u3002\u8fd9\u91cc\u6709\u56db\u7ec4\u4fe1\u53f7\uff0c\u6bcf\u7ec4\u4fe1\u53f7\u90fd\u662f\u56db\u4e2a\u8f93\u5165\u7684\u4e00\u4f4d\uff0c\u4f46\u9009\u62e9\u903b\u8f91\u5bf9\u4e8e\u56db\u7ec4\u4fe1\u53f7\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u6700\u540e\u9009\u51fa\u6765\u7684\u90fd\u662f\u540c\u4e00\u7ec4\u4fe1\u53f7\u3002\u5373\u6700\u540e\u8f93\u51fa\u7684\u56db\u4f4d\u4fe1\u53f7\u90fd\u6765\u81ea\u540c\u4e00\u6839\u603b\u7ebf\uff0c \u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u7528\u4e0e\u6216\u7ed3\u6784\uff0c\u4f7f\u7528\u4e09\u6001\u95e8\u5b9e\u73b0 mux. \u4e09\u6001\u95e8\u6539\u8fdb Mux (\u5229\u7528\u4e09\u6001\u95e8\u53ef\u4ee5\u5c06\u8f93\u51fa\u5e76\u5728\u4e00\u8d77\uff0c\u540c\u65f6\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u6709\u6709\u6548\u8f93\u51fa\u3002\u6211\u4eec\u8fd9\u91cc\u8bd1\u7801\u5668\u53ea\u4f1a\u6709\u4e00\u4e2a\u8f93\u51fa\u4e3a 1, \u4fdd\u8bc1\u4e86\u7535\u8def\u5b89\u5168\uff1b\u8fd9\u6837\u8fd8\u53ef\u4ee5\u964d\u4f4e\u6210\u672c) \u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u8bd1\u7801\u5668\u4e5f\u4f7f\u7528\u4e09\u6001\u95e8\uff1a \u8fd9\u91cc\u6211\u4eec\u662f\u4e24\u5c42\u9009\u62e9\u7684\u903b\u8f91\uff0cS0 = 0 \u65f6\u5148\u9009\u51fa I0(00) \u548c I2(10), S1 \u518d\u8fdb\u884c\u7b2c\u4e8c\u5c42\u7684\u9009\u62e9\u3002","title":"Multiplexers"},{"location":"Logic/logic03/#combinational-logic-implementation-multiplexer-approach","text":"\u5bf9\u4e8e\u4e00\u4e2a n \u53d8\u91cf\u7684\u903b\u8f91\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u62bd\u8c61\u4e3a n \u4e2a\u8f93\u5165\u5bf9\u5e94\u4e00\u4e2a\u8f93\u51fa\u3002\u6211\u4eec\u53ef\u4ee5\u7528 Mux \u5bf9\u5e94\u771f\u503c\u8868\u4e2d\u7684 \\(2^n\\) \u884c\u7684\u7ed3\u679c\uff0c\u7528 n \u8f93\u5165\u4f5c\u4e3a\u9009\u62e9\u7ebf\u6765\u67e5\u8868\u3002 Gray to Binary Code \u76f8\u5f53\u4e8e\u5229\u7528 ABC \u67e5\u8868\uff0c\u5982\u679c mux \u9009\u62e9\u51fa\u4e00\u4f4d\uff08\u6839\u636e\u771f\u503c\u8868\u5f97\u5230\uff09 \u6ce8\u610f\u5f15\u811a\u987a\u5e8f\uff01 \u6211\u4eec\u53ef\u4ee5\u505a\u8fdb\u4e00\u6b65\u6539\u8fdb\uff0c \\(n+1\\) \u53d8\u91cf\u7528 \\(2^n-1\\) mux \u5bf9\u4e8e \\(F(A,B,C)\\) \u5f53 A B \u786e\u5b9a\u65f6\uff0c\u6700\u540e\u53ef\u80fd\u8f93\u51fa\u53ea\u53ef\u80fd\u4e3a \\(1,0,C,\\overline C\\) \u5229\u7528\u8fd9\u70b9\u6211\u4eec\u53ef\u4ee5\u6539\u9020\u771f\u503c\u8868\uff0c \u7406\u8bba\u4e0a\u8fd8\u53ef\u4ee5\u653e\u66f4\u591a\u53d8\u91cf\u5230\u53e6\u4e00\u8fb9","title":"Combinational Logic Implementation- Multiplexer Approach"},{"location":"Logic/logic03/#arithmetic-functions","text":"Cell - subfunction block \u5355\u5143\u6a21\u5757\uff0c\u5904\u7406\u6bcf\u4f4d","title":"Arithmetic Functions"},{"location":"Logic/logic03/#functional-blocks-addition","text":"Addition Development: Half-Adder (HA) , a 2-input bit-wise addition functional block.(no carry input) Full-Adder (FA) , a 3-input bit-wise addition functional block. Ripple Carry Adder , an iterative array to perform binary addition. Carry-Look-Ahead Adder (CLA) , a hierarchical structure to improve performance.","title":"Functional Blocks: Addition"},{"location":"Logic/logic03/#half-adder","text":"\\(S=X\\oplus Y, C=XY\\) .","title":"Half-Adder"},{"location":"Logic/logic03/#full-adder","text":"S \u65e0\u6cd5\u5316\u7b80\uff0c\u4f46\u53ef\u4ee5\u8868\u793a\u4e3a\u5947\u51fd\u6570\uff08\u5f02\u6216\uff09 \\(S=X\\overline Y\\overline Z+\\overline X Y \\overline Z + \\overline X\\overline YZ+XYZ=X\\oplus Y\\oplus Z\\) \\(C=XY+XZ+YZ=XY+(X\\oplus Y)Z\\) . The term \\(XY\\) is carry generate .( \\(XY=1\\) \u65f6\u4e00\u5b9a\u4f1a\u6709\u8fdb\u4f4d) The term \\(X\\oplus Y\\) is carry propagate .( \\(X\\oplus Y=1\\) \u65f6 X,Y\u6709\u4e00\u4e2a\u662f 0, \u4e00\u5b9a\u4f1a\u628a\u8fdb\u4f4d\u4f20\u4e0b\u53bb\uff0c\u5373 \\(C=Z\\) ) Note \u6ce8\u610f C \u7684\u6539\u5199\uff0c\u8fd9\u91cc\u6539\u4e3a\u5f02\u6216\u4e0d\u6539\u53d8\u7ed3\u679c\uff0c\u540c\u65f6\u56e0\u4e3a\u5df2\u7ecf\u6709 xor \u4e86\uff0c\u53ef\u4ee5\u8282\u7ea6\u4e00\u4e2a\u95e8\u3002 Implementation :","title":"Full Adder"},{"location":"Logic/logic03/#binary-adders","text":"\u5b9e\u73b0\u4e8c\u8fdb\u5236\u591a\u4f4d\u52a0\u6cd5","title":"Binary Adders"},{"location":"Logic/logic03/#unsigned-subtraction","text":"Subtract the subtrahend(\u51cf\u6570) N from the minuend(\u88ab\u51cf\u6570) M If no end borrow occurs, then \\(M\\geq N\\) , and the result is a non-negative number and correct. If an end borrow occurs , the \\(N > M\\) and the difference \\(M - N + 2^n\\) is subtracted from \\(2^n\\) , and a minus sign is appended to the result. To do both unsigned addition and unsigned subtraction requires: \u590d\u6742\uff0c\u6210\u672c\u9ad8","title":"Unsigned Subtraction"},{"location":"Logic/logic03/#complements","text":"Diminished Radix Complement of N \u53cd\u7801 defined as \\(r^n-1-N\\) ( \\(r^n-1\\) \u662f bits[n-1:0] \u5168\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u7528\u5b83\u51cf\u53bb N \u5373\u53ef\u5f97\u5230 N \u6309\u4f4d\u53d6\u53cd\u7684\u7ed3\u679c\uff0c\u5373\u53cd\u7801) The 1's complement is obtained by complementing each individual bit (bitwise NOT). 2\u2019s complement \u8865\u7801 defined as \\(r^n-N\\) \u53cd\u7801\u6309\u4f4d\u53d6\u53cd\u518d\u52a0\u4e00 \u4e5f\u53ef\u4ee5\u8fd9\u6837\u6c42\u8865\u7801\uff1a\u4ece\u53f3\u5f80\u5de6\u7b2c\u4e00\u4e2a 1 \u4e4b\u524d\u4e0d\u53d8\uff0c\u6b64\u540e\u5176\u4ed6\u4f4d\u5168\u90e8\u6c42\u53cd Subtraction is done by adding the complement of the subtrahend. Subtraction with 2\u2019s Complement Add the 2's complement of the subtrahend N to the minuend M: \\(M + (2^n -N) = M - N + 2^n\\) if \\(M\\geq N\\) , the sum produces end carry \\(r^n\\) which is discarded; from above, \\(M - N\\) remains. If \\(M < N\\) , the sum does not produce an end carry and, from above, is equal to \\(2^n - ( N - M )\\) , the 2's complement of \\(( N - M )\\) . To obtain the result \\((N \u2013 M)\\) , take the 2's complement of the sum and place a \\(-\\) to its left. Example \u8fdb\u4f4d\u662f 1 \u8868\u660e\u7ed3\u679c\u4e3a\u6b63\uff0c\u4e0d\u9700\u5bf9\u7ed3\u679c\u4fee\u6b63 \u8fdb\u4f4d\u662f 0 \u8868\u660e\u7ed3\u679c\u4e3a\u8d1f\uff0c\u9700\u5bf9\u7ed3\u679c\u4fee\u6b63","title":"Complements"},{"location":"Logic/logic03/#signed-integers","text":"Signed Integer Representations : \u7b2c n-1 \u4f4d\u8868\u793a\u6b63\u8d1f\uff0c\u540e\u9762 bits[n-2:0] \u8868\u793a\u7edd\u5bf9\u503c\u5927\u5c0f Signed-Complement Signed 1's Complement Signed 2's Complement \u8be6\u89c1 ICS notes","title":"Signed Integers"},{"location":"Logic/logic03/#signed-magnitude-arithmetic","text":"\u68c0\u67e5\u4e09\u4e2a\u7b26\u53f7\u4f4d\u7684\u5947\u5076\u6027\uff08\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u7b26\u53f7\u4f4d\u548c\u52a0\u51cf\u6cd5\u7684\u7b26\u53f7\u4f4d\uff0c\u6211\u4eec\u4e00\u822c\u8ba4\u4e3a\u52a0\u6cd5\u662f 0, \u51cf\u6cd5\u662f 1\uff09\u7528\u4e8e\u5224\u65ad\u6ea2\u51fa \u53ef\u80fd\u6ea2\u51fa\u7684\u60c5\u51b5\uff1a\u6b63\u52a0\u6b63(000), \u6b63\u51cf\u8d1f(011), \u8d1f\u51cf\u6b63(101), \u8d1f\u52a0\u8d1f(110) If the parity of the three signs is 0:(overflow may happen) Add the magnitudes. Check for overflow (a carry out of the MSB) The sign of the result is the same as the sign of the first operand. If the parity of the three signs is 1: Subtract the second magnitude from the first. If a borrow occurs: take the two\u2019s complement of result and make the result sign the complement of the sign of the first operand. Overflow will never occur.","title":"Signed-Magnitude Arithmetic"},{"location":"Logic/logic03/#signed-complement-arithmetic","text":"Addition: Add the numbers including the sign bits, discarding a carry out of the sign bits (2's Complement), or using an end-around carry (1's Complement). If the sign bits were the same for both numbers and the sign of the result is different, an overflow has occurred. The sign of the result is computed in step 1. Subtraction: Form the complement of the number you are subtracting and follow the rules for addition. Signed 2\u2019s Complement Examples 1101 + 0011 Result is 0000. The carry out of the MSB is discarded. 1101 - 0011 Complement 0011 to 1101 and add. Result is 1010. The carry out of the MSB is discarded. 2\u2019s Complement Adder/Subtractor \u5229\u7528\u5f02\u6216\u95e8\uff0c\u5f53 S=0 \u65f6\u5f02\u6216\u95e8\u76f8\u5f53\u4e8e\u4fdd\u6301\u53e6\u4e00\u4e2a\u4fe1\u53f7\uff0c\u5f53 S=1 \u65f6\u5f02\u6216\u95e8\u76f8\u5f53\u4e8e\u5bf9\u53e6\u4e00\u4e2a\u4fe1\u53f7\u53d6\u53cd\u3002 Overflow Detection Overflow occurs if n + 1 bits are required to contain the result from an n-bit addition or subtraction Example Simplest way to implement overflow \\(V = C_n \\oplus C_{n - 1}\\) \\(C_n\\) \u662f\u6ea2\u51fa\u53bb\u7684\u4f4d\uff0c \\(C_{n-1}\\) \u662f\u8fd0\u7b97\u540e\u7684\u7b26\u53f7\u4f4d\u3002 \u622a\u65ad","title":"Signed-Complement Arithmetic"},{"location":"Logic/logic03/#arithmetic-logic-unit-alu","text":"Decompose the arithmetic circuit into: An n-bit parallel adder A block of logic that selects four choices for the B input to the adder Example \u5176\u4e2d \\(Y_i=B_iS_0+\\overline B_iS_1\\) S0 S1 \u7684\u53d8\u5316\u53ef\u4ee5\u7ed9\u52a0\u6cd5\u5668\u63d0\u4f9b\u4e0d\u540c\u7684\u8f93\u5165\uff0c\u5305\u62ec -1(\u4e8c\u8fdb\u5236\u6bcf\u4e00\u4f4d\u90fd\u662f 1) 0 \\(B\\) \\(\\overline B\\)","title":"Arithmetic Logic Unit (ALU)"},{"location":"Logic/logic04/","text":"Sequential Circuits \u00b6 Abstract \u65f6\u5e8f\u7535\u8def\u6982\u5ff5\u548c\u7ec4\u6210 Introduction to Sequential Circuits \u8f93\u51fa\u65b9\u7a0b\u3001\u6fc0\u52b1\u51fd\u6570\u3001\u6b21\u6001\u65b9\u7a0b\u3001\u8f93\u51fa\u65b9\u7a0b\u7c7b\u578b Output function, Excitationfunction, Next state function, type of output functions \u65f6\u5e8f\u7535\u8def\u7c7b\u578b Types of sequential circuits \u7535\u8def\u5ef6\u8fdf\u6a21\u578b Circuit delay model \u9501\u5b58\u5668\u4e0e\u89e6\u53d1\u5668 Latch and Flip-Flop S-R\u9501\u5b58\u5668\u7684\u539f\u7406\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b\uff0c\u5185\u90e8\u7535\u8def\u5206\u6790\uff0c\u4e0d\u786e\u5b9a\u72b6\u6001\u7684\u539f\u56e0\u53ca\u51fa\u73b0\u6761\u4ef6 Analysis of Basic S-R Latch, Characteristic Table, Characteristic Equation, reason of unstable state D\u9501\u5b58\u5668\u3001D\u89e6\u53d1\u5668\u7684\u539f\u7406\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b\uff0c\u5185\u90e8\u7535\u8def\u5206\u6790 Theory of D Latch and D Flip-Flop, Characteristic Table, Characteristic Equation JK\u89e6\u53d1\u5668\u3001T\u89e6\u53d1\u5668\u7684\u884c\u4e3a\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b Behavior of JK Flip-Flop, TFlip-Flop, Characteristic Table, Characteristic Equation \u8109\u51b2\u89e6\u53d1\u548c\u8fb9\u6cbf\u89e6\u53d1\u7684\u6982\u5ff5\uff0c\u8109\u51b2\u89e6\u53d1\u7684\u4e00\u6b21\u6027\u91c7\u6837\u884c\u4e3a\u539f\u56e0 Concept of Master-slave and edge-triggered flip-flop, 1s catching of Mast-slave flip-flop \u9501\u5b58\u5668\u548c\u89e6\u53d1\u5668\u7684\u65f6\u5e8f\uff0c\u5efa\u7acb\u65f6\u95f4\u3001\u4fdd\u6301\u65f6\u95f4\u3001\u4f20\u8f93\u5ef6\u8fdf\u7b49\u5404\u79cd\u65f6\u5e8f\u6210\u5206 Flip-Flop Timing Parameters, setup time, hold time, propagation delay \u5404\u79cd\u89e6\u53d1\u5668\u7684\u56fe\u5f62\u7b26\u53f7 Symbols of Flip-Flops \u72b6\u6001\u8868\u3001\u72b6\u6001\u56fe State Table, State Diagram \u540c\u6b65\u65f6\u5e8f\u7535\u8def\u5206\u6790 Sequential Circuit Analysis \u6839\u636e\u7ed9\u5b9a\u7535\u8def\uff0c\u5199\u51fa\u8f93\u51fa\u65b9\u7a0b\u548c\u6fc0\u52b1\u51fd\u6570/\u6b21\u6001\u65b9\u7a0b Derive output functions and excitationfunction/Next state function \u5217\u51fa\u72b6\u6001\u771f\u503c\u8868 ObtainState truth table \u5217\u51fa\u65f6\u5e8f\u7535\u8def\u7684\u6b21\u6001 List next state of sequential circuit \u4f5c\u72b6\u6001\u8868\u548c\u72b6\u6001\u56fe ObtainState Table and State Diagram \u5206\u6790\u65f6\u5e8f\u7535\u8def\u7684\u5916\u90e8\u6027\u80fd Analysis the behavior of sequential circuit \u5bf9\u7535\u8def\u8fdb\u884c\u8bc4\u8ff0\uff0c\u901a\u5e38\u9700\u68c0\u67e5\u81ea\u6062\u590d\u529f\u80fd\u53ca\u753b\u51fa\u65f6\u5e8f\u6ce2\u5f62\u56fe Evaluate the circuit, validate the self-recovery ability \u7535\u8def\u548c\u7cfb\u7edf\u7ea7\u65f6\u5e8f\u5206\u6790\uff0c\u65f6\u5e8f\u7535\u8def\u5404\u8def\u5f84\u7684\u65f6\u5e8f\u6210\u5206\u5206\u6790\u8ba1\u7b97 Circuit and System Level Timing, analyze and compute time component along any path of the sequential circuit 9\uff0e\u7c73\u5229\u578b\u548c\u7a46\u5c14\u578b\u7535\u8def\u5206\u6790 analyze Mealy and Moore type circuit 10\uff0e\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1 Sequential Circuit Design \u5199\u51fa\u89c4\u683c\u8bf4\u660e\u4e66 Specification \u7cfb\u7edf\u63cf\u8ff0\u2013\u4ece\u95ee\u9898\u9648\u8ff0\u4e2d\u5f97\u51fa\u72b6\u6001\u56fe\u548c\u72b6\u6001\u8868 Formulation -Obtain a state diagram or state table \u72b6\u6001\u8d4b\u503c\u2013\u4e3a\u72b6\u6001\u8868\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u8d4b\u4e8c\u8fdb\u5236\u4ee3\u7801 State Assignment -Assign binary codes to the states \u5f97\u5230\u89e6\u53d1\u5668\u7684\u8f93\u5165\u65b9\u7a0b-\u9009\u62e9\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u4ece\u72b6\u6001\u8868\u7684\u6b21\u6001\u680f\u5f97\u5230\u89e6\u53d1\u5668\u7684\u8f93\u5165\u65b9\u7a0b Flip-Flop Input Equation Determination-Select flip-flop types and derive flip-flop equations from next state entries in the table \u786e\u5b9a\u8f93\u51fa\u65b9\u7a0b-\u4ece\u72b6\u6001\u8868\u7684\u8f93\u51fa\u680f\u5f97\u5230\u8f93\u51fa\u65b9\u7a0b Output Equation Determination-Derive output equations from output entries in the table \u4f18\u5316\u2013\u4f18\u5316\u89e6\u53d1\u5668\u7684\u8f93\u5165\u65b9\u7a0b\u548c\u8f93\u51fa\u65b9\u7a0b Optimization-Optimize the equations \u5de5\u827a\u6620\u5c04\u2013\u6839\u636e\u65b9\u7a0b\u753b\u51fa\u7535\u8def\u56fe\uff0c\u5e76\u6620\u5c04\u5230\u89e6\u53d1\u5668\u548c\u95e8\u5de5\u827a Technology Mapping-Find circuit from equations and map to flip-flops and gate technology \u9a8c\u8bc1\u2013\u9a8c\u8bc1\u6700\u7ec8\u8bbe\u8ba1\u7684\u6b63\u786e\u6027 Verification-Verify correctness of final design Storage Elements and Analysis \u00b6 \u65f6\u5e8f\u7535\u8def\u5305\u62ec\uff1a\u7ec4\u5408\u903b\u8f91\u7535\u8def+\u5b58\u50a8\u5143\u4ef6 Combinatorial Logic Next state function Next State = f(Inputs, State) \u6b21\u6001\u65b9\u7a0b Output function (Mealy) Outputs = g(Inputs, State) Output function (Moore) Outputs = h(State) \u8f93\u5165\u4e0d\u4f1a\u76f4\u63a5\u6539\u53d8\u8f93\u51fa\uff0c\u800c\u662f\u901a\u8fc7\u72b6\u6001\u6765\u95f4\u63a5\u6539\u53d8\u8f93\u51fa Types of Sequential Circuits Depends on the times at which: storage elements observe their inputs, and storage elements change their state Synchronous \u72b6\u6001\u66f4\u65b0\u4e00\u5b9a\u53d1\u751f\u5728\u65f6\u949f\u5468\u671f\u7684\u6574\u5468\u671f\u4e0a Asynchronous \u72b6\u6001\u66f4\u65b0\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u95f4\u53d1\u751f \u5982\u679c\u65f6\u949f\u4e5f\u88ab\u770b\u505a\u4e00\u4e2a\u8f93\u5165\uff0c\u90a3\u4e48\u6240\u6709\u7535\u8def\u90fd\u662f Asynchronous Asynchronous \u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u6709\u9700\u8981\u7684\u65f6\u5019\u66f4\u65b0\u7535\u8def\uff0c\u964d\u4f4e\u7535\u8def\u7684\u529f\u8017 Discrete Event Simulation \u79bb\u6563\u4e8b\u4ef6\u4eff\u771f Latch \u00b6 Example The simple combinational circuit has now become a sequential circuit because its output is a function of a time sequence of input signals! Basic (NAND) \\(\\overline S\\) \u2013 \\(\\overline R\\) Latch \u00b6 \\(R\\) \\(S\\) \\(Q\\) \\(\\overline Q\\) Comment 1 1 ? ? Stored state unknown 1 0 1 0 Set Q to 1 1 1 1 0 Now Q remembers 1 0 1 0 1 Reset Q to 0 1 1 0 1 Now Q remembers 0 0 0 1 1 Both go high 1 1 ? ? Unstable! \u6700\u540e\u4e00\u6b65\uff0c\u4e24\u4e2a\u5f15\u811a\u540c\u65f6\u4ece 0 -> 1, \u90a3\u4e48\u4e24\u4e2a\u4e0e\u975e\u95e8\u7684\u8f93\u51fa\u90fd\u671f\u671b\u53d8\u6210 0, \u4f46\u53ea\u8981\u6709\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u53d8\u4e3a 0 \u53e6\u4e00\u4e2a\u95e8\u5c31\u88ab\u9501\u4f4f\u53d8\u6210 1, \u56e0\u6b64\u4e24\u4e2a\u95e8\u4e0d\u53ef\u80fd\u540c\u65f6\u53d8\u5316\u3002\u4f46\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u662f\u54ea\u4e2a\u95e8\u4f1a\u53d8\u6210 1. \\(S=0,R=0\\) is forbidden as input pattern. Basic (NOR) \\(S\\) \u2013 \\(R\\) Latch \u00b6 \\(R\\) \\(S\\) \\(Q\\) \\(\\overline Q\\) Comment 0 0 ? ? Stored state unknown 0 1 1 0 Set Q to 1 0 0 1 0 Now Q remembers 1 1 0 0 1 Reset Q to 0 0 0 0 1 Now Q remembers 0 1 1 1 1 Both go high 0 0 ? ? Unstable! Clocked \\(S\\) - \\(R\\) Latch \u00b6 \\(C\\) \u4f5c\u4e3a\u4e00\u4e2a ENABLE \u7684\u529f\u80fd\u3002\u5f53 \\(C=0\\) \u65f6\uff0c \\(Q\\) \u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u5f53 \\(C=1\\) \u65f6\uff0c\u4e0a\u9762\u76f8\u5f53\u4e8e \\(\\overline S\\) , \u4e0b\u9762\u76f8\u5f53\u4e8e \\(\\overline R\\) , \u53d8\u6210\u4e00\u4e2a\u949f\u63a7\u7684 SR \u9501\u5b58\u5668\u3002 \\(C\\) \\(S\\) \\(R\\) \\(Q(t+1)\\) 0 X X No change 1 0 0 No change 1 0 1 0: Clear Q 1 1 0 1: Set Q 1 1 1 Indeterminate \\(Q(t+1)\\) based on current state \\(Q(t)\\) and current inputs \\((S,R,C)\\) \\(D\\) Latch \u00b6 \\(S\\ R\\) \u4e0d\u4f1a\u540c\u65f6\u4e3a 0. \\(C\\) \\(D\\) \\(Q(t+1)\\) 0 X No change 1 0 0: Clear Q 0 1 1: Set Q \u5373\u5f53 \\(C=1\\) \u65f6 \\(Q=D\\) The graphic symbol for a \\(D\\) latch: Info \u5728\u7b97\u95e8\u8f93\u5165\u6210\u672c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u5206\u5f00\u7b97 G \u548c GN. \u56e0\u4e3a\u9501\u5b58\u5668\u540c\u65f6\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 \\(Q\\) \u548c \\(\\overline Q\\) , \u9501\u5b58\u5668\u53ef\u4ee5\u4e3a\u540e\u9762\u7684\u7ec4\u5408\u7535\u8def\u63d0\u4f9b\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\u3002 Flip-flop \u00b6 \u9501\u5b58\u5668\u4e0d\u9002\u5408\u4f7f\u7528\u5728\u7535\u8def\u4e2d\uff1a\u4e0d\u80fd\u505a\u5230\u4e00\u4e2a\u5468\u671f\uff0c\u72b6\u6001\u53ea\u66f4\u65b0\u4e00\u6b21\u3002\u5177\u4f53\u539f\u56e0\u89c1 ICS Notes S-R Master-Slave Flip-Flop \u00b6 \u524d\u9762\u79f0\u4e3a master(\u4e3b\u9501\u5b58\u5668), \u540e\u9762\u79f0\u4e3a slave(\u4ece\u9501\u5b58\u5668) \u5f53 \\(C=0\\) \u65f6\uff0c\u4e3b\u9501\u5b58\u5668\u4e0d\u53d8\u3002 \\(C\\) \u4ece 0 \u53d8\u4e3a 1 \u65f6\uff0c\u4e3b\u9501\u5b58\u5668\u88ab\u4f7f\u80fd\uff0cQ \u6539\u53d8\uff0c\u4f46\u4ece\u9501\u5b58\u5668\u4e0d\u53d8\u3002 \u5468\u671f\u53d8\u957f\u4e00\u500d \u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898(1s catching)\uff1a\u5f53 S R \u5747\u4e3a 0 \u65f6\u5982\u679c\u6709\u5c0f\u6270\u52a8\uff0c\u65e0\u6cd5\u590d\u539f \u8981\u6c42\u4e3b\u4ece\u89e6\u53d1\u5668\u907f\u514d S R \u7684\u6270\u52a8 Edge-Triggered D Flip-Flop \u00b6 An edge-triggered flip-flop ignores the pulse while it is at a constant level and triggers only during a transition of the clock signal. A master-slave D flip-flop which also exhibits edge-triggered behavior can be used. The delay of the S-R master-slave flip-flop can be avoided since the 1s-catching behavior is not present with D replacing S and R inputs. (D \u9501\u5b58\u5668\u4e0d\u4f1a\u51fa\u73b0 S R \u540c\u65f6\u4e3a 0 \u7684\u60c5\u51b5) Positive-Edge Triggered D Flip-Flop is Formed by adding inverter to clock input. (\u4e0a\u5347\u6cbf\u89e6\u53d1\u5668) Q changes to the value on D applied at the positive clock edge within timing constraints to be specified Actual Circuit of Edge-Triggered D Flip-Flop: (\u548c D-Latch Flip-flop \u6709\u6240\u4e0d\u540c) Standard Symbols for Storage Elements: Direct Inputs Direct \\(R\\) and/or \\(S\\) inputs that control the state of the latches within the flip-flops are used for this initialization . Analysis \u00b6 General Model \u540c\u6b65\u65f6\u5e8f\u7535\u8def\u91cc D \u89e6\u53d1\u5668\u7684\u65f6\u949f\u8f93\u5165\u7aef\uff0c\u7edf\u4e00\u63a5\u5728\u4e00\u4e2a\u7cfb\u7edf\u65f6\u949f\u8f93\u5165 CLK \u4fe1\u53f7\u4e0a\u3002\uff08\u89c4\u5b9a\u6240\u6709\u89e6\u53d1\u5668\u4f55\u65f6\u8fdb\u884c\u72b6\u6001\u6539\u53d8\uff0c\u662f\u989d\u5916\u63d0\u4f9b\u7684\u5f15\u811a\uff0c \u4e0d\u5c5e\u4e8e\u6574\u4e2a\u7cfb\u7edf\u7684\u4fe1\u53f7\u8f93\u5165 \uff09 Current State at time (t) is stored in an array of flip-flops. Next State at time (t+1) is a Boolean function of State and Inputs. Outputs at time (t) are a Boolean function of State (t) and (sometimes) Inputs (t). Example \u53ef\u4ee5\u770b\u5230\uff0ccp \u662f\u65f6\u949f\u8f93\u5165\u4fe1\u53f7 input: \\(x(t)\\) output: \\(y(t)\\) state: \\((A(t),B(t))\\) Boolean equations for the functions \\(D_A(t) = A(t)x(t)+ B(t)x(t), A(t+1)=A(t)x(t)+ B(t)x(t)\\) , \\(D_B(t) = A(t)x(t),B(t+1) = A(t)x(t), y(t) = x(t)(B(t) + A(t))\\) State table \u00b6 Present State \u2013 the values of the state variables for each allowed state. Input \u2013 the input combinations allowed. Next-state \u2013 the value of the state at time \\((t+1)\\) based on the present state and the input. Output \u2013 the value of the output as a function of the present state and (sometimes) the input. Example \u4ee3\u5165\u521a\u521a\u5199\u51fa\u7684\u5f0f\u5b50\u5373\u53ef \u4e5f\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u79cd\u753b\u6cd5\uff1a(\u4e8c\u7ef4\u72b6\u6001\u8868\uff0c\u6309\u7167\u683c\u96f7\u7801\u7684\u987a\u5e8f\u6392\u5217) Note \u5728\u753b\u72b6\u6001\u8868\u65f6\uff0c\u65e0\u6cd5\u8fbe\u5230\u7684\u72b6\u6001\u4e5f\u8981\u753b\u51fa\u6765\u3002\u56e0\u4e3a\u53ef\u80fd\u7a0b\u5e8f\u53d7\u5230\u67d0\u79cd\u6270\u52a8\u6216\u8005\u5f02\u5e38\uff0c\u53ef\u80fd\u4f1a\u8df3\u5230\u539f\u5148\u65e0\u6cd5\u5230\u8fbe\u7684\u72b6\u6001\u3002 State Diagrams \u00b6 The sequential circuit function can be represented in graphical form as a state diagram with the following components: A circle with the state name in it for each state A directed arc from the Present State to the Next State for each state transition A label on each directed arc with the Input values which causes the state transition, and A label: \u8f93\u51fa\u548c\u8f93\u5165\u662f\u5426\u6709\u5173\uff0c\u65e0\u5173\u6807\u5728\u5708\u91cc\u9762\uff0c\u6709\u5173\u6807\u5728\u5916\u9762 On each circle with the output value produced, or On each directed arc with the output value produced. Moore type output depends only on state(\u8f93\u51fa\u753b\u5728\u5708\u91cc\u9762) Mealy type output depends on state and input(\u8f93\u51fa\u753b\u5728\u6709\u5411\u5f27\u4e0a) Example \uff08\u659c\u6760\u5de6\u8fb9\u8868\u793a\u5916\u90e8\u8f93\u5165\uff0c\u53f3\u8fb9\u8868\u793a\u8f93\u51fa\uff09 Sequential Circuits or Sequential Machines are also called Finite State Machines (FSMs) . Equivalent State Definitions \u4e24\u4e2a\u72b6\u6001\uff0c\u65e0\u8bba\u8f93\u5165\u662f\u4ec0\u4e48\uff0c\u90fd\u4f1a\u4f7f\u8fd9\u4e24\u4e2a\u72b6\u6001\u8f93\u51fa\u76f8\u540c\uff0c\u6b21\u6001\u4e5f\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u72b6\u6001\u662f\u7b49\u6548\u72b6\u6001\u3002 Example \u5728\u8fd9\u4e2a\u56fe\u91cc\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 S2, S3 \u662f\u7b49\u6548\u72b6\u6001\u3002 \u5408\u5e76 S2, S3 \u540e\uff1a \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53d1\u73b0 S1 \u548c S2 \u53c8\u662f\u7b49\u6548\u72b6\u6001\uff0c\u518d\u6b21\u5408\u5e76\uff0c\u6700\u540e\u5f97\u5230\uff1a \u4e3a\u4ec0\u4e48\u8981\u5408\u5e76\u7b49\u6548\u72b6\u6001 \u51cf\u5c11\u8868\u793a\u72b6\u6001\u6240\u9700\u8981\u7684\u4e8c\u8fdb\u5236\u4f4d Moore and Mealy Example Diagrams Flip-Flop Timing Parameters \u00b6 \\(t_s\\) - setup time. \u5728\u4e0b\u964d\u4e4b\u524d\u8981\u5148\u51c6\u5907\u597d\u3002 \\(t_h\\) - hold time \\(t_w\\) - clock pulse width \\(t_{px}\\) - propagation delay. Measured from clock edge that triggers the output change to the output change. \u4e3b\u4ece\u89e6\u53d1\u5668\u548c\u8fb9\u7f18\u89e6\u53d1\u5668\u7684 \\(t_s\\) \u6839\u636e\u5b9a\u4e49, \\(t_s\\) \u6307\u5728\u91c7\u6837\u524d\u89e6\u53d1\u5668\u9700\u8981\u7684\u51c6\u5907\u65f6\u95f4\u3002\u5bf9\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\uff0c\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u7684\u65f6\u5019 S \u90e8\u5206\u7684\u8f93\u5165\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u5426\u5219\u53ef\u80fd\u6709\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u90fd\u662f\u89e6\u53d1\u5668\u7684\u51c6\u5907\u65f6\u95f4\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u6211\u4eec\u666e\u904d\u4f7f\u7528\u8fb9\u7f18\u89e6\u53d1\u5668\u7684\u539f\u56e0\u3002 \u5bf9\u4e8e D \u89e6\u53d1\u5668\u800c\u8a00\uff0c\u4e0d\u8981\u5361\u5728\u65f6\u949f\u8fb9\u6cbf\u6539\u53d8 D \u7684\u8f93\u5165\uff0c\u800c\u662f\u5728\u65f6\u949f\u6539\u53d8\u4e4b\u524d\u5c31\u8fdb\u884c\uff0c\u8fd9\u6837 D \u89e6\u53d1\u5668\u624d\u80fd\u6709\u8db3\u591f\u7684\u51c6\u5907\u65f6\u95f4\u3002 \\(t_p\\) - clock period \\(t_{pd,COMB}\\) - total delay of combinational logic along the path from flip-flop output to flip-flop input \\(t_{slack}\\) - extra time in the clock period in addition to the sum of the delays and setup time on a path. \u677e\u5f1b\u65f6\u95f4\uff08\u4f11\u606f\uff09\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e 0. Time equation : \\(t_p \\geq \\max (t_{pd,FF} + t_{pd,COMB} + t_s)\\) for all paths from flip-flop output to flip-flop input. Example Compare the allowable combinational delay for a specific circuit: Using edge-triggered flip-flops; Using master-slave flip-flops. Parameters: clock frequency = 250 Mhz; \\(t_{pd,FF}(max)=1.0ns\\) ; \\(t_s(max)=0.3ns\\) for edge-triggered flip-flops; \\(t_s = t_{wH} = 2.0 ns\\) for master-slave flip-flops Calculation: \\(t_p = \\dfrac{1}{clock\\ frequency} = 4.0 ns\\) Edge-triggered: \\(4.0 \\geq 1.0 + t_{pd,COMB} + 0.3, t_{pd,COMB} \\leq 2.7 ns\\) Master-slave: \\(4.0 \\geq 1.0 + t_{pd,COMB} + 2.0, t_{pd,COMB} \\leq 1.0 ns\\) Sequential Circuit Design \u00b6 The Design procedure Specification \u9700\u6c42\u548c\u529f\u80fd\u7684\u63cf\u8ff0\uff0c\u4e00\u822c\u4ee5\u6587\u5b57\u5f62\u5f0f Formulation - Obtain a state diagram or state table State Assignment - Assign binary codes to the states Flip-Flop Input Equation Determination - Select flip-flop types and derive flip-flop equations from next state entries in the table Output Equation Determination - Derive output equations from output entries in the table Optimization - Optimize the equations Technology Mapping - Find circuit from equations and map to flip-flops and gate technology Verification - Verify correctness of final design Formulation \u00b6 A state is an abstraction of the history of the past applied inputs to the circuit (including power-up reset or system reset). \u5c06\u6587\u672c\u5316\u7684\u9700\u6c42\u53d8\u4e3a\u7528\u72b6\u6001\u673a\u63cf\u8ff0\uff08\u6574\u4e2a\u7535\u8def\u7ecf\u8fc7\u54ea\u4e9b\u72b6\u6001\uff1f\u6bcf\u4e2a\u72b6\u6001\u4e4b\u95f4\u7531\u54ea\u4e2a\u8f93\u5165\u8fdb\u884c\u9a71\u52a8\uff1f\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\uff09 \u8fd9\u91cc\u6211\u4eec\u4ee5 Sequence Recognizers \u4e3a\u4f8b\uff0c\u4ecb\u7ecd Formulation \u7684\u8fc7\u7a0b\u3002 Sequence Recognizers A sequence recognizer is a sequential circuit that produces a distinct output value whenever a prescribed pattern of input symbols occur in sequence, i.e, recognizes an input sequence occurence. To develop a sequence recognizer state diagram: Begin in an initial state in which NONE of the initial portion of the sequence has occurred (typically \u201creset\u201d state). Add a state that recognizes that the first symbol has occurred. Add states that recognize each successive symbol occurring. The final state represents the input sequence (possibly less the final input value) occurence. Add state transition arcs which specify what happens when a symbol not in the proper sequence has occurred. Add other arcs on non-sequence inputs which transition to states that represent the input subsequence that has occurred. Example \u8fd9\u91cc\u6211\u4eec\u4ee5\u8bc6\u522b 1101 \u4e3a\u4f8b.(Mealy \u6a21\u578b) after 110 and a 1, we have: \u6ce8\u610f\u5728 D \u72b6\u6001\u4e4b\u540e\uff0c\u5e94\u8be5\u4e0e B \u72b6\u6001\u76f8\u8fde(\u56e0\u4e3a 1101101)\u4e2d\u7684\u7b2c\u4e09\u4e2a 1 \u65e2\u53ef\u4ee5\u662f\u524d\u4e00\u4e2a\u5e8f\u5217\u7684\u672b\u5c3e 1, \u4e5f\u53ef\u4ee5\u662f\u4e0b\u4e00\u4e2a\u5e8f\u5217\u7684\u8d77\u59cb 1. \u6211\u4eec\u8865\u8db3\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb: \u901a\u8fc7\u72b6\u6001\u56fe\u5f97\u5230\u72b6\u6001\u8868: \u5982\u679c\u5c06\u521a\u521a\u7684\u72b6\u6001\u56fe \u8f6c\u4e3aMoore \u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u518d\u52a0\u4e00\u4e2a\u72b6\u6001 E, \u5f53\u5230\u8fbe E \u72b6\u6001\u65f6\u8868\u660e\u6211\u4eec\u5f97\u5230\u4e86\u5e8f\u5217 1101. \u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0, B \u548c E \u5bf9\u540c\u6837\u7684\u8f93\u5165\uff0c\u6b21\u6001\u90fd\u662f\u4e00\u6837\u7684\u3002\u4f46\u662f\u5e76\u4e0d\u662f\u7b49\u6548\u72b6\u6001\uff0c\u56e0\u4e3a\u4e8c\u8005\u7684\u8f93\u51fa\u4e0d\u540c\u3002 The Moore model for a sequence recognizer usually has more states than the Mealy model. Simplification for State Tables \u00b6 \u6240\u8c13\u72b6\u6001\u7b80\u5316\uff0c\u5c31\u662f\u8981\u83b7\u5f97\u4e00\u4e2a\u6700\u5c0f\u5316\u7684\u72b6\u6001\u8868\u3002\u8fd9\u4e2a\u8868\u4e0d\u4ec5\u80fd\u6b63\u786e\u5730\u53cd\u6620\u8bbe\u8ba1\u7684\u5168\u90e8\u8981\u6c42\uff0c\u800c\u4e14\u72b6\u6001\u7684\u6570\u76ee\u6700\u5c11\u3002 \u201c\u72b6\u6001\u7b49\u6548\u201d \u7684\u4e09\u79cd\u60c5\u51b5\uff1a\uff08\u5728\u6240\u6709\u8f93\u5165\u60c5\u51b5\u4e0b\uff09 \u9996\u5148\uff0c\u8f93\u51fa\u76f8\u540c \u540c\u65f6\uff0c\u6b21\u6001\u76f8\u540c/\u6b21\u6001\u4ea4\u9519/\u6b21\u6001\u5faa\u73af \u7b49\u6548 \u6b21\u6001\u76f8\u540c \u6b21\u6001\u76f8\u540c\u6216\u4ea4\u9519 \u6b21\u6001\u4ea4\u9519\u6216\u7b49\u6548 \u6b21\u6001\u4ea4\u9519\u6216\u76f8\u540c\u6216\u5faa\u73af \u72b6\u6001\u7b80\u5316\u65b9\u6cd5\uff1a \u89c2\u5bdf\u6cd5 Example \\(A\\) \u548c \\(B\\) \uff0c \\(C\\) \u548c \\(D\\) \u7684\u8f93\u51fa\u5b8c\u5168\u76f8\u7b49\uff1b \\(C\\) \u548c \\(D\\) \u5728\u8f93\u5165\u7684\u5404\u79cd\u53d6\u503c\u7ec4\u5408\u4e0b\uff0c\u6b21\u6001\u76f8\u540c\uff0c\u56e0\u6b64 \\(C\\) \u548c \\(D\\) \u7b49\u6548\uff1b \\(A\\) \u548c \\(B\\) \u5728 \\(X=1\\) \u65f6\u7684\u6b21\u6001\u4e0d\u6ee1\u8db3\u56db\u6761\u4ef6\u4e4b\u4e00\uff0c\u56e0\u6b64 \\(A\\) \u548c \\(B\\) \u4e0d\u7b49\u6548; \u6700\u5927\u7b49\u6548\u7c7b\u4e3a \\(\\{A\\}\uff0c\\{B\\}\uff0c\\{C,D\\}\\) ,\u5206\u522b\u7528 \\(A', B', C'\\) \u8868\u793a\uff1b \u9690\u542b\u8868\u6cd5\u5316\u7b80 \u4f5c\u9690\u542b\u8868 \u987a\u5e8f\u6bd4\u8f83\uff0c\u5bfb\u7b49\u6548\u72b6\u6001\u5bf9 \u72b6\u6001\u5bf9\u7b49\u6548\uff0c\u6253\u201c\u221a\u201d\uff1b \u72b6\u6001\u5bf9\u4e0d\u7b49\u6548\uff0c\u6253\u201c\u00d7\u201d\uff1b \u72b6\u6001\u5bf9\u662f\u5426\u7b49\u6548\u9700\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5219\u6807\u8bb0\u6b21\u6001\u5bf9\u3002 \u8fdb\u884c\u5173\u8fde\u6bd4\u8f83\uff0c\u786e\u5b9a\u7b49\u6548\u72b6\u6001\u5bf9 \u786e\u5b9a\u6700\u5927\u7b49\u6548\u7c7b\uff0c\u4f5c\u6700\u5c0f\u5316\u72b6\u6001\u8868 Example \u7531\u4e8e \\(CD\\) \u3001 \\(DE\\) \u4e0d\u7b49\u6548\uff0c\u6240\u4ee5 \\(DG\\) \u4e0d\u7b49\u6548\uff0c\u753b\u659c\u7ebf\u6807\u5fd7\u3002\u6700\u540e\u6211\u4eec\u6709 \\(AB\\rightarrow CF\\) \\(AE\u2192BE\u2192CF\\) . \u5904\u4e8e\u5faa\u73af\u94fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u72b6\u6001\u5bf9\u90fd\u662f\u7b49\u6548\u72b6\u6001\u5bf9\u3002 \u6700\u540e\u6211\u4eec\u6709 \u56db\u4e2a\u7b49\u6548\u5bf9 \\((A,B), (A,E), (B,E), (C,F)\\) \u6700\u5927\u7b49\u6548\u7c7b \\((A,B,E)\\) \u56db\u4e2a\u72b6\u6001 \\((A,B,E), (C,F), (D), (G)\\) \u4ee4\u4ee5\u4e0a\u56db\u4e2a\u72b6\u6001\u4f9d\u6b21\u4e3a \\(a, b, c, d\\) State Assignment \u00b6 Each of the \\(m\\) states must be assigned a unique code Minimum number of bits required is \\(n\\) such that \\(n\\geq \\lceil \\log_2 m\\rceil\\) There are \\(2^n - m\\) unused states. (\u4e0d\u80fd\u7701\u7565\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f02\u5e38\u9677\u5165 unused states) Different State Assignment Counting Order Assignment: \\(A = 0 0, B = 0 1, C = 1 0, D = 1 1\\) Gray Code Assignment: \\(A = 0 0, B = 0 1, C = 1 1, D = 1 0\\) \u72b6\u6001\u5206\u914d\u7684\u65b9\u6848\u4e0d\u4e00\u6837\uff0c\u6240\u5f97\u5230\u7684\u8f93\u51fa\u51fd\u6570\u548c\u6fc0\u52b1\u51fd\u6570\u7684\u8868\u8fbe\u5f0f\u4e5f\u4e0d\u540c\uff0c\u7531\u6b64\u800c\u8bbe\u8ba1\u51fa\u6765\u7684\u7535\u8def\u590d\u6742\u5ea6\u4e5f\u4e0d\u540c\u3002\u72b6\u6001\u5206\u914d\u7684\u4efb\u52a1\u662f\uff1a \u51b3\u5b9a\u7f16\u7801\u7684\u957f\u5ea6 \u5bfb\u627e\u4e00\u79cd\u6700\u4f73\uff08\u5f88\u96be\u627e\u5230\uff09\u7684\u6216\u63a5\u8fd1\u6700\u4f73\u7684\u72b6\u6001\u5206\u914d\u65b9\u6848 \u5206\u914d\u7684\u57fa\u672c\u539f\u5219: \u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f91 0 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6761\u539f\u5219\u8f83\u4e3a\u91cd\u8981\uff0c\u9700\u4f18\u5148\u8003\u8651\uff0c\u5176\u6b21\u8981\u8003\u8651\u7531\u524d\u4e09\u6761\u539f\u5219\u5f97\u5230\u7684\u5e94\u5206\u914d\u76f8\u90bb\u4ee3\u7801\u7684\u72b6\u6001\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b21\u6570\u591a\u7684\u72b6\u6001\u5bf9\u5e94\u4f18\u5148\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002 Example \u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1aA\u548cB\uff0cA\u548cC\u5e94\u76f8\u90bb \u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1aC\u548cD\uff0cC\u548cA\uff0cB\u548cD\uff0cA\u548cB\u5e94\u76f8\u90bb\uff1b \u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1a A\uff0cB\uff0cC \u4e09\u8005\u5e94\u76f8\u90bb\uff0c\u5373A\u548cB\uff0cA\u548cC\uff0cB\u548cC\u5e94\u76f8\u90bb\uff1b \u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f910\uff1aA\u5206\u914d\u4e3a\u903b\u8f910 \u6700\u540e\u5f97\u5230: Technology Mapping \u00b6 Library: D flip-flops with Reset(not inverted), NAND gates with up to 4 inputs and inverters. \u65b9\u6cd5\u540c\u4e4b\u524d\uff0c\u5148\u5c06\u4e0e\u95e8\u6216\u95e8\u7b49\u95e8\u8f6c\u5316\u4e3a NAND, \u968f\u540e\u5c06 inverter \u63a8\u51fa\u6563\u51fa\u70b9\u3002 Other Flip-Flop Types \u00b6 J-K Flip-flop \u00b6 Behavior \u7c7b\u4f3c SR \u89e6\u53d1\u5668, \\(J\\) \u76f8\u5f53\u4e8e \\(S\\) , \\(K\\) \u76f8\u5f53\u4e8e \\(R\\) . \u4f46 \\(J=K=1\\) \u65f6\uff0c\u89e6\u53d1\u5668\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u6c42\u53cd\u7684\u529f\u80fd \u4e5f\u6709\u4e00\u6b21\u6027\u91c7\u6837\u7684\u95ee\u9898 Implementation Symbol \uff08\u4e09\u89d2\u8868\u660e\u662f\u4e0a\u5347\u6cbf\u89e6\u53d1\uff0c\u82e5\u4e3a\u5706\u5708\u5219\u662f\u4e0b\u964d\u6cbf\u89e6\u53d1\uff09 T Flip-flop \u00b6 Behavior \u7c7b\u4f3c JK \u89e6\u53d1\u5668, \u76f8\u5f53\u4e8e \\(J=K=T\\) . \u5f53 \\(T = 0\\) , \u72b6\u6001\u4e0d\u53d8; \u5f53 \\(T = 1\\) , \u72b6\u6001\u6c42\u53cd \u5b58\u5728\u4e00\u6b21\u6027\u91c7\u6837\u7684\u95ee\u9898 \u65e0\u6cd5\u9884\u7f6e\u72b6\u6001\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a Reset \u4fe1\u53f7 Implementation Symbol Basic Flip-Flop Descriptors \u00b6 Used in analysis \u5df2\u77e5\u89e6\u53d1\u5668\u7684\u8f93\u5165\u548c\u73b0\u6001\uff0c\u9884\u6d4b\u89e6\u53d1\u5668\u7684\u8f93\u51fa\u548c\u6b21\u6001 Characteristic table - defines the next state of the flip-flop in terms of flip-flop inputs and current state Characteristic equation - defines the next state of the flip-flop as a Boolean function of the flip-flop inputs and the current state Used in design \u5df2\u77e5\u73b0\u6001\u548c\u6b21\u6001\uff0c\u9884\u6d4b\u6211\u4eec\u8981\u63d0\u4f9b\u600e\u6837\u7684\u8f93\u5165 Excitation table(\u6fc0\u52b1\u8868) - defines the flip-flop input variable values as function of the current state and next state D Flip-Flop Descriptors T Flip-Flop Descriptors S-R Flip-Flop Descriptors (\u6ce8\u610f\u8fd9\u91cc\u6709\u4e2a\u6761\u4ef6 S R \u4e0d\u80fd\u540c\u65f6\u4e3a 1.) J-K Flip-Flop Descriptors","title":"\u65f6\u5e8f\u903b\u8f91\u7535\u8def"},{"location":"Logic/logic04/#sequential-circuits","text":"Abstract \u65f6\u5e8f\u7535\u8def\u6982\u5ff5\u548c\u7ec4\u6210 Introduction to Sequential Circuits \u8f93\u51fa\u65b9\u7a0b\u3001\u6fc0\u52b1\u51fd\u6570\u3001\u6b21\u6001\u65b9\u7a0b\u3001\u8f93\u51fa\u65b9\u7a0b\u7c7b\u578b Output function, Excitationfunction, Next state function, type of output functions \u65f6\u5e8f\u7535\u8def\u7c7b\u578b Types of sequential circuits \u7535\u8def\u5ef6\u8fdf\u6a21\u578b Circuit delay model \u9501\u5b58\u5668\u4e0e\u89e6\u53d1\u5668 Latch and Flip-Flop S-R\u9501\u5b58\u5668\u7684\u539f\u7406\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b\uff0c\u5185\u90e8\u7535\u8def\u5206\u6790\uff0c\u4e0d\u786e\u5b9a\u72b6\u6001\u7684\u539f\u56e0\u53ca\u51fa\u73b0\u6761\u4ef6 Analysis of Basic S-R Latch, Characteristic Table, Characteristic Equation, reason of unstable state D\u9501\u5b58\u5668\u3001D\u89e6\u53d1\u5668\u7684\u539f\u7406\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b\uff0c\u5185\u90e8\u7535\u8def\u5206\u6790 Theory of D Latch and D Flip-Flop, Characteristic Table, Characteristic Equation JK\u89e6\u53d1\u5668\u3001T\u89e6\u53d1\u5668\u7684\u884c\u4e3a\u3001\u7279\u5f81\u8868\u3001\u7279\u5f81\u65b9\u7a0b Behavior of JK Flip-Flop, TFlip-Flop, Characteristic Table, Characteristic Equation \u8109\u51b2\u89e6\u53d1\u548c\u8fb9\u6cbf\u89e6\u53d1\u7684\u6982\u5ff5\uff0c\u8109\u51b2\u89e6\u53d1\u7684\u4e00\u6b21\u6027\u91c7\u6837\u884c\u4e3a\u539f\u56e0 Concept of Master-slave and edge-triggered flip-flop, 1s catching of Mast-slave flip-flop \u9501\u5b58\u5668\u548c\u89e6\u53d1\u5668\u7684\u65f6\u5e8f\uff0c\u5efa\u7acb\u65f6\u95f4\u3001\u4fdd\u6301\u65f6\u95f4\u3001\u4f20\u8f93\u5ef6\u8fdf\u7b49\u5404\u79cd\u65f6\u5e8f\u6210\u5206 Flip-Flop Timing Parameters, setup time, hold time, propagation delay \u5404\u79cd\u89e6\u53d1\u5668\u7684\u56fe\u5f62\u7b26\u53f7 Symbols of Flip-Flops \u72b6\u6001\u8868\u3001\u72b6\u6001\u56fe State Table, State Diagram \u540c\u6b65\u65f6\u5e8f\u7535\u8def\u5206\u6790 Sequential Circuit Analysis \u6839\u636e\u7ed9\u5b9a\u7535\u8def\uff0c\u5199\u51fa\u8f93\u51fa\u65b9\u7a0b\u548c\u6fc0\u52b1\u51fd\u6570/\u6b21\u6001\u65b9\u7a0b Derive output functions and excitationfunction/Next state function \u5217\u51fa\u72b6\u6001\u771f\u503c\u8868 ObtainState truth table \u5217\u51fa\u65f6\u5e8f\u7535\u8def\u7684\u6b21\u6001 List next state of sequential circuit \u4f5c\u72b6\u6001\u8868\u548c\u72b6\u6001\u56fe ObtainState Table and State Diagram \u5206\u6790\u65f6\u5e8f\u7535\u8def\u7684\u5916\u90e8\u6027\u80fd Analysis the behavior of sequential circuit \u5bf9\u7535\u8def\u8fdb\u884c\u8bc4\u8ff0\uff0c\u901a\u5e38\u9700\u68c0\u67e5\u81ea\u6062\u590d\u529f\u80fd\u53ca\u753b\u51fa\u65f6\u5e8f\u6ce2\u5f62\u56fe Evaluate the circuit, validate the self-recovery ability \u7535\u8def\u548c\u7cfb\u7edf\u7ea7\u65f6\u5e8f\u5206\u6790\uff0c\u65f6\u5e8f\u7535\u8def\u5404\u8def\u5f84\u7684\u65f6\u5e8f\u6210\u5206\u5206\u6790\u8ba1\u7b97 Circuit and System Level Timing, analyze and compute time component along any path of the sequential circuit 9\uff0e\u7c73\u5229\u578b\u548c\u7a46\u5c14\u578b\u7535\u8def\u5206\u6790 analyze Mealy and Moore type circuit 10\uff0e\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1 Sequential Circuit Design \u5199\u51fa\u89c4\u683c\u8bf4\u660e\u4e66 Specification \u7cfb\u7edf\u63cf\u8ff0\u2013\u4ece\u95ee\u9898\u9648\u8ff0\u4e2d\u5f97\u51fa\u72b6\u6001\u56fe\u548c\u72b6\u6001\u8868 Formulation -Obtain a state diagram or state table \u72b6\u6001\u8d4b\u503c\u2013\u4e3a\u72b6\u6001\u8868\u4e2d\u7684\u6bcf\u4e2a\u72b6\u6001\u8d4b\u4e8c\u8fdb\u5236\u4ee3\u7801 State Assignment -Assign binary codes to the states \u5f97\u5230\u89e6\u53d1\u5668\u7684\u8f93\u5165\u65b9\u7a0b-\u9009\u62e9\u89e6\u53d1\u5668\u7684\u7c7b\u578b\uff0c\u4ece\u72b6\u6001\u8868\u7684\u6b21\u6001\u680f\u5f97\u5230\u89e6\u53d1\u5668\u7684\u8f93\u5165\u65b9\u7a0b Flip-Flop Input Equation Determination-Select flip-flop types and derive flip-flop equations from next state entries in the table \u786e\u5b9a\u8f93\u51fa\u65b9\u7a0b-\u4ece\u72b6\u6001\u8868\u7684\u8f93\u51fa\u680f\u5f97\u5230\u8f93\u51fa\u65b9\u7a0b Output Equation Determination-Derive output equations from output entries in the table \u4f18\u5316\u2013\u4f18\u5316\u89e6\u53d1\u5668\u7684\u8f93\u5165\u65b9\u7a0b\u548c\u8f93\u51fa\u65b9\u7a0b Optimization-Optimize the equations \u5de5\u827a\u6620\u5c04\u2013\u6839\u636e\u65b9\u7a0b\u753b\u51fa\u7535\u8def\u56fe\uff0c\u5e76\u6620\u5c04\u5230\u89e6\u53d1\u5668\u548c\u95e8\u5de5\u827a Technology Mapping-Find circuit from equations and map to flip-flops and gate technology \u9a8c\u8bc1\u2013\u9a8c\u8bc1\u6700\u7ec8\u8bbe\u8ba1\u7684\u6b63\u786e\u6027 Verification-Verify correctness of final design","title":"Sequential Circuits"},{"location":"Logic/logic04/#storage-elements-and-analysis","text":"\u65f6\u5e8f\u7535\u8def\u5305\u62ec\uff1a\u7ec4\u5408\u903b\u8f91\u7535\u8def+\u5b58\u50a8\u5143\u4ef6 Combinatorial Logic Next state function Next State = f(Inputs, State) \u6b21\u6001\u65b9\u7a0b Output function (Mealy) Outputs = g(Inputs, State) Output function (Moore) Outputs = h(State) \u8f93\u5165\u4e0d\u4f1a\u76f4\u63a5\u6539\u53d8\u8f93\u51fa\uff0c\u800c\u662f\u901a\u8fc7\u72b6\u6001\u6765\u95f4\u63a5\u6539\u53d8\u8f93\u51fa Types of Sequential Circuits Depends on the times at which: storage elements observe their inputs, and storage elements change their state Synchronous \u72b6\u6001\u66f4\u65b0\u4e00\u5b9a\u53d1\u751f\u5728\u65f6\u949f\u5468\u671f\u7684\u6574\u5468\u671f\u4e0a Asynchronous \u72b6\u6001\u66f4\u65b0\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u95f4\u53d1\u751f \u5982\u679c\u65f6\u949f\u4e5f\u88ab\u770b\u505a\u4e00\u4e2a\u8f93\u5165\uff0c\u90a3\u4e48\u6240\u6709\u7535\u8def\u90fd\u662f Asynchronous Asynchronous \u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u6709\u9700\u8981\u7684\u65f6\u5019\u66f4\u65b0\u7535\u8def\uff0c\u964d\u4f4e\u7535\u8def\u7684\u529f\u8017 Discrete Event Simulation \u79bb\u6563\u4e8b\u4ef6\u4eff\u771f","title":"Storage Elements and Analysis"},{"location":"Logic/logic04/#latch","text":"Example The simple combinational circuit has now become a sequential circuit because its output is a function of a time sequence of input signals!","title":"Latch"},{"location":"Logic/logic04/#basic-nand-overline-s-overline-r-latch","text":"\\(R\\) \\(S\\) \\(Q\\) \\(\\overline Q\\) Comment 1 1 ? ? Stored state unknown 1 0 1 0 Set Q to 1 1 1 1 0 Now Q remembers 1 0 1 0 1 Reset Q to 0 1 1 0 1 Now Q remembers 0 0 0 1 1 Both go high 1 1 ? ? Unstable! \u6700\u540e\u4e00\u6b65\uff0c\u4e24\u4e2a\u5f15\u811a\u540c\u65f6\u4ece 0 -> 1, \u90a3\u4e48\u4e24\u4e2a\u4e0e\u975e\u95e8\u7684\u8f93\u51fa\u90fd\u671f\u671b\u53d8\u6210 0, \u4f46\u53ea\u8981\u6709\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u53d8\u4e3a 0 \u53e6\u4e00\u4e2a\u95e8\u5c31\u88ab\u9501\u4f4f\u53d8\u6210 1, \u56e0\u6b64\u4e24\u4e2a\u95e8\u4e0d\u53ef\u80fd\u540c\u65f6\u53d8\u5316\u3002\u4f46\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u662f\u54ea\u4e2a\u95e8\u4f1a\u53d8\u6210 1. \\(S=0,R=0\\) is forbidden as input pattern.","title":"Basic (NAND)  \\(\\overline S\\) \u2013  \\(\\overline R\\) Latch"},{"location":"Logic/logic04/#basic-nor-s-r-latch","text":"\\(R\\) \\(S\\) \\(Q\\) \\(\\overline Q\\) Comment 0 0 ? ? Stored state unknown 0 1 1 0 Set Q to 1 0 0 1 0 Now Q remembers 1 1 0 0 1 Reset Q to 0 0 0 0 1 Now Q remembers 0 1 1 1 1 Both go high 0 0 ? ? Unstable!","title":"Basic (NOR)  \\(S\\) \u2013 \\(R\\) Latch"},{"location":"Logic/logic04/#clocked-s-r-latch","text":"\\(C\\) \u4f5c\u4e3a\u4e00\u4e2a ENABLE \u7684\u529f\u80fd\u3002\u5f53 \\(C=0\\) \u65f6\uff0c \\(Q\\) \u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u5f53 \\(C=1\\) \u65f6\uff0c\u4e0a\u9762\u76f8\u5f53\u4e8e \\(\\overline S\\) , \u4e0b\u9762\u76f8\u5f53\u4e8e \\(\\overline R\\) , \u53d8\u6210\u4e00\u4e2a\u949f\u63a7\u7684 SR \u9501\u5b58\u5668\u3002 \\(C\\) \\(S\\) \\(R\\) \\(Q(t+1)\\) 0 X X No change 1 0 0 No change 1 0 1 0: Clear Q 1 1 0 1: Set Q 1 1 1 Indeterminate \\(Q(t+1)\\) based on current state \\(Q(t)\\) and current inputs \\((S,R,C)\\)","title":"Clocked \\(S\\) - \\(R\\) Latch"},{"location":"Logic/logic04/#d-latch","text":"\\(S\\ R\\) \u4e0d\u4f1a\u540c\u65f6\u4e3a 0. \\(C\\) \\(D\\) \\(Q(t+1)\\) 0 X No change 1 0 0: Clear Q 0 1 1: Set Q \u5373\u5f53 \\(C=1\\) \u65f6 \\(Q=D\\) The graphic symbol for a \\(D\\) latch: Info \u5728\u7b97\u95e8\u8f93\u5165\u6210\u672c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u5206\u5f00\u7b97 G \u548c GN. \u56e0\u4e3a\u9501\u5b58\u5668\u540c\u65f6\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 \\(Q\\) \u548c \\(\\overline Q\\) , \u9501\u5b58\u5668\u53ef\u4ee5\u4e3a\u540e\u9762\u7684\u7ec4\u5408\u7535\u8def\u63d0\u4f9b\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\u3002","title":"\\(D\\) Latch"},{"location":"Logic/logic04/#flip-flop","text":"\u9501\u5b58\u5668\u4e0d\u9002\u5408\u4f7f\u7528\u5728\u7535\u8def\u4e2d\uff1a\u4e0d\u80fd\u505a\u5230\u4e00\u4e2a\u5468\u671f\uff0c\u72b6\u6001\u53ea\u66f4\u65b0\u4e00\u6b21\u3002\u5177\u4f53\u539f\u56e0\u89c1 ICS Notes","title":"Flip-flop"},{"location":"Logic/logic04/#s-r-master-slave-flip-flop","text":"\u524d\u9762\u79f0\u4e3a master(\u4e3b\u9501\u5b58\u5668), \u540e\u9762\u79f0\u4e3a slave(\u4ece\u9501\u5b58\u5668) \u5f53 \\(C=0\\) \u65f6\uff0c\u4e3b\u9501\u5b58\u5668\u4e0d\u53d8\u3002 \\(C\\) \u4ece 0 \u53d8\u4e3a 1 \u65f6\uff0c\u4e3b\u9501\u5b58\u5668\u88ab\u4f7f\u80fd\uff0cQ \u6539\u53d8\uff0c\u4f46\u4ece\u9501\u5b58\u5668\u4e0d\u53d8\u3002 \u5468\u671f\u53d8\u957f\u4e00\u500d \u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898(1s catching)\uff1a\u5f53 S R \u5747\u4e3a 0 \u65f6\u5982\u679c\u6709\u5c0f\u6270\u52a8\uff0c\u65e0\u6cd5\u590d\u539f \u8981\u6c42\u4e3b\u4ece\u89e6\u53d1\u5668\u907f\u514d S R \u7684\u6270\u52a8","title":"S-R Master-Slave Flip-Flop"},{"location":"Logic/logic04/#edge-triggered-d-flip-flop","text":"An edge-triggered flip-flop ignores the pulse while it is at a constant level and triggers only during a transition of the clock signal. A master-slave D flip-flop which also exhibits edge-triggered behavior can be used. The delay of the S-R master-slave flip-flop can be avoided since the 1s-catching behavior is not present with D replacing S and R inputs. (D \u9501\u5b58\u5668\u4e0d\u4f1a\u51fa\u73b0 S R \u540c\u65f6\u4e3a 0 \u7684\u60c5\u51b5) Positive-Edge Triggered D Flip-Flop is Formed by adding inverter to clock input. (\u4e0a\u5347\u6cbf\u89e6\u53d1\u5668) Q changes to the value on D applied at the positive clock edge within timing constraints to be specified Actual Circuit of Edge-Triggered D Flip-Flop: (\u548c D-Latch Flip-flop \u6709\u6240\u4e0d\u540c) Standard Symbols for Storage Elements: Direct Inputs Direct \\(R\\) and/or \\(S\\) inputs that control the state of the latches within the flip-flops are used for this initialization .","title":"Edge-Triggered D Flip-Flop"},{"location":"Logic/logic04/#analysis","text":"General Model \u540c\u6b65\u65f6\u5e8f\u7535\u8def\u91cc D \u89e6\u53d1\u5668\u7684\u65f6\u949f\u8f93\u5165\u7aef\uff0c\u7edf\u4e00\u63a5\u5728\u4e00\u4e2a\u7cfb\u7edf\u65f6\u949f\u8f93\u5165 CLK \u4fe1\u53f7\u4e0a\u3002\uff08\u89c4\u5b9a\u6240\u6709\u89e6\u53d1\u5668\u4f55\u65f6\u8fdb\u884c\u72b6\u6001\u6539\u53d8\uff0c\u662f\u989d\u5916\u63d0\u4f9b\u7684\u5f15\u811a\uff0c \u4e0d\u5c5e\u4e8e\u6574\u4e2a\u7cfb\u7edf\u7684\u4fe1\u53f7\u8f93\u5165 \uff09 Current State at time (t) is stored in an array of flip-flops. Next State at time (t+1) is a Boolean function of State and Inputs. Outputs at time (t) are a Boolean function of State (t) and (sometimes) Inputs (t). Example \u53ef\u4ee5\u770b\u5230\uff0ccp \u662f\u65f6\u949f\u8f93\u5165\u4fe1\u53f7 input: \\(x(t)\\) output: \\(y(t)\\) state: \\((A(t),B(t))\\) Boolean equations for the functions \\(D_A(t) = A(t)x(t)+ B(t)x(t), A(t+1)=A(t)x(t)+ B(t)x(t)\\) , \\(D_B(t) = A(t)x(t),B(t+1) = A(t)x(t), y(t) = x(t)(B(t) + A(t))\\)","title":"Analysis"},{"location":"Logic/logic04/#state-table","text":"Present State \u2013 the values of the state variables for each allowed state. Input \u2013 the input combinations allowed. Next-state \u2013 the value of the state at time \\((t+1)\\) based on the present state and the input. Output \u2013 the value of the output as a function of the present state and (sometimes) the input. Example \u4ee3\u5165\u521a\u521a\u5199\u51fa\u7684\u5f0f\u5b50\u5373\u53ef \u4e5f\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u79cd\u753b\u6cd5\uff1a(\u4e8c\u7ef4\u72b6\u6001\u8868\uff0c\u6309\u7167\u683c\u96f7\u7801\u7684\u987a\u5e8f\u6392\u5217) Note \u5728\u753b\u72b6\u6001\u8868\u65f6\uff0c\u65e0\u6cd5\u8fbe\u5230\u7684\u72b6\u6001\u4e5f\u8981\u753b\u51fa\u6765\u3002\u56e0\u4e3a\u53ef\u80fd\u7a0b\u5e8f\u53d7\u5230\u67d0\u79cd\u6270\u52a8\u6216\u8005\u5f02\u5e38\uff0c\u53ef\u80fd\u4f1a\u8df3\u5230\u539f\u5148\u65e0\u6cd5\u5230\u8fbe\u7684\u72b6\u6001\u3002","title":"State table"},{"location":"Logic/logic04/#state-diagrams","text":"The sequential circuit function can be represented in graphical form as a state diagram with the following components: A circle with the state name in it for each state A directed arc from the Present State to the Next State for each state transition A label on each directed arc with the Input values which causes the state transition, and A label: \u8f93\u51fa\u548c\u8f93\u5165\u662f\u5426\u6709\u5173\uff0c\u65e0\u5173\u6807\u5728\u5708\u91cc\u9762\uff0c\u6709\u5173\u6807\u5728\u5916\u9762 On each circle with the output value produced, or On each directed arc with the output value produced. Moore type output depends only on state(\u8f93\u51fa\u753b\u5728\u5708\u91cc\u9762) Mealy type output depends on state and input(\u8f93\u51fa\u753b\u5728\u6709\u5411\u5f27\u4e0a) Example \uff08\u659c\u6760\u5de6\u8fb9\u8868\u793a\u5916\u90e8\u8f93\u5165\uff0c\u53f3\u8fb9\u8868\u793a\u8f93\u51fa\uff09 Sequential Circuits or Sequential Machines are also called Finite State Machines (FSMs) . Equivalent State Definitions \u4e24\u4e2a\u72b6\u6001\uff0c\u65e0\u8bba\u8f93\u5165\u662f\u4ec0\u4e48\uff0c\u90fd\u4f1a\u4f7f\u8fd9\u4e24\u4e2a\u72b6\u6001\u8f93\u51fa\u76f8\u540c\uff0c\u6b21\u6001\u4e5f\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u72b6\u6001\u662f\u7b49\u6548\u72b6\u6001\u3002 Example \u5728\u8fd9\u4e2a\u56fe\u91cc\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 S2, S3 \u662f\u7b49\u6548\u72b6\u6001\u3002 \u5408\u5e76 S2, S3 \u540e\uff1a \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53d1\u73b0 S1 \u548c S2 \u53c8\u662f\u7b49\u6548\u72b6\u6001\uff0c\u518d\u6b21\u5408\u5e76\uff0c\u6700\u540e\u5f97\u5230\uff1a \u4e3a\u4ec0\u4e48\u8981\u5408\u5e76\u7b49\u6548\u72b6\u6001 \u51cf\u5c11\u8868\u793a\u72b6\u6001\u6240\u9700\u8981\u7684\u4e8c\u8fdb\u5236\u4f4d Moore and Mealy Example Diagrams","title":"State Diagrams"},{"location":"Logic/logic04/#flip-flop-timing-parameters","text":"\\(t_s\\) - setup time. \u5728\u4e0b\u964d\u4e4b\u524d\u8981\u5148\u51c6\u5907\u597d\u3002 \\(t_h\\) - hold time \\(t_w\\) - clock pulse width \\(t_{px}\\) - propagation delay. Measured from clock edge that triggers the output change to the output change. \u4e3b\u4ece\u89e6\u53d1\u5668\u548c\u8fb9\u7f18\u89e6\u53d1\u5668\u7684 \\(t_s\\) \u6839\u636e\u5b9a\u4e49, \\(t_s\\) \u6307\u5728\u91c7\u6837\u524d\u89e6\u53d1\u5668\u9700\u8981\u7684\u51c6\u5907\u65f6\u95f4\u3002\u5bf9\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\uff0c\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u7684\u65f6\u5019 S \u90e8\u5206\u7684\u8f93\u5165\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u5426\u5219\u53ef\u80fd\u6709\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u90fd\u662f\u89e6\u53d1\u5668\u7684\u51c6\u5907\u65f6\u95f4\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u6211\u4eec\u666e\u904d\u4f7f\u7528\u8fb9\u7f18\u89e6\u53d1\u5668\u7684\u539f\u56e0\u3002 \u5bf9\u4e8e D \u89e6\u53d1\u5668\u800c\u8a00\uff0c\u4e0d\u8981\u5361\u5728\u65f6\u949f\u8fb9\u6cbf\u6539\u53d8 D \u7684\u8f93\u5165\uff0c\u800c\u662f\u5728\u65f6\u949f\u6539\u53d8\u4e4b\u524d\u5c31\u8fdb\u884c\uff0c\u8fd9\u6837 D \u89e6\u53d1\u5668\u624d\u80fd\u6709\u8db3\u591f\u7684\u51c6\u5907\u65f6\u95f4\u3002 \\(t_p\\) - clock period \\(t_{pd,COMB}\\) - total delay of combinational logic along the path from flip-flop output to flip-flop input \\(t_{slack}\\) - extra time in the clock period in addition to the sum of the delays and setup time on a path. \u677e\u5f1b\u65f6\u95f4\uff08\u4f11\u606f\uff09\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e 0. Time equation : \\(t_p \\geq \\max (t_{pd,FF} + t_{pd,COMB} + t_s)\\) for all paths from flip-flop output to flip-flop input. Example Compare the allowable combinational delay for a specific circuit: Using edge-triggered flip-flops; Using master-slave flip-flops. Parameters: clock frequency = 250 Mhz; \\(t_{pd,FF}(max)=1.0ns\\) ; \\(t_s(max)=0.3ns\\) for edge-triggered flip-flops; \\(t_s = t_{wH} = 2.0 ns\\) for master-slave flip-flops Calculation: \\(t_p = \\dfrac{1}{clock\\ frequency} = 4.0 ns\\) Edge-triggered: \\(4.0 \\geq 1.0 + t_{pd,COMB} + 0.3, t_{pd,COMB} \\leq 2.7 ns\\) Master-slave: \\(4.0 \\geq 1.0 + t_{pd,COMB} + 2.0, t_{pd,COMB} \\leq 1.0 ns\\)","title":"Flip-Flop Timing Parameters"},{"location":"Logic/logic04/#sequential-circuit-design","text":"The Design procedure Specification \u9700\u6c42\u548c\u529f\u80fd\u7684\u63cf\u8ff0\uff0c\u4e00\u822c\u4ee5\u6587\u5b57\u5f62\u5f0f Formulation - Obtain a state diagram or state table State Assignment - Assign binary codes to the states Flip-Flop Input Equation Determination - Select flip-flop types and derive flip-flop equations from next state entries in the table Output Equation Determination - Derive output equations from output entries in the table Optimization - Optimize the equations Technology Mapping - Find circuit from equations and map to flip-flops and gate technology Verification - Verify correctness of final design","title":"Sequential Circuit Design"},{"location":"Logic/logic04/#formulation","text":"A state is an abstraction of the history of the past applied inputs to the circuit (including power-up reset or system reset). \u5c06\u6587\u672c\u5316\u7684\u9700\u6c42\u53d8\u4e3a\u7528\u72b6\u6001\u673a\u63cf\u8ff0\uff08\u6574\u4e2a\u7535\u8def\u7ecf\u8fc7\u54ea\u4e9b\u72b6\u6001\uff1f\u6bcf\u4e2a\u72b6\u6001\u4e4b\u95f4\u7531\u54ea\u4e2a\u8f93\u5165\u8fdb\u884c\u9a71\u52a8\uff1f\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\uff09 \u8fd9\u91cc\u6211\u4eec\u4ee5 Sequence Recognizers \u4e3a\u4f8b\uff0c\u4ecb\u7ecd Formulation \u7684\u8fc7\u7a0b\u3002 Sequence Recognizers A sequence recognizer is a sequential circuit that produces a distinct output value whenever a prescribed pattern of input symbols occur in sequence, i.e, recognizes an input sequence occurence. To develop a sequence recognizer state diagram: Begin in an initial state in which NONE of the initial portion of the sequence has occurred (typically \u201creset\u201d state). Add a state that recognizes that the first symbol has occurred. Add states that recognize each successive symbol occurring. The final state represents the input sequence (possibly less the final input value) occurence. Add state transition arcs which specify what happens when a symbol not in the proper sequence has occurred. Add other arcs on non-sequence inputs which transition to states that represent the input subsequence that has occurred. Example \u8fd9\u91cc\u6211\u4eec\u4ee5\u8bc6\u522b 1101 \u4e3a\u4f8b.(Mealy \u6a21\u578b) after 110 and a 1, we have: \u6ce8\u610f\u5728 D \u72b6\u6001\u4e4b\u540e\uff0c\u5e94\u8be5\u4e0e B \u72b6\u6001\u76f8\u8fde(\u56e0\u4e3a 1101101)\u4e2d\u7684\u7b2c\u4e09\u4e2a 1 \u65e2\u53ef\u4ee5\u662f\u524d\u4e00\u4e2a\u5e8f\u5217\u7684\u672b\u5c3e 1, \u4e5f\u53ef\u4ee5\u662f\u4e0b\u4e00\u4e2a\u5e8f\u5217\u7684\u8d77\u59cb 1. \u6211\u4eec\u8865\u8db3\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb: \u901a\u8fc7\u72b6\u6001\u56fe\u5f97\u5230\u72b6\u6001\u8868: \u5982\u679c\u5c06\u521a\u521a\u7684\u72b6\u6001\u56fe \u8f6c\u4e3aMoore \u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u518d\u52a0\u4e00\u4e2a\u72b6\u6001 E, \u5f53\u5230\u8fbe E \u72b6\u6001\u65f6\u8868\u660e\u6211\u4eec\u5f97\u5230\u4e86\u5e8f\u5217 1101. \u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0, B \u548c E \u5bf9\u540c\u6837\u7684\u8f93\u5165\uff0c\u6b21\u6001\u90fd\u662f\u4e00\u6837\u7684\u3002\u4f46\u662f\u5e76\u4e0d\u662f\u7b49\u6548\u72b6\u6001\uff0c\u56e0\u4e3a\u4e8c\u8005\u7684\u8f93\u51fa\u4e0d\u540c\u3002 The Moore model for a sequence recognizer usually has more states than the Mealy model.","title":"Formulation"},{"location":"Logic/logic04/#simplification-for-state-tables","text":"\u6240\u8c13\u72b6\u6001\u7b80\u5316\uff0c\u5c31\u662f\u8981\u83b7\u5f97\u4e00\u4e2a\u6700\u5c0f\u5316\u7684\u72b6\u6001\u8868\u3002\u8fd9\u4e2a\u8868\u4e0d\u4ec5\u80fd\u6b63\u786e\u5730\u53cd\u6620\u8bbe\u8ba1\u7684\u5168\u90e8\u8981\u6c42\uff0c\u800c\u4e14\u72b6\u6001\u7684\u6570\u76ee\u6700\u5c11\u3002 \u201c\u72b6\u6001\u7b49\u6548\u201d \u7684\u4e09\u79cd\u60c5\u51b5\uff1a\uff08\u5728\u6240\u6709\u8f93\u5165\u60c5\u51b5\u4e0b\uff09 \u9996\u5148\uff0c\u8f93\u51fa\u76f8\u540c \u540c\u65f6\uff0c\u6b21\u6001\u76f8\u540c/\u6b21\u6001\u4ea4\u9519/\u6b21\u6001\u5faa\u73af \u7b49\u6548 \u6b21\u6001\u76f8\u540c \u6b21\u6001\u76f8\u540c\u6216\u4ea4\u9519 \u6b21\u6001\u4ea4\u9519\u6216\u7b49\u6548 \u6b21\u6001\u4ea4\u9519\u6216\u76f8\u540c\u6216\u5faa\u73af \u72b6\u6001\u7b80\u5316\u65b9\u6cd5\uff1a \u89c2\u5bdf\u6cd5 Example \\(A\\) \u548c \\(B\\) \uff0c \\(C\\) \u548c \\(D\\) \u7684\u8f93\u51fa\u5b8c\u5168\u76f8\u7b49\uff1b \\(C\\) \u548c \\(D\\) \u5728\u8f93\u5165\u7684\u5404\u79cd\u53d6\u503c\u7ec4\u5408\u4e0b\uff0c\u6b21\u6001\u76f8\u540c\uff0c\u56e0\u6b64 \\(C\\) \u548c \\(D\\) \u7b49\u6548\uff1b \\(A\\) \u548c \\(B\\) \u5728 \\(X=1\\) \u65f6\u7684\u6b21\u6001\u4e0d\u6ee1\u8db3\u56db\u6761\u4ef6\u4e4b\u4e00\uff0c\u56e0\u6b64 \\(A\\) \u548c \\(B\\) \u4e0d\u7b49\u6548; \u6700\u5927\u7b49\u6548\u7c7b\u4e3a \\(\\{A\\}\uff0c\\{B\\}\uff0c\\{C,D\\}\\) ,\u5206\u522b\u7528 \\(A', B', C'\\) \u8868\u793a\uff1b \u9690\u542b\u8868\u6cd5\u5316\u7b80 \u4f5c\u9690\u542b\u8868 \u987a\u5e8f\u6bd4\u8f83\uff0c\u5bfb\u7b49\u6548\u72b6\u6001\u5bf9 \u72b6\u6001\u5bf9\u7b49\u6548\uff0c\u6253\u201c\u221a\u201d\uff1b \u72b6\u6001\u5bf9\u4e0d\u7b49\u6548\uff0c\u6253\u201c\u00d7\u201d\uff1b \u72b6\u6001\u5bf9\u662f\u5426\u7b49\u6548\u9700\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5219\u6807\u8bb0\u6b21\u6001\u5bf9\u3002 \u8fdb\u884c\u5173\u8fde\u6bd4\u8f83\uff0c\u786e\u5b9a\u7b49\u6548\u72b6\u6001\u5bf9 \u786e\u5b9a\u6700\u5927\u7b49\u6548\u7c7b\uff0c\u4f5c\u6700\u5c0f\u5316\u72b6\u6001\u8868 Example \u7531\u4e8e \\(CD\\) \u3001 \\(DE\\) \u4e0d\u7b49\u6548\uff0c\u6240\u4ee5 \\(DG\\) \u4e0d\u7b49\u6548\uff0c\u753b\u659c\u7ebf\u6807\u5fd7\u3002\u6700\u540e\u6211\u4eec\u6709 \\(AB\\rightarrow CF\\) \\(AE\u2192BE\u2192CF\\) . \u5904\u4e8e\u5faa\u73af\u94fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u72b6\u6001\u5bf9\u90fd\u662f\u7b49\u6548\u72b6\u6001\u5bf9\u3002 \u6700\u540e\u6211\u4eec\u6709 \u56db\u4e2a\u7b49\u6548\u5bf9 \\((A,B), (A,E), (B,E), (C,F)\\) \u6700\u5927\u7b49\u6548\u7c7b \\((A,B,E)\\) \u56db\u4e2a\u72b6\u6001 \\((A,B,E), (C,F), (D), (G)\\) \u4ee4\u4ee5\u4e0a\u56db\u4e2a\u72b6\u6001\u4f9d\u6b21\u4e3a \\(a, b, c, d\\)","title":"Simplification for State Tables"},{"location":"Logic/logic04/#state-assignment","text":"Each of the \\(m\\) states must be assigned a unique code Minimum number of bits required is \\(n\\) such that \\(n\\geq \\lceil \\log_2 m\\rceil\\) There are \\(2^n - m\\) unused states. (\u4e0d\u80fd\u7701\u7565\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f02\u5e38\u9677\u5165 unused states) Different State Assignment Counting Order Assignment: \\(A = 0 0, B = 0 1, C = 1 0, D = 1 1\\) Gray Code Assignment: \\(A = 0 0, B = 0 1, C = 1 1, D = 1 0\\) \u72b6\u6001\u5206\u914d\u7684\u65b9\u6848\u4e0d\u4e00\u6837\uff0c\u6240\u5f97\u5230\u7684\u8f93\u51fa\u51fd\u6570\u548c\u6fc0\u52b1\u51fd\u6570\u7684\u8868\u8fbe\u5f0f\u4e5f\u4e0d\u540c\uff0c\u7531\u6b64\u800c\u8bbe\u8ba1\u51fa\u6765\u7684\u7535\u8def\u590d\u6742\u5ea6\u4e5f\u4e0d\u540c\u3002\u72b6\u6001\u5206\u914d\u7684\u4efb\u52a1\u662f\uff1a \u51b3\u5b9a\u7f16\u7801\u7684\u957f\u5ea6 \u5bfb\u627e\u4e00\u79cd\u6700\u4f73\uff08\u5f88\u96be\u627e\u5230\uff09\u7684\u6216\u63a5\u8fd1\u6700\u4f73\u7684\u72b6\u6001\u5206\u914d\u65b9\u6848 \u5206\u914d\u7684\u57fa\u672c\u539f\u5219: \u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f91 0 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6761\u539f\u5219\u8f83\u4e3a\u91cd\u8981\uff0c\u9700\u4f18\u5148\u8003\u8651\uff0c\u5176\u6b21\u8981\u8003\u8651\u7531\u524d\u4e09\u6761\u539f\u5219\u5f97\u5230\u7684\u5e94\u5206\u914d\u76f8\u90bb\u4ee3\u7801\u7684\u72b6\u6001\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b21\u6570\u591a\u7684\u72b6\u6001\u5bf9\u5e94\u4f18\u5148\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002 Example \u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1aA\u548cB\uff0cA\u548cC\u5e94\u76f8\u90bb \u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1aC\u548cD\uff0cC\u548cA\uff0cB\u548cD\uff0cA\u548cB\u5e94\u76f8\u90bb\uff1b \u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1a A\uff0cB\uff0cC \u4e09\u8005\u5e94\u76f8\u90bb\uff0c\u5373A\u548cB\uff0cA\u548cC\uff0cB\u548cC\u5e94\u76f8\u90bb\uff1b \u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f910\uff1aA\u5206\u914d\u4e3a\u903b\u8f910 \u6700\u540e\u5f97\u5230:","title":"State Assignment"},{"location":"Logic/logic04/#technology-mapping","text":"Library: D flip-flops with Reset(not inverted), NAND gates with up to 4 inputs and inverters. \u65b9\u6cd5\u540c\u4e4b\u524d\uff0c\u5148\u5c06\u4e0e\u95e8\u6216\u95e8\u7b49\u95e8\u8f6c\u5316\u4e3a NAND, \u968f\u540e\u5c06 inverter \u63a8\u51fa\u6563\u51fa\u70b9\u3002","title":"Technology Mapping"},{"location":"Logic/logic04/#other-flip-flop-types","text":"","title":"Other Flip-Flop Types"},{"location":"Logic/logic04/#j-k-flip-flop","text":"Behavior \u7c7b\u4f3c SR \u89e6\u53d1\u5668, \\(J\\) \u76f8\u5f53\u4e8e \\(S\\) , \\(K\\) \u76f8\u5f53\u4e8e \\(R\\) . \u4f46 \\(J=K=1\\) \u65f6\uff0c\u89e6\u53d1\u5668\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u6c42\u53cd\u7684\u529f\u80fd \u4e5f\u6709\u4e00\u6b21\u6027\u91c7\u6837\u7684\u95ee\u9898 Implementation Symbol \uff08\u4e09\u89d2\u8868\u660e\u662f\u4e0a\u5347\u6cbf\u89e6\u53d1\uff0c\u82e5\u4e3a\u5706\u5708\u5219\u662f\u4e0b\u964d\u6cbf\u89e6\u53d1\uff09","title":"J-K Flip-flop"},{"location":"Logic/logic04/#t-flip-flop","text":"Behavior \u7c7b\u4f3c JK \u89e6\u53d1\u5668, \u76f8\u5f53\u4e8e \\(J=K=T\\) . \u5f53 \\(T = 0\\) , \u72b6\u6001\u4e0d\u53d8; \u5f53 \\(T = 1\\) , \u72b6\u6001\u6c42\u53cd \u5b58\u5728\u4e00\u6b21\u6027\u91c7\u6837\u7684\u95ee\u9898 \u65e0\u6cd5\u9884\u7f6e\u72b6\u6001\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a Reset \u4fe1\u53f7 Implementation Symbol","title":"T Flip-flop"},{"location":"Logic/logic04/#basic-flip-flop-descriptors","text":"Used in analysis \u5df2\u77e5\u89e6\u53d1\u5668\u7684\u8f93\u5165\u548c\u73b0\u6001\uff0c\u9884\u6d4b\u89e6\u53d1\u5668\u7684\u8f93\u51fa\u548c\u6b21\u6001 Characteristic table - defines the next state of the flip-flop in terms of flip-flop inputs and current state Characteristic equation - defines the next state of the flip-flop as a Boolean function of the flip-flop inputs and the current state Used in design \u5df2\u77e5\u73b0\u6001\u548c\u6b21\u6001\uff0c\u9884\u6d4b\u6211\u4eec\u8981\u63d0\u4f9b\u600e\u6837\u7684\u8f93\u5165 Excitation table(\u6fc0\u52b1\u8868) - defines the flip-flop input variable values as function of the current state and next state D Flip-Flop Descriptors T Flip-Flop Descriptors S-R Flip-Flop Descriptors (\u6ce8\u610f\u8fd9\u91cc\u6709\u4e2a\u6761\u4ef6 S R \u4e0d\u80fd\u540c\u65f6\u4e3a 1.) J-K Flip-Flop Descriptors","title":"Basic Flip-Flop Descriptors"},{"location":"Logic/logic05/","text":"Digital Hardware Implementation \u00b6 Abstract \u53ef\u7f16\u7a0b\u6280\u672f Programmable TechnologyROM\u3001PAL\u3001PLA\uff0c\u4f7f\u7528ROM\u3001PAL\u548cPLA\u6765\u5b9e\u73b0\u903b\u8f91\u7535\u8def ROMReadOnly Memory \u7ed3\u6784\u3001\u7f16\u7a0b\u65b9\u6cd5\u3001\u4f5c\u4e3a\u5b58\u50a8\u5668\u7684\u4f7f\u7528 PALProgrammable Array Logic \u7ed3\u6784\u3001\u7f16\u7a0b\u65b9\u6cd5\u3001\u4f7f\u7528\u65f6\u7684\u4e3b\u8981\u7ea6\u675f\u3001\u8f93\u51fa\u53cd\u9988\u7684\u4f5c\u7528\u3001\u591a\u51fd\u6570\u5b9e\u73b0\u3001\u7f16\u7a0b\u8868 PLAProgrammable Logic Array \u7ed3\u6784\u3001\u7f16\u7a0b\u65b9\u6cd5\u3001\u4f7f\u7528\u65f6\u7684\u4e3b\u8981\u7ea6\u675f\u3001\u8f93\u51fa\u53cd\u5411\u7684\u4f5c\u7528\u3001\u591a\u51fd\u6570\u5b9e\u73b0\u3001\u7f16\u7a0b\u8868 Why Programmable Logic? \u00b6 Facts: It is most economical to produce an IC in large volumes Many designs required only small volumes of ICs Need an IC that can be: Produced in large volumes Handle many designs required in small volumes A programmable logic part can be: made in large volumes programmed to implement large numbers of different low-volume designs Many programmable logic devices are field-programmable , i. e., can be programmed outside of the manufacturing environment Most programmable logic devices are erasable and reprogrammable . Allows \u201cupdating\u201d a device or correction of errors Allows reuse the device for a different design - the ultimate in re-usability! Ideal for course laboratories Programmable logic devices can be used to prototype design that will be implemented for sale in regular ICs. Complete Intel Pentium designs were actually prototyped with specialized systems based on large numbers of VLSI programmable devices! Programming Technologies \u00b6 Classifications \u00b6 Programming Technologies are used to Control connections \u628a\u4e24\u4e2a\u811a\u8fde\u63a5\u8d77\u6765\uff0c\u5e38\u89c1\u7684\u8fde\u63a5\u65b9\u6cd5\u6709\uff1a Mask programming \u4e00\u6b21\u6027\u7f16\u7a0b\uff0c\u5de5\u5382\u91cc\u82af\u7247\u5236\u9020\u65f6\u4f7f\u7528\uff0c\u5382\u5bb6\u5728\u751f\u4ea7\u65f6\u7f16\u7a0b\u5230\u82af\u7247\u5185 Fuse(\u7194\u4e1d) \u5728\u82af\u7247\u8bbe\u8ba1\u65f6\uff0c\u5728\u5f88\u591a\u82af\u7247\u5f15\u811a\u8fde\u63a5\u4e4b\u95f4\u6709 fuse, \u8bbe\u8ba1\u7535\u8def\u65f6\u4e0d\u9700\u8981\u4fdd\u7559\u8fde\u63a5\u7684\u7528\u9ad8\u7535\u538b\u4ea7\u751f\u9ad8\u7535\u6d41\uff0c\u7194\u65ad fuse. Antifuse \u6700\u5f00\u59cb\u65ad\u5f00\uff0c\u51fb\u7a7f\u540e\u7535\u8def\u8fde\u63a5\u597d Single-bit storage element \u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8fd9\u4e2a\u4f4d\u7684\u8f93\u51fa\u63a7\u5236\u4e00\u4e2a\u6676\u4f53\u7ba1\uff0c\u8fdb\u800c\u63a7\u5236\u4e24\u4e2a\u5f15\u811a\u8fde\u63a5/\u65ad\u5f00 Build lookup tables( LUT ) \u5982 16 \u4f4d\u5bc4\u5b58\u5668\uff08\u5b58\u771f\u503c\u8868\u7684\u503c\uff09 +16-1 Mux \u53ef\u6784\u6210\u56db\u8f93\u5165\u4e4b\u5185\u7684\u903b\u8f91\u6a21\u5757\uff0c\u53ea\u9700\u8981\u5c06 16\u4f4d\u5bc4\u5b58\u5668\u586b\u4e0a\u4e0d\u540c\u7684\u503c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u903b\u8f91\u51fd\u6570 Control transistor switching \u7528\u6676\u4f53\u7ba1\u63a7\u5236\u5f00\u5173\uff0c\u7c7b\u4f3c\u8fde\u63a5\u63a7\u5236 \u6d6e\u52a8\u6805\u6781 Stored charge on a floating transistor gate Erasable Electrically erasable Flash (as in Flash Memory) Storage elements Characteristics \u00b6 Permanent - Cannot be erased and reprogrammed Mask programming Fuse Antifuse Reprogrammable Volatile(\u6613\u5931\u7684) - Programming lost if chip power lost Single-bit storage element Non-Volatile Erasable Electrically erasable Flash (as in Flash Memory) Configurations \u00b6 Read Only Memory (ROM) - a fixed array of AND gates and a programmable array of OR gates Programmable Array Logic (PAL) - a programmable array of AND gates feeding a fixed array of OR gates. Programmable Logic Array (PLA) - a programmable array of AND gates feeding a programmable array of OR gates. Complex Programmable Logic Device (CPLD) /Field- Programmable Gate Array (FPGA) - complex enough to be called \u201carchitectures\u201d - See VLSI Programmable Logic Devices reading supplement \u57fa\u672c\u601d\u60f3\u7c7b\u4f3c\uff1a\u4e00\u4e2a AND \u9635\u5217\u52a0\u4e0a\u4e00\u4e2a\u4e00\u4e2a OR \u9635\u5217\uff0c\u533a\u522b\u5728\u4e8e\u54ea\u4e2a\u9635\u5217\u662f\u53ef\u7f16\u7a0b\u7684\u3002 ROM: OR PAL: AND PLA: OR+AND Read Only Memory \u00b6 Read Only Memories (ROM) or Programmable Read Only Memories (PROM) have: * N input lines, * M output lines, and * \\(2^N\\) decoded minterms. Fixed AND array with \\(2^N\\) outputs implementing all N-literal minterms. Programmable OR Array with \\(M\\) outputs lines to form up to M sum of minterm expressions. \u6709 M \u4e2a\u6216\u95e8\uff0c\u56e0\u6b64\u6700\u591a\u53ef\u4ee5\u5b9e\u73b0 M \u4e2a\u903b\u8f91\u51fd\u6570\uff08\u6bcf\u4e2a\u51fd\u6570\u6700\u591a N \u4e2a\u8f93\u5165\uff09 A program for a ROM or PROM is simply a multiple-output truth table If a 1 entry, a connection is made to the corresponding minterm for the corresponding output If a 0, no connection is made \u4e8c\u7ef4\u9635\u5217\uff1aAND \u9635\u5217\u4ea7\u751f \\(2^n\\) minterms, OR \u9635\u5217\u6709 M \u4e2a\u8f93\u51fa\uff0c\u6bcf\u4e2a\u8f93\u51fa\u5bf9\u5e94\u6700\u591a \\(2^n\\) minterms. Can be viewed as a memory with the inputs as addresses of data (output values), hence ROM or PROM names! A 8 X 4 ROM(N = 3 input lines, M= 4 output lines) \u4e00\u4e2a\u6216\u95e8\u7684\u7ebf\u8868\u793a\u4e00\u6839\u603b\u7ebf\uff0c\u4e00\u4e2a \"X\" \u8868\u793a\u4e0e\u95e8\u9635\u5217\u548c\u6216\u95e8\u9635\u5217\u8fde\u63a5\u3002 \u5b9e\u73b0\u903b\u8f91\u51fd\u6570\u5c31\u662f\u5c06\u8bd1\u7801\u5668\u7684\u6700\u5c0f\u9879\u4e0e\u6216\u95e8\u8fde\u63a5 \u4e5f\u53ef\u4ee5\u5c06\u8f93\u5165\u770b\u4f5c addr, \u8f93\u51fa\u770b\u4f5c data. Programmable Array Logic (PAL) \u00b6 The PAL is the opposite of the ROM, having a programmable set of ANDs combined with fixed ORs. Disadvantage ROM guaranteed to implement any M functions of N inputs. PAL may have too few inputs to the OR gates. Advantages For given internal complexity, a PAL can have larger N and M Some PALs have outputs that can be complemented, adding POS functions No multilevel circuit implementations in ROM (without external connections from output to input). PAL has outputs from OR terms as internal inputs to all AND terms, making implementation of multi-level circuits easier. Example \u4e0a\u65b9 0~9 \u6bcf\u6839\u7ebf\uff0c\u6bcf\u6839\u5206\u522b\u4ee3\u8868\u4e00\u4e2a\u8f93\u5165\u6216\u8005\u8f93\u5165\u7684\u53cd\u53d8\u91cf(\"*\") \u8fd9\u91cc F1 \u8fd8\u6709\u8fde\u5230 8, 9 \u7ebf\uff0c\u7528\u6765\u5b9e\u73b0\u7ea7\u8054\u3002 \\(F1=\\overline A\\overline B+\\overline C\\) \\(F2=\\overline AB\\overline C+AC+A\\overline B\\) \\(F3=AD+BD+\\overline A\\overline B+\\overline C\\) \\(F4=AB+CD+AC+BC(\\overline{F1})\\) Programmable Logic Array (PLA) \u00b6 Compared to a ROM and a PAL, a PLA is the most flexible having a programmable set of ANDs combined with a programmable set of ORs. Advantages A PLA can have large N and M permitting implementation of equations that are impractical for a ROM (because of the number of inputs, N, required) A PLA has all of its product terms connectable to all outputs, overcoming the problem of the limited inputs to the PAL Ors Some PLAs have outputs that can be complemented, adding POS functions Disadvantages Often, the product term count limits the application of a PLA. Two-level multiple-output optimization is required to reduce the number of product terms in an implementation, helping to fit it into a PLA. Multi-level circuit capability available in PAL not available in PLA. PLA requires external connections to do multi-level circuits. Example \\(F1 = AB +BC + AC\\) \\(F2 = (AB + A\u2019B\u2019)\u2019 = (A\u2019 + B\u2019) (A + B) = A\u2019B + AB\u2019\\) \u8fd9\u91cc F2 \u6211\u4eec\u6c42\u7684\u662f\u53cd\u53d8\u91cf\uff0c\u56e0\u6b64\u5728\u6700\u540e\u8981\u6c42\u53cd\uff0c\u8fd9\u6837\u505a\u53ef\u4ee5\u8282\u7701\u91cd\u590d\u5229\u7528\u4e4b\u524d\u7684 AND \u9879\u3002 \u5408\u7406\u5229\u7528 AND \u9879\u8d44\u6e90\uff0c\u5c3d\u53ef\u80fd\u590d\u7528\uff0c\u53ef\u4ee5\u6c42\u53cd\u53d8\u91cf\u3002","title":"\u6570\u5b57\u786c\u4ef6\u8bbe\u8ba1"},{"location":"Logic/logic05/#digital-hardware-implementation","text":"Abstract \u53ef\u7f16\u7a0b\u6280\u672f Programmable TechnologyROM\u3001PAL\u3001PLA\uff0c\u4f7f\u7528ROM\u3001PAL\u548cPLA\u6765\u5b9e\u73b0\u903b\u8f91\u7535\u8def ROMReadOnly Memory \u7ed3\u6784\u3001\u7f16\u7a0b\u65b9\u6cd5\u3001\u4f5c\u4e3a\u5b58\u50a8\u5668\u7684\u4f7f\u7528 PALProgrammable Array Logic \u7ed3\u6784\u3001\u7f16\u7a0b\u65b9\u6cd5\u3001\u4f7f\u7528\u65f6\u7684\u4e3b\u8981\u7ea6\u675f\u3001\u8f93\u51fa\u53cd\u9988\u7684\u4f5c\u7528\u3001\u591a\u51fd\u6570\u5b9e\u73b0\u3001\u7f16\u7a0b\u8868 PLAProgrammable Logic Array \u7ed3\u6784\u3001\u7f16\u7a0b\u65b9\u6cd5\u3001\u4f7f\u7528\u65f6\u7684\u4e3b\u8981\u7ea6\u675f\u3001\u8f93\u51fa\u53cd\u5411\u7684\u4f5c\u7528\u3001\u591a\u51fd\u6570\u5b9e\u73b0\u3001\u7f16\u7a0b\u8868","title":"Digital Hardware Implementation"},{"location":"Logic/logic05/#why-programmable-logic","text":"Facts: It is most economical to produce an IC in large volumes Many designs required only small volumes of ICs Need an IC that can be: Produced in large volumes Handle many designs required in small volumes A programmable logic part can be: made in large volumes programmed to implement large numbers of different low-volume designs Many programmable logic devices are field-programmable , i. e., can be programmed outside of the manufacturing environment Most programmable logic devices are erasable and reprogrammable . Allows \u201cupdating\u201d a device or correction of errors Allows reuse the device for a different design - the ultimate in re-usability! Ideal for course laboratories Programmable logic devices can be used to prototype design that will be implemented for sale in regular ICs. Complete Intel Pentium designs were actually prototyped with specialized systems based on large numbers of VLSI programmable devices!","title":"Why Programmable Logic?"},{"location":"Logic/logic05/#programming-technologies","text":"","title":"Programming Technologies"},{"location":"Logic/logic05/#classifications","text":"Programming Technologies are used to Control connections \u628a\u4e24\u4e2a\u811a\u8fde\u63a5\u8d77\u6765\uff0c\u5e38\u89c1\u7684\u8fde\u63a5\u65b9\u6cd5\u6709\uff1a Mask programming \u4e00\u6b21\u6027\u7f16\u7a0b\uff0c\u5de5\u5382\u91cc\u82af\u7247\u5236\u9020\u65f6\u4f7f\u7528\uff0c\u5382\u5bb6\u5728\u751f\u4ea7\u65f6\u7f16\u7a0b\u5230\u82af\u7247\u5185 Fuse(\u7194\u4e1d) \u5728\u82af\u7247\u8bbe\u8ba1\u65f6\uff0c\u5728\u5f88\u591a\u82af\u7247\u5f15\u811a\u8fde\u63a5\u4e4b\u95f4\u6709 fuse, \u8bbe\u8ba1\u7535\u8def\u65f6\u4e0d\u9700\u8981\u4fdd\u7559\u8fde\u63a5\u7684\u7528\u9ad8\u7535\u538b\u4ea7\u751f\u9ad8\u7535\u6d41\uff0c\u7194\u65ad fuse. Antifuse \u6700\u5f00\u59cb\u65ad\u5f00\uff0c\u51fb\u7a7f\u540e\u7535\u8def\u8fde\u63a5\u597d Single-bit storage element \u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8fd9\u4e2a\u4f4d\u7684\u8f93\u51fa\u63a7\u5236\u4e00\u4e2a\u6676\u4f53\u7ba1\uff0c\u8fdb\u800c\u63a7\u5236\u4e24\u4e2a\u5f15\u811a\u8fde\u63a5/\u65ad\u5f00 Build lookup tables( LUT ) \u5982 16 \u4f4d\u5bc4\u5b58\u5668\uff08\u5b58\u771f\u503c\u8868\u7684\u503c\uff09 +16-1 Mux \u53ef\u6784\u6210\u56db\u8f93\u5165\u4e4b\u5185\u7684\u903b\u8f91\u6a21\u5757\uff0c\u53ea\u9700\u8981\u5c06 16\u4f4d\u5bc4\u5b58\u5668\u586b\u4e0a\u4e0d\u540c\u7684\u503c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u903b\u8f91\u51fd\u6570 Control transistor switching \u7528\u6676\u4f53\u7ba1\u63a7\u5236\u5f00\u5173\uff0c\u7c7b\u4f3c\u8fde\u63a5\u63a7\u5236 \u6d6e\u52a8\u6805\u6781 Stored charge on a floating transistor gate Erasable Electrically erasable Flash (as in Flash Memory) Storage elements","title":"Classifications"},{"location":"Logic/logic05/#characteristics","text":"Permanent - Cannot be erased and reprogrammed Mask programming Fuse Antifuse Reprogrammable Volatile(\u6613\u5931\u7684) - Programming lost if chip power lost Single-bit storage element Non-Volatile Erasable Electrically erasable Flash (as in Flash Memory)","title":"Characteristics"},{"location":"Logic/logic05/#configurations","text":"Read Only Memory (ROM) - a fixed array of AND gates and a programmable array of OR gates Programmable Array Logic (PAL) - a programmable array of AND gates feeding a fixed array of OR gates. Programmable Logic Array (PLA) - a programmable array of AND gates feeding a programmable array of OR gates. Complex Programmable Logic Device (CPLD) /Field- Programmable Gate Array (FPGA) - complex enough to be called \u201carchitectures\u201d - See VLSI Programmable Logic Devices reading supplement \u57fa\u672c\u601d\u60f3\u7c7b\u4f3c\uff1a\u4e00\u4e2a AND \u9635\u5217\u52a0\u4e0a\u4e00\u4e2a\u4e00\u4e2a OR \u9635\u5217\uff0c\u533a\u522b\u5728\u4e8e\u54ea\u4e2a\u9635\u5217\u662f\u53ef\u7f16\u7a0b\u7684\u3002 ROM: OR PAL: AND PLA: OR+AND","title":"Configurations"},{"location":"Logic/logic05/#read-only-memory","text":"Read Only Memories (ROM) or Programmable Read Only Memories (PROM) have: * N input lines, * M output lines, and * \\(2^N\\) decoded minterms. Fixed AND array with \\(2^N\\) outputs implementing all N-literal minterms. Programmable OR Array with \\(M\\) outputs lines to form up to M sum of minterm expressions. \u6709 M \u4e2a\u6216\u95e8\uff0c\u56e0\u6b64\u6700\u591a\u53ef\u4ee5\u5b9e\u73b0 M \u4e2a\u903b\u8f91\u51fd\u6570\uff08\u6bcf\u4e2a\u51fd\u6570\u6700\u591a N \u4e2a\u8f93\u5165\uff09 A program for a ROM or PROM is simply a multiple-output truth table If a 1 entry, a connection is made to the corresponding minterm for the corresponding output If a 0, no connection is made \u4e8c\u7ef4\u9635\u5217\uff1aAND \u9635\u5217\u4ea7\u751f \\(2^n\\) minterms, OR \u9635\u5217\u6709 M \u4e2a\u8f93\u51fa\uff0c\u6bcf\u4e2a\u8f93\u51fa\u5bf9\u5e94\u6700\u591a \\(2^n\\) minterms. Can be viewed as a memory with the inputs as addresses of data (output values), hence ROM or PROM names! A 8 X 4 ROM(N = 3 input lines, M= 4 output lines) \u4e00\u4e2a\u6216\u95e8\u7684\u7ebf\u8868\u793a\u4e00\u6839\u603b\u7ebf\uff0c\u4e00\u4e2a \"X\" \u8868\u793a\u4e0e\u95e8\u9635\u5217\u548c\u6216\u95e8\u9635\u5217\u8fde\u63a5\u3002 \u5b9e\u73b0\u903b\u8f91\u51fd\u6570\u5c31\u662f\u5c06\u8bd1\u7801\u5668\u7684\u6700\u5c0f\u9879\u4e0e\u6216\u95e8\u8fde\u63a5 \u4e5f\u53ef\u4ee5\u5c06\u8f93\u5165\u770b\u4f5c addr, \u8f93\u51fa\u770b\u4f5c data.","title":"Read Only Memory"},{"location":"Logic/logic05/#programmable-array-logic-pal","text":"The PAL is the opposite of the ROM, having a programmable set of ANDs combined with fixed ORs. Disadvantage ROM guaranteed to implement any M functions of N inputs. PAL may have too few inputs to the OR gates. Advantages For given internal complexity, a PAL can have larger N and M Some PALs have outputs that can be complemented, adding POS functions No multilevel circuit implementations in ROM (without external connections from output to input). PAL has outputs from OR terms as internal inputs to all AND terms, making implementation of multi-level circuits easier. Example \u4e0a\u65b9 0~9 \u6bcf\u6839\u7ebf\uff0c\u6bcf\u6839\u5206\u522b\u4ee3\u8868\u4e00\u4e2a\u8f93\u5165\u6216\u8005\u8f93\u5165\u7684\u53cd\u53d8\u91cf(\"*\") \u8fd9\u91cc F1 \u8fd8\u6709\u8fde\u5230 8, 9 \u7ebf\uff0c\u7528\u6765\u5b9e\u73b0\u7ea7\u8054\u3002 \\(F1=\\overline A\\overline B+\\overline C\\) \\(F2=\\overline AB\\overline C+AC+A\\overline B\\) \\(F3=AD+BD+\\overline A\\overline B+\\overline C\\) \\(F4=AB+CD+AC+BC(\\overline{F1})\\)","title":"Programmable Array Logic (PAL)"},{"location":"Logic/logic05/#programmable-logic-array-pla","text":"Compared to a ROM and a PAL, a PLA is the most flexible having a programmable set of ANDs combined with a programmable set of ORs. Advantages A PLA can have large N and M permitting implementation of equations that are impractical for a ROM (because of the number of inputs, N, required) A PLA has all of its product terms connectable to all outputs, overcoming the problem of the limited inputs to the PAL Ors Some PLAs have outputs that can be complemented, adding POS functions Disadvantages Often, the product term count limits the application of a PLA. Two-level multiple-output optimization is required to reduce the number of product terms in an implementation, helping to fit it into a PLA. Multi-level circuit capability available in PAL not available in PLA. PLA requires external connections to do multi-level circuits. Example \\(F1 = AB +BC + AC\\) \\(F2 = (AB + A\u2019B\u2019)\u2019 = (A\u2019 + B\u2019) (A + B) = A\u2019B + AB\u2019\\) \u8fd9\u91cc F2 \u6211\u4eec\u6c42\u7684\u662f\u53cd\u53d8\u91cf\uff0c\u56e0\u6b64\u5728\u6700\u540e\u8981\u6c42\u53cd\uff0c\u8fd9\u6837\u505a\u53ef\u4ee5\u8282\u7701\u91cd\u590d\u5229\u7528\u4e4b\u524d\u7684 AND \u9879\u3002 \u5408\u7406\u5229\u7528 AND \u9879\u8d44\u6e90\uff0c\u5c3d\u53ef\u80fd\u590d\u7528\uff0c\u53ef\u4ee5\u6c42\u53cd\u53d8\u91cf\u3002","title":"Programmable Logic Array (PLA)"},{"location":"Logic/logic06/","text":"Register and Register Transfers \u00b6 Abstract \u5bc4\u5b58\u5668\u7684\u6982\u5ff5\u3001\u8bbe\u8ba1\u6a21\u578b\u548c\u7ed3\u6784 Register, Register Design Models \u95e8\u63a7\u65f6\u949f\u3001\u5e76\u884c\u52a0\u8f7d\u63a7\u5236 Registers with Clock Gating, Registers with Load-Controlled Feedback \u5bc4\u5b58\u5668\u4f20\u8f93\u64cd\u4f5c\u57fa\u672c\u6982\u5ff5 Register transfer operations \u5bc4\u5b58\u5668\u4f20\u8f93\u8bed\u8a00\u3001\u57fa\u672c\u5fae\u64cd\u4f5c\u3001\u6761\u4ef6\u4f20\u8f93\u539f\u7406\u3001\u591a\u5bc4\u5b58\u5668\u4f20\u8f93\u7684\u4e09\u79cd\u57fa\u672c\u7ed3\u6784\u3001\u539f\u7406\u548c\u4f18\u7f3a\u70b9 Register Transfer Language (RTL), Microoperations, conditional transfer, three types of Register Transfer Structures: Multiplexer-Based Transfers, Bus-Based Transfers, Three-State Bus RTL\u4e0e\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\u7684\u5173\u7cfb Relationship of RTL and Verilog, implementation of conditional operations \u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u6982\u5ff5\u3001\u7ed3\u6784 Shift Registers \u4e32\u884c\u8f93\u5165\u3001\u5de6\u79fb\u3001\u53f3\u79fb\u3001\u5e76\u884c\u52a0\u8f7d serial input, shift left, shift right, parallel load \u8ba1\u6570\u5668\u7684\u529f\u80fd\u3001\u7c7b\u578b Function and type of counters \u7eb9\u6ce2\u8ba1\u6570\u5668\u7684\u7ed3\u6784\u3001\u5de5\u4f5c\u539f\u7406\u3001\u4f18\u7f3a\u70b9 Structure, theory, characteristic of ripple counter \u540c\u6b65\u8ba1\u6570\u5668\u7684\u7ed3\u6784\u3001\u5de5\u4f5c\u539f\u7406\u3001\u4f18\u7f3a\u70b9 Structure, theory, characteristic of synchronous counter \u8fdb\u4f4d\u94fe\u3001\u5e76\u884c\u8fdb\u4f4d\u3001\u5e76\u884c\u52a0\u8f7d carry chain, parallel carry, parallel load \u91c7\u7528\u540c\u6b65\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1\u65b9\u6cd5\u8bbe\u8ba1\u6a21n\u8ba1\u6570\u5668 Use the sequential logic model to designmodulo n counters \u91c7\u7528\u8f93\u51fa\u7ed3\u679c\u53cd\u9988\u7684\u65b9\u6cd5\u8bbe\u8ba1\u6a21n\u8ba1\u6570\u5668 Use output feedback model to design modulo n counters \u5bc4\u5b58\u5668\u8bbe\u8ba1 RegisterDesign \u57fa\u4e8e\u5bc4\u5b58\u5668\u5355\u5143\u7684\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u91c7\u7528\u591a\u8def\u590d\u7528\u5668\u8bbe\u8ba1 RegisterCellDesign,Multiplexer Approach \u57fa\u4e8e\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1\u65b9\u6cd5\u7684\u5bc4\u5b58\u5668\u8bbe\u8ba1 Sequential Circuit Design Approach \u4e32\u884c\u4f20\u8f93\u548c\u5fae\u64cd\u4f5c Serial Transfers and Microoperations Registers \u00b6 Register \u2013 a collection of binary storage elements In theory, a register is a sequential logic which can be defined by a state table. More often, think of a register as storing a vector of binary values. Example \u5982\u679c\u6709 \\(n\\) \u4f4d\u5bc4\u5b58\u5668\uff0c\u9700\u8981 \\(2^n\\) \u72b6\u6001. \\(n\\) \u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u5bfc\u81f4\u9700\u8981\u7684\u72b6\u6001\uff0c\u53ef\u80fd\u7684\u8f93\u5165\u7ec4\u5408\u3001\u8f93\u51fa\u51fd\u6570\u4f1a\u5f88\u5927\u3002 Due to the large numbers of states and input combinations as n becomes large, the state diagram/state table model is not feasible! Add predefined combinational circuits to registers( e.g. To count up, connect the register flip-flops to an incrementer) Design individual cells using the state diagram/state table model and combine them into a register \u628a\u5bc4\u5b58\u5668\u62c6\u6210\u5355\u4f4d\u7684\u6765\u8bbe\u8ba1\uff0c\u518d\u8003\u8651\u591a\u4f4d\u7684\u62fc\u63a5\uff0c\u6700\u540e\u7ec4\u6210\u591a\u4f4d\u5bc4\u5b58\u5668\u3002 Register Storage and Load Enable \u00b6 Expectations : A register can store information for multiple clock cycles To \u201cstore\u201d or \u201cload\u201d information should be controlled by a signal \u4f46\u5728\u521a\u521a\u7684\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e2a\u5468\u671f\u90fd\u4f1a\u4fdd\u5b58\u65b0\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u505a\u5230\u5728\u591a\u4e2a\u5468\u671f\u4fdd\u7559\u6570\u636e\uff0c\u56e0\u6b64\u662f\u4e0d\u884c\u7684\u3002 Realizing expectations : Use a signal to block the clock to the register Use a signal to control feedback of the output of the register back to its inputs Use other SR or JK flip-flops, that for (0,0) applied, store their state Load is a frequent name for the signal that controls register storage and loading Load = 1 : Load the values on the data inputs(\u52a0\u8f7d\u5916\u90e8\u65b0\u6570\u636e) Load = 0 : Store the values in the register(\u4fdd\u6301\u539f\u6709\u7684\u6570\u636e) Solution Registers with Clock Gating The \\(\\overline{Load}\\) (bar \u8868\u793a\u4f4e\u7535\u5e73\u6709\u6548) signal enables the clock signal to pass through if 0 and prevents the clock signal from passing through if 1. (\u4e0e \\(Load\\) \u76f8\u53cd) Example For Positive Edge-Triggered or Negative Pulse Master-Slave Flip-flop: \\(Gated\\ Clock = Clock + \\overline{Load}\\) \u5f53 \\(\\overline{Load}\\) \u4fe1\u53f7\u4e3a 1 \u65f6\uff0c\u65f6\u949f\u4fe1\u53f7\u4e0d\u518d\u968f\u7740\u5916\u90e8\u65f6\u949f\u6539\u53d8\uff0c\u8fd9\u65f6\u5c31\u662f\u4fdd\u6301\u539f\u6709\u7684\u6570\u636e\u3002 Clock Skew \u95ee\u9898\u5728\u4e8e\u6211\u4eec\u662f\u540c\u6b65\u65f6\u5e8f\u7535\u8def\u5b9e\u73b0\uff0c\u8981\u6c42\u65f6\u949f\u7edf\u4e00\u63d0\u4f9b\uff0c\u8fd9\u6837\u6240\u6709\u7684\u89e6\u53d1\u5668\u4f1a\u5728\u540c\u4e00\u65f6\u95f4\u5b8c\u6210\u64cd\u4f5c\u3002\u4f7f\u7528\u95e8\u63a7\u65f6\u949f\u7684\u65b9\u5f0f\u4f1a\u5e26\u6765\u66f4\u591a\u7684\u89e6\u53d1\u65f6\u95f4\uff0c\u65f6\u5e8f\u7535\u8def\u4ece\u540c\u6b65\u53d8\u4e3a\u4e86\u5f02\u6b65\u7684\u65f6\u5e8f\u7535\u8def\uff08\u89e6\u53d1\u6709\u524d\u6709\u540e\uff09 Registers with Load-Controlled Feedback Run the clock continuously, and Selectively use a load control to change the register contents. Example Register Transfer Operations \u00b6 Register Transfer Operations \u2013 The movement and processing of data stored in registers Three basic components: set of registers(\u6e90\u5bc4\u5b58\u5668\uff0c\u76ee\u6807\u5bc4\u5b58\u5668) operations control of operations Elementary Operations -- load, count, shift, add, bitwise \"OR\", etc. Elementary operations called microoperations Register Notation Letters and numbers \u2013 denotes a register ( e.g. \\(R2, PC, IR\\) ) Parentheses \\((\\ )\\) \u2013 denotes a range of register bits ( e.g. \\(R1(1), PC(7:0), PC(L)\\) ) Arrow \\((\\leftarrow)\\) \u2013 denotes data transfer ( e.g. \\(R1 \\leftarrow R2, PC(L) \\leftarrow R0\\) ) H \u4ee3\u8868\u9ad8\u4f4d, L \u4ee3\u8868\u4f4e\u4f4d(\u5982 \\(PC(L),PC(H)\\) \u5206\u522b\u4ee3\u8868 \\(PC\\) \u7684\u9ad8\u516b\u4f4d\u548c\u4f4e\u516b\u4f4d) Comma \u2013 separates parallel operations Brackets \\([\\ ]\\) \u2013 Specifies a memory address ( e.g. \\(R0 \\leftarrow M[AR], R3 \\leftarrow M[PC]\\) ) \u5bfb\u5740 Conditional Transfer \u5982\u679c \\(K1=1\\) \u90a3\u4e48\u5c06 \\(R1\\) \u7684\u4fe1\u53f7\u4f20\u7ed9 \\(R2\\) , \u6211\u4eec\u53ef\u4ee5\u5199\u4e3a \\(K1:(R2\\leftarrow R1)\\) , \u5176\u4e2d \\(R1\\) \u662f\u4e00\u4e2a\u63a7\u5236\u53d8\u91cf\uff0c\u8868\u660e\u6761\u4ef6\u6267\u884c\u7684\u53d1\u751f\u662f\u5426\u53d1\u751f\u3002 Register Cell Design \u00b6 Assume that a register consists of identical cells.(\u6bcf\u4e2a\u4f4d\u6267\u884c\u76f8\u540c\u64cd\u4f5c) Design representative cell for the register Connect copies of the cell together to form the register Applying appropriate \"boundary conditions\" to cells that need to be different and contract if appropriate Specifications \u00b6 A register Data inputs to the register Control input combinations to the register e.g. \u63a7\u5236\u8f93\u5165: Load, Shift, Add. \u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u4e2a\u5f15\u811a\u5206\u522b\u8868\u793a\u63a7\u5236\u8f93\u5165(not encoded, one-hot code)\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u5f15\u811a S0 S1 \u7684\u7ec4\u5408\u6765\u8868\u793a\u63a7\u5236\u8f93\u5165(encoded) A set of register functions (typically specified as register transfers) \u5373\u89c4\u5b9a\u63a7\u5236\u8f93\u5165\u7684\u51fd\u6570\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c A hold state specification( e.g. If all control inputs are 0, hold the current register state) Design \u00b6 \u8bbe\u8ba1\u65f6\uff0c\u9664\u4e86 Multiplexer Approach \u8fd8\u6709 Sequential Circuit Design Approach Find a state diagram or state table Use the design procedure in Chapter 4 to complete the cell design For optimization: Use K-maps for up to 4 to 6 variables Otherwise, use computer-aided or manual optimization Microoperations \u00b6 Logical Groupings: Transfer - move data from one register to another Arithmetic - perform arithmetic on data in registers \\(+-\\times /\\) Logic - manipulate data or use bitwise logical operations \\(\\wedge \\vee \\oplus \\ \\overline{x}\\) Shift - shift data in registers + \"+\" \u5728\u903b\u8f91\u8868\u8fbe\u5f0f\u4e2d\u8868\u793a\u6216\uff0c\u5728\u7b97\u672f\u8868\u8fbe\u5f0f\u4e2d\u8868\u793a\u52a0\u6cd5\u3002 \u5982 \\((K1 + K2): R1 \\leftarrow R1 +R3\\) , \u5de6\u8fb9\u4e3a\u6216\uff0c\u53f3\u8fb9\u4e3a\u52a0\u3002 RTL, VHDL, Verilog Symbols for Register Transfers Arithmetic Microoperations \u00b6 Note that any register may be specified for source 1, source 2, or destination. These simple microoperations operate on the whole word Logical Microoperations \u00b6 Shift Microoperations \u00b6 These shifts \"zero fill\" . Sometimes a separate flip-flop is used to provide the data shifted in, or to \u201ccatch\u201d the data shifted out. Other shifts are possible (rotates, arithmetic). Example \u5047\u8bbe \\(R2=1100\\ 1001\\) \\(R1 \\leftarrow sl\\ R2\\) \u4e4b\u540e \\(R2=1001\\ 0010\\) \\(R1 \\leftarrow sr\\ R2\\) \u4e4b\u540e \\(R2=0110\\ 0100\\) Register Transfer Structures \u00b6 Multiplexer-Based Transfers - Multiple inputs are selected by a multiplexer dedicated to the register Bus-Based Transfers - Multiple inputs are selected by a shared multiplexer driving a bus that feeds inputs to multiple registers Three-State Bus - Multiple inputs are selected by 3-state drivers with outputs connected to a bus that feeds multiple registers Other Transfer Structures - Use multiple multiplexers, multiple buses, and combinations of all the above Multiplexer-Based Transfers \u00b6 Multiplexers connected to register inputs produce flexible transfer structures (Note: Clocks are omitted for clarity) Example \\(K1:R0\\leftarrow R1\\quad K2\\overline{K1}:R0\\leftarrow R2\\) \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5316\u7b80: \\(K1+K2\\overline{K1}=K1+K2\\) \u5c31\u662f \\(R0\\) \u5bc4\u5b58\u5668\u4f1a\u88ab\u66f4\u65b0\u65f6\u7684\u63a7\u5236\u903b\u8f91. \u5e76\u7528 \\(K1\\) \u4f5c\u4e3a Mux \u7684\u9009\u62e9\u4fe1\u53f7\u3002 \u5b8c\u6574\u7535\u8def\uff08\u5047\u8bbe\u5bc4\u5b58\u5668\u5747\u4e3a 4 \u4f4d\uff09 Multiplexer and Bus-Based Transfers for Multiple Registers \u00b6 Multiplexer dedicated to each register There can be three distinct registers as source, so can simultaneously do any three register transfers. (totally flexible) \u5982\u6211\u4eec\u53ef\u4ee5\u65e2\u53ef\u4ee5\u5b9e\u73b0 \\(R0\\leftarrow R1\\) \u4e5f\u53ef\u4ee5\u5b9e\u73b0 \\(R0\\leftrightarrow R1\\) \u7535\u8def\u6210\u672c\u592a\u9ad8\uff01 Shared transfer paths for registers A shared transfer object is a called a bus (\u603b\u7ebf) A single bus driven by a multiplexer lowers cost, but limits the available transfers \u4e0d\u80fd\u540c\u65f6 \\(R0\\leftarrow R1\\) \\(R1\\leftarrow R0\\) (\u7c7b\u6bd4\uff1a\u4ea4\u6362\u51fd\u6570\u9700\u8981\u4e00\u4e2a\u7b2c\u4e09\u65b9\u53d8\u91cf) Three-State Bus \u00b6 Same simultaneous transfer capability as multiplexer bus \u6211\u4eec\u5c06\u5bc4\u5b58\u5668\u548c\u4e09\u6001\u95e8\u5c01\u88c5\u5728\u4e00\u8d77\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5916\u90e8\u5f15\u811a(n bits), \u4f46\u591a\u8def\u590d\u7528\u5668\u7684\u65b9\u6cd5\u9700\u8981\u4e24\u6839\u4f4d\u5bbd\u662f n \u7684\u5f15\u811a\uff08\u56e0\u4e3a\u4e09\u6001\u95e8\u7684\u5916\u90e8\u5f15\u811a\u662f\u53ef\u4ee5\u53cc\u5411\u4f20\u8f93\u6570\u636e\u7684\uff09 Shift Registers \u00b6 Shift Registers move data laterally within the register toward its MSB or LSB position In the simplest case, the shift register is simply a set of D flip-flops connected in a row like this: Data input, In , is called a serial input or the shift right input . Data output, Out , is often called the serial output . The vector (A, B, C, Out) is called the parallel output . Parallel Load Shift Registers By adding a mux between each shift register stage, data can be shifted or loaded If SHIFT is low, \\(D_A\\) and \\(D_B\\) are replaced by the data on DA and DB lines, else data shifts right on each clock. \u7f3a\u70b9: \u6ca1\u6709\u6570\u636e\u4fdd\u6301\u64cd\u4f5c\uff0c\u9700\u8981\u591a\u6dfb\u52a0\u4e00\u4e2a\u9009\u62e9\u9879(3-1 \u9009\u62e9) Counters \u00b6 Counters are sequential circuits which \"count\" through a specific state sequence. They can count up , count down , or count through other fixed sequences . Two distinct types are in common usage: Ripple Counters Clock connected to the flip-flop clock input on the LSB bit flip-flop For all other bits, a flip-flop output is connected to the clock input, thus circuit is not truly synchronous! Output change is delayed more for each bit toward the MSB. Resurgent because of low power consumption Synchronous Counters Clock is directly connected to the flip-flop clock inputs Logic is used to implement the desired state sequencing Ripple Counter \u00b6 \u6bcf\u4e2a\u65f6\u949f\u5468\u671f\uff0cA \u8ba1\u6570\u5668\u7ffb\u8f6c\u4e00\u6b21\u3002\u5f53 A \u5904\u4e8e\u4e0b\u964d\u6cbf\u7684\u65f6\u5019 B \u4f1a\u8fdb\u884c\u4e00\u6b21\u6c42\u53cd\u3002 \u6bcf\u4e2a\u89e6\u53d1\u5668\u7684\u65f6\u949f\uff0c\u6ca1\u6709\u63a5\u5728\u540c\u4e00\u4e2a\u7cfb\u7edf\u65f6\u949f\u4e0a\uff0c\u662f\u4e00\u4e2a\u5f02\u6b65\u65f6\u5e8f\u7535\u8def\u3002 Question \u8003\u8651 3 \u4f4d\u89e6\u53d1\u5668\uff0c\u7406\u60f3\u4e0a \\(C=B=A=1\\) \u540e\u4ece\u5168 1 \u7acb\u5373\u53d8\u6210\u5168 0. \u4f46\u56e0\u4e3a\u95e8\u5ef6\u8fdf\uff0c\u5b9e\u9645\u53d8\u5316\u8fc7\u7a0b\u4e3a \\(111-110-100-000\\) \u6b64\u5916\u5bf9\u4e8e \\(n\\) bits, \u6700\u574f\u65f6\u95f4\u5ef6\u8fdf\u662f \\(n\\cdot t_{PHL}\\) , \u901f\u5ea6\u4f1a\u975e\u5e38\u6162 Synchronous Counters \u00b6 up-counter: incrementer \\(S=A+1\\) \u5f53\u4f4d\u6570\u589e\u52a0\uff0c\u4e0d\u5229\u4e8e\u5316\u7b80\u8bbe\u8ba1\u3002\u89c2\u5bdf \\(Q_2\\) , \u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u7ffb\u8f6c\u7684\u65f6\u5019 \\(Q_1,Q_0\\) \u5747\u4e3a 1. \u7c7b\u4f3c\u5728\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u4e2d \\(Q_n\\) \u53ea\u6709\u5728\u4f4e \\(n-1\\) \u4f4d\u5747\u4e3a 1 \u65f6\u624d\u4f1a\u53d6\u53cd\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u5f02\u6216\u95e8\uff0c\u63a5\u5728\u63a7\u5236\u5f15\u811a\u548c\u672c\u4f4d\u8f93\u51fa\u4e0a\uff0c\u5229\u7528\u63a7\u5236\u5f15\u811a\u6765\u5b9e\u73b0\u5bf9\u672c\u4f4d\u8f93\u51fa\u7684\u4fdd\u6301/\u53d6\u53cd\u3002 \u8fd9\u91cc\u7684\u63a7\u5236\u4fe1\u53f7\u662f\u4e00\u4e2a\u4e0e\u95e8\u94fe\uff0c Count Enable \u662f\u4e0e\u95e8\u94fe\u7684\u4f7f\u80fd\u3002\uff08\u82e5 Enable \u4e3a 0, \u6240\u6709\u7684\u4e0e\u95e8\u94fe\u5747\u4e3a 0, \u8fd9\u65f6\u7535\u8def\u76f8\u5f53\u4e8e\u662f\u4fdd\u6301\u529f\u80fd\uff09 \u6700\u540e\u4e0e\u95e8\u94fe\u8f93\u51fa\u4e00\u4e2a Carry Output , \u8868\u793a\u6240\u6709\u4f4d\u4e3a 1 \u4e14 Enable=1 . CO \u662f\u7528\u4e8e\u505a \u7ea7\u8054 \uff08\u5982\u4e24\u4e2a\u56db\u4f4d\u8ba1\u6570\u5668\u62fc\u6210\u4e00\u4e2a\u516b\u4f4d\u8ba1\u6570\u5668\uff09\u63a5\u5728\u540e\u7eed\u8ba1\u6570\u5668\u7684 Enable \u4e0a\u3002 \u5b58\u5728\u95ee\u9898\uff1a\u4e0e\u95e8\u94fe\u662f\u4e32\u63a5\u7684\uff0c\u5f53\u8ba1\u6570\u5668\u4f4d\u6570\u5927\u65f6\uff0c\u4e0e\u95e8\u94fe\u7684\u4f20\u8f93\u5ef6\u8fdf\u53ef\u80fd\u4f1a\u5f71\u54cd\u8ba1\u6570\u5668\u3002 parallel gating : Symbol for Synchronous Counter Other Counters - Counter with Parallel Load \u00b6 \u5728 D \u8f93\u5165\u89e6\u53d1\u5668\u524d\u52a0\u4e0a 2-1 Mux( Load \u662f\u9009\u62e9\u4fe1\u53f7), \u9009\u62e9\u4e0e\u95e8\u94fe\u7684\u7ed3\u679c( Load=0 ) or \u5916\u90e8\u8f93\u5165( Load=1 )\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5e76\u884c\u52a0\u8f7d\u548c\u8ba1\u6570\u7684\u9009\u62e9\u63a7\u5236 Load Count Action 0 0 Hold Stored Value 0 1 Count Up Stored Value 1 X Load D Design Example: Synchronous BCD \u5229\u7528\u65f6\u5e8f\u7535\u8def\u5b9e\u73b0\u540c\u6b65 BCD \u8ba1\u6570\u5668 \u72b6\u6001\u8868\u5982\u4e0b:(1010-1111 don't cares) \u57fa\u4e8e\u4e0a\u9762\u7684\u72b6\u6001\u8868\uff0c\u5206\u522b\u5bf9 \\(Q8,Q4,Q2,Q1\\) \u753b\u5361\u8bfa\u56fe \u5229\u7528\u5361\u8bfa\u56fe\u4e24\u7ea7\u4f18\u5316 \\[ \\begin{align*} D1 & = \\overline {Q1}\\\\ D2 & = Q2 \\oplus Q1\\overline{Q8}\\\\ D4 & = Q4 \\oplus Q1Q2\\\\ D8 & = Q8 \\oplus (Q1Q8 + Q1Q2Q4) \\end{align*} \\] \u753b\u51fa\u7535\u8def\u56fe\uff0c\u6dfb\u52a0\u590d\u4f4d\u5f15\u811a(reset) \u53ef\u4ee5\u589e\u52a0\u5728\u89e6\u53d1\u5668\u8f93\u5165\u7aef(synchronous); \u6216\u8005\u76f4\u63a5\u63a5\u5728 D \u89e6\u53d1\u5668\u7684\u5f02\u6b65\u590d\u4f4d R \u4e00\u7aef(asynchronous) \u5982\u679c\u7535\u8def\u56e0\u4e3a\u5e72\u6270\uff0c\u8df3\u5230\u4e86\u65e0\u5173\u6001\uff0c\u80fd\u5426\u6062\u590d ? \u753b\u51fa\u65e0\u5173\u6001\u7684\u6b21\u6001 \u53ef\u4ee5\u770b\u5230\u4e0d\u4f1a\u8df3\u5230\u5f02\u5e38\u72b6\u6001\u540e\u8fdb\u5165\u6b7b\u9501\uff0c\u753b\u51fa\u72b6\u6001\u56fe\u5982\u4e0b Other Counters - Counting Modulo N \u00b6 BCD \u7801\u8ba1\u6570\u5668\u5c31\u662f\u6a21 10 \u8ba1\u6570\u5668\u3002 \u5e38\u7528\u505a\u6cd5\u662f\u5c06\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u8fdb\u884c\u529f\u80fd\u8f6c\u6362\uff0c\u5229\u7528\u540c\u6b65/\u5f02\u6b65\u6e05\u96f6\uff0c\u52a0\u8f7d\u529f\u80fd\uff0c\u8fbe\u5230 \\(N\\) \u65f6\u4e2d\u6b62\u8ba1\u6570\u7ed3\u679c \u68c0\u6d4b\u503c\u5230\u8fbe N \u540e\u76f4\u63a5\u7528\u5f02\u6b65\u6e05\u96f6\u5f15\u811a\u5c06\u8ba1\u6570\u5668\u6e05\u96f6 Counting Modulo 7: Detect 7 and Asynchronously Clear A synchronous 4-bit binary counter with an asynchronous \\(Clear\\) (\u5f02\u6b65\u590d\u4f4d\u811a\uff0c\u540e\u540c) is used to make a Modulo 7 counter. Use the \\(\\overline{Clear}\\) feature to detect the count 7 and clear the count to 0. This gives a count of 0, 1, 2, 3, 4, 5, 6, 7(short)0, 1, 2, 3, 4, 5, 6, 7(short)0, etc. \u4f46\u4f1a\u77ed\u6682\u51fa\u73b0 7 \u8fd9\u4e2a\u72b6\u6001\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u5e72\u6270 \u68c0\u6d4b\u503c\u8fbe\u5230 \\(N-1\\) \u65f6\u5229\u7528\u540c\u6b65\u6e05\u96f6\u7684\u65b9\u5f0f\u5728\u4e0b\u4e2a\u5468\u671f\u4e0a\u5347\u6cbf\u5c06\u8ba1\u6570\u5668\u6e05\u96f6 Counting Modulo 7: Synchronously Load on Terminal Count of 6 A synchronous 4-bit binary counter with a synchronous load and an asynchronous \\(Clear\\) is used to make a Modulo 7 counter Use the Load feature to detect the count \"6\" and load in \"zero\". This gives a count of 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, ... \u4e0d\u4f1a\u76f4\u63a5\u6e05\u96f6\uff0c\u800c\u662f\u5728\u5230\u8fbe \\(N-1\\) \u7684\u65f6\u5019\uff0c\u5728\u4e0b\u4e2a\u65f6\u949f\u4e0a\u5347\u6cbf\u5c06\u5176\u6e05\u96f6 \u5982\u679c\u9700\u8981\u8bbe\u8ba1\u4ece\u67d0\u4e2a\u4e2d\u95f4\u503c(\u975e\u96f6)\u5f00\u59cb\u8ba1\u6570\u7684\u8ba1\u6570\u5668\uff0c\u53ea\u9700\u8981\u5c06\u6bcf\u6b21\u590d\u4f4d\u8d4b\u7684\u5916\u90e8\u8f93\u5165\u53d8\u4e3a\u8be5\u6570\u5b57\u5373\u53ef(\u5982\u679c\u662f mod 15, \u53ef\u4ee5\u4e0d\u9700\u8981\u7528\u4e0e\u95e8\uff0c\u76f4\u63a5\u5229\u7528\u4e4b\u524d\u7684 Carry Output \u5373\u53ef) \u591a\u4f4d\u8ba1\u6570\u5668 \u591a\u4f4d\u5bc4\u5b58\u5668\uff0c\u5206\u5f00\u8bbe\u8ba1\uff0c\u5982\u8bbe\u8ba1\u65f6\u95f4\uff0c\u4f4e\u4f4d\u4e3a\u6a21 10 \u8ba1\u6570\u5668\uff0c\u9ad8\u4f4d\u4e3a\u6a21 6 \u8ba1\u65f6\u5668\uff0c\u4f4e\u4f4d\u7684 Carry Output \u65e2\u4f5c\u4e3a\u4f4e\u4f4d\u7684\u540c\u6b65\u6e05\u96f6\u4fe1\u53f7\uff0c\u53c8\u662f\u9ad8\u4f4d\u7684 Enable \u4fe1\u53f7. Serial Operations \u00b6 \u4e32\u884c\uff1a \u5bc4\u5b58\u5668\u4e00\u6b21\u53ea\u63a5\u53d7\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u4f20\u8f93 n \u4f4d\u9700\u8981 n \u4e2a\u65f6\u949f\u5468\u671f\u3002 \u9700\u8981\u7684\u5f15\u7ebf\u6570\u91cf\u5c11\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e4b\u95f4\u53ea\u9700\u8981\u4e00\u6761\u7ebf\u548c\u4e00\u6761\u5730\u7ebf\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u4e14\u56e0\u4e3a\u5f15\u7ebf\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5176\u65f6\u949f\u9891\u7387\u8fbe\u5230\u975e\u5e38\u9ad8\u3002 e.g. \u8bbe\u5907\u4e0e\u8bbe\u5907\u4e4b\u95f4\u5e38\u4f7f\u7528\u4e32\u884c(\u5916\u8bbe), USB, \u4ee5\u592a\u7f51\u7ebf By using two shift registers for operands, a full adder, and a flip flop (for the carry), we can add two numbers serially, starting at the least significant bit. Serial addition is a low cost way to add large numbers of operands, since a \u201ctree\u201d of full adder cells can be made to any depth, and each new level doubles the number of operands. Other operations can be performed serially as well, such as parity generation/checking or more complex error-check codes. Serial Adder","title":"\u5bc4\u5b58\u5668\u4e0e\u5bc4\u5b58\u5668\u4f20\u8f93"},{"location":"Logic/logic06/#register-and-register-transfers","text":"Abstract \u5bc4\u5b58\u5668\u7684\u6982\u5ff5\u3001\u8bbe\u8ba1\u6a21\u578b\u548c\u7ed3\u6784 Register, Register Design Models \u95e8\u63a7\u65f6\u949f\u3001\u5e76\u884c\u52a0\u8f7d\u63a7\u5236 Registers with Clock Gating, Registers with Load-Controlled Feedback \u5bc4\u5b58\u5668\u4f20\u8f93\u64cd\u4f5c\u57fa\u672c\u6982\u5ff5 Register transfer operations \u5bc4\u5b58\u5668\u4f20\u8f93\u8bed\u8a00\u3001\u57fa\u672c\u5fae\u64cd\u4f5c\u3001\u6761\u4ef6\u4f20\u8f93\u539f\u7406\u3001\u591a\u5bc4\u5b58\u5668\u4f20\u8f93\u7684\u4e09\u79cd\u57fa\u672c\u7ed3\u6784\u3001\u539f\u7406\u548c\u4f18\u7f3a\u70b9 Register Transfer Language (RTL), Microoperations, conditional transfer, three types of Register Transfer Structures: Multiplexer-Based Transfers, Bus-Based Transfers, Three-State Bus RTL\u4e0e\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\u7684\u5173\u7cfb Relationship of RTL and Verilog, implementation of conditional operations \u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u6982\u5ff5\u3001\u7ed3\u6784 Shift Registers \u4e32\u884c\u8f93\u5165\u3001\u5de6\u79fb\u3001\u53f3\u79fb\u3001\u5e76\u884c\u52a0\u8f7d serial input, shift left, shift right, parallel load \u8ba1\u6570\u5668\u7684\u529f\u80fd\u3001\u7c7b\u578b Function and type of counters \u7eb9\u6ce2\u8ba1\u6570\u5668\u7684\u7ed3\u6784\u3001\u5de5\u4f5c\u539f\u7406\u3001\u4f18\u7f3a\u70b9 Structure, theory, characteristic of ripple counter \u540c\u6b65\u8ba1\u6570\u5668\u7684\u7ed3\u6784\u3001\u5de5\u4f5c\u539f\u7406\u3001\u4f18\u7f3a\u70b9 Structure, theory, characteristic of synchronous counter \u8fdb\u4f4d\u94fe\u3001\u5e76\u884c\u8fdb\u4f4d\u3001\u5e76\u884c\u52a0\u8f7d carry chain, parallel carry, parallel load \u91c7\u7528\u540c\u6b65\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1\u65b9\u6cd5\u8bbe\u8ba1\u6a21n\u8ba1\u6570\u5668 Use the sequential logic model to designmodulo n counters \u91c7\u7528\u8f93\u51fa\u7ed3\u679c\u53cd\u9988\u7684\u65b9\u6cd5\u8bbe\u8ba1\u6a21n\u8ba1\u6570\u5668 Use output feedback model to design modulo n counters \u5bc4\u5b58\u5668\u8bbe\u8ba1 RegisterDesign \u57fa\u4e8e\u5bc4\u5b58\u5668\u5355\u5143\u7684\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u91c7\u7528\u591a\u8def\u590d\u7528\u5668\u8bbe\u8ba1 RegisterCellDesign,Multiplexer Approach \u57fa\u4e8e\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1\u65b9\u6cd5\u7684\u5bc4\u5b58\u5668\u8bbe\u8ba1 Sequential Circuit Design Approach \u4e32\u884c\u4f20\u8f93\u548c\u5fae\u64cd\u4f5c Serial Transfers and Microoperations","title":"Register and Register Transfers"},{"location":"Logic/logic06/#registers","text":"Register \u2013 a collection of binary storage elements In theory, a register is a sequential logic which can be defined by a state table. More often, think of a register as storing a vector of binary values. Example \u5982\u679c\u6709 \\(n\\) \u4f4d\u5bc4\u5b58\u5668\uff0c\u9700\u8981 \\(2^n\\) \u72b6\u6001. \\(n\\) \u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u5bfc\u81f4\u9700\u8981\u7684\u72b6\u6001\uff0c\u53ef\u80fd\u7684\u8f93\u5165\u7ec4\u5408\u3001\u8f93\u51fa\u51fd\u6570\u4f1a\u5f88\u5927\u3002 Due to the large numbers of states and input combinations as n becomes large, the state diagram/state table model is not feasible! Add predefined combinational circuits to registers( e.g. To count up, connect the register flip-flops to an incrementer) Design individual cells using the state diagram/state table model and combine them into a register \u628a\u5bc4\u5b58\u5668\u62c6\u6210\u5355\u4f4d\u7684\u6765\u8bbe\u8ba1\uff0c\u518d\u8003\u8651\u591a\u4f4d\u7684\u62fc\u63a5\uff0c\u6700\u540e\u7ec4\u6210\u591a\u4f4d\u5bc4\u5b58\u5668\u3002","title":"Registers"},{"location":"Logic/logic06/#register-storage-and-load-enable","text":"Expectations : A register can store information for multiple clock cycles To \u201cstore\u201d or \u201cload\u201d information should be controlled by a signal \u4f46\u5728\u521a\u521a\u7684\u4f8b\u5b50\u4e2d\uff0c\u6bcf\u4e2a\u5468\u671f\u90fd\u4f1a\u4fdd\u5b58\u65b0\u7684\u6570\u636e\uff0c\u4e0d\u80fd\u505a\u5230\u5728\u591a\u4e2a\u5468\u671f\u4fdd\u7559\u6570\u636e\uff0c\u56e0\u6b64\u662f\u4e0d\u884c\u7684\u3002 Realizing expectations : Use a signal to block the clock to the register Use a signal to control feedback of the output of the register back to its inputs Use other SR or JK flip-flops, that for (0,0) applied, store their state Load is a frequent name for the signal that controls register storage and loading Load = 1 : Load the values on the data inputs(\u52a0\u8f7d\u5916\u90e8\u65b0\u6570\u636e) Load = 0 : Store the values in the register(\u4fdd\u6301\u539f\u6709\u7684\u6570\u636e) Solution Registers with Clock Gating The \\(\\overline{Load}\\) (bar \u8868\u793a\u4f4e\u7535\u5e73\u6709\u6548) signal enables the clock signal to pass through if 0 and prevents the clock signal from passing through if 1. (\u4e0e \\(Load\\) \u76f8\u53cd) Example For Positive Edge-Triggered or Negative Pulse Master-Slave Flip-flop: \\(Gated\\ Clock = Clock + \\overline{Load}\\) \u5f53 \\(\\overline{Load}\\) \u4fe1\u53f7\u4e3a 1 \u65f6\uff0c\u65f6\u949f\u4fe1\u53f7\u4e0d\u518d\u968f\u7740\u5916\u90e8\u65f6\u949f\u6539\u53d8\uff0c\u8fd9\u65f6\u5c31\u662f\u4fdd\u6301\u539f\u6709\u7684\u6570\u636e\u3002 Clock Skew \u95ee\u9898\u5728\u4e8e\u6211\u4eec\u662f\u540c\u6b65\u65f6\u5e8f\u7535\u8def\u5b9e\u73b0\uff0c\u8981\u6c42\u65f6\u949f\u7edf\u4e00\u63d0\u4f9b\uff0c\u8fd9\u6837\u6240\u6709\u7684\u89e6\u53d1\u5668\u4f1a\u5728\u540c\u4e00\u65f6\u95f4\u5b8c\u6210\u64cd\u4f5c\u3002\u4f7f\u7528\u95e8\u63a7\u65f6\u949f\u7684\u65b9\u5f0f\u4f1a\u5e26\u6765\u66f4\u591a\u7684\u89e6\u53d1\u65f6\u95f4\uff0c\u65f6\u5e8f\u7535\u8def\u4ece\u540c\u6b65\u53d8\u4e3a\u4e86\u5f02\u6b65\u7684\u65f6\u5e8f\u7535\u8def\uff08\u89e6\u53d1\u6709\u524d\u6709\u540e\uff09 Registers with Load-Controlled Feedback Run the clock continuously, and Selectively use a load control to change the register contents. Example","title":"Register Storage and Load Enable"},{"location":"Logic/logic06/#register-transfer-operations","text":"Register Transfer Operations \u2013 The movement and processing of data stored in registers Three basic components: set of registers(\u6e90\u5bc4\u5b58\u5668\uff0c\u76ee\u6807\u5bc4\u5b58\u5668) operations control of operations Elementary Operations -- load, count, shift, add, bitwise \"OR\", etc. Elementary operations called microoperations Register Notation Letters and numbers \u2013 denotes a register ( e.g. \\(R2, PC, IR\\) ) Parentheses \\((\\ )\\) \u2013 denotes a range of register bits ( e.g. \\(R1(1), PC(7:0), PC(L)\\) ) Arrow \\((\\leftarrow)\\) \u2013 denotes data transfer ( e.g. \\(R1 \\leftarrow R2, PC(L) \\leftarrow R0\\) ) H \u4ee3\u8868\u9ad8\u4f4d, L \u4ee3\u8868\u4f4e\u4f4d(\u5982 \\(PC(L),PC(H)\\) \u5206\u522b\u4ee3\u8868 \\(PC\\) \u7684\u9ad8\u516b\u4f4d\u548c\u4f4e\u516b\u4f4d) Comma \u2013 separates parallel operations Brackets \\([\\ ]\\) \u2013 Specifies a memory address ( e.g. \\(R0 \\leftarrow M[AR], R3 \\leftarrow M[PC]\\) ) \u5bfb\u5740 Conditional Transfer \u5982\u679c \\(K1=1\\) \u90a3\u4e48\u5c06 \\(R1\\) \u7684\u4fe1\u53f7\u4f20\u7ed9 \\(R2\\) , \u6211\u4eec\u53ef\u4ee5\u5199\u4e3a \\(K1:(R2\\leftarrow R1)\\) , \u5176\u4e2d \\(R1\\) \u662f\u4e00\u4e2a\u63a7\u5236\u53d8\u91cf\uff0c\u8868\u660e\u6761\u4ef6\u6267\u884c\u7684\u53d1\u751f\u662f\u5426\u53d1\u751f\u3002","title":"Register Transfer Operations"},{"location":"Logic/logic06/#register-cell-design","text":"Assume that a register consists of identical cells.(\u6bcf\u4e2a\u4f4d\u6267\u884c\u76f8\u540c\u64cd\u4f5c) Design representative cell for the register Connect copies of the cell together to form the register Applying appropriate \"boundary conditions\" to cells that need to be different and contract if appropriate","title":"Register Cell Design"},{"location":"Logic/logic06/#specifications","text":"A register Data inputs to the register Control input combinations to the register e.g. \u63a7\u5236\u8f93\u5165: Load, Shift, Add. \u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u4e2a\u5f15\u811a\u5206\u522b\u8868\u793a\u63a7\u5236\u8f93\u5165(not encoded, one-hot code)\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u5f15\u811a S0 S1 \u7684\u7ec4\u5408\u6765\u8868\u793a\u63a7\u5236\u8f93\u5165(encoded) A set of register functions (typically specified as register transfers) \u5373\u89c4\u5b9a\u63a7\u5236\u8f93\u5165\u7684\u51fd\u6570\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c A hold state specification( e.g. If all control inputs are 0, hold the current register state)","title":"Specifications"},{"location":"Logic/logic06/#design","text":"\u8bbe\u8ba1\u65f6\uff0c\u9664\u4e86 Multiplexer Approach \u8fd8\u6709 Sequential Circuit Design Approach Find a state diagram or state table Use the design procedure in Chapter 4 to complete the cell design For optimization: Use K-maps for up to 4 to 6 variables Otherwise, use computer-aided or manual optimization","title":"Design"},{"location":"Logic/logic06/#microoperations","text":"Logical Groupings: Transfer - move data from one register to another Arithmetic - perform arithmetic on data in registers \\(+-\\times /\\) Logic - manipulate data or use bitwise logical operations \\(\\wedge \\vee \\oplus \\ \\overline{x}\\) Shift - shift data in registers + \"+\" \u5728\u903b\u8f91\u8868\u8fbe\u5f0f\u4e2d\u8868\u793a\u6216\uff0c\u5728\u7b97\u672f\u8868\u8fbe\u5f0f\u4e2d\u8868\u793a\u52a0\u6cd5\u3002 \u5982 \\((K1 + K2): R1 \\leftarrow R1 +R3\\) , \u5de6\u8fb9\u4e3a\u6216\uff0c\u53f3\u8fb9\u4e3a\u52a0\u3002 RTL, VHDL, Verilog Symbols for Register Transfers","title":"Microoperations"},{"location":"Logic/logic06/#arithmetic-microoperations","text":"Note that any register may be specified for source 1, source 2, or destination. These simple microoperations operate on the whole word","title":"Arithmetic Microoperations"},{"location":"Logic/logic06/#logical-microoperations","text":"","title":"Logical Microoperations"},{"location":"Logic/logic06/#shift-microoperations","text":"These shifts \"zero fill\" . Sometimes a separate flip-flop is used to provide the data shifted in, or to \u201ccatch\u201d the data shifted out. Other shifts are possible (rotates, arithmetic). Example \u5047\u8bbe \\(R2=1100\\ 1001\\) \\(R1 \\leftarrow sl\\ R2\\) \u4e4b\u540e \\(R2=1001\\ 0010\\) \\(R1 \\leftarrow sr\\ R2\\) \u4e4b\u540e \\(R2=0110\\ 0100\\)","title":"Shift Microoperations"},{"location":"Logic/logic06/#register-transfer-structures","text":"Multiplexer-Based Transfers - Multiple inputs are selected by a multiplexer dedicated to the register Bus-Based Transfers - Multiple inputs are selected by a shared multiplexer driving a bus that feeds inputs to multiple registers Three-State Bus - Multiple inputs are selected by 3-state drivers with outputs connected to a bus that feeds multiple registers Other Transfer Structures - Use multiple multiplexers, multiple buses, and combinations of all the above","title":"Register Transfer Structures"},{"location":"Logic/logic06/#multiplexer-based-transfers","text":"Multiplexers connected to register inputs produce flexible transfer structures (Note: Clocks are omitted for clarity) Example \\(K1:R0\\leftarrow R1\\quad K2\\overline{K1}:R0\\leftarrow R2\\) \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5316\u7b80: \\(K1+K2\\overline{K1}=K1+K2\\) \u5c31\u662f \\(R0\\) \u5bc4\u5b58\u5668\u4f1a\u88ab\u66f4\u65b0\u65f6\u7684\u63a7\u5236\u903b\u8f91. \u5e76\u7528 \\(K1\\) \u4f5c\u4e3a Mux \u7684\u9009\u62e9\u4fe1\u53f7\u3002 \u5b8c\u6574\u7535\u8def\uff08\u5047\u8bbe\u5bc4\u5b58\u5668\u5747\u4e3a 4 \u4f4d\uff09","title":"Multiplexer-Based Transfers"},{"location":"Logic/logic06/#multiplexer-and-bus-based-transfers-for-multiple-registers","text":"Multiplexer dedicated to each register There can be three distinct registers as source, so can simultaneously do any three register transfers. (totally flexible) \u5982\u6211\u4eec\u53ef\u4ee5\u65e2\u53ef\u4ee5\u5b9e\u73b0 \\(R0\\leftarrow R1\\) \u4e5f\u53ef\u4ee5\u5b9e\u73b0 \\(R0\\leftrightarrow R1\\) \u7535\u8def\u6210\u672c\u592a\u9ad8\uff01 Shared transfer paths for registers A shared transfer object is a called a bus (\u603b\u7ebf) A single bus driven by a multiplexer lowers cost, but limits the available transfers \u4e0d\u80fd\u540c\u65f6 \\(R0\\leftarrow R1\\) \\(R1\\leftarrow R0\\) (\u7c7b\u6bd4\uff1a\u4ea4\u6362\u51fd\u6570\u9700\u8981\u4e00\u4e2a\u7b2c\u4e09\u65b9\u53d8\u91cf)","title":"Multiplexer and Bus-Based Transfers for Multiple Registers"},{"location":"Logic/logic06/#three-state-bus","text":"Same simultaneous transfer capability as multiplexer bus \u6211\u4eec\u5c06\u5bc4\u5b58\u5668\u548c\u4e09\u6001\u95e8\u5c01\u88c5\u5728\u4e00\u8d77\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5916\u90e8\u5f15\u811a(n bits), \u4f46\u591a\u8def\u590d\u7528\u5668\u7684\u65b9\u6cd5\u9700\u8981\u4e24\u6839\u4f4d\u5bbd\u662f n \u7684\u5f15\u811a\uff08\u56e0\u4e3a\u4e09\u6001\u95e8\u7684\u5916\u90e8\u5f15\u811a\u662f\u53ef\u4ee5\u53cc\u5411\u4f20\u8f93\u6570\u636e\u7684\uff09","title":"Three-State Bus"},{"location":"Logic/logic06/#shift-registers","text":"Shift Registers move data laterally within the register toward its MSB or LSB position In the simplest case, the shift register is simply a set of D flip-flops connected in a row like this: Data input, In , is called a serial input or the shift right input . Data output, Out , is often called the serial output . The vector (A, B, C, Out) is called the parallel output . Parallel Load Shift Registers By adding a mux between each shift register stage, data can be shifted or loaded If SHIFT is low, \\(D_A\\) and \\(D_B\\) are replaced by the data on DA and DB lines, else data shifts right on each clock. \u7f3a\u70b9: \u6ca1\u6709\u6570\u636e\u4fdd\u6301\u64cd\u4f5c\uff0c\u9700\u8981\u591a\u6dfb\u52a0\u4e00\u4e2a\u9009\u62e9\u9879(3-1 \u9009\u62e9)","title":"Shift Registers"},{"location":"Logic/logic06/#counters","text":"Counters are sequential circuits which \"count\" through a specific state sequence. They can count up , count down , or count through other fixed sequences . Two distinct types are in common usage: Ripple Counters Clock connected to the flip-flop clock input on the LSB bit flip-flop For all other bits, a flip-flop output is connected to the clock input, thus circuit is not truly synchronous! Output change is delayed more for each bit toward the MSB. Resurgent because of low power consumption Synchronous Counters Clock is directly connected to the flip-flop clock inputs Logic is used to implement the desired state sequencing","title":"Counters"},{"location":"Logic/logic06/#ripple-counter","text":"\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\uff0cA \u8ba1\u6570\u5668\u7ffb\u8f6c\u4e00\u6b21\u3002\u5f53 A \u5904\u4e8e\u4e0b\u964d\u6cbf\u7684\u65f6\u5019 B \u4f1a\u8fdb\u884c\u4e00\u6b21\u6c42\u53cd\u3002 \u6bcf\u4e2a\u89e6\u53d1\u5668\u7684\u65f6\u949f\uff0c\u6ca1\u6709\u63a5\u5728\u540c\u4e00\u4e2a\u7cfb\u7edf\u65f6\u949f\u4e0a\uff0c\u662f\u4e00\u4e2a\u5f02\u6b65\u65f6\u5e8f\u7535\u8def\u3002 Question \u8003\u8651 3 \u4f4d\u89e6\u53d1\u5668\uff0c\u7406\u60f3\u4e0a \\(C=B=A=1\\) \u540e\u4ece\u5168 1 \u7acb\u5373\u53d8\u6210\u5168 0. \u4f46\u56e0\u4e3a\u95e8\u5ef6\u8fdf\uff0c\u5b9e\u9645\u53d8\u5316\u8fc7\u7a0b\u4e3a \\(111-110-100-000\\) \u6b64\u5916\u5bf9\u4e8e \\(n\\) bits, \u6700\u574f\u65f6\u95f4\u5ef6\u8fdf\u662f \\(n\\cdot t_{PHL}\\) , \u901f\u5ea6\u4f1a\u975e\u5e38\u6162","title":"Ripple Counter"},{"location":"Logic/logic06/#synchronous-counters","text":"up-counter: incrementer \\(S=A+1\\) \u5f53\u4f4d\u6570\u589e\u52a0\uff0c\u4e0d\u5229\u4e8e\u5316\u7b80\u8bbe\u8ba1\u3002\u89c2\u5bdf \\(Q_2\\) , \u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u7ffb\u8f6c\u7684\u65f6\u5019 \\(Q_1,Q_0\\) \u5747\u4e3a 1. \u7c7b\u4f3c\u5728\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u4e2d \\(Q_n\\) \u53ea\u6709\u5728\u4f4e \\(n-1\\) \u4f4d\u5747\u4e3a 1 \u65f6\u624d\u4f1a\u53d6\u53cd\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u5f02\u6216\u95e8\uff0c\u63a5\u5728\u63a7\u5236\u5f15\u811a\u548c\u672c\u4f4d\u8f93\u51fa\u4e0a\uff0c\u5229\u7528\u63a7\u5236\u5f15\u811a\u6765\u5b9e\u73b0\u5bf9\u672c\u4f4d\u8f93\u51fa\u7684\u4fdd\u6301/\u53d6\u53cd\u3002 \u8fd9\u91cc\u7684\u63a7\u5236\u4fe1\u53f7\u662f\u4e00\u4e2a\u4e0e\u95e8\u94fe\uff0c Count Enable \u662f\u4e0e\u95e8\u94fe\u7684\u4f7f\u80fd\u3002\uff08\u82e5 Enable \u4e3a 0, \u6240\u6709\u7684\u4e0e\u95e8\u94fe\u5747\u4e3a 0, \u8fd9\u65f6\u7535\u8def\u76f8\u5f53\u4e8e\u662f\u4fdd\u6301\u529f\u80fd\uff09 \u6700\u540e\u4e0e\u95e8\u94fe\u8f93\u51fa\u4e00\u4e2a Carry Output , \u8868\u793a\u6240\u6709\u4f4d\u4e3a 1 \u4e14 Enable=1 . CO \u662f\u7528\u4e8e\u505a \u7ea7\u8054 \uff08\u5982\u4e24\u4e2a\u56db\u4f4d\u8ba1\u6570\u5668\u62fc\u6210\u4e00\u4e2a\u516b\u4f4d\u8ba1\u6570\u5668\uff09\u63a5\u5728\u540e\u7eed\u8ba1\u6570\u5668\u7684 Enable \u4e0a\u3002 \u5b58\u5728\u95ee\u9898\uff1a\u4e0e\u95e8\u94fe\u662f\u4e32\u63a5\u7684\uff0c\u5f53\u8ba1\u6570\u5668\u4f4d\u6570\u5927\u65f6\uff0c\u4e0e\u95e8\u94fe\u7684\u4f20\u8f93\u5ef6\u8fdf\u53ef\u80fd\u4f1a\u5f71\u54cd\u8ba1\u6570\u5668\u3002 parallel gating : Symbol for Synchronous Counter","title":"Synchronous Counters"},{"location":"Logic/logic06/#other-counters-counter-with-parallel-load","text":"\u5728 D \u8f93\u5165\u89e6\u53d1\u5668\u524d\u52a0\u4e0a 2-1 Mux( Load \u662f\u9009\u62e9\u4fe1\u53f7), \u9009\u62e9\u4e0e\u95e8\u94fe\u7684\u7ed3\u679c( Load=0 ) or \u5916\u90e8\u8f93\u5165( Load=1 )\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5e76\u884c\u52a0\u8f7d\u548c\u8ba1\u6570\u7684\u9009\u62e9\u63a7\u5236 Load Count Action 0 0 Hold Stored Value 0 1 Count Up Stored Value 1 X Load D Design Example: Synchronous BCD \u5229\u7528\u65f6\u5e8f\u7535\u8def\u5b9e\u73b0\u540c\u6b65 BCD \u8ba1\u6570\u5668 \u72b6\u6001\u8868\u5982\u4e0b:(1010-1111 don't cares) \u57fa\u4e8e\u4e0a\u9762\u7684\u72b6\u6001\u8868\uff0c\u5206\u522b\u5bf9 \\(Q8,Q4,Q2,Q1\\) \u753b\u5361\u8bfa\u56fe \u5229\u7528\u5361\u8bfa\u56fe\u4e24\u7ea7\u4f18\u5316 \\[ \\begin{align*} D1 & = \\overline {Q1}\\\\ D2 & = Q2 \\oplus Q1\\overline{Q8}\\\\ D4 & = Q4 \\oplus Q1Q2\\\\ D8 & = Q8 \\oplus (Q1Q8 + Q1Q2Q4) \\end{align*} \\] \u753b\u51fa\u7535\u8def\u56fe\uff0c\u6dfb\u52a0\u590d\u4f4d\u5f15\u811a(reset) \u53ef\u4ee5\u589e\u52a0\u5728\u89e6\u53d1\u5668\u8f93\u5165\u7aef(synchronous); \u6216\u8005\u76f4\u63a5\u63a5\u5728 D \u89e6\u53d1\u5668\u7684\u5f02\u6b65\u590d\u4f4d R \u4e00\u7aef(asynchronous) \u5982\u679c\u7535\u8def\u56e0\u4e3a\u5e72\u6270\uff0c\u8df3\u5230\u4e86\u65e0\u5173\u6001\uff0c\u80fd\u5426\u6062\u590d ? \u753b\u51fa\u65e0\u5173\u6001\u7684\u6b21\u6001 \u53ef\u4ee5\u770b\u5230\u4e0d\u4f1a\u8df3\u5230\u5f02\u5e38\u72b6\u6001\u540e\u8fdb\u5165\u6b7b\u9501\uff0c\u753b\u51fa\u72b6\u6001\u56fe\u5982\u4e0b","title":"Other Counters - Counter with Parallel Load"},{"location":"Logic/logic06/#other-counters-counting-modulo-n","text":"BCD \u7801\u8ba1\u6570\u5668\u5c31\u662f\u6a21 10 \u8ba1\u6570\u5668\u3002 \u5e38\u7528\u505a\u6cd5\u662f\u5c06\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u8fdb\u884c\u529f\u80fd\u8f6c\u6362\uff0c\u5229\u7528\u540c\u6b65/\u5f02\u6b65\u6e05\u96f6\uff0c\u52a0\u8f7d\u529f\u80fd\uff0c\u8fbe\u5230 \\(N\\) \u65f6\u4e2d\u6b62\u8ba1\u6570\u7ed3\u679c \u68c0\u6d4b\u503c\u5230\u8fbe N \u540e\u76f4\u63a5\u7528\u5f02\u6b65\u6e05\u96f6\u5f15\u811a\u5c06\u8ba1\u6570\u5668\u6e05\u96f6 Counting Modulo 7: Detect 7 and Asynchronously Clear A synchronous 4-bit binary counter with an asynchronous \\(Clear\\) (\u5f02\u6b65\u590d\u4f4d\u811a\uff0c\u540e\u540c) is used to make a Modulo 7 counter. Use the \\(\\overline{Clear}\\) feature to detect the count 7 and clear the count to 0. This gives a count of 0, 1, 2, 3, 4, 5, 6, 7(short)0, 1, 2, 3, 4, 5, 6, 7(short)0, etc. \u4f46\u4f1a\u77ed\u6682\u51fa\u73b0 7 \u8fd9\u4e2a\u72b6\u6001\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u5e72\u6270 \u68c0\u6d4b\u503c\u8fbe\u5230 \\(N-1\\) \u65f6\u5229\u7528\u540c\u6b65\u6e05\u96f6\u7684\u65b9\u5f0f\u5728\u4e0b\u4e2a\u5468\u671f\u4e0a\u5347\u6cbf\u5c06\u8ba1\u6570\u5668\u6e05\u96f6 Counting Modulo 7: Synchronously Load on Terminal Count of 6 A synchronous 4-bit binary counter with a synchronous load and an asynchronous \\(Clear\\) is used to make a Modulo 7 counter Use the Load feature to detect the count \"6\" and load in \"zero\". This gives a count of 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, ... \u4e0d\u4f1a\u76f4\u63a5\u6e05\u96f6\uff0c\u800c\u662f\u5728\u5230\u8fbe \\(N-1\\) \u7684\u65f6\u5019\uff0c\u5728\u4e0b\u4e2a\u65f6\u949f\u4e0a\u5347\u6cbf\u5c06\u5176\u6e05\u96f6 \u5982\u679c\u9700\u8981\u8bbe\u8ba1\u4ece\u67d0\u4e2a\u4e2d\u95f4\u503c(\u975e\u96f6)\u5f00\u59cb\u8ba1\u6570\u7684\u8ba1\u6570\u5668\uff0c\u53ea\u9700\u8981\u5c06\u6bcf\u6b21\u590d\u4f4d\u8d4b\u7684\u5916\u90e8\u8f93\u5165\u53d8\u4e3a\u8be5\u6570\u5b57\u5373\u53ef(\u5982\u679c\u662f mod 15, \u53ef\u4ee5\u4e0d\u9700\u8981\u7528\u4e0e\u95e8\uff0c\u76f4\u63a5\u5229\u7528\u4e4b\u524d\u7684 Carry Output \u5373\u53ef) \u591a\u4f4d\u8ba1\u6570\u5668 \u591a\u4f4d\u5bc4\u5b58\u5668\uff0c\u5206\u5f00\u8bbe\u8ba1\uff0c\u5982\u8bbe\u8ba1\u65f6\u95f4\uff0c\u4f4e\u4f4d\u4e3a\u6a21 10 \u8ba1\u6570\u5668\uff0c\u9ad8\u4f4d\u4e3a\u6a21 6 \u8ba1\u65f6\u5668\uff0c\u4f4e\u4f4d\u7684 Carry Output \u65e2\u4f5c\u4e3a\u4f4e\u4f4d\u7684\u540c\u6b65\u6e05\u96f6\u4fe1\u53f7\uff0c\u53c8\u662f\u9ad8\u4f4d\u7684 Enable \u4fe1\u53f7.","title":"Other Counters - Counting Modulo N"},{"location":"Logic/logic06/#serial-operations","text":"\u4e32\u884c\uff1a \u5bc4\u5b58\u5668\u4e00\u6b21\u53ea\u63a5\u53d7\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u4f20\u8f93 n \u4f4d\u9700\u8981 n \u4e2a\u65f6\u949f\u5468\u671f\u3002 \u9700\u8981\u7684\u5f15\u7ebf\u6570\u91cf\u5c11\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e4b\u95f4\u53ea\u9700\u8981\u4e00\u6761\u7ebf\u548c\u4e00\u6761\u5730\u7ebf\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u4e14\u56e0\u4e3a\u5f15\u7ebf\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5176\u65f6\u949f\u9891\u7387\u8fbe\u5230\u975e\u5e38\u9ad8\u3002 e.g. \u8bbe\u5907\u4e0e\u8bbe\u5907\u4e4b\u95f4\u5e38\u4f7f\u7528\u4e32\u884c(\u5916\u8bbe), USB, \u4ee5\u592a\u7f51\u7ebf By using two shift registers for operands, a full adder, and a flip flop (for the carry), we can add two numbers serially, starting at the least significant bit. Serial addition is a low cost way to add large numbers of operands, since a \u201ctree\u201d of full adder cells can be made to any depth, and each new level doubles the number of operands. Other operations can be performed serially as well, such as parity generation/checking or more complex error-check codes. Serial Adder","title":"Serial Operations"},{"location":"Logic/logic07/","text":"Memory Basis \u00b6 Abstract \u5b58\u50a8\u5668\u57fa\u672c\u6982\u5ff5 Basic concepts of memory \u5b58\u50a8\u5668\u5b9a\u4e49\u3001RAM\u7684\u5b9a\u4e49\u3001\u5b58\u50a8\u5668\u5730\u5740\u6982\u5ff5\u5b9a\u4e49\u3001\u5b58\u50a8\u5668\u57fa\u672c\u6570\u636e\u5355\u5143\u548c\u64cd\u4f5c Memory definitions, RAM, memory address, RAM cell, basic memory operations \u5b58\u50a8\u5668\u7684\u7ec4\u7ec7 memory organization \u5730\u5740\u3001\u5b57\u957f\u548c\u5b58\u50a8\u5355\u5143\u4e2a\u6570\u4e4b\u95f4\u5173\u7cfb Relationship between address, word width and storage cells \u5b58\u50a8\u5668\u7684\u57fa\u672c\u7ed3\u6784\u6846\u56fe Memory block diagram \u5730\u5740\u7ebf\u3001\u6570\u636e\u7ebf\u3001\u63a7\u5236\u7ebf Address lines, Data lines, Control lines \u8bfb\u3001\u5199\u8fc7\u7a0b\u4e2d\u5404\u4fe1\u53f7\u7684\u65f6\u5e8f\u3001DRAM\u7684\u8bbf\u95ee\u65f6\u5e8f Memory Read or Write Operation Timing, DRAM Read Timing \u9759\u6001RAM\u548c\u52a8\u6001RAM\u7684\u57fa\u672c\u6982\u5ff5 Basic concepts of Static RAM and Dynamic RAM \u9759\u6001\u5b58\u50a8\u5668SRAM\u7ed3\u6784\u3001\u52a8\u6001\u5b58\u50a8\u5668DRAM\u7ed3\u6784\u3001\u533a\u522b Structure and difference of SRAM and DRAM DRAM\u63a7\u5236\u7535\u8def\u4e0e\u5237\u65b0 DRAM block diagram and refresh \u4e24\u6b21\uff08\u5206\u65f6\uff09\u5730\u5740\u52a0\u8f7d\uff0c\u5148\u52a0\u8f7d\u884c\u5730\u5740\u540e\u52a0\u8f7d\u5217\u5730\u5740 Row Address and Column Address \u5b58\u50a8\u5668\u7684\u5b57\u6269\u5c55\u548c\u4f4d\u6269\u5c55\u65b9\u6cd5 Memory word expansion and width expansion \u540c\u6b65SDRAM\u7684\u731d\u53d1\u8bfb\u7684\u57fa\u672c\u6982\u5ff5 Burst read in SDRAM Memory Concepts \u00b6 Memory \u2500 A collection of storage cells together with the necessary circuits to transfer information to and from them. \u4e00\u7ec4\u5b58\u50a8\u5355\u5143\u7684\u96c6\u5408\uff0c\u53ef\u4ee5\u8bfb\u3001\u5199\u3002 Memory Organization \u2500 the basic architectural structure of a memory in terms of how data is accessed. \u5185\u5b58\u7684\u67b6\u6784\uff0c\u5185\u5b58\u80fd\u5b58\u653e\u591a\u5c11\u6570\u636e\uff0c\u4e00\u4e2a\u5b57\u591a\u5c11\u4f4d\uff0c\u5982\u4f55\u8bbf\u95ee\u5185\u5b58\u7b49\u3002 Random Access Memory (RAM) \u2500 a memory organized such that data can be transferred to or from any cell (or collection of cells) in a time that is not dependent upon the particular cell selected. Memory Address \u2500 A vector of bits that identifies a particular memory element (or collection of elements). \u5185\u5b58\u5730\u5740\uff0c\u4e00\u4e2a\u5217\u8868\u7684\u7f16\u53f7\uff0c\u901a\u8fc7\u7f16\u53f7\u53ef\u4ee5\u8bfb\u5199\u5185\u5b58\u7684\u6570\u636e\u3002 Typical data elements are: bit byte \u2500 8 bits word \u2500 a collection of binary bits whose size is a typical unit of access for the memory. It is typically a power of two multiple of bytes ( e.g. 1 byte, 2 bytes, 4 bytes, 8 bytes, etc. ) \u4e0d\u540c\u8ba1\u7b97\u673a\u7684\u5b57\u957f\u53ef\u80fd\u4e0d\u540c\u3002 Memory Data \u2500 a bit or a collection of bits to be stored into or accessed from memory cells. Memory Operations \u2500 operations on memory data supported by the memory unit. Typically, read and write operations over some data element (bit, byte, word, etc ). Memory Organization \u00b6 Organized as an indexed array of words . Value of the index for each word is the memory address . \u5386\u53f2\u4e0a\u4e0d\u540c\u4ee3\u7684\u4ea7\u54c1\u90fd\u6709\u7740\u4e0d\u540c\u7684\u5185\u5b58\u67b6\u6784 e.g. PDP-8, IBM360, Intel 8080... Memory Block Diagram \\(k\\) address lines ->(decoded) address \\(2^k\\) words of memory. Each word is \\(n\\) bits. Read and Write are single control lines by 1 bit. Memory Organization Example 3 \u4e2a\u5730\u5740\u4f4d\uff0c \\(0~7\\) , \u6bcf\u4e2a\u5730\u5740\u5b58\u4e86 8 \u4f4d\u6570\u636e\uff0c\u56e0\u6b64\u5b57\u957f\u662f 8. Basic Memory Operations \u00b6 Memory operations require the following: Data \u2500 data written to, or read from, memory as required by the operation. Address \u2500 specifies the memory location to operate on. The address lines carry this information into the memory. Typically: \\(n\\) bits specify locations of \\(2^n\\) words. An operation \u2500 Information sent to the memory and interpreted as control information which specifies the type of operation to be performed. Typical operations are READ and WRITE. Others are READ followed by WRITE and a variety of operations associated with delivering blocks of data. Operation signals may also specify timing info. Read Memory \u2500 an operation that reads a data value stored in memory: Place a valid address on the address lines. Toggle(\u5207\u6362) the memory read control line. Wait for the read data to become stable. Write Memory \u2500 an operation that writes a data value to memory: Place a valid address on the address lines and valid data on the data lines. Toggle the memory write control line. Memory Operation Timing Most basic memories are asynchronous Controlled by control inputs and address Timing of signal changes and data observation is critical to the operation Read timing data valid \u662f\u7b49\u5f85\u7684\u65f6\u95f4\uff0c\u968f\u7740\u6570\u636e\u5927\u5c0f\u3001\u5185\u5b58\u5de5\u827a\u4e0d\u540c\uff0c\u4f1a\u82b1\u8d39\u4e0d\u540c\u7684\u65f6\u95f4 Write timing \u5728 R/W \u4fe1\u53f7\u4e0b\u964d\u65f6\u8981\u5c06 addr \u9501\u5b58\u8d77\u6765\uff0c\u4e0a\u5347\u65f6\u8981\u9884\u5148\u628a\u6570\u636e\u51c6\u5907\u597d\u3002 RAM \u00b6 Types of random access memory Static \u2013 information stored in latches Dynamic \u2013 information stored as electrical charges on capacitors \u5bc6\u5ea6\u53ef\u4ee5\u505a\u7684\u5f88\u9ad8 Charge \u201cleaks\u201d off Periodic refresh of charge required Dependence on Power Supply Volatile \u2013 loses stored information when power turned off Non-volatile \u2013 retains information when power turned off Static RAM (SRAM) \u00b6 Cell and Slices \u00b6 SR Latch Select input for control 1 Dual Rail Data Inputs \\(B\\) and \\(\\overline B\\) Dual Rail Data Outputs \\(C\\) and \\(\\overline C\\) \u8fd9\u91cc Bit Select \u7684\u4fe1\u53f7\uff08\u6bcf\u4e00\u4e2a Cell \u90fd\u6709\uff09\uff0c\u4e3a 0 \u65f6\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u88ab Disable \u4e86\uff0c\u4e3a 1 \u65f6\u624d\u53ef\u4ee5\u5199\u5165\u8bfb\u51fa\uff08\u53d6\u51b3\u4e8e \\(Read/\\overline{Write}\\) \u4fe1\u53f7\uff09 Cell Arrays and Coincident Selection \u00b6 Decoder \uff0d decodes the \\(n\\) address lines to \\(2^n\\) word select lines \u5c06\u5bf9\u5e94\u5730\u5740\u4e0a\u7684 Cells \u7684 Bit Select \u4fe1\u53f7\u7f6e\u4e3a 1 \u5176\u4f59\u4e3a 0. A 3-state buffer on the data output permits RAM ICs to be combined into a RAM with \\(c \\times 2^n\\) words \u884c\u5217\u8bd1\u7801 Word select becomes Row select Bit select becomes Column select \\(8\\times 2\\) RAM Making Larger Memories \u00b6 \u5229\u7528 CS \u5f15\u811a\uff0c\u53ef\u4ee5\u5c06 RAM \u82af\u7247\u62fc\u8d77\u6765\u3002\uff08\u81ea\u6269\u5c55\uff0c\u5373\u8f93\u51fa\u7684\u5b57\u5bbd\u6ca1\u53d8\uff09 \u9ad8\u4f4d\u8f93\u5165\u7528\u6765\u9009\u62e9 RAM \u82af\u7247\uff08\u8f93\u51fa\u662f\u9ad8\u963b\u6001\uff09\uff0c\u4f4e\u4f4d\u8f93\u5165\u7528\u6765\u9009\u62e9\u5bf9\u5e94\u82af\u7247\u7684 Cell. Making Wider Memories \u00b6 \u589e\u52a0\u4f4d\u5bbd\uff0c\u6bcf\u5757 RAM \u82af\u7247\u5c31\u4ee3\u8868\u6700\u540e\u8f93\u51fa\u7684\u67d0\u4e00\u4f4d\u3002 Dynamic RAM (DRAM) \u00b6 Basic Principle: Storage of information on capacitors . Charge and discharge of capacitor to change stored value Use of transistor as \u201cswitch\u201d to: Store charge Charge or discharge \u6210\u672c\u4f4e\uff0c\u56e0\u6b64\u82af\u7247\u91cc\u53ef\u4ee5\u9ad8\u5bc6\u5ea6\u4f7f\u7528\u3002 \u5199\u6570\u636e\u65f6\u76f4\u63a5\u5145\u653e\u7535\u5373\u53ef\uff1b\u8bfb\u53d6\u65f6\uff0c\u9700\u8981\u6709\u7535\u8def\u5224\u65ad\u7535\u538b\u9ad8\u4f4e\uff0c\u8fd9\u65f6\u4f1a\u6d88\u8017\u7535\u8377,\u8981\u5c06\u7834\u574f\u6027\u8bfb\u8f6c\u4e3a\u975e\u7834\u574f\u6027\uff08\u5c06\u503c\u5199\u56de\u53bb\uff09 Cell and Slices \u00b6 \u5c06\u6240\u6709\u7684 DRAM \u8f93\u51fa\u63a5\u5230 Sense Amplifier \u4e0a\uff0c\u53ef\u4ee5\u8ba9\u7834\u574f\u6027\u8bfb\u5165\u53d8\u4e3a\u975e\u7834\u574f\u6027\u8bfb\u5165\u3002 \u9700\u8981\u505a\u5b9a\u65f6\u5237\u65b0\uff08\u7535\u5bb9\u4f1a\u81ea\u5df1\u653e\u7535\uff09 - Refresh Controller and Refresh Counter \u5206\u522b\u8f93\u5165\u884c\u5730\u5740\u3001\u5217\u5730\u5740\uff08\u5b9e\u9645\u4e0a\u662f\u4e00\u7ec4\u5f15\u811a\uff0c\u53ea\u662f\u88ab DRAM \u5206\u5f00\u8f93\u5165\uff09\uff0c\u5bf9\u5e94 \\(\\overline{RAS},\\overline{CAS}\\) \uff08\u63a7\u5236\u5f15\u811a\uff0c\u544a\u8bc9\u82af\u7247\u73b0\u5728\u8f93\u5165\u7684\u662f\u884c/\u5217\u5730\u5740\uff09 DRAM \u662f\u540c\u6b65\u7684\uff0c\u4f9d\u8d56\u65f6\u949f\uff08SRAM \u662f\u5f02\u6b65\uff09 Read timing Write timing DRAM Types \u00b6 Synchronous DRAM (SDRAM) Double Data Rate SDRAM (DDR SDRAM) RAMBUS\u00ae DRAM (RDRAM) DRAM \u5b58\u50a8\u91cf\u5927\uff0c\u4f46\u76f8\u5bf9 SRAM \u64cd\u4f5c\u4f1a\u6162\u5f88\u591a\uff08\u8fd8\u8981\u5206\u4e24\u4e2a\u5468\u671f\u5206\u522b\u63d0\u4f9b\u884c\u5730\u5740\u548c\u5217\u5730\u5740\uff09 Synchronous DRAM Transfers to and from the DRAM are synchronize with a clock Column address counter for addressing internal data to be transferred on each clock cycle beginning with the column address counts up to column address + burst size \u2013 1 \u4e00\u6b21\u53ef\u4ee5\u8bfb\u51fa\u591a\u4e2a\u6570\u636e Synchronous DRAM - burst size=4 \u548c SRAM \u914d\u5408\u5f62\u6210 cache Double Data Rate Synchronous DRAM Transfers data on both edges of the clock Provides a transfer rate of 2 data words per clock cycle RAMBUS DRAM (RDRAM) Uses a packet-based bus for interaction between the RDRAM ICs and the memory bus to the processor The bus consists of: A 3-bit row address bus A 5-bit column address bus A 16 or 18-bit (for error correction) data bus","title":"\u5185\u5b58\u57fa\u7840"},{"location":"Logic/logic07/#memory-basis","text":"Abstract \u5b58\u50a8\u5668\u57fa\u672c\u6982\u5ff5 Basic concepts of memory \u5b58\u50a8\u5668\u5b9a\u4e49\u3001RAM\u7684\u5b9a\u4e49\u3001\u5b58\u50a8\u5668\u5730\u5740\u6982\u5ff5\u5b9a\u4e49\u3001\u5b58\u50a8\u5668\u57fa\u672c\u6570\u636e\u5355\u5143\u548c\u64cd\u4f5c Memory definitions, RAM, memory address, RAM cell, basic memory operations \u5b58\u50a8\u5668\u7684\u7ec4\u7ec7 memory organization \u5730\u5740\u3001\u5b57\u957f\u548c\u5b58\u50a8\u5355\u5143\u4e2a\u6570\u4e4b\u95f4\u5173\u7cfb Relationship between address, word width and storage cells \u5b58\u50a8\u5668\u7684\u57fa\u672c\u7ed3\u6784\u6846\u56fe Memory block diagram \u5730\u5740\u7ebf\u3001\u6570\u636e\u7ebf\u3001\u63a7\u5236\u7ebf Address lines, Data lines, Control lines \u8bfb\u3001\u5199\u8fc7\u7a0b\u4e2d\u5404\u4fe1\u53f7\u7684\u65f6\u5e8f\u3001DRAM\u7684\u8bbf\u95ee\u65f6\u5e8f Memory Read or Write Operation Timing, DRAM Read Timing \u9759\u6001RAM\u548c\u52a8\u6001RAM\u7684\u57fa\u672c\u6982\u5ff5 Basic concepts of Static RAM and Dynamic RAM \u9759\u6001\u5b58\u50a8\u5668SRAM\u7ed3\u6784\u3001\u52a8\u6001\u5b58\u50a8\u5668DRAM\u7ed3\u6784\u3001\u533a\u522b Structure and difference of SRAM and DRAM DRAM\u63a7\u5236\u7535\u8def\u4e0e\u5237\u65b0 DRAM block diagram and refresh \u4e24\u6b21\uff08\u5206\u65f6\uff09\u5730\u5740\u52a0\u8f7d\uff0c\u5148\u52a0\u8f7d\u884c\u5730\u5740\u540e\u52a0\u8f7d\u5217\u5730\u5740 Row Address and Column Address \u5b58\u50a8\u5668\u7684\u5b57\u6269\u5c55\u548c\u4f4d\u6269\u5c55\u65b9\u6cd5 Memory word expansion and width expansion \u540c\u6b65SDRAM\u7684\u731d\u53d1\u8bfb\u7684\u57fa\u672c\u6982\u5ff5 Burst read in SDRAM","title":"Memory Basis"},{"location":"Logic/logic07/#memory-concepts","text":"Memory \u2500 A collection of storage cells together with the necessary circuits to transfer information to and from them. \u4e00\u7ec4\u5b58\u50a8\u5355\u5143\u7684\u96c6\u5408\uff0c\u53ef\u4ee5\u8bfb\u3001\u5199\u3002 Memory Organization \u2500 the basic architectural structure of a memory in terms of how data is accessed. \u5185\u5b58\u7684\u67b6\u6784\uff0c\u5185\u5b58\u80fd\u5b58\u653e\u591a\u5c11\u6570\u636e\uff0c\u4e00\u4e2a\u5b57\u591a\u5c11\u4f4d\uff0c\u5982\u4f55\u8bbf\u95ee\u5185\u5b58\u7b49\u3002 Random Access Memory (RAM) \u2500 a memory organized such that data can be transferred to or from any cell (or collection of cells) in a time that is not dependent upon the particular cell selected. Memory Address \u2500 A vector of bits that identifies a particular memory element (or collection of elements). \u5185\u5b58\u5730\u5740\uff0c\u4e00\u4e2a\u5217\u8868\u7684\u7f16\u53f7\uff0c\u901a\u8fc7\u7f16\u53f7\u53ef\u4ee5\u8bfb\u5199\u5185\u5b58\u7684\u6570\u636e\u3002 Typical data elements are: bit byte \u2500 8 bits word \u2500 a collection of binary bits whose size is a typical unit of access for the memory. It is typically a power of two multiple of bytes ( e.g. 1 byte, 2 bytes, 4 bytes, 8 bytes, etc. ) \u4e0d\u540c\u8ba1\u7b97\u673a\u7684\u5b57\u957f\u53ef\u80fd\u4e0d\u540c\u3002 Memory Data \u2500 a bit or a collection of bits to be stored into or accessed from memory cells. Memory Operations \u2500 operations on memory data supported by the memory unit. Typically, read and write operations over some data element (bit, byte, word, etc ).","title":"Memory Concepts"},{"location":"Logic/logic07/#memory-organization","text":"Organized as an indexed array of words . Value of the index for each word is the memory address . \u5386\u53f2\u4e0a\u4e0d\u540c\u4ee3\u7684\u4ea7\u54c1\u90fd\u6709\u7740\u4e0d\u540c\u7684\u5185\u5b58\u67b6\u6784 e.g. PDP-8, IBM360, Intel 8080... Memory Block Diagram \\(k\\) address lines ->(decoded) address \\(2^k\\) words of memory. Each word is \\(n\\) bits. Read and Write are single control lines by 1 bit. Memory Organization Example 3 \u4e2a\u5730\u5740\u4f4d\uff0c \\(0~7\\) , \u6bcf\u4e2a\u5730\u5740\u5b58\u4e86 8 \u4f4d\u6570\u636e\uff0c\u56e0\u6b64\u5b57\u957f\u662f 8.","title":"Memory Organization"},{"location":"Logic/logic07/#basic-memory-operations","text":"Memory operations require the following: Data \u2500 data written to, or read from, memory as required by the operation. Address \u2500 specifies the memory location to operate on. The address lines carry this information into the memory. Typically: \\(n\\) bits specify locations of \\(2^n\\) words. An operation \u2500 Information sent to the memory and interpreted as control information which specifies the type of operation to be performed. Typical operations are READ and WRITE. Others are READ followed by WRITE and a variety of operations associated with delivering blocks of data. Operation signals may also specify timing info. Read Memory \u2500 an operation that reads a data value stored in memory: Place a valid address on the address lines. Toggle(\u5207\u6362) the memory read control line. Wait for the read data to become stable. Write Memory \u2500 an operation that writes a data value to memory: Place a valid address on the address lines and valid data on the data lines. Toggle the memory write control line. Memory Operation Timing Most basic memories are asynchronous Controlled by control inputs and address Timing of signal changes and data observation is critical to the operation Read timing data valid \u662f\u7b49\u5f85\u7684\u65f6\u95f4\uff0c\u968f\u7740\u6570\u636e\u5927\u5c0f\u3001\u5185\u5b58\u5de5\u827a\u4e0d\u540c\uff0c\u4f1a\u82b1\u8d39\u4e0d\u540c\u7684\u65f6\u95f4 Write timing \u5728 R/W \u4fe1\u53f7\u4e0b\u964d\u65f6\u8981\u5c06 addr \u9501\u5b58\u8d77\u6765\uff0c\u4e0a\u5347\u65f6\u8981\u9884\u5148\u628a\u6570\u636e\u51c6\u5907\u597d\u3002","title":"Basic Memory Operations"},{"location":"Logic/logic07/#ram","text":"Types of random access memory Static \u2013 information stored in latches Dynamic \u2013 information stored as electrical charges on capacitors \u5bc6\u5ea6\u53ef\u4ee5\u505a\u7684\u5f88\u9ad8 Charge \u201cleaks\u201d off Periodic refresh of charge required Dependence on Power Supply Volatile \u2013 loses stored information when power turned off Non-volatile \u2013 retains information when power turned off","title":"RAM"},{"location":"Logic/logic07/#static-ram-sram","text":"","title":"Static RAM (SRAM)"},{"location":"Logic/logic07/#cell-and-slices","text":"SR Latch Select input for control 1 Dual Rail Data Inputs \\(B\\) and \\(\\overline B\\) Dual Rail Data Outputs \\(C\\) and \\(\\overline C\\) \u8fd9\u91cc Bit Select \u7684\u4fe1\u53f7\uff08\u6bcf\u4e00\u4e2a Cell \u90fd\u6709\uff09\uff0c\u4e3a 0 \u65f6\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u88ab Disable \u4e86\uff0c\u4e3a 1 \u65f6\u624d\u53ef\u4ee5\u5199\u5165\u8bfb\u51fa\uff08\u53d6\u51b3\u4e8e \\(Read/\\overline{Write}\\) \u4fe1\u53f7\uff09","title":"Cell and Slices"},{"location":"Logic/logic07/#cell-arrays-and-coincident-selection","text":"Decoder \uff0d decodes the \\(n\\) address lines to \\(2^n\\) word select lines \u5c06\u5bf9\u5e94\u5730\u5740\u4e0a\u7684 Cells \u7684 Bit Select \u4fe1\u53f7\u7f6e\u4e3a 1 \u5176\u4f59\u4e3a 0. A 3-state buffer on the data output permits RAM ICs to be combined into a RAM with \\(c \\times 2^n\\) words \u884c\u5217\u8bd1\u7801 Word select becomes Row select Bit select becomes Column select \\(8\\times 2\\) RAM","title":"Cell Arrays and Coincident Selection"},{"location":"Logic/logic07/#making-larger-memories","text":"\u5229\u7528 CS \u5f15\u811a\uff0c\u53ef\u4ee5\u5c06 RAM \u82af\u7247\u62fc\u8d77\u6765\u3002\uff08\u81ea\u6269\u5c55\uff0c\u5373\u8f93\u51fa\u7684\u5b57\u5bbd\u6ca1\u53d8\uff09 \u9ad8\u4f4d\u8f93\u5165\u7528\u6765\u9009\u62e9 RAM \u82af\u7247\uff08\u8f93\u51fa\u662f\u9ad8\u963b\u6001\uff09\uff0c\u4f4e\u4f4d\u8f93\u5165\u7528\u6765\u9009\u62e9\u5bf9\u5e94\u82af\u7247\u7684 Cell.","title":"Making Larger Memories"},{"location":"Logic/logic07/#making-wider-memories","text":"\u589e\u52a0\u4f4d\u5bbd\uff0c\u6bcf\u5757 RAM \u82af\u7247\u5c31\u4ee3\u8868\u6700\u540e\u8f93\u51fa\u7684\u67d0\u4e00\u4f4d\u3002","title":"Making Wider Memories"},{"location":"Logic/logic07/#dynamic-ram-dram","text":"Basic Principle: Storage of information on capacitors . Charge and discharge of capacitor to change stored value Use of transistor as \u201cswitch\u201d to: Store charge Charge or discharge \u6210\u672c\u4f4e\uff0c\u56e0\u6b64\u82af\u7247\u91cc\u53ef\u4ee5\u9ad8\u5bc6\u5ea6\u4f7f\u7528\u3002 \u5199\u6570\u636e\u65f6\u76f4\u63a5\u5145\u653e\u7535\u5373\u53ef\uff1b\u8bfb\u53d6\u65f6\uff0c\u9700\u8981\u6709\u7535\u8def\u5224\u65ad\u7535\u538b\u9ad8\u4f4e\uff0c\u8fd9\u65f6\u4f1a\u6d88\u8017\u7535\u8377,\u8981\u5c06\u7834\u574f\u6027\u8bfb\u8f6c\u4e3a\u975e\u7834\u574f\u6027\uff08\u5c06\u503c\u5199\u56de\u53bb\uff09","title":"Dynamic RAM (DRAM)"},{"location":"Logic/logic07/#cell-and-slices_1","text":"\u5c06\u6240\u6709\u7684 DRAM \u8f93\u51fa\u63a5\u5230 Sense Amplifier \u4e0a\uff0c\u53ef\u4ee5\u8ba9\u7834\u574f\u6027\u8bfb\u5165\u53d8\u4e3a\u975e\u7834\u574f\u6027\u8bfb\u5165\u3002 \u9700\u8981\u505a\u5b9a\u65f6\u5237\u65b0\uff08\u7535\u5bb9\u4f1a\u81ea\u5df1\u653e\u7535\uff09 - Refresh Controller and Refresh Counter \u5206\u522b\u8f93\u5165\u884c\u5730\u5740\u3001\u5217\u5730\u5740\uff08\u5b9e\u9645\u4e0a\u662f\u4e00\u7ec4\u5f15\u811a\uff0c\u53ea\u662f\u88ab DRAM \u5206\u5f00\u8f93\u5165\uff09\uff0c\u5bf9\u5e94 \\(\\overline{RAS},\\overline{CAS}\\) \uff08\u63a7\u5236\u5f15\u811a\uff0c\u544a\u8bc9\u82af\u7247\u73b0\u5728\u8f93\u5165\u7684\u662f\u884c/\u5217\u5730\u5740\uff09 DRAM \u662f\u540c\u6b65\u7684\uff0c\u4f9d\u8d56\u65f6\u949f\uff08SRAM \u662f\u5f02\u6b65\uff09 Read timing Write timing","title":"Cell and Slices"},{"location":"Logic/logic07/#dram-types","text":"Synchronous DRAM (SDRAM) Double Data Rate SDRAM (DDR SDRAM) RAMBUS\u00ae DRAM (RDRAM) DRAM \u5b58\u50a8\u91cf\u5927\uff0c\u4f46\u76f8\u5bf9 SRAM \u64cd\u4f5c\u4f1a\u6162\u5f88\u591a\uff08\u8fd8\u8981\u5206\u4e24\u4e2a\u5468\u671f\u5206\u522b\u63d0\u4f9b\u884c\u5730\u5740\u548c\u5217\u5730\u5740\uff09 Synchronous DRAM Transfers to and from the DRAM are synchronize with a clock Column address counter for addressing internal data to be transferred on each clock cycle beginning with the column address counts up to column address + burst size \u2013 1 \u4e00\u6b21\u53ef\u4ee5\u8bfb\u51fa\u591a\u4e2a\u6570\u636e Synchronous DRAM - burst size=4 \u548c SRAM \u914d\u5408\u5f62\u6210 cache Double Data Rate Synchronous DRAM Transfers data on both edges of the clock Provides a transfer rate of 2 data words per clock cycle RAMBUS DRAM (RDRAM) Uses a packet-based bus for interaction between the RDRAM ICs and the memory bus to the processor The bus consists of: A 3-bit row address bus A 5-bit column address bus A 16 or 18-bit (for error correction) data bus","title":"DRAM Types"},{"location":"MLT/mlt2/","text":"\u611f\u77e5\u673a \u00b6 \u611f\u77e5\u673a\u662f\u4e8c\u7c7b\u5206\u7c7b\u7684\u7ebf\u6027\u5206\u7c7b\u6a21\u578b\u3002\u5c06\u8f93\u5165\u5411\u91cf\u5212\u5206\u4e3a\u6b63\u8d1f\u4e24\u7c7b\u7684\u5206\u79bb\u8d85\u5e73\u9762\uff0c\u5c5e\u4e8e\u5224\u522b\u6a21\u578b\u3002 \u611f\u77e5\u673a\u6a21\u578b \u00b6 \u5b9a\u4e49 \uff08 \u611f\u77e5\u673a \uff09\uff1a\u5047\u8bbe\u8f93\u5165\u7a7a\u95f4\uff08\u7279\u5f81\u7a7a\u95f4\uff09\u662f \\(\\mathcal{X}\\subseteq \\mathbf{R}^n\\) , \u8f93\u51fa\u7a7a\u95f4\u662f \\(\\mathcal{Y}=\\{+1,-1\\}.\\) \u8f93\u5165 \\(x\\in \\mathcal{X}\\) \u8868\u793a\u5b9e\u4f8b\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u4e8e\u8f93\u5165\u7a7a\u95f4\uff08\u7279\u5f81\u7a7a\u95f4\uff09\u7684\u70b9\uff0c\u8f93\u51fa \\(y\\in \\mathcal{Y}\\) \u8868\u793a\u5b9e\u4f8b\u7684\u7c7b\u522b\u3002\u7531\u8f93\u5165\u7a7a\u95f4\u5230\u8f93\u51fa\u7a7a\u95f4\u7684\u51fd\u6570 \\(f(x)=sign(w\\cdot x+b)\\) \u79f0\u4e3a \u611f\u77e5\u673a \u3002 \u5176\u4e2d \\(w,b\\) \u79f0\u4e3a \u611f\u77e5\u673a\u6a21\u578b\u53c2\u6570 , \\(w\\in \\mathbf{R}^n\\) \u79f0\u4e3a \u6743\u503c \u6216\u8005 \u6743\u503c\u5411\u91cf , \\(b\\in \\mathbf{R}\\) \u53eb\u505a \u504f\u7f6e . \\(w\\cdot x\\) \u8868\u793a\u5185\u79ef, \\(sign(x)=\\left\\{\\begin{matrix}+1,x\\geq 0\\\\ -1, x<0\\end{matrix}\\right.\\) \u51e0\u4f55\u89e3\u91ca: \u7ebf\u6027\u65b9\u7a0b \\(w\\cdot x + b=0\\) \u5bf9\u5e94\u7279\u5f81\u7a7a\u95f4 \\(\\mathbf{R}^n\\) \u4e2d\u7684\u4e00\u4e2a\u8d85\u5e73\u9762 \\(S\\) , \u5176\u4e2d \\(w\\) \u662f\u8d85\u5e73\u9762\u7684\u6cd5\u5411\u91cf, \\(b\\) \u662f\u8d85\u5e73\u9762\u7684\u622a\u8ddd\u3002 \u611f\u77e5\u673a\u6a21\u578b\u5c31\u662f\u8981\u6c42\u8fd9\u6837\u7684\u8d85\u5e73\u9762, \u5373\u6c42 \\(\\vec w, \\vec b\\) . \u611f\u77e5\u673a\u5b66\u4e60\u7b56\u7565 \u00b6 \u5b9a\u4e49 \uff1a\uff08 \u6570\u636e\u96c6\u7684\u7ebf\u6027\u53ef\u5206\u6027 \uff09\u7ed9\u5b9a\u4e00\u4e2a\u6570\u636e\u96c6 \\(T=\\{(x_1,y_1),(x_2,y_2),\\ldots,(x_N, y_N)\\}\\) \u5176\u4e2d \\(x_i\\in \\mathcal{X}=\\mathcal{R}^n, y_i\\in \\mathcal{Y}=\\{+1,-1\\},i =1,2,\\cdots,N\\) \u5982\u679c\u5b58\u5728\u67d0\u4e2a\u8d85\u5e73\u9762 \\(S\\) \u80fd\u591f\u5c06\u6570\u636e\u96c6\u7684\u6b63\u5b9e\u4f8b\u70b9\u548c\u8d1f\u5b9e\u4f8b\u70b9\u5b8c\u5168\u6b63\u786e\u5730\u5206\u5230\u8d85\u5e73\u9762\u7684 \u4e24\u4fa7 \uff0c\u5373\u5bf9\u6240\u6709 \\(y_i=+1\\) \u7684\u5b9e\u4f8b \\(i\\) \u6709 \\(w\\cdot x_i + b >0\\) \uff0c\u5bf9\u6240\u6709 \\(y_i=-1\\) \u7684\u5b9e\u4f8b \\(i\\) \u6709 \\(w\\cdot x_i + b <0\\) , \u5219\u79f0\u6570\u636e\u96c6 \\(T\\) \u4e3a \u7ebf\u6027\u53ef\u5206\u6570\u636e\u96c6 \u3002 Note \u6ce8\u610f\u8fd9\u91cc\u662f\u5206\u5230\u8d85\u5e73\u9762\u7684\u4e24\u4fa7\uff0c\u6ca1\u6709\u70b9\u5728\u5e73\u9762\u4e0a\u3002\u8fd9\u4e0e\u524d\u9762 \\(sign(x)\\) \u7684\u5b9a\u4e49\u7565\u6709\u4e0d\u540c\u3002 \\((x_i,y_i)\\) \u8fd9\u91cc \\(x_i\\) \u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u5750\u6807; \\(y_i\\) \u8868\u793a\u8fd9\u4e2a\u5411\u91cf\u7684\u6807\u7b7e\u3002 \u635f\u5931\u51fd\u6570 \u81ea\u7136\u9009\u62e9\uff1a\u8bef\u5206\u7c7b\u70b9\u7684\u6570\u76ee\uff0c\u4f46\u8fd9\u6837\u7684\u635f\u5931\u51fd\u6570\u4e0d\u662f\u53c2\u6570 \\(w,b\\) \u7684\u8fde\u7eed\u53ef\u5bfc\u51fd\u6570\uff0c\u4e0d\u6613\u4f18\u5316\u3002 \u53e6\u4e00\u9009\u62e9\uff1a\u8bef\u5206\u7c7b\u70b9\u5230\u8d85\u5e73\u9762 \\(S\\) \u7684\u603b\u8ddd\u79bb \u70b9 \\((x_0,y_0)\\) \u5230\u8d85\u5e73\u9762 \\(\\vec w\\cdot \\vec x+b=0\\) \u7684\u8ddd\u79bb: \\(\\dfrac{1}{||w||}|\\vec w\\cdot \\vec x_0+b|\\) \u8bef\u5206\u7c7b\u70b9: \\(-y_i(\\vec w\\cdot \\vec x_i+b) >0\\) \u8bef\u5206\u7c7b\u70b9\u5230\u8d85\u5e73\u9762\u7684\u8ddd\u79bb: \\(-\\dfrac{1}{||w||}y_i(\\vec w\\cdot \\vec x_i+b)\\) \u8bbe\u8d85\u5e73\u9762 \\(S\\) \u7684\u8bef\u5206\u7c7b\u70b9\u96c6\u5408\u4e3a \\(M\\) , \u5219\u8bef\u5206\u7c7b\u70b9\u5230\u8d85\u5e73\u9762 \\(S\\) \u7684\u603b\u8ddd\u79bb: \\(-\\dfrac{1}{||w||}\\sum\\limits_{x_i\\in M}y_i(\\vec w\\cdot \\vec x_i +b)\\) \u4e0d\u8003\u8651 \\(\\dfrac{1}{||w||}\\) \u5c31\u5f97\u5230\u4e86\u611f\u77e5\u673a\u5b66\u4e60\u7684 \u635f\u5931\u51fd\u6570 \u3002 \u5373 \\(L(\\vec w,b)=-\\sum\\limits_{x_i\\in M}y_i(\\vec w\\cdot \\vec x_i+b)\\) \u635f\u5931\u51fd\u6570 \\(L(\\vec w,b)\\) \u662f\u975e\u8d1f\u7684\uff0c\u5982\u679c\u6ca1\u6709\u8bef\u5206\u7c7b\u70b9\uff0c\u635f\u5931\u51fd\u6570\u503c\u4e3a \\(0\\) . \u8bef\u5206\u7c7b\u70b9\u8d8a\u5c11\uff0c\u8bef\u5206\u7c7b\u70b9\u79bb\u8d85\u5e73\u9762\u8d8a\u8fd1\uff0c\u635f\u5931\u51fd\u6570\u503c\u8d8a\u5c0f\u3002\u7ed9\u5b9a\u8bad\u7ec3\u6570\u636e\u96c6 \\(T\\) , \\(L(\\vec w,b)\\) \u662f \\(\\vec w, b\\) \u7684\u8fde\u7eed\u53ef\u5bfc\u51fd\u6570\u3002 \u611f\u77e5\u673a\u5b66\u4e60\u7b97\u6cd5 \u00b6 \u539f\u59cb\u5f62\u5f0f \u00b6 \u6c42\u89e3\u6700\u4f18\u5316\u95ee\u9898 \\(\\min\\limits_{\\vec w,b} L(\\vec w,b) = -\\sum\\limits_{x_i\\in M}y_i(\\vec w\\cdot \\vec x_i +b)\\) \u91c7\u7528 \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (Stochastic Gradient Descent, SGD) \u4f18\u5316 \u9996\u5148\u9009\u62e9\u4e00\u4e2a\u8d85\u5e73\u9762 \\(\\vec w_0,b_0\\) \u7136\u540e\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\u4e0d\u65ad\u5730\u6781\u5c0f\u5316\u76ee\u6807\u51fd\u6570\u3002 \u5047\u8bbe\u8bef\u5206\u7c7b\u70b9\u96c6\u5408 \\(M\\) \u662f\u56fa\u5b9a\u7684\uff0c\u5219\u635f\u5931\u51fd\u6570 \\(L(\\vec w,b)\\) \u7684\u68af\u5ea6\u6709 \\[ \\begin{align*} \\nabla_w L(\\vec w,b) &= -\\sum\\limits_{\\vec x_i\\in M} y_i\\vec x_i\\\\ \\nabla_b L(\\vec w,b) &= -\\sum\\limits_{\\vec x_i\\in M}y_i \\end{align*} \\] \u968f\u673a\u9009\u4e00\u4e2a\u8bef\u5206\u7c7b\u70b9 \\((\\vec x_i,y_i)\\) , \u5bf9 \\(\\vec w,b\\) \u8fdb\u884c\u66f4\u65b0 \u5176\u4e2d \\(0<\\eta\\leq 1\\) \u662f\u6b65\u957f\uff0c\u53c8\u79f0\u4e3a\u5b66\u4e60\u7387\u3002 \\[ \\begin{align*} \\vec w & \\leftarrow \\vec w + \\eta y_x\\vec x_i\\\\ b & \\leftarrow b + \\eta y_i \\end{align*} \\] \u901a\u8fc7\u8fd9\u6837\u8fed\u4ee3\uff0c\u671f\u5f85\u635f\u5931\u51fd\u6570 \\(L(\\vec w,b)\\) \u4e0d\u65ad\u51cf\u5c0f\uff0c\u76f4\u5230\u4e3a \\(0\\) . \u968f\u673a\u68af\u5ea6\u4e0b\u964d \\(VS\\) \u68af\u5ea6\u4e0b\u964d\u6cd5 \\(\\min\\dfrac{1}{2m}\\sum\\limits_{i=1}^m(<\\vec w,\\vec x_i>-y_i)^2\\ \\stackrel{\\Delta}{=} F(\\vec w)\\) \\(\\nabla_w F(w)=\\dfrac{1}{m}\\sum\\limits_{i=1}^m(<\\vec w,\\vec x_i>-b)\\cdot x_i\\) GD: \\(w_{t+1}=w_t-\\eta_t\\nabla_w F(w_t)\\) SGD: \\(w_{t-1}=w_t-\\eta_t(<\\vec w_t,\\vec x_{it}>-y_{it})\\cdot \\vec x_{it}\\) \u68af\u5ea6\u4e0b\u964d\u6cd5\u8981\u6c42\u6837\u672c\u68af\u5ea6\u7684\u5e73\u5747\u503c\uff0c\u800c\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\u53ea\u9700\u8981\u4efb\u4e00\u53d6\u4e00\u4e2a\u6837\u672c\u68af\u5ea6\u5373\u53ef\u3002\u540c\u65f6\u5e73\u5747\u503c\u7684\u671f\u671b\u548c\u548c\u5355\u4e2a\u6837\u672c\u7684\u671f\u671b\u76f8\u540c\u3002 \u5728\u8fd9\u4e2a\u7b97\u6cd5\u6211\u4eec\u5e94\u7528\u4e86\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\uff0c\u4e3a\u4e86\u7b80\u5316\uff0c\u6211\u4eec\u76f4\u63a5\u7528\u7b2c\u4e00\u4e2a\u8bef\u5206\u7c7b\u7684\u70b9\u4f5c\u4e3a\u968f\u673a\u9009\u62e9\u7684\u70b9\uff0c\u5e76\u7531\u6b64\u66f4\u65b0 \\(\\vec w, b\\) . \u7b97\u6cd5 \uff1a\uff08\u611f\u77e5\u673a\u5b66\u4e60\u7b97\u6cd5\u7684\u539f\u59cb\u5f62\u5f0f\uff09 \u8f93\u5165 \uff1a\u8bad\u7ec3\u6570\u636e\u96c6 \\(T=\\{(x_1,y_1),(x_2,y_2),\\ldots,(x_N, y_N)\\}\\) \u5176\u4e2d \\(x_i\\in \\mathcal{X}=\\mathcal{R}^n, y_i\\in \\mathcal{Y}=\\{+1,-1\\},i =1,2,\\cdots,N\\) . \u5b66\u4e60\u7387 \\(0<\\eta\\leq 1\\) . \u8f93\u51fa : \\(\\vec w, b\\) ; \u611f\u77e5\u673a\u6a21\u578b \\(f(x)=sign(\\vec w\\cdot \\vec x + b)\\) \u9009\u53d6\u521d\u503c \\(\\vec w_0,b_0\\) \u5728\u8bad\u7ec3\u96c6\u4e2d\u9009\u53d6\u6570\u636e \\((\\vec x_i,y_i)\\) \u5982\u679c \\(y_i(\\vec w\\cdot \\vec x_i + b)\\leq 0\\) , \u5219 \\[ \\begin{align*} \\vec w & \\leftarrow \\vec w + \\eta y_x\\vec x_i\\\\ b & \\leftarrow b + \\eta y_i \\end{align*} \\] \u8f6c\u81f3 2, \u76f4\u81f3\u8bad\u7ec3\u96c6\u4e2d\u6ca1\u6709\u8bef\u5206\u7c7b\u70b9\u3002 Example \u6b63\u4f8b \\(x_1=(3,3)^\\top, x_2=(4,3)^\\top\\) \u8d1f\u4f8b \\(x_3=(1,1)^\\top\\) . \u7b97\u6cd5\u7684\u6536\u655b\u6027 \u00b6 \u4e3a\u4fbf\u4e8e\u63a8\u5bfc\uff0c\u5c06\u504f\u7f6e \\(b\\) \u5e76\u5165\u6743\u503c\u5411\u91cf \\(\\vec w\\) , \u8bb0\u4f5c \\(\\hat w=(w^\\top, b)^\\top\\) , \u8f93\u5165\u5411\u91cf\u4e5f\u505a\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5373 \\(\\hat x=(x^\\top,1)^\\top\\) . \u8fd9\u6837 \\(\\hat w, \\hat x\\in \\mathcal{R}^n, \\hat w\\cdot \\hat x = w\\cdot x + b\\) . \u5b9a\u7406\uff1a\u5bf9\u4e8e\u8bad\u7ec3\u6570\u636e\u96c6 \\(T\\) \uff08\u5b9a\u4e49\u540c\u524d\uff09 \u5b58\u5728\u6ee1\u8db3\u6761\u4ef6 \\(||\\hat w_{opt}|| = 1\\) \u7684\u8d85\u5e73\u9762\u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u5b8c\u5168\u6b63\u786e\u5206\u5f00\uff1b\u4e14\u5b58\u5728 \\(\\gamma>0\\) \u5bf9\u6240\u6709 \\(i=1,2,\\cdots, N\\) \u4f7f\u5f97 $y_i(\\hat w_{opt} \\cdot \\hat x_i)=y_i(w_{opt} \\cdot x_i + b_{opt}) \\geq \\gamma $ \u4ee4 \\(R=\\max\\limits_{1\\leq i\\leq N}||\\hat x_i||\\) , \u5219\u611f\u77e5\u673a\u7b97\u6cd5\u5728\u8bad\u7ec3\u6570\u636e\u96c6\u4e0a\u7684\u8bef\u5206\u7c7b\u6b21\u6570 \\(k\\) \u6ee1\u8db3 \\(k\\leq \\left(\\dfrac{R}{\\gamma}\\right)^2\\) \u8bef\u5206\u7c7b\u6b21\u6570 \\(k\\) \u662f\u6709\u4e0a\u754c\u7684\uff0c\u5f53\u8bad\u7ec3\u96c6\u7ebf\u6027\u53ef\u5206\u65f6\uff0c\u7b97\u6cd5\u539f\u59cb\u5f62\u5f0f\u662f\u6536\u655b\u7684\u3002 \u7b97\u6cd5\u89e3\u4e0d\u552f\u4e00\uff0c\u65e2\u4f9d\u8d56\u4e8e\u521d\u503c\uff0c\u4e5f\u4f9d\u8d56\u4e8e\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u9009\u62e9\u8bef\u5206\u7c7b\u70b9\u7684\u9009\u62e9\u987a\u5e8f\u3002 \u82e5\u9700\u8981\u552f\u4e00\u5206\u79bb\u8d85\u5e73\u9762\uff0c\u9700\u8981\u589e\u52a0\u7ea6\u675f\uff0c\u5982 SVM (\u652f\u6301\u5411\u91cf\u673a) \u7ebf\u6027\u4e0d\u53ef\u5206\u6570\u636e\u96c6\u4e0a\uff0c\u7ed3\u679c\u4e0d\u6536\u655b\uff0c\u8fed\u4ee3\u9707\u52a8\u3002 \u5bf9\u5076\u5f62\u5f0f \u00b6 \u57fa\u672c\u60f3\u6cd5 \uff1a\u5c06 \\(\\vec w, b\\) \u8868\u793a\u4e3a\u5b9e\u4f8b \\(\\vec x_i\\) \u548c\u6807\u8bb0 \\(y_i\\) \u7684\u7ebf\u6027\u7ec4\u5408\u5f62\u5f0f\uff0c\u901a\u8fc7\u6c42\u89e3\u5176\u7cfb\u6570\u800c\u6c42\u5f97 \\(\\vec w\\) \u548c \\(b\\) . \u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe \\(\\vec w,b\\) \u5173\u4e8e \\((\\vec x_i,y_i)\\) \u7684\u589e\u91cf\u662f \\(\\alpha_i y_i \\vec x_i\\) \u548c \\(\\alpha_i y_i\\) , \u90a3\u4e48\u6700\u540e\u5b66\u4e60\u5230\u7684 \\(\\vec w=\\sum\\limits_{i=1}^N\\alpha_i y_i \\vec x_i, b=\\sum\\limits_{i=1}^N \\alpha_i y_i\\) . \u8fd9\u91cc \\(\\alpha_i\\geq 0\\) , \u5f53 \\(\\eta= 1\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u5b9e\u4f8b\u70b9\u7531\u4e8e\u8bef\u5206\u800c\u8fdb\u884c\u66f4\u65b0\u7684\u6b21\u6570\u3002 \u7b97\u6cd5 \uff1a\uff08 \u611f\u77e5\u673a\u5b66\u4e60\u7b97\u6cd5\u7684\u5bf9\u5076\u5f62\u5f0f \uff09 \u8f93\u5165 \uff1a\u8bad\u7ec3\u6570\u636e\u96c6 \\(T=\\{(x_1,y_1),(x_2,y_2),\\ldots,(x_N, y_N)\\}\\) \u5176\u4e2d \\(x_i\\in \\mathcal{X}=\\mathcal{R}^n, y_i\\in \\mathcal{Y}=\\{+1,-1\\},i =1,2,\\cdots,N\\) . \u5b66\u4e60\u7387 \\(0<\\eta\\leq 1\\) . \u8f93\u51fa : \\(\\vec alpha, b\\) ; \u611f\u77e5\u673a\u6a21\u578b \\(f(x)=sign\\left(\\sum\\limits_{j=1}^N \\alpha_j y_j \\vec x_j\\cdot \\vec x + b\\right)\\) , \u5176\u4e2d \\(\\alpha=(\\alpha_1,\\alpha_2,\\cdots,\\alpha_N)^\\top\\) . \\(\\vec \\alpha \\leftarrow 0 ,b \\leftarrow 0\\) \u5728\u8bad\u7ec3\u96c6\u4e2d\u9009\u53d6\u6570\u636e \\((\\vec x_i,y_i)\\) \u5982\u679c \\(y_i\\left(\\sum\\limits_{j=1}^N \\alpha_j y_j \\vec x_j\\cdot \\vec x_i + b\\right)\\leq 0\\) , \u5219 \\[ \\begin{align*} \\alpha_i & \\leftarrow \\alpha_i + \\eta \\\\ b & \\leftarrow b + \\eta y_i \\end{align*} \\] \u8f6c\u81f3 2, \u76f4\u81f3\u8bad\u7ec3\u96c6\u4e2d\u6ca1\u6709\u8bef\u5206\u7c7b\u70b9\u3002 \u8fd9\u91cc\u5bf9\u5076\u5f62\u5f0f\u7684\u8bad\u7ec3\u5b9e\u4f8b\u53ea\u4ee5\u5185\u79ef\u5f62\u5f0f\u51fa\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5148\u5c06\u8bad\u7ec3\u96c6\u4e2d\u7684\u5b9e\u4f8b\u95f4\u7684\u5185\u79ef\u8ba1\u7b97\u51fa\u6765\u5e76\u4ee5\u77e9\u9635\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u5373 Gram \u77e9\u9635 \\(\\mathbf{G}=[x_i\\cdot x_j]_{N\\times N}\\) Example","title":"\u611f\u77e5\u673a"},{"location":"MLT/mlt2/#_1","text":"\u611f\u77e5\u673a\u662f\u4e8c\u7c7b\u5206\u7c7b\u7684\u7ebf\u6027\u5206\u7c7b\u6a21\u578b\u3002\u5c06\u8f93\u5165\u5411\u91cf\u5212\u5206\u4e3a\u6b63\u8d1f\u4e24\u7c7b\u7684\u5206\u79bb\u8d85\u5e73\u9762\uff0c\u5c5e\u4e8e\u5224\u522b\u6a21\u578b\u3002","title":"\u611f\u77e5\u673a"},{"location":"MLT/mlt2/#_2","text":"\u5b9a\u4e49 \uff08 \u611f\u77e5\u673a \uff09\uff1a\u5047\u8bbe\u8f93\u5165\u7a7a\u95f4\uff08\u7279\u5f81\u7a7a\u95f4\uff09\u662f \\(\\mathcal{X}\\subseteq \\mathbf{R}^n\\) , \u8f93\u51fa\u7a7a\u95f4\u662f \\(\\mathcal{Y}=\\{+1,-1\\}.\\) \u8f93\u5165 \\(x\\in \\mathcal{X}\\) \u8868\u793a\u5b9e\u4f8b\u7684\u7279\u5f81\u5411\u91cf\uff0c\u5bf9\u5e94\u4e8e\u8f93\u5165\u7a7a\u95f4\uff08\u7279\u5f81\u7a7a\u95f4\uff09\u7684\u70b9\uff0c\u8f93\u51fa \\(y\\in \\mathcal{Y}\\) \u8868\u793a\u5b9e\u4f8b\u7684\u7c7b\u522b\u3002\u7531\u8f93\u5165\u7a7a\u95f4\u5230\u8f93\u51fa\u7a7a\u95f4\u7684\u51fd\u6570 \\(f(x)=sign(w\\cdot x+b)\\) \u79f0\u4e3a \u611f\u77e5\u673a \u3002 \u5176\u4e2d \\(w,b\\) \u79f0\u4e3a \u611f\u77e5\u673a\u6a21\u578b\u53c2\u6570 , \\(w\\in \\mathbf{R}^n\\) \u79f0\u4e3a \u6743\u503c \u6216\u8005 \u6743\u503c\u5411\u91cf , \\(b\\in \\mathbf{R}\\) \u53eb\u505a \u504f\u7f6e . \\(w\\cdot x\\) \u8868\u793a\u5185\u79ef, \\(sign(x)=\\left\\{\\begin{matrix}+1,x\\geq 0\\\\ -1, x<0\\end{matrix}\\right.\\) \u51e0\u4f55\u89e3\u91ca: \u7ebf\u6027\u65b9\u7a0b \\(w\\cdot x + b=0\\) \u5bf9\u5e94\u7279\u5f81\u7a7a\u95f4 \\(\\mathbf{R}^n\\) \u4e2d\u7684\u4e00\u4e2a\u8d85\u5e73\u9762 \\(S\\) , \u5176\u4e2d \\(w\\) \u662f\u8d85\u5e73\u9762\u7684\u6cd5\u5411\u91cf, \\(b\\) \u662f\u8d85\u5e73\u9762\u7684\u622a\u8ddd\u3002 \u611f\u77e5\u673a\u6a21\u578b\u5c31\u662f\u8981\u6c42\u8fd9\u6837\u7684\u8d85\u5e73\u9762, \u5373\u6c42 \\(\\vec w, \\vec b\\) .","title":"\u611f\u77e5\u673a\u6a21\u578b"},{"location":"MLT/mlt2/#_3","text":"\u5b9a\u4e49 \uff1a\uff08 \u6570\u636e\u96c6\u7684\u7ebf\u6027\u53ef\u5206\u6027 \uff09\u7ed9\u5b9a\u4e00\u4e2a\u6570\u636e\u96c6 \\(T=\\{(x_1,y_1),(x_2,y_2),\\ldots,(x_N, y_N)\\}\\) \u5176\u4e2d \\(x_i\\in \\mathcal{X}=\\mathcal{R}^n, y_i\\in \\mathcal{Y}=\\{+1,-1\\},i =1,2,\\cdots,N\\) \u5982\u679c\u5b58\u5728\u67d0\u4e2a\u8d85\u5e73\u9762 \\(S\\) \u80fd\u591f\u5c06\u6570\u636e\u96c6\u7684\u6b63\u5b9e\u4f8b\u70b9\u548c\u8d1f\u5b9e\u4f8b\u70b9\u5b8c\u5168\u6b63\u786e\u5730\u5206\u5230\u8d85\u5e73\u9762\u7684 \u4e24\u4fa7 \uff0c\u5373\u5bf9\u6240\u6709 \\(y_i=+1\\) \u7684\u5b9e\u4f8b \\(i\\) \u6709 \\(w\\cdot x_i + b >0\\) \uff0c\u5bf9\u6240\u6709 \\(y_i=-1\\) \u7684\u5b9e\u4f8b \\(i\\) \u6709 \\(w\\cdot x_i + b <0\\) , \u5219\u79f0\u6570\u636e\u96c6 \\(T\\) \u4e3a \u7ebf\u6027\u53ef\u5206\u6570\u636e\u96c6 \u3002 Note \u6ce8\u610f\u8fd9\u91cc\u662f\u5206\u5230\u8d85\u5e73\u9762\u7684\u4e24\u4fa7\uff0c\u6ca1\u6709\u70b9\u5728\u5e73\u9762\u4e0a\u3002\u8fd9\u4e0e\u524d\u9762 \\(sign(x)\\) \u7684\u5b9a\u4e49\u7565\u6709\u4e0d\u540c\u3002 \\((x_i,y_i)\\) \u8fd9\u91cc \\(x_i\\) \u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u5750\u6807; \\(y_i\\) \u8868\u793a\u8fd9\u4e2a\u5411\u91cf\u7684\u6807\u7b7e\u3002 \u635f\u5931\u51fd\u6570 \u81ea\u7136\u9009\u62e9\uff1a\u8bef\u5206\u7c7b\u70b9\u7684\u6570\u76ee\uff0c\u4f46\u8fd9\u6837\u7684\u635f\u5931\u51fd\u6570\u4e0d\u662f\u53c2\u6570 \\(w,b\\) \u7684\u8fde\u7eed\u53ef\u5bfc\u51fd\u6570\uff0c\u4e0d\u6613\u4f18\u5316\u3002 \u53e6\u4e00\u9009\u62e9\uff1a\u8bef\u5206\u7c7b\u70b9\u5230\u8d85\u5e73\u9762 \\(S\\) \u7684\u603b\u8ddd\u79bb \u70b9 \\((x_0,y_0)\\) \u5230\u8d85\u5e73\u9762 \\(\\vec w\\cdot \\vec x+b=0\\) \u7684\u8ddd\u79bb: \\(\\dfrac{1}{||w||}|\\vec w\\cdot \\vec x_0+b|\\) \u8bef\u5206\u7c7b\u70b9: \\(-y_i(\\vec w\\cdot \\vec x_i+b) >0\\) \u8bef\u5206\u7c7b\u70b9\u5230\u8d85\u5e73\u9762\u7684\u8ddd\u79bb: \\(-\\dfrac{1}{||w||}y_i(\\vec w\\cdot \\vec x_i+b)\\) \u8bbe\u8d85\u5e73\u9762 \\(S\\) \u7684\u8bef\u5206\u7c7b\u70b9\u96c6\u5408\u4e3a \\(M\\) , \u5219\u8bef\u5206\u7c7b\u70b9\u5230\u8d85\u5e73\u9762 \\(S\\) \u7684\u603b\u8ddd\u79bb: \\(-\\dfrac{1}{||w||}\\sum\\limits_{x_i\\in M}y_i(\\vec w\\cdot \\vec x_i +b)\\) \u4e0d\u8003\u8651 \\(\\dfrac{1}{||w||}\\) \u5c31\u5f97\u5230\u4e86\u611f\u77e5\u673a\u5b66\u4e60\u7684 \u635f\u5931\u51fd\u6570 \u3002 \u5373 \\(L(\\vec w,b)=-\\sum\\limits_{x_i\\in M}y_i(\\vec w\\cdot \\vec x_i+b)\\) \u635f\u5931\u51fd\u6570 \\(L(\\vec w,b)\\) \u662f\u975e\u8d1f\u7684\uff0c\u5982\u679c\u6ca1\u6709\u8bef\u5206\u7c7b\u70b9\uff0c\u635f\u5931\u51fd\u6570\u503c\u4e3a \\(0\\) . \u8bef\u5206\u7c7b\u70b9\u8d8a\u5c11\uff0c\u8bef\u5206\u7c7b\u70b9\u79bb\u8d85\u5e73\u9762\u8d8a\u8fd1\uff0c\u635f\u5931\u51fd\u6570\u503c\u8d8a\u5c0f\u3002\u7ed9\u5b9a\u8bad\u7ec3\u6570\u636e\u96c6 \\(T\\) , \\(L(\\vec w,b)\\) \u662f \\(\\vec w, b\\) \u7684\u8fde\u7eed\u53ef\u5bfc\u51fd\u6570\u3002","title":"\u611f\u77e5\u673a\u5b66\u4e60\u7b56\u7565"},{"location":"MLT/mlt2/#_4","text":"","title":"\u611f\u77e5\u673a\u5b66\u4e60\u7b97\u6cd5"},{"location":"MLT/mlt2/#_5","text":"\u6c42\u89e3\u6700\u4f18\u5316\u95ee\u9898 \\(\\min\\limits_{\\vec w,b} L(\\vec w,b) = -\\sum\\limits_{x_i\\in M}y_i(\\vec w\\cdot \\vec x_i +b)\\) \u91c7\u7528 \u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5 (Stochastic Gradient Descent, SGD) \u4f18\u5316 \u9996\u5148\u9009\u62e9\u4e00\u4e2a\u8d85\u5e73\u9762 \\(\\vec w_0,b_0\\) \u7136\u540e\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\u4e0d\u65ad\u5730\u6781\u5c0f\u5316\u76ee\u6807\u51fd\u6570\u3002 \u5047\u8bbe\u8bef\u5206\u7c7b\u70b9\u96c6\u5408 \\(M\\) \u662f\u56fa\u5b9a\u7684\uff0c\u5219\u635f\u5931\u51fd\u6570 \\(L(\\vec w,b)\\) \u7684\u68af\u5ea6\u6709 \\[ \\begin{align*} \\nabla_w L(\\vec w,b) &= -\\sum\\limits_{\\vec x_i\\in M} y_i\\vec x_i\\\\ \\nabla_b L(\\vec w,b) &= -\\sum\\limits_{\\vec x_i\\in M}y_i \\end{align*} \\] \u968f\u673a\u9009\u4e00\u4e2a\u8bef\u5206\u7c7b\u70b9 \\((\\vec x_i,y_i)\\) , \u5bf9 \\(\\vec w,b\\) \u8fdb\u884c\u66f4\u65b0 \u5176\u4e2d \\(0<\\eta\\leq 1\\) \u662f\u6b65\u957f\uff0c\u53c8\u79f0\u4e3a\u5b66\u4e60\u7387\u3002 \\[ \\begin{align*} \\vec w & \\leftarrow \\vec w + \\eta y_x\\vec x_i\\\\ b & \\leftarrow b + \\eta y_i \\end{align*} \\] \u901a\u8fc7\u8fd9\u6837\u8fed\u4ee3\uff0c\u671f\u5f85\u635f\u5931\u51fd\u6570 \\(L(\\vec w,b)\\) \u4e0d\u65ad\u51cf\u5c0f\uff0c\u76f4\u5230\u4e3a \\(0\\) . \u968f\u673a\u68af\u5ea6\u4e0b\u964d \\(VS\\) \u68af\u5ea6\u4e0b\u964d\u6cd5 \\(\\min\\dfrac{1}{2m}\\sum\\limits_{i=1}^m(<\\vec w,\\vec x_i>-y_i)^2\\ \\stackrel{\\Delta}{=} F(\\vec w)\\) \\(\\nabla_w F(w)=\\dfrac{1}{m}\\sum\\limits_{i=1}^m(<\\vec w,\\vec x_i>-b)\\cdot x_i\\) GD: \\(w_{t+1}=w_t-\\eta_t\\nabla_w F(w_t)\\) SGD: \\(w_{t-1}=w_t-\\eta_t(<\\vec w_t,\\vec x_{it}>-y_{it})\\cdot \\vec x_{it}\\) \u68af\u5ea6\u4e0b\u964d\u6cd5\u8981\u6c42\u6837\u672c\u68af\u5ea6\u7684\u5e73\u5747\u503c\uff0c\u800c\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\u53ea\u9700\u8981\u4efb\u4e00\u53d6\u4e00\u4e2a\u6837\u672c\u68af\u5ea6\u5373\u53ef\u3002\u540c\u65f6\u5e73\u5747\u503c\u7684\u671f\u671b\u548c\u548c\u5355\u4e2a\u6837\u672c\u7684\u671f\u671b\u76f8\u540c\u3002 \u5728\u8fd9\u4e2a\u7b97\u6cd5\u6211\u4eec\u5e94\u7528\u4e86\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u6cd5\uff0c\u4e3a\u4e86\u7b80\u5316\uff0c\u6211\u4eec\u76f4\u63a5\u7528\u7b2c\u4e00\u4e2a\u8bef\u5206\u7c7b\u7684\u70b9\u4f5c\u4e3a\u968f\u673a\u9009\u62e9\u7684\u70b9\uff0c\u5e76\u7531\u6b64\u66f4\u65b0 \\(\\vec w, b\\) . \u7b97\u6cd5 \uff1a\uff08\u611f\u77e5\u673a\u5b66\u4e60\u7b97\u6cd5\u7684\u539f\u59cb\u5f62\u5f0f\uff09 \u8f93\u5165 \uff1a\u8bad\u7ec3\u6570\u636e\u96c6 \\(T=\\{(x_1,y_1),(x_2,y_2),\\ldots,(x_N, y_N)\\}\\) \u5176\u4e2d \\(x_i\\in \\mathcal{X}=\\mathcal{R}^n, y_i\\in \\mathcal{Y}=\\{+1,-1\\},i =1,2,\\cdots,N\\) . \u5b66\u4e60\u7387 \\(0<\\eta\\leq 1\\) . \u8f93\u51fa : \\(\\vec w, b\\) ; \u611f\u77e5\u673a\u6a21\u578b \\(f(x)=sign(\\vec w\\cdot \\vec x + b)\\) \u9009\u53d6\u521d\u503c \\(\\vec w_0,b_0\\) \u5728\u8bad\u7ec3\u96c6\u4e2d\u9009\u53d6\u6570\u636e \\((\\vec x_i,y_i)\\) \u5982\u679c \\(y_i(\\vec w\\cdot \\vec x_i + b)\\leq 0\\) , \u5219 \\[ \\begin{align*} \\vec w & \\leftarrow \\vec w + \\eta y_x\\vec x_i\\\\ b & \\leftarrow b + \\eta y_i \\end{align*} \\] \u8f6c\u81f3 2, \u76f4\u81f3\u8bad\u7ec3\u96c6\u4e2d\u6ca1\u6709\u8bef\u5206\u7c7b\u70b9\u3002 Example \u6b63\u4f8b \\(x_1=(3,3)^\\top, x_2=(4,3)^\\top\\) \u8d1f\u4f8b \\(x_3=(1,1)^\\top\\) .","title":"\u539f\u59cb\u5f62\u5f0f"},{"location":"MLT/mlt2/#_6","text":"\u4e3a\u4fbf\u4e8e\u63a8\u5bfc\uff0c\u5c06\u504f\u7f6e \\(b\\) \u5e76\u5165\u6743\u503c\u5411\u91cf \\(\\vec w\\) , \u8bb0\u4f5c \\(\\hat w=(w^\\top, b)^\\top\\) , \u8f93\u5165\u5411\u91cf\u4e5f\u505a\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5373 \\(\\hat x=(x^\\top,1)^\\top\\) . \u8fd9\u6837 \\(\\hat w, \\hat x\\in \\mathcal{R}^n, \\hat w\\cdot \\hat x = w\\cdot x + b\\) . \u5b9a\u7406\uff1a\u5bf9\u4e8e\u8bad\u7ec3\u6570\u636e\u96c6 \\(T\\) \uff08\u5b9a\u4e49\u540c\u524d\uff09 \u5b58\u5728\u6ee1\u8db3\u6761\u4ef6 \\(||\\hat w_{opt}|| = 1\\) \u7684\u8d85\u5e73\u9762\u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u5b8c\u5168\u6b63\u786e\u5206\u5f00\uff1b\u4e14\u5b58\u5728 \\(\\gamma>0\\) \u5bf9\u6240\u6709 \\(i=1,2,\\cdots, N\\) \u4f7f\u5f97 $y_i(\\hat w_{opt} \\cdot \\hat x_i)=y_i(w_{opt} \\cdot x_i + b_{opt}) \\geq \\gamma $ \u4ee4 \\(R=\\max\\limits_{1\\leq i\\leq N}||\\hat x_i||\\) , \u5219\u611f\u77e5\u673a\u7b97\u6cd5\u5728\u8bad\u7ec3\u6570\u636e\u96c6\u4e0a\u7684\u8bef\u5206\u7c7b\u6b21\u6570 \\(k\\) \u6ee1\u8db3 \\(k\\leq \\left(\\dfrac{R}{\\gamma}\\right)^2\\) \u8bef\u5206\u7c7b\u6b21\u6570 \\(k\\) \u662f\u6709\u4e0a\u754c\u7684\uff0c\u5f53\u8bad\u7ec3\u96c6\u7ebf\u6027\u53ef\u5206\u65f6\uff0c\u7b97\u6cd5\u539f\u59cb\u5f62\u5f0f\u662f\u6536\u655b\u7684\u3002 \u7b97\u6cd5\u89e3\u4e0d\u552f\u4e00\uff0c\u65e2\u4f9d\u8d56\u4e8e\u521d\u503c\uff0c\u4e5f\u4f9d\u8d56\u4e8e\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u9009\u62e9\u8bef\u5206\u7c7b\u70b9\u7684\u9009\u62e9\u987a\u5e8f\u3002 \u82e5\u9700\u8981\u552f\u4e00\u5206\u79bb\u8d85\u5e73\u9762\uff0c\u9700\u8981\u589e\u52a0\u7ea6\u675f\uff0c\u5982 SVM (\u652f\u6301\u5411\u91cf\u673a) \u7ebf\u6027\u4e0d\u53ef\u5206\u6570\u636e\u96c6\u4e0a\uff0c\u7ed3\u679c\u4e0d\u6536\u655b\uff0c\u8fed\u4ee3\u9707\u52a8\u3002","title":"\u7b97\u6cd5\u7684\u6536\u655b\u6027"},{"location":"MLT/mlt2/#_7","text":"\u57fa\u672c\u60f3\u6cd5 \uff1a\u5c06 \\(\\vec w, b\\) \u8868\u793a\u4e3a\u5b9e\u4f8b \\(\\vec x_i\\) \u548c\u6807\u8bb0 \\(y_i\\) \u7684\u7ebf\u6027\u7ec4\u5408\u5f62\u5f0f\uff0c\u901a\u8fc7\u6c42\u89e3\u5176\u7cfb\u6570\u800c\u6c42\u5f97 \\(\\vec w\\) \u548c \\(b\\) . \u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe \\(\\vec w,b\\) \u5173\u4e8e \\((\\vec x_i,y_i)\\) \u7684\u589e\u91cf\u662f \\(\\alpha_i y_i \\vec x_i\\) \u548c \\(\\alpha_i y_i\\) , \u90a3\u4e48\u6700\u540e\u5b66\u4e60\u5230\u7684 \\(\\vec w=\\sum\\limits_{i=1}^N\\alpha_i y_i \\vec x_i, b=\\sum\\limits_{i=1}^N \\alpha_i y_i\\) . \u8fd9\u91cc \\(\\alpha_i\\geq 0\\) , \u5f53 \\(\\eta= 1\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u5b9e\u4f8b\u70b9\u7531\u4e8e\u8bef\u5206\u800c\u8fdb\u884c\u66f4\u65b0\u7684\u6b21\u6570\u3002 \u7b97\u6cd5 \uff1a\uff08 \u611f\u77e5\u673a\u5b66\u4e60\u7b97\u6cd5\u7684\u5bf9\u5076\u5f62\u5f0f \uff09 \u8f93\u5165 \uff1a\u8bad\u7ec3\u6570\u636e\u96c6 \\(T=\\{(x_1,y_1),(x_2,y_2),\\ldots,(x_N, y_N)\\}\\) \u5176\u4e2d \\(x_i\\in \\mathcal{X}=\\mathcal{R}^n, y_i\\in \\mathcal{Y}=\\{+1,-1\\},i =1,2,\\cdots,N\\) . \u5b66\u4e60\u7387 \\(0<\\eta\\leq 1\\) . \u8f93\u51fa : \\(\\vec alpha, b\\) ; \u611f\u77e5\u673a\u6a21\u578b \\(f(x)=sign\\left(\\sum\\limits_{j=1}^N \\alpha_j y_j \\vec x_j\\cdot \\vec x + b\\right)\\) , \u5176\u4e2d \\(\\alpha=(\\alpha_1,\\alpha_2,\\cdots,\\alpha_N)^\\top\\) . \\(\\vec \\alpha \\leftarrow 0 ,b \\leftarrow 0\\) \u5728\u8bad\u7ec3\u96c6\u4e2d\u9009\u53d6\u6570\u636e \\((\\vec x_i,y_i)\\) \u5982\u679c \\(y_i\\left(\\sum\\limits_{j=1}^N \\alpha_j y_j \\vec x_j\\cdot \\vec x_i + b\\right)\\leq 0\\) , \u5219 \\[ \\begin{align*} \\alpha_i & \\leftarrow \\alpha_i + \\eta \\\\ b & \\leftarrow b + \\eta y_i \\end{align*} \\] \u8f6c\u81f3 2, \u76f4\u81f3\u8bad\u7ec3\u96c6\u4e2d\u6ca1\u6709\u8bef\u5206\u7c7b\u70b9\u3002 \u8fd9\u91cc\u5bf9\u5076\u5f62\u5f0f\u7684\u8bad\u7ec3\u5b9e\u4f8b\u53ea\u4ee5\u5185\u79ef\u5f62\u5f0f\u51fa\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5148\u5c06\u8bad\u7ec3\u96c6\u4e2d\u7684\u5b9e\u4f8b\u95f4\u7684\u5185\u79ef\u8ba1\u7b97\u51fa\u6765\u5e76\u4ee5\u77e9\u9635\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u5373 Gram \u77e9\u9635 \\(\\mathbf{G}=[x_i\\cdot x_j]_{N\\times N}\\) Example","title":"\u5bf9\u5076\u5f62\u5f0f"},{"location":"MLT/report/","text":"Distance Metric Learning for Large MarginNearest Neighbor Classification \u8bfb\u4e66\u62a5\u544a \u00b6 \u7814\u7a76\u80cc\u666f \u00b6 \u95ee\u9898\u4ecb\u7ecd \u00b6 \u6211\u4eec\u5728\u8bfe\u4e0a\u5df2\u7ecf\u5b66\u8fc7\u4e86 kNN (k-Nearest Neighbors, k\u8fd1\u90bb) \u7b97\u6cd5\u3002 kNN \u7b97\u6cd5\u5bf9\u4e8e\u65b0\u7684\u8f93\u5165\u5b9e\u4f8b\uff0c\u5728\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u627e\u5230\u4e0e\u8be5\u5b9e\u4f8b\u6700\u90bb\u8fd1\u7684 k \u4e2a\u5b9e\u4f8b\uff0c\u5e76\u901a\u8fc7\u591a\u6570\u8868\u51b3\u7684\u89c4\u5219\uff0c\u7531\u8fd9 k \u4e2a\u5b9e\u4f8b\u4e2d\u7684\u591a\u6570\u7c7b\u51b3\u5b9a\u8f93\u5165\u5b9e\u4f8b\u7684\u7c7b\u3002 \u5176\u4e2d \u8ddd\u79bb\u5ea6\u91cf \u662f k \u8fd1\u90bb\u6cd5\u7684\u4e09\u8981\u7d20\u4e4b\u4e00\uff0c\u800c\u4e0d\u540c\u7684\u8ddd\u79bb\u5ea6\u91cf\u4e5f\u53ef\u80fd\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u5b9e\u9645\u4e0a kNN \u5206\u7c7b\u7684\u51c6\u786e\u6027\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u7528\u4e8e\u8ba1\u7b97\u4e0d\u540c\u793a\u4f8b\u4e4b\u95f4\u8ddd\u79bb\u7684\u5ea6\u91cf\u6807\u51c6\u3002 \u5e38\u89c4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f46\u5927\u591a\u6570\u7684\u5b9e\u73b0\u90fd\u4f1a\u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u8ba1\u7b97\u7b80\u5355\u8ddd\u79bb\u3002\u4f46\u8fd9\u5374\u5ffd\u7565\u4e86\u53ef\u4ee5\u4ece\u5927\u578b\u5e26\u6807\u7b7e\u793a\u4f8b\u8bad\u7ec3\u96c6\u4e2d\u4f30\u8ba1\u51fa\u6765\u7684\u4efb\u4f55\u7edf\u8ba1\u6b63\u6001\u5206\u5e03\u3002\u4e8e\u662f\u6211\u4eec\u60f3\u5f97\u5230\u4e00\u79cd\u5ea6\u91cf\uff0c\u80fd\u591f\u7ed3\u5408\u8bad\u7ec3\u96c6\u672c\u8eab\u7684\u7edf\u8ba1\u7279\u5f81\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u5730\u505a\u9884\u6d4b\u5206\u7c7b\u3002 \u8bba\u6587\u7684\u65b9\u6cd5\u662f\u57fa\u4e8e Mahalanobis \u8ddd\u79bb\u5ea6\u91cf\u8fdb\u884c\u8ddd\u79bb\u5ea6\u91cf\u5b66\u4e60\uff0c\u5176\u76ee\u6807\u662f \u4f7f k \u4e2a\u6700\u8fd1\u90bb\u7684\u5b9e\u4f8b\u603b\u662f\u5c5e\u4e8e\u540c\u4e00\u7c7b\uff0c\u800c\u6765\u81ea\u4e0d\u540c\u7c7b\u522b\u7684\u793a\u4f8b\u5219\u88ab\u5206\u9694\u5f00\u3002 \u76f8\u5173\u5de5\u4f5c \u00b6 \u5f53 \\(M=L^\\top L\\) \u65f6\u6211\u4eec\u5b9a\u4e49\u9a6c\u6c0f\u5ea6\u91cf\u4e3a \\(D_M(x_i,x_j)=(x_i-x_j)^\\top M(x_i-x_j)\\) . \u8fd9\u76f8\u5f53\u4e8e\u901a\u8fc7\u7ebf\u6027\u53d8\u6362 \\(\\vec x' =L\\vec x\\) \u540e\u8ba1\u7b97\u6b27\u6c0f\u8ddd\u79bb\u3002\u800c\u8ddd\u79bb\u5ea6\u91cf\u5b66\u4e60\u7684\u76ee\u6807\u53ef\u4ee5\u4ece\u4e24\u65b9\u9762\u6765\u770b\uff1a\u5b66\u4e60\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362 \\(\\vec x' = L\\vec x\\) ; \u5b66\u4e60\u9a6c\u6c0f\u5ea6\u91cf \\(M=L^\\top L\\) . \u5b66\u4e60\u7ebf\u6027\u53d8\u6362 \\(L\\) \u65f6\uff0c\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u662f \u7279\u5f81\u5411\u91cf \u65b9\u6cd5\u3002 \u8fd9\u91cc \\(L\\) \u53ef\u4ee5\u770b\u4f5c \\(M\\) \u7684\u8bf1\u56e0\u3002 \u5e38\u7528\u7684\u65b9\u6cd5\u6709 PCA(\u4e3b\u6210\u5206\u5206\u6790)\uff0cLDA(\u7ebf\u6027\u5224\u522b\u5206\u6790)\uff0cRCA(\u76f8\u5173\u6210\u5206\u5206\u6790). \u5b66\u4e60\u9a6c\u6c0f\u5ea6\u91cf \\(M\\) \u65f6\uff0c\u5e38\u7528 \u51f8\u4f18\u5316 \u7684\u65b9\u6cd5\u3002 MMC(MAHALANOBIS METRIC FOR CLUSTERING, \u9a6c\u6c0f\u8ddd\u79bb\u805a\u7c7b) \u5373\u6700\u5c0f\u5316\u7c7b\u522b\u76f8\u4f3c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u540c\u65f6\u6700\u5927\u5316\u7c7b\u522b\u4e0d\u540c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5e76\u5c06\u5176\u8868\u793a\u4e3a\u4e00\u4e2a\u51f8\u4f18\u5316\u95ee\u9898\u3002 \\[ \\begin{align*} Maximize\\ & \\sum_{i,j}(1-y_{ij})\\sqrt{\\mathcal{D}_M(\\vec x_i,\\vec x_j)} \\\\ subject\\ to & \\ (1) \\sum_{ij}y_{ij}\\sqrt{\\mathcal{D}_M(\\vec x_i,\\vec x_j)} \\leq 1\\\\ & \\ (2)\\mathbf{M}\\succeq 0 \\end{align*} \\] POLA(The Pseudometric Online Learning Algorithm, \u4f2a\u5ea6\u91cf\u5728\u7ebf\u5b66\u4e60\u7b97\u6cd5) POLA \u4e0e MMA \u7c7b\u4f3c\uff0c\u8bd5\u56fe\u5b66\u4e60\u4e00\u79cd\u5ea6\u91cf\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u7f29\u77ed\u6807\u8bb0\u76f8\u4f3c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5e76\u6269\u5c55\u6807\u8bb0\u4e0d\u540c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u660e\u786e\u5730\u9f13\u52b1\u4f7f\u7528\u6709\u9650\u7684\u8fb9\u754c\u6765\u5206\u9694\u4e0d\u540c\u7684\u6807\u8bb0\u8f93\u5165\u3002 NCA(Neighborhood Component Analysis, \u90bb\u57df\u6210\u5206\u5206\u6790) NCA \u4e2d\u7684\u968f\u673a\u5206\u7c7b\u5668\u662f\u901a\u8fc7\u9644\u8fd1\u8bad\u7ec3\u5b9e\u4f8b\u7684\u591a\u6570\u6295\u7968\u6765\u6807\u8bb0\u67e5\u8be2\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f k \u4e2a\u6700\u8fd1\u90bb\u3002NCA \u5bf9\u4e8e\u4e0d\u540c\u6837\u672c\u4e4b\u95f4\u5b9a\u4e49\u4e86\u4e00\u4e2a softmax \u6982\u7387\uff1a \\[ p_{ij}=\\begin{cases} \\dfrac{exp(-||\\mathbf{L}x_i-\\mathbf{L}x_j||^2)}{\\sum_{k\\neq i}(exp(-||\\mathbf{L}x_i-\\mathbf{L}x_k||^2))} \\quad & if\\ i\\neq j \\\\ \\quad \\quad \\quad \\quad \\quad \\quad 0 \\quad & if\\ i=j \\end{cases} \\] \u800c\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u4e3a \\(\\epsilon_{NCA}=1-\\dfrac{1}{n}\\sum_{ij}p_{ij}y_{ij}\\) * \u4e0a\u8ff0\u4e09\u4e2a\u65b9\u6cd5\u4e2d, POLA \u548c MMC \u6709\u7740\u76f8\u540c\u7684\u4f18\u52bf\u548c\u52a3\u52bf\u3002\u8fd9\u4e24\u79cd\u7b97\u6cd5\u90fd\u57fa\u4e8e\u51f8\u4f18\u5316\uff0c\u4e0d\u5b58\u5728\u4f2a\u5c40\u90e8\u6781\u5c0f\u503c\u3002\u4f46\u5bf9\u8f93\u5165\u548c\u7c7b\u6807\u7b7e\u7684\u5206\u5e03\u505a\u4e86\u9690\u542b\u7684\u5047\u8bbe\uff08\u5355\u5cf0\u6216\u8005\u6b63\u6001\u5206\u5e03\uff09\uff0c\u4f46 kNN \u5e76\u6ca1\u6709\u9690\u542b\u5730\u5bf9\u8f93\u5165\u5206\u5e03\u505a\u51fa\u53c2\u6570\u5047\u8bbe\u3002\u800c\u5bf9\u4e8e NCA \u6765\u8bf4\uff0c\u867d\u7136\u8ddd\u79bb\u5ea6\u91cf\u7684\u53c2\u6570\u662f\u8fde\u7eed\u53ef\u5fae\u7684\uff0c\u4f46\u4e0a\u5f0f\u4e0d\u662f\u51f8\u7684\uff0c\u4e5f\u4e0d\u80fd\u7528\u7279\u5f81\u5411\u91cf\u65b9\u6cd5\u6700\u5c0f\u5316, \u5373 NCA \u4e2d\u7684\u4f18\u5316\u53ef\u80fd\u5b58\u5728\u4f2a\u5c40\u90e8\u6781\u5c0f\u503c\u3002 \u4e3b\u8981\u601d\u8def \u00b6 \u8bba\u6587\u63d0\u51fa\u7684\u8ddd\u79bb\u5ea6\u91cf\u5b66\u4e60\u57fa\u4e8e\u4e0a\u8ff0\u7b97\u6cd5\u3002 \u8be5\u6a21\u578b\u57fa\u4e8e\u4e24\u4e2a\u76f4\u89c9 \u6bcf\u4e2a\u8bad\u7ec3\u8f93\u5165 \\(\\vec x_i\\) \u5e94\u4e0e\u5176 k \u4e2a\u6700\u8fd1\u90bb\u5c45\u5171\u4eab\u76f8\u540c\u7684\u6807\u7b7e \\(y_i\\) \u5176\u6b21\uff0c\u5177\u6709\u4e0d\u540c\u6807\u7b7e\u7684\u8bad\u7ec3\u8f93\u5165\u5e94\u88ab\u5e7f\u6cdb\u5206\u79bb\u3002 \u8fd9\u91cc\u8bba\u6587\u63d0\u51fa\u4e86\u4e24\u4e2a\u6982\u5ff5, target neighors(\u76ee\u6807\u90bb\u5c45) \u548c impostors(\u4f2a\u88c5\u8005) \u76ee\u6807\u90bb\u5c45 \u5b66\u4e60\u5f00\u59cb\u65f6\u6211\u4eec\u5c31\u6307\u5b9a\u6bcf\u4e2a\u8f93\u5165 \\(\\vec x_i\\) \u7684\u76ee\u6807\u90bb\u5c45\uff0c\u5373\u6211\u4eec\u6700\u5e0c\u671b \\(\\vec x_i\\) \u63a5\u8fd1\u7684\u70b9\u3002\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u5b66\u4e60\u8f93\u5165\u7a7a\u95f4\u7684\u7ebf\u6027\u53d8\u6362\uff0c\u8ba9 \\(\\vec x_i\\) \u7684\u76ee\u6807\u90bb\u5c45\u6210\u4e3a\u5176 k \u8fd1\u90bb\u90bb\u5c45\u3002 \u6211\u4eec\u7528 \\(i\\leadsto j\\) \u8868\u793a \\(i\\) \u662f \\(j\\) \u7684\u76ee\u6807\u90bb\u5c45\uff0c\u6ce8\u610f\u5230\u8fd9\u4e2a\u5173\u7cfb\u4e0d\u662f\u5bf9\u79f0\u7684\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u6709\u9884\u5907\u77e5\u8bc6\u3001\u8f85\u52a9\u4fe1\u606f\u6307\u5b9a\u76ee\u6807\u90bb\u5c45\u3002\u5982\u679c\u6ca1\u6709\u53ef\u4ee5\u6839\u636e\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u8ba1\u7b97\u5177\u6709\u76f8\u540c\u7c7b\u522b\u6807\u7b7e\u7684 k \u4e2a\u6700\u8fd1\u90bb\u5c45\u3002 \u4f2a\u88c5\u8005 \u5468\u754c\u662f\u6bcf\u4e2a\u8f93\u5165\u7684\u76ee\u6807\u90bb\u5c45\u6784\u6210\u7684\u8303\u56f4\u3002\u6211\u4eec\u628a\u4fb5\u5165\u5468\u754c\u7684\u5f02\u7c7b\u6807\u7b7e\u70b9\u79f0\u4e3a\u4f2a\u88c5\u8005\u3002 \u4e3a\u4e86\u589e\u5f3a\u7b97\u6cd5\u7684\u9c81\u68d2\u6027\uff0c\u6211\u4eec\u5728\u5468\u754c\u4e0e\u5f02\u7c7b\u70b9\u4fdd\u6301\u4e00\u4e2a\u5206\u7c7b\u88d5\u5ea6\u3002\u6ee1\u8db3 \\(||\\mathbf{L}(\\vec x_i-\\vec x_l)||^2 \\leq ||\\mathbf{L}(\\vec x_i - \\vec x_j)||^2 + 1\\) (\u8fd9\u91cc \\(x_i, x_j\\) \u6807\u7b7e\u76f8\u540c, \\(x_j\\) \u662f \\(x_i\\) \u7684\u76ee\u6807\u90bb\u5c45) \u7684\u70b9 \\(x_l\\) \u4e3a\u4f2a\u88c5\u70b9\u3002 \u8bba\u6587\u4e2d\u4e5f\u7ed9\u51fa\u4e86\u56fe\u89e3\u91ca \u57fa\u4e8e\u4e0a\u9762\u7684\u4e24\u4e2a\u76f4\u89c9\uff0c\u8bba\u6587\u7684\u6a21\u578b\u4e2d\u635f\u5931\u51fd\u6570\u5b58\u5728\u4e24\u4e2a\u7ade\u4e89\u9879 \u4e00\u4e2a\u9879\u60e9\u7f5a\u76f8\u540c\u6807\u7b7e\u4f46\u8ddd\u79bb\u8f83\u8fdc\u7684\u9644\u8fd1\u8f93\u5165\u4e4b\u95f4\u7684\u5927\u8ddd\u79bb \\(\\epsilon_{pull}(\\mathbf{L})=\\sum\\limits_{j\\leadsto i}||\\mathbf{L}(\\vec x_i - \\vec x_j)||^2\\) \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc \u4ec5\u60e9\u7f5a\u8f93\u5165\u548c\u5176\u76ee\u6807\u90bb\u5c45\u4e4b\u95f4\u7684\u5927\u8ddd\u79bb \u800c\u5e76 \u4e0d\u60e9\u7f5a\u6240\u6709\u540c\u7c7b\u6807\u8bb0\u8f93\u5165\u4e4b\u95f4\u7684\u5927\u8ddd\u79bb \u3002\u8fd9\u662f\u56e0\u4e3a\u51c6\u786e\u7684 kNN \u5206\u7c7b\u5e76\u4e0d\u8981\u6c42\u6240\u6709\u540c\u7c7b\u6807\u8bb0\u8f93\u5165\u90fd\u7d27\u5bc6\u805a\u96c6\u5728\u4e00\u8d77\u3002 \u4e00\u4e2a\u9879\u60e9\u7f5a\u4e0d\u540c\u6807\u7b7e\u4e4b\u95f4\u8ddd\u79bb\u8fc7\u5c0f\u7684\u8f93\u5165 \\(\\epsilon_{push}(\\mathbf{L})=\\sum\\limits_{i,j\\leadsto i}\\sum\\limits_l (1-y_{il})\\left[1+||\\mathbf{L}(\\vec x_i-\\vec x_j)^2-||\\mathbf{L}(\\vec x_i -\\vec x_l)||^2\\right]_{+}\\) \u6700\u540e\u6211\u4eec\u5f97\u5230\u5408\u9875\u635f\u5931\u51fd\u6570 \\(\\epsilon(\\mathbf{L})=(1-\\mu)\\epsilon_{pull}(\\mathbf{L})+\\mu \\epsilon_{pull}(\\mathbf{L})\\) \u8bba\u6587\u4e2d\u63d0\u5230\u5408\u9875\u635f\u5931\u51fd\u6570\u5bf9 \\(\\mu\\) \u7684\u53d6\u503c\u5e76\u4e0d\u654f\u611f\uff0c\u4e00\u822c\u53d6 0.5 \u5373\u53ef\u3002 \u51f8\u4f18\u5316 \u00b6 \u6211\u4eec\u5bf9\u635f\u5931\u51fd\u6570\u7684\u7ebf\u6027\u53d8\u6362\u7684\u8ddd\u79bb\u7528\u9a6c\u6c0f\u8ddd\u79bb\u8868\u793a \\(\\epsilon(\\mathbf{M})=(1-\\mu)\\sum\\limits_{i,j\\leadsto i}\\mathcal{D}_\\mathbf{M}(\\vec x_i, \\vec x_j)+\\mu\\sum\\limits_{i,j\\leadsto i}\\sum\\limits_l(1-y_{il})\\left[1+\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_j)-\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_l)\\right]_+\\) \u8fd9\u6837\u7684\u635f\u5931\u51fd\u6570\u635f\u5931\u662f\u4e00\u4e2a\u57fa\u4e8e\u534a\u6b63\u5b9a\u77e9\u9635\u9650\u5236\u6761\u4ef6\u7684\u51f8\u4f18\u5316\u95ee\u9898\u3002 \u6709\u65f6\u5019\u5468\u754c\u7684\u6761\u4ef6\u4e0d\u4e00\u5b9a\u80fd\u4e25\u683c\u6ee1\u8db3\uff0c\u56e0\u6b64\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u975e\u8d1f\u677e\u5f1b\u53d8\u91cf \\(\\xi_{ijl}\\) . \u5f97\u5230\u4e0b\u9762\u7684\u51f8\u4f18\u5316\u95ee\u9898 \\[ \\begin{align*} Minimize & \\ (1-\\mu)\\sum_{i,j\\leadsto i}(\\vec x_i-\\vec x_j)^\\top \\mathbf{M}(\\vec x_i- \\vec x_j)+\\mu \\sum_{i, j\\leadsto i,l}(1-y_{il})\\xi_{ijl} \\\\ subject\\ to \\ & (1) \\ (\\vec x_i-\\vec x_l)^\\top \\mathbf{M}(\\vec x_i-\\vec x_l) - (\\vec x_i-\\vec x_j)^\\top \\mathbf{M} (\\vec x_i-\\vec x_j) \\geq 1-\\xi_{ijl}\\\\ & (2) \\ \\xi_{ijl}\\geq 0\\\\ & (3) \\ \\mathbf{M}\\succeq 0 \\end{align*} \\] \u6b64\u5916\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5927\u90e8\u5206\u7684\u677e\u5f1b\u53d8\u91cf \\(\\xi_{ijl}=0\\) \u800c\u975e\u6b63\u503c\uff0c\u53ef\u4ee5\u5f97\u5230\u7279\u6b8a\u76ee\u7684\u7684\u6c42\u89e3\u5668\u3002\u8be5\u6c42\u89e3\u5668\u57fa\u4e8e\u5b50\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u548c\u4ea4\u66ff\u6295\u5f71\u7b97\u6cd5\uff0c\u53ef\u4ee5\u52a0\u901f\u6c42\u89e3\u7684\u8fc7\u7a0b\u3002 \u57fa\u4e8e\u80fd\u91cf\u5206\u7c7b \u00b6 \u57fa\u4e8e Mahalabonis Metric \u7684\u77e9\u9635 \\(M\\) \u53ef\u7528\u4e8e kNN \u7b97\u6cd5\u6765\u89e3\u51b3\u5206\u7c7b\u95ee\u9898\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u635f\u8017\u51fd\u6570\u4f5c\u4e3a\u6240\u8c13\u7684\u201c\u57fa\u4e8e\u80fd\u91cf\u7684\u201d\u5206\u7c7b\u5668\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u6d4b\u8bd5\u6837\u672c\uff0c\u6211\u4eec\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u989d\u5916\u7684\u8bad\u7ec3\u6837\u672c\uff0c\u5bf9\u53ef\u80fd\u7684\u6807\u7b7e\u5206\u522b\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u7684\u503c\uff0c\u6700\u540e\u9009\u62e9\u635f\u5931\u51fd\u6570\u503c\u6700\u5c0f\u7684\u7c7b\u522b\u4f5c\u4e3a\u8fd9\u4e2a\u6837\u672c\u7684\u9884\u6d4b\u503c\u3002 \\[ y_t = \\arg\\min\\left\\{(1-\\mu)\\sum\\limits_{j\\leadsto t}\\mathcal{D}_\\mathbf{M}(\\vec x_t,\\vec x_j) + \\mu\\sum\\limits_{j\\leadsto t,l}(1-y_{tl})\\left[1+\\mathcal{D}_\\mathbf{M}(\\vec x_t-\\vec x_j)-\\mathcal{D}_\\mathbf{M}(\\vec x_t-\\vec x_l)\\right]_+ +\\mu\\sum\\limits_{i,j\\leadsto t}(1-y_{it})\\left[1+\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_j)-\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_t)\\right] \\right\\}. \\] \u6210\u679c\u548c\u6269\u5c55 \u00b6 \u5b9e\u9a8c\u4e2d\u8bc4\u4f30\u4e86\u4e5d\u4e2a\u4e0d\u540c\u5927\u5c0f\u548c\u96be\u5ea6\u7684\u6570\u636e\u96c6\u7684 LMNN \u5206\u7c7b\u3002\u5176\u4e2d\u4e00\u4e9b\u6570\u636e\u96c6\u6765\u81ea\u4e8e\u56fe\u50cf\u3001\u8bed\u97f3\u548c\u6587\u672c\u7684\u96c6\u5408\uff0c\u4ea7\u751f\u4e86\u975e\u5e38\u9ad8\u7ef4\u7684\u8f93\u5165\uff0c\u9488\u5bf9\u8fd9\u4e9b\u4f7f\u7528\u4e86PCA\u6765\u51cf\u5c11\u8bad\u7ec3\u524d\u8f93\u5165\u7684\u7ef4\u6570\u3002\u5176\u4e2d\u6d4b\u8bd5\u96c6\u5305\u62ec\u5c0f\u6570\u636e\u96c6\u3001\u4eba\u8138\u8bc6\u522b\u4efb\u52a1\u3001\u8bed\u97f3\u8bc6\u522b\u3001\u5b57\u6bcd\u8bc6\u522b\u3001\u6587\u672c\u5206\u7c7b\u3001\u624b\u5199\u6570\u5b57\u8bc6\u522b\u3002 \u5728\u5404\u79cd\u5927\u5c0f\u548c\u96be\u6613\u7a0b\u5ea6\u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5\u540e\u53d1\u73b0\uff0c\u5728\u6b64\u65b9\u5f0f\u4e0b\u8bad\u7ec3\u51fa\u6765\u7684\u6307\u6807\u80fd\u591f\u663e\u8457\u63d0\u9ad8 kNN \u5206\u7c7b\u7ed3\u679c\uff0c\u5177\u4f53\u5982\u4e0b\uff1a \u4f7f\u7528 \u9a6c\u6c0f\u8ddd\u79bb \u7684 LMNN \u5206\u7c7b\u65b9\u6cd5\u59cb\u7ec8\u4f18\u4e8e\u4f7f\u7528 \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb \u7684 kNN \u5206\u7c7b\u65b9\u6cd5\u3002 \u57fa\u4e8e\u80fd\u91cf\u7684\u51b3\u7b56\u89c4\u5219 \u8fdb\u4e00\u6b65\u6539\u5584\u4e86\u4f7f\u7528\u9a6c\u6c0f\u8ddd\u79bb\u8fdb\u884c kNN \u5206\u7c7b \u5f53\u9700\u8981\u67d0\u79cd\u5f62\u5f0f\u964d\u7ef4\u9884\u5904\u7406\u65f6, LMNN\u5206\u7c7b\u4e0e PCA \u76f8\u6bd4LDA\u6548\u679c\u66f4\u597d\u3002 LMNN \u5206\u7c7b\u5bf9\u8f83\u5927\u6570\u636e\u96c6\u4ea7\u751f\u66f4\u5927\u7684\u6539\u8fdb\u3002 \u8bba\u6587\u8ba4\u4e3a\u968f\u7740\u6837\u672c\u5bc6\u5ea6\u589e\u52a0\uff0c\u53ef\u4ee5\u9009\u62e9\u7684\u76ee\u6807\u90bb\u5c45\u5b66\u4e60\u5230\u66f4\u53ef\u9760\u7684\u5224\u522b\u4fe1\u53f7\u3002\uff08\u9009\u62e9\u7684\u65b9\u6cd5\u662f\u57fa\u4e8e\u964d\u7ef4\u540e\u7684\u8f93\u5165\u7a7a\u95f4\u4e2d\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u9009\u62e9\u76ee\u6807\u90bb\u5c45\uff09 \u57fa\u4e8e\u80fd\u91cf\u7684 LMNN \u7b97\u6cd5\u4e0e SVM \u6c34\u5e73\u76f8\u5f53\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u8bba\u6587\u8fd8\u63d0\u51fa\u4e86\u6734\u7d20 LMNN \u7b97\u6cd5\u53ef\u4ee5\u6709\u7684\u6539\u5584 Multi-pass LMNN(\u591a\u6b21\u8fed\u4ee3 LMNN) LMNN \u5b58\u5728\u9700\u8981\u9884\u5148\u6307\u5b9a\u76ee\u6807\u90bb\u5c45\u7684\u7f3a\u70b9\u3002\u6211\u4eec\u9ed8\u8ba4\u9009\u62e9\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u4e0d\u4e00\u5b9a\u80fd\u7b26\u5408\u5b9e\u9645\u8fd0\u7528\u7684\u60c5\u51b5\u3002\u56e0\u6b64\u53ef\u4ee5\u91c7\u7528\u8fed\u4ee3\u7684\u65b9\u5f0f\uff0c\u6bcf\u8f6e\u8fed\u4ee3\u57fa\u4e8e\u4e4b\u524d\u7ed3\u679c\u91cd\u65b0\u6307\u5b9a\u76ee\u6807\u90bb\u5c45\u3002 Multi-metric LMNN(\u591a\u5c3a\u5ea6 LMNN) \u5728\u67d0\u4e9b\u6570\u636e\u96c6\u4e0a\uff0c\u8f93\u5165\u7a7a\u95f4\u7684\u5168\u5c40\u7ebf\u6027\u53d8\u6362\u53ef\u80fd\u4e0d\u8db3\u4ee5\u6539\u8fdb kNN \u5206\u7c7b\u3002\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u591a\u4e2a\u672c\u5730\u7ebf\u6027\u8f6c\u6362\u800c\u4e0d\u662f\u5355\u4e00\u5168\u5c40\u7ebf\u6027\u8f6c\u6362\u3002 \u5177\u4f53\u53ef\u4ee5\u4f7f\u7528 K-means \u7b49\u805a\u7c7b\u7b97\u6cd5\u5148\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u5272\u805a\u7c7b\uff0c\u968f\u540e\u5bf9\u6bcf\u4e00\u4e2a\u805a\u7c7b\u8bad\u7ec3\u4e00\u4e2a\u5c40\u90e8\u7684\u9a6c\u6c0f\u8ddd\u79bb\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u7ec4\u5408\u3002 Kernel Version \u548c\u4e0a\u8bfe\u6240\u8bb2\u7684 SVM \u4e2d\u7684\u6838\u65b9\u6cd5\u7c7b\u4f3c, LMNN \u4e5f\u53ef\u4ee5\u5229\u7528\u6838\u65b9\u6cd5\u6269\u5c55\u5230\u4e00\u4e2a\u975e\u7ebf\u6027\u7279\u5f81\u7a7a\u95f4\u3002 Dimensionality Reduction(\u7ef4\u6570\u5f52\u7ea6) \u6839\u636e\u8bad\u7ec3\u51fa\u6765\u7684\u7ebf\u6027\u53d8\u6362\u77e9\u9635 \\(L\\) , \u53d6\u4ed6\u7684\u4e3b\u7279\u5f81\uff08\u7279\u5f81\u503c\u6700\u5927\u7684\u7279\u5f81\u5411\u91cf\uff09\u6784\u5efa\u6620\u5c04\u77e9\u9635 \\(P\\) , \u539f\u6570\u636e\u5c31\u53ef\u4ee5\u901a\u8fc7\u6620\u5c04\u77e9\u9635\u8fdb\u884c\u964d\u7ef4\u3002 Ball Tree kNN \u7684\u590d\u6742\u5ea6\u4f9d\u8d56\u4e8e\u6837\u672c\u6570\u91cf\u548c\u6837\u672c\u7684\u7ef4\u5ea6\uff0c\u5f53\u6570\u636e\u91cf\u548c\u7ef4\u5ea6\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u8ba1\u7b97\u7684\u590d\u6742\u5ea6\u4f1a\u5f88\u9ad8. Ball Tree \u7684\u6bcf\u4e2a\u5206\u5272\u70b9\u8ddd\u79bb\u7684\u8fb9\u754c\u7b49\u4e8e\u7403\u5fc3\u5230\u6d4b\u8bd5\u70b9\u8ddd\u79bb\u51cf\u53bb\u7403\u7684\u534a\u5f84\u3002\u7ecf\u8fc7\u6d4b\u8bd5\u53d1\u73b0 Ball Tree \u5bf9\u4e8e\u4e0d\u540c\u7684\u7ef4\u5ea6\u6570\u636e\u90fd\u80fd\u8fbe\u5230\u641c\u7d22\u7684\u4f18\u5316\u3002\u7ef4\u5ea6\u8d8a\u4f4e\uff0c\u8fd9\u79cd\u4f18\u5316\u6548\u7387\u8d8a\u9ad8\u3002 \u8ba8\u8bba \u00b6 \u8fd9\u7bc7\u8bba\u6587\u8bb2\u89e3\u4e86\u4e00\u79cd\u57fa\u4e8e\u9a6c\u6c0f\u5ea6\u91cf\u7684\u8bad\u7ec3\u65b9\u6cd5\uff0c\u5c06\u8bad\u7ec3\u7684\u8fc7\u7a0b\u8f6c\u5316\u4e3a\u89e3\u51b3\u4e00\u4e2a SDP \u95ee\u9898\u3002\u540c\u65f6\u57fa\u4e8e\u6b64\u63d0\u51fa\u4e86\u4e0d\u4f9d\u8d56\u8d85\u53c2\u6570\u7684 LMNN \u7b97\u6cd5\uff0c\u6781\u5927\u63d0\u5347\u4e86 kNN \u5206\u7c7b\u5668\u7684\u51c6\u786e\u6027\uff1b\u540c\u65f6\u8fd8\u63d0\u51fa\u4e86\u57fa\u4e8e\u80fd\u91cf\u7684\u7b97\u6cd5\uff0c\u4ee5\u89e3\u51b3\u5206\u7c7b\u95ee\u9898\u3002 \u56de\u987e\u8fd9\u7bc7\u8bba\u6587\uff0c\u867d\u7136\u4e3b\u8981\u6d89\u53ca\u5230\u5ea6\u91cf\u5b66\u4e60\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u4f46\u601d\u60f3\u4e0a\u548c\u6211\u4eec\u4e0a\u8bfe\u5b66\u4e60\u7684 SVM \u662f\u5f88\u63a5\u8fd1\u7684\u3002 \u652f\u6301\u5411\u91cf\u673a\u672c\u8d28\u4e0a\u4e5f\u662f\u8981\u627e\u4e00\u4e2a\u6700\u5927\u5316\u5206\u7c7b\u88d5\u5ea6\u7684\u8d85\u5e73\u9762\uff0c\u5e76\u7528\u8fd9\u4e2a\u8d85\u5e73\u9762\u5b8c\u6210\u5206\u7c7b\u4efb\u52a1\u3002\uff08\u548c\u524d\u6587\u63d0\u5230\u7684\u5468\u754c\u7c7b\u4f3c\uff09\u800c\u8fd9\u662f\u4e00\u4e2a\u51f8\u4e8c\u6b21\u89c4\u5212\u95ee\u9898\u3002\u5bf9\u4e8e\u6570\u636e\u96c6\u4e2d\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u60c5\u51b5\uff0c\u5373\u51fd\u6570\u95f4\u9694\u65e0\u6cd5\u5927\u4e8e 1 \u7684\u70b9\u6211\u4eec\u5f15\u5165\u4e86\u677e\u5f1b\u53d8\u91cf\uff0c\u6539\u5199\u540e\u7684\u4f18\u5316\u95ee\u9898\u5176\u5b9e\u5c31\u662f\u5728\u5bfb\u627e\u6700\u5927\u88d5\u5ea6\u7684\u51b3\u7b56\u8fb9\u754c\u548c\u677e\u5f1b\u56e0\u5b50\u7ec4\u5408\uff0c\u4f7f\u5f97\u8fdd\u80cc\u7ebf\u6027\u53ef\u5206\u7684\u6570\u636e\u70b9\u5f71\u54cd\u6700\u5c0f\u3002 \u800c\u8bba\u6587\u4e2d\u7684\u7b97\u6cd5\u5c31\u662f\u5c06\u4e0a\u8ff0 SVM \u7684 margin \u601d\u60f3\u5e94\u7528\u5230\u4e86 kNN \u7b97\u6cd5\u4e2d\uff0c\u5373\u6c42\u4e00\u4e2a\u8ddd\u79bb\u5ea6\u91cf\uff0c\u4f7f\u5f97\u6837\u672c\u70b9\u53ca\u5176\u76ee\u6807\u90bb\u5c45\u7ec4\u6210\u7684\u5468\u754c\u7684\u5206\u7c7b\u88d5\u5ea6\u5c3d\u53ef\u80fd\u5927\u3002 \u6b64\u5916\u6211\u8ba4\u4e3a\u8bba\u6587\u4e2d\u63d0\u5230\u7684\u6269\u5c55\u4e5f\u5f88\u597d\u5730\u6539\u5584\u4e86\u6734\u7d20 LMNN \u7b97\u6cd5\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u4e5f\u548c\u6211\u4eec\u4e0a\u8bfe\u6240\u5b66\u7684\u5185\u5bb9\u606f\u606f\u76f8\u5173\u3002\u8fd9\u4e9b\u4f18\u5316\u601d\u60f3\u4e5f\u5177\u6709\u76f8\u5f53\u7684\u666e\u9002\u6027\uff1a\u8fed\u4ee3\u8bad\u7ec3\uff0c\u6bcf\u6b21\u7684\u76ee\u6807\u90bb\u5c45\u662f\u57fa\u4e8e\u4e4b\u524d\u7684\u8bad\u7ec3\u7ed3\u679c\uff1b\u5148\u805a\u7c7b\u518d\u57fa\u4e8e\u6bcf\u4e2a\u7c7b\u5206\u522b\u8bad\u7ec3\u5ea6\u91cf\uff1b\u5229\u7528\u6838\u65b9\u6cd5\u6620\u5c04\u5230\u9ad8\u7ef4\u7a7a\u95f4\uff1b\u6570\u636e\u964d\u7ef4\uff1b\u4ee5\u53ca ball tree \u4f18\u5316 kNN \u8fd1\u90bb\u641c\u7d22\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4ec5\u9002\u7528\u4e8e kNN \u95ee\u9898\uff0c\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u5c06\u5176\u5e94\u7528\u4e8e\u4efb\u4f55\u57fa\u4e8e\u8f93\u5165\u6837\u672c\u8ddd\u79bb\u5ea6\u91cf\u7684\u76d1\u7763\u5b66\u4e60\u95ee\u9898\uff0c\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002","title":"\u8bfb\u4e66\u62a5\u544a"},{"location":"MLT/report/#distance-metric-learning-for-large-marginnearest-neighbor-classification","text":"","title":"Distance Metric Learning for Large MarginNearest Neighbor Classification \u8bfb\u4e66\u62a5\u544a"},{"location":"MLT/report/#_1","text":"","title":"\u7814\u7a76\u80cc\u666f"},{"location":"MLT/report/#_2","text":"\u6211\u4eec\u5728\u8bfe\u4e0a\u5df2\u7ecf\u5b66\u8fc7\u4e86 kNN (k-Nearest Neighbors, k\u8fd1\u90bb) \u7b97\u6cd5\u3002 kNN \u7b97\u6cd5\u5bf9\u4e8e\u65b0\u7684\u8f93\u5165\u5b9e\u4f8b\uff0c\u5728\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u627e\u5230\u4e0e\u8be5\u5b9e\u4f8b\u6700\u90bb\u8fd1\u7684 k \u4e2a\u5b9e\u4f8b\uff0c\u5e76\u901a\u8fc7\u591a\u6570\u8868\u51b3\u7684\u89c4\u5219\uff0c\u7531\u8fd9 k \u4e2a\u5b9e\u4f8b\u4e2d\u7684\u591a\u6570\u7c7b\u51b3\u5b9a\u8f93\u5165\u5b9e\u4f8b\u7684\u7c7b\u3002 \u5176\u4e2d \u8ddd\u79bb\u5ea6\u91cf \u662f k \u8fd1\u90bb\u6cd5\u7684\u4e09\u8981\u7d20\u4e4b\u4e00\uff0c\u800c\u4e0d\u540c\u7684\u8ddd\u79bb\u5ea6\u91cf\u4e5f\u53ef\u80fd\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u5b9e\u9645\u4e0a kNN \u5206\u7c7b\u7684\u51c6\u786e\u6027\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u7528\u4e8e\u8ba1\u7b97\u4e0d\u540c\u793a\u4f8b\u4e4b\u95f4\u8ddd\u79bb\u7684\u5ea6\u91cf\u6807\u51c6\u3002 \u5e38\u89c4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f46\u5927\u591a\u6570\u7684\u5b9e\u73b0\u90fd\u4f1a\u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u8ba1\u7b97\u7b80\u5355\u8ddd\u79bb\u3002\u4f46\u8fd9\u5374\u5ffd\u7565\u4e86\u53ef\u4ee5\u4ece\u5927\u578b\u5e26\u6807\u7b7e\u793a\u4f8b\u8bad\u7ec3\u96c6\u4e2d\u4f30\u8ba1\u51fa\u6765\u7684\u4efb\u4f55\u7edf\u8ba1\u6b63\u6001\u5206\u5e03\u3002\u4e8e\u662f\u6211\u4eec\u60f3\u5f97\u5230\u4e00\u79cd\u5ea6\u91cf\uff0c\u80fd\u591f\u7ed3\u5408\u8bad\u7ec3\u96c6\u672c\u8eab\u7684\u7edf\u8ba1\u7279\u5f81\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u597d\u5730\u505a\u9884\u6d4b\u5206\u7c7b\u3002 \u8bba\u6587\u7684\u65b9\u6cd5\u662f\u57fa\u4e8e Mahalanobis \u8ddd\u79bb\u5ea6\u91cf\u8fdb\u884c\u8ddd\u79bb\u5ea6\u91cf\u5b66\u4e60\uff0c\u5176\u76ee\u6807\u662f \u4f7f k \u4e2a\u6700\u8fd1\u90bb\u7684\u5b9e\u4f8b\u603b\u662f\u5c5e\u4e8e\u540c\u4e00\u7c7b\uff0c\u800c\u6765\u81ea\u4e0d\u540c\u7c7b\u522b\u7684\u793a\u4f8b\u5219\u88ab\u5206\u9694\u5f00\u3002","title":"\u95ee\u9898\u4ecb\u7ecd"},{"location":"MLT/report/#_3","text":"\u5f53 \\(M=L^\\top L\\) \u65f6\u6211\u4eec\u5b9a\u4e49\u9a6c\u6c0f\u5ea6\u91cf\u4e3a \\(D_M(x_i,x_j)=(x_i-x_j)^\\top M(x_i-x_j)\\) . \u8fd9\u76f8\u5f53\u4e8e\u901a\u8fc7\u7ebf\u6027\u53d8\u6362 \\(\\vec x' =L\\vec x\\) \u540e\u8ba1\u7b97\u6b27\u6c0f\u8ddd\u79bb\u3002\u800c\u8ddd\u79bb\u5ea6\u91cf\u5b66\u4e60\u7684\u76ee\u6807\u53ef\u4ee5\u4ece\u4e24\u65b9\u9762\u6765\u770b\uff1a\u5b66\u4e60\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362 \\(\\vec x' = L\\vec x\\) ; \u5b66\u4e60\u9a6c\u6c0f\u5ea6\u91cf \\(M=L^\\top L\\) . \u5b66\u4e60\u7ebf\u6027\u53d8\u6362 \\(L\\) \u65f6\uff0c\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u662f \u7279\u5f81\u5411\u91cf \u65b9\u6cd5\u3002 \u8fd9\u91cc \\(L\\) \u53ef\u4ee5\u770b\u4f5c \\(M\\) \u7684\u8bf1\u56e0\u3002 \u5e38\u7528\u7684\u65b9\u6cd5\u6709 PCA(\u4e3b\u6210\u5206\u5206\u6790)\uff0cLDA(\u7ebf\u6027\u5224\u522b\u5206\u6790)\uff0cRCA(\u76f8\u5173\u6210\u5206\u5206\u6790). \u5b66\u4e60\u9a6c\u6c0f\u5ea6\u91cf \\(M\\) \u65f6\uff0c\u5e38\u7528 \u51f8\u4f18\u5316 \u7684\u65b9\u6cd5\u3002 MMC(MAHALANOBIS METRIC FOR CLUSTERING, \u9a6c\u6c0f\u8ddd\u79bb\u805a\u7c7b) \u5373\u6700\u5c0f\u5316\u7c7b\u522b\u76f8\u4f3c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u540c\u65f6\u6700\u5927\u5316\u7c7b\u522b\u4e0d\u540c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5e76\u5c06\u5176\u8868\u793a\u4e3a\u4e00\u4e2a\u51f8\u4f18\u5316\u95ee\u9898\u3002 \\[ \\begin{align*} Maximize\\ & \\sum_{i,j}(1-y_{ij})\\sqrt{\\mathcal{D}_M(\\vec x_i,\\vec x_j)} \\\\ subject\\ to & \\ (1) \\sum_{ij}y_{ij}\\sqrt{\\mathcal{D}_M(\\vec x_i,\\vec x_j)} \\leq 1\\\\ & \\ (2)\\mathbf{M}\\succeq 0 \\end{align*} \\] POLA(The Pseudometric Online Learning Algorithm, \u4f2a\u5ea6\u91cf\u5728\u7ebf\u5b66\u4e60\u7b97\u6cd5) POLA \u4e0e MMA \u7c7b\u4f3c\uff0c\u8bd5\u56fe\u5b66\u4e60\u4e00\u79cd\u5ea6\u91cf\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u7f29\u77ed\u6807\u8bb0\u76f8\u4f3c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5e76\u6269\u5c55\u6807\u8bb0\u4e0d\u540c\u7684\u8f93\u5165\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u660e\u786e\u5730\u9f13\u52b1\u4f7f\u7528\u6709\u9650\u7684\u8fb9\u754c\u6765\u5206\u9694\u4e0d\u540c\u7684\u6807\u8bb0\u8f93\u5165\u3002 NCA(Neighborhood Component Analysis, \u90bb\u57df\u6210\u5206\u5206\u6790) NCA \u4e2d\u7684\u968f\u673a\u5206\u7c7b\u5668\u662f\u901a\u8fc7\u9644\u8fd1\u8bad\u7ec3\u5b9e\u4f8b\u7684\u591a\u6570\u6295\u7968\u6765\u6807\u8bb0\u67e5\u8be2\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f k \u4e2a\u6700\u8fd1\u90bb\u3002NCA \u5bf9\u4e8e\u4e0d\u540c\u6837\u672c\u4e4b\u95f4\u5b9a\u4e49\u4e86\u4e00\u4e2a softmax \u6982\u7387\uff1a \\[ p_{ij}=\\begin{cases} \\dfrac{exp(-||\\mathbf{L}x_i-\\mathbf{L}x_j||^2)}{\\sum_{k\\neq i}(exp(-||\\mathbf{L}x_i-\\mathbf{L}x_k||^2))} \\quad & if\\ i\\neq j \\\\ \\quad \\quad \\quad \\quad \\quad \\quad 0 \\quad & if\\ i=j \\end{cases} \\] \u800c\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u4e3a \\(\\epsilon_{NCA}=1-\\dfrac{1}{n}\\sum_{ij}p_{ij}y_{ij}\\) * \u4e0a\u8ff0\u4e09\u4e2a\u65b9\u6cd5\u4e2d, POLA \u548c MMC \u6709\u7740\u76f8\u540c\u7684\u4f18\u52bf\u548c\u52a3\u52bf\u3002\u8fd9\u4e24\u79cd\u7b97\u6cd5\u90fd\u57fa\u4e8e\u51f8\u4f18\u5316\uff0c\u4e0d\u5b58\u5728\u4f2a\u5c40\u90e8\u6781\u5c0f\u503c\u3002\u4f46\u5bf9\u8f93\u5165\u548c\u7c7b\u6807\u7b7e\u7684\u5206\u5e03\u505a\u4e86\u9690\u542b\u7684\u5047\u8bbe\uff08\u5355\u5cf0\u6216\u8005\u6b63\u6001\u5206\u5e03\uff09\uff0c\u4f46 kNN \u5e76\u6ca1\u6709\u9690\u542b\u5730\u5bf9\u8f93\u5165\u5206\u5e03\u505a\u51fa\u53c2\u6570\u5047\u8bbe\u3002\u800c\u5bf9\u4e8e NCA \u6765\u8bf4\uff0c\u867d\u7136\u8ddd\u79bb\u5ea6\u91cf\u7684\u53c2\u6570\u662f\u8fde\u7eed\u53ef\u5fae\u7684\uff0c\u4f46\u4e0a\u5f0f\u4e0d\u662f\u51f8\u7684\uff0c\u4e5f\u4e0d\u80fd\u7528\u7279\u5f81\u5411\u91cf\u65b9\u6cd5\u6700\u5c0f\u5316, \u5373 NCA \u4e2d\u7684\u4f18\u5316\u53ef\u80fd\u5b58\u5728\u4f2a\u5c40\u90e8\u6781\u5c0f\u503c\u3002","title":"\u76f8\u5173\u5de5\u4f5c"},{"location":"MLT/report/#_4","text":"\u8bba\u6587\u63d0\u51fa\u7684\u8ddd\u79bb\u5ea6\u91cf\u5b66\u4e60\u57fa\u4e8e\u4e0a\u8ff0\u7b97\u6cd5\u3002 \u8be5\u6a21\u578b\u57fa\u4e8e\u4e24\u4e2a\u76f4\u89c9 \u6bcf\u4e2a\u8bad\u7ec3\u8f93\u5165 \\(\\vec x_i\\) \u5e94\u4e0e\u5176 k \u4e2a\u6700\u8fd1\u90bb\u5c45\u5171\u4eab\u76f8\u540c\u7684\u6807\u7b7e \\(y_i\\) \u5176\u6b21\uff0c\u5177\u6709\u4e0d\u540c\u6807\u7b7e\u7684\u8bad\u7ec3\u8f93\u5165\u5e94\u88ab\u5e7f\u6cdb\u5206\u79bb\u3002 \u8fd9\u91cc\u8bba\u6587\u63d0\u51fa\u4e86\u4e24\u4e2a\u6982\u5ff5, target neighors(\u76ee\u6807\u90bb\u5c45) \u548c impostors(\u4f2a\u88c5\u8005) \u76ee\u6807\u90bb\u5c45 \u5b66\u4e60\u5f00\u59cb\u65f6\u6211\u4eec\u5c31\u6307\u5b9a\u6bcf\u4e2a\u8f93\u5165 \\(\\vec x_i\\) \u7684\u76ee\u6807\u90bb\u5c45\uff0c\u5373\u6211\u4eec\u6700\u5e0c\u671b \\(\\vec x_i\\) \u63a5\u8fd1\u7684\u70b9\u3002\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u5b66\u4e60\u8f93\u5165\u7a7a\u95f4\u7684\u7ebf\u6027\u53d8\u6362\uff0c\u8ba9 \\(\\vec x_i\\) \u7684\u76ee\u6807\u90bb\u5c45\u6210\u4e3a\u5176 k \u8fd1\u90bb\u90bb\u5c45\u3002 \u6211\u4eec\u7528 \\(i\\leadsto j\\) \u8868\u793a \\(i\\) \u662f \\(j\\) \u7684\u76ee\u6807\u90bb\u5c45\uff0c\u6ce8\u610f\u5230\u8fd9\u4e2a\u5173\u7cfb\u4e0d\u662f\u5bf9\u79f0\u7684\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u6709\u9884\u5907\u77e5\u8bc6\u3001\u8f85\u52a9\u4fe1\u606f\u6307\u5b9a\u76ee\u6807\u90bb\u5c45\u3002\u5982\u679c\u6ca1\u6709\u53ef\u4ee5\u6839\u636e\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u8ba1\u7b97\u5177\u6709\u76f8\u540c\u7c7b\u522b\u6807\u7b7e\u7684 k \u4e2a\u6700\u8fd1\u90bb\u5c45\u3002 \u4f2a\u88c5\u8005 \u5468\u754c\u662f\u6bcf\u4e2a\u8f93\u5165\u7684\u76ee\u6807\u90bb\u5c45\u6784\u6210\u7684\u8303\u56f4\u3002\u6211\u4eec\u628a\u4fb5\u5165\u5468\u754c\u7684\u5f02\u7c7b\u6807\u7b7e\u70b9\u79f0\u4e3a\u4f2a\u88c5\u8005\u3002 \u4e3a\u4e86\u589e\u5f3a\u7b97\u6cd5\u7684\u9c81\u68d2\u6027\uff0c\u6211\u4eec\u5728\u5468\u754c\u4e0e\u5f02\u7c7b\u70b9\u4fdd\u6301\u4e00\u4e2a\u5206\u7c7b\u88d5\u5ea6\u3002\u6ee1\u8db3 \\(||\\mathbf{L}(\\vec x_i-\\vec x_l)||^2 \\leq ||\\mathbf{L}(\\vec x_i - \\vec x_j)||^2 + 1\\) (\u8fd9\u91cc \\(x_i, x_j\\) \u6807\u7b7e\u76f8\u540c, \\(x_j\\) \u662f \\(x_i\\) \u7684\u76ee\u6807\u90bb\u5c45) \u7684\u70b9 \\(x_l\\) \u4e3a\u4f2a\u88c5\u70b9\u3002 \u8bba\u6587\u4e2d\u4e5f\u7ed9\u51fa\u4e86\u56fe\u89e3\u91ca \u57fa\u4e8e\u4e0a\u9762\u7684\u4e24\u4e2a\u76f4\u89c9\uff0c\u8bba\u6587\u7684\u6a21\u578b\u4e2d\u635f\u5931\u51fd\u6570\u5b58\u5728\u4e24\u4e2a\u7ade\u4e89\u9879 \u4e00\u4e2a\u9879\u60e9\u7f5a\u76f8\u540c\u6807\u7b7e\u4f46\u8ddd\u79bb\u8f83\u8fdc\u7684\u9644\u8fd1\u8f93\u5165\u4e4b\u95f4\u7684\u5927\u8ddd\u79bb \\(\\epsilon_{pull}(\\mathbf{L})=\\sum\\limits_{j\\leadsto i}||\\mathbf{L}(\\vec x_i - \\vec x_j)||^2\\) \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc \u4ec5\u60e9\u7f5a\u8f93\u5165\u548c\u5176\u76ee\u6807\u90bb\u5c45\u4e4b\u95f4\u7684\u5927\u8ddd\u79bb \u800c\u5e76 \u4e0d\u60e9\u7f5a\u6240\u6709\u540c\u7c7b\u6807\u8bb0\u8f93\u5165\u4e4b\u95f4\u7684\u5927\u8ddd\u79bb \u3002\u8fd9\u662f\u56e0\u4e3a\u51c6\u786e\u7684 kNN \u5206\u7c7b\u5e76\u4e0d\u8981\u6c42\u6240\u6709\u540c\u7c7b\u6807\u8bb0\u8f93\u5165\u90fd\u7d27\u5bc6\u805a\u96c6\u5728\u4e00\u8d77\u3002 \u4e00\u4e2a\u9879\u60e9\u7f5a\u4e0d\u540c\u6807\u7b7e\u4e4b\u95f4\u8ddd\u79bb\u8fc7\u5c0f\u7684\u8f93\u5165 \\(\\epsilon_{push}(\\mathbf{L})=\\sum\\limits_{i,j\\leadsto i}\\sum\\limits_l (1-y_{il})\\left[1+||\\mathbf{L}(\\vec x_i-\\vec x_j)^2-||\\mathbf{L}(\\vec x_i -\\vec x_l)||^2\\right]_{+}\\) \u6700\u540e\u6211\u4eec\u5f97\u5230\u5408\u9875\u635f\u5931\u51fd\u6570 \\(\\epsilon(\\mathbf{L})=(1-\\mu)\\epsilon_{pull}(\\mathbf{L})+\\mu \\epsilon_{pull}(\\mathbf{L})\\) \u8bba\u6587\u4e2d\u63d0\u5230\u5408\u9875\u635f\u5931\u51fd\u6570\u5bf9 \\(\\mu\\) \u7684\u53d6\u503c\u5e76\u4e0d\u654f\u611f\uff0c\u4e00\u822c\u53d6 0.5 \u5373\u53ef\u3002","title":"\u4e3b\u8981\u601d\u8def"},{"location":"MLT/report/#_5","text":"\u6211\u4eec\u5bf9\u635f\u5931\u51fd\u6570\u7684\u7ebf\u6027\u53d8\u6362\u7684\u8ddd\u79bb\u7528\u9a6c\u6c0f\u8ddd\u79bb\u8868\u793a \\(\\epsilon(\\mathbf{M})=(1-\\mu)\\sum\\limits_{i,j\\leadsto i}\\mathcal{D}_\\mathbf{M}(\\vec x_i, \\vec x_j)+\\mu\\sum\\limits_{i,j\\leadsto i}\\sum\\limits_l(1-y_{il})\\left[1+\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_j)-\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_l)\\right]_+\\) \u8fd9\u6837\u7684\u635f\u5931\u51fd\u6570\u635f\u5931\u662f\u4e00\u4e2a\u57fa\u4e8e\u534a\u6b63\u5b9a\u77e9\u9635\u9650\u5236\u6761\u4ef6\u7684\u51f8\u4f18\u5316\u95ee\u9898\u3002 \u6709\u65f6\u5019\u5468\u754c\u7684\u6761\u4ef6\u4e0d\u4e00\u5b9a\u80fd\u4e25\u683c\u6ee1\u8db3\uff0c\u56e0\u6b64\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u975e\u8d1f\u677e\u5f1b\u53d8\u91cf \\(\\xi_{ijl}\\) . \u5f97\u5230\u4e0b\u9762\u7684\u51f8\u4f18\u5316\u95ee\u9898 \\[ \\begin{align*} Minimize & \\ (1-\\mu)\\sum_{i,j\\leadsto i}(\\vec x_i-\\vec x_j)^\\top \\mathbf{M}(\\vec x_i- \\vec x_j)+\\mu \\sum_{i, j\\leadsto i,l}(1-y_{il})\\xi_{ijl} \\\\ subject\\ to \\ & (1) \\ (\\vec x_i-\\vec x_l)^\\top \\mathbf{M}(\\vec x_i-\\vec x_l) - (\\vec x_i-\\vec x_j)^\\top \\mathbf{M} (\\vec x_i-\\vec x_j) \\geq 1-\\xi_{ijl}\\\\ & (2) \\ \\xi_{ijl}\\geq 0\\\\ & (3) \\ \\mathbf{M}\\succeq 0 \\end{align*} \\] \u6b64\u5916\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5927\u90e8\u5206\u7684\u677e\u5f1b\u53d8\u91cf \\(\\xi_{ijl}=0\\) \u800c\u975e\u6b63\u503c\uff0c\u53ef\u4ee5\u5f97\u5230\u7279\u6b8a\u76ee\u7684\u7684\u6c42\u89e3\u5668\u3002\u8be5\u6c42\u89e3\u5668\u57fa\u4e8e\u5b50\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u548c\u4ea4\u66ff\u6295\u5f71\u7b97\u6cd5\uff0c\u53ef\u4ee5\u52a0\u901f\u6c42\u89e3\u7684\u8fc7\u7a0b\u3002","title":"\u51f8\u4f18\u5316"},{"location":"MLT/report/#_6","text":"\u57fa\u4e8e Mahalabonis Metric \u7684\u77e9\u9635 \\(M\\) \u53ef\u7528\u4e8e kNN \u7b97\u6cd5\u6765\u89e3\u51b3\u5206\u7c7b\u95ee\u9898\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u635f\u8017\u51fd\u6570\u4f5c\u4e3a\u6240\u8c13\u7684\u201c\u57fa\u4e8e\u80fd\u91cf\u7684\u201d\u5206\u7c7b\u5668\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u6d4b\u8bd5\u6837\u672c\uff0c\u6211\u4eec\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u989d\u5916\u7684\u8bad\u7ec3\u6837\u672c\uff0c\u5bf9\u53ef\u80fd\u7684\u6807\u7b7e\u5206\u522b\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u7684\u503c\uff0c\u6700\u540e\u9009\u62e9\u635f\u5931\u51fd\u6570\u503c\u6700\u5c0f\u7684\u7c7b\u522b\u4f5c\u4e3a\u8fd9\u4e2a\u6837\u672c\u7684\u9884\u6d4b\u503c\u3002 \\[ y_t = \\arg\\min\\left\\{(1-\\mu)\\sum\\limits_{j\\leadsto t}\\mathcal{D}_\\mathbf{M}(\\vec x_t,\\vec x_j) + \\mu\\sum\\limits_{j\\leadsto t,l}(1-y_{tl})\\left[1+\\mathcal{D}_\\mathbf{M}(\\vec x_t-\\vec x_j)-\\mathcal{D}_\\mathbf{M}(\\vec x_t-\\vec x_l)\\right]_+ +\\mu\\sum\\limits_{i,j\\leadsto t}(1-y_{it})\\left[1+\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_j)-\\mathcal{D}_\\mathbf{M}(\\vec x_i-\\vec x_t)\\right] \\right\\}. \\]","title":"\u57fa\u4e8e\u80fd\u91cf\u5206\u7c7b"},{"location":"MLT/report/#_7","text":"\u5b9e\u9a8c\u4e2d\u8bc4\u4f30\u4e86\u4e5d\u4e2a\u4e0d\u540c\u5927\u5c0f\u548c\u96be\u5ea6\u7684\u6570\u636e\u96c6\u7684 LMNN \u5206\u7c7b\u3002\u5176\u4e2d\u4e00\u4e9b\u6570\u636e\u96c6\u6765\u81ea\u4e8e\u56fe\u50cf\u3001\u8bed\u97f3\u548c\u6587\u672c\u7684\u96c6\u5408\uff0c\u4ea7\u751f\u4e86\u975e\u5e38\u9ad8\u7ef4\u7684\u8f93\u5165\uff0c\u9488\u5bf9\u8fd9\u4e9b\u4f7f\u7528\u4e86PCA\u6765\u51cf\u5c11\u8bad\u7ec3\u524d\u8f93\u5165\u7684\u7ef4\u6570\u3002\u5176\u4e2d\u6d4b\u8bd5\u96c6\u5305\u62ec\u5c0f\u6570\u636e\u96c6\u3001\u4eba\u8138\u8bc6\u522b\u4efb\u52a1\u3001\u8bed\u97f3\u8bc6\u522b\u3001\u5b57\u6bcd\u8bc6\u522b\u3001\u6587\u672c\u5206\u7c7b\u3001\u624b\u5199\u6570\u5b57\u8bc6\u522b\u3002 \u5728\u5404\u79cd\u5927\u5c0f\u548c\u96be\u6613\u7a0b\u5ea6\u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5\u540e\u53d1\u73b0\uff0c\u5728\u6b64\u65b9\u5f0f\u4e0b\u8bad\u7ec3\u51fa\u6765\u7684\u6307\u6807\u80fd\u591f\u663e\u8457\u63d0\u9ad8 kNN \u5206\u7c7b\u7ed3\u679c\uff0c\u5177\u4f53\u5982\u4e0b\uff1a \u4f7f\u7528 \u9a6c\u6c0f\u8ddd\u79bb \u7684 LMNN \u5206\u7c7b\u65b9\u6cd5\u59cb\u7ec8\u4f18\u4e8e\u4f7f\u7528 \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb \u7684 kNN \u5206\u7c7b\u65b9\u6cd5\u3002 \u57fa\u4e8e\u80fd\u91cf\u7684\u51b3\u7b56\u89c4\u5219 \u8fdb\u4e00\u6b65\u6539\u5584\u4e86\u4f7f\u7528\u9a6c\u6c0f\u8ddd\u79bb\u8fdb\u884c kNN \u5206\u7c7b \u5f53\u9700\u8981\u67d0\u79cd\u5f62\u5f0f\u964d\u7ef4\u9884\u5904\u7406\u65f6, LMNN\u5206\u7c7b\u4e0e PCA \u76f8\u6bd4LDA\u6548\u679c\u66f4\u597d\u3002 LMNN \u5206\u7c7b\u5bf9\u8f83\u5927\u6570\u636e\u96c6\u4ea7\u751f\u66f4\u5927\u7684\u6539\u8fdb\u3002 \u8bba\u6587\u8ba4\u4e3a\u968f\u7740\u6837\u672c\u5bc6\u5ea6\u589e\u52a0\uff0c\u53ef\u4ee5\u9009\u62e9\u7684\u76ee\u6807\u90bb\u5c45\u5b66\u4e60\u5230\u66f4\u53ef\u9760\u7684\u5224\u522b\u4fe1\u53f7\u3002\uff08\u9009\u62e9\u7684\u65b9\u6cd5\u662f\u57fa\u4e8e\u964d\u7ef4\u540e\u7684\u8f93\u5165\u7a7a\u95f4\u4e2d\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u9009\u62e9\u76ee\u6807\u90bb\u5c45\uff09 \u57fa\u4e8e\u80fd\u91cf\u7684 LMNN \u7b97\u6cd5\u4e0e SVM \u6c34\u5e73\u76f8\u5f53\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u8bba\u6587\u8fd8\u63d0\u51fa\u4e86\u6734\u7d20 LMNN \u7b97\u6cd5\u53ef\u4ee5\u6709\u7684\u6539\u5584 Multi-pass LMNN(\u591a\u6b21\u8fed\u4ee3 LMNN) LMNN \u5b58\u5728\u9700\u8981\u9884\u5148\u6307\u5b9a\u76ee\u6807\u90bb\u5c45\u7684\u7f3a\u70b9\u3002\u6211\u4eec\u9ed8\u8ba4\u9009\u62e9\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u4e0d\u4e00\u5b9a\u80fd\u7b26\u5408\u5b9e\u9645\u8fd0\u7528\u7684\u60c5\u51b5\u3002\u56e0\u6b64\u53ef\u4ee5\u91c7\u7528\u8fed\u4ee3\u7684\u65b9\u5f0f\uff0c\u6bcf\u8f6e\u8fed\u4ee3\u57fa\u4e8e\u4e4b\u524d\u7ed3\u679c\u91cd\u65b0\u6307\u5b9a\u76ee\u6807\u90bb\u5c45\u3002 Multi-metric LMNN(\u591a\u5c3a\u5ea6 LMNN) \u5728\u67d0\u4e9b\u6570\u636e\u96c6\u4e0a\uff0c\u8f93\u5165\u7a7a\u95f4\u7684\u5168\u5c40\u7ebf\u6027\u53d8\u6362\u53ef\u80fd\u4e0d\u8db3\u4ee5\u6539\u8fdb kNN \u5206\u7c7b\u3002\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u591a\u4e2a\u672c\u5730\u7ebf\u6027\u8f6c\u6362\u800c\u4e0d\u662f\u5355\u4e00\u5168\u5c40\u7ebf\u6027\u8f6c\u6362\u3002 \u5177\u4f53\u53ef\u4ee5\u4f7f\u7528 K-means \u7b49\u805a\u7c7b\u7b97\u6cd5\u5148\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u5272\u805a\u7c7b\uff0c\u968f\u540e\u5bf9\u6bcf\u4e00\u4e2a\u805a\u7c7b\u8bad\u7ec3\u4e00\u4e2a\u5c40\u90e8\u7684\u9a6c\u6c0f\u8ddd\u79bb\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u7ec4\u5408\u3002 Kernel Version \u548c\u4e0a\u8bfe\u6240\u8bb2\u7684 SVM \u4e2d\u7684\u6838\u65b9\u6cd5\u7c7b\u4f3c, LMNN \u4e5f\u53ef\u4ee5\u5229\u7528\u6838\u65b9\u6cd5\u6269\u5c55\u5230\u4e00\u4e2a\u975e\u7ebf\u6027\u7279\u5f81\u7a7a\u95f4\u3002 Dimensionality Reduction(\u7ef4\u6570\u5f52\u7ea6) \u6839\u636e\u8bad\u7ec3\u51fa\u6765\u7684\u7ebf\u6027\u53d8\u6362\u77e9\u9635 \\(L\\) , \u53d6\u4ed6\u7684\u4e3b\u7279\u5f81\uff08\u7279\u5f81\u503c\u6700\u5927\u7684\u7279\u5f81\u5411\u91cf\uff09\u6784\u5efa\u6620\u5c04\u77e9\u9635 \\(P\\) , \u539f\u6570\u636e\u5c31\u53ef\u4ee5\u901a\u8fc7\u6620\u5c04\u77e9\u9635\u8fdb\u884c\u964d\u7ef4\u3002 Ball Tree kNN \u7684\u590d\u6742\u5ea6\u4f9d\u8d56\u4e8e\u6837\u672c\u6570\u91cf\u548c\u6837\u672c\u7684\u7ef4\u5ea6\uff0c\u5f53\u6570\u636e\u91cf\u548c\u7ef4\u5ea6\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u6bcf\u6b21\u8ba1\u7b97\u7684\u590d\u6742\u5ea6\u4f1a\u5f88\u9ad8. Ball Tree \u7684\u6bcf\u4e2a\u5206\u5272\u70b9\u8ddd\u79bb\u7684\u8fb9\u754c\u7b49\u4e8e\u7403\u5fc3\u5230\u6d4b\u8bd5\u70b9\u8ddd\u79bb\u51cf\u53bb\u7403\u7684\u534a\u5f84\u3002\u7ecf\u8fc7\u6d4b\u8bd5\u53d1\u73b0 Ball Tree \u5bf9\u4e8e\u4e0d\u540c\u7684\u7ef4\u5ea6\u6570\u636e\u90fd\u80fd\u8fbe\u5230\u641c\u7d22\u7684\u4f18\u5316\u3002\u7ef4\u5ea6\u8d8a\u4f4e\uff0c\u8fd9\u79cd\u4f18\u5316\u6548\u7387\u8d8a\u9ad8\u3002","title":"\u6210\u679c\u548c\u6269\u5c55"},{"location":"MLT/report/#_8","text":"\u8fd9\u7bc7\u8bba\u6587\u8bb2\u89e3\u4e86\u4e00\u79cd\u57fa\u4e8e\u9a6c\u6c0f\u5ea6\u91cf\u7684\u8bad\u7ec3\u65b9\u6cd5\uff0c\u5c06\u8bad\u7ec3\u7684\u8fc7\u7a0b\u8f6c\u5316\u4e3a\u89e3\u51b3\u4e00\u4e2a SDP \u95ee\u9898\u3002\u540c\u65f6\u57fa\u4e8e\u6b64\u63d0\u51fa\u4e86\u4e0d\u4f9d\u8d56\u8d85\u53c2\u6570\u7684 LMNN \u7b97\u6cd5\uff0c\u6781\u5927\u63d0\u5347\u4e86 kNN \u5206\u7c7b\u5668\u7684\u51c6\u786e\u6027\uff1b\u540c\u65f6\u8fd8\u63d0\u51fa\u4e86\u57fa\u4e8e\u80fd\u91cf\u7684\u7b97\u6cd5\uff0c\u4ee5\u89e3\u51b3\u5206\u7c7b\u95ee\u9898\u3002 \u56de\u987e\u8fd9\u7bc7\u8bba\u6587\uff0c\u867d\u7136\u4e3b\u8981\u6d89\u53ca\u5230\u5ea6\u91cf\u5b66\u4e60\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u4f46\u601d\u60f3\u4e0a\u548c\u6211\u4eec\u4e0a\u8bfe\u5b66\u4e60\u7684 SVM \u662f\u5f88\u63a5\u8fd1\u7684\u3002 \u652f\u6301\u5411\u91cf\u673a\u672c\u8d28\u4e0a\u4e5f\u662f\u8981\u627e\u4e00\u4e2a\u6700\u5927\u5316\u5206\u7c7b\u88d5\u5ea6\u7684\u8d85\u5e73\u9762\uff0c\u5e76\u7528\u8fd9\u4e2a\u8d85\u5e73\u9762\u5b8c\u6210\u5206\u7c7b\u4efb\u52a1\u3002\uff08\u548c\u524d\u6587\u63d0\u5230\u7684\u5468\u754c\u7c7b\u4f3c\uff09\u800c\u8fd9\u662f\u4e00\u4e2a\u51f8\u4e8c\u6b21\u89c4\u5212\u95ee\u9898\u3002\u5bf9\u4e8e\u6570\u636e\u96c6\u4e2d\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u60c5\u51b5\uff0c\u5373\u51fd\u6570\u95f4\u9694\u65e0\u6cd5\u5927\u4e8e 1 \u7684\u70b9\u6211\u4eec\u5f15\u5165\u4e86\u677e\u5f1b\u53d8\u91cf\uff0c\u6539\u5199\u540e\u7684\u4f18\u5316\u95ee\u9898\u5176\u5b9e\u5c31\u662f\u5728\u5bfb\u627e\u6700\u5927\u88d5\u5ea6\u7684\u51b3\u7b56\u8fb9\u754c\u548c\u677e\u5f1b\u56e0\u5b50\u7ec4\u5408\uff0c\u4f7f\u5f97\u8fdd\u80cc\u7ebf\u6027\u53ef\u5206\u7684\u6570\u636e\u70b9\u5f71\u54cd\u6700\u5c0f\u3002 \u800c\u8bba\u6587\u4e2d\u7684\u7b97\u6cd5\u5c31\u662f\u5c06\u4e0a\u8ff0 SVM \u7684 margin \u601d\u60f3\u5e94\u7528\u5230\u4e86 kNN \u7b97\u6cd5\u4e2d\uff0c\u5373\u6c42\u4e00\u4e2a\u8ddd\u79bb\u5ea6\u91cf\uff0c\u4f7f\u5f97\u6837\u672c\u70b9\u53ca\u5176\u76ee\u6807\u90bb\u5c45\u7ec4\u6210\u7684\u5468\u754c\u7684\u5206\u7c7b\u88d5\u5ea6\u5c3d\u53ef\u80fd\u5927\u3002 \u6b64\u5916\u6211\u8ba4\u4e3a\u8bba\u6587\u4e2d\u63d0\u5230\u7684\u6269\u5c55\u4e5f\u5f88\u597d\u5730\u6539\u5584\u4e86\u6734\u7d20 LMNN \u7b97\u6cd5\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u4e5f\u548c\u6211\u4eec\u4e0a\u8bfe\u6240\u5b66\u7684\u5185\u5bb9\u606f\u606f\u76f8\u5173\u3002\u8fd9\u4e9b\u4f18\u5316\u601d\u60f3\u4e5f\u5177\u6709\u76f8\u5f53\u7684\u666e\u9002\u6027\uff1a\u8fed\u4ee3\u8bad\u7ec3\uff0c\u6bcf\u6b21\u7684\u76ee\u6807\u90bb\u5c45\u662f\u57fa\u4e8e\u4e4b\u524d\u7684\u8bad\u7ec3\u7ed3\u679c\uff1b\u5148\u805a\u7c7b\u518d\u57fa\u4e8e\u6bcf\u4e2a\u7c7b\u5206\u522b\u8bad\u7ec3\u5ea6\u91cf\uff1b\u5229\u7528\u6838\u65b9\u6cd5\u6620\u5c04\u5230\u9ad8\u7ef4\u7a7a\u95f4\uff1b\u6570\u636e\u964d\u7ef4\uff1b\u4ee5\u53ca ball tree \u4f18\u5316 kNN \u8fd1\u90bb\u641c\u7d22\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4ec5\u9002\u7528\u4e8e kNN \u95ee\u9898\uff0c\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u5c06\u5176\u5e94\u7528\u4e8e\u4efb\u4f55\u57fa\u4e8e\u8f93\u5165\u6837\u672c\u8ddd\u79bb\u5ea6\u91cf\u7684\u76d1\u7763\u5b66\u4e60\u95ee\u9898\uff0c\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002","title":"\u8ba8\u8bba"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/","text":"Rings \u00b6 Definition \u00b6 A ring satisfies \\(R\\neq \\empty\\) \\(R\\times R \\rightarrow R \\quad i.e.(r,s) \\rightarrow r+s\\) (R,+) is an Abelian group(associativity, commutativity, inverse element, identity element). \\(R\\times R \\rightarrow R \\quad i.e.(r,s) \\rightarrow r\\cdot s\\) (R, \\(\\cdot\\) ) satisfying associative law. \\(a(b+c)=ab+ac \\quad (b+c)a=ba+ca\\) e.g. \\(F\\) is a field, which is also a ring.( \\(Q,R,C\\) ) \\(F[x]={\\sum\\limits_{i=0}^na_ix^i|a_i\\in F}\\) is a ring. \\(Z_n=\\{\\overline0,\\overline1,\\ldots,\\overline{n-1}\\}\\) where \\(\\overline k =\\{np+k\\mid p\\in Z\\}\\) and it satisfies \\(\\overline k + \\overline l =\\{n(p+q)+k+l\\mid p,q\\in Z\\}=\\overline{k+l}\\) \\(\\overline k \\cdot \\overline l=\\{(np+k)(nq+l)\\mid p,q \\in Z\\}=\\overline{kl}\\) \\(\\overline {k}(\\overline l + \\overline s)=\\overline k \\overline l + \\overline k \\overline s=\\overline k\\ \\overline{l+s}=\\overline{kl+ks}\\) \\(M_n(F)=F^{n\\times n}=\\{(a_{ij}\\mid a_{ij}\\in F)\\}\\) and \\((M_n(F), +, \\cdot)\\) is a ring \\(R_1\\times R_2=\\{(a,b)\\mid a\\in R_1,b\\in R_2\\}\\) and we define \\((a_1,b_1)+(a_2,b_2)=(a_1+b_1,a_2+b_2)\\) \\((a_1,b_1)(a_2,b_2)=(a_1 b_1,a_2 b_2)\\) Properties \u00b6 Unit, identity(\u5355\u4f4d\u5143, \u6052\u7b49\u5143) \u00b6 def: an element \\(a\\) is called an identity if \\(\\forall a \\in R \\quad 1\\cdot a = a\\cdot 1 =a\\) Not every ring has an identity. e.g. \\(2\\Z=\\{2n\\mid n \\in \\Z\\}\\) suppose \\(R\\) is a ring, \\(\\Z\\times R =\\{(n,r)\\mid n\\in \\Z r\\in R\\}\\) and we define \\((n,r)+(m,s)=(n+m,r+s)\\quad (n,r)\\cdot (m,s)=(nm,rs+ns+rm)\\) then \\(\\Z\\times R\\) has a unit \\((1,0)\\) and we find \\((0,r)+(0,s)=(0,r+s)\\quad (0,r)\\cdot(0,s)=(0,rs)\\) Note:\u4efb\u610f\u73af\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\u6269\u5145\u4e3a\u6709\u5355\u4f4d\u5143\u7684\u73af, \u800c\u4e14\u8fd8\u4fdd\u7559\u4e86 \\(R\\) \u4e0a\u7684\u8fd0\u7b97. Commutative Ring \u00b6 def: A ring is called commutative if \\(\\forall a,b\\in R\\quad ab=ba\\) , otherwise if \\(\\exist a,b\\in R ab\\neq ba\\) it is called noncommutative . e.g. \\(\\mathbb{R},\\mathbb{C}[x]\\) are commutative, while \\(M_n(R)\\) is noncommutative. Domain Ring(\u6574\u73af) \u00b6 def: \\(a \\in R\\) there is a nonzero element \\(b\\) such that \\(ab=0\\) , \\(a\\) is called left zero-divisor(\u5de6\u96f6\u56e0\u5b50) . Similarily we can define right zero-divisor . 0 must be zero-divisor. proof: \\(0\\cdot a = (0+0)a=0\\cdot a + 0\\cdot a\\) so \\(0=0\\cdot a +(- 0\\cdot a)=0\\cdot a +0\\cdot a +(-0\\cdot a)=0\\cdot a\\) thus we get \\(0\\cdot a =0\\) def: A ring is called domain ring if \\(\\lvert R \\rvert \\ge 2\\) \\(R\\) has no nonzero zero-divisor. e.g. \\(\\overline Z_6\\) is not a domain ring since \\(\\overline 2 \\cdot \\overline 3 = \\overline 0\\) \\(H=\\{ \\left[\\begin{matrix} a+bi & c+di\\\\ -c+di & a-bi \\end{matrix} \\right] \\mid a,b,c,d\\in R \\ and\\ i=\\sqrt{-1} \\}\\) \\(H\\) is noncommutative but it is a domain ring.(proof?) Division Ring(\u9664\u73af) \u00b6 def: \\(a\\in R\\) is invertible if \\(\\exist b \\ s.t.ab=ba=1\\) e.g. in \\(M_n(R)\\) , \\(A\\) is invertible $ \\Leftrightarrow\\lvert {A} \\rvert \\neq 0$ \\(0\\) is always not invertible since \\(0 \\cdot a =1 \\Rightarrow 0\\cdot a = 0 =1\\) then \\(R=\\{0\\}\\) where \\(\\forall r \\in R,\\ r=1\\cdot r=0\\cdot r =0\\) \\(H\\) is a domain ring since \\(\\left[\\begin{matrix} a+bi & c+di \\\\ -c+di& a-bi \\end{matrix} \\right]^{-1}=\\frac{1}{a^2+b^2+c^2+d^2}\\left[\\begin{matrix} a-bi & -c+di \\\\ c+di& a+bi \\end{matrix} \\right]\\) def: A ring is called division ring(or skew-field\u659c\u57df) if \\(\\lvert R \\rvert \\ge 2\\) nonzero element is invertible. e.g. Z is not division ring while Q is division ring. Field(\u57df) \u00b6 def: A commutative division ring is called field. Note : \u57df\u4e2d\u5fc5\u6709\u5355\u4f4d\u5143. Subring \u00b6 def: \\(\\empty\\neq S\\subseteq (R,+,\\cdot)\\) it is called a subring of \\(R\\) if it satisfies \\(\\forall a,b\\in R\\quad a-b\\in S\\) \\(\\forall a,b\\in R\\quad ab\\in R\\) Note : \u4e3a\u4ec0\u4e48\u662f \\(a-b\\in S\\) \u800c\u4e0d\u662f \\(a+b\\in S\\) ? \u4e3a\u4e86\u786e\u4fdd\u4efb\u610f\u5143\u7d20\u7684\u8d1f\u5143\u4e5f\u5728\u96c6\u5408\u4e2d \u800c\u7ebf\u6027\u7a7a\u95f4\u4e2d\u56e0\u4e3a\u8981\u5bf9\u6570\u4e58\u5c01\u95ed, \\((-1)a=-a\\) \u6545\u8d1f\u5143\u4e00\u5b9a\u5728\u96c6\u5408\u4e2d. suppose \\(S_1,S_2\\) are subring of \\(R\\) , then \\(S_1+S_2=\\{a_1+a_2\\mid a_1\\in S_1,a_2\\in S_2\\}\\) is not a subring of \\(R\\) , \\(S_1\\cap S_2\\) is a subring, and \\(S_1\\cup S_2\\) is not a subring. e.g. \\(R=\\mathbb{Q}[\\sqrt2,\\sqrt3,\\sqrt{6}]=\\{a+b\\sqrt2+c\\sqrt3+d\\sqrt6\\mid a,b,c,d\\in \\mathbb{Q}\\}\\) and \\(R\\leq (\\R,+,\\cdot)\\) let \\(S_1=Q[\\sqrt2]=\\{a+b\\sqrt2\\mid a,b\\in \\mathbb{Q}\\}\\) \\(S_2=Q[\\sqrt3]=\\{a+b\\sqrt3\\mid a,b\\in \\mathbb{Q}\\}\\) and both are subrings of \\(R\\) but \\(S_1+S_2=\\{a+b\\sqrt2+c\\sqrt3\\mid a,b,c\\in \\mathbb{Q}\\}\\) is not a subring since \\(\\sqrt2\\cdot\\sqrt 3 =\\sqrt 6 \\notin S_1+S_2\\) \\(Z\\) has an identity, but its subring \\(2\\Z\\) has no identiy. \\(S=\\{\\left[ \\begin{matrix}a&b&0\\\\c&d&0\\\\0&0&0\\end{matrix}\\right]\\mid a,b,c,d\\in\\R\\}\\leq M_n(R)\\) their identities are not the same.( \\(S:\\left[ \\begin{matrix}1&0&0\\\\0&1&0\\\\0&0&0\\end{matrix}\\right]\\) abd \\(M_n(R):\\left[\\begin{matrix}1&0&0\\\\0&1&0\\\\0&0&1\\end{matrix}\\right]\\) ) Ideal \u00b6 def: \\(\\empty\\neq S\\subseteq (R,+,\\cdot)\\) it is called a left ideal of \\(R\\) if it satisfies \\(\\forall a,b\\in R\\quad a-b\\in S\\) \\(\\forall a\\in S,b\\in R \\quad ba\\in S\\) and we denote it by \\(I\\lhd R\\) Similarily we define right ideal. ideal = left ideal + right ideal. proposition : suppose \\(I_1,I_2\\) are left ideal, then \\(I_1+I_2=\\{a+b\\mid a\\in I_1,b\\in I_2\\}, I_1\\cap I_2=\\{a\\cdot b\\mid a\\in I_1,b\\in I_2\\}\\) are also ideals. proof: suppose \\(\\forall a_i,b_i\\in I_i\\) where \\(i=1,2\\) \\((a_1+a_2)-(b_1+b_2)=(a_1-b_1)+(a_2-b_2)\\in I_1 +I_2\\) \\(\\forall r\\in R \\quad r(a_1+a_2)=ra_1+ra_2\\in I_1+I_2\\) 0 always in ideal since \\(a-a=0\\) we can define \\((a\\rangle=\\cap \\{I\\) is a left ideal of \\(R\\) containg \\(a\\) \\(\\}\\) proposition : \\((a\\rangle=\\{na+ra\\mid n\\in Z, r\\in R\\}\\) this ideal containg \\(a\\) and \\(\\forall\\) ideal containing \\(a\\) \\(\\Rightarrow (a\\rangle \\sube I\\) proof : \\(a\\) in this set \\(a = 1*a+0*a\\) where \\(1\\in Z,0\\in R\\) thus \\(a\\in (a\\rangle\\) this set is an ideal \\(\\forall n_1a+r_1a, n_2a+r_2a\\in(a\\rangle\\) then \\((n_1a+r_1a)-(n_2a+r_2a)=(n_1-n_2)a+(r_1-r_2)a\\in (a\\rangle\\) where \\(n_1-n_2\\in \\Z,r_1-r_2\\in R\\) \\(\\forall b\\in R, na+ra \\in (a\\rangle\\) then \\(b(na+ra)=nba+bra\\in (a\\rangle\\) where \\(nb\\) the minimum ideal containg \\(a\\) suppose an ideal \\(I\\) containing \\(a\\) , out target is to prove \\((a\\rangle\\sube I\\) \\(\\forall\\ na+ra\\in (a\\rangle\\) then \\(a\\in I, r\\in R \\Rightarrow ra\\in I\\) and \\(na = \\left\\{ \\begin{matrix}a+a+\\ldots+a,n>0 \\\\ 0,n=0 \\\\ (-a)+(-a)+\\ldots+(-a),n<0\\end{matrix}\\right.\\) so \\(na\\in I\\) thus \\(na+ra\\in I\\) \\(\\square\\) suppose \\(R\\) has an identity, \\(na =1_R\\cdot a+1_R\\cdot a+\\dots+1_R\\cdot a= (n1_R)\\cdot a\\) where \\(n1_R\\in R\\) so \\((a\\rangle\\) can be writed as \\(\\{ra\\mid r\\in R \\}=Ra\\) Similarily, \\((a)=\\{\\sum\\limits_{i=0}^nr_ias_i+ra+as+na\\mid r_i,s_i,r,s\\in R, n\\in\\N\\}\\stackrel{+1_R}=\\{\\sum\\limits_{i=0}^nr_ias_i\\mid r_i,s_i\\in R, n\\in \\N\\}=RaR\\) suppose \\(R\\) is commutative, then \\(\\langle a)=(a\\rangle=(a)\\) PID(\u4e3b\u7406\u60f3\u6574\u73af) \u00b6 def: An ideal is called principa l if it can be generated by one element. def: \\(R\\) is called left(resp. right) principal ring if every left(resp. right)ideal is generated by one element. def: A commutative principal domain is simply denoted by PID . e.g. \\((\\Z,+,\\dot)\\) is a PID. proof: let \\(I\\) be an ideal of \\(Z\\) \\(I=\\{0\\}=(0)=Z\\cdot0=\\{0\\}\\) \\(0\\) ideal must be principal ideal. \\(I\\neq\\{0\\}\\) so \\(\\exist n\\in I,n\\neq0\\) without loss of generalization, we assume \\(n\\in I\\) and \\(n>0\\) (since \\(-n=0-n\\in I\\) , so both \\(n\\) and \\(-n\\) in \\(I\\) ) let \\(n\\) be the least of the set \\(\\{n\\in I,n>0\\}\\) our target is to show \\(I=(n)=n\\Z\\) \\(n\\in I \\Rightarrow(n)\\sube I\\) \\(\\forall m\\in I\\quad m=qn+r(0\\le r\\leq n-1)\\) so \\(r=m-qn\\in I\\) where \\(m\\in I\\) and \\(qn\\in(n)\\sube I\\) by choice of n, \\(r\\) must be \\(0\\) . Otherwise \\(r\\neq0, r<n\\) contradicts the assumption that \\(n\\) is the least element which is gereater than \\(0\\) . Thus, \\(m=qn\\in(n)\\) \\(\\Z\\) is a principal ideal. Apparently, \\(Z\\) is commutative and domain. By the proof above, we can similarily prove \\((F[x],+,\\cdot)\\) is a PID where \\(F\\) is a field. Every field is a PID. proof : suppose \\(F\\) is a field, \\(I\\) is an ideal of \\(F\\) . We assert that \\(I\\) can be either \\((0)\\) or \\((1)=F\\) . \\(I=\\{0\\}=(0)\\) \\(I\\neq\\{0\\}\\) we get \\(a\\in I,a\\neq0\\Rightarrow a^{-1}a=1\\in I\\) where \\(a^{-1}\\in F,a\\in I\\) \\(\\forall b\\in F,b=b\\cdot 1\\in I\\) where \\(b\\in F, 1\\in I\\) so we know \\(F\\sube I\\) and obviously \\(I\\sube F\\) thus \\(I=F=(1)\\) Note : \u57df(\u9664\u73af)\u4e2d\u6ca1\u6709\u975e\u5e73\u51e1\u7406\u60f3. \\(M_n(\\R)\\) is PID. \\(I=\\{0_{n\\times n}\\}=(0_{n\\times n})\\) \\(I\\neq\\{0_{n\\times n}\\}\\) then \\(\\forall A=(a_{ij})\\in I, A\\neq 0\\) so \\(\\exist a_{kl}\\neq 0\\) thus \\(\\forall i,j\\in \\N,E_{ik}AE_{lj}=a_{kl}E_{ij}\\) where \\(E_{ij}\\) represent a matrix whose \\((i,j)\\) element is \\(1\\) . so \\(a_{kl}^{-1}E_{ik}AE_{lj}=E_{ij}\\in I\\) where \\(E_{lj}\\in M_n(\\R), A\\in I\\) and \\(a_{kl}^{-1}E_{ik}=(a_{kl}^{-1}E)E_{ik}\\in M_n(\\R)\\) for the definition of ideal. $\\Rightarrow \\forall M=(b_{ij})\\in M_n(\\R)\\quad M=\\sum x_{ij}E_{ij}=\\sum (x_{ij}E)E_{ij}\\in I $ Therefore, \\(M_n(\\R)\\sube I\\Rightarrow I=M_n(\\R)\\) Note : \u975e\u4ea4\u6362, \u975e\u6574\u73af\u4e5f\u53ef\u4ee5\u53ea\u6709\u4e24\u4e2a\u7406\u60f3. Proposition: \\(A\\) is similar to a diagonal matrix \\(\\Leftrightarrow\\) there is a splitting polynomical \\(f(x)\\) which has no mutiplicity roots(\u91cd\u6839) \\(s.t. f(A)=0\\) proof Quotient Ring(\u5546\u73af) \u00b6 def: suppose \\(I\\) is an ideal of \\(R\\) , then \\(R/I=\\{a+I\\mid a\\in R\\}\\) is called quotient ring. \u200b and we define \\((a+I)+(b+I)=(a+b)+I,(a+I)(b+I)=ab+I\\) Note : \u5546\u73af\u4e2d\u7684\u5143\u7d20 \\(a+I=\\{a+b\\mid b\\in I\\}\\) \u4e5f\u662f\u4e00\u4e2a\u96c6\u5408, \u82e5 \\(a\\in I\\) \u5219 \\(a+I=0+I=0\\) . \u82e5 \\(R=I\\) , \u5219\u89c4\u5b9a \\(R/I=0\\) proposition: \\(a_1+I=a_2+I\\Leftrightarrow a_1-a_2\\in I\\) proof: \\(\\Rightarrow\\) \\(a_1\\in a_1+I=a_2+I\\) so \\(\\exist x\\in I\\ s.t.a_1=a_2+x\\) thus \\(a_1-a_2=x\\in I\\) \\(\\Leftarrow\\) \\(\\forall a_1+x\\in a_1+I\\) where \\(x\\in I\\) so \\(a_1+x=a_2+x+(a_1-a_2)\\in a_2+I\\) since \\(x\\in I,(a_1-a_2)\\in I\\) therefore, \\(a_1+I\\sube a_2+I\\) . Similarily, we can prove \\(a_2+I\\sube a_1+I\\) so \\(a_1+I=a_2+I\\) . Note: \u5bf9\u4e8e\u5546\u73af \\(R/I\\) \u6211\u4eec\u9700\u8981\u9a8c\u8bc1 well-defined . \u5373\u82e5 \\(a+I=a'+I,b+I=b'+I\\) \u5219\u8981\u6ee1\u8db3 \\(a+b+I=a'+b'+I,ab+I=a'b'+I\\) \u5373\u4e0d\u540c\u5f62\u5f0f\u540c\u4e00\u672c\u8d28\u7684\u5143\u7d20\u5e94\u8be5\u6620\u5c04\u540e\u5f97\u5230\u7684\u5143\u7d20\u5e94\u8be5\u76f8\u540c. Maximal Ideal(\u6781\u5927\u7406\u60f3) \u00b6 def: suppose \\(I\\neq R\\) is an ideal of \\(R\\) , \\(I\\) is called to be maximal ideal if \\(\\forall J\\lhd R,J\\supe I \\Rightarrow \\left\\{\\begin{matrix}J=I \\\\ R\\end{matrix}\\right.\\) Note: \u6781\u5927\u7406\u60f3 \\(I\\) \u5373\u53ea\u88ab \\(I\\) \u548c \\(R\\) \u5305\u542b.( \\(R\\) \u662f\u81ea\u8eab\u7684\u7406\u60f3.) Proposition: suppose \\(R\\) is commutative ring with identity, then \\(M\\) is a maximal ideal \\(\\Leftrightarrow\\) \\(R/M\\) is a field. proof: Homomorphism(\u540c\u6001) \u00b6 def: \\(\\phi:R_1\\rightarrow R_2\\) and it statisfies \\(\\phi(a+b)=\\phi(a)+\\phi(b),\\phi(ab)=\\phi(a)\\phi(b),\\phi(1)=1\\) then it is called a homomorphism. def: \\(\\phi\\) is called monomorphism(\u5355\u540c\u6001) if \\(a\\neq b \\Rightarrow\\phi(a)\\neq\\phi(b)\\) def: $\\phi $ is called epiomorphism(\u6ee1\u540c\u6001) if \\(r\\in R_2\\ \\exist a\\in R_1\\ s.t.\\phi(a)=r\\) . isomorphism(\u540c\u6784) = injective + surjective we define \\(\\ker\\phi=\\{a\\in R_1\\mid \\phi(a)=0\\}\\) \\(Im\\phi=\\{\\phi(a)\\mid a\\in R_1\\}\\) e.g. \\(\\phi:\\Z\\rightarrow \\Z_n\\) and \\(a\\rightarrow \\overline{a}=\\{a+kn\\mid k\\in \\Z\\}\\) and it\u2019s easy to verify it is a homomorphism. \u200b \\(\\ker\\phi={a\\in\\Z\\mid \\overline a=\\overline 0}=n\\Z=(n)\\quad Im\\phi=\\Z_n\\) proposition: \\(\\ker\\phi\\) is an ideal of \\(R\\) . proof: \\(0\\in \\ker\\phi\\) since \\(\\phi(0)=\\phi(0+0)=\\phi(0)+\\phi(0)\\Rightarrow \\phi(0)=0\\) thus \\(ker\\phi\\) is nonempty. \\(\\forall a,b\\in \\ker\\phi\\quad \\phi(a-b)=\\phi(a)-\\phi(b)=0-0=0\\Rightarrow a-b\\in \\ker\\phi\\) \\(\\forall a\\in \\ker\\phi,b\\in R\\quad\\phi(ba)=b\\phi(a)=b\\cdot0=0\\Rightarrow ba\\in \\ker\\phi\\) proposition: \\(Im\\phi\\) is a subring of \\(R\\) . proposition: \\(\\phi\\) is injective \\(\\Leftrightarrow\\) \\(\\ker\\phi =0\\)","title":"\u7ebf\u6027\u4ee3\u6570\u2161(H)"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#rings","text":"","title":"Rings"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#definition","text":"A ring satisfies \\(R\\neq \\empty\\) \\(R\\times R \\rightarrow R \\quad i.e.(r,s) \\rightarrow r+s\\) (R,+) is an Abelian group(associativity, commutativity, inverse element, identity element). \\(R\\times R \\rightarrow R \\quad i.e.(r,s) \\rightarrow r\\cdot s\\) (R, \\(\\cdot\\) ) satisfying associative law. \\(a(b+c)=ab+ac \\quad (b+c)a=ba+ca\\) e.g. \\(F\\) is a field, which is also a ring.( \\(Q,R,C\\) ) \\(F[x]={\\sum\\limits_{i=0}^na_ix^i|a_i\\in F}\\) is a ring. \\(Z_n=\\{\\overline0,\\overline1,\\ldots,\\overline{n-1}\\}\\) where \\(\\overline k =\\{np+k\\mid p\\in Z\\}\\) and it satisfies \\(\\overline k + \\overline l =\\{n(p+q)+k+l\\mid p,q\\in Z\\}=\\overline{k+l}\\) \\(\\overline k \\cdot \\overline l=\\{(np+k)(nq+l)\\mid p,q \\in Z\\}=\\overline{kl}\\) \\(\\overline {k}(\\overline l + \\overline s)=\\overline k \\overline l + \\overline k \\overline s=\\overline k\\ \\overline{l+s}=\\overline{kl+ks}\\) \\(M_n(F)=F^{n\\times n}=\\{(a_{ij}\\mid a_{ij}\\in F)\\}\\) and \\((M_n(F), +, \\cdot)\\) is a ring \\(R_1\\times R_2=\\{(a,b)\\mid a\\in R_1,b\\in R_2\\}\\) and we define \\((a_1,b_1)+(a_2,b_2)=(a_1+b_1,a_2+b_2)\\) \\((a_1,b_1)(a_2,b_2)=(a_1 b_1,a_2 b_2)\\)","title":"Definition"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#properties","text":"","title":"Properties"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#unit-identity","text":"def: an element \\(a\\) is called an identity if \\(\\forall a \\in R \\quad 1\\cdot a = a\\cdot 1 =a\\) Not every ring has an identity. e.g. \\(2\\Z=\\{2n\\mid n \\in \\Z\\}\\) suppose \\(R\\) is a ring, \\(\\Z\\times R =\\{(n,r)\\mid n\\in \\Z r\\in R\\}\\) and we define \\((n,r)+(m,s)=(n+m,r+s)\\quad (n,r)\\cdot (m,s)=(nm,rs+ns+rm)\\) then \\(\\Z\\times R\\) has a unit \\((1,0)\\) and we find \\((0,r)+(0,s)=(0,r+s)\\quad (0,r)\\cdot(0,s)=(0,rs)\\) Note:\u4efb\u610f\u73af\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\u6269\u5145\u4e3a\u6709\u5355\u4f4d\u5143\u7684\u73af, \u800c\u4e14\u8fd8\u4fdd\u7559\u4e86 \\(R\\) \u4e0a\u7684\u8fd0\u7b97.","title":"Unit, identity(\u5355\u4f4d\u5143, \u6052\u7b49\u5143)"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#commutative-ring","text":"def: A ring is called commutative if \\(\\forall a,b\\in R\\quad ab=ba\\) , otherwise if \\(\\exist a,b\\in R ab\\neq ba\\) it is called noncommutative . e.g. \\(\\mathbb{R},\\mathbb{C}[x]\\) are commutative, while \\(M_n(R)\\) is noncommutative.","title":"Commutative Ring"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#domain-ring","text":"def: \\(a \\in R\\) there is a nonzero element \\(b\\) such that \\(ab=0\\) , \\(a\\) is called left zero-divisor(\u5de6\u96f6\u56e0\u5b50) . Similarily we can define right zero-divisor . 0 must be zero-divisor. proof: \\(0\\cdot a = (0+0)a=0\\cdot a + 0\\cdot a\\) so \\(0=0\\cdot a +(- 0\\cdot a)=0\\cdot a +0\\cdot a +(-0\\cdot a)=0\\cdot a\\) thus we get \\(0\\cdot a =0\\) def: A ring is called domain ring if \\(\\lvert R \\rvert \\ge 2\\) \\(R\\) has no nonzero zero-divisor. e.g. \\(\\overline Z_6\\) is not a domain ring since \\(\\overline 2 \\cdot \\overline 3 = \\overline 0\\) \\(H=\\{ \\left[\\begin{matrix} a+bi & c+di\\\\ -c+di & a-bi \\end{matrix} \\right] \\mid a,b,c,d\\in R \\ and\\ i=\\sqrt{-1} \\}\\) \\(H\\) is noncommutative but it is a domain ring.(proof?)","title":"Domain Ring(\u6574\u73af)"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#division-ring","text":"def: \\(a\\in R\\) is invertible if \\(\\exist b \\ s.t.ab=ba=1\\) e.g. in \\(M_n(R)\\) , \\(A\\) is invertible $ \\Leftrightarrow\\lvert {A} \\rvert \\neq 0$ \\(0\\) is always not invertible since \\(0 \\cdot a =1 \\Rightarrow 0\\cdot a = 0 =1\\) then \\(R=\\{0\\}\\) where \\(\\forall r \\in R,\\ r=1\\cdot r=0\\cdot r =0\\) \\(H\\) is a domain ring since \\(\\left[\\begin{matrix} a+bi & c+di \\\\ -c+di& a-bi \\end{matrix} \\right]^{-1}=\\frac{1}{a^2+b^2+c^2+d^2}\\left[\\begin{matrix} a-bi & -c+di \\\\ c+di& a+bi \\end{matrix} \\right]\\) def: A ring is called division ring(or skew-field\u659c\u57df) if \\(\\lvert R \\rvert \\ge 2\\) nonzero element is invertible. e.g. Z is not division ring while Q is division ring.","title":"Division Ring(\u9664\u73af)"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#field","text":"def: A commutative division ring is called field. Note : \u57df\u4e2d\u5fc5\u6709\u5355\u4f4d\u5143.","title":"Field(\u57df)"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#subring","text":"def: \\(\\empty\\neq S\\subseteq (R,+,\\cdot)\\) it is called a subring of \\(R\\) if it satisfies \\(\\forall a,b\\in R\\quad a-b\\in S\\) \\(\\forall a,b\\in R\\quad ab\\in R\\) Note : \u4e3a\u4ec0\u4e48\u662f \\(a-b\\in S\\) \u800c\u4e0d\u662f \\(a+b\\in S\\) ? \u4e3a\u4e86\u786e\u4fdd\u4efb\u610f\u5143\u7d20\u7684\u8d1f\u5143\u4e5f\u5728\u96c6\u5408\u4e2d \u800c\u7ebf\u6027\u7a7a\u95f4\u4e2d\u56e0\u4e3a\u8981\u5bf9\u6570\u4e58\u5c01\u95ed, \\((-1)a=-a\\) \u6545\u8d1f\u5143\u4e00\u5b9a\u5728\u96c6\u5408\u4e2d. suppose \\(S_1,S_2\\) are subring of \\(R\\) , then \\(S_1+S_2=\\{a_1+a_2\\mid a_1\\in S_1,a_2\\in S_2\\}\\) is not a subring of \\(R\\) , \\(S_1\\cap S_2\\) is a subring, and \\(S_1\\cup S_2\\) is not a subring. e.g. \\(R=\\mathbb{Q}[\\sqrt2,\\sqrt3,\\sqrt{6}]=\\{a+b\\sqrt2+c\\sqrt3+d\\sqrt6\\mid a,b,c,d\\in \\mathbb{Q}\\}\\) and \\(R\\leq (\\R,+,\\cdot)\\) let \\(S_1=Q[\\sqrt2]=\\{a+b\\sqrt2\\mid a,b\\in \\mathbb{Q}\\}\\) \\(S_2=Q[\\sqrt3]=\\{a+b\\sqrt3\\mid a,b\\in \\mathbb{Q}\\}\\) and both are subrings of \\(R\\) but \\(S_1+S_2=\\{a+b\\sqrt2+c\\sqrt3\\mid a,b,c\\in \\mathbb{Q}\\}\\) is not a subring since \\(\\sqrt2\\cdot\\sqrt 3 =\\sqrt 6 \\notin S_1+S_2\\) \\(Z\\) has an identity, but its subring \\(2\\Z\\) has no identiy. \\(S=\\{\\left[ \\begin{matrix}a&b&0\\\\c&d&0\\\\0&0&0\\end{matrix}\\right]\\mid a,b,c,d\\in\\R\\}\\leq M_n(R)\\) their identities are not the same.( \\(S:\\left[ \\begin{matrix}1&0&0\\\\0&1&0\\\\0&0&0\\end{matrix}\\right]\\) abd \\(M_n(R):\\left[\\begin{matrix}1&0&0\\\\0&1&0\\\\0&0&1\\end{matrix}\\right]\\) )","title":"Subring"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#ideal","text":"def: \\(\\empty\\neq S\\subseteq (R,+,\\cdot)\\) it is called a left ideal of \\(R\\) if it satisfies \\(\\forall a,b\\in R\\quad a-b\\in S\\) \\(\\forall a\\in S,b\\in R \\quad ba\\in S\\) and we denote it by \\(I\\lhd R\\) Similarily we define right ideal. ideal = left ideal + right ideal. proposition : suppose \\(I_1,I_2\\) are left ideal, then \\(I_1+I_2=\\{a+b\\mid a\\in I_1,b\\in I_2\\}, I_1\\cap I_2=\\{a\\cdot b\\mid a\\in I_1,b\\in I_2\\}\\) are also ideals. proof: suppose \\(\\forall a_i,b_i\\in I_i\\) where \\(i=1,2\\) \\((a_1+a_2)-(b_1+b_2)=(a_1-b_1)+(a_2-b_2)\\in I_1 +I_2\\) \\(\\forall r\\in R \\quad r(a_1+a_2)=ra_1+ra_2\\in I_1+I_2\\) 0 always in ideal since \\(a-a=0\\) we can define \\((a\\rangle=\\cap \\{I\\) is a left ideal of \\(R\\) containg \\(a\\) \\(\\}\\) proposition : \\((a\\rangle=\\{na+ra\\mid n\\in Z, r\\in R\\}\\) this ideal containg \\(a\\) and \\(\\forall\\) ideal containing \\(a\\) \\(\\Rightarrow (a\\rangle \\sube I\\) proof : \\(a\\) in this set \\(a = 1*a+0*a\\) where \\(1\\in Z,0\\in R\\) thus \\(a\\in (a\\rangle\\) this set is an ideal \\(\\forall n_1a+r_1a, n_2a+r_2a\\in(a\\rangle\\) then \\((n_1a+r_1a)-(n_2a+r_2a)=(n_1-n_2)a+(r_1-r_2)a\\in (a\\rangle\\) where \\(n_1-n_2\\in \\Z,r_1-r_2\\in R\\) \\(\\forall b\\in R, na+ra \\in (a\\rangle\\) then \\(b(na+ra)=nba+bra\\in (a\\rangle\\) where \\(nb\\) the minimum ideal containg \\(a\\) suppose an ideal \\(I\\) containing \\(a\\) , out target is to prove \\((a\\rangle\\sube I\\) \\(\\forall\\ na+ra\\in (a\\rangle\\) then \\(a\\in I, r\\in R \\Rightarrow ra\\in I\\) and \\(na = \\left\\{ \\begin{matrix}a+a+\\ldots+a,n>0 \\\\ 0,n=0 \\\\ (-a)+(-a)+\\ldots+(-a),n<0\\end{matrix}\\right.\\) so \\(na\\in I\\) thus \\(na+ra\\in I\\) \\(\\square\\) suppose \\(R\\) has an identity, \\(na =1_R\\cdot a+1_R\\cdot a+\\dots+1_R\\cdot a= (n1_R)\\cdot a\\) where \\(n1_R\\in R\\) so \\((a\\rangle\\) can be writed as \\(\\{ra\\mid r\\in R \\}=Ra\\) Similarily, \\((a)=\\{\\sum\\limits_{i=0}^nr_ias_i+ra+as+na\\mid r_i,s_i,r,s\\in R, n\\in\\N\\}\\stackrel{+1_R}=\\{\\sum\\limits_{i=0}^nr_ias_i\\mid r_i,s_i\\in R, n\\in \\N\\}=RaR\\) suppose \\(R\\) is commutative, then \\(\\langle a)=(a\\rangle=(a)\\)","title":"Ideal"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#pid","text":"def: An ideal is called principa l if it can be generated by one element. def: \\(R\\) is called left(resp. right) principal ring if every left(resp. right)ideal is generated by one element. def: A commutative principal domain is simply denoted by PID . e.g. \\((\\Z,+,\\dot)\\) is a PID. proof: let \\(I\\) be an ideal of \\(Z\\) \\(I=\\{0\\}=(0)=Z\\cdot0=\\{0\\}\\) \\(0\\) ideal must be principal ideal. \\(I\\neq\\{0\\}\\) so \\(\\exist n\\in I,n\\neq0\\) without loss of generalization, we assume \\(n\\in I\\) and \\(n>0\\) (since \\(-n=0-n\\in I\\) , so both \\(n\\) and \\(-n\\) in \\(I\\) ) let \\(n\\) be the least of the set \\(\\{n\\in I,n>0\\}\\) our target is to show \\(I=(n)=n\\Z\\) \\(n\\in I \\Rightarrow(n)\\sube I\\) \\(\\forall m\\in I\\quad m=qn+r(0\\le r\\leq n-1)\\) so \\(r=m-qn\\in I\\) where \\(m\\in I\\) and \\(qn\\in(n)\\sube I\\) by choice of n, \\(r\\) must be \\(0\\) . Otherwise \\(r\\neq0, r<n\\) contradicts the assumption that \\(n\\) is the least element which is gereater than \\(0\\) . Thus, \\(m=qn\\in(n)\\) \\(\\Z\\) is a principal ideal. Apparently, \\(Z\\) is commutative and domain. By the proof above, we can similarily prove \\((F[x],+,\\cdot)\\) is a PID where \\(F\\) is a field. Every field is a PID. proof : suppose \\(F\\) is a field, \\(I\\) is an ideal of \\(F\\) . We assert that \\(I\\) can be either \\((0)\\) or \\((1)=F\\) . \\(I=\\{0\\}=(0)\\) \\(I\\neq\\{0\\}\\) we get \\(a\\in I,a\\neq0\\Rightarrow a^{-1}a=1\\in I\\) where \\(a^{-1}\\in F,a\\in I\\) \\(\\forall b\\in F,b=b\\cdot 1\\in I\\) where \\(b\\in F, 1\\in I\\) so we know \\(F\\sube I\\) and obviously \\(I\\sube F\\) thus \\(I=F=(1)\\) Note : \u57df(\u9664\u73af)\u4e2d\u6ca1\u6709\u975e\u5e73\u51e1\u7406\u60f3. \\(M_n(\\R)\\) is PID. \\(I=\\{0_{n\\times n}\\}=(0_{n\\times n})\\) \\(I\\neq\\{0_{n\\times n}\\}\\) then \\(\\forall A=(a_{ij})\\in I, A\\neq 0\\) so \\(\\exist a_{kl}\\neq 0\\) thus \\(\\forall i,j\\in \\N,E_{ik}AE_{lj}=a_{kl}E_{ij}\\) where \\(E_{ij}\\) represent a matrix whose \\((i,j)\\) element is \\(1\\) . so \\(a_{kl}^{-1}E_{ik}AE_{lj}=E_{ij}\\in I\\) where \\(E_{lj}\\in M_n(\\R), A\\in I\\) and \\(a_{kl}^{-1}E_{ik}=(a_{kl}^{-1}E)E_{ik}\\in M_n(\\R)\\) for the definition of ideal. $\\Rightarrow \\forall M=(b_{ij})\\in M_n(\\R)\\quad M=\\sum x_{ij}E_{ij}=\\sum (x_{ij}E)E_{ij}\\in I $ Therefore, \\(M_n(\\R)\\sube I\\Rightarrow I=M_n(\\R)\\) Note : \u975e\u4ea4\u6362, \u975e\u6574\u73af\u4e5f\u53ef\u4ee5\u53ea\u6709\u4e24\u4e2a\u7406\u60f3. Proposition: \\(A\\) is similar to a diagonal matrix \\(\\Leftrightarrow\\) there is a splitting polynomical \\(f(x)\\) which has no mutiplicity roots(\u91cd\u6839) \\(s.t. f(A)=0\\) proof","title":"PID(\u4e3b\u7406\u60f3\u6574\u73af)"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#quotient-ring","text":"def: suppose \\(I\\) is an ideal of \\(R\\) , then \\(R/I=\\{a+I\\mid a\\in R\\}\\) is called quotient ring. \u200b and we define \\((a+I)+(b+I)=(a+b)+I,(a+I)(b+I)=ab+I\\) Note : \u5546\u73af\u4e2d\u7684\u5143\u7d20 \\(a+I=\\{a+b\\mid b\\in I\\}\\) \u4e5f\u662f\u4e00\u4e2a\u96c6\u5408, \u82e5 \\(a\\in I\\) \u5219 \\(a+I=0+I=0\\) . \u82e5 \\(R=I\\) , \u5219\u89c4\u5b9a \\(R/I=0\\) proposition: \\(a_1+I=a_2+I\\Leftrightarrow a_1-a_2\\in I\\) proof: \\(\\Rightarrow\\) \\(a_1\\in a_1+I=a_2+I\\) so \\(\\exist x\\in I\\ s.t.a_1=a_2+x\\) thus \\(a_1-a_2=x\\in I\\) \\(\\Leftarrow\\) \\(\\forall a_1+x\\in a_1+I\\) where \\(x\\in I\\) so \\(a_1+x=a_2+x+(a_1-a_2)\\in a_2+I\\) since \\(x\\in I,(a_1-a_2)\\in I\\) therefore, \\(a_1+I\\sube a_2+I\\) . Similarily, we can prove \\(a_2+I\\sube a_1+I\\) so \\(a_1+I=a_2+I\\) . Note: \u5bf9\u4e8e\u5546\u73af \\(R/I\\) \u6211\u4eec\u9700\u8981\u9a8c\u8bc1 well-defined . \u5373\u82e5 \\(a+I=a'+I,b+I=b'+I\\) \u5219\u8981\u6ee1\u8db3 \\(a+b+I=a'+b'+I,ab+I=a'b'+I\\) \u5373\u4e0d\u540c\u5f62\u5f0f\u540c\u4e00\u672c\u8d28\u7684\u5143\u7d20\u5e94\u8be5\u6620\u5c04\u540e\u5f97\u5230\u7684\u5143\u7d20\u5e94\u8be5\u76f8\u540c.","title":"Quotient Ring(\u5546\u73af)"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#maximal-ideal","text":"def: suppose \\(I\\neq R\\) is an ideal of \\(R\\) , \\(I\\) is called to be maximal ideal if \\(\\forall J\\lhd R,J\\supe I \\Rightarrow \\left\\{\\begin{matrix}J=I \\\\ R\\end{matrix}\\right.\\) Note: \u6781\u5927\u7406\u60f3 \\(I\\) \u5373\u53ea\u88ab \\(I\\) \u548c \\(R\\) \u5305\u542b.( \\(R\\) \u662f\u81ea\u8eab\u7684\u7406\u60f3.) Proposition: suppose \\(R\\) is commutative ring with identity, then \\(M\\) is a maximal ideal \\(\\Leftrightarrow\\) \\(R/M\\) is a field. proof:","title":"Maximal Ideal(\u6781\u5927\u7406\u60f3)"},{"location":"Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E2%85%A1%28H%29/Rings/#homomorphism","text":"def: \\(\\phi:R_1\\rightarrow R_2\\) and it statisfies \\(\\phi(a+b)=\\phi(a)+\\phi(b),\\phi(ab)=\\phi(a)\\phi(b),\\phi(1)=1\\) then it is called a homomorphism. def: \\(\\phi\\) is called monomorphism(\u5355\u540c\u6001) if \\(a\\neq b \\Rightarrow\\phi(a)\\neq\\phi(b)\\) def: $\\phi $ is called epiomorphism(\u6ee1\u540c\u6001) if \\(r\\in R_2\\ \\exist a\\in R_1\\ s.t.\\phi(a)=r\\) . isomorphism(\u540c\u6784) = injective + surjective we define \\(\\ker\\phi=\\{a\\in R_1\\mid \\phi(a)=0\\}\\) \\(Im\\phi=\\{\\phi(a)\\mid a\\in R_1\\}\\) e.g. \\(\\phi:\\Z\\rightarrow \\Z_n\\) and \\(a\\rightarrow \\overline{a}=\\{a+kn\\mid k\\in \\Z\\}\\) and it\u2019s easy to verify it is a homomorphism. \u200b \\(\\ker\\phi={a\\in\\Z\\mid \\overline a=\\overline 0}=n\\Z=(n)\\quad Im\\phi=\\Z_n\\) proposition: \\(\\ker\\phi\\) is an ideal of \\(R\\) . proof: \\(0\\in \\ker\\phi\\) since \\(\\phi(0)=\\phi(0+0)=\\phi(0)+\\phi(0)\\Rightarrow \\phi(0)=0\\) thus \\(ker\\phi\\) is nonempty. \\(\\forall a,b\\in \\ker\\phi\\quad \\phi(a-b)=\\phi(a)-\\phi(b)=0-0=0\\Rightarrow a-b\\in \\ker\\phi\\) \\(\\forall a\\in \\ker\\phi,b\\in R\\quad\\phi(ba)=b\\phi(a)=b\\cdot0=0\\Rightarrow ba\\in \\ker\\phi\\) proposition: \\(Im\\phi\\) is a subring of \\(R\\) . proposition: \\(\\phi\\) is injective \\(\\Leftrightarrow\\) \\(\\ker\\phi =0\\)","title":"Homomorphism(\u540c\u6001)"},{"location":"NA/NA01/","text":"Mathematical Preliminaries \u00b6 Roundoff Errors and Computer Arithmetic \u00b6 Example Approximate \\(\\int_0^1e^{-x^2}dx\\) Use Taylor expansion. S 4 \u622a\u65ad\u8bef\u5dee, \u2153 \u56db\u820d\u4e94\u5165\u8bef\u5dee. Info f(x) = \u8fd1\u4f3c\u503c + \u4f59\u9879 \u4e00\u4e2a\u8fd1\u4f3c\u503c+\u4f59\u9879\u7684\u5f62\u5f0f(\u4f59\u9879\u4ee3\u8868\u8bef\u5dee, \u4e0d\u9700\u8981\u6c42\u51fa\u786e\u5207\u7684\u503c) \u8ba8\u8bba\u4f59\u9879\u65f6, \u6211\u4eec\u4e00\u822c \u53ea\u8ba8\u8bba\u4e0a\u754c . \u5982 \\(0 <= e <= \\overline {e}\\) . \u4e3a\u4ec0\u4e48\u4e0d\u8ba8\u8bba\u4e0b\u754c, \u56e0\u4e3a\u5982\u679c\u6211\u4eec\u77e5\u9053\u786e\u5207\u7684\u4e0b\u754c, \u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u5408\u5e76\u5230\u524d\u9762\u7684\u8fd1\u4f3c\u503c\u4e2d. \u56e0\u6b64\u6211\u4eec\u5f97\u5230\u7684\u4e00\u822c\u662f \\(f' - e <= f <= f' + e\\) Truncation Error : the error involved in using a truncated, or finite, summation to approximate the sum of an infinite series. Roundoff Error : the error produced when performing real number calculations. It occurs because the arithmetic performed in a machine involves numbers with only a finite number of digits. Given a real number \\(y=0.d_1d_2\\cdots d_k d_{k+1}d_{k+2}\\cdots \\times 10^n\\) then \\(fl(y) = \\left\\{ \\begin{matrix}0.d_1d_2\\ldots d_k \\times 10^n\\quad /* Chopping */ \\\\ chop(y+5\\times 10^{n-(k+1)})=0.\\delta_1\\delta_2\\ldots \\delta_k\\times 10^n \\quad /* Rouding */ \\end{matrix}\\right.\\) Def : if \\(p^*\\) is an approximation to p, the absolute error is \\(|p-p^*|\\) and the relative error is \\(\\frac{|p-p^*|}{|p|}\\) , provided that \\(p\\neq 0\\) . Def : The number \\(p^*\\) is said to approximate p to t significant digits if t is the largst nonnegative integer for which \\(\\frac{|p-p^*|}{|p|} < 5\\times 10^{-t}\\) Note Rounding \u53ef\u4ee5\u6709\u66f4\u9ad8\u7684\u6709\u6548\u4f4d\u6570.(\u7edf\u8ba1\u610f\u4e49\u4e0a\u662f, \u4f46\u5e76\u4e0d\u7edd\u5bf9) Subtraction of nearly equal numbers will cause a cancellation of significant digits. Example \\(a_1 = 0.12345+e_1, a_2 = 0.123456 + e_2\\) \u4ed6\u4eec\u7684\u76f8\u5bf9\u8bef\u5dee\u4e3a \\(\\frac{a}{e_1}, \\frac{a}{e_2}\\) , \u8fd9\u65f6 \\(a_2-a_1=0.00001 + (e_2 - e_1)\\) , \u800c\u76f8\u5bf9\u8bef\u5dee \\(\\frac{e_2-e_1}{0.00001}\\) , \u8bef\u5dee\u6269\u5927\u660e\u663e Dividing by a number with small magnitude (or, equivalently, multiplying by a number with large magnitude) will cause an enlargement of the error. Info \\(\\frac{a}{b} = \\frac{a^* + e_a}{b^*+e_b} = \\frac{a^*}{b^*} + e\\) \\(e = \\frac{b^*(a^*+e_a)-a^*(b^*+e_b)}{b^*(b^*+e_b)} = \\frac{b^*e_a - a^*e_b}{b^*(b^*+e_b)}= \\frac{e_a}{b^*+e_b} - \\frac{e_b}{b^*+e_b}\\times \\frac{a^*}{b^*}\\) \u5f53 \\(\\frac{a^*}{b^*}\\) \u6bd4\u8f83\u5927\u65f6, b \u7684\u76f8\u5bf9\u8bef\u5dee\u4f1a\u88ab\u653e\u5927. \u5f53 \\(b\\) \u6bd4\u8f83\u5c0f\u65f6, a \u7684\u7edd\u5bf9\u8bef\u5dee\u4f1a\u88ab\u653e\u5927. Always simplify your formulae before you give them to your computer! Example Evaluate \\(f(x)= x^3-6.1x^2+3.2x+1.5\\) at \\(x=4.71\\) using 3-digit arithmetic. \u628a\u81ea\u5df1\u5f53\u4f5c\u5c0f\u5b66\u751f, \u4e00\u6b65\u4e00\u6b65\u8ba1\u7b97. \u6bcf\u6b21\u8ba1\u7b97\u90fd\u8981 chopping/rounding \u800c\u4e0d\u662f\u8fde\u52a0\u8fde\u4e58, \u76f4\u63a5\u4ece\u6700\u540e\u7b54\u6848\u4f5c\u820d\u53bb. \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, chopping \u6bd4 rouding \u6548\u679c\u597d! \u8bef\u5dee\u5b9e\u9645\u4e0a\u662f\u4e2a\u6982\u7387\u51fd\u6570 Algorithms and Convergence \u00b6 Def : An algorithm that satisfies that small changes in the initial data produce correspondingly small changes in the final results is called stable ; otherwise it is unstable . An algorithm is called conditionally stable if it is stable only for certain choices of initial data. Note \\(y=f(x)\\) \u5bf9\u4e8e\u4e00\u4e2a\u6270\u52a8 \\(y+\\epsilon_y = f(x+\\epsilon_x)\\) \\(|\\frac{\\epsilon_y}{\\epsilon_x}|\\) \u8861\u91cf\u53d8\u5316\u7387, stable \u5373\u8fd9\u4e2a\u53d8\u5316\u7387\u5c0f. Def : Suppose that \\(E_0\\) > 0 denotes an initial error and En represents the magnitude of an error after n subsequent operations. If \\(E_n\\approx C n E_0\\) , where C is a constant independent of n, then the growth of error is said to be linear . If \\(E_n\\approx C^n E_0\\) , for some C > 1, then the growth of error is called exponential . Note Linear growth of error is usually unavoidable , and when C and \\(E_0\\) are small the results are generally acceptable . Exponential growth of error should be avoided since the term \\(C_n\\) becomes large for even relatively small values of n. This leads to unacceptable inaccuracies, regardless of the size of \\(E_0\\) . Example Evaluate \\(I_n=\\frac{1}{e}\\int_0^1x^ne^x dx, n=0,1,2,...\\) Improved method:","title":"Mathematical Preliminaries"},{"location":"NA/NA01/#mathematical-preliminaries","text":"","title":"Mathematical Preliminaries"},{"location":"NA/NA01/#roundoff-errors-and-computer-arithmetic","text":"Example Approximate \\(\\int_0^1e^{-x^2}dx\\) Use Taylor expansion. S 4 \u622a\u65ad\u8bef\u5dee, \u2153 \u56db\u820d\u4e94\u5165\u8bef\u5dee. Info f(x) = \u8fd1\u4f3c\u503c + \u4f59\u9879 \u4e00\u4e2a\u8fd1\u4f3c\u503c+\u4f59\u9879\u7684\u5f62\u5f0f(\u4f59\u9879\u4ee3\u8868\u8bef\u5dee, \u4e0d\u9700\u8981\u6c42\u51fa\u786e\u5207\u7684\u503c) \u8ba8\u8bba\u4f59\u9879\u65f6, \u6211\u4eec\u4e00\u822c \u53ea\u8ba8\u8bba\u4e0a\u754c . \u5982 \\(0 <= e <= \\overline {e}\\) . \u4e3a\u4ec0\u4e48\u4e0d\u8ba8\u8bba\u4e0b\u754c, \u56e0\u4e3a\u5982\u679c\u6211\u4eec\u77e5\u9053\u786e\u5207\u7684\u4e0b\u754c, \u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u5408\u5e76\u5230\u524d\u9762\u7684\u8fd1\u4f3c\u503c\u4e2d. \u56e0\u6b64\u6211\u4eec\u5f97\u5230\u7684\u4e00\u822c\u662f \\(f' - e <= f <= f' + e\\) Truncation Error : the error involved in using a truncated, or finite, summation to approximate the sum of an infinite series. Roundoff Error : the error produced when performing real number calculations. It occurs because the arithmetic performed in a machine involves numbers with only a finite number of digits. Given a real number \\(y=0.d_1d_2\\cdots d_k d_{k+1}d_{k+2}\\cdots \\times 10^n\\) then \\(fl(y) = \\left\\{ \\begin{matrix}0.d_1d_2\\ldots d_k \\times 10^n\\quad /* Chopping */ \\\\ chop(y+5\\times 10^{n-(k+1)})=0.\\delta_1\\delta_2\\ldots \\delta_k\\times 10^n \\quad /* Rouding */ \\end{matrix}\\right.\\) Def : if \\(p^*\\) is an approximation to p, the absolute error is \\(|p-p^*|\\) and the relative error is \\(\\frac{|p-p^*|}{|p|}\\) , provided that \\(p\\neq 0\\) . Def : The number \\(p^*\\) is said to approximate p to t significant digits if t is the largst nonnegative integer for which \\(\\frac{|p-p^*|}{|p|} < 5\\times 10^{-t}\\) Note Rounding \u53ef\u4ee5\u6709\u66f4\u9ad8\u7684\u6709\u6548\u4f4d\u6570.(\u7edf\u8ba1\u610f\u4e49\u4e0a\u662f, \u4f46\u5e76\u4e0d\u7edd\u5bf9) Subtraction of nearly equal numbers will cause a cancellation of significant digits. Example \\(a_1 = 0.12345+e_1, a_2 = 0.123456 + e_2\\) \u4ed6\u4eec\u7684\u76f8\u5bf9\u8bef\u5dee\u4e3a \\(\\frac{a}{e_1}, \\frac{a}{e_2}\\) , \u8fd9\u65f6 \\(a_2-a_1=0.00001 + (e_2 - e_1)\\) , \u800c\u76f8\u5bf9\u8bef\u5dee \\(\\frac{e_2-e_1}{0.00001}\\) , \u8bef\u5dee\u6269\u5927\u660e\u663e Dividing by a number with small magnitude (or, equivalently, multiplying by a number with large magnitude) will cause an enlargement of the error. Info \\(\\frac{a}{b} = \\frac{a^* + e_a}{b^*+e_b} = \\frac{a^*}{b^*} + e\\) \\(e = \\frac{b^*(a^*+e_a)-a^*(b^*+e_b)}{b^*(b^*+e_b)} = \\frac{b^*e_a - a^*e_b}{b^*(b^*+e_b)}= \\frac{e_a}{b^*+e_b} - \\frac{e_b}{b^*+e_b}\\times \\frac{a^*}{b^*}\\) \u5f53 \\(\\frac{a^*}{b^*}\\) \u6bd4\u8f83\u5927\u65f6, b \u7684\u76f8\u5bf9\u8bef\u5dee\u4f1a\u88ab\u653e\u5927. \u5f53 \\(b\\) \u6bd4\u8f83\u5c0f\u65f6, a \u7684\u7edd\u5bf9\u8bef\u5dee\u4f1a\u88ab\u653e\u5927. Always simplify your formulae before you give them to your computer! Example Evaluate \\(f(x)= x^3-6.1x^2+3.2x+1.5\\) at \\(x=4.71\\) using 3-digit arithmetic. \u628a\u81ea\u5df1\u5f53\u4f5c\u5c0f\u5b66\u751f, \u4e00\u6b65\u4e00\u6b65\u8ba1\u7b97. \u6bcf\u6b21\u8ba1\u7b97\u90fd\u8981 chopping/rounding \u800c\u4e0d\u662f\u8fde\u52a0\u8fde\u4e58, \u76f4\u63a5\u4ece\u6700\u540e\u7b54\u6848\u4f5c\u820d\u53bb. \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d, chopping \u6bd4 rouding \u6548\u679c\u597d! \u8bef\u5dee\u5b9e\u9645\u4e0a\u662f\u4e2a\u6982\u7387\u51fd\u6570","title":"Roundoff Errors and Computer Arithmetic"},{"location":"NA/NA01/#algorithms-and-convergence","text":"Def : An algorithm that satisfies that small changes in the initial data produce correspondingly small changes in the final results is called stable ; otherwise it is unstable . An algorithm is called conditionally stable if it is stable only for certain choices of initial data. Note \\(y=f(x)\\) \u5bf9\u4e8e\u4e00\u4e2a\u6270\u52a8 \\(y+\\epsilon_y = f(x+\\epsilon_x)\\) \\(|\\frac{\\epsilon_y}{\\epsilon_x}|\\) \u8861\u91cf\u53d8\u5316\u7387, stable \u5373\u8fd9\u4e2a\u53d8\u5316\u7387\u5c0f. Def : Suppose that \\(E_0\\) > 0 denotes an initial error and En represents the magnitude of an error after n subsequent operations. If \\(E_n\\approx C n E_0\\) , where C is a constant independent of n, then the growth of error is said to be linear . If \\(E_n\\approx C^n E_0\\) , for some C > 1, then the growth of error is called exponential . Note Linear growth of error is usually unavoidable , and when C and \\(E_0\\) are small the results are generally acceptable . Exponential growth of error should be avoided since the term \\(C_n\\) becomes large for even relatively small values of n. This leads to unacceptable inaccuracies, regardless of the size of \\(E_0\\) . Example Evaluate \\(I_n=\\frac{1}{e}\\int_0^1x^ne^x dx, n=0,1,2,...\\) Improved method:","title":"Algorithms and Convergence"},{"location":"NA/NA02/","text":"Solutions of Equations in One Variables \u00b6 Find a root of \\(f(x)=0\\) The Bisection Method \u00b6 Therom :(Intermediate Value Therom) If \\(f\\in C[a,b]\\) and K is any number between \\(f(a)\\) and \\(f(b)\\) , then there exists a number \\(p\\in (a,b)\\) for which \\(f(p)=K.\\) when to stop? \u76f8\u5bf9\u8bef\u5dee\u6709\u4f7f\u7528\u6761\u4ef6, \u7edd\u5bf9\u8bef\u5dee\u666e\u9002. 3 \u548c 12 \u6ca1\u6709\u5fc5\u7136\u5173\u7cfb, \u56e0\u4e3a\u53d7\u659c\u7387\u5f71\u54cd. \u4e00\u4e2a\u662f\u5b9a\u4e49\u57df\u4e0a\u7684 error, \u4e00\u4e2a\u662f\u503c\u57df\u4e0a\u7684 error. \u4e0d\u63a8\u8350\u4f7f\u7528\u7b2c\u4e09\u4e2a(xww), \u56e0\u4e3a\u5b58\u5728\u8fd9\u6837\u7684\u60c5\u51b5: Therom : Suppose that \\(f\\in C[a,b]\\) and \\(f(a)\\cdot f(b) <0\\) The Bisection method generates a sequence \\(\\{p_n\\}\\) (n=0,1,2...) approximating a zero p of f with \\(|p_n-p|<=\\frac{b-a}{2^n}\\) . \u4e00\u5b9a\u6536\u655b! Algorithm: Question in Step3, why not \\(p=(a+b)/2\\) ? why not FA*FP > 0? Advantages: Simple, only requires a continuous f. Always converges to a solution. Disadvantages: Slow to converge and a good intermediate approximation can be inadvertently discarded. Cannot find multiple roots and complex roots. Fixed-Point Iteration \u00b6 \\(f(x)=0 \\Leftrightarrow x=g(x)\\) left: root of f(x); right: fixed-point of g(x). idea : start from an initial approximation \\(p_0\\) and generate the sequence \\(\\{p_n\\}_{n=0}^{\\infty}\\) by letting \\(p_n=g(p_{n-1})\\) . for eac \\(n>1\\) if the sequence converges to p and g(x) is continuous then \\(p=\\lim\\limits_{n->\\infty}p_n = \\lim\\limits_{n->\\infty}g(p_{n-1})=g(\\lim\\limits_{n->\\infty} p_{n-1}) = g(p)\\) . Theorem :(Fixed-Point Therom) if \\(g\\in C[a,b]\\) be such that \\(g(x)\\in[a,b]\\) for all \\(x\\in a[a,b]\\) . Suppose in addition that \\(g^{'}(x)\\) s exists on \\((a,b)\\) and that a constant \\(0<k<1\\) exists with \\(|g^{'}(x)|<=k\\) for all \\(x\\in(a,b)\\) . Then for any number \\(p_0\\in [a,b]\\) , the sequence defined by \\(p_n=g(p_{n-1})\\) converges to the unique fixed \\(p\\in [a,b]\\) . Note \u5176\u4e2d\u7684\u9650\u5236\u6761\u4ef6\u4e0d\u7b49\u4ef7\u4e8e \\(|g^{'}(x)|<1\\) \u4e0a\u884c\u7684\u5f0f\u5b50 g'(x) \u53ef\u4ee5\u65e0\u9650\u8d8b\u8fd1 1. proof: Corollary : If g satisfies the hypotheses of the Fixed-Point Theroem, then bounds for the error involved in using \\(p_n\\) to approximate p are given by \\(|p_n - p|<=\\frac{1}{k-1}|p_{n+1}-p_n|\\) and \\(|p_n-p|<=\\frac{k^n}{1-k}|p_1-p_0|\\) . \u53ef\u4ee5\u7528\u6765\u63a7\u5236\u7cbe\u5ea6, \u8ba1\u7b97\u7684\u65f6\u95f4\u548c\u901f\u5ea6. k \u8d8a\u5c0f, \u6536\u655b\u8d8a\u5feb.(\u5177\u4f53\u6536\u655b\u901f\u5ea6\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5bfc\u6570\u5206\u5e03) Algorithm: Example Find the unique root of equation \\(x^3+4x^2-10=0\\) in [1,2]. which following is the best equivalent fixed-point forms with \\(p_0=1.5\\) .(the root is approximately 1.365230013) \\(x=g_1(x)=x-x^3-4x^2+10\\) \\(x=g_2(x)=\\sqrt{10/x - 4x}\\) \\(x=g_3(x)=\\sqrt{10-x^3}/2\\) \\(x=g_4(x)=\\sqrt{10/(4+x)}\\) \\(x=g_5(x)=x-\\frac{x^3+4x^2-10}{3x^2+8x}\\) c is ok.(in [1,1.5] \\(k\\approx 0.66\\) ) d e is also ok. \u4f46\u5b58\u5728\u4e00\u79cd\u60c5\u51b5, \u5927\u90e8\u5206\u7684\u5bfc\u6570\u90fd\u6bd4\u8f83\u5c0f, \u53ea\u6709\u4e2a\u522b\u70b9\u7684\u5bfc\u6570\u504f\u5927. Newton's Method \u00b6 idea : linearize a nonlinear function using Taylor's expansion . Let \\(p_0\\in [a, b]\\) be an approximation to p such that \\(f^{'}(p_0)\\neq 0\\) . Consider the first Taylor polynomial of f(x) expanded about \\(p_0\\) : \\(f(x)=f(p_0)+f^{'} (p_0)(x-p_0) + \\frac{f^{''}(\\xi_x)}{2!}(x-p_0)^2\\) where \\(\\xi_x\\) lies between \\(p_0\\) and x. Assume that \\(|p-p_0|\\) is small, then \\((p-p_0)^2\\) is much smaller. Then \\(0=f(p)\\approx f(p_0)+f^{'} (p_0)(p-p_0) \\Rightarrow p\\approx p_0-\\frac{f(p_0)}{f^{'}(p_0)}\\) . Theorem: Theorem: Let \\(f\\in C^2[a, b]\\) . If \\(p\\in [a.b]\\) is such that \\(f(p)=0\\) and \\(f^{'}(p)\\neq 0\\) , then there exists a \\(\\delta > 0\\) such that Newton\u2019s method generates a sequence \\(\\{p_n\\}\\) (n = 1, 2,... ) converging to p for any initial approximation \\(p_0\\in [p-\\delta, p+\\delta]\\) . \u8fed\u4ee3\u53ef\u8fdb\u884c; \u8fed\u4ee3\u59cb\u7ec8\u5728\u8303\u56f4\u5185; g' <= 1 Note neighbourhood","title":"**Solutions of Equations in One Variables**"},{"location":"NA/NA02/#solutions-of-equations-in-one-variables","text":"Find a root of \\(f(x)=0\\)","title":"Solutions of Equations in One Variables"},{"location":"NA/NA02/#the-bisection-method","text":"Therom :(Intermediate Value Therom) If \\(f\\in C[a,b]\\) and K is any number between \\(f(a)\\) and \\(f(b)\\) , then there exists a number \\(p\\in (a,b)\\) for which \\(f(p)=K.\\) when to stop? \u76f8\u5bf9\u8bef\u5dee\u6709\u4f7f\u7528\u6761\u4ef6, \u7edd\u5bf9\u8bef\u5dee\u666e\u9002. 3 \u548c 12 \u6ca1\u6709\u5fc5\u7136\u5173\u7cfb, \u56e0\u4e3a\u53d7\u659c\u7387\u5f71\u54cd. \u4e00\u4e2a\u662f\u5b9a\u4e49\u57df\u4e0a\u7684 error, \u4e00\u4e2a\u662f\u503c\u57df\u4e0a\u7684 error. \u4e0d\u63a8\u8350\u4f7f\u7528\u7b2c\u4e09\u4e2a(xww), \u56e0\u4e3a\u5b58\u5728\u8fd9\u6837\u7684\u60c5\u51b5: Therom : Suppose that \\(f\\in C[a,b]\\) and \\(f(a)\\cdot f(b) <0\\) The Bisection method generates a sequence \\(\\{p_n\\}\\) (n=0,1,2...) approximating a zero p of f with \\(|p_n-p|<=\\frac{b-a}{2^n}\\) . \u4e00\u5b9a\u6536\u655b! Algorithm: Question in Step3, why not \\(p=(a+b)/2\\) ? why not FA*FP > 0? Advantages: Simple, only requires a continuous f. Always converges to a solution. Disadvantages: Slow to converge and a good intermediate approximation can be inadvertently discarded. Cannot find multiple roots and complex roots.","title":"The Bisection Method"},{"location":"NA/NA02/#fixed-point-iteration","text":"\\(f(x)=0 \\Leftrightarrow x=g(x)\\) left: root of f(x); right: fixed-point of g(x). idea : start from an initial approximation \\(p_0\\) and generate the sequence \\(\\{p_n\\}_{n=0}^{\\infty}\\) by letting \\(p_n=g(p_{n-1})\\) . for eac \\(n>1\\) if the sequence converges to p and g(x) is continuous then \\(p=\\lim\\limits_{n->\\infty}p_n = \\lim\\limits_{n->\\infty}g(p_{n-1})=g(\\lim\\limits_{n->\\infty} p_{n-1}) = g(p)\\) . Theorem :(Fixed-Point Therom) if \\(g\\in C[a,b]\\) be such that \\(g(x)\\in[a,b]\\) for all \\(x\\in a[a,b]\\) . Suppose in addition that \\(g^{'}(x)\\) s exists on \\((a,b)\\) and that a constant \\(0<k<1\\) exists with \\(|g^{'}(x)|<=k\\) for all \\(x\\in(a,b)\\) . Then for any number \\(p_0\\in [a,b]\\) , the sequence defined by \\(p_n=g(p_{n-1})\\) converges to the unique fixed \\(p\\in [a,b]\\) . Note \u5176\u4e2d\u7684\u9650\u5236\u6761\u4ef6\u4e0d\u7b49\u4ef7\u4e8e \\(|g^{'}(x)|<1\\) \u4e0a\u884c\u7684\u5f0f\u5b50 g'(x) \u53ef\u4ee5\u65e0\u9650\u8d8b\u8fd1 1. proof: Corollary : If g satisfies the hypotheses of the Fixed-Point Theroem, then bounds for the error involved in using \\(p_n\\) to approximate p are given by \\(|p_n - p|<=\\frac{1}{k-1}|p_{n+1}-p_n|\\) and \\(|p_n-p|<=\\frac{k^n}{1-k}|p_1-p_0|\\) . \u53ef\u4ee5\u7528\u6765\u63a7\u5236\u7cbe\u5ea6, \u8ba1\u7b97\u7684\u65f6\u95f4\u548c\u901f\u5ea6. k \u8d8a\u5c0f, \u6536\u655b\u8d8a\u5feb.(\u5177\u4f53\u6536\u655b\u901f\u5ea6\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5bfc\u6570\u5206\u5e03) Algorithm: Example Find the unique root of equation \\(x^3+4x^2-10=0\\) in [1,2]. which following is the best equivalent fixed-point forms with \\(p_0=1.5\\) .(the root is approximately 1.365230013) \\(x=g_1(x)=x-x^3-4x^2+10\\) \\(x=g_2(x)=\\sqrt{10/x - 4x}\\) \\(x=g_3(x)=\\sqrt{10-x^3}/2\\) \\(x=g_4(x)=\\sqrt{10/(4+x)}\\) \\(x=g_5(x)=x-\\frac{x^3+4x^2-10}{3x^2+8x}\\) c is ok.(in [1,1.5] \\(k\\approx 0.66\\) ) d e is also ok. \u4f46\u5b58\u5728\u4e00\u79cd\u60c5\u51b5, \u5927\u90e8\u5206\u7684\u5bfc\u6570\u90fd\u6bd4\u8f83\u5c0f, \u53ea\u6709\u4e2a\u522b\u70b9\u7684\u5bfc\u6570\u504f\u5927.","title":"Fixed-Point Iteration"},{"location":"NA/NA02/#newtons-method","text":"idea : linearize a nonlinear function using Taylor's expansion . Let \\(p_0\\in [a, b]\\) be an approximation to p such that \\(f^{'}(p_0)\\neq 0\\) . Consider the first Taylor polynomial of f(x) expanded about \\(p_0\\) : \\(f(x)=f(p_0)+f^{'} (p_0)(x-p_0) + \\frac{f^{''}(\\xi_x)}{2!}(x-p_0)^2\\) where \\(\\xi_x\\) lies between \\(p_0\\) and x. Assume that \\(|p-p_0|\\) is small, then \\((p-p_0)^2\\) is much smaller. Then \\(0=f(p)\\approx f(p_0)+f^{'} (p_0)(p-p_0) \\Rightarrow p\\approx p_0-\\frac{f(p_0)}{f^{'}(p_0)}\\) . Theorem: Theorem: Let \\(f\\in C^2[a, b]\\) . If \\(p\\in [a.b]\\) is such that \\(f(p)=0\\) and \\(f^{'}(p)\\neq 0\\) , then there exists a \\(\\delta > 0\\) such that Newton\u2019s method generates a sequence \\(\\{p_n\\}\\) (n = 1, 2,... ) converging to p for any initial approximation \\(p_0\\in [p-\\delta, p+\\delta]\\) . \u8fed\u4ee3\u53ef\u8fdb\u884c; \u8fed\u4ee3\u59cb\u7ec8\u5728\u8303\u56f4\u5185; g' <= 1 Note neighbourhood","title":"Newton's Method"},{"location":"OOP/","text":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1 \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u6559\u6750: Intruduction to Programming with C++ (Third Edition) [ \u7f8e ] Y. Daniel Liang\uff08\u6881\u52c7\uff09 \u8001\u5e08: \u7fc1\u607a","title":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1"},{"location":"OOP/#_1","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u6559\u6750: Intruduction to Programming with C++ (Third Edition) [ \u7f8e ] Y. Daniel Liang\uff08\u6881\u52c7\uff09 \u8001\u5e08: \u7fc1\u607a","title":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1"},{"location":"OOP/oop1/","text":"Introduction \u00b6 Abstract Input and output in C++ with cin and cout The string class, the dot . operator Pointer to an object, the arrow -> operator Dynamic memory allocation with new and delet The First C++ Program \u00b6 #include <iostream> usingnamespace std ; int main () { int age ; int sid ; cin >> age >> sid ; cout << \"Hello, World! I am \" << age << Today ! \" << endl; return 0 ; } cout : \u6807\u51c6\u8f93\u51fa\u6d41 << : \u628a\u4e1c\u897f\u63d2\u5165\u5230\u5de6\u8fb9\u53bb cout << \"\" \u7684\u526f\u4f5c\u7528\u662f\u5b57\u7b26\u4e32\u88ab\u8f93\u51fa\uff0c\u4f46\u7ed3\u679c\u662f\u5b57\u7b26\u4e32\u672c\u8eab\u3002 cin >> age \u540c\u7406\uff0c\u526f\u4f5c\u7528\u662f\u8bfb\u5165\uff0c\u7ed3\u679c\u662f age \u672c\u8eab\u3002(\u8bfb\u5230\u7a7a\u683c\u4e3a\u6b62) String \u00b6 string is a class in C++. (\u9700\u8981 #include <string> ) \u53ef\u4ee5\u50cf\u5b9a\u4e49\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\u5b9a\u4e49\u53d8\u91cf\u3002 e.g. string str; \u53ef\u4ee5\u5bf9\u5b57\u7b26\u4e32\u521d\u59cb\u5316\uff0c\u7528 cin, cout \u8f93\u5165\u8f93\u51fa\u3002 Assignment for string \u00b6 char charr1 [ 20 ]; char charr2 [ 20 ] = \"jaguar\" ; string str1 ; string str2 = \"panther\" ; carr1 = char2 ; // illegal str1 = str2 ; // legal \u5b57\u7b26\u6570\u7ec4\u4e0d\u80fd\u8d4b\u503c\uff0c\u5b57\u7b26\u4e32\u662f\u53ef\u4ee5\u7684\u3002 \u8fd9\u91cc \"panther\" \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002 Concatenation for string \u00b6 string str3 ; str3 = str1 + str2 ; str1 += str2 ; str1 += \"lalala\" ; Warning string name ; name = name + \"Johnson\" ; \u8fd9\u91cc name \u5df2\u7ecf\u6709\u786e\u5b9a\u503c\u4e86\uff0c\u56e0\u4e3a\u8fd9\u91cc\u662f\u4e00\u4e2a class \u6001\uff0c\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002 Length \u00b6 s.length() \u5f97\u5230\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002(C++ \u4e2d\u5b57\u7b26\u4e32\u6ca1\u6709 \\0 .) . \u7528\u6765\u68c0\u7d22\u7ed3\u6784\u91cc\u7684\u6210\u5458\u3002(in C) C++ \u7684\u505a\u6cd5\u662f\u5728\u7ed3\u6784\u91cc\u653e\u5165\u4e86\u51fd\u6570\uff0c\u6210\u4e86\u7c7b\u3002 Create a string \u00b6 string major(\"CS\"); \u8fd9\u6837\u4e5f\u53ef\u4ee5\u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002(\u7c7b\u4f3c\u5730\u4e5f\u53ef\u4ee5 int age(18); ) Other Member Functions \u00b6 sub-string substr(int pos, int len); \u62f7\u8d1d\u5b57\u7b26\u4e32\u4ece pos \u4f4d\u7f6e\u5f00\u59cb\u7684 len \u4e2a\u5b57\u7b26 \u5982\u679c pos \u8d85\u51fa\u4e86\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u4f1a\u4ea7\u751f\u5f02\u5e38\uff1b \u5982\u679c pos \u7b49\u4e8e\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u4f1a\u5f97\u5230\u7a7a\u5b57\u7b26\u4e32\uff1b \u5982\u679c pos+len \u8d85\u51fa\u4e86\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u53ea\u4f1a\u62f7\u8d1d\u5230\u5b57\u7b26\u4e32\u672b\u5c3e\u3002 alter string assign \u5c06\u4e00\u4e2a\u65b0\u7684\u503c\u8d4b\u7ed9\u5b57\u7b26\u4e32 assign ( const string & str ); //string assign ( const string & str , size_t subpos , size_t sublen ); //substring assign ( const char * s ); //C-string assign ( const char * s , size_t n ); //buffer assign ( size_t n , char c ); //fill insert \u5728 pos \u4e4b\u524d\u63d2\u5165\u5b57\u7b26 insert ( size_t pos , const string & str ); insert ( size_t pos , const string & str , size_t subpos , size_t sublen ); insert ( size_t pos , const char * s ); insert ( size_t pos , const char * s , size_t n ); insert ( size_t pos , size_t n , char c ); erase (size_t pos = 0, size_t len = npos); \u64e6\u9664\u4ece pos \u5f00\u59cb len \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff08\u5982\u679c\u8d85\u51fa\u5b57\u7b26\u4e32\u957f\u5ea6\u5219\u5230\u5b57\u7b26\u4e32\u672b\u5c3e\uff09 \u9ed8\u8ba4\u53c2\u6570\u64e6\u9664\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u7b26 replace \u4ee3\u66ff\u4ece pos \u5f00\u59cb len \u7684\u5b57\u7b26\u4e32\u3002 replace ( size_t pos , size_t len , const string & str ); replace ( size_t pos , size_t len , const string & str , size_t subpos , size_t sublen ); replace ( size_t pos , size_t len , const char * s ); replace ( size_t pos , size_t len , const char * s , size_t n ); replace ( size_t pos , size_t len , size_t n , char c ); find (const string& str, size_t pos = 0) \u4ece pos \u5f00\u59cb\u67e5\u627e\u5b57\u7b26\u4e32 str , \u8fd4\u56de\u7b2c\u4e00\u6b21\u5339\u914d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002 Dynamically Allocated Memory \u00b6 operator(not function) \u8fd0\u7b97\u7b26\u662f\u7f16\u7a0b\u4ea7\u751f\u4ee3\u7801\u6765\u505a\u8fd9\u4ef6\u4e8b\u3002 new new \u8fd4\u56de\u6307\u5411\u5730\u5740\u7a7a\u95f4\u7684\u6307\u9488\u3002\u4f46 new \u77e5\u9053\u5730\u5740\u7a7a\u95f4\u7684\u7c7b\u578b\uff08\u4e0e malloc \u4e0d\u540c\uff09\u3002 new int; new Stash; new int[10]; delete \u5982\u679c\u8981\u5220\u9664\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u4f1a\u6267\u884c\u5176\u6790\u6784\u51fd\u6570 delete p; delete[] p; Dynamic Arrays int * psome = newint [ 10 ]; delete [] psome ; \u8fd9\u91cc delete[] \u7684\u62ec\u53f7\u662f\u4e0d\u80fd\u5c11\u7684 p1 = new int; \u8fd4\u56de\u4e00\u5757\u56db\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u7684\u5730\u5740\uff0c\u540c\u65f6\u6709\u4e00\u4e2a\u8868\u8bb0\u5f55\u67d0\u4e2a\u5730\u5740\u6709\u6211\u4eec\u7533\u8bf7\u7684\u56db\u5b57\u8282\u3002\u540c\u7406 p2 = new int [10]; \u4e5f\u4f1a\u5728\u8868\u4e2d\u8bb0\u5f55. delete p1 \u4e0d\u4f1a\u53bb\u62b9\u6389\u5730\u5740\u7684\u6570\u636e\uff0c\u53ea\u662f\u5c06\u8868\u4e2d\u6761\u76ee\u53bb\u6389\u3002\u4f46\u5982\u679c p2++; \u518d delete p2; \u627e\u4e0d\u5230 p2, \u8fd9\u662f\u4e00\u4e2a\u5f02\u5e38\u64cd\u4f5c\u3002 p1 = new Student; \u90a3\u4e48 delete p1; \u65f6\u4f1a\u6267\u884c Student \u7684\u6790\u6784\u51fd\u6570. delete p2; \u8ba4\u4e3a p2 \u6307\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6240\u4ee5\u53ea\u5c06\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u6790\u6784\u3002\u8fd9\u6837\u7a7a\u95f4\u662f\u53ef\u4ee5\u56de\u6536\u7684 delete [] p2; \u5c31\u662f\u544a\u8bc9\u7cfb\u7edf\u4e0d\u6b62\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f1a\u5e2e\u6211\u4eec\u5c06\u6240\u6709\u5bf9\u8c61\u90fd\u6790\u6784\u3002","title":"Introduction"},{"location":"OOP/oop1/#introduction","text":"Abstract Input and output in C++ with cin and cout The string class, the dot . operator Pointer to an object, the arrow -> operator Dynamic memory allocation with new and delet","title":"Introduction"},{"location":"OOP/oop1/#the-first-c-program","text":"#include <iostream> usingnamespace std ; int main () { int age ; int sid ; cin >> age >> sid ; cout << \"Hello, World! I am \" << age << Today ! \" << endl; return 0 ; } cout : \u6807\u51c6\u8f93\u51fa\u6d41 << : \u628a\u4e1c\u897f\u63d2\u5165\u5230\u5de6\u8fb9\u53bb cout << \"\" \u7684\u526f\u4f5c\u7528\u662f\u5b57\u7b26\u4e32\u88ab\u8f93\u51fa\uff0c\u4f46\u7ed3\u679c\u662f\u5b57\u7b26\u4e32\u672c\u8eab\u3002 cin >> age \u540c\u7406\uff0c\u526f\u4f5c\u7528\u662f\u8bfb\u5165\uff0c\u7ed3\u679c\u662f age \u672c\u8eab\u3002(\u8bfb\u5230\u7a7a\u683c\u4e3a\u6b62)","title":"The First C++ Program"},{"location":"OOP/oop1/#string","text":"string is a class in C++. (\u9700\u8981 #include <string> ) \u53ef\u4ee5\u50cf\u5b9a\u4e49\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\u5b9a\u4e49\u53d8\u91cf\u3002 e.g. string str; \u53ef\u4ee5\u5bf9\u5b57\u7b26\u4e32\u521d\u59cb\u5316\uff0c\u7528 cin, cout \u8f93\u5165\u8f93\u51fa\u3002","title":"String"},{"location":"OOP/oop1/#assignment-for-string","text":"char charr1 [ 20 ]; char charr2 [ 20 ] = \"jaguar\" ; string str1 ; string str2 = \"panther\" ; carr1 = char2 ; // illegal str1 = str2 ; // legal \u5b57\u7b26\u6570\u7ec4\u4e0d\u80fd\u8d4b\u503c\uff0c\u5b57\u7b26\u4e32\u662f\u53ef\u4ee5\u7684\u3002 \u8fd9\u91cc \"panther\" \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002","title":"Assignment for string"},{"location":"OOP/oop1/#concatenation-for-string","text":"string str3 ; str3 = str1 + str2 ; str1 += str2 ; str1 += \"lalala\" ; Warning string name ; name = name + \"Johnson\" ; \u8fd9\u91cc name \u5df2\u7ecf\u6709\u786e\u5b9a\u503c\u4e86\uff0c\u56e0\u4e3a\u8fd9\u91cc\u662f\u4e00\u4e2a class \u6001\uff0c\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002","title":"Concatenation for string"},{"location":"OOP/oop1/#length","text":"s.length() \u5f97\u5230\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002(C++ \u4e2d\u5b57\u7b26\u4e32\u6ca1\u6709 \\0 .) . \u7528\u6765\u68c0\u7d22\u7ed3\u6784\u91cc\u7684\u6210\u5458\u3002(in C) C++ \u7684\u505a\u6cd5\u662f\u5728\u7ed3\u6784\u91cc\u653e\u5165\u4e86\u51fd\u6570\uff0c\u6210\u4e86\u7c7b\u3002","title":"Length"},{"location":"OOP/oop1/#create-a-string","text":"string major(\"CS\"); \u8fd9\u6837\u4e5f\u53ef\u4ee5\u521d\u59cb\u5316\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002(\u7c7b\u4f3c\u5730\u4e5f\u53ef\u4ee5 int age(18); )","title":"Create a string"},{"location":"OOP/oop1/#other-member-functions","text":"sub-string substr(int pos, int len); \u62f7\u8d1d\u5b57\u7b26\u4e32\u4ece pos \u4f4d\u7f6e\u5f00\u59cb\u7684 len \u4e2a\u5b57\u7b26 \u5982\u679c pos \u8d85\u51fa\u4e86\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u4f1a\u4ea7\u751f\u5f02\u5e38\uff1b \u5982\u679c pos \u7b49\u4e8e\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u4f1a\u5f97\u5230\u7a7a\u5b57\u7b26\u4e32\uff1b \u5982\u679c pos+len \u8d85\u51fa\u4e86\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u90a3\u4e48\u53ea\u4f1a\u62f7\u8d1d\u5230\u5b57\u7b26\u4e32\u672b\u5c3e\u3002 alter string assign \u5c06\u4e00\u4e2a\u65b0\u7684\u503c\u8d4b\u7ed9\u5b57\u7b26\u4e32 assign ( const string & str ); //string assign ( const string & str , size_t subpos , size_t sublen ); //substring assign ( const char * s ); //C-string assign ( const char * s , size_t n ); //buffer assign ( size_t n , char c ); //fill insert \u5728 pos \u4e4b\u524d\u63d2\u5165\u5b57\u7b26 insert ( size_t pos , const string & str ); insert ( size_t pos , const string & str , size_t subpos , size_t sublen ); insert ( size_t pos , const char * s ); insert ( size_t pos , const char * s , size_t n ); insert ( size_t pos , size_t n , char c ); erase (size_t pos = 0, size_t len = npos); \u64e6\u9664\u4ece pos \u5f00\u59cb len \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff08\u5982\u679c\u8d85\u51fa\u5b57\u7b26\u4e32\u957f\u5ea6\u5219\u5230\u5b57\u7b26\u4e32\u672b\u5c3e\uff09 \u9ed8\u8ba4\u53c2\u6570\u64e6\u9664\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u7b26 replace \u4ee3\u66ff\u4ece pos \u5f00\u59cb len \u7684\u5b57\u7b26\u4e32\u3002 replace ( size_t pos , size_t len , const string & str ); replace ( size_t pos , size_t len , const string & str , size_t subpos , size_t sublen ); replace ( size_t pos , size_t len , const char * s ); replace ( size_t pos , size_t len , const char * s , size_t n ); replace ( size_t pos , size_t len , size_t n , char c ); find (const string& str, size_t pos = 0) \u4ece pos \u5f00\u59cb\u67e5\u627e\u5b57\u7b26\u4e32 str , \u8fd4\u56de\u7b2c\u4e00\u6b21\u5339\u914d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002","title":"Other Member Functions"},{"location":"OOP/oop1/#dynamically-allocated-memory","text":"operator(not function) \u8fd0\u7b97\u7b26\u662f\u7f16\u7a0b\u4ea7\u751f\u4ee3\u7801\u6765\u505a\u8fd9\u4ef6\u4e8b\u3002 new new \u8fd4\u56de\u6307\u5411\u5730\u5740\u7a7a\u95f4\u7684\u6307\u9488\u3002\u4f46 new \u77e5\u9053\u5730\u5740\u7a7a\u95f4\u7684\u7c7b\u578b\uff08\u4e0e malloc \u4e0d\u540c\uff09\u3002 new int; new Stash; new int[10]; delete \u5982\u679c\u8981\u5220\u9664\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u4f1a\u6267\u884c\u5176\u6790\u6784\u51fd\u6570 delete p; delete[] p; Dynamic Arrays int * psome = newint [ 10 ]; delete [] psome ; \u8fd9\u91cc delete[] \u7684\u62ec\u53f7\u662f\u4e0d\u80fd\u5c11\u7684 p1 = new int; \u8fd4\u56de\u4e00\u5757\u56db\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u7684\u5730\u5740\uff0c\u540c\u65f6\u6709\u4e00\u4e2a\u8868\u8bb0\u5f55\u67d0\u4e2a\u5730\u5740\u6709\u6211\u4eec\u7533\u8bf7\u7684\u56db\u5b57\u8282\u3002\u540c\u7406 p2 = new int [10]; \u4e5f\u4f1a\u5728\u8868\u4e2d\u8bb0\u5f55. delete p1 \u4e0d\u4f1a\u53bb\u62b9\u6389\u5730\u5740\u7684\u6570\u636e\uff0c\u53ea\u662f\u5c06\u8868\u4e2d\u6761\u76ee\u53bb\u6389\u3002\u4f46\u5982\u679c p2++; \u518d delete p2; \u627e\u4e0d\u5230 p2, \u8fd9\u662f\u4e00\u4e2a\u5f02\u5e38\u64cd\u4f5c\u3002 p1 = new Student; \u90a3\u4e48 delete p1; \u65f6\u4f1a\u6267\u884c Student \u7684\u6790\u6784\u51fd\u6570. delete p2; \u8ba4\u4e3a p2 \u6307\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6240\u4ee5\u53ea\u5c06\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u6790\u6784\u3002\u8fd9\u6837\u7a7a\u95f4\u662f\u53ef\u4ee5\u56de\u6536\u7684 delete [] p2; \u5c31\u662f\u544a\u8bc9\u7cfb\u7edf\u4e0d\u6b62\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f1a\u5e2e\u6211\u4eec\u5c06\u6240\u6709\u5bf9\u8c61\u90fd\u6790\u6784\u3002","title":"Dynamically Allocated Memory"},{"location":"OOP/oop10/","text":"Templates \u00b6 Reuse source code for generic programming. Function Templates \u00b6 template < class T > void swap ( T & x , T & y ) { T temp = x ; x = y ; y = temp ; } The template keyword introduces the template template \u4e0b\u9762\u7684\u5185\u5bb9\u5c31\u662f\u6a21\u677f\uff0c\u6bd4\u5982\u8fd9\u91cc\u5c31\u662f\u51fd\u6570\u6a21\u677f\u3002\u5982\u679c\u4e0b\u9762\u662f\u7c7b\u90a3\u5c31\u662f\u7c7b\u6a21\u677f\u3002 The class T specifies a parameterized type name class means any built-in type or user-defined type Inside the template, use T as a type name Template Instantiation int i = 3 ; int j = 4 ; swap ( i , j ); // use explicit int swap float k = 4.5 ; float m = 3.7 ; swap ( k , m ); // instanstiate float swap std :: string s ( \"Hello\" ); std :: string t ( \"World\" ); swap ( s , t ); // std::string swap \u8fd9\u91cc swap(k,m) \u4f1a\u8c03\u7528\u51fd\u6570\u6a21\u677f\uff0c\u968f\u540e\u751f\u6210 float swap, \u7f16\u8bd1\u5668\u4f1a\u63d2\u5165\u51fd\u6570\uff0c\u8c03\u7528\u3002 \u5728 C++ \u4e2d\u7f16\u8bd1\u540e\u91cd\u8f7d\u51fd\u6570\u7684\u540d\u5b57\u4e0d\u518d\u662f f, \u800c\u662f _f_int/_f_double/_f_void..., \u628a\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u7f16\u5165\u51fd\u6570\u7684\u540d\u5b57\u3002 Only exact match on types is used No conversion operations are applied swap ( int , int ); // ok swap ( double , double ); // ok swap ( int , double ); // error! Even implicit conversions are ignored Template functions and regular functions coexist \u5982\u679c\u51fd\u6570\u91cc\u6ca1\u6709\u7c7b\u578b T, \u53ef\u4ee5\u76f4\u767d\u5730\u544a\u8bc9\u7f16\u8bd1\u5668? Class templates \u00b6 template < class T > class Vector { public : Vector ( int ); ~ Vector (); Vector ( const Vector & ); Vector & operator = ( const Vector & ); T & operator []( int ); private : T * m_elements ; int m_size ; }; \u7c7b\u6a21\u677f\u4e00\u5b9a\u662f\u663e\u5f0f\u7684(\u5982 STL \u6a21\u677f) Vector < int > v1 ( 100 ); Vector < Complex > v2 ( 256 ); v1 [ 20 ] = 10 ; v2 [ 20 ] = v1 [ 20 ]; // ok if int->Complex define \u5728\u6210\u5458\u51fd\u6570\u5b9a\u4e49\u90fd\u8981\u52a0\u4e0a\u6a21\u677f\u3002 template < class T > Vector < T >:: Vector ( int size ) : m_size ( size ) { m_elements = new T [ m_size ]; } template < class T > T & Vector < T >:: operator []( int indx ) { if ( indx < m_size && indx > 0 ) { return m_elements [ indx ]; } else { ... } } \u6ce8\u610f template <class T> , Vector<T> . \u7c7b\u6a21\u677f\u7684\u51fd\u6570\u662f\u58f0\u660e\u800c\u4e0d\u662f\u5b9a\u4e49\uff0c\u6ca1\u6709\u5206\u79bb\u7684 .h \u6587\u4ef6\u3002\uff08\u4e0d\u9700\u8981 inline \u5173\u952e\u5b57\uff09 Templates can use multiple types template < class Key , class Value > class HashTable { const Value & lookup ( const Key & ) const ; void install ( const Key & , const Value & ); ... }; Templates nest \u2014 they\u2019re just new types! Vector< Vector< double *> > // note space > > Type arguments can be complicated Vector< int (*)(Vector<double>&, int)>","title":"Templates"},{"location":"OOP/oop10/#templates","text":"Reuse source code for generic programming.","title":"Templates"},{"location":"OOP/oop10/#function-templates","text":"template < class T > void swap ( T & x , T & y ) { T temp = x ; x = y ; y = temp ; } The template keyword introduces the template template \u4e0b\u9762\u7684\u5185\u5bb9\u5c31\u662f\u6a21\u677f\uff0c\u6bd4\u5982\u8fd9\u91cc\u5c31\u662f\u51fd\u6570\u6a21\u677f\u3002\u5982\u679c\u4e0b\u9762\u662f\u7c7b\u90a3\u5c31\u662f\u7c7b\u6a21\u677f\u3002 The class T specifies a parameterized type name class means any built-in type or user-defined type Inside the template, use T as a type name Template Instantiation int i = 3 ; int j = 4 ; swap ( i , j ); // use explicit int swap float k = 4.5 ; float m = 3.7 ; swap ( k , m ); // instanstiate float swap std :: string s ( \"Hello\" ); std :: string t ( \"World\" ); swap ( s , t ); // std::string swap \u8fd9\u91cc swap(k,m) \u4f1a\u8c03\u7528\u51fd\u6570\u6a21\u677f\uff0c\u968f\u540e\u751f\u6210 float swap, \u7f16\u8bd1\u5668\u4f1a\u63d2\u5165\u51fd\u6570\uff0c\u8c03\u7528\u3002 \u5728 C++ \u4e2d\u7f16\u8bd1\u540e\u91cd\u8f7d\u51fd\u6570\u7684\u540d\u5b57\u4e0d\u518d\u662f f, \u800c\u662f _f_int/_f_double/_f_void..., \u628a\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u7f16\u5165\u51fd\u6570\u7684\u540d\u5b57\u3002 Only exact match on types is used No conversion operations are applied swap ( int , int ); // ok swap ( double , double ); // ok swap ( int , double ); // error! Even implicit conversions are ignored Template functions and regular functions coexist \u5982\u679c\u51fd\u6570\u91cc\u6ca1\u6709\u7c7b\u578b T, \u53ef\u4ee5\u76f4\u767d\u5730\u544a\u8bc9\u7f16\u8bd1\u5668?","title":"Function Templates"},{"location":"OOP/oop10/#class-templates","text":"template < class T > class Vector { public : Vector ( int ); ~ Vector (); Vector ( const Vector & ); Vector & operator = ( const Vector & ); T & operator []( int ); private : T * m_elements ; int m_size ; }; \u7c7b\u6a21\u677f\u4e00\u5b9a\u662f\u663e\u5f0f\u7684(\u5982 STL \u6a21\u677f) Vector < int > v1 ( 100 ); Vector < Complex > v2 ( 256 ); v1 [ 20 ] = 10 ; v2 [ 20 ] = v1 [ 20 ]; // ok if int->Complex define \u5728\u6210\u5458\u51fd\u6570\u5b9a\u4e49\u90fd\u8981\u52a0\u4e0a\u6a21\u677f\u3002 template < class T > Vector < T >:: Vector ( int size ) : m_size ( size ) { m_elements = new T [ m_size ]; } template < class T > T & Vector < T >:: operator []( int indx ) { if ( indx < m_size && indx > 0 ) { return m_elements [ indx ]; } else { ... } } \u6ce8\u610f template <class T> , Vector<T> . \u7c7b\u6a21\u677f\u7684\u51fd\u6570\u662f\u58f0\u660e\u800c\u4e0d\u662f\u5b9a\u4e49\uff0c\u6ca1\u6709\u5206\u79bb\u7684 .h \u6587\u4ef6\u3002\uff08\u4e0d\u9700\u8981 inline \u5173\u952e\u5b57\uff09 Templates can use multiple types template < class Key , class Value > class HashTable { const Value & lookup ( const Key & ) const ; void install ( const Key & , const Value & ); ... }; Templates nest \u2014 they\u2019re just new types! Vector< Vector< double *> > // note space > > Type arguments can be complicated Vector< int (*)(Vector<double>&, int)>","title":"Class templates"},{"location":"OOP/oop11/","text":"Exceptions \u00b6 Exceptions \u00b6 Run-time Error The basic philosophy of C++ is that \u201cbadly formed code will not be run. Exception \u6211\u4eec\u80fd\u9884\u89c1\u4ed6\u53d1\u751f\uff0c\u4f46\u4e0d\u662f\u6bcf\u6b21\u90fd\u53d1\u751f\u3002 read a file open the file; determine its size; allocate that much memory; read the file into memory; close the file; \u53ef\u4ee5\u9884\u89c1\u7684\u9519\u8bef\uff1a\u627e\u4e0d\u5230\u6587\u4ef6\uff0c\u6587\u4ef6\u867d\u7136\u5b58\u5728\u4f46\u662f\u6253\u4e0d\u5f00\uff08\u6ca1\u6709\u6743\u9650\u3001\u88ab\u522b\u7684\u8fdb\u7a0b\u6253\u5f00\uff09\uff0c\u6587\u4ef6\u5927\u5c0f\u5224\u65ad\u5931\u8d25\uff08\u53ef\u80fd\u662f\u4e00\u4e2a\u4e32\u53e3\uff0c\u4e0d\u662f\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\uff0c\u4e32\u53e3\u662f\u6ca1\u6709\u7ed3\u675f\u7684\uff09\u53ef\u4ee5 fseek \u5230\u6587\u4ef6\u672b\u5c3e\uff0c\u518d ftell \u672b\u5c3e\u7684\u503c\u3002 errorCodeType readFile { initialize errorCode = 0 ; open the file ; if ( theFilesOpen ) { determine its size ; if ( gotTheFileLength ) { allocate that much memory ; if ( gotEnoughMemory ) { read the file into memory ; if ( readFailed ) { errorCode = -1 ; } } else { errorCode = -2 ; } } else { errorCode = -3 ; } close the file ; if ( theFILEDidntClose && errorCode == 0 ) { errorCode = -4 ; } else { errorCode = errorCode and -4 ; } } else { errorCode = -5 ; } return errorCode ; } \u8fd9\u662f\u597d\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u5931\u8d25\u4f1a\u5931\u8d25\u5728\u54ea\u4e00\u6b65\u3002\u4f46\u8fd9\u6837\u7684\u53ef\u8bfb\u6027\u4e0d\u597d\uff0c\u53ef\u4ee5\u7528\u5f02\u5e38\u6539\u5199\u4e3a\u4e0b\u9762\u8fd9\u6837\u3002 try { open the file ; determine its size ; allocate that much memory ; read the file into memory ; close the file ; } catch ( fileOpenFailed ) { doSomething ; } catch ( sizeDeterminationFailed ) { doSomething ; } catch ( memoryAllocationFailed ) { doSomething ; } catch ( readFailed ) { doSomething ; } catch ( fileCloseFailed ) { doSomething ; } \u628a\u4e1a\u52a1\u903b\u8f91\u548c\u9519\u8bef\u5904\u7406\u5206\u5f00\u4e86\u3002 At the point where the problem occurs, you might not know what to do with it, but you do know that you can\u2019t just continue on merrily; you must stop, and somebody, somewhere, must figure out what to do. \u8fd0\u884c\u65f6\u523b\u5f71\u54cd\u7a0b\u5e8f\u8fd0\u884c\u7684\uff0c\u80fd\u9884\u89c1\u4f1a\u53d1\u751f\u4f46\u4e0d\u662f\u6bcf\u4e00\u6b21\u53d1\u751f\u7684\u4e8b\u4ef6\u3002 The significant benefit of exceptions is that they clean up error handling code. It separates the code that describes what you want to do from the code that is executed. Vector template < class T > class Vector { private : T * m_elements ; int m_size ; public : Vector ( int size = 0 ) : m_size ( size ) ... ~ Vector () { delete [] m_elements ; } void length ( int ); int length () { return m_size ; } T & operator []( int ); }; \u8fd9\u91cc [] \u64cd\u4f5c\u7b26\u53ef\u80fd\u4f1a\u51fa\u73b0\u8d8a\u754c\u7684\u60c5\u51b5\u3002\u6700\u4f73\u7684\u5904\u7406\u65b9\u5f0f\u662f\u629b\u5f02\u5e38\u3002 if ( indx < 0 || indx >= m_size ) { // throw is a keyword // exception is raised at this point throw << something >> ; } \u629b\u5f02\u5e38\u4e4b\u540e\uff0c\u540e\u7eed\u7684\u4ee3\u7801\u90fd\u4e0d\u4f1a\u6267\u884c\uff08\u6ca1\u9047\u5230\u7684 try{} \u7684\u5927\u62ec\u53f7\u90fd\u53ef\u4ee5\u770b\u4f5c\u5f02\u5e38\uff09\uff0c\u7136\u540e\u5f80\u5916\u8d70\u3002\u4e0a\u9762\u8fd9\u91cc throw \u4e4b\u540e\uff0c\u5982\u679c\u5927\u62ec\u53f7\u662f\u8bed\u53e5\u5c31\u79bb\u5f00\u8bed\u53e5\uff0c\u5982\u679c\u662f\u51fd\u6570\u5c31\u79bb\u5f00\u51fd\u6570\uff0c\u5982\u679c\u662f try{} , \u6211\u4eec\u5c31\u5224\u65ad\u5339\u914d\u3002 \u4e00\u4e2a\u5f02\u5e38\u7c7b class VectorIndexError { public : VectorIndexError ( int v ) : m_badValue ( v ) { } ~ VectorIndexError () { } void diagnostic () { cerr << \"index \" << m_ badValue << \"out of range!\" ; } private : int m_badValue ; }; \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5 throw VectorIndexError(indx); . \u5916\u90e8\u5c31\u4f1a\u62ff\u5230\u8fd9\u4e2a\u5bf9\u8c61\u3002\u9700\u8981\u7528 try catch \u6355\u6349\uff0c\u5426\u5219\u4f1a\u76f4\u63a5\u7ed3\u675f\u3002\u6355\u6349\u4e4b\u540e\u6574\u4e2a try catch \u5c31\u6267\u884c\u7ed3\u675f\u3002 \u53ef\u4ee5\u6355\u6349\u5230\u5f02\u5e38\u540e\u518d\u7ee7\u7eed throw. void outer2 () { String err ( \"exception caught\" ); try { func (); } catch ( VectorIndexError ) { cout << err ; throw ; // propagate the exception } } catch(...) \u8868\u793a\u6355\u6349\u6240\u6709\u5f02\u5e38\uff0c\u4f46\u8fd9\u6837\u65e0\u6cd5\u83b7\u5f97\u5f02\u5e38\u7684\u5bf9\u8c61\u3002 Is that surrounding a trye NO: leave that scope Is it a method body YES: return to the caller, then NO: go to 1 st line YES: try to match a catch YES: do the clause and NO: \u53d1\u751f\u5f02\u5e38\u79bb\u5f00 fun \u7684\u65f6\u5019\u672c\u5730\u53d8\u91cf\u4f1a\u88ab\u6790\u6784\u3002 throw VIEE(idx) \u7684\u5bf9\u8c61\u5728\u5806\u91cc\uff0c\u4f46\u662f\u4e0d\u88ab\u6e05\u9664\uff0c\u4f1a\u4e00\u76f4\u7559\u5728\u539f\u5730. catch \u6355\u6349\u5230\u5bf9\u8c61\u4e4b\u540e\uff0c\u7ed3\u675f try catch \u4e4b\u540e\u4f1a\u628a\u5bf9\u8c61\u6e05\u9664\u3002\uff08\u8fd9\u91cc\u4e0d\u4f1a\u53d1\u751f\u62f7\u8d1d\u6784\u9020\uff0c\u4ecd\u7136\u662f\u521a\u521a\u5806\u91cc\u7684\u5bf9\u8c61\uff09 throw; reraises the exception being handled. valid only within a handler Try blocks \u00b6 try \u540e\u9762\u53ef\u4ee5\u8ddf\u4efb\u610f\u6570\u91cf\u7684 catch. Two forms catch (SomeType v) { // handler code } catch (...) { // handler code } throw \u53ef\u4ee5\u629b\u7684\u4efb\u610f\u7c7b\u578b, int/double/... \u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u4e00\u822c\u4e0d\u4f1a\u629b\u539f\u59cb\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u4e3a\u8868\u8fbe\u7684\u4fe1\u606f\u6709\u9650\u3002\u901a\u5e38\u4f1a\u505a\u4e00\u4e2a\u7c7b\uff0c\u629b\u7c7b\u7684\u5bf9\u8c61\u3002 Handlers are checked in order of appearance \u6309\u987a\u5e8f\u5339\u914d\uff0c\u5148\u5339\u914d\u524d\u9762\u7684\uff0c\u5339\u914d\u6210\u529f\u540e\u4e0d\u4f1a\u5bfb\u6c42\u4e0b\u4e00\u4e2a\u5339\u914d\u3002 Check for exact match Apply base class conversions Reference and pointer types, only \u5bf9\u8c61\u4f1a\u8fdb\u884c\u57fa\u7c7b\u8f6c\u6362\u3002\u4e00\u822c\u628a\u5b50\u7c7b\u653e\u5728\u524d\u9762\u3002 Ellipses (...) match all Exceptions and new \u00b6 new does NOT returned 0 on failure. new raises a bad_alloc() exception. Standard library exceptions Exception specifications \u00b6 Declare which exceptions function might raise Part of function prototypes e.g. void abc(int a) : throw(MathErr) {} \u8c03\u4e86\u522b\u4eba\u7684\u51fd\u6570\uff0c\u8981\u4e3a\u4e86\u522b\u4eba\u629b\u5f02\u5e38\u505a\u51c6\u5907\u3002 \u53ef\u4ee5\u5728\u51fd\u6570\u5934\u90e8\u58f0\u660e\u4f1a\u629b\u4ec0\u4e48\u5f02\u5e38\u3002\u4e0d\u4f1a\u5728\u7f16\u8bd1\u65f6\u671f\u68c0\u67e5\u3002 \u9650\u5236 abc \u800c\u975e\u8c03\u7528 abc \u51fd\u6570\u3002\u5982\u679c\u629b\u51fa\u4e86\u6bd4\u4f60\u58f0\u660e\u66f4\u591a\u7684\u5f02\u5e38\uff0c\u5f02\u5e38\u68c0\u67e5\u673a\u5236\u4f1a\u629b\u51fa\u4e00\u4e2a\u7ec8\u6b62\u7a0b\u5e8f\u7684\u5f02\u5e38\u3002 Printer :: print ( Document & ) : throw ( PrinterOffLine , BadDocument ) { ... PrintManager :: print ( Document & ) : throw ( BadDocument ) { ... // raises or doesn\u2019t handle BadDocument void goodguy () : throw () { // handles all exceptions void average () { } // no spec, no checking, \u7b2c\u4e00\u4e2a\u8868\u793a\u4f1a\u629b PrinterOffLine, BadDocument \u5f02\u5e38\u3002\uff08\u4e0d\u4e00\u5b9a\u629b\uff0c\u4f46\u53ef\u80fd\uff09 \u7b2c\u4e09\u4e2a\u8868\u793a\u4e0d\u4f1a\u629b\u4efb\u4f55\u5f02\u5e38\uff0c\u8fd9\u6837\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u9700\u8981 try catch. \u7b2c\u56db\u4e2a\u53ef\u80fd\u4f1a\u629b\u5f02\u5e38\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4e0d\u4f1a\u8fdb\u884c\u68c0\u67e5\u3002 Design considerations \u00b6 Exceptions should indicate errors. exception \u4e0d\u662f routine. Don\u2019t use exceptions in place of good design. Summary Error recovery is a hard design problem All subsystems need help from their clients to handle exceptional cases Exceptions provide the mechanism Propagated dynamically Objects on stack destroyed properly Act to terminate the problematic function Another big use: Constructors that can\u2019t complete their work More exceptions \u00b6 Exceptions and constructors \u00b6 \u5982\u679c\u5728\u6784\u9020\u7684\u65f6\u5019\u53d1\u751f\u4e86\u5f02\u5e38\u3002 \u5148\u5206\u914d\u5185\u5b58\uff0c\u518d\u6267\u884c\u6784\u9020\u3002 f () { A * p = new A (); ... delete p ; } \u5982\u679c\u6784\u9020\u7684\u65f6\u5019\u51fa\u5f02\u5e38, p \u65e0\u6cd5\u5f97\u5230\u5206\u914d\u7684\u5730\u5740\uff0c\u4f46\u662f\u5185\u5b58\u5374\u6ca1\u6709\u88ab\u6790\u6784\u3002\u5185\u5b58\u6cc4\u6f0f\uff01","title":"Exception"},{"location":"OOP/oop11/#exceptions","text":"","title":"Exceptions"},{"location":"OOP/oop11/#exceptions_1","text":"Run-time Error The basic philosophy of C++ is that \u201cbadly formed code will not be run. Exception \u6211\u4eec\u80fd\u9884\u89c1\u4ed6\u53d1\u751f\uff0c\u4f46\u4e0d\u662f\u6bcf\u6b21\u90fd\u53d1\u751f\u3002 read a file open the file; determine its size; allocate that much memory; read the file into memory; close the file; \u53ef\u4ee5\u9884\u89c1\u7684\u9519\u8bef\uff1a\u627e\u4e0d\u5230\u6587\u4ef6\uff0c\u6587\u4ef6\u867d\u7136\u5b58\u5728\u4f46\u662f\u6253\u4e0d\u5f00\uff08\u6ca1\u6709\u6743\u9650\u3001\u88ab\u522b\u7684\u8fdb\u7a0b\u6253\u5f00\uff09\uff0c\u6587\u4ef6\u5927\u5c0f\u5224\u65ad\u5931\u8d25\uff08\u53ef\u80fd\u662f\u4e00\u4e2a\u4e32\u53e3\uff0c\u4e0d\u662f\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\uff0c\u4e32\u53e3\u662f\u6ca1\u6709\u7ed3\u675f\u7684\uff09\u53ef\u4ee5 fseek \u5230\u6587\u4ef6\u672b\u5c3e\uff0c\u518d ftell \u672b\u5c3e\u7684\u503c\u3002 errorCodeType readFile { initialize errorCode = 0 ; open the file ; if ( theFilesOpen ) { determine its size ; if ( gotTheFileLength ) { allocate that much memory ; if ( gotEnoughMemory ) { read the file into memory ; if ( readFailed ) { errorCode = -1 ; } } else { errorCode = -2 ; } } else { errorCode = -3 ; } close the file ; if ( theFILEDidntClose && errorCode == 0 ) { errorCode = -4 ; } else { errorCode = errorCode and -4 ; } } else { errorCode = -5 ; } return errorCode ; } \u8fd9\u662f\u597d\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u662f\u5426\u6210\u529f\uff0c\u5982\u679c\u5931\u8d25\u4f1a\u5931\u8d25\u5728\u54ea\u4e00\u6b65\u3002\u4f46\u8fd9\u6837\u7684\u53ef\u8bfb\u6027\u4e0d\u597d\uff0c\u53ef\u4ee5\u7528\u5f02\u5e38\u6539\u5199\u4e3a\u4e0b\u9762\u8fd9\u6837\u3002 try { open the file ; determine its size ; allocate that much memory ; read the file into memory ; close the file ; } catch ( fileOpenFailed ) { doSomething ; } catch ( sizeDeterminationFailed ) { doSomething ; } catch ( memoryAllocationFailed ) { doSomething ; } catch ( readFailed ) { doSomething ; } catch ( fileCloseFailed ) { doSomething ; } \u628a\u4e1a\u52a1\u903b\u8f91\u548c\u9519\u8bef\u5904\u7406\u5206\u5f00\u4e86\u3002 At the point where the problem occurs, you might not know what to do with it, but you do know that you can\u2019t just continue on merrily; you must stop, and somebody, somewhere, must figure out what to do. \u8fd0\u884c\u65f6\u523b\u5f71\u54cd\u7a0b\u5e8f\u8fd0\u884c\u7684\uff0c\u80fd\u9884\u89c1\u4f1a\u53d1\u751f\u4f46\u4e0d\u662f\u6bcf\u4e00\u6b21\u53d1\u751f\u7684\u4e8b\u4ef6\u3002 The significant benefit of exceptions is that they clean up error handling code. It separates the code that describes what you want to do from the code that is executed. Vector template < class T > class Vector { private : T * m_elements ; int m_size ; public : Vector ( int size = 0 ) : m_size ( size ) ... ~ Vector () { delete [] m_elements ; } void length ( int ); int length () { return m_size ; } T & operator []( int ); }; \u8fd9\u91cc [] \u64cd\u4f5c\u7b26\u53ef\u80fd\u4f1a\u51fa\u73b0\u8d8a\u754c\u7684\u60c5\u51b5\u3002\u6700\u4f73\u7684\u5904\u7406\u65b9\u5f0f\u662f\u629b\u5f02\u5e38\u3002 if ( indx < 0 || indx >= m_size ) { // throw is a keyword // exception is raised at this point throw << something >> ; } \u629b\u5f02\u5e38\u4e4b\u540e\uff0c\u540e\u7eed\u7684\u4ee3\u7801\u90fd\u4e0d\u4f1a\u6267\u884c\uff08\u6ca1\u9047\u5230\u7684 try{} \u7684\u5927\u62ec\u53f7\u90fd\u53ef\u4ee5\u770b\u4f5c\u5f02\u5e38\uff09\uff0c\u7136\u540e\u5f80\u5916\u8d70\u3002\u4e0a\u9762\u8fd9\u91cc throw \u4e4b\u540e\uff0c\u5982\u679c\u5927\u62ec\u53f7\u662f\u8bed\u53e5\u5c31\u79bb\u5f00\u8bed\u53e5\uff0c\u5982\u679c\u662f\u51fd\u6570\u5c31\u79bb\u5f00\u51fd\u6570\uff0c\u5982\u679c\u662f try{} , \u6211\u4eec\u5c31\u5224\u65ad\u5339\u914d\u3002 \u4e00\u4e2a\u5f02\u5e38\u7c7b class VectorIndexError { public : VectorIndexError ( int v ) : m_badValue ( v ) { } ~ VectorIndexError () { } void diagnostic () { cerr << \"index \" << m_ badValue << \"out of range!\" ; } private : int m_badValue ; }; \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5 throw VectorIndexError(indx); . \u5916\u90e8\u5c31\u4f1a\u62ff\u5230\u8fd9\u4e2a\u5bf9\u8c61\u3002\u9700\u8981\u7528 try catch \u6355\u6349\uff0c\u5426\u5219\u4f1a\u76f4\u63a5\u7ed3\u675f\u3002\u6355\u6349\u4e4b\u540e\u6574\u4e2a try catch \u5c31\u6267\u884c\u7ed3\u675f\u3002 \u53ef\u4ee5\u6355\u6349\u5230\u5f02\u5e38\u540e\u518d\u7ee7\u7eed throw. void outer2 () { String err ( \"exception caught\" ); try { func (); } catch ( VectorIndexError ) { cout << err ; throw ; // propagate the exception } } catch(...) \u8868\u793a\u6355\u6349\u6240\u6709\u5f02\u5e38\uff0c\u4f46\u8fd9\u6837\u65e0\u6cd5\u83b7\u5f97\u5f02\u5e38\u7684\u5bf9\u8c61\u3002 Is that surrounding a trye NO: leave that scope Is it a method body YES: return to the caller, then NO: go to 1 st line YES: try to match a catch YES: do the clause and NO: \u53d1\u751f\u5f02\u5e38\u79bb\u5f00 fun \u7684\u65f6\u5019\u672c\u5730\u53d8\u91cf\u4f1a\u88ab\u6790\u6784\u3002 throw VIEE(idx) \u7684\u5bf9\u8c61\u5728\u5806\u91cc\uff0c\u4f46\u662f\u4e0d\u88ab\u6e05\u9664\uff0c\u4f1a\u4e00\u76f4\u7559\u5728\u539f\u5730. catch \u6355\u6349\u5230\u5bf9\u8c61\u4e4b\u540e\uff0c\u7ed3\u675f try catch \u4e4b\u540e\u4f1a\u628a\u5bf9\u8c61\u6e05\u9664\u3002\uff08\u8fd9\u91cc\u4e0d\u4f1a\u53d1\u751f\u62f7\u8d1d\u6784\u9020\uff0c\u4ecd\u7136\u662f\u521a\u521a\u5806\u91cc\u7684\u5bf9\u8c61\uff09 throw; reraises the exception being handled. valid only within a handler","title":"Exceptions"},{"location":"OOP/oop11/#try-blocks","text":"try \u540e\u9762\u53ef\u4ee5\u8ddf\u4efb\u610f\u6570\u91cf\u7684 catch. Two forms catch (SomeType v) { // handler code } catch (...) { // handler code } throw \u53ef\u4ee5\u629b\u7684\u4efb\u610f\u7c7b\u578b, int/double/... \u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u4e00\u822c\u4e0d\u4f1a\u629b\u539f\u59cb\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u4e3a\u8868\u8fbe\u7684\u4fe1\u606f\u6709\u9650\u3002\u901a\u5e38\u4f1a\u505a\u4e00\u4e2a\u7c7b\uff0c\u629b\u7c7b\u7684\u5bf9\u8c61\u3002 Handlers are checked in order of appearance \u6309\u987a\u5e8f\u5339\u914d\uff0c\u5148\u5339\u914d\u524d\u9762\u7684\uff0c\u5339\u914d\u6210\u529f\u540e\u4e0d\u4f1a\u5bfb\u6c42\u4e0b\u4e00\u4e2a\u5339\u914d\u3002 Check for exact match Apply base class conversions Reference and pointer types, only \u5bf9\u8c61\u4f1a\u8fdb\u884c\u57fa\u7c7b\u8f6c\u6362\u3002\u4e00\u822c\u628a\u5b50\u7c7b\u653e\u5728\u524d\u9762\u3002 Ellipses (...) match all","title":"Try blocks"},{"location":"OOP/oop11/#exceptions-and-new","text":"new does NOT returned 0 on failure. new raises a bad_alloc() exception. Standard library exceptions","title":"Exceptions and new"},{"location":"OOP/oop11/#exception-specifications","text":"Declare which exceptions function might raise Part of function prototypes e.g. void abc(int a) : throw(MathErr) {} \u8c03\u4e86\u522b\u4eba\u7684\u51fd\u6570\uff0c\u8981\u4e3a\u4e86\u522b\u4eba\u629b\u5f02\u5e38\u505a\u51c6\u5907\u3002 \u53ef\u4ee5\u5728\u51fd\u6570\u5934\u90e8\u58f0\u660e\u4f1a\u629b\u4ec0\u4e48\u5f02\u5e38\u3002\u4e0d\u4f1a\u5728\u7f16\u8bd1\u65f6\u671f\u68c0\u67e5\u3002 \u9650\u5236 abc \u800c\u975e\u8c03\u7528 abc \u51fd\u6570\u3002\u5982\u679c\u629b\u51fa\u4e86\u6bd4\u4f60\u58f0\u660e\u66f4\u591a\u7684\u5f02\u5e38\uff0c\u5f02\u5e38\u68c0\u67e5\u673a\u5236\u4f1a\u629b\u51fa\u4e00\u4e2a\u7ec8\u6b62\u7a0b\u5e8f\u7684\u5f02\u5e38\u3002 Printer :: print ( Document & ) : throw ( PrinterOffLine , BadDocument ) { ... PrintManager :: print ( Document & ) : throw ( BadDocument ) { ... // raises or doesn\u2019t handle BadDocument void goodguy () : throw () { // handles all exceptions void average () { } // no spec, no checking, \u7b2c\u4e00\u4e2a\u8868\u793a\u4f1a\u629b PrinterOffLine, BadDocument \u5f02\u5e38\u3002\uff08\u4e0d\u4e00\u5b9a\u629b\uff0c\u4f46\u53ef\u80fd\uff09 \u7b2c\u4e09\u4e2a\u8868\u793a\u4e0d\u4f1a\u629b\u4efb\u4f55\u5f02\u5e38\uff0c\u8fd9\u6837\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u9700\u8981 try catch. \u7b2c\u56db\u4e2a\u53ef\u80fd\u4f1a\u629b\u5f02\u5e38\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4e0d\u4f1a\u8fdb\u884c\u68c0\u67e5\u3002","title":"Exception specifications"},{"location":"OOP/oop11/#design-considerations","text":"Exceptions should indicate errors. exception \u4e0d\u662f routine. Don\u2019t use exceptions in place of good design. Summary Error recovery is a hard design problem All subsystems need help from their clients to handle exceptional cases Exceptions provide the mechanism Propagated dynamically Objects on stack destroyed properly Act to terminate the problematic function Another big use: Constructors that can\u2019t complete their work","title":"Design considerations"},{"location":"OOP/oop11/#more-exceptions","text":"","title":"More exceptions"},{"location":"OOP/oop11/#exceptions-and-constructors","text":"\u5982\u679c\u5728\u6784\u9020\u7684\u65f6\u5019\u53d1\u751f\u4e86\u5f02\u5e38\u3002 \u5148\u5206\u914d\u5185\u5b58\uff0c\u518d\u6267\u884c\u6784\u9020\u3002 f () { A * p = new A (); ... delete p ; } \u5982\u679c\u6784\u9020\u7684\u65f6\u5019\u51fa\u5f02\u5e38, p \u65e0\u6cd5\u5f97\u5230\u5206\u914d\u7684\u5730\u5740\uff0c\u4f46\u662f\u5185\u5b58\u5374\u6ca1\u6709\u88ab\u6790\u6784\u3002\u5185\u5b58\u6cc4\u6f0f\uff01","title":"Exceptions and constructors"},{"location":"OOP/oop12/","text":"Smart Pointers \u00b6 Reference counting C++ \u6ca1\u6709\u5355\u6839\u7ed3\u6784\uff0c\u4e5f\u6ca1\u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\u3002 Goal: Introduce the code for maintaining reference counts. A reference count is a count of the number of times an object is shared. \u8868\u793a\u5f53\u524d\u5bf9\u8c61\u88ab\u51e0\u4e2a\u6307\u9488\u6307\u7740\u3002 Pointer manipulations have to maintain the count \u5728\u6307\u9488\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u4fee\u6539\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u3002\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u7684\u8ba1\u6570\u662f 0, \u6211\u4eec\u9700\u8981\u628a\u5b83\u6790\u6784\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5783\u573e\u56de\u6536\u3002 Class UCObject holds the count UCPointer is a smart pointer to a UCObject Reference counts \u00b6 Shared memory maintains a count of how many times it is shared. \u4e3a\u4e86\u8282\u7ea6\u5185\u5b58\uff0c\u6211\u4eec\u8ba9\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6307\u5411\u7684 \"abcdef\" \u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 Each sharable object has a counter Initial value is 0 Whenever a pointer is assigned: p = q; Have to do the following p -> decrement (); // p's count will decrease p = q ; q -> increment (); // q/p's count will increase StringRep \u7ee7\u627f\u81ea UCObject , \u56e0\u6b64\u5185\u90e8\u6709\u5f15\u7528\u8ba1\u6570\u3002 String \u662f\u5916\u90e8\u63a5\u53e3\uff0c\u6709\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u662f UCPointer , \u6307\u5411 StringRep . UCObject \u00b6 #include <assert.h> class UCObject { public : UCObject () : m_refCount ( 0 ) { } virtual ~ UCObject () { assert ( m_refCount == 0 );}; // \u8fd9\u91cc assert, \u56e0\u4e3a\u4e0d\u662f\u5bf9\u8c61\u7684\u95ee\u9898\uff0c\u662f\u5916\u90e8\u7684\u95ee\u9898\u3002 UCObject ( const UCObject & ) : m_refCount ( 0 ) { } // \u4e0d\u62f7\u8d1d refcount void incr () { m_refCount ++ ; } void decr (); int references () { return m_refCount ; } private : int m_refCount ; }; inline void UCObject::decr () { m_refCount -= 1 ; if ( m_refCount == 0 ) { delete this ; } } delete this; \u662f\u5408\u6cd5\u7684\uff0c\u4f46\u4e4b\u540e\u4e0d\u5e94\u8be5\u518d\u4f7f\u7528 this \u6307\u9488\u3002 UCPointer \u00b6 template < class T > class UCPointer { private : T * m_pObj ; void increment () { if ( m_pObj ) m_pObj -> incr (); } void decrement () { if ( m_pObj ) m_pObj -> decr (); } public : UCPointer ( T * r = 0 ) : m_pObj ( r ) { increment ();} ~ UCPointer () { decrement (); }; UCPointer ( const UCPointer < T > & p ); UCPointer & operator = ( const UCPointer < T > & ); T * operator -> () const ; T & operator * () const { return * m_pObj ; }; } template < class T > UCPointer < T >:: UCPointer ( const UCPointer < T > & p ){ m_pObj = p . m_pObj ; increment (); } template < class T > UCPointer < T >& UCPointer < T >:: operator = ( const UCPointer < T >& p ){ if ( m_pObj != p . m_pObj ) { decrement (); m_pObj = p . m_pObj ; increment (); } return * this ; } template < class T > T * UCPointer < T >:: operator -> () const { return m_pObj ; } \u9690\u542b\u4e86 T \u5fc5\u987b\u7ee7\u627f\u81ea UCObject , \u8fd9\u6837\u624d\u6709 incr \u7684\u6210\u5458\u51fd\u6570\u3002 \u8fd9\u91cc\u53ea\u8981\u6784\u9020\u4e86\u5bf9\u8c61\uff0c\u5c31\u4f1a\u8c03\u7528 increment \u51fd\u6570\u3002 \u62f7\u8d1d\u6784\u9020\u540e\u8981\u5bf9\u8ba1\u6570\u52a0\u4e00\u3002 \u8d4b\u503c\u6211\u4eec\u8981\u5148\u68c0\u67e5\u4e8c\u8005\u6307\u5411\u7684\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 Example: Shape inherits from UCObject Ellipse elly ( 200F , 300F ); UCPointer < Shape > p ( & elly ); p -> render (); // calls Ellipse::render() on elly! StringRep \u00b6 Envelope and Letter class StringRep : public UCObject { public : StringRep ( const char * ); ~ StringRep (); StringRep ( const StringRep & ); int length () const { return strlen ( m_pChars ); } int equal ( const StringRep & ) const ; private : char * m_pChars ; // reference semantics -- no assignment op! void operator = ( const StringRep & ) { } // \u79c1\u6709\uff0c\u5916\u754c\u4e0d\u80fd\u505a StringRep \u7684\u8d4b\u503c }; \u5177\u4f53\u5b9e\u73b0 StringRep :: StringRep ( const char * s ) { if ( s ) { int len = strlen ( s ) + 1 ; m_pChars = new char [ len ]; strcpy ( m_pChars , s ); } else { m_pChars = new char [ 1 ]; * m_pChars = '\\0' ; } } StringRep ::~ StringRep () { delete [] m_pChars ; } StringRep :: StringRep ( const StringRep & sr ) { int len = sr . length (); m_pChars = new char [ len + 1 ]; strcpy ( m_pChars , sr . m_pChars ); } int StringRep :: equal ( const StringRep & sp ) const { return ( strcmp ( m_pChars , sp . m_pChars ) == 0 ); } \u8865: C++ \u5185\u5b57\u7b26\u4e32\u4e0d\u662f\u901a\u8fc7 char \u7684\u65b9\u5f0f\u5b9e\u73b0(\u6ca1\u6709 \\0 ), \u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u957f\u5ea6\u53d8\u91cf\u3002 \u62f7\u8d1d\u6784\u9020\u65f6\u4f1a\u8c03\u7528 UCObject \u7684\u62f7\u8d1d\u6784\u9020\u3002 String \u00b6 class String { public : String ( const char * ); ~ String (); String ( const String & ); String & operator = ( const String & ); int operator == ( const String & ) const ; String operator + ( const String & ) const ; int length () const ; operator const char * () const ; private : UCPointer < StringRep > m_rep ; }; \u5177\u4f53\u5b9e\u73b0 String :: String ( const char * s ) : m_rep ( 0 ) { m_rep = new StringRep ( s ); } String ::~ String () {} // Again, note constructor for rep in list. String :: String ( const String & s ) : m_rep ( s . m_rep ) { // \u505a UCPointer<StringRep> \u7684\u62f7\u8d1d\u6784\u9020 } String & String :: operator = ( const String & s ) { m_rep = s . m_rep ; // let smart pointer do work! return * this ; } \u8fd9\u91cc m_rep(0) \u5b9e\u9645\u4e0a\u662f\u7528 0 \u53bb\u505a UCP \u7684\u6784\u9020(\u4e5f\u53ef\u4ee5\u4e0d\u5199\uff0c\u56e0\u4e3a\u9ed8\u8ba4 0). new \u8fd4\u56de\u7684\u662f StringRep * , \u800c\u5de6\u8fb9\u662f UCP<StringRep> , \u8fd9\u91cc\u8d4b\u503c\u65f6\u5c31\u4f1a\u628a StringRep * \u8f6c\u5316\u4e3a UCP<StringRep> , \u518d\u8d4b\u503c\u3002 int String :: operator == ( const String & s ) const { // overloaded -> forwards to StringRep return m_rep -> equal ( * s . m_rep ); // smart ptr * } int String :: length () const { return m_rep -> length (); } Summary UCPointer maintains reference counts UCObject hides the details of the count String is very clean StringRep deals only with string storage and manipulation UCObject and UCPointer are reusable \u4ee3\u7801\u662f\u53ef\u590d\u7528\u7684\u3002 Objects with cycles of UCPointer will never be deleted UCP \u6307\u5411\u7684\u5bf9\u8c61\u6c38\u8fdc\u4e0d\u88ab\u5220\u9664\u3002","title":"Smart Pointers"},{"location":"OOP/oop12/#smart-pointers","text":"Reference counting C++ \u6ca1\u6709\u5355\u6839\u7ed3\u6784\uff0c\u4e5f\u6ca1\u6709\u81ea\u52a8\u5783\u573e\u56de\u6536\u3002 Goal: Introduce the code for maintaining reference counts. A reference count is a count of the number of times an object is shared. \u8868\u793a\u5f53\u524d\u5bf9\u8c61\u88ab\u51e0\u4e2a\u6307\u9488\u6307\u7740\u3002 Pointer manipulations have to maintain the count \u5728\u6307\u9488\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u4fee\u6539\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\u3002\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u7684\u8ba1\u6570\u662f 0, \u6211\u4eec\u9700\u8981\u628a\u5b83\u6790\u6784\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5783\u573e\u56de\u6536\u3002 Class UCObject holds the count UCPointer is a smart pointer to a UCObject","title":"Smart Pointers"},{"location":"OOP/oop12/#reference-counts","text":"Shared memory maintains a count of how many times it is shared. \u4e3a\u4e86\u8282\u7ea6\u5185\u5b58\uff0c\u6211\u4eec\u8ba9\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6307\u5411\u7684 \"abcdef\" \u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 Each sharable object has a counter Initial value is 0 Whenever a pointer is assigned: p = q; Have to do the following p -> decrement (); // p's count will decrease p = q ; q -> increment (); // q/p's count will increase StringRep \u7ee7\u627f\u81ea UCObject , \u56e0\u6b64\u5185\u90e8\u6709\u5f15\u7528\u8ba1\u6570\u3002 String \u662f\u5916\u90e8\u63a5\u53e3\uff0c\u6709\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u662f UCPointer , \u6307\u5411 StringRep .","title":"Reference counts"},{"location":"OOP/oop12/#ucobject","text":"#include <assert.h> class UCObject { public : UCObject () : m_refCount ( 0 ) { } virtual ~ UCObject () { assert ( m_refCount == 0 );}; // \u8fd9\u91cc assert, \u56e0\u4e3a\u4e0d\u662f\u5bf9\u8c61\u7684\u95ee\u9898\uff0c\u662f\u5916\u90e8\u7684\u95ee\u9898\u3002 UCObject ( const UCObject & ) : m_refCount ( 0 ) { } // \u4e0d\u62f7\u8d1d refcount void incr () { m_refCount ++ ; } void decr (); int references () { return m_refCount ; } private : int m_refCount ; }; inline void UCObject::decr () { m_refCount -= 1 ; if ( m_refCount == 0 ) { delete this ; } } delete this; \u662f\u5408\u6cd5\u7684\uff0c\u4f46\u4e4b\u540e\u4e0d\u5e94\u8be5\u518d\u4f7f\u7528 this \u6307\u9488\u3002","title":"UCObject"},{"location":"OOP/oop12/#ucpointer","text":"template < class T > class UCPointer { private : T * m_pObj ; void increment () { if ( m_pObj ) m_pObj -> incr (); } void decrement () { if ( m_pObj ) m_pObj -> decr (); } public : UCPointer ( T * r = 0 ) : m_pObj ( r ) { increment ();} ~ UCPointer () { decrement (); }; UCPointer ( const UCPointer < T > & p ); UCPointer & operator = ( const UCPointer < T > & ); T * operator -> () const ; T & operator * () const { return * m_pObj ; }; } template < class T > UCPointer < T >:: UCPointer ( const UCPointer < T > & p ){ m_pObj = p . m_pObj ; increment (); } template < class T > UCPointer < T >& UCPointer < T >:: operator = ( const UCPointer < T >& p ){ if ( m_pObj != p . m_pObj ) { decrement (); m_pObj = p . m_pObj ; increment (); } return * this ; } template < class T > T * UCPointer < T >:: operator -> () const { return m_pObj ; } \u9690\u542b\u4e86 T \u5fc5\u987b\u7ee7\u627f\u81ea UCObject , \u8fd9\u6837\u624d\u6709 incr \u7684\u6210\u5458\u51fd\u6570\u3002 \u8fd9\u91cc\u53ea\u8981\u6784\u9020\u4e86\u5bf9\u8c61\uff0c\u5c31\u4f1a\u8c03\u7528 increment \u51fd\u6570\u3002 \u62f7\u8d1d\u6784\u9020\u540e\u8981\u5bf9\u8ba1\u6570\u52a0\u4e00\u3002 \u8d4b\u503c\u6211\u4eec\u8981\u5148\u68c0\u67e5\u4e8c\u8005\u6307\u5411\u7684\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 Example: Shape inherits from UCObject Ellipse elly ( 200F , 300F ); UCPointer < Shape > p ( & elly ); p -> render (); // calls Ellipse::render() on elly!","title":"UCPointer"},{"location":"OOP/oop12/#stringrep","text":"Envelope and Letter class StringRep : public UCObject { public : StringRep ( const char * ); ~ StringRep (); StringRep ( const StringRep & ); int length () const { return strlen ( m_pChars ); } int equal ( const StringRep & ) const ; private : char * m_pChars ; // reference semantics -- no assignment op! void operator = ( const StringRep & ) { } // \u79c1\u6709\uff0c\u5916\u754c\u4e0d\u80fd\u505a StringRep \u7684\u8d4b\u503c }; \u5177\u4f53\u5b9e\u73b0 StringRep :: StringRep ( const char * s ) { if ( s ) { int len = strlen ( s ) + 1 ; m_pChars = new char [ len ]; strcpy ( m_pChars , s ); } else { m_pChars = new char [ 1 ]; * m_pChars = '\\0' ; } } StringRep ::~ StringRep () { delete [] m_pChars ; } StringRep :: StringRep ( const StringRep & sr ) { int len = sr . length (); m_pChars = new char [ len + 1 ]; strcpy ( m_pChars , sr . m_pChars ); } int StringRep :: equal ( const StringRep & sp ) const { return ( strcmp ( m_pChars , sp . m_pChars ) == 0 ); } \u8865: C++ \u5185\u5b57\u7b26\u4e32\u4e0d\u662f\u901a\u8fc7 char \u7684\u65b9\u5f0f\u5b9e\u73b0(\u6ca1\u6709 \\0 ), \u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u957f\u5ea6\u53d8\u91cf\u3002 \u62f7\u8d1d\u6784\u9020\u65f6\u4f1a\u8c03\u7528 UCObject \u7684\u62f7\u8d1d\u6784\u9020\u3002","title":"StringRep"},{"location":"OOP/oop12/#string","text":"class String { public : String ( const char * ); ~ String (); String ( const String & ); String & operator = ( const String & ); int operator == ( const String & ) const ; String operator + ( const String & ) const ; int length () const ; operator const char * () const ; private : UCPointer < StringRep > m_rep ; }; \u5177\u4f53\u5b9e\u73b0 String :: String ( const char * s ) : m_rep ( 0 ) { m_rep = new StringRep ( s ); } String ::~ String () {} // Again, note constructor for rep in list. String :: String ( const String & s ) : m_rep ( s . m_rep ) { // \u505a UCPointer<StringRep> \u7684\u62f7\u8d1d\u6784\u9020 } String & String :: operator = ( const String & s ) { m_rep = s . m_rep ; // let smart pointer do work! return * this ; } \u8fd9\u91cc m_rep(0) \u5b9e\u9645\u4e0a\u662f\u7528 0 \u53bb\u505a UCP \u7684\u6784\u9020(\u4e5f\u53ef\u4ee5\u4e0d\u5199\uff0c\u56e0\u4e3a\u9ed8\u8ba4 0). new \u8fd4\u56de\u7684\u662f StringRep * , \u800c\u5de6\u8fb9\u662f UCP<StringRep> , \u8fd9\u91cc\u8d4b\u503c\u65f6\u5c31\u4f1a\u628a StringRep * \u8f6c\u5316\u4e3a UCP<StringRep> , \u518d\u8d4b\u503c\u3002 int String :: operator == ( const String & s ) const { // overloaded -> forwards to StringRep return m_rep -> equal ( * s . m_rep ); // smart ptr * } int String :: length () const { return m_rep -> length (); } Summary UCPointer maintains reference counts UCObject hides the details of the count String is very clean StringRep deals only with string storage and manipulation UCObject and UCPointer are reusable \u4ee3\u7801\u662f\u53ef\u590d\u7528\u7684\u3002 Objects with cycles of UCPointer will never be deleted UCP \u6307\u5411\u7684\u5bf9\u8c61\u6c38\u8fdc\u4e0d\u88ab\u5220\u9664\u3002","title":"String"},{"location":"OOP/oop2/","text":"Class \u00b6 Abstract How to decalare a class The declaration and definition of a class Constructor and Destructor Seperated head and code file Introduction \u00b6 typedef struct point { float x ; float y ; } Point ; void print ( const Point * p ) { printf ( \"%d %d \\n \" , p -> x , p -> y ); } void move ( Point * p , int dx , int dy ) { p -> x += dx ; p -> y += dy ; } int main () { Point a ; a . x = 1 ; a . y = 2 ; print ( & a ); move ( & a , 10 , 20 ); print ( & a ); } \u4ee5\u4e0a\u662f C \u8bed\u8a00\u80fd\u505a\u7684\uff0c\u5728 C++ \u91cc\u6211\u4eec\u53ef\u4ee5\u628a\u51fd\u6570\u4e5f\u653e\u5230\u7ed3\u6784\u91cc\u9762\u3002 typedef struct point { int x ; int y ; void print (); } Point ; \u8fd9\u91cc\u53ea\u662f\u58f0\u660e\uff0c\u5e76\u4e0d\u4f1a\u4ea7\u751f\u5b9e\u9645\u4ee3\u7801\uff08\u5305\u62ec\u7ed3\u6784\u91cc\u7684\u53d8\u91cf\u4e5f\u53ea\u662f\u58f0\u660e\uff09\u3002\u6211\u4eec\u5f80\u7ed3\u6784\u91cc\u653e\u4e86\u51fd\u6570\u539f\u578b\uff08\u5373\u51fd\u6570\u58f0\u660e\uff09 \u7ed3\u6784\u5916\u9762\u7684 print() \u79f0\u4e3a\u81ea\u7531\u51fd\u6570\uff0c\u548c\u4efb\u4f55\u7c7b\u90fd\u6ca1\u6709\u5173\u7cfb\uff0c\u5de6\u4e3a\u51fd\u6570\u81ea\u8eab\u662f\u72ec\u7acb\u7684\u3002 \u58f0\u660e\u5728\u7ed3\u6784\u5185\u7684\u51fd\u6570\u4e0d\u662f\u72ec\u7acb\u7684\uff0c\u4ece\u5c5e\u4e8e Point \u7ed3\u6784\u3002\u8fd8\u9700\u8981\u4e00\u4e2a body. struct Point { int x ; int y ; void print (); } Point ; void Point::print () { printf ( \"%d %d \\n \" , x , y ); } C++ \u4e2d\u4e0d\u9700\u8981 typedef \u6765\u58f0\u660e\u7ed3\u6784\u4f53\u3002 a.print() \u5373\u53ef\u8c03\u7528\u7ed3\u6784\u4f53\u5185\u6210\u5458\u51fd\u6570\u3002\u4f46\u662f\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\u5982\u4f55\u77e5\u9053\u6211\u4eec\u8981\u8f93\u51fa\u7684\u5c31\u662f a.x a.y ? \u6211\u4eec\u5728\u6210\u5458\u51fd\u6570\u5185 cout << this << endl; \u53d1\u73b0 this \u548c &a \u76f8\u540c\u3002 void Point::init ( int x , int y ) { this -> x = x ; this -> y = y ; } \u8fd9\u91cc\u5fc5\u987b\u52a0 this , \u5426\u5219\u7c7b\u4f3c\u4e8e\u5c40\u90e8\u53d8\u91cf\u4f1a\u5c4f\u853d\u5168\u5c40\u53d8\u91cf\uff0c\u7f16\u8bd1\u5668\u4f1a\u8ba4\u4e3a x = x \u4ec0\u4e48\u4e5f\u6ca1\u505a\u3002 :: Resolver \u00b6 \u9884\u89e3\u6790\u5668 <Class Name>::<function name> ::<function name> void S::f () { :: f (); // Would be recursive otherwise! :: a ++ ; // Select the global a a -- ; // The a at class scope } this : the hidden parameter this is a hidden paramater for all member functions, with the type of the class. e.g. void Point::move(int dx, int dy); can be recognized as void Point::initialize(Point *this, int dx, int dy); To call the function, you must specify a variable. e.g. p.move(10,10); can be recognized as Point::move(&p,10,10); Info Point \u662f\u59d3, init \u662f\u540d\uff0c\u56e0\u6b64 Point::init \u5171\u540c\u6784\u6210\u4e86\u6210\u5458\u51fd\u6570\u7684\u540d\u5b57\uff0c\u56e0\u6b64 void \u9700\u8981\u653e\u5728\u51fd\u6570\u540d\u524d\u9762\uff0c\u5373 void Point::init . Object \u00b6 Object = Attributes + Services Data: the properties or status Operations: the functions In C++, an object is just a variable, and the purest definition is \"a region of storage\". The struct variables learned before are just objects in C++. Object vs Class \u00b6 Object (this cat) Represent things, events, or concepts \u5b9e\u4f53 Respond to messages at runtime Classes (the cat) Define properties of instances Act like types in C++ OOP Characteristics \u00b6 Everything is an object. A program is a bunch of objects telling each other what to do by sending messages. \u7a0b\u5e8f\u5c31\u662f\u4e00\u5806\u5bf9\u8c61\uff0c\u4e92\u76f8\u53d1\u9001\u6d88\u606f\uff0c\u544a\u8bc9\u5bf9\u65b9\u8981\u505a\u4ec0\u4e48 (what instead of how) e.g. \u4e0a\u8bfe\u7684\u65f6\u5019\uff0c\u8001\u5e08\u5728\u8bb2\u8bfe\uff0c\u7535\u8111\u5728\u53d1\u9001\u6d88\u606f\u7ed9\u6295\u5f71\u4eea... \u8001\u5e08\u8ba9\u540c\u5b66\u7ad9\u8d77\u6765\uff0c\u8fd9\u4e2a\u6d88\u606f\u53d1\u9001\u8fc7\u540e\uff0c\u5177\u4f53\u5982\u4f55\u7ad9\u8d77\u6765\uff0c\u53ea\u7531\u540c\u5b66\u81ea\u5df1\u51b3\u5b9a\u3002 Each object has its own memory made up of other objects. Every object has a type. All objects of a particular type can receive the same messages. \u540c\u7c7b\u7684\u5bf9\u8c61\uff0c\u90fd\u53ef\u4ee5\u63a5\u53d7\u76f8\u540c\u7684\u6d88\u606f\u3002 \u53ef\u4ee5\u63a5\u53d7\u76f8\u540c\u6d88\u606f\u7684\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u540c\u4e2a\u7c7b\u578b\u3002 Constructor \u00b6 \u6211\u4eec\u9700\u8981\u6709\u673a\u5236\uff0c\u4fdd\u8bc1\u5bf9\u8c61\u88ab\u521b\u5efa\u65f6\u6709\u5408\u7406\u7684\u521d\u503c\u3002 \u6784\u9020\u51fd\u6570\u540d\u5b57\u548c\u7ed3\u6784\u540d\u5b57\u5b8c\u5168\u76f8\u540c\uff0c\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u3002 \u672c\u5730\u53d8\u91cf\u88ab\u521b\u5efa\u65f6\uff0c\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u3002 struct Point { ... Point (); } Point :: Point () { ... } \u5f53\u6211\u4eec\u521b\u5efa\u53d8\u91cf\u65f6 Point b; \u5c31\u4f1a\u81ea\u52a8\u8c03\u7528\u5bf9\u5e94\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u6709\u53c2\u6570\u5c31 Point a(1, 2); \u5373\u53ef\u3002 \u6784\u9020\u51fd\u6570\u662f\u53ef\u4ee5\u6709\u53c2\u6570\u7684\u3002 struct X { int i ; X ( int i ); void prt (); } X :: X ( int i ) { // i = 0; this -> i = i ; } void prt () { cout << i << endl ; } int main () { X a ; // a.X() // X a(1); a . prt (); } \u8fd9\u6837\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u6784\u9020\u51fd\u6570\u3002\u6539\u4e3a X a(1); \u6216\u8005 X a=1; \u5373\u53ef\u3002 \u8fd9\u4e24\u79cd\u521d\u59cb\u5316\u7684\u65b9\u6cd5\u662f\u7b49\u4ef7\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4 int m(10) \u548c int m=10 \u662f\u7b49\u4ef7\u7684\uff0c X a=1 \u548c X a(1) \u4e5f\u662f\u5982\u6b64\u3002 \u5982\u679c\u5e0c\u671b\u7ed9\u7ed3\u6784\u91cc\u7684\u5143\u7d20\u8d4b\u521d\u503c\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u5728 struct \u4e2d\u5b9a\u4e49\u5199\uff0c\u5982 struct X { int i = 100 ; ... } \u4f1a\u62a5 Warning: \u8981\u7528 C++11 \u7684\u6807\u51c6\u7f16\u8bd1\u624d\u884c\u3002 The default constructor \u00b6 \u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002 \u7f3a\u7701\u6784\u9020\u51fd\u6570\uff1a\u6ca1\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002 \u5f53\u6211\u4eec\u6ca1\u6709\u5199\u6784\u9020\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6211\u4eec\u751f\u6210\u6ca1\u6709\u53c2\u6570\u7684\u81ea\u52a8\u7f3a\u7701\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c\u6211\u4eec\u6709\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u521b\u5efa\u5bf9\u8c61\u65f6\u5fc5\u987b\u63d0\u4f9b\u53c2\u6570\uff1b\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\u3002 struct Y { float f ; int i ; Y ( int a ); }; Y y1 [] = { Y ( 1 ), Y ( 2 ), Y ( 3 ) }; // OK Y y2 [ 2 ] = { Y ( 1 ) }; Y y3 [ 7 ]; // Error Y y4 ; // Error Destructor \u00b6 The destructor is named after the name of the class with a leading tilde ( ~ ).The destructor never has any arguments. \u5982\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u9700\u8981\u5728\u7ed3\u675f\u524d\u5173\u95ed\u53e5\u67c4\u3002 struct X () { int i ; X ( int i ); ~ X (); } X :: X ( int i ) { this -> i = i ; } X ::~ X () { cout << \"~X()\" << i << endl ; } int main () { X a ( 7 ); X b ( 11 ); a . prt (); b . prt (); } \u5f97\u5230\u4e86\u5982\u4e0b\u8f93\u51fa 7 11 ~ X () 11 ~ X () 7 \u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff0c\u6ca1\u6709\u53c2\u6570\u3002 \u5f53\u5176\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c\u6790\u6784\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002 \u56e0\u4e3a\u540e\u6784\u9020\u7684\u53ef\u80fd\u4f1a\u7528\u5230\u5148\u6784\u9020\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u5230\u662f\u9006\u5e8f\uff0c\u5148\u6790\u6784\u540e\u6784\u9020\u7684\u3002 \u4f5c\u7528\u57df\u662f\u4ee5\u5927\u62ec\u53f7\u4e3a\u754c\u7684 int main () { X a ( 7 ); { X b ( 11 ); } a . prt (); } \u8fd9\u6837\u6211\u4eec\u4f1a\u5f97\u5230\u8f93\u51fa ~ X () 11 7 ~ X () 7 \u53ef\u4ee5\u770b\u5230\u5728 7 \u8f93\u51fa\u524d b \u5c31\u5df2\u7ecf\u88ab\u6790\u6784\u3002 \u8fdb\u5165\u51fd\u6570\uff0c\u51fd\u6570\u6240\u6709\u7684\u672c\u5730\u53d8\u91cf\u7684\u7a7a\u95f4\u90fd\u5df2\u7ecf\u88ab\u5206\u914d\u597d\u4e86\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u6267\u884c\u5230\u5177\u4f53\u7684\u6784\u9020\u51fd\u6570\u884c\uff0c\u662f\u4e0d\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u7684\u3002\u540c\u7406\uff0c\u5f53\u8fdb\u5165 switch case \u8bed\u53e5\u65f6\uff0c\u5bf9\u8c61\u7684\u7a7a\u95f4\u5df2\u7ecf\u751f\u6210\uff0c\u4f46\u6ca1\u6709\u6784\u9020\uff0c\u8fd9\u6837\u6790\u6784\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 Example void f ( int i ) { if ( i < 10 ) { //! goto jump1; // Error: goto bypasses init } X x1 ; // Constructor called here jump1 : switch ( i ) { case 1 : X x2 ; // Constructor called here break ; //! case 2 : // Error: case bypasses init X x3 ; // Constructor called here break ; } } \u8fd9\u91cc jump \u8df3\u8fc7\u4e86 x1 \u7684\u6784\u9020\uff0c\u4f46\u5728\u8fdb\u5165\u51fd\u6570 f \u65f6\u7a7a\u95f4\u5df2\u7ecf\u88ab\u5206\u914d\u597d\u4e86\uff0c\u5f53\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u6790\u6784\u4ecd\u7136\u4f1a\u81ea\u52a8\u8fdb\u884c\uff0c\u5982\u679c\u6ca1\u6709\u9ed8\u8ba4\u96f6\u503c\u7684\u8bdd\u6790\u6784\u4f1a\u51fa\u95ee\u9898\u3002 switch case \u5e76\u4e0d\u80fd\u9694\u7edd\u53d8\u91cf\u7684\u4f5c\u7528\u57df\uff0c\u91cc\u9762\u7684 x2, x3 \u7684\u4f5c\u7528\u57df\u5c31\u662f\u8fd9\u5bf9\u5927\u62ec\u53f7\uff0c\u5f53\u6211\u4eec\u8fdb\u5165 switch case \u65f6\u7a7a\u95f4\u5c31\u5df2\u7ecf\u5206\u914d\uff0c\u5f53\u79bb\u5f00\u5927\u62ec\u53f7\u65f6\u6790\u6784\u51fa\u73b0\u95ee\u9898\u3002 Definition of Class \u00b6 In C++, separated .h and .cpp files are used to define one class. Class declaration and prototypes in that class are in the header file ( .h ). All the bodies of these functions are in the source file ( .cpp ) \u4e00\u4e2a .cpp \u6587\u4ef6\u662f\u4e00\u4e2a\u7f16\u8bd1\u5355\u5143\u3002\u7f16\u8bd1\u65f6\u6211\u4eec\u53ea\u770b\u4e00\u4e2a .cpp \u6587\u4ef6\uff0c\u5f53\u5f15\u7528\u5176\u4ed6\u51fd\u6570\u7684\u539f\u578b\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5934\u6587\u4ef6\u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u3002 #include \u00b6 #include is to insert the included file into the .cpp file at where the #include statement is. #include \"xx.h\" : search in the current directory firstly , then the directories declared somewhere #include <xx.h> : search in the specified directories #include <xx> : same as #include <xx.h> Tips for header \u4e00\u4e2a\u5934\u6587\u4ef6\u91cc\u653e\u4e00\u4e2a\u7c7b\u7684\u58f0\u660e \u4ee5\u76f8\u540c\u7684\u6587\u4ef6\u540d\u524d\u7f00\u4e0e\u4e00\u4e2a\u6e90\u6587\u4ef6\u5173\u8054 \u5934\u6587\u4ef6\u7684\u5185\u5bb9\u88ab #ifndef #define #endif \u5305\u56f4","title":"Class"},{"location":"OOP/oop2/#class","text":"Abstract How to decalare a class The declaration and definition of a class Constructor and Destructor Seperated head and code file","title":"Class"},{"location":"OOP/oop2/#introduction","text":"typedef struct point { float x ; float y ; } Point ; void print ( const Point * p ) { printf ( \"%d %d \\n \" , p -> x , p -> y ); } void move ( Point * p , int dx , int dy ) { p -> x += dx ; p -> y += dy ; } int main () { Point a ; a . x = 1 ; a . y = 2 ; print ( & a ); move ( & a , 10 , 20 ); print ( & a ); } \u4ee5\u4e0a\u662f C \u8bed\u8a00\u80fd\u505a\u7684\uff0c\u5728 C++ \u91cc\u6211\u4eec\u53ef\u4ee5\u628a\u51fd\u6570\u4e5f\u653e\u5230\u7ed3\u6784\u91cc\u9762\u3002 typedef struct point { int x ; int y ; void print (); } Point ; \u8fd9\u91cc\u53ea\u662f\u58f0\u660e\uff0c\u5e76\u4e0d\u4f1a\u4ea7\u751f\u5b9e\u9645\u4ee3\u7801\uff08\u5305\u62ec\u7ed3\u6784\u91cc\u7684\u53d8\u91cf\u4e5f\u53ea\u662f\u58f0\u660e\uff09\u3002\u6211\u4eec\u5f80\u7ed3\u6784\u91cc\u653e\u4e86\u51fd\u6570\u539f\u578b\uff08\u5373\u51fd\u6570\u58f0\u660e\uff09 \u7ed3\u6784\u5916\u9762\u7684 print() \u79f0\u4e3a\u81ea\u7531\u51fd\u6570\uff0c\u548c\u4efb\u4f55\u7c7b\u90fd\u6ca1\u6709\u5173\u7cfb\uff0c\u5de6\u4e3a\u51fd\u6570\u81ea\u8eab\u662f\u72ec\u7acb\u7684\u3002 \u58f0\u660e\u5728\u7ed3\u6784\u5185\u7684\u51fd\u6570\u4e0d\u662f\u72ec\u7acb\u7684\uff0c\u4ece\u5c5e\u4e8e Point \u7ed3\u6784\u3002\u8fd8\u9700\u8981\u4e00\u4e2a body. struct Point { int x ; int y ; void print (); } Point ; void Point::print () { printf ( \"%d %d \\n \" , x , y ); } C++ \u4e2d\u4e0d\u9700\u8981 typedef \u6765\u58f0\u660e\u7ed3\u6784\u4f53\u3002 a.print() \u5373\u53ef\u8c03\u7528\u7ed3\u6784\u4f53\u5185\u6210\u5458\u51fd\u6570\u3002\u4f46\u662f\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\u5982\u4f55\u77e5\u9053\u6211\u4eec\u8981\u8f93\u51fa\u7684\u5c31\u662f a.x a.y ? \u6211\u4eec\u5728\u6210\u5458\u51fd\u6570\u5185 cout << this << endl; \u53d1\u73b0 this \u548c &a \u76f8\u540c\u3002 void Point::init ( int x , int y ) { this -> x = x ; this -> y = y ; } \u8fd9\u91cc\u5fc5\u987b\u52a0 this , \u5426\u5219\u7c7b\u4f3c\u4e8e\u5c40\u90e8\u53d8\u91cf\u4f1a\u5c4f\u853d\u5168\u5c40\u53d8\u91cf\uff0c\u7f16\u8bd1\u5668\u4f1a\u8ba4\u4e3a x = x \u4ec0\u4e48\u4e5f\u6ca1\u505a\u3002","title":"Introduction"},{"location":"OOP/oop2/#resolver","text":"\u9884\u89e3\u6790\u5668 <Class Name>::<function name> ::<function name> void S::f () { :: f (); // Would be recursive otherwise! :: a ++ ; // Select the global a a -- ; // The a at class scope } this : the hidden parameter this is a hidden paramater for all member functions, with the type of the class. e.g. void Point::move(int dx, int dy); can be recognized as void Point::initialize(Point *this, int dx, int dy); To call the function, you must specify a variable. e.g. p.move(10,10); can be recognized as Point::move(&p,10,10); Info Point \u662f\u59d3, init \u662f\u540d\uff0c\u56e0\u6b64 Point::init \u5171\u540c\u6784\u6210\u4e86\u6210\u5458\u51fd\u6570\u7684\u540d\u5b57\uff0c\u56e0\u6b64 void \u9700\u8981\u653e\u5728\u51fd\u6570\u540d\u524d\u9762\uff0c\u5373 void Point::init .","title":":: Resolver"},{"location":"OOP/oop2/#object","text":"Object = Attributes + Services Data: the properties or status Operations: the functions In C++, an object is just a variable, and the purest definition is \"a region of storage\". The struct variables learned before are just objects in C++.","title":"Object"},{"location":"OOP/oop2/#object-vs-class","text":"Object (this cat) Represent things, events, or concepts \u5b9e\u4f53 Respond to messages at runtime Classes (the cat) Define properties of instances Act like types in C++","title":"Object vs Class"},{"location":"OOP/oop2/#oop-characteristics","text":"Everything is an object. A program is a bunch of objects telling each other what to do by sending messages. \u7a0b\u5e8f\u5c31\u662f\u4e00\u5806\u5bf9\u8c61\uff0c\u4e92\u76f8\u53d1\u9001\u6d88\u606f\uff0c\u544a\u8bc9\u5bf9\u65b9\u8981\u505a\u4ec0\u4e48 (what instead of how) e.g. \u4e0a\u8bfe\u7684\u65f6\u5019\uff0c\u8001\u5e08\u5728\u8bb2\u8bfe\uff0c\u7535\u8111\u5728\u53d1\u9001\u6d88\u606f\u7ed9\u6295\u5f71\u4eea... \u8001\u5e08\u8ba9\u540c\u5b66\u7ad9\u8d77\u6765\uff0c\u8fd9\u4e2a\u6d88\u606f\u53d1\u9001\u8fc7\u540e\uff0c\u5177\u4f53\u5982\u4f55\u7ad9\u8d77\u6765\uff0c\u53ea\u7531\u540c\u5b66\u81ea\u5df1\u51b3\u5b9a\u3002 Each object has its own memory made up of other objects. Every object has a type. All objects of a particular type can receive the same messages. \u540c\u7c7b\u7684\u5bf9\u8c61\uff0c\u90fd\u53ef\u4ee5\u63a5\u53d7\u76f8\u540c\u7684\u6d88\u606f\u3002 \u53ef\u4ee5\u63a5\u53d7\u76f8\u540c\u6d88\u606f\u7684\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u540c\u4e2a\u7c7b\u578b\u3002","title":"OOP Characteristics"},{"location":"OOP/oop2/#constructor","text":"\u6211\u4eec\u9700\u8981\u6709\u673a\u5236\uff0c\u4fdd\u8bc1\u5bf9\u8c61\u88ab\u521b\u5efa\u65f6\u6709\u5408\u7406\u7684\u521d\u503c\u3002 \u6784\u9020\u51fd\u6570\u540d\u5b57\u548c\u7ed3\u6784\u540d\u5b57\u5b8c\u5168\u76f8\u540c\uff0c\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u3002 \u672c\u5730\u53d8\u91cf\u88ab\u521b\u5efa\u65f6\uff0c\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\u3002 struct Point { ... Point (); } Point :: Point () { ... } \u5f53\u6211\u4eec\u521b\u5efa\u53d8\u91cf\u65f6 Point b; \u5c31\u4f1a\u81ea\u52a8\u8c03\u7528\u5bf9\u5e94\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u6709\u53c2\u6570\u5c31 Point a(1, 2); \u5373\u53ef\u3002 \u6784\u9020\u51fd\u6570\u662f\u53ef\u4ee5\u6709\u53c2\u6570\u7684\u3002 struct X { int i ; X ( int i ); void prt (); } X :: X ( int i ) { // i = 0; this -> i = i ; } void prt () { cout << i << endl ; } int main () { X a ; // a.X() // X a(1); a . prt (); } \u8fd9\u6837\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u6784\u9020\u51fd\u6570\u3002\u6539\u4e3a X a(1); \u6216\u8005 X a=1; \u5373\u53ef\u3002 \u8fd9\u4e24\u79cd\u521d\u59cb\u5316\u7684\u65b9\u6cd5\u662f\u7b49\u4ef7\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4 int m(10) \u548c int m=10 \u662f\u7b49\u4ef7\u7684\uff0c X a=1 \u548c X a(1) \u4e5f\u662f\u5982\u6b64\u3002 \u5982\u679c\u5e0c\u671b\u7ed9\u7ed3\u6784\u91cc\u7684\u5143\u7d20\u8d4b\u521d\u503c\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u5728 struct \u4e2d\u5b9a\u4e49\u5199\uff0c\u5982 struct X { int i = 100 ; ... } \u4f1a\u62a5 Warning: \u8981\u7528 C++11 \u7684\u6807\u51c6\u7f16\u8bd1\u624d\u884c\u3002","title":"Constructor"},{"location":"OOP/oop2/#the-default-constructor","text":"\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002 \u7f3a\u7701\u6784\u9020\u51fd\u6570\uff1a\u6ca1\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002 \u5f53\u6211\u4eec\u6ca1\u6709\u5199\u6784\u9020\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6211\u4eec\u751f\u6210\u6ca1\u6709\u53c2\u6570\u7684\u81ea\u52a8\u7f3a\u7701\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c\u6211\u4eec\u6709\u6709\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u521b\u5efa\u5bf9\u8c61\u65f6\u5fc5\u987b\u63d0\u4f9b\u53c2\u6570\uff1b\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\u3002 struct Y { float f ; int i ; Y ( int a ); }; Y y1 [] = { Y ( 1 ), Y ( 2 ), Y ( 3 ) }; // OK Y y2 [ 2 ] = { Y ( 1 ) }; Y y3 [ 7 ]; // Error Y y4 ; // Error","title":"The default constructor"},{"location":"OOP/oop2/#destructor","text":"The destructor is named after the name of the class with a leading tilde ( ~ ).The destructor never has any arguments. \u5982\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u9700\u8981\u5728\u7ed3\u675f\u524d\u5173\u95ed\u53e5\u67c4\u3002 struct X () { int i ; X ( int i ); ~ X (); } X :: X ( int i ) { this -> i = i ; } X ::~ X () { cout << \"~X()\" << i << endl ; } int main () { X a ( 7 ); X b ( 11 ); a . prt (); b . prt (); } \u5f97\u5230\u4e86\u5982\u4e0b\u8f93\u51fa 7 11 ~ X () 11 ~ X () 7 \u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\uff0c\u6ca1\u6709\u53c2\u6570\u3002 \u5f53\u5176\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c\u6790\u6784\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002 \u56e0\u4e3a\u540e\u6784\u9020\u7684\u53ef\u80fd\u4f1a\u7528\u5230\u5148\u6784\u9020\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u5230\u662f\u9006\u5e8f\uff0c\u5148\u6790\u6784\u540e\u6784\u9020\u7684\u3002 \u4f5c\u7528\u57df\u662f\u4ee5\u5927\u62ec\u53f7\u4e3a\u754c\u7684 int main () { X a ( 7 ); { X b ( 11 ); } a . prt (); } \u8fd9\u6837\u6211\u4eec\u4f1a\u5f97\u5230\u8f93\u51fa ~ X () 11 7 ~ X () 7 \u53ef\u4ee5\u770b\u5230\u5728 7 \u8f93\u51fa\u524d b \u5c31\u5df2\u7ecf\u88ab\u6790\u6784\u3002 \u8fdb\u5165\u51fd\u6570\uff0c\u51fd\u6570\u6240\u6709\u7684\u672c\u5730\u53d8\u91cf\u7684\u7a7a\u95f4\u90fd\u5df2\u7ecf\u88ab\u5206\u914d\u597d\u4e86\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u6267\u884c\u5230\u5177\u4f53\u7684\u6784\u9020\u51fd\u6570\u884c\uff0c\u662f\u4e0d\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u7684\u3002\u540c\u7406\uff0c\u5f53\u8fdb\u5165 switch case \u8bed\u53e5\u65f6\uff0c\u5bf9\u8c61\u7684\u7a7a\u95f4\u5df2\u7ecf\u751f\u6210\uff0c\u4f46\u6ca1\u6709\u6784\u9020\uff0c\u8fd9\u6837\u6790\u6784\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 Example void f ( int i ) { if ( i < 10 ) { //! goto jump1; // Error: goto bypasses init } X x1 ; // Constructor called here jump1 : switch ( i ) { case 1 : X x2 ; // Constructor called here break ; //! case 2 : // Error: case bypasses init X x3 ; // Constructor called here break ; } } \u8fd9\u91cc jump \u8df3\u8fc7\u4e86 x1 \u7684\u6784\u9020\uff0c\u4f46\u5728\u8fdb\u5165\u51fd\u6570 f \u65f6\u7a7a\u95f4\u5df2\u7ecf\u88ab\u5206\u914d\u597d\u4e86\uff0c\u5f53\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u6790\u6784\u4ecd\u7136\u4f1a\u81ea\u52a8\u8fdb\u884c\uff0c\u5982\u679c\u6ca1\u6709\u9ed8\u8ba4\u96f6\u503c\u7684\u8bdd\u6790\u6784\u4f1a\u51fa\u95ee\u9898\u3002 switch case \u5e76\u4e0d\u80fd\u9694\u7edd\u53d8\u91cf\u7684\u4f5c\u7528\u57df\uff0c\u91cc\u9762\u7684 x2, x3 \u7684\u4f5c\u7528\u57df\u5c31\u662f\u8fd9\u5bf9\u5927\u62ec\u53f7\uff0c\u5f53\u6211\u4eec\u8fdb\u5165 switch case \u65f6\u7a7a\u95f4\u5c31\u5df2\u7ecf\u5206\u914d\uff0c\u5f53\u79bb\u5f00\u5927\u62ec\u53f7\u65f6\u6790\u6784\u51fa\u73b0\u95ee\u9898\u3002","title":"Destructor"},{"location":"OOP/oop2/#definition-of-class","text":"In C++, separated .h and .cpp files are used to define one class. Class declaration and prototypes in that class are in the header file ( .h ). All the bodies of these functions are in the source file ( .cpp ) \u4e00\u4e2a .cpp \u6587\u4ef6\u662f\u4e00\u4e2a\u7f16\u8bd1\u5355\u5143\u3002\u7f16\u8bd1\u65f6\u6211\u4eec\u53ea\u770b\u4e00\u4e2a .cpp \u6587\u4ef6\uff0c\u5f53\u5f15\u7528\u5176\u4ed6\u51fd\u6570\u7684\u539f\u578b\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5934\u6587\u4ef6\u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u3002","title":"Definition of Class"},{"location":"OOP/oop2/#include","text":"#include is to insert the included file into the .cpp file at where the #include statement is. #include \"xx.h\" : search in the current directory firstly , then the directories declared somewhere #include <xx.h> : search in the specified directories #include <xx> : same as #include <xx.h> Tips for header \u4e00\u4e2a\u5934\u6587\u4ef6\u91cc\u653e\u4e00\u4e2a\u7c7b\u7684\u58f0\u660e \u4ee5\u76f8\u540c\u7684\u6587\u4ef6\u540d\u524d\u7f00\u4e0e\u4e00\u4e2a\u6e90\u6587\u4ef6\u5173\u8054 \u5934\u6587\u4ef6\u7684\u5185\u5bb9\u88ab #ifndef #define #endif \u5305\u56f4","title":"#include"},{"location":"OOP/oop3/","text":"Container \u00b6 Abstraction Referennce STL Containers vector list map STL Iterator Declaring References \u00b6 char c ; // a character char * p = & c ; // a pointer to a character char & r = c ; // a reference to a character *\uff0c & \u53ef\u4ee5\u662f\u6807\u70b9\uff0c\u4e5f\u53ef\u4ee5\u662f\u8fd0\u7b97\u7b26\uff0c\u5982 & \u5728\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5728\u7b2c\u4e09\u884c\u662f\u4e00\u4e2a\u6807\u70b9\u3002 \u5f53\u6211\u4eec\u58f0\u660e\u5f15\u7528\u65f6\uff0c\u5fc5\u987b\u6709\u5f15\u7528\u7684\u53d8\u91cf\u3002\u6b64\u540e\uff0cr \u76f8\u5f53\u4e8e\u662f c \u7684\u4e00\u4e2a\u522b\u540d\u3002 Example char c = 'A' ; char & r = c ; r = 'B' ; cout << \"c: \" << c << endl ; cout << \"b: \" << b << endl ; \u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u4e24\u884c\u7684\u8f93\u51fa\u90fd\u662f B. Local or global variables type& refname = name; For ordinary variables, the initial value is required. In parameter lists and member variables type& refname Binding defined by caller or constructor \u51fd\u6570\u53ea\u6709\u5728\u8c03\u7528\u65f6\uff0c\u53c2\u6570\u624d\u80fd\u7ed1\u5b9a\u3002 void f ( int & x ); f ( y ); // initialized when function is called \u8fd9\u6837\u53ef\u4ee5\u5b9e\u73b0\u51fd\u6570\u5bf9\u51fd\u6570\u5916\u53d8\u91cf\u7684\u503c\u7684\u4fee\u6539\u3002 const int& z = x; \u8fd9\u91cc\u7684 const \u662f\u5bf9\u5f15\u7528\u7684\u9650\u5236\uff0c\u8868\u793a\u6211\u4eec\u4e0d\u80fd\u5199 z, \u4f46 x \u4f9d\u7136\u662f\u53ef\u5199\u7684\u3002 void f ( int & x ) { x ++ ; } int main () { int a = 51 ; cout << \"a=\" << a << endl ; f ( a ); cout << \"a=\" << a << endl ; } \u6211\u4eec\u53ef\u4ee5\u770b\u5230 a \u7684\u503c\u7ecf\u8fc7\u51fd\u6570\u8c03\u7528\u540e\u503c\u81ea\u589e\u4e00\uff0c\u8fd9\u8868\u660e\u51fd\u6570\u53ef\u4ee5\u5bf9\u53c2\u6570\u7684\u503c\u8fdb\u884c\u4fee\u6539\u3002 The target of a reference must have a location! \u5373\u53f3\u503c\u4e0d\u80fd\u7528\u4e8e\u5f15\u7528\u7ed1\u5b9a\u3002 void func ( int & ); func ( i * 3 ); // Warning or error! Pointers vs. References References can't be null are dependent on an existing variable, they are an alias for an variable can't change to a new \"address\" location Pointers can be set to null pointer is independent of existing objects can change to point to a different address \u5b9e\u9645\u4e0a, C++ \u5185\u90e8\u5b9e\u73b0\u5f15\u7528\u4e5f\u662f\u901a\u8fc7\u6307\u9488\uff0c\u53ea\u662f\u9650\u5236\u8fd9\u4e2a\u6307\u9488\u53ea\u80fd\u6307\u5411\u521d\u59cb\u5316\u7684\u53d8\u91cf\u3002 Restrictions No references to references No pointers to references Reference to pointer is ok No arrays of references Container \u00b6 Collection objects are objects that can store an arbitrary number of other objects. \u5728 C++ \u4e2d\uff0c\u5bb9\u5668\u5728 STL \u4e2d\u3002 STL = Standard Template Library Part of the ISO Standard C++ Library Data Structures and algorithms for C++. Why should I use STL? Reduce development time. Data-structures already written and debugged. Code readability Fit more meaningful stuff on one page. Robustness STL data structures grow automatically. Portable code. Maintainable code Easy Library includes A pair class (pairs of anything, int/int, int/char, etc) containers vector (expandable array) deque (expandable array, expands at both ends) list (double-linked) sets and maps Basic Algorithms ( sort , search , etc) All identifiers in library are in std namespace: using namespace std; Vector \u00b6 \u6bcf\u4e2a\u5bb9\u5668\u662f\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u9700\u8981 include. \u5982 #include<vector> . #include <iostream> #include <vector> using namespace std ; int main ( ) { // Declare a vector of ints (no need to worry about size) vector < int > x ; // Add elements for ( int a = 0 ; a < 1000 ; a ++ ) x . push_back ( a ); // Have a pre-defined iterator for vector class, can use it to print out the items in vector vector < int >:: iterator p ; for ( p = x . begin (); p < x . end (); p ++ ) cout << * p << \" \" ; return 0 ; } \u8fd9\u662f \u6cdb\u578b\u5b9a\u4e49 (generic classes) \uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a vector \u548c vector \u5185\u7684\u5143\u7d20\u7c7b\u578b\u3002\uff08 vector<int> x \uff09 vector<int>::iterator \u662f\u4e00\u4e2a\u7c7b\u578b\u3002\u5b9e\u9645\u4e0a p \u4e0d\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u8fd9\u91cc\u5229\u7528\u4e86 C++ \u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\u3002 \u4eca\u5929\u6709\u8bed\u6cd5\u7cd6\uff08C++11\uff09 for ( auto i : x ) { cout << i << \" \" ; } auto \u7684\u610f\u601d\u662f\u7c7b\u578b\u81ea\u52a8\u63a8\u65ad\u3002\u8fd9\u91cc\u4f1a\u4ece x \u4e2d\u4f9d\u6b21\u53d6\u51fa\u4e00\u4e2a\u503c\uff0c\u968f\u540e\u653e\u5230 i \u91cc\u53bb\u3002 vector It is able to increase its internal capacity as required: as more items are added, it simply makes enough room for them. It keeps its own private count of how many items it is currently storing. Its size method returns the number of objects currently stored in it. It maintains the order of items you insert into it. You can later retrieve them in the same order. Basic Vector Operations \u00b6 Constructor vector<Elem>c; vector<Elem>c1(c2); Simple Methods V.size(); // num items V.empty(); // empty? ==, !=, <, >, <=, >= V.swap(v2); // swap Iterators I.begin() // first position I.end() // last position Element access V.at(index) V[index] V.front() // first item V.back() // last item Add/Remove/Find V.push_back(e) V.pop_back() V.insert(pos, e) V.erase(pos) V.clear() V.find(first, last, item) Two ways to use vector \u53ef\u4ee5\u9884\u5148\u5206\u914d\uff0c\u4f46\u589e\u957f\u53ea\u80fd\u7528 push_back . List Class \u00b6 Same basic concepts as vector Constructors Ability to compare lists (==, !=, < , <=, > , >=) Ability to access front and back of list x . push_back ( item ) x . push_front ( item ) x . pop_back () x . pop_front () x . remove ( item ) Sample List Application #include <iostream> #include <list> #include <string> using namespace std ; int main () { list < string > s ; s . push_back ( \"hello\" ); s . push_back ( \"world\" ); s . push_front ( \"tide\" ); s . push_front ( \"crimson\" ); s . push_front ( \"alabama\" ); list < string > iterator :: p ; for ( p = s . begin (); p != s . end (); p ++ ) cout << * p << \" \" ; cout << endl ; } \u8fd9\u91cc\u662f p!=s.end() \u56e0\u4e3a\u5217\u8868\u6bcf\u4e2a\u7a7a\u95f4\u662f\u52a8\u6001\u5206\u914d\u7684\uff0c\u540e\u7533\u8bf7\u7684\u7a7a\u95f4\u4e0d\u80fd\u4fdd\u8bc1\u5728\u5148\u7533\u8bf7\u7684\u7a7a\u95f4\u540e\u9762\u3002\u5bf9 vector \u6765\u8bf4\u7a7a\u95f4\u662f\u8fde\u7eed\u7684\u3002 Example list < int > L ; for ( int i = 1 ; i <= 5 ; ++ i ) L . push_back ( i ); //delete second item. L . erase ( ++ L . begin () ); copy ( L . begin (), L . end (), ostream_iterator < int > ( cout , \",\" )); //Prints: 1,3,4,5, Maps \u00b6 Maps are collections that contain pairs of values. Pairs consist of a key and a value. Lookup works by supplying a key, and retrieving a value. #include <map> map < long , int > root ; root [ 4 ] = 2 ; root [ 1000000 ] = 1000 ; long l ; cin >> l ; if ( root . count ( l )) cout << root [ l ] else cout << \u201c Not perfect square \u201d ; Iterators \u00b6 Declaring list<int>::iterator li; Front of container list<int>L;li = L.begin(); Past the end li = L.end(); Can increment list < int >:: iterator li ; list < int > L ; li = L . begin (); ++ li ; // Second thing; Can be dereferenced *li = 10; for-each loop \u00b6 A for-each loop iterates over the elements of arrays, vectors, or any other data sets. It assigns the value of the current element to the variable iterator declared inside the loop. for ( type variable_name : array / vector_name ) { loop statements ... } for-each loop \u6bcf\u8f6e\u62ff\u5230\u7684\u662f\u5bb9\u5668\u91cc\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668\u91cc\u7684\u503c\uff0c\u53ea\u80fd\u8bfb\u3002 Example #include <iostream> using namespace std ; int main () { int arr [] = { 1 , 2 , 3 , 4 , 5 }; //array initialization cout << \"The elements are: \" ; for ( int i : arr ) // auto { cout << i << \" \" ; } return 0 ; } \u4e5f\u53ef\u4ee5\u4f7f\u7528 auto \u81ea\u52a8\u63a8\u65ad\u3002 \u5199\u8d77\u6765\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u9884\u5148\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002 \u7f3a\u70b9\u662f\u4e0d\u80fd\u83b7\u5f97\u4e0b\u6807\uff0c\u4e5f\u4e0d\u80fd\u9006\u5e8f\u904d\u5386\uff0c\u4e5f\u4e0d\u80fd\u8df3\u8fc7\u67d0\u4e2a\u5355\u5143\uff0c\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668\u7684\u503c\u3002 \u5982\u679c\u89c9\u5f97\u540d\u5b57\u5f88\u957f\uff0c\u53ef\u4ee5\u7528 typedef . e.g. typedef PB map<Name,list<PhoneNum> >; Warning The type in containers vector < Student > v1 ; vector < Student &> v2 ; vector < Student *> v3 ; v1.push_back(x) \u4f1a\u62f7\u8d1d x, \u62f7\u8d1d\u540e vector \u91cc\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u548c x \u76f8\u540c\uff0c\u4f46\u4e8c\u8005\u6ca1\u6709\u5173\u7cfb\u3002 v2.push_back(x) \u4f1a\u751f\u6210\u4e00\u4e2a x \u7684\u5f15\u7528\u3002 while () { Student s ; cin >> ... v . push_back ( s ); } \u5b9e\u9645\u4e0a\u8fd9\u4e2a\u5faa\u73af\u4e2d s \u4f5c\u4e3a\u672c\u5730\u53d8\u91cf\uff0c\u5730\u5740\u662f\u4e0d\u53d8\u7684\uff0c\u5982\u679c\u6211\u4eec\u91c7\u53d6\u540e\u9762\u4e24\u79cd\u5b9a\u4e49 vector \u7684\u65b9\u6cd5\uff0c\u6700\u540e vector \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u6837\u7684\u3002 \u540e\u9762\u4e24\u79cd\u5b9a\u4e49\u65b9\u6cd5\u5185\u5b58\u5f00\u9500\u5c0f\uff0c\u4f46\u6613\u51fa\u9519\u3002 Pitfalls Accessing an invalid vector < int > v ; v [ 100 ] = 1 ; // Whoops! Solutions use push_back() Preallocate with constructor. Reallocate with reserve() Check capacity() Inadvertently inserting into map<> if ( foo [ \"bob\" ] == 1 ) //silently created entry \u201cbob\u201d Solutions: Use count() to check for a key without creating a new entry. if ( foo.count(\"bob\") ) DO not use empty() on list<> if ( my_list . count () == 0 ) { ... } // Slow if ( my_list . empty () ) {...} // Fast Use invalid iterator list < int > L ; list < int >:: iterator li ; li = L . begin (); L . erase ( li ); ++ li ; // WRONG // Use return value of erase to advance li = L . erase ( li ); // RIGHT","title":"Container"},{"location":"OOP/oop3/#container","text":"Abstraction Referennce STL Containers vector list map STL Iterator","title":"Container"},{"location":"OOP/oop3/#declaring-references","text":"char c ; // a character char * p = & c ; // a pointer to a character char & r = c ; // a reference to a character *\uff0c & \u53ef\u4ee5\u662f\u6807\u70b9\uff0c\u4e5f\u53ef\u4ee5\u662f\u8fd0\u7b97\u7b26\uff0c\u5982 & \u5728\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5728\u7b2c\u4e09\u884c\u662f\u4e00\u4e2a\u6807\u70b9\u3002 \u5f53\u6211\u4eec\u58f0\u660e\u5f15\u7528\u65f6\uff0c\u5fc5\u987b\u6709\u5f15\u7528\u7684\u53d8\u91cf\u3002\u6b64\u540e\uff0cr \u76f8\u5f53\u4e8e\u662f c \u7684\u4e00\u4e2a\u522b\u540d\u3002 Example char c = 'A' ; char & r = c ; r = 'B' ; cout << \"c: \" << c << endl ; cout << \"b: \" << b << endl ; \u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u4e24\u884c\u7684\u8f93\u51fa\u90fd\u662f B. Local or global variables type& refname = name; For ordinary variables, the initial value is required. In parameter lists and member variables type& refname Binding defined by caller or constructor \u51fd\u6570\u53ea\u6709\u5728\u8c03\u7528\u65f6\uff0c\u53c2\u6570\u624d\u80fd\u7ed1\u5b9a\u3002 void f ( int & x ); f ( y ); // initialized when function is called \u8fd9\u6837\u53ef\u4ee5\u5b9e\u73b0\u51fd\u6570\u5bf9\u51fd\u6570\u5916\u53d8\u91cf\u7684\u503c\u7684\u4fee\u6539\u3002 const int& z = x; \u8fd9\u91cc\u7684 const \u662f\u5bf9\u5f15\u7528\u7684\u9650\u5236\uff0c\u8868\u793a\u6211\u4eec\u4e0d\u80fd\u5199 z, \u4f46 x \u4f9d\u7136\u662f\u53ef\u5199\u7684\u3002 void f ( int & x ) { x ++ ; } int main () { int a = 51 ; cout << \"a=\" << a << endl ; f ( a ); cout << \"a=\" << a << endl ; } \u6211\u4eec\u53ef\u4ee5\u770b\u5230 a \u7684\u503c\u7ecf\u8fc7\u51fd\u6570\u8c03\u7528\u540e\u503c\u81ea\u589e\u4e00\uff0c\u8fd9\u8868\u660e\u51fd\u6570\u53ef\u4ee5\u5bf9\u53c2\u6570\u7684\u503c\u8fdb\u884c\u4fee\u6539\u3002 The target of a reference must have a location! \u5373\u53f3\u503c\u4e0d\u80fd\u7528\u4e8e\u5f15\u7528\u7ed1\u5b9a\u3002 void func ( int & ); func ( i * 3 ); // Warning or error! Pointers vs. References References can't be null are dependent on an existing variable, they are an alias for an variable can't change to a new \"address\" location Pointers can be set to null pointer is independent of existing objects can change to point to a different address \u5b9e\u9645\u4e0a, C++ \u5185\u90e8\u5b9e\u73b0\u5f15\u7528\u4e5f\u662f\u901a\u8fc7\u6307\u9488\uff0c\u53ea\u662f\u9650\u5236\u8fd9\u4e2a\u6307\u9488\u53ea\u80fd\u6307\u5411\u521d\u59cb\u5316\u7684\u53d8\u91cf\u3002 Restrictions No references to references No pointers to references Reference to pointer is ok No arrays of references","title":"Declaring References"},{"location":"OOP/oop3/#container_1","text":"Collection objects are objects that can store an arbitrary number of other objects. \u5728 C++ \u4e2d\uff0c\u5bb9\u5668\u5728 STL \u4e2d\u3002 STL = Standard Template Library Part of the ISO Standard C++ Library Data Structures and algorithms for C++. Why should I use STL? Reduce development time. Data-structures already written and debugged. Code readability Fit more meaningful stuff on one page. Robustness STL data structures grow automatically. Portable code. Maintainable code Easy Library includes A pair class (pairs of anything, int/int, int/char, etc) containers vector (expandable array) deque (expandable array, expands at both ends) list (double-linked) sets and maps Basic Algorithms ( sort , search , etc) All identifiers in library are in std namespace: using namespace std;","title":"Container"},{"location":"OOP/oop3/#vector","text":"\u6bcf\u4e2a\u5bb9\u5668\u662f\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u9700\u8981 include. \u5982 #include<vector> . #include <iostream> #include <vector> using namespace std ; int main ( ) { // Declare a vector of ints (no need to worry about size) vector < int > x ; // Add elements for ( int a = 0 ; a < 1000 ; a ++ ) x . push_back ( a ); // Have a pre-defined iterator for vector class, can use it to print out the items in vector vector < int >:: iterator p ; for ( p = x . begin (); p < x . end (); p ++ ) cout << * p << \" \" ; return 0 ; } \u8fd9\u662f \u6cdb\u578b\u5b9a\u4e49 (generic classes) \uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a vector \u548c vector \u5185\u7684\u5143\u7d20\u7c7b\u578b\u3002\uff08 vector<int> x \uff09 vector<int>::iterator \u662f\u4e00\u4e2a\u7c7b\u578b\u3002\u5b9e\u9645\u4e0a p \u4e0d\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u8fd9\u91cc\u5229\u7528\u4e86 C++ \u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\u3002 \u4eca\u5929\u6709\u8bed\u6cd5\u7cd6\uff08C++11\uff09 for ( auto i : x ) { cout << i << \" \" ; } auto \u7684\u610f\u601d\u662f\u7c7b\u578b\u81ea\u52a8\u63a8\u65ad\u3002\u8fd9\u91cc\u4f1a\u4ece x \u4e2d\u4f9d\u6b21\u53d6\u51fa\u4e00\u4e2a\u503c\uff0c\u968f\u540e\u653e\u5230 i \u91cc\u53bb\u3002 vector It is able to increase its internal capacity as required: as more items are added, it simply makes enough room for them. It keeps its own private count of how many items it is currently storing. Its size method returns the number of objects currently stored in it. It maintains the order of items you insert into it. You can later retrieve them in the same order.","title":"Vector"},{"location":"OOP/oop3/#basic-vector-operations","text":"Constructor vector<Elem>c; vector<Elem>c1(c2); Simple Methods V.size(); // num items V.empty(); // empty? ==, !=, <, >, <=, >= V.swap(v2); // swap Iterators I.begin() // first position I.end() // last position Element access V.at(index) V[index] V.front() // first item V.back() // last item Add/Remove/Find V.push_back(e) V.pop_back() V.insert(pos, e) V.erase(pos) V.clear() V.find(first, last, item) Two ways to use vector \u53ef\u4ee5\u9884\u5148\u5206\u914d\uff0c\u4f46\u589e\u957f\u53ea\u80fd\u7528 push_back .","title":"Basic Vector Operations"},{"location":"OOP/oop3/#list-class","text":"Same basic concepts as vector Constructors Ability to compare lists (==, !=, < , <=, > , >=) Ability to access front and back of list x . push_back ( item ) x . push_front ( item ) x . pop_back () x . pop_front () x . remove ( item ) Sample List Application #include <iostream> #include <list> #include <string> using namespace std ; int main () { list < string > s ; s . push_back ( \"hello\" ); s . push_back ( \"world\" ); s . push_front ( \"tide\" ); s . push_front ( \"crimson\" ); s . push_front ( \"alabama\" ); list < string > iterator :: p ; for ( p = s . begin (); p != s . end (); p ++ ) cout << * p << \" \" ; cout << endl ; } \u8fd9\u91cc\u662f p!=s.end() \u56e0\u4e3a\u5217\u8868\u6bcf\u4e2a\u7a7a\u95f4\u662f\u52a8\u6001\u5206\u914d\u7684\uff0c\u540e\u7533\u8bf7\u7684\u7a7a\u95f4\u4e0d\u80fd\u4fdd\u8bc1\u5728\u5148\u7533\u8bf7\u7684\u7a7a\u95f4\u540e\u9762\u3002\u5bf9 vector \u6765\u8bf4\u7a7a\u95f4\u662f\u8fde\u7eed\u7684\u3002 Example list < int > L ; for ( int i = 1 ; i <= 5 ; ++ i ) L . push_back ( i ); //delete second item. L . erase ( ++ L . begin () ); copy ( L . begin (), L . end (), ostream_iterator < int > ( cout , \",\" )); //Prints: 1,3,4,5,","title":"List Class"},{"location":"OOP/oop3/#maps","text":"Maps are collections that contain pairs of values. Pairs consist of a key and a value. Lookup works by supplying a key, and retrieving a value. #include <map> map < long , int > root ; root [ 4 ] = 2 ; root [ 1000000 ] = 1000 ; long l ; cin >> l ; if ( root . count ( l )) cout << root [ l ] else cout << \u201c Not perfect square \u201d ;","title":"Maps"},{"location":"OOP/oop3/#iterators","text":"Declaring list<int>::iterator li; Front of container list<int>L;li = L.begin(); Past the end li = L.end(); Can increment list < int >:: iterator li ; list < int > L ; li = L . begin (); ++ li ; // Second thing; Can be dereferenced *li = 10;","title":"Iterators"},{"location":"OOP/oop3/#for-each-loop","text":"A for-each loop iterates over the elements of arrays, vectors, or any other data sets. It assigns the value of the current element to the variable iterator declared inside the loop. for ( type variable_name : array / vector_name ) { loop statements ... } for-each loop \u6bcf\u8f6e\u62ff\u5230\u7684\u662f\u5bb9\u5668\u91cc\u7684\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668\u91cc\u7684\u503c\uff0c\u53ea\u80fd\u8bfb\u3002 Example #include <iostream> using namespace std ; int main () { int arr [] = { 1 , 2 , 3 , 4 , 5 }; //array initialization cout << \"The elements are: \" ; for ( int i : arr ) // auto { cout << i << \" \" ; } return 0 ; } \u4e5f\u53ef\u4ee5\u4f7f\u7528 auto \u81ea\u52a8\u63a8\u65ad\u3002 \u5199\u8d77\u6765\u7b80\u5355\uff0c\u4e0d\u9700\u8981\u9884\u5148\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002 \u7f3a\u70b9\u662f\u4e0d\u80fd\u83b7\u5f97\u4e0b\u6807\uff0c\u4e5f\u4e0d\u80fd\u9006\u5e8f\u904d\u5386\uff0c\u4e5f\u4e0d\u80fd\u8df3\u8fc7\u67d0\u4e2a\u5355\u5143\uff0c\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668\u7684\u503c\u3002 \u5982\u679c\u89c9\u5f97\u540d\u5b57\u5f88\u957f\uff0c\u53ef\u4ee5\u7528 typedef . e.g. typedef PB map<Name,list<PhoneNum> >; Warning The type in containers vector < Student > v1 ; vector < Student &> v2 ; vector < Student *> v3 ; v1.push_back(x) \u4f1a\u62f7\u8d1d x, \u62f7\u8d1d\u540e vector \u91cc\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u503c\u548c x \u76f8\u540c\uff0c\u4f46\u4e8c\u8005\u6ca1\u6709\u5173\u7cfb\u3002 v2.push_back(x) \u4f1a\u751f\u6210\u4e00\u4e2a x \u7684\u5f15\u7528\u3002 while () { Student s ; cin >> ... v . push_back ( s ); } \u5b9e\u9645\u4e0a\u8fd9\u4e2a\u5faa\u73af\u4e2d s \u4f5c\u4e3a\u672c\u5730\u53d8\u91cf\uff0c\u5730\u5740\u662f\u4e0d\u53d8\u7684\uff0c\u5982\u679c\u6211\u4eec\u91c7\u53d6\u540e\u9762\u4e24\u79cd\u5b9a\u4e49 vector \u7684\u65b9\u6cd5\uff0c\u6700\u540e vector \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u6837\u7684\u3002 \u540e\u9762\u4e24\u79cd\u5b9a\u4e49\u65b9\u6cd5\u5185\u5b58\u5f00\u9500\u5c0f\uff0c\u4f46\u6613\u51fa\u9519\u3002 Pitfalls Accessing an invalid vector < int > v ; v [ 100 ] = 1 ; // Whoops! Solutions use push_back() Preallocate with constructor. Reallocate with reserve() Check capacity() Inadvertently inserting into map<> if ( foo [ \"bob\" ] == 1 ) //silently created entry \u201cbob\u201d Solutions: Use count() to check for a key without creating a new entry. if ( foo.count(\"bob\") ) DO not use empty() on list<> if ( my_list . count () == 0 ) { ... } // Slow if ( my_list . empty () ) {...} // Fast Use invalid iterator list < int > L ; list < int >:: iterator li ; li = L . begin (); L . erase ( li ); ++ li ; // WRONG // Use return value of erase to advance li = L . erase ( li ); // RIGHT","title":"for-each loop"},{"location":"OOP/oop4/","text":"Functions \u00b6 Abstract Access control Local and member variables Overloaded functions Default arguments Inline functions Local and member variables \u00b6 local global member lifecycle {} \u5168\u5c40 \u5bf9\u8c61 scope {} \u5168\u5c40 \u6210\u5458\u51fd\u6570\u5185 \u6210\u5458\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u548c\u751f\u5b58\u671f\u662f\u5206\u79bb\u7684\u3002\u5982 C \u8bed\u8a00\u4e2d\u7684 static \u9759\u6001\u53d8\u91cf\uff0c\u548c\u5168\u5c40\u53d8\u91cf\u4e00\u6837\u6700\u5f00\u59cb\u5c31\u5b58\u5728\uff0c\u4f46\u662f\u53ea\u80fd\u4f5c\u7528\u4e8e\u8fd9\u4e2a\u51fd\u6570\u3002 C++ access control \u00b6 The members of a class can be cataloged, marked as: public public means all member declarations that follow are available to everyone. private The private keyword means that no one can access that member except inside function members of that type. \u53ea\u6709\u5728 \u7c7b\uff08\u4e0d\u662f\u5bf9\u8c61\uff09 \u5185\u90e8\uff08\u5185\u90e8\u53d8\u91cf\u3001\u51fd\u6570\uff09\u53ef\u4ee5\u8bbf\u95ee\u3002 \u53ef\u4ee5\u5229\u7528\u6307\u9488\u8bbf\u95ee\u7c7b\u5176\u4ed6\u5bf9\u8c61\u7684\u79c1\u6709\u53d8\u91cf\u3002 Example struct B { private : int j ; public : void f ( B * p ) { p -> j = 'A' ; } } B b , bb ; B . f ( & bb ); \u8fd9\u6837\u662f\u6b63\u786e\u7684\u3002 b, bb \u662f\u540c\u4e00\u4e2a\u7c7b\u7684\u4e0d\u540c\u5bf9\u8c61\u3002 protected \u4e0d\u8ba9\u5916\u754c\u8bbf\u95ee\uff0c\u4f46\u53ef\u4ee5\u8ba9\u7ee7\u627f\u8005\u8bbf\u95ee Friends \u53cb\u5143 \u5176\u4ed6\u51fd\u6570\uff0c\u7ed3\u6784\u5c31\u53ef\u4ee5\u8bbf\u95ee\u672c\u5bf9\u8c61\u7684\u53d8\u91cf\u3002\u53ea\u6709\u81ea\u5df1\u53ef\u4ee5\u51b3\u5b9a\u53cb\u5143\u3002 struct X { private : int i ; public : void initialize (); friend void g ( X * , int i ); friend void Y::y (); } class vs. struct class defaults to private struct defaults to public. Initialization \u00b6 Initializer list \u00b6 class Point { private : const float x , y ; public : Point ( float xa = 0.0 , float ya = 0.0 ) : y ( ya ), x ( xa ) {} }; \u8fd9\u91cc\u7684 const \u53d8\u91cf\u4e0d\u80fd\u88ab\u8d4b\u503c\uff0c\u53ea\u80fd\u88ab\u521d\u59cb\u5316\u3002\u6210\u5458 const \u53d8\u91cf\u7684\u521d\u59cb\u5316\uff0c\u53ef\u4ee5 const float x = 1.0; \u4f46\u8fd9\u6837\u6240\u6709\u7c7b\u7684\u5bf9\u8c61\u7684\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\u800c\u7c7b\u91cc\u53e6\u4e00\u4e2a\u53ef\u4ee5\u521d\u59cb\u5316\u7684\u5730\u65b9\u5c31\u662f\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 Can initialize any type of data : \u540e\u662f\u521d\u59cb\u5316\u5217\u8868\uff0c\u53ea\u6709\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4f7f\u7528\u3002\u4f1a\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u4e4b\u524d\uff0c\u8c03\u7528 Initializer list \u7684\u6784\u9020 Order of initialization is order of declaration \u2013 Not the order in the list! \u6309\u7167\u6210\u5458\u53d8\u91cf\u58f0\u660e\u7684\u987a\u5e8f\u521d\u59cb\u5316 Initialization vs. assignment Initialization Student :: Student ( string s ) : name ( s ) {} before constructor Assignment Student :: Student ( string s ) { name = s ;} inside constructor. string must have a default constructor. (\u5148\u6784\u9020\u51fa string \u7684\u5bf9\u8c61 name, \u518d\u8d4b\u503c) \u5efa\u8bae\u5747\u4f7f\u7528 Initializer list. Overloaded constructors \u00b6 \u6211\u4eec\u53ef\u4ee5\u6709\u91cd\u540d\u7684\u51fd\u6570\uff0c\u4f46\u662f\u5fc5\u987b\u8981\u6709\u4e0d\u540c\uff0c\u4ee5\u4fbf\u7f16\u8bd1\u5668\u53ef\u4ee5\u533a\u5206\u3002\u5982\u53c2\u6570\u4e2a\u6570\uff0c\u53c2\u6570\u7c7b\u578b\u3002 void print ( char * str , int width ); // #1 void print ( double d , int width ); // #2 void print ( long l , int width ); // #3 void print ( int i , int width ); // #4 void print ( char * str ); // #5 print ( \"Pancakes\" , 15 ); print ( \"Syrup\" ); print ( 1999.0 , 10 ); print ( 1999 , 12 ); print ( 1999L , 15 ); Overload and auto-cast void f ( short i ); void f ( double d ); f ( 'a' ); f ( 2 ); f ( 2L ); f ( 3.2 ); \u9664\u4e86\u6700\u540e\u4e00\u4e2a\uff0c\u5176\u4ed6\u90fd\u662f\u4e0d\u80fd\u5206\u8fa8\u7684\u3002 Default arguments \u00b6 Stash ( int size , int initQuantity = 0 ); A default argument is a value given in the declaration that the compiler automatically inserts if you don\u02bct provide a value in the function call. int harpo ( int n , int m = 4 , int j = 5 ); int chico ( int n , int m = 6 , int j ); // illegal int groucho ( int k = 1 , int m = 2 , int n = 3 ); beeps = harpo ( 2 ); beeps = harpo ( 1 , 8 ); beeps = harpo ( 8 , 7 , 6 ); To define a function with an argument list, defaults must be added from right to left. \u9ed8\u8ba4\u503c\u5fc5\u987b\u4ece\u53f3\u5230\u5de6\u3002 Pitfall of default arguments void f ( int i , int j = 10 ); int main () { ... } void f ( int i , int j = 10 ){ ... } \u8fd9\u6837\u4f1a\u62a5\u9519: redefinition of default argument. \u9ed8\u8ba4\u503c\u53ea\u80fd\u51fa\u73b0\u5728\u51fd\u6570\u539f\u578b \u3002\uff08\u58f0\u660e\u548c\u5b9a\u4e49\u4e00\u8d77\u662f\u53ef\u4ee5\u7684\uff09 \u9ed8\u8ba4\u53c2\u6570\u503c\u4e0d\u4f1a\u5728\u51fd\u6570\u4ee3\u7801\u91cc\u51fa\u73b0\uff0c\u53ea\u662f\u7f16\u8bd1\u5668\u628a\u7f16\u8bd1\u65f6\u4f1a\u628a\u9ed8\u8ba4\u503c\u653e\u8fdb\u5806\u6808\u8c03\u7528\u91cc\u3002\u56e0\u6b64\u53ef\u80fd\u4f1a\u88ab\u5176\u4ed6\u539f\u578b\u58f0\u660e\u6539\u53d8\u9ed8\u8ba4\u503c\u3002 Overhead for a function call \u00b6 the processing time required by a device prior to the execution of a command Push parameters Push return address Prepare return values Pop all pushed inline function \u00b6 An inline function is expanded in place, like a preprocessor macro, so the overhead of the function call is eliminated. inline int f ( int i ) { return i * 2 ; } main () { int a = 4 ; int b = f ( a ); // become b = a * 2; } inline \u4e0d\u4f1a\u771f\u6b63\u7f16\u8bd1\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u628a\u51fd\u6570\u66ff\u6362\u5230\u5b9e\u9645\u4f4d\u7f6e\u3002 inline int plusOne ( int x ); inline int plusOne ( int x ) { return ++ x ; }; Repeat inline keyword at declaration and definition. \u539f\u578b\u58f0\u660e\u548c\u5b9a\u4e49\u90fd\u5fc5\u987b\u6709 inline. An inline function definition may not generate any code in .obj file. inline \u51fd\u6570\u7684 body \u4e0d\u662f\u5b9a\u4e49\uff0c\u53ea\u662f\u4e00\u4e2a\u58f0\u660e\u3002\u5373\u5982\u679c\u6709 inline \u51fd\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u5b83\u653e\u5728\u5934\u6587\u4ef6\u91cc\u3002 Tradeoff of inline functions \u00b6 Body of the called function is to be inserted into the caller. This may expand the code size but deduces the overhead of calling time. So it gains speed at the expenses of space. In most cases, it is worth. \u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\u3002 It is much better than macro in C. It checks the types of the parameters. \u5b8f\u6ca1\u6709\u7c7b\u578b\u68c0\u67e5\u3002 Inline may not in-line \u7f16\u8bd1\u5668\u53ef\u80fd\u4e3a\u6211\u4eec\u81ea\u4f5c\u4e3b\u5f20\uff0c\u51b3\u5b9a\u54ea\u4e9b\u51fd\u6570\u662f\u53ef\u4ee5 inline, \u54ea\u4e9b\u4e0d\u80fd inline. The compiler does not have to honor your request to make a function inline. It might decide the function is too large or notice that it calls itself (recursion is not allowed or indeed possible for inline functions), or the feature might not be implemented for your particular compiler. \u5c06\u6210\u5458\u51fd\u6570\u7684\u5b9a\u4e49\u5199\u5728\u58f0\u660e\u5185\uff0c\u5c31\u4f1a\u81ea\u52a8 inline. \u4e5f\u53ef\u4ee5\u5728 body \u7684\u5730\u65b9\u52a0\u4e0a inline. Access functions class Cup { int color ; public : int getColor () { return color ; } void setColor ( int color ) { this -> color = color ; } }; They are small functions that allow you to read or change part of the state of an object. that is, an internal variable or variables. Inline or not? Inline: Small functions, 2 or 3 lines Frequently called functions, e.g. inside loops Not inline? Very large functions, more than 20 lines Recursive functions A lazy way Make all your functions inline, or Never make your functions inline.","title":"Function"},{"location":"OOP/oop4/#functions","text":"Abstract Access control Local and member variables Overloaded functions Default arguments Inline functions","title":"Functions"},{"location":"OOP/oop4/#local-and-member-variables","text":"local global member lifecycle {} \u5168\u5c40 \u5bf9\u8c61 scope {} \u5168\u5c40 \u6210\u5458\u51fd\u6570\u5185 \u6210\u5458\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u548c\u751f\u5b58\u671f\u662f\u5206\u79bb\u7684\u3002\u5982 C \u8bed\u8a00\u4e2d\u7684 static \u9759\u6001\u53d8\u91cf\uff0c\u548c\u5168\u5c40\u53d8\u91cf\u4e00\u6837\u6700\u5f00\u59cb\u5c31\u5b58\u5728\uff0c\u4f46\u662f\u53ea\u80fd\u4f5c\u7528\u4e8e\u8fd9\u4e2a\u51fd\u6570\u3002","title":"Local and member variables"},{"location":"OOP/oop4/#c-access-control","text":"The members of a class can be cataloged, marked as: public public means all member declarations that follow are available to everyone. private The private keyword means that no one can access that member except inside function members of that type. \u53ea\u6709\u5728 \u7c7b\uff08\u4e0d\u662f\u5bf9\u8c61\uff09 \u5185\u90e8\uff08\u5185\u90e8\u53d8\u91cf\u3001\u51fd\u6570\uff09\u53ef\u4ee5\u8bbf\u95ee\u3002 \u53ef\u4ee5\u5229\u7528\u6307\u9488\u8bbf\u95ee\u7c7b\u5176\u4ed6\u5bf9\u8c61\u7684\u79c1\u6709\u53d8\u91cf\u3002 Example struct B { private : int j ; public : void f ( B * p ) { p -> j = 'A' ; } } B b , bb ; B . f ( & bb ); \u8fd9\u6837\u662f\u6b63\u786e\u7684\u3002 b, bb \u662f\u540c\u4e00\u4e2a\u7c7b\u7684\u4e0d\u540c\u5bf9\u8c61\u3002 protected \u4e0d\u8ba9\u5916\u754c\u8bbf\u95ee\uff0c\u4f46\u53ef\u4ee5\u8ba9\u7ee7\u627f\u8005\u8bbf\u95ee Friends \u53cb\u5143 \u5176\u4ed6\u51fd\u6570\uff0c\u7ed3\u6784\u5c31\u53ef\u4ee5\u8bbf\u95ee\u672c\u5bf9\u8c61\u7684\u53d8\u91cf\u3002\u53ea\u6709\u81ea\u5df1\u53ef\u4ee5\u51b3\u5b9a\u53cb\u5143\u3002 struct X { private : int i ; public : void initialize (); friend void g ( X * , int i ); friend void Y::y (); } class vs. struct class defaults to private struct defaults to public.","title":"C++ access control"},{"location":"OOP/oop4/#initialization","text":"","title":"Initialization"},{"location":"OOP/oop4/#initializer-list","text":"class Point { private : const float x , y ; public : Point ( float xa = 0.0 , float ya = 0.0 ) : y ( ya ), x ( xa ) {} }; \u8fd9\u91cc\u7684 const \u53d8\u91cf\u4e0d\u80fd\u88ab\u8d4b\u503c\uff0c\u53ea\u80fd\u88ab\u521d\u59cb\u5316\u3002\u6210\u5458 const \u53d8\u91cf\u7684\u521d\u59cb\u5316\uff0c\u53ef\u4ee5 const float x = 1.0; \u4f46\u8fd9\u6837\u6240\u6709\u7c7b\u7684\u5bf9\u8c61\u7684\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\u800c\u7c7b\u91cc\u53e6\u4e00\u4e2a\u53ef\u4ee5\u521d\u59cb\u5316\u7684\u5730\u65b9\u5c31\u662f\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 Can initialize any type of data : \u540e\u662f\u521d\u59cb\u5316\u5217\u8868\uff0c\u53ea\u6709\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4f7f\u7528\u3002\u4f1a\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u4e4b\u524d\uff0c\u8c03\u7528 Initializer list \u7684\u6784\u9020 Order of initialization is order of declaration \u2013 Not the order in the list! \u6309\u7167\u6210\u5458\u53d8\u91cf\u58f0\u660e\u7684\u987a\u5e8f\u521d\u59cb\u5316 Initialization vs. assignment Initialization Student :: Student ( string s ) : name ( s ) {} before constructor Assignment Student :: Student ( string s ) { name = s ;} inside constructor. string must have a default constructor. (\u5148\u6784\u9020\u51fa string \u7684\u5bf9\u8c61 name, \u518d\u8d4b\u503c) \u5efa\u8bae\u5747\u4f7f\u7528 Initializer list.","title":"Initializer list"},{"location":"OOP/oop4/#overloaded-constructors","text":"\u6211\u4eec\u53ef\u4ee5\u6709\u91cd\u540d\u7684\u51fd\u6570\uff0c\u4f46\u662f\u5fc5\u987b\u8981\u6709\u4e0d\u540c\uff0c\u4ee5\u4fbf\u7f16\u8bd1\u5668\u53ef\u4ee5\u533a\u5206\u3002\u5982\u53c2\u6570\u4e2a\u6570\uff0c\u53c2\u6570\u7c7b\u578b\u3002 void print ( char * str , int width ); // #1 void print ( double d , int width ); // #2 void print ( long l , int width ); // #3 void print ( int i , int width ); // #4 void print ( char * str ); // #5 print ( \"Pancakes\" , 15 ); print ( \"Syrup\" ); print ( 1999.0 , 10 ); print ( 1999 , 12 ); print ( 1999L , 15 ); Overload and auto-cast void f ( short i ); void f ( double d ); f ( 'a' ); f ( 2 ); f ( 2L ); f ( 3.2 ); \u9664\u4e86\u6700\u540e\u4e00\u4e2a\uff0c\u5176\u4ed6\u90fd\u662f\u4e0d\u80fd\u5206\u8fa8\u7684\u3002","title":"Overloaded constructors"},{"location":"OOP/oop4/#default-arguments","text":"Stash ( int size , int initQuantity = 0 ); A default argument is a value given in the declaration that the compiler automatically inserts if you don\u02bct provide a value in the function call. int harpo ( int n , int m = 4 , int j = 5 ); int chico ( int n , int m = 6 , int j ); // illegal int groucho ( int k = 1 , int m = 2 , int n = 3 ); beeps = harpo ( 2 ); beeps = harpo ( 1 , 8 ); beeps = harpo ( 8 , 7 , 6 ); To define a function with an argument list, defaults must be added from right to left. \u9ed8\u8ba4\u503c\u5fc5\u987b\u4ece\u53f3\u5230\u5de6\u3002 Pitfall of default arguments void f ( int i , int j = 10 ); int main () { ... } void f ( int i , int j = 10 ){ ... } \u8fd9\u6837\u4f1a\u62a5\u9519: redefinition of default argument. \u9ed8\u8ba4\u503c\u53ea\u80fd\u51fa\u73b0\u5728\u51fd\u6570\u539f\u578b \u3002\uff08\u58f0\u660e\u548c\u5b9a\u4e49\u4e00\u8d77\u662f\u53ef\u4ee5\u7684\uff09 \u9ed8\u8ba4\u53c2\u6570\u503c\u4e0d\u4f1a\u5728\u51fd\u6570\u4ee3\u7801\u91cc\u51fa\u73b0\uff0c\u53ea\u662f\u7f16\u8bd1\u5668\u628a\u7f16\u8bd1\u65f6\u4f1a\u628a\u9ed8\u8ba4\u503c\u653e\u8fdb\u5806\u6808\u8c03\u7528\u91cc\u3002\u56e0\u6b64\u53ef\u80fd\u4f1a\u88ab\u5176\u4ed6\u539f\u578b\u58f0\u660e\u6539\u53d8\u9ed8\u8ba4\u503c\u3002","title":"Default arguments"},{"location":"OOP/oop4/#overhead-for-a-function-call","text":"the processing time required by a device prior to the execution of a command Push parameters Push return address Prepare return values Pop all pushed","title":"Overhead for a function call"},{"location":"OOP/oop4/#inline-function","text":"An inline function is expanded in place, like a preprocessor macro, so the overhead of the function call is eliminated. inline int f ( int i ) { return i * 2 ; } main () { int a = 4 ; int b = f ( a ); // become b = a * 2; } inline \u4e0d\u4f1a\u771f\u6b63\u7f16\u8bd1\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u7f16\u8bd1\u5668\u628a\u51fd\u6570\u66ff\u6362\u5230\u5b9e\u9645\u4f4d\u7f6e\u3002 inline int plusOne ( int x ); inline int plusOne ( int x ) { return ++ x ; }; Repeat inline keyword at declaration and definition. \u539f\u578b\u58f0\u660e\u548c\u5b9a\u4e49\u90fd\u5fc5\u987b\u6709 inline. An inline function definition may not generate any code in .obj file. inline \u51fd\u6570\u7684 body \u4e0d\u662f\u5b9a\u4e49\uff0c\u53ea\u662f\u4e00\u4e2a\u58f0\u660e\u3002\u5373\u5982\u679c\u6709 inline \u51fd\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u5b83\u653e\u5728\u5934\u6587\u4ef6\u91cc\u3002","title":"inline function"},{"location":"OOP/oop4/#tradeoff-of-inline-functions","text":"Body of the called function is to be inserted into the caller. This may expand the code size but deduces the overhead of calling time. So it gains speed at the expenses of space. In most cases, it is worth. \u4ee5\u7a7a\u95f4\u6362\u65f6\u95f4\u3002 It is much better than macro in C. It checks the types of the parameters. \u5b8f\u6ca1\u6709\u7c7b\u578b\u68c0\u67e5\u3002 Inline may not in-line \u7f16\u8bd1\u5668\u53ef\u80fd\u4e3a\u6211\u4eec\u81ea\u4f5c\u4e3b\u5f20\uff0c\u51b3\u5b9a\u54ea\u4e9b\u51fd\u6570\u662f\u53ef\u4ee5 inline, \u54ea\u4e9b\u4e0d\u80fd inline. The compiler does not have to honor your request to make a function inline. It might decide the function is too large or notice that it calls itself (recursion is not allowed or indeed possible for inline functions), or the feature might not be implemented for your particular compiler. \u5c06\u6210\u5458\u51fd\u6570\u7684\u5b9a\u4e49\u5199\u5728\u58f0\u660e\u5185\uff0c\u5c31\u4f1a\u81ea\u52a8 inline. \u4e5f\u53ef\u4ee5\u5728 body \u7684\u5730\u65b9\u52a0\u4e0a inline. Access functions class Cup { int color ; public : int getColor () { return color ; } void setColor ( int color ) { this -> color = color ; } }; They are small functions that allow you to read or change part of the state of an object. that is, an internal variable or variables. Inline or not? Inline: Small functions, 2 or 3 lines Frequently called functions, e.g. inside loops Not inline? Very large functions, more than 20 lines Recursive functions A lazy way Make all your functions inline, or Never make your functions inline.","title":"Tradeoff of inline functions"},{"location":"OOP/oop5/","text":"Constant and Static \u00b6 Abstract const const objects const member functions static static member static objects namespace const \u00b6 declare a variable to have a constant value. const int x = 123 ; // const, literal x = 27 ; // illegal! x ++ ; // illegal! int y = x ; // ok, copy const to non-const y = x ; // ok, same thing const int z = y ; // ok, const is safer \u6211\u4eec\u901a\u8fc7\u7f16\u8bd1\u5668\u6765\u9632\u6b62\u5e38\u91cf\u88ab\u4fee\u6539 Constants are variables Observe scoping rules Declared with const type modifier A const in C++ defaults to internal linkage the compiler tries to avoid creating storage for a const -- holds the value in its symbol table. \u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u5c31\u5728\u5185\u90e8\uff0c\u7f16\u8bd1\u5668\u4e3b\u52a8\u628a\u5b83\u751f\u6210\uff0c\u4e0d\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u53d8\u91cf\u3002 extern forces storage to be allocated. Compile time constants \u58f0\u660e\u7684\u65f6\u5019\u4e0d\u80fd\u7ed9\u503c( extern const int ... )\uff0c\u53ea\u6709\u5b9a\u4e49\u7684\u65f6\u5019\u624d\u53ef\u4ee5\u3002 Run-time constants const int class_size = 12 ; int finalGrade [ class_size ]; // ok int x ; cin >> x ; const int size = x ; double classAverage [ size ]; // error! C++11 is ok. Aggregates const int i [] = { 1 , 2 , 3 , 4 }; float f [ i [ 3 ]]; // Illegal(in C++98) struct S { int i , j ; }; const S s [] = { { 1 , 2 }, { 3 , 4 } }; double d [ s [ 1 ]. j ]; // Illegal It\u02bcs possible to use const for aggregates, but storage will be allocated. In these situations, const means. However, the value cannot be used at compile time because the compiler is not required to know the contents of the storage at compile time. Pointers and const \u00b6 char * const q = \"abc\" ; // q is const * q = 'c' ; // ERROR // char a[] = \"abc\"; *q = 'c' is ok. q ++ ; // ERROR const char * p = \"ABCD\" ; // (*p) is a const char * p = 'b' ; // ERROR! (*p) is the const C/C++ \u628a\u5b57\u7b26\u5b57\u9762\u91cf\u505a\u6210\u5b57\u7b26\u6570\u7ec4\uff0c\u5e76\u52a0\u4e0a \\0 , \u653e\u5728\u4e00\u4e2a\u4e0d\u53ef\u4fee\u6539\u7684\u5730\u65b9\u3002 char * const q \u8868\u793a q \u6307\u5411 abc \u7684\u5730\u5740\uff0c\u5219 q \u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u5730\u65b9\u3002 const char * q p \u6307\u5411\u7684\u5730\u5740\u53ef\u4ee5\u4fee\u6539\uff0c\u4f46\u4e0d\u80fd\u901a\u8fc7 p \u4fee\u6539 p \u6307\u5411\u7684\u503c\u3002 Example string p1 ( \"Fred\" ); const string * p = & p1 ; string const * p = & p1 ; string * const p = & p1 ; \u5bf9\u8c61\u4e0d\u80fd\u6539 \u5bf9\u8c61\u4e0d\u80fd\u6539 \u6307\u9488\u4e0d\u80fd\u6539 * \u7684\u4f4d\u7f6e\uff0cconst \u5728\u661f\u53f7\u524d\u9762\u5219\u5bf9\u8c61\u4e0d\u80fd\u6539\uff0c\u5426\u5219\u8868\u793a\u6307\u9488\u4e0d\u80fd\u6539\u3002 int i; const int ci = 3; int *ip; ip = &i; ip = &ci; // ERROR const int *cip cip = &i; cip=&ci; \u5982\u679c ip = &ci \u4e0d\u62a5\u9519\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u65e0\u6cd5\u5728\u8fd0\u884c\u65f6\u5bf9\u7a0b\u5e8f\u4fee\u6539\u5e38\u91cf\u505a\u51fa\u4efb\u4f55\u9650\u5236\u3002 cip = &i; \u4e4b\u540e i \u4ecd\u7136\u53ef\u4ee5\u4fee\u6539\uff0c\u53ea\u662f\u4e0d\u80fd\u901a\u8fc7 cip \u4fee\u6539 i \u7684\u503c\u3002 char * s = \"Hello, world!\" ; s is a pointer initialized to point to a string constant This is actually a const char *s but compiler accepts it without the const \u4e3a\u4e86\u5411\u540e\u517c\u5bb9 Don't try and change the character values (it is undefined behavior) If you want to change the string, put it in an array: char s [] = \"Hello, world!\" ; Can always treat a non-const value as const. \u8fd4\u56de const \u6307\u9488\u662f\u6709\u610f\u4e49\u7684\uff0c\u53ea\u80fd\u8bfb\u4e0d\u80fd\u5199 Const Object \u00b6 const Currency the_raise ( 42 , 38 ); What members can access the internals? How can the object be protected from change? Solution: declare member functions const int Date::set_day ( int d ) { //...error check d here... day = d ; // ok, non-const so can modify } int Date::get_day () const { day ++ ; // ERROR modifies data member set_day ( 12 ); // ERROR calls non-const member return day ; // ok } \u8fd9\u4e2a const \u8868\u660e\u5728\u5728\u51fd\u6570\u91cc\u4e0d\u4f1a\u6539\u53d8\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u4e0d\u4f1a\u8c03\u7528\u5176\u4ed6\u975e const \u7684\u6210\u5458\u51fd\u6570\u3002\u4e0d\u52a0 const \u8868\u660e\u6211\u4eec\u4e0d\u4e00\u5b9a\u4fee\u6539\u3002 Repeat the const keyword in the definition as well as the declaration. int get_day () const ; int get_day () const { return day }; const \u5b9a\u4e49\u7684\u5bf9\u8c61\uff0c\u53ea\u80fd\u8c03\u7528\u5e26 const \u5c5e\u6027\u7684\u6210\u5458\u51fd\u6570\u3002 void f () const ; void f (); \u53ef\u4ee5\u91cd\u8f7d\uff0c\u4f1a\u6839\u636e\u5bf9\u8c61\u8c03\u7528\u65f6\u662f\u5426 const \u6765\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u6210\u5458\u51fd\u6570\u3002\u4e8b\u5b9e\u4e0a const \u540e\u7684\u6210\u5458\u51fd\u6570\u53c2\u6570\uff0c\u76f8\u5f53\u4e8e const A *this , \u800c\u4e0d\u52a0 const \u5c31\u53ea\u662f A *this . \u5982\u679c\u6210\u5458\u53d8\u91cf\u4e2d\u6709 const class A { const int i ; }; has to be initialized in initializer list of the constructor. static \u00b6 Two basic meanings Static storage allocated once at a fixed address Visibility of a name internal linkage \u9759\u6001\u672c\u5730\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u88ab\u5b58\u50a8\u5728\u9759\u6001\u5185\u5b58\u4e2d\u3002 \u51fa\u73b0\u5728\u5168\u5c40\u53d8\u91cf/\u51fd\u6570\u524d\uff0c\u8868\u793a\u8bbf\u95ee\u9650\u5236\uff0c\u53ea\u6709\u5f53\u524d\u6587\u4ef6\u53ef\u4ee5\u8bbf\u95ee\u3002 In C++, don't use static except inside functions and classes. type meaning static free function internal linkage(deprecated) static global variables internal linkage(deprecated) static local variables persistent storage static member variables shared by instances static member functions shared by instances, can only access static member Static applied to objects ... Construction occurs when definition is encountered Constructor called at-most once The constructor arguments must be satisfied Destruction takes place on exit from program Compiler assures LIFO order of destructors \u5168\u5c40\u53d8\u91cf\u7684\u6784\u9020\u53d1\u751f\u5728 main() \u4e4b\u524d\uff0c\u5728 main() \u6216\u8005 exit() \u4e4b\u540e\u6790\u6784\u3002 \u4f46\u662f\u4e0d\u540c\u7f16\u8bd1\u5355\u5143\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u5982\u679c\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f46\u8fd9\u662f\u65e0\u6cd5\u4fdd\u8bc1\u7684\u3002 Just say no -- avoid non-local static dependencies. Can we apply static to members? \u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u672c\u5730\u53d8\u91cf\u662f\u4e00\u6837\u7684\u3002\u8bbf\u95ee\u53d7\u9650\uff0c\u9650\u4e8e\u7c7b\u5185\u90e8\uff0c\u5b9e\u9645\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\u3002 \u8868\u73b0\uff1a\u5728\u8fd9\u4e2a\u7c7b\u5185\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u7ef4\u6301\u76f8\u540c\u7684\u503c\uff0c\u5bf9\u8c61 A \u4fee\u6539\u4e86\u90a3\u4e48\u5bf9\u8c61 B \u7684\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u4e5f\u4f1a\u6539\u53d8\u3002 \u597d\u4e60\u60ef\uff1a\u53ea\u8981\u4e0d\u6539\u53d8\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u5c31\u628a\u6210\u5458\u51fd\u6570\u52a0\u4e0a const. \u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this, \u4e0d\u80fd\u8c03\u7528\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u51fd\u6570\u3002\u53ef\u4ee5\u5728\u6ca1\u6709\u521b\u5efa\u7c7b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\u5c31\u80fd\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002 Namespace \u00b6 Avoiding name clashes // old1.h void f (); void g (); // old2.h void f (); void g (); \u540d\u5b57\u7a7a\u95f4\uff0c\u76f8\u5f53\u4e8e\u7ed9\u8fd9\u4e9b name \u52a0\u4e0a\u4e86 family name. // old1.h namespace old1 { void f (); void g (); } // old2.h namespace old2 { void f (); void g (); } Namespace Expresses a logical grouping of classes, functions, variables, etc. A namespace is a scope just like a class Preferred when only name encapsulation is needed Using names from a namespace \u00b6 Using-Declarations Introduces a local synonym for name States in one place where a name comes from. Eliminates redundant scope qualification: void main () { using MyLib :: foo ; using MyLib :: Cat ; foo (); Cat c ; c . Meow (); } Using-Directives Makes all names from a namespace available. Can be used as a notational convenience. void main () { using namespace std ; using namespace MyLib ; foo (); Cat c ; c . Meow (); cout << \"hello\" << endl ; } Using-directives may create potential ambiguities. // Mylib.h namespace XLib { void x (); void y (); } namespace YLib { void y (); void z (); } Solution: Using-directives only make the names available. Ambiguities arise only when you make calls. Use scope resolution to resolve. void main () { using namespace XLib ; using namespace YLib ; x (); // OK y (); // Error: ambiguous XLib :: y (); // OK, resolves to XLib z (); // OK } Namespace aliases \u00b6 namespace short1 = supercalifragilistic ; short1 :: f (); Namespace composition \u00b6 Compose new namespaces using names from other ones. Using-declarations can resolve potential clashes. Explicitly defined functions take precedence. namespace first { void x (); void y (); } namespace second { void y (); void z (); } namespace mine { using namespace first ; using namespace second ; using first :: y (); // resolve clashes to first::x() void mystuff (); // ... } Namespace selection \u00b6 Compose namespaces by selecting a few features from other namespaces. Choose only the names you want rather than all. Changes to \"orig\" declaration become reflected in \"mine\". namespace mine { using orig :: Cat ; // use Cat class from orig void x (); void y (); } Namspaces are open. \u00b6 Multiple namespace declarations add to the same namespace. Namespace can be distributed across multiple files. //header1.h namespace X { void f (); } // header2.h namespace X { void g (); // X how has f() and g(); }","title":"Constant and Static"},{"location":"OOP/oop5/#constant-and-static","text":"Abstract const const objects const member functions static static member static objects namespace","title":"Constant and Static"},{"location":"OOP/oop5/#const","text":"declare a variable to have a constant value. const int x = 123 ; // const, literal x = 27 ; // illegal! x ++ ; // illegal! int y = x ; // ok, copy const to non-const y = x ; // ok, same thing const int z = y ; // ok, const is safer \u6211\u4eec\u901a\u8fc7\u7f16\u8bd1\u5668\u6765\u9632\u6b62\u5e38\u91cf\u88ab\u4fee\u6539 Constants are variables Observe scoping rules Declared with const type modifier A const in C++ defaults to internal linkage the compiler tries to avoid creating storage for a const -- holds the value in its symbol table. \u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u5c31\u5728\u5185\u90e8\uff0c\u7f16\u8bd1\u5668\u4e3b\u52a8\u628a\u5b83\u751f\u6210\uff0c\u4e0d\u628a\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u53d8\u91cf\u3002 extern forces storage to be allocated. Compile time constants \u58f0\u660e\u7684\u65f6\u5019\u4e0d\u80fd\u7ed9\u503c( extern const int ... )\uff0c\u53ea\u6709\u5b9a\u4e49\u7684\u65f6\u5019\u624d\u53ef\u4ee5\u3002 Run-time constants const int class_size = 12 ; int finalGrade [ class_size ]; // ok int x ; cin >> x ; const int size = x ; double classAverage [ size ]; // error! C++11 is ok. Aggregates const int i [] = { 1 , 2 , 3 , 4 }; float f [ i [ 3 ]]; // Illegal(in C++98) struct S { int i , j ; }; const S s [] = { { 1 , 2 }, { 3 , 4 } }; double d [ s [ 1 ]. j ]; // Illegal It\u02bcs possible to use const for aggregates, but storage will be allocated. In these situations, const means. However, the value cannot be used at compile time because the compiler is not required to know the contents of the storage at compile time.","title":"const"},{"location":"OOP/oop5/#pointers-and-const","text":"char * const q = \"abc\" ; // q is const * q = 'c' ; // ERROR // char a[] = \"abc\"; *q = 'c' is ok. q ++ ; // ERROR const char * p = \"ABCD\" ; // (*p) is a const char * p = 'b' ; // ERROR! (*p) is the const C/C++ \u628a\u5b57\u7b26\u5b57\u9762\u91cf\u505a\u6210\u5b57\u7b26\u6570\u7ec4\uff0c\u5e76\u52a0\u4e0a \\0 , \u653e\u5728\u4e00\u4e2a\u4e0d\u53ef\u4fee\u6539\u7684\u5730\u65b9\u3002 char * const q \u8868\u793a q \u6307\u5411 abc \u7684\u5730\u5740\uff0c\u5219 q \u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u5730\u65b9\u3002 const char * q p \u6307\u5411\u7684\u5730\u5740\u53ef\u4ee5\u4fee\u6539\uff0c\u4f46\u4e0d\u80fd\u901a\u8fc7 p \u4fee\u6539 p \u6307\u5411\u7684\u503c\u3002 Example string p1 ( \"Fred\" ); const string * p = & p1 ; string const * p = & p1 ; string * const p = & p1 ; \u5bf9\u8c61\u4e0d\u80fd\u6539 \u5bf9\u8c61\u4e0d\u80fd\u6539 \u6307\u9488\u4e0d\u80fd\u6539 * \u7684\u4f4d\u7f6e\uff0cconst \u5728\u661f\u53f7\u524d\u9762\u5219\u5bf9\u8c61\u4e0d\u80fd\u6539\uff0c\u5426\u5219\u8868\u793a\u6307\u9488\u4e0d\u80fd\u6539\u3002 int i; const int ci = 3; int *ip; ip = &i; ip = &ci; // ERROR const int *cip cip = &i; cip=&ci; \u5982\u679c ip = &ci \u4e0d\u62a5\u9519\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u65e0\u6cd5\u5728\u8fd0\u884c\u65f6\u5bf9\u7a0b\u5e8f\u4fee\u6539\u5e38\u91cf\u505a\u51fa\u4efb\u4f55\u9650\u5236\u3002 cip = &i; \u4e4b\u540e i \u4ecd\u7136\u53ef\u4ee5\u4fee\u6539\uff0c\u53ea\u662f\u4e0d\u80fd\u901a\u8fc7 cip \u4fee\u6539 i \u7684\u503c\u3002 char * s = \"Hello, world!\" ; s is a pointer initialized to point to a string constant This is actually a const char *s but compiler accepts it without the const \u4e3a\u4e86\u5411\u540e\u517c\u5bb9 Don't try and change the character values (it is undefined behavior) If you want to change the string, put it in an array: char s [] = \"Hello, world!\" ; Can always treat a non-const value as const. \u8fd4\u56de const \u6307\u9488\u662f\u6709\u610f\u4e49\u7684\uff0c\u53ea\u80fd\u8bfb\u4e0d\u80fd\u5199","title":"Pointers and const"},{"location":"OOP/oop5/#const-object","text":"const Currency the_raise ( 42 , 38 ); What members can access the internals? How can the object be protected from change? Solution: declare member functions const int Date::set_day ( int d ) { //...error check d here... day = d ; // ok, non-const so can modify } int Date::get_day () const { day ++ ; // ERROR modifies data member set_day ( 12 ); // ERROR calls non-const member return day ; // ok } \u8fd9\u4e2a const \u8868\u660e\u5728\u5728\u51fd\u6570\u91cc\u4e0d\u4f1a\u6539\u53d8\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u4e0d\u4f1a\u8c03\u7528\u5176\u4ed6\u975e const \u7684\u6210\u5458\u51fd\u6570\u3002\u4e0d\u52a0 const \u8868\u660e\u6211\u4eec\u4e0d\u4e00\u5b9a\u4fee\u6539\u3002 Repeat the const keyword in the definition as well as the declaration. int get_day () const ; int get_day () const { return day }; const \u5b9a\u4e49\u7684\u5bf9\u8c61\uff0c\u53ea\u80fd\u8c03\u7528\u5e26 const \u5c5e\u6027\u7684\u6210\u5458\u51fd\u6570\u3002 void f () const ; void f (); \u53ef\u4ee5\u91cd\u8f7d\uff0c\u4f1a\u6839\u636e\u5bf9\u8c61\u8c03\u7528\u65f6\u662f\u5426 const \u6765\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u6210\u5458\u51fd\u6570\u3002\u4e8b\u5b9e\u4e0a const \u540e\u7684\u6210\u5458\u51fd\u6570\u53c2\u6570\uff0c\u76f8\u5f53\u4e8e const A *this , \u800c\u4e0d\u52a0 const \u5c31\u53ea\u662f A *this . \u5982\u679c\u6210\u5458\u53d8\u91cf\u4e2d\u6709 const class A { const int i ; }; has to be initialized in initializer list of the constructor.","title":"Const Object"},{"location":"OOP/oop5/#static","text":"Two basic meanings Static storage allocated once at a fixed address Visibility of a name internal linkage \u9759\u6001\u672c\u5730\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u88ab\u5b58\u50a8\u5728\u9759\u6001\u5185\u5b58\u4e2d\u3002 \u51fa\u73b0\u5728\u5168\u5c40\u53d8\u91cf/\u51fd\u6570\u524d\uff0c\u8868\u793a\u8bbf\u95ee\u9650\u5236\uff0c\u53ea\u6709\u5f53\u524d\u6587\u4ef6\u53ef\u4ee5\u8bbf\u95ee\u3002 In C++, don't use static except inside functions and classes. type meaning static free function internal linkage(deprecated) static global variables internal linkage(deprecated) static local variables persistent storage static member variables shared by instances static member functions shared by instances, can only access static member Static applied to objects ... Construction occurs when definition is encountered Constructor called at-most once The constructor arguments must be satisfied Destruction takes place on exit from program Compiler assures LIFO order of destructors \u5168\u5c40\u53d8\u91cf\u7684\u6784\u9020\u53d1\u751f\u5728 main() \u4e4b\u524d\uff0c\u5728 main() \u6216\u8005 exit() \u4e4b\u540e\u6790\u6784\u3002 \u4f46\u662f\u4e0d\u540c\u7f16\u8bd1\u5355\u5143\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u5982\u679c\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f46\u8fd9\u662f\u65e0\u6cd5\u4fdd\u8bc1\u7684\u3002 Just say no -- avoid non-local static dependencies. Can we apply static to members? \u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u672c\u5730\u53d8\u91cf\u662f\u4e00\u6837\u7684\u3002\u8bbf\u95ee\u53d7\u9650\uff0c\u9650\u4e8e\u7c7b\u5185\u90e8\uff0c\u5b9e\u9645\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\u3002 \u8868\u73b0\uff1a\u5728\u8fd9\u4e2a\u7c7b\u5185\u6240\u6709\u7684\u5bf9\u8c61\u90fd\u7ef4\u6301\u76f8\u540c\u7684\u503c\uff0c\u5bf9\u8c61 A \u4fee\u6539\u4e86\u90a3\u4e48\u5bf9\u8c61 B \u7684\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u4e5f\u4f1a\u6539\u53d8\u3002 \u597d\u4e60\u60ef\uff1a\u53ea\u8981\u4e0d\u6539\u53d8\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u5c31\u628a\u6210\u5458\u51fd\u6570\u52a0\u4e0a const. \u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this, \u4e0d\u80fd\u8c03\u7528\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u51fd\u6570\u3002\u53ef\u4ee5\u5728\u6ca1\u6709\u521b\u5efa\u7c7b\u7684\u5bf9\u8c61\u7684\u65f6\u5019\u5c31\u80fd\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002","title":"static"},{"location":"OOP/oop5/#namespace","text":"Avoiding name clashes // old1.h void f (); void g (); // old2.h void f (); void g (); \u540d\u5b57\u7a7a\u95f4\uff0c\u76f8\u5f53\u4e8e\u7ed9\u8fd9\u4e9b name \u52a0\u4e0a\u4e86 family name. // old1.h namespace old1 { void f (); void g (); } // old2.h namespace old2 { void f (); void g (); } Namespace Expresses a logical grouping of classes, functions, variables, etc. A namespace is a scope just like a class Preferred when only name encapsulation is needed","title":"Namespace"},{"location":"OOP/oop5/#using-names-from-a-namespace","text":"Using-Declarations Introduces a local synonym for name States in one place where a name comes from. Eliminates redundant scope qualification: void main () { using MyLib :: foo ; using MyLib :: Cat ; foo (); Cat c ; c . Meow (); } Using-Directives Makes all names from a namespace available. Can be used as a notational convenience. void main () { using namespace std ; using namespace MyLib ; foo (); Cat c ; c . Meow (); cout << \"hello\" << endl ; } Using-directives may create potential ambiguities. // Mylib.h namespace XLib { void x (); void y (); } namespace YLib { void y (); void z (); } Solution: Using-directives only make the names available. Ambiguities arise only when you make calls. Use scope resolution to resolve. void main () { using namespace XLib ; using namespace YLib ; x (); // OK y (); // Error: ambiguous XLib :: y (); // OK, resolves to XLib z (); // OK }","title":"Using names from a namespace"},{"location":"OOP/oop5/#namespace-aliases","text":"namespace short1 = supercalifragilistic ; short1 :: f ();","title":"Namespace aliases"},{"location":"OOP/oop5/#namespace-composition","text":"Compose new namespaces using names from other ones. Using-declarations can resolve potential clashes. Explicitly defined functions take precedence. namespace first { void x (); void y (); } namespace second { void y (); void z (); } namespace mine { using namespace first ; using namespace second ; using first :: y (); // resolve clashes to first::x() void mystuff (); // ... }","title":"Namespace composition"},{"location":"OOP/oop5/#namespace-selection","text":"Compose namespaces by selecting a few features from other namespaces. Choose only the names you want rather than all. Changes to \"orig\" declaration become reflected in \"mine\". namespace mine { using orig :: Cat ; // use Cat class from orig void x (); void y (); }","title":"Namespace selection"},{"location":"OOP/oop5/#namspaces-are-open","text":"Multiple namespace declarations add to the same namespace. Namespace can be distributed across multiple files. //header1.h namespace X { void f (); } // header2.h namespace X { void g (); // X how has f() and g(); }","title":"Namspaces are open."},{"location":"OOP/oop6/","text":"Inheritance \u00b6 Abstract composition inheritance Composition \u00b6 Composition: reusing the implementation Composition: construct new object with existing objects It is the relationship of \"has-a\" Ways of inclusion Fully By reference (Inclustion by reference allows sharing) e.g. an employee has Name // fully Address // fully Health Plan // fully Salary History : Collection of Raise objects // fully Supervisor : Another Employee object ! // reference Embedded objects All embedded objects are initalized The default constructor is called if you don\u02bct supply the arguments, and there is a default constructor (or one can be built) Constructors can have initial Note If we wrote the constructor as (assuming we have the set accessors for the sub-objects): SavingsAccount :: SavingsAccount ( const char * name , const char * address , int cents ) { m_saver . set_name ( name ); m_saver . set_address ( address ); m_balance . set_cents ( cents ); } Default constructors would be called! \u5bf9\u4e8e\u5d4c\u5165\u5bf9\u8c61\uff0c\u4e0d\u7528\u521d\u59cb\u5316\u5217\u8868\uff0c\u5c31\u5fc5\u987b\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002 public vs private It is common to make embedded objects private. Inheritance \u00b6 Reusing the interface \u7ee7\u627f\u662f\u8981\u57fa\u4e8e\u5df2\u6709\u7684\u7c7b\u6765\u8bbe\u8ba1\u65b0\u7684\u7c7b\uff0c\u65b0\u7684\u7c7b\u7684\u5bf9\u8c61\u53ef\u4ee5\u88ab\u5f53\u4f5c\u5df2\u6709\u7c7b\u7684\u5bf9\u8c61\u3002 Inheritance is the ability to define the behavior or implementation of one class as a superset of another class. Example \u00b6 Source Code: class Database { vector < CD > cds ; vector < DVD > dvds ; public : void addCD ( CD & aCD ); void addDVD ( DVD & aDVD ); void list () { for ( auto x : cds ) { cd . print (); } for ( auto x : dvds ) { x . print (); } } } Critique of DoME code duplication CD and DVD classes very similar (large part are identical) makes maintenance difficult/more work introduces danger of bugs through incorrect maintenance code duplication also in Database class Inheritance allows us to define one class as an extension of another. \u8fd9\u65f6\u5982\u679c\u5e0c\u671b\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u5982\u78c1\u5e26\uff0c\u76f4\u63a5 class Tape: public Item \u7ee7\u627f\u5373\u53ef\u3002 Inheritance \u00b6 Advantages of inheritance Avoiding code duplication Code reuse Easier maintenance \u53ef\u7ef4\u62a4\u6027\uff0c\u6307\u4ee3\u7801\u4fee\u6539\u540e\u53ef\u4ee5\u9002\u5e94\u672a\u6765\u7684\u53d8\u5316\u3002 Extendibility \u53ef\u6269\u5c55\u6027\uff0c\u6307\u4ee3\u7801\u4e0d\u7ecf\u4fee\u6539\u5c31\u53ef\u4ee5\u9002\u5e94\u672a\u6765\u7684\u53d8\u5316\u3002 Class relationship: Is-A e.g. manager is an employee. \u57fa\u7c7b\uff0c\u8d85\u7c7b\uff0c\u7236\u7c7b\u3002\u6d3e\u751f\u7c7b\uff0c\u5b50\u7c7b\u3002 Scopes and access in C++ \u00b6 clint class \u8868\u793a\u8fd9\u4e2a\u7c7b\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u7c7b\u3002\uff08\u53ea\u80fd\u770b\u5230 public \uff09 \u80fd\u63a5\u53d7\u76f8\u540c\u4fe1\u606f\u7684\u5bf9\u8c61\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u7c7b\u578b\uff0c\u56e0\u6b64\u5b50\u7c7b\u7684\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u7236\u7c7b\u7684\u5bf9\u8c61\u3002 \u5b50\u7c7b\u4e0d\u80fd\u8bbf\u95ee\u7236\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff0c\u4f46\u79c1\u6709\u53d8\u91cf\u5b58\u5728\u4e8e\u8fd9\u4e2a\u7c7b\u4e2d\u3002 \u5f53\u8c03\u7528\u6784\u9020\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u4e0d\u80fd\u8c03\u7528\u7236\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff0c\u53ea\u80fd\u7528\u521d\u59cb\u5316\u5217\u8868\u7684\u65b9\u5f0f\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6211\u4eec\u4e0d\u80fd\u4e5f\u4e0d\u5e94\u8be5\u5728\u5b50\u7c7b\u5bf9\u7236\u7c7b\u7684\u53d8\u91cf\u505a\u521d\u59cb\u5316 (code duplication) Employee :: Employee ( const string & name , const string & ssn ) : m_name ( name ), m_ssn ( ssn ) { // initializer list sets up the values! } class Manager : public Employee { public : Manager ( const std :: string & name , const std :: string & ssn , const std :: string & title ); const std :: string title_name () const ; const std :: string & get_title () const ; void print ( std :: ostream & out ) const ; private : std :: string m_title ; }; Manager :: Manager ( const string & name , const string & ssn , const string & title = \"\" ) : Employee ( name , ssn ), m_title ( title ) { } \u6709\u4ec0\u4e48\u662f\u6ca1\u6709\u7ee7\u627f\u5f97\u5230\uff1a \u6784\u9020\u51fd\u6570\u6ca1\u6709\u88ab\u7ee7\u627f\uff0c\u4f46\u7236\u7c7b\u7684\u6784\u9020\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002\u6790\u6784\u540c\u7406\u3002 \u8d4b\u503c\u7684\u8fd0\u7b97\u7b26\u4e0d\u4f1a\u88ab\u7ee7\u627f\u3002 Inheritance Public: class Derived : public Base ... Protected: class Derived : protected Base ... Private: class Derived : private Base ... default Inheritance Type (B is) public protected private public A public in B protected in B hidden private A private in B private in B hidden protected A protected in B protected in B hidden private \u7ee7\u627f\uff1a\u79c1\u751f\u5b50\uff0c\u5916\u754c\u4e0d\u80fd\u77e5\u9053\u4ed6\u7684\u7236\u4eb2\u662f\u8c01\u3002\u5373 B \u7684\u7528\u6237\u4e0d\u80fd\u770b\u5230 A \u7684 public \u51fd\u6570\u3002\u5176\u5b9e\u662f\u4e00\u79cd\u7ec4\u5408\uff0c\u7236\u7c7b\u7684\u51fd\u6570\u3001\u53d8\u91cf\u53d8\u4e3a\u79c1\u6709\u3002 int main () { Employee p1 ( \"John\" ); Manager p2 ( \"Tom Jordan\" , ); p1 . print (); p2 . print (); p1 . print ( \"Welcome:\" ); //p2.print(\"Welcome:\"); \u62a5\u9519 Employee * p = & p1 ; p -> print (); p = & p2 ; p -> print (); // \u6309 Employee \u91cc\u9762\u7684\u51fd\u6570\u8f93\u51fa\uff0c\u800c\u4e0d\u662f Manager } \u8981\u8c03\u7528\u7236\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8981 Employee::print() . \u521d\u59cb\u5316\u5217\u8868\u662f\u5c5e\u4e8e body \u7684\uff0c\u8981\u548c {} \u4e00\u8d77\u3002 \u7236\u7c7b\u7684\u6784\u9020\u662f\u5728\u5b50\u7c7b\u7684\u6784\u9020\u4e4b\u524d\u3002 \u5b50\u7c7b\u91cd\u65b0\u5b9a\u4e49\u4e86\u7236\u7c7b\u7684\u67d0\u4e2a\u51fd\u6570\uff0c\u5c31\u4f1a\u628a\u5176\u4ed6 overloaded \u7684\u51fd\u6570\u8986\u76d6\u6389\uff08C++ \u72ec\u6709\uff0c\u65e0\u6cd5\u89e3\u91ca\uff09\uff0c\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, p2.print(\"welcome\") \u4f1a\u62a5\u9519\u3002 \u5982\u679c\u5728 Employee \u4e2d\u7684 print \u51fd\u6570\u52a0\u4e0a virtual , p->print() \u5c31\u4f1a\u8f93\u51fa\u3002","title":"Inheritance"},{"location":"OOP/oop6/#inheritance","text":"Abstract composition inheritance","title":"Inheritance"},{"location":"OOP/oop6/#composition","text":"Composition: reusing the implementation Composition: construct new object with existing objects It is the relationship of \"has-a\" Ways of inclusion Fully By reference (Inclustion by reference allows sharing) e.g. an employee has Name // fully Address // fully Health Plan // fully Salary History : Collection of Raise objects // fully Supervisor : Another Employee object ! // reference Embedded objects All embedded objects are initalized The default constructor is called if you don\u02bct supply the arguments, and there is a default constructor (or one can be built) Constructors can have initial Note If we wrote the constructor as (assuming we have the set accessors for the sub-objects): SavingsAccount :: SavingsAccount ( const char * name , const char * address , int cents ) { m_saver . set_name ( name ); m_saver . set_address ( address ); m_balance . set_cents ( cents ); } Default constructors would be called! \u5bf9\u4e8e\u5d4c\u5165\u5bf9\u8c61\uff0c\u4e0d\u7528\u521d\u59cb\u5316\u5217\u8868\uff0c\u5c31\u5fc5\u987b\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002 public vs private It is common to make embedded objects private.","title":"Composition"},{"location":"OOP/oop6/#inheritance_1","text":"Reusing the interface \u7ee7\u627f\u662f\u8981\u57fa\u4e8e\u5df2\u6709\u7684\u7c7b\u6765\u8bbe\u8ba1\u65b0\u7684\u7c7b\uff0c\u65b0\u7684\u7c7b\u7684\u5bf9\u8c61\u53ef\u4ee5\u88ab\u5f53\u4f5c\u5df2\u6709\u7c7b\u7684\u5bf9\u8c61\u3002 Inheritance is the ability to define the behavior or implementation of one class as a superset of another class.","title":"Inheritance"},{"location":"OOP/oop6/#example","text":"Source Code: class Database { vector < CD > cds ; vector < DVD > dvds ; public : void addCD ( CD & aCD ); void addDVD ( DVD & aDVD ); void list () { for ( auto x : cds ) { cd . print (); } for ( auto x : dvds ) { x . print (); } } } Critique of DoME code duplication CD and DVD classes very similar (large part are identical) makes maintenance difficult/more work introduces danger of bugs through incorrect maintenance code duplication also in Database class Inheritance allows us to define one class as an extension of another. \u8fd9\u65f6\u5982\u679c\u5e0c\u671b\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u5982\u78c1\u5e26\uff0c\u76f4\u63a5 class Tape: public Item \u7ee7\u627f\u5373\u53ef\u3002","title":"Example"},{"location":"OOP/oop6/#inheritance_2","text":"Advantages of inheritance Avoiding code duplication Code reuse Easier maintenance \u53ef\u7ef4\u62a4\u6027\uff0c\u6307\u4ee3\u7801\u4fee\u6539\u540e\u53ef\u4ee5\u9002\u5e94\u672a\u6765\u7684\u53d8\u5316\u3002 Extendibility \u53ef\u6269\u5c55\u6027\uff0c\u6307\u4ee3\u7801\u4e0d\u7ecf\u4fee\u6539\u5c31\u53ef\u4ee5\u9002\u5e94\u672a\u6765\u7684\u53d8\u5316\u3002 Class relationship: Is-A e.g. manager is an employee. \u57fa\u7c7b\uff0c\u8d85\u7c7b\uff0c\u7236\u7c7b\u3002\u6d3e\u751f\u7c7b\uff0c\u5b50\u7c7b\u3002","title":"Inheritance"},{"location":"OOP/oop6/#scopes-and-access-in-c","text":"clint class \u8868\u793a\u8fd9\u4e2a\u7c7b\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u7c7b\u3002\uff08\u53ea\u80fd\u770b\u5230 public \uff09 \u80fd\u63a5\u53d7\u76f8\u540c\u4fe1\u606f\u7684\u5bf9\u8c61\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2a\u7c7b\u578b\uff0c\u56e0\u6b64\u5b50\u7c7b\u7684\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u7236\u7c7b\u7684\u5bf9\u8c61\u3002 \u5b50\u7c7b\u4e0d\u80fd\u8bbf\u95ee\u7236\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff0c\u4f46\u79c1\u6709\u53d8\u91cf\u5b58\u5728\u4e8e\u8fd9\u4e2a\u7c7b\u4e2d\u3002 \u5f53\u8c03\u7528\u6784\u9020\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u4e0d\u80fd\u8c03\u7528\u7236\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff0c\u53ea\u80fd\u7528\u521d\u59cb\u5316\u5217\u8868\u7684\u65b9\u5f0f\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6211\u4eec\u4e0d\u80fd\u4e5f\u4e0d\u5e94\u8be5\u5728\u5b50\u7c7b\u5bf9\u7236\u7c7b\u7684\u53d8\u91cf\u505a\u521d\u59cb\u5316 (code duplication) Employee :: Employee ( const string & name , const string & ssn ) : m_name ( name ), m_ssn ( ssn ) { // initializer list sets up the values! } class Manager : public Employee { public : Manager ( const std :: string & name , const std :: string & ssn , const std :: string & title ); const std :: string title_name () const ; const std :: string & get_title () const ; void print ( std :: ostream & out ) const ; private : std :: string m_title ; }; Manager :: Manager ( const string & name , const string & ssn , const string & title = \"\" ) : Employee ( name , ssn ), m_title ( title ) { } \u6709\u4ec0\u4e48\u662f\u6ca1\u6709\u7ee7\u627f\u5f97\u5230\uff1a \u6784\u9020\u51fd\u6570\u6ca1\u6709\u88ab\u7ee7\u627f\uff0c\u4f46\u7236\u7c7b\u7684\u6784\u9020\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002\u6790\u6784\u540c\u7406\u3002 \u8d4b\u503c\u7684\u8fd0\u7b97\u7b26\u4e0d\u4f1a\u88ab\u7ee7\u627f\u3002 Inheritance Public: class Derived : public Base ... Protected: class Derived : protected Base ... Private: class Derived : private Base ... default Inheritance Type (B is) public protected private public A public in B protected in B hidden private A private in B private in B hidden protected A protected in B protected in B hidden private \u7ee7\u627f\uff1a\u79c1\u751f\u5b50\uff0c\u5916\u754c\u4e0d\u80fd\u77e5\u9053\u4ed6\u7684\u7236\u4eb2\u662f\u8c01\u3002\u5373 B \u7684\u7528\u6237\u4e0d\u80fd\u770b\u5230 A \u7684 public \u51fd\u6570\u3002\u5176\u5b9e\u662f\u4e00\u79cd\u7ec4\u5408\uff0c\u7236\u7c7b\u7684\u51fd\u6570\u3001\u53d8\u91cf\u53d8\u4e3a\u79c1\u6709\u3002 int main () { Employee p1 ( \"John\" ); Manager p2 ( \"Tom Jordan\" , ); p1 . print (); p2 . print (); p1 . print ( \"Welcome:\" ); //p2.print(\"Welcome:\"); \u62a5\u9519 Employee * p = & p1 ; p -> print (); p = & p2 ; p -> print (); // \u6309 Employee \u91cc\u9762\u7684\u51fd\u6570\u8f93\u51fa\uff0c\u800c\u4e0d\u662f Manager } \u8981\u8c03\u7528\u7236\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8981 Employee::print() . \u521d\u59cb\u5316\u5217\u8868\u662f\u5c5e\u4e8e body \u7684\uff0c\u8981\u548c {} \u4e00\u8d77\u3002 \u7236\u7c7b\u7684\u6784\u9020\u662f\u5728\u5b50\u7c7b\u7684\u6784\u9020\u4e4b\u524d\u3002 \u5b50\u7c7b\u91cd\u65b0\u5b9a\u4e49\u4e86\u7236\u7c7b\u7684\u67d0\u4e2a\u51fd\u6570\uff0c\u5c31\u4f1a\u628a\u5176\u4ed6 overloaded \u7684\u51fd\u6570\u8986\u76d6\u6389\uff08C++ \u72ec\u6709\uff0c\u65e0\u6cd5\u89e3\u91ca\uff09\uff0c\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, p2.print(\"welcome\") \u4f1a\u62a5\u9519\u3002 \u5982\u679c\u5728 Employee \u4e2d\u7684 print \u51fd\u6570\u52a0\u4e0a virtual , p->print() \u5c31\u4f1a\u8f93\u51fa\u3002","title":"Scopes and access in C++"},{"location":"OOP/oop7/","text":"Polymorphism \u00b6 Abstract Polymorphism virtual functions and override abstract functions and classes Multiple Inheritance Virtual function \u00b6 Subtyping \u00b6 Objects of subclasses can be used where objects of supertypes are required. (This is called substitution) Subclass object may be assigned to superclass pointr variables. Example Vehicle * v1 = new Vehicle (); Vehicle * v2 = new Car (); Vehicle * v3 = new Bicycle (); Conversions Public Inheritance should imply substitution If B isa A, you can use a B any where an A can be used. if B isa A, then everything that is true for A is also true of B. Be careful if the substitution is not valid! Given D is derived from B D -> B \u53ea\u628a D \u5185\u548c B \u76f8\u540c\u7684\u5730\u65b9\u8d4b\u503c\uff0c\u4e0d\u4f1a\u628a D \u7279\u6709\u7684\u4e1c\u897f\u8d4b\u503c\u3002 D* -> B* \u6362\u4e2a\u773c\u5149\u770b\u5f85\u5bf9\u8c61\uff0c\u5e76\u6ca1\u6709\u6539\u53d8\u5bf9\u8c61\u3002 D& -> B& Upcasting \u00b6 cast \u5728 OOP \u91cc\u53eb\u9020\u578b\uff0c\u4e0d\u518d\u662f\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u7684\u610f\u601d\u3002 Upcasting is the act of converting from a Derived reference or pointer to a base class reference or pointer. \u6211\u4eec\u662f\u5b66\u751f\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u53bb\u642c\u7816\uff0c\u5e76\u6ca1\u6709\u6539\u53d8\u6211\u4eec\u7684\u80fd\u529b\u3002\u4f46 \u5bf9\u4e8e int i = (int)6.25; \u8fd9\u91cc\u5fc5\u987b\u5f3a\u5236\u6539\u9020\uff0c\u5426\u5219\u65e0\u6cd5\u5b58\u8fdb\u8fd9\u4e2a\u503c, 6.25 \u4e5f\u88ab\u622a\u65ad\u4e3a 6. upcasting: \u5411\u4e0a\u9020\u578b\uff0c\u91cd\u65b0\u4e3a\u5bf9\u8c61\u60f3\u4e86\u4e00\u4e2a\u9020\u578b\uff0c\u4f46\u5e76\u6ca1\u6709\u6539\u53d8\u5bf9\u8c61\u7684\u503c\u3002\u56e0\u4e3a Manager \u4e2d\u4e00\u5b9a\u6709 Employee \u7684\u90e8\u5206\uff0c\u800c\u4e14\u4e00\u5b9a\u5728\u8fd9\u90e8\u5206\u7684\u6700\u4e0a\u65b9\u3002\u73b0\u5728\u6211\u4eec\u8ba4\u4e3a\u8fd9\u5757\u5730\u5740\u5b58\u653e\u7684\u662f Employee \u7684\u5bf9\u8c61\u3002 Example Manager pete ( \"Pete\" , \"444-55-6666\" , \"Bakery\" ); Employee * ep = & pete ; // Upcast Employee & er = pete ; // Upcast Lose type information about the object: ep -> print ( cout ); // prints base class version Example: A drawing program \u00b6 operations: render, resize, move . data: center . class XYPos {} class Shape { public : Shape (); virtual ~ Shape (); virtual void render (); void move ( const XYPos & ); virtual void resize (); protected : XYPos center ; } virtual \u5b9a\u4e49\u4e86\u865a\u51fd\u6570\uff0c\u610f\u5473\u7740\u5b50\u7c7b \u53ef\u80fd \u51fa\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u65b0\u7248\u672c\u3002\u544a\u8bc9\u7f16\u8bd1\u5668\u901a\u8fc7\u6307\u9488\u8bbf\u95ee\u8fd9\u4e2a\u51fd\u6570\u65f6\uff0c\u8981\u5982\u4f55\u7f16\u8bd1\u3002 class Ellipse : public Shape { public : Ellipse ( float maj , float minr ); virtual void render (); // will define own protected : float major_axis , minor_axis ; }; class Circle : public Ellipse { public : Circle ( float radius ) : Ellipse ( radius , radius ){} virtual void render (); }; void render ( Shape * p ) { p -> render (); // calls correct render function } // for given Shape! void func() { Ellipse ell ( 10 , 20 ); ell . render (); // static -- Ellipse::render(); Circle circ ( 40 ); circ . render (); // static -- Circle::render(); render ( & ell ); // dynamic -- Ellipse::render(); render ( & circ ); // dynamic -- Circle::render() \u6211\u4eec\u8ba4\u4e3a p \u8fd9\u4e2a\u6307\u9488\u662f\u4e00\u4e2a polymorphic variable \u591a\u6001\u53d8\u91cf\uff0c\u6709\u9759\u6001\uff08\u58f0\u660e\uff09\u7c7b\u578b Shape \u53c8\u6709\u52a8\u6001\u7c7b\u578b\u3002 Static and dynamic type \u00b6 The declared type of a variable is its static type. The type of the object a variable refers to is its dynamic type. The compiler\u02bcs job is to check for static-type violations. \u56e0\u6b64\u5728\u7f16\u8bd1\u65f6\uff0c\u5982\u679c\u6211\u4eec\u53bb\u6389 Shape() \u91cc\u7684 render \u51fd\u6570\uff0c\u7f16\u8bd1\u5c31\u4f1a\u62a5\u9519\u3002\u8fd9\u6837\u65e0\u6cd5\u901a\u8fc7\u9759\u6001\u68c0\u67e5\uff0c\u5c3d\u7ba1\u6211\u4eec\u77e5\u9053\u6211\u4eec\u5e76\u4e0d\u4f1a\u4f7f\u7528 Shape \u7684 render \u51fd\u6570\u3002 Polymorphism \u00b6 Upcast : take an object of the derived class as an object of the base one. e.g. Ellipse can be treated as a Shape Binding: which function to be called Static binding: call the function as the code Dynamic binding: call the function of the object virtual \u5173\u952e\u8bcd\u662f\u5728\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528\u52a8\u6001\u7ed1\u5b9a\u3002\u5426\u5219\u5373\u4f7f\u7528\u6307\u9488\uff0c\u4e5f\u662f\u9759\u6001\u7ed1\u5b9a\u3002 e.g. g(); Student a; a.f() \u662f\u9759\u6001; Student &a; a.f(); p->f(); \u4e0d\u4e00\u5b9a\u662f\u9759\u6001\u3002 call type free function static object.fun() static ref.func() static p->func() static ref.vfunc() dynamic p->vfunc() dynamic Virtual functions \u00b6 Can be transparently overridden in a derived class \u7236\u7c7b\u7684\u51fd\u6570\u5b9a\u4e49\u4e3a\u865a\u51fd\u6570\u540e\uff0c\u5b50\u7c7b\u4e0d\u9700\u8981\u518d\u5b9a\u4e49\u4e86\uff0c\u4f1a\u4f20\u9012\u4e0b\u53bb\u3002\uff08\uff1f Objects carry a pack of their virtual functions Compiler checks pack and dynamically calls the right function If compiler knows the function at compile-time, it can generate a static call Polymorphic variables Pointers or reference variables of objects are polymorphic variables They can hold objects of the declared type, or of subtypes of the declared type. \u53ea\u5199\u4e86\u4e00\u53e5\u4ee3\u7801\uff0c\u4f46\u5b9e\u9645\u6267\u884c\u4e2d\u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6267\u884c\u65b9\u5f0f\uff0c\u8fd9\u5c31\u662f\u591a\u6001\u3002 How virtuals work in C++ \u00b6 class A { int i ; void f () {} }; class B : public A { int j ; }; \u8fd9\u65f6 sizeof(A) == 4 \u4f46\u5982\u679c\u5c06 f \u58f0\u660e\u4e3a\u865a\u51fd\u6570, sizeof(A) \u5c31\u53d8\u4e3a 16. \u5982\u679c\u53bb\u6389 int i; \u540e sizeof(A) \u53d8\u4e3a 8. \u4e00\u65e6\u6709\u865a\u51fd\u6570\u58f0\u660e\uff0c\u8fd9\u91cc\u4f1a\u5728\u5f00\u5934\u653e\u4e00\u4e2a\u6307\u9488 VPTR , \u6307\u5411\u4e00\u4e2a\u8868\uff0c\u91cc\u9762\u653e\u7684\u662f\u51fd\u6570\u6307\u9488\u3002\uff08\u5bf9\u8c61\u91cc\u9762\u6ca1\u6709\u51fd\u6570\u6307\u9488\uff0c\u53ea\u653e\u8868\u7684\u6307\u9488\uff09 long long * vp = ( long long ** ) p ; void ( * pf ) () = ( void ( * )()) * ( * p ); pf (); \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u5bf9\u5e94\u7684\u865a\u51fd\u6570\u3002 Ellipse elly ( 20F , 40F ); Circle circ ( 60F ); elly = circ ; // 10 in 5? elly . render (); // Ellipse::render() \u8fd9\u91cc\u53ea\u4f1a\u628a circ \u5bf9\u5e94\u7684\u90e8\u5206\u8d4b\u503c\u7ed9 elly, \u4f46\u865a\u51fd\u6570\u7684 VPTR \u4e0d\u4f1a. VPTR \u53ea\u4f1a\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u7684\u65f6\u5019\u5bf9\u5176\u8fdb\u884c\u8d4b\u503c\u3002 Ellipse * elly = new Ellipse ( 20F , 40F ); Circle * circ = new Circle ( 60F ); elly = circ ; elly -> render (); // Circle::render() References act like pointers. Virtual destructors \u00b6 Shape * p = new Ellipse ( 100.0F , 200.0F ); ... delete p ; p \u7684\u9759\u6001\u7c7b\u578b\u662f Shape, \u5982\u679c\u4e0d\u5b9a\u4e49\u865a\u51fd\u6570\uff0c\u90a3\u4e48 p \u53ea\u4f1a\u53d1\u751f\u9759\u6001\u7ed1\u5b9a\uff0c\u5373\u8c03\u7528 Shape \u7684\u6790\u6784\u51fd\u6570\uff0c\u65e0\u6cd5\u8c03\u7528 Ellipse \u7684\u6790\u6784\u51fd\u6570\u3002 Overriding \u00b6 Overriding redefines the body of a virtual function. \u4ecd\u7136\u53ef\u4ee5\u5728\u5b50\u7c7b\u4e2d\u8c03\u7528\u7236\u7c7b\u7684\u88ab overide \u7684\u51fd\u6570\u3002 void Derived::func () { cout << \"In Derived::func!\" ; Base :: func (); // call to base class } class Base { public : virtual void func (); virtual void func ( int ); }; Return types relaxation Suppose D is publicly derived from B D::f() can return a subclass of the return type defined in B::f() Applies to pointer and reference types Relaxation Example class Expr { public : virtual Expr * newExpr (); virtual Expr & clone (); virtual Expr self (); } class BinaryExpr : public Expr { public : virtual BinaryExpr * newExpr (); // ok virtual BinaryExpr & clone (); // ok virtual BinaryExpr self (); // Error! } \u6307\u5411\u5b50\u7c7b\u7684\u5bf9\u8c61\u53ef\u4ee5\u88ab\u770b\u505a\u662f\u4e00\u4e2a\u6307\u5411\u7236\u7c7b\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u5b50\u7c7b\u7684\u5bf9\u8c61\u548c\u7236\u7c7b\u7684\u5bf9\u8c61\u662f\u4e0d\u540c\u7684\u3002 If you override an overloaded function, you must override all of the variants! Can't override just one If you don't override all, some will be hidden Tips Never redefine an inherited non-virtual function \u5b50\u7c7b\u4e0d\u8981\u91cd\u65b0\u5b9a\u4e49\u4e0d\u662f virtual \u7684\u51fd\u6570\uff0c\u8fd9\u6837\u65e0\u6cd5\u5f62\u6210 override \u7684\u5173\u7cfb\u3002 Non-virtuals are statically bound No dynamic dispatch! Never redefine an inherited default parameter value \u4e0d\u8981\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u7684\u9ed8\u8ba4\u53c2\u6570\u503c\u3002 They\u02bcre statically bound too! And what would it mean? Example class A { public : A () { f (); } virtual void f () { cout << \u201c A :: f () \u201d ; } }; class B : public A { public : B () { f (); } void f () { cout << \u201c B :: f () \u201d ; } }; B b ; // \u8f93\u51fa A...B... \u8fd9\u91cc\u4f1a\u53d1\u751f\u52a8\u6001\u7ed1\u5b9a\u3002\u4f46\u662f VPTR \u4f1a\u5728\u6784\u9020\u51fd\u6570\u7684 initialized list \u91cc\u521d\u59cb\u5316\u3002\u6211\u4eec\u4f1a\u6267\u884c A \u7684\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u4e2a\u65f6\u5019 VPTR \u662f A \u7684\uff0c\u56e0\u6b64\u4f1a\u8c03\u7528 A \u4e2d\u7684 f \u51fd\u6570\u3002\u7236\u7c7b\u7ed3\u675f\u540e\u56de\u5230 B \u7684\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u65f6\u628a VPTR \u6539\u5199\u4e3a\u6307\u5411 B \u7684\u8868\uff0c\u8fd9\u65f6\u7684\u52a8\u6001\u7ed1\u5b9a\u5c31\u53d8\u4e3a B \u7684 f \u51fd\u6570\u3002 Abstract classes \u00b6 \u6211\u4eec\u4e0d\u5e94\u8be5\u5236\u9020 Shape \u7684\u5bf9\u8c61\uff0c\u4ed6\u7684\u4f5c\u7528\u53ea\u5728\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\u548c\u516c\u5171\u63a5\u53e3\u3002 \u8fd9\u4e2a\u7c7b\u4e2d\u4e00\u65e6\u6709\u4e00\u4e2a\u865a\u51fd\u6570=0(\u7eaf\u865a\u51fd\u6570), \u90a3\u4e48\u8fd9\u4e2a\u7c7b\u5c31\u4e0d\u80fd\u88ab\u5236\u9020\u51fa\u5bf9\u8c61\uff0c\u8fd9\u6837\u7684\u7c7b\u53eb\u505a\u62bd\u8c61\u7c7b\u3002 Example class XYPos { ... }; // x,y point class Shape { public : Shape (); virtual void render () = 0 ; // mark render() pure void move ( const XYPos & ); virtual void resize (); protected : XYPos center ; }; An abstract base class has pure virtual functions Only interface defined No function body given Abstract base classes cannot be instantiated Must derive a new class (or classes) Must supply definitions for all pure virtuals before class can be instantiated Multiple Inheritance \u00b6 diamond inheritance. \u5b59\u5b50\u4f53\u5185\u6709\u4e24\u4e2a\u7237\u7237\u3002 Vanilla MI \u00b6 Members are duplicated Derived class has access to full copies of each base class This can be useful! Multiple links for lists Multiple streambufs for input and output class B1 { int m_i ; }; class D1 : public B1 {}; class D2 : public B1 {}; class M : public D1 , public D2 {}; void main () { Mm ; //OK B1 * p = new M ; // ERROR: which B1 B1 * p2 = dynamic_cast < D1 *> ( new M ); // OK } Protocol classes \u00b6 \u591a\u7ee7\u627f\uff1a\u53ea\u6709\u4e00\u4e2a\u7236\u7c7b\u6709\u6210\u5458\u53d8\u91cf\uff08\u51fd\u6570\u6ca1\u5173\u7cfb\uff09 Protocol classes \u534f\u8bae\u7c7b\uff0c\u91cc\u9762\u6ca1\u6709\u6210\u5458\u53d8\u91cf\uff08\u9664\u4e86 static, const\uff09\u53ea\u6709\u7eaf\u865a\u51fd\u6570\u3002\u8fd9\u6837\u7684\u7c7b\u53ef\u4ee5\u5b89\u5168\u5730\u505a\u591a\u7ee7\u627f\u3002 Abstract base class with All non-static member functions are pure virtual except destructor Virtual destructor with empty body No non-static member variables, inherited or otherwise may contain static members Using virtual base classes \u00b6 \u865a\u7ee7\u627f virtual public \u628a\u7236\u7c7b\u7684\u5bf9\u8c61\u62ff\u51fa\u6765\u653e\u5728\u5916\u9762\uff0c\u5b50\u7c7b\u6307\u9488\u6307\u5411\u5916\u9762\u7684\u7a7a\u95f4\u3002\u4ece\u4e24\u4e2a\u865a\u7ee7\u627f\u7684\u7c7b\u591a\u7ee7\u627f\uff0c\u8fd9\u65f6\u5176\u4e2d\u7684\u4e24\u4e2a\u7237\u7237\u7c7b\u53ef\u4ee5\u6307\u5411\u540c\u4e00\u4e2a\u5730\u65b9\u3002 class B1 { int m_i ; }; class D1 : virtual public B1 {}; class D2 : virtual public B1 {}; class M : public D1 , public D2 {}; void main () { M m ; //OK m . m_i ++ ; // OK, there is only one B1 in m. B1 * p = new M ; // OK } \u5efa\u8bae\uff1a\u5bf9\u591a\u7ee7\u627f say no.","title":"Polymorphism"},{"location":"OOP/oop7/#polymorphism","text":"Abstract Polymorphism virtual functions and override abstract functions and classes Multiple Inheritance","title":"Polymorphism"},{"location":"OOP/oop7/#virtual-function","text":"","title":"Virtual function"},{"location":"OOP/oop7/#subtyping","text":"Objects of subclasses can be used where objects of supertypes are required. (This is called substitution) Subclass object may be assigned to superclass pointr variables. Example Vehicle * v1 = new Vehicle (); Vehicle * v2 = new Car (); Vehicle * v3 = new Bicycle (); Conversions Public Inheritance should imply substitution If B isa A, you can use a B any where an A can be used. if B isa A, then everything that is true for A is also true of B. Be careful if the substitution is not valid! Given D is derived from B D -> B \u53ea\u628a D \u5185\u548c B \u76f8\u540c\u7684\u5730\u65b9\u8d4b\u503c\uff0c\u4e0d\u4f1a\u628a D \u7279\u6709\u7684\u4e1c\u897f\u8d4b\u503c\u3002 D* -> B* \u6362\u4e2a\u773c\u5149\u770b\u5f85\u5bf9\u8c61\uff0c\u5e76\u6ca1\u6709\u6539\u53d8\u5bf9\u8c61\u3002 D& -> B&","title":"Subtyping"},{"location":"OOP/oop7/#upcasting","text":"cast \u5728 OOP \u91cc\u53eb\u9020\u578b\uff0c\u4e0d\u518d\u662f\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u7684\u610f\u601d\u3002 Upcasting is the act of converting from a Derived reference or pointer to a base class reference or pointer. \u6211\u4eec\u662f\u5b66\u751f\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u53bb\u642c\u7816\uff0c\u5e76\u6ca1\u6709\u6539\u53d8\u6211\u4eec\u7684\u80fd\u529b\u3002\u4f46 \u5bf9\u4e8e int i = (int)6.25; \u8fd9\u91cc\u5fc5\u987b\u5f3a\u5236\u6539\u9020\uff0c\u5426\u5219\u65e0\u6cd5\u5b58\u8fdb\u8fd9\u4e2a\u503c, 6.25 \u4e5f\u88ab\u622a\u65ad\u4e3a 6. upcasting: \u5411\u4e0a\u9020\u578b\uff0c\u91cd\u65b0\u4e3a\u5bf9\u8c61\u60f3\u4e86\u4e00\u4e2a\u9020\u578b\uff0c\u4f46\u5e76\u6ca1\u6709\u6539\u53d8\u5bf9\u8c61\u7684\u503c\u3002\u56e0\u4e3a Manager \u4e2d\u4e00\u5b9a\u6709 Employee \u7684\u90e8\u5206\uff0c\u800c\u4e14\u4e00\u5b9a\u5728\u8fd9\u90e8\u5206\u7684\u6700\u4e0a\u65b9\u3002\u73b0\u5728\u6211\u4eec\u8ba4\u4e3a\u8fd9\u5757\u5730\u5740\u5b58\u653e\u7684\u662f Employee \u7684\u5bf9\u8c61\u3002 Example Manager pete ( \"Pete\" , \"444-55-6666\" , \"Bakery\" ); Employee * ep = & pete ; // Upcast Employee & er = pete ; // Upcast Lose type information about the object: ep -> print ( cout ); // prints base class version","title":"Upcasting"},{"location":"OOP/oop7/#example-a-drawing-program","text":"operations: render, resize, move . data: center . class XYPos {} class Shape { public : Shape (); virtual ~ Shape (); virtual void render (); void move ( const XYPos & ); virtual void resize (); protected : XYPos center ; } virtual \u5b9a\u4e49\u4e86\u865a\u51fd\u6570\uff0c\u610f\u5473\u7740\u5b50\u7c7b \u53ef\u80fd \u51fa\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u65b0\u7248\u672c\u3002\u544a\u8bc9\u7f16\u8bd1\u5668\u901a\u8fc7\u6307\u9488\u8bbf\u95ee\u8fd9\u4e2a\u51fd\u6570\u65f6\uff0c\u8981\u5982\u4f55\u7f16\u8bd1\u3002 class Ellipse : public Shape { public : Ellipse ( float maj , float minr ); virtual void render (); // will define own protected : float major_axis , minor_axis ; }; class Circle : public Ellipse { public : Circle ( float radius ) : Ellipse ( radius , radius ){} virtual void render (); }; void render ( Shape * p ) { p -> render (); // calls correct render function } // for given Shape! void func() { Ellipse ell ( 10 , 20 ); ell . render (); // static -- Ellipse::render(); Circle circ ( 40 ); circ . render (); // static -- Circle::render(); render ( & ell ); // dynamic -- Ellipse::render(); render ( & circ ); // dynamic -- Circle::render() \u6211\u4eec\u8ba4\u4e3a p \u8fd9\u4e2a\u6307\u9488\u662f\u4e00\u4e2a polymorphic variable \u591a\u6001\u53d8\u91cf\uff0c\u6709\u9759\u6001\uff08\u58f0\u660e\uff09\u7c7b\u578b Shape \u53c8\u6709\u52a8\u6001\u7c7b\u578b\u3002","title":"Example: A drawing program"},{"location":"OOP/oop7/#static-and-dynamic-type","text":"The declared type of a variable is its static type. The type of the object a variable refers to is its dynamic type. The compiler\u02bcs job is to check for static-type violations. \u56e0\u6b64\u5728\u7f16\u8bd1\u65f6\uff0c\u5982\u679c\u6211\u4eec\u53bb\u6389 Shape() \u91cc\u7684 render \u51fd\u6570\uff0c\u7f16\u8bd1\u5c31\u4f1a\u62a5\u9519\u3002\u8fd9\u6837\u65e0\u6cd5\u901a\u8fc7\u9759\u6001\u68c0\u67e5\uff0c\u5c3d\u7ba1\u6211\u4eec\u77e5\u9053\u6211\u4eec\u5e76\u4e0d\u4f1a\u4f7f\u7528 Shape \u7684 render \u51fd\u6570\u3002","title":"Static and dynamic type"},{"location":"OOP/oop7/#polymorphism_1","text":"Upcast : take an object of the derived class as an object of the base one. e.g. Ellipse can be treated as a Shape Binding: which function to be called Static binding: call the function as the code Dynamic binding: call the function of the object virtual \u5173\u952e\u8bcd\u662f\u5728\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528\u52a8\u6001\u7ed1\u5b9a\u3002\u5426\u5219\u5373\u4f7f\u7528\u6307\u9488\uff0c\u4e5f\u662f\u9759\u6001\u7ed1\u5b9a\u3002 e.g. g(); Student a; a.f() \u662f\u9759\u6001; Student &a; a.f(); p->f(); \u4e0d\u4e00\u5b9a\u662f\u9759\u6001\u3002 call type free function static object.fun() static ref.func() static p->func() static ref.vfunc() dynamic p->vfunc() dynamic","title":"Polymorphism"},{"location":"OOP/oop7/#virtual-functions","text":"Can be transparently overridden in a derived class \u7236\u7c7b\u7684\u51fd\u6570\u5b9a\u4e49\u4e3a\u865a\u51fd\u6570\u540e\uff0c\u5b50\u7c7b\u4e0d\u9700\u8981\u518d\u5b9a\u4e49\u4e86\uff0c\u4f1a\u4f20\u9012\u4e0b\u53bb\u3002\uff08\uff1f Objects carry a pack of their virtual functions Compiler checks pack and dynamically calls the right function If compiler knows the function at compile-time, it can generate a static call Polymorphic variables Pointers or reference variables of objects are polymorphic variables They can hold objects of the declared type, or of subtypes of the declared type. \u53ea\u5199\u4e86\u4e00\u53e5\u4ee3\u7801\uff0c\u4f46\u5b9e\u9645\u6267\u884c\u4e2d\u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6267\u884c\u65b9\u5f0f\uff0c\u8fd9\u5c31\u662f\u591a\u6001\u3002","title":"Virtual functions"},{"location":"OOP/oop7/#how-virtuals-work-in-c","text":"class A { int i ; void f () {} }; class B : public A { int j ; }; \u8fd9\u65f6 sizeof(A) == 4 \u4f46\u5982\u679c\u5c06 f \u58f0\u660e\u4e3a\u865a\u51fd\u6570, sizeof(A) \u5c31\u53d8\u4e3a 16. \u5982\u679c\u53bb\u6389 int i; \u540e sizeof(A) \u53d8\u4e3a 8. \u4e00\u65e6\u6709\u865a\u51fd\u6570\u58f0\u660e\uff0c\u8fd9\u91cc\u4f1a\u5728\u5f00\u5934\u653e\u4e00\u4e2a\u6307\u9488 VPTR , \u6307\u5411\u4e00\u4e2a\u8868\uff0c\u91cc\u9762\u653e\u7684\u662f\u51fd\u6570\u6307\u9488\u3002\uff08\u5bf9\u8c61\u91cc\u9762\u6ca1\u6709\u51fd\u6570\u6307\u9488\uff0c\u53ea\u653e\u8868\u7684\u6307\u9488\uff09 long long * vp = ( long long ** ) p ; void ( * pf ) () = ( void ( * )()) * ( * p ); pf (); \u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u5bf9\u5e94\u7684\u865a\u51fd\u6570\u3002 Ellipse elly ( 20F , 40F ); Circle circ ( 60F ); elly = circ ; // 10 in 5? elly . render (); // Ellipse::render() \u8fd9\u91cc\u53ea\u4f1a\u628a circ \u5bf9\u5e94\u7684\u90e8\u5206\u8d4b\u503c\u7ed9 elly, \u4f46\u865a\u51fd\u6570\u7684 VPTR \u4e0d\u4f1a. VPTR \u53ea\u4f1a\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u7684\u65f6\u5019\u5bf9\u5176\u8fdb\u884c\u8d4b\u503c\u3002 Ellipse * elly = new Ellipse ( 20F , 40F ); Circle * circ = new Circle ( 60F ); elly = circ ; elly -> render (); // Circle::render() References act like pointers.","title":"How virtuals work in C++"},{"location":"OOP/oop7/#virtual-destructors","text":"Shape * p = new Ellipse ( 100.0F , 200.0F ); ... delete p ; p \u7684\u9759\u6001\u7c7b\u578b\u662f Shape, \u5982\u679c\u4e0d\u5b9a\u4e49\u865a\u51fd\u6570\uff0c\u90a3\u4e48 p \u53ea\u4f1a\u53d1\u751f\u9759\u6001\u7ed1\u5b9a\uff0c\u5373\u8c03\u7528 Shape \u7684\u6790\u6784\u51fd\u6570\uff0c\u65e0\u6cd5\u8c03\u7528 Ellipse \u7684\u6790\u6784\u51fd\u6570\u3002","title":"Virtual destructors"},{"location":"OOP/oop7/#overriding","text":"Overriding redefines the body of a virtual function. \u4ecd\u7136\u53ef\u4ee5\u5728\u5b50\u7c7b\u4e2d\u8c03\u7528\u7236\u7c7b\u7684\u88ab overide \u7684\u51fd\u6570\u3002 void Derived::func () { cout << \"In Derived::func!\" ; Base :: func (); // call to base class } class Base { public : virtual void func (); virtual void func ( int ); }; Return types relaxation Suppose D is publicly derived from B D::f() can return a subclass of the return type defined in B::f() Applies to pointer and reference types Relaxation Example class Expr { public : virtual Expr * newExpr (); virtual Expr & clone (); virtual Expr self (); } class BinaryExpr : public Expr { public : virtual BinaryExpr * newExpr (); // ok virtual BinaryExpr & clone (); // ok virtual BinaryExpr self (); // Error! } \u6307\u5411\u5b50\u7c7b\u7684\u5bf9\u8c61\u53ef\u4ee5\u88ab\u770b\u505a\u662f\u4e00\u4e2a\u6307\u5411\u7236\u7c7b\u7684\u5bf9\u8c61\u3002\u4f46\u662f\u5b50\u7c7b\u7684\u5bf9\u8c61\u548c\u7236\u7c7b\u7684\u5bf9\u8c61\u662f\u4e0d\u540c\u7684\u3002 If you override an overloaded function, you must override all of the variants! Can't override just one If you don't override all, some will be hidden Tips Never redefine an inherited non-virtual function \u5b50\u7c7b\u4e0d\u8981\u91cd\u65b0\u5b9a\u4e49\u4e0d\u662f virtual \u7684\u51fd\u6570\uff0c\u8fd9\u6837\u65e0\u6cd5\u5f62\u6210 override \u7684\u5173\u7cfb\u3002 Non-virtuals are statically bound No dynamic dispatch! Never redefine an inherited default parameter value \u4e0d\u8981\u91cd\u65b0\u5b9a\u4e49\u7236\u7c7b\u7684\u9ed8\u8ba4\u53c2\u6570\u503c\u3002 They\u02bcre statically bound too! And what would it mean? Example class A { public : A () { f (); } virtual void f () { cout << \u201c A :: f () \u201d ; } }; class B : public A { public : B () { f (); } void f () { cout << \u201c B :: f () \u201d ; } }; B b ; // \u8f93\u51fa A...B... \u8fd9\u91cc\u4f1a\u53d1\u751f\u52a8\u6001\u7ed1\u5b9a\u3002\u4f46\u662f VPTR \u4f1a\u5728\u6784\u9020\u51fd\u6570\u7684 initialized list \u91cc\u521d\u59cb\u5316\u3002\u6211\u4eec\u4f1a\u6267\u884c A \u7684\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u4e2a\u65f6\u5019 VPTR \u662f A \u7684\uff0c\u56e0\u6b64\u4f1a\u8c03\u7528 A \u4e2d\u7684 f \u51fd\u6570\u3002\u7236\u7c7b\u7ed3\u675f\u540e\u56de\u5230 B \u7684\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u65f6\u628a VPTR \u6539\u5199\u4e3a\u6307\u5411 B \u7684\u8868\uff0c\u8fd9\u65f6\u7684\u52a8\u6001\u7ed1\u5b9a\u5c31\u53d8\u4e3a B \u7684 f \u51fd\u6570\u3002","title":"Overriding"},{"location":"OOP/oop7/#abstract-classes","text":"\u6211\u4eec\u4e0d\u5e94\u8be5\u5236\u9020 Shape \u7684\u5bf9\u8c61\uff0c\u4ed6\u7684\u4f5c\u7528\u53ea\u5728\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u62bd\u8c61\u7684\u6982\u5ff5\u548c\u516c\u5171\u63a5\u53e3\u3002 \u8fd9\u4e2a\u7c7b\u4e2d\u4e00\u65e6\u6709\u4e00\u4e2a\u865a\u51fd\u6570=0(\u7eaf\u865a\u51fd\u6570), \u90a3\u4e48\u8fd9\u4e2a\u7c7b\u5c31\u4e0d\u80fd\u88ab\u5236\u9020\u51fa\u5bf9\u8c61\uff0c\u8fd9\u6837\u7684\u7c7b\u53eb\u505a\u62bd\u8c61\u7c7b\u3002 Example class XYPos { ... }; // x,y point class Shape { public : Shape (); virtual void render () = 0 ; // mark render() pure void move ( const XYPos & ); virtual void resize (); protected : XYPos center ; }; An abstract base class has pure virtual functions Only interface defined No function body given Abstract base classes cannot be instantiated Must derive a new class (or classes) Must supply definitions for all pure virtuals before class can be instantiated","title":"Abstract classes"},{"location":"OOP/oop7/#multiple-inheritance","text":"diamond inheritance. \u5b59\u5b50\u4f53\u5185\u6709\u4e24\u4e2a\u7237\u7237\u3002","title":"Multiple Inheritance"},{"location":"OOP/oop7/#vanilla-mi","text":"Members are duplicated Derived class has access to full copies of each base class This can be useful! Multiple links for lists Multiple streambufs for input and output class B1 { int m_i ; }; class D1 : public B1 {}; class D2 : public B1 {}; class M : public D1 , public D2 {}; void main () { Mm ; //OK B1 * p = new M ; // ERROR: which B1 B1 * p2 = dynamic_cast < D1 *> ( new M ); // OK }","title":"Vanilla MI"},{"location":"OOP/oop7/#protocol-classes","text":"\u591a\u7ee7\u627f\uff1a\u53ea\u6709\u4e00\u4e2a\u7236\u7c7b\u6709\u6210\u5458\u53d8\u91cf\uff08\u51fd\u6570\u6ca1\u5173\u7cfb\uff09 Protocol classes \u534f\u8bae\u7c7b\uff0c\u91cc\u9762\u6ca1\u6709\u6210\u5458\u53d8\u91cf\uff08\u9664\u4e86 static, const\uff09\u53ea\u6709\u7eaf\u865a\u51fd\u6570\u3002\u8fd9\u6837\u7684\u7c7b\u53ef\u4ee5\u5b89\u5168\u5730\u505a\u591a\u7ee7\u627f\u3002 Abstract base class with All non-static member functions are pure virtual except destructor Virtual destructor with empty body No non-static member variables, inherited or otherwise may contain static members","title":"Protocol classes"},{"location":"OOP/oop7/#using-virtual-base-classes","text":"\u865a\u7ee7\u627f virtual public \u628a\u7236\u7c7b\u7684\u5bf9\u8c61\u62ff\u51fa\u6765\u653e\u5728\u5916\u9762\uff0c\u5b50\u7c7b\u6307\u9488\u6307\u5411\u5916\u9762\u7684\u7a7a\u95f4\u3002\u4ece\u4e24\u4e2a\u865a\u7ee7\u627f\u7684\u7c7b\u591a\u7ee7\u627f\uff0c\u8fd9\u65f6\u5176\u4e2d\u7684\u4e24\u4e2a\u7237\u7237\u7c7b\u53ef\u4ee5\u6307\u5411\u540c\u4e00\u4e2a\u5730\u65b9\u3002 class B1 { int m_i ; }; class D1 : virtual public B1 {}; class D2 : virtual public B1 {}; class M : public D1 , public D2 {}; void main () { M m ; //OK m . m_i ++ ; // OK, there is only one B1 in m. B1 * p = new M ; // OK } \u5efa\u8bae\uff1a\u5bf9\u591a\u7ee7\u627f say no.","title":"Using virtual base classes"},{"location":"OOP/oop8/","text":"Copy Constructor \u00b6 Copying \u00b6 Create a new object from an existing one. Copying is implemented by the copy constructor Has the unique signature T::T(const T&); C++ builds a copy ctor for you if you don't provide one! \u5982\u679c\u6ca1\u6709\u7ed9\u62f7\u8d1d\u6784\u9020, C++ \u4f1a\u81ea\u52a8\u521b\u9020\u4e00\u4e2a memberwise \u800c\u975e bitwise. \u5982\u679c\u6709\u6210\u5458\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f1a\u8c03\u7528\u5bf9\u8c61\u81ea\u5df1\u7684\u62f7\u8d1d\u51fd\u6570\u3002 \u5982\u679c\u6709\u6210\u5458\u53d8\u91cf\u662f\u6307\u9488\uff0c\u4f1a\u548c\u539f\u6765\u5bf9\u8c61\u4e00\u6837\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u3002\u5982\u679c\u6709\u4e00\u4e2a\u5bf9\u8c61\u88ab\u6790\u6784\uff0c\u90a3\u4e48\u8fd9\u5757\u5185\u5b58\u5c31\u88ab delete, \u8fd9\u5c31\u53d8\u6210\u4e86\u65e0\u6548\u5185\u5b58\u3002 \u56e0\u6b64\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u6709\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u6709\u6307\u9488\u65f6\u5fc5\u987b\u8981\u6709\u3002 Copies each member variable Good for numbers, objects, arrays Copies each pointer Data may become shared! \u4ec0\u4e48\u65f6\u5019\u62f7\u8d1d\u6784\u9020\u4f1a\u88ab\u8c03\u7528\uff1f During call by value \u53ea\u6709\u5bf9\u8c61\u672c\u8eab\u624d\u4f1a\u6709\u62f7\u8d1d\u6784\u9020\uff08\u6307\u9488\u3001\u5f15\u7528\u4e0d\u4f1a\uff09 During initialization \u5b9a\u4e49\u53d8\u91cf\u65f6\u505a\u7684\u662f\u521d\u59cb\u5316\uff0c\u5176\u4ed6\u65f6\u5019\u662f\u8d4b\u503c\u3002 \u521d\u59cb\u5316\u662f\u8981\u62f7\u8d1d\u6784\u9020\uff0c\u8d4b\u503c\u8981\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 Person baby_a ( \"Fred\" ); // these use the copy ctor Person baby_b = baby_a ; // not an assignment Person baby_c ( baby_a ); // not an assignment During function return \u4e0d\u540c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u505a\u4e0d\u540c\u7684\u4f18\u5316\u3002\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u62f7\u8d1d\u6784\u9020\u3002 \u4e00\u4e2a\u5bf9\u8c61\u53ea\u80fd\u88ab\u6784\u9020\uff08\u521d\u59cb\u5316\uff09\u4e00\u6b21\uff0c\u6790\u6784\u4e00\u6b21\uff0c\u4f46\u53ef\u4ee5\u88ab\u8d4b\u503c\u5f88\u591a\u6b21\u3002 string \u6709\u81ea\u5df1\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 Copy ctor guidelines In general, be explicit Create your own copy ctor -- don't rely on the default If you don't need one declare a private copy ctor \u79c1\u6709\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f7f\u5f97\u5bf9\u8c61\u4e0d\u80fd\u88ab\u62f7\u8d1d\u6784\u9020\u3002 prevents creation of a default copy constructor generates a compiler error if try to pass-by-value - don't need a defintion types of function parameters and return value \u00b6 way in a new object is to be created in f void f(Student i); better with const if no intend to modify the object void f(Student *p); better with const if no intend to modify the object void f(Student& i); way out a new object is to be created at returning Student f(); what should it points to? Student* f(); what should it refers to? Student& f(); char * foo () { char * p ; p = new char [ 10 ]; strcpy ( p , \"something\" ); return p ; } void bar () { char * p = foo (); printf ( \"%s\" , p ); delete p ; } p \u672c\u8eab\u662f\u672c\u5730\u53d8\u91cf\uff0c\u4f46\u6307\u5411\u7684\u5730\u65b9\u662f\u5168\u5c40\u7684\u7a7a\u95f4\u3002 Note Pass in an object if you want to store it \u51fd\u6570\u8981\u5b58\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u7528\u7528\u6307\u9488\u6216\u8005\u5f15\u7528\u4f20\u5165\uff0c\u800c\u662f\u76f4\u63a5\u4f20\u5165\u3002 Pass in a const pointer or reference if you want to get the values Pass in a pointer or reference if you want to do something to it Pass out an object if you create it in the function \u5982\u679c\u521b\u5efa\u4e86\u65b0\u7684\u5bf9\u8c61\uff0c\u5c31\u8981\u4f20\u5bf9\u8c61\u51fa\u53bb\u3002 Pass out pointer or reference of the passed in only \u4f20\u51fa\u53bb\u7684\u6307\u9488/\u5f15\u7528\u53ea\u80fd\u662f\u4f20\u5165\u7684\u6307\u9488/\u5f15\u7528\u3002 Never new something and return the pointer \u5728\u54ea\u91cc new \u5c31\u5728\u54ea\u91cc delete .(\u7c7b\u5185\u662f\u53ef\u4ee5\u7684\uff0c\u6bd4\u5982\u5728\u6784\u9020\u7684 new \u5728\u6790\u6784\u7684\u65f6\u5019 delete ) Move Constructor \u00b6 Left Value vs Right Value \u00b6 \u53ef\u4ee5\u7b80\u5355\u5730\u8ba4\u4e3a\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u5de6\u8fb9\u7684\u90fd\u662f\u5de6\u503c\uff1a \u53d8\u91cf\u672c\u8eab\u3001\u5f15\u7528 * \u3001 [] \u8fd0\u7b97\u7684\u7ed3\u679c \u53ea\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u53f3\u8fb9\u7684\u90fd\u662f\u53f3\u503c \u5b57\u2faf\u91cf \u8868\u8fbe\u5f0f \u8c03\u7528\u53ea\u80fd\u63a5\u53d7\u5de6\u503c\u2014>\u5f15\u7528\u662f\u5de6\u503c\u7684\u522b\u540d \u8c03\u7528\u51fd\u6570\u65f6\u7684\u4f20\u53c2\u76f8\u5f53\u4e8e\u53c2\u6570\u53d8\u91cf\u5728\u8c03\u7528\u65f6\u7684\u521d\u59cb\u5316 && \u6210\u4e3a\u53f3\u503c\u5f15\u7528\u3002 int x = 20 ; // \u5de6\u503c int && rx = x * 2 ; // x*2\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u53f3\u503c\uff0crx\u5ef6\u957f\u5176\u2f63\u547d\u5468\u671f int y = rx + 2 ; // \u56e0\u6b64\u4f60\u53ef\u4ee5\u91cd\u7528\u5b83:42 rx = 100 ; // \u4e00\u65e6\u4f60\u521d\u59cb\u5316\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u5de6\u503c\uff0c\u53ef\u4ee5\u88ab\u8d4b\u503c int && rrx1 = x ; // \u975e\u6cd5:\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u88ab\u5de6\u503c\u521d\u59cb\u5316 const int && rrx2 = x ; // \u975e\u6cd5:\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u88ab\u5de6\u503c\u521d\u59cb\u5316 x \u4e0d\u5b58\u5728\u4e86\uff0c\u53f3\u503c\u5f15\u7528\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u3002\u6ce8\u610f\u53f3\u503c\u5f15\u7528\u672c\u8eab\u662f\u4e2a\u5de6\u503c\u3002 int x = 10 ; int && a = x + 2 ; int y = a + 2 ; cout << y << endl ; x = 5 ; cout << y << endl ; a = 40 ; cout << y << endl ; cout << a << endl ; int && b = x ; // ERR: \u53f3\u503c\u5f15\u7528\u4e0d\u80fd\u7ed1\u5de6\u503c\uff08\u4e3a\u4e86\u533a\u5206 int && b = x + 0 ; // ok \u5982\u679c\u51fd\u6570\u8fd4\u56de\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53f3\u503c\u5f15\u7528\uff0c\u907f\u514d\u62f7\u8d1d\u6784\u9020\u3002 void fun ( int & lref ) { cout << \"l-value\" << endl ; } void fun ( int && rref ) { cout << \"r-value\" << endl ; } int main () { int x = 10 ; fun ( x ); // l value fun ( 10 ); // r value } \u6ca1\u6709\u63a5\u53d7\u53f3\u503c\u7684\u51fd\u6570\u65f6\u8fd9\u6837\u7684\u51fd\u6570\u4e5f\u80fd\u63a5\u53d7\u53f3\u503c void fun ( const int & clref ) { cout << \"l-value const reference \\n \" ; } Move Constructor \u00b6 \u79fb\u52a8\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1a\u53c2\u6570\u4e3a\u53f3\u503c\u5f15\u7528\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c\u6709\u4e00\u4e2a\u5bf9\u8c61\uff0c\u91cc\u9762\u6709\u6307\u9488\u6307\u5411\u4e00\u5757\u5185\u5b58\u3002\u62f7\u8d1d\u6784\u9020\u5c31\u662f\u91cd\u65b0\u7533\u8bf7\u4e00\u5757\u5185\u5b58\u5e76\u5c06\u539f\u5185\u5b58\u7684\u6570\u636e\u62f7\u8d1d\u8fc7\u6765\u3002\u800c\u79fb\u52a8\u6784\u9020\u5c31\u662f\u8ba9\u65b0\u5bf9\u8c61\u7684\u6307\u9488\u6307\u5411\u5185\u5b58\uff0c\u4f46\u539f\u6307\u9488\u4e0d\u518d\u6307\u5411\u8fd9\u4e2a\u5185\u5b58( nullptr ). DynamicArray ( DynamicArray && rhs ) : m_size { rhs . m_size }, m_array { rhs . m_array } { rhs . m_size = 0 ; rhs . m_array = nullptr ; cout << \"Move constructor: dynamic array is moved! \\n \" ; } \u4ec0\u4e48\u65f6\u5019\u9700\u8981\u79fb\u52a8\u6784\u9020\uff1f \u7c7b\u5185\u6709\u6307\u9488\uff0c\u800c\u4e14\u5bf9\u8c61\u4f1a\u5728\u51fd\u6570\u5185\u4f20\u8fdb\u4f20\u51fa\u3002 std::move() vector < int > v1 { 1 , 2 , 3 , 4 }; vector < int > v2 = v1 ; vector < int > v3 = std :: move ( v1 ); // \u6b64\u65f6\u8c03\u7528\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570 \u6b64\u65f6\u8c03\u7528\u590d\u5236\u6784\u9020\u51fd\u6570\uff0cv2\u662fv1\u7684\u526f\u672c \u901a\u8fc7 std::move \u5c06 v1 \u8f6c\u5316\u4e3a\u53f3\u503c\uff0c\u4ece\u2f7d\u6fc0\u53d1 v3 \u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u5b9e\u73b0\u79fb\u52a8\u8bed\u4e49 * \u5bf9\u8c61\u521d\u59cb\u5316\u7684\u5f62\u5f0f //\u5c0f\u62ec\u53f7\u521d\u59cb\u5316 string str ( \"hello\" ); //\u7b49\u53f7\u521d\u59cb\u5316 string str = \"hello\" ; //\u5927\u62ec\u53f7\u521d\u59cb\u5316 struct Studnet { char * name ; int age ; }; Studnet s = { \"dablelv\" , 18 }; //Plain of Data\u7c7b\u578b\u5bf9\u8c61 Studnet sArr [] = {{ \"dablelv\" , 18 }, { \"tommy\" , 19 }}; //POD\u6570\u7ec4 * \u5217\u8868\u521d\u59cb\u5316\u7684\u5f62\u5f0f class Test { int a ; int b ; public : Test ( int i , int j ); }; Test t { 0 , 0 }; //C++11 only\uff0c\u76f8\u5f53\u4e8e Test t(0,0); Test * pT = new Test { 1 , 2 }; //C++11 only\uff0c\u76f8\u5f53\u4e8e Test* pT=new Test(1,2); int * a = new int [ 3 ]{ 1 , 2 , 0 }; //C++11 only Delegating Ctor","title":"Copy Ctor"},{"location":"OOP/oop8/#copy-constructor","text":"","title":"Copy Constructor"},{"location":"OOP/oop8/#copying","text":"Create a new object from an existing one. Copying is implemented by the copy constructor Has the unique signature T::T(const T&); C++ builds a copy ctor for you if you don't provide one! \u5982\u679c\u6ca1\u6709\u7ed9\u62f7\u8d1d\u6784\u9020, C++ \u4f1a\u81ea\u52a8\u521b\u9020\u4e00\u4e2a memberwise \u800c\u975e bitwise. \u5982\u679c\u6709\u6210\u5458\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f1a\u8c03\u7528\u5bf9\u8c61\u81ea\u5df1\u7684\u62f7\u8d1d\u51fd\u6570\u3002 \u5982\u679c\u6709\u6210\u5458\u53d8\u91cf\u662f\u6307\u9488\uff0c\u4f1a\u548c\u539f\u6765\u5bf9\u8c61\u4e00\u6837\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\u3002\u5982\u679c\u6709\u4e00\u4e2a\u5bf9\u8c61\u88ab\u6790\u6784\uff0c\u90a3\u4e48\u8fd9\u5757\u5185\u5b58\u5c31\u88ab delete, \u8fd9\u5c31\u53d8\u6210\u4e86\u65e0\u6548\u5185\u5b58\u3002 \u56e0\u6b64\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u6709\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u6709\u6307\u9488\u65f6\u5fc5\u987b\u8981\u6709\u3002 Copies each member variable Good for numbers, objects, arrays Copies each pointer Data may become shared! \u4ec0\u4e48\u65f6\u5019\u62f7\u8d1d\u6784\u9020\u4f1a\u88ab\u8c03\u7528\uff1f During call by value \u53ea\u6709\u5bf9\u8c61\u672c\u8eab\u624d\u4f1a\u6709\u62f7\u8d1d\u6784\u9020\uff08\u6307\u9488\u3001\u5f15\u7528\u4e0d\u4f1a\uff09 During initialization \u5b9a\u4e49\u53d8\u91cf\u65f6\u505a\u7684\u662f\u521d\u59cb\u5316\uff0c\u5176\u4ed6\u65f6\u5019\u662f\u8d4b\u503c\u3002 \u521d\u59cb\u5316\u662f\u8981\u62f7\u8d1d\u6784\u9020\uff0c\u8d4b\u503c\u8981\u91cd\u8f7d\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 Person baby_a ( \"Fred\" ); // these use the copy ctor Person baby_b = baby_a ; // not an assignment Person baby_c ( baby_a ); // not an assignment During function return \u4e0d\u540c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u505a\u4e0d\u540c\u7684\u4f18\u5316\u3002\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u62f7\u8d1d\u6784\u9020\u3002 \u4e00\u4e2a\u5bf9\u8c61\u53ea\u80fd\u88ab\u6784\u9020\uff08\u521d\u59cb\u5316\uff09\u4e00\u6b21\uff0c\u6790\u6784\u4e00\u6b21\uff0c\u4f46\u53ef\u4ee5\u88ab\u8d4b\u503c\u5f88\u591a\u6b21\u3002 string \u6709\u81ea\u5df1\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 Copy ctor guidelines In general, be explicit Create your own copy ctor -- don't rely on the default If you don't need one declare a private copy ctor \u79c1\u6709\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f7f\u5f97\u5bf9\u8c61\u4e0d\u80fd\u88ab\u62f7\u8d1d\u6784\u9020\u3002 prevents creation of a default copy constructor generates a compiler error if try to pass-by-value - don't need a defintion","title":"Copying"},{"location":"OOP/oop8/#types-of-function-parameters-and-return-value","text":"way in a new object is to be created in f void f(Student i); better with const if no intend to modify the object void f(Student *p); better with const if no intend to modify the object void f(Student& i); way out a new object is to be created at returning Student f(); what should it points to? Student* f(); what should it refers to? Student& f(); char * foo () { char * p ; p = new char [ 10 ]; strcpy ( p , \"something\" ); return p ; } void bar () { char * p = foo (); printf ( \"%s\" , p ); delete p ; } p \u672c\u8eab\u662f\u672c\u5730\u53d8\u91cf\uff0c\u4f46\u6307\u5411\u7684\u5730\u65b9\u662f\u5168\u5c40\u7684\u7a7a\u95f4\u3002 Note Pass in an object if you want to store it \u51fd\u6570\u8981\u5b58\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u7528\u7528\u6307\u9488\u6216\u8005\u5f15\u7528\u4f20\u5165\uff0c\u800c\u662f\u76f4\u63a5\u4f20\u5165\u3002 Pass in a const pointer or reference if you want to get the values Pass in a pointer or reference if you want to do something to it Pass out an object if you create it in the function \u5982\u679c\u521b\u5efa\u4e86\u65b0\u7684\u5bf9\u8c61\uff0c\u5c31\u8981\u4f20\u5bf9\u8c61\u51fa\u53bb\u3002 Pass out pointer or reference of the passed in only \u4f20\u51fa\u53bb\u7684\u6307\u9488/\u5f15\u7528\u53ea\u80fd\u662f\u4f20\u5165\u7684\u6307\u9488/\u5f15\u7528\u3002 Never new something and return the pointer \u5728\u54ea\u91cc new \u5c31\u5728\u54ea\u91cc delete .(\u7c7b\u5185\u662f\u53ef\u4ee5\u7684\uff0c\u6bd4\u5982\u5728\u6784\u9020\u7684 new \u5728\u6790\u6784\u7684\u65f6\u5019 delete )","title":"types of function parameters and return value"},{"location":"OOP/oop8/#move-constructor","text":"","title":"Move Constructor"},{"location":"OOP/oop8/#left-value-vs-right-value","text":"\u53ef\u4ee5\u7b80\u5355\u5730\u8ba4\u4e3a\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u5de6\u8fb9\u7684\u90fd\u662f\u5de6\u503c\uff1a \u53d8\u91cf\u672c\u8eab\u3001\u5f15\u7528 * \u3001 [] \u8fd0\u7b97\u7684\u7ed3\u679c \u53ea\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u53f3\u8fb9\u7684\u90fd\u662f\u53f3\u503c \u5b57\u2faf\u91cf \u8868\u8fbe\u5f0f \u8c03\u7528\u53ea\u80fd\u63a5\u53d7\u5de6\u503c\u2014>\u5f15\u7528\u662f\u5de6\u503c\u7684\u522b\u540d \u8c03\u7528\u51fd\u6570\u65f6\u7684\u4f20\u53c2\u76f8\u5f53\u4e8e\u53c2\u6570\u53d8\u91cf\u5728\u8c03\u7528\u65f6\u7684\u521d\u59cb\u5316 && \u6210\u4e3a\u53f3\u503c\u5f15\u7528\u3002 int x = 20 ; // \u5de6\u503c int && rx = x * 2 ; // x*2\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u53f3\u503c\uff0crx\u5ef6\u957f\u5176\u2f63\u547d\u5468\u671f int y = rx + 2 ; // \u56e0\u6b64\u4f60\u53ef\u4ee5\u91cd\u7528\u5b83:42 rx = 100 ; // \u4e00\u65e6\u4f60\u521d\u59cb\u5316\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u5de6\u503c\uff0c\u53ef\u4ee5\u88ab\u8d4b\u503c int && rrx1 = x ; // \u975e\u6cd5:\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u88ab\u5de6\u503c\u521d\u59cb\u5316 const int && rrx2 = x ; // \u975e\u6cd5:\u53f3\u503c\u5f15\u7528\u65e0\u6cd5\u88ab\u5de6\u503c\u521d\u59cb\u5316 x \u4e0d\u5b58\u5728\u4e86\uff0c\u53f3\u503c\u5f15\u7528\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u3002\u6ce8\u610f\u53f3\u503c\u5f15\u7528\u672c\u8eab\u662f\u4e2a\u5de6\u503c\u3002 int x = 10 ; int && a = x + 2 ; int y = a + 2 ; cout << y << endl ; x = 5 ; cout << y << endl ; a = 40 ; cout << y << endl ; cout << a << endl ; int && b = x ; // ERR: \u53f3\u503c\u5f15\u7528\u4e0d\u80fd\u7ed1\u5de6\u503c\uff08\u4e3a\u4e86\u533a\u5206 int && b = x + 0 ; // ok \u5982\u679c\u51fd\u6570\u8fd4\u56de\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53f3\u503c\u5f15\u7528\uff0c\u907f\u514d\u62f7\u8d1d\u6784\u9020\u3002 void fun ( int & lref ) { cout << \"l-value\" << endl ; } void fun ( int && rref ) { cout << \"r-value\" << endl ; } int main () { int x = 10 ; fun ( x ); // l value fun ( 10 ); // r value } \u6ca1\u6709\u63a5\u53d7\u53f3\u503c\u7684\u51fd\u6570\u65f6\u8fd9\u6837\u7684\u51fd\u6570\u4e5f\u80fd\u63a5\u53d7\u53f3\u503c void fun ( const int & clref ) { cout << \"l-value const reference \\n \" ; }","title":"Left Value vs Right Value"},{"location":"OOP/oop8/#move-constructor_1","text":"\u79fb\u52a8\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1a\u53c2\u6570\u4e3a\u53f3\u503c\u5f15\u7528\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 \u5982\u679c\u6709\u4e00\u4e2a\u5bf9\u8c61\uff0c\u91cc\u9762\u6709\u6307\u9488\u6307\u5411\u4e00\u5757\u5185\u5b58\u3002\u62f7\u8d1d\u6784\u9020\u5c31\u662f\u91cd\u65b0\u7533\u8bf7\u4e00\u5757\u5185\u5b58\u5e76\u5c06\u539f\u5185\u5b58\u7684\u6570\u636e\u62f7\u8d1d\u8fc7\u6765\u3002\u800c\u79fb\u52a8\u6784\u9020\u5c31\u662f\u8ba9\u65b0\u5bf9\u8c61\u7684\u6307\u9488\u6307\u5411\u5185\u5b58\uff0c\u4f46\u539f\u6307\u9488\u4e0d\u518d\u6307\u5411\u8fd9\u4e2a\u5185\u5b58( nullptr ). DynamicArray ( DynamicArray && rhs ) : m_size { rhs . m_size }, m_array { rhs . m_array } { rhs . m_size = 0 ; rhs . m_array = nullptr ; cout << \"Move constructor: dynamic array is moved! \\n \" ; } \u4ec0\u4e48\u65f6\u5019\u9700\u8981\u79fb\u52a8\u6784\u9020\uff1f \u7c7b\u5185\u6709\u6307\u9488\uff0c\u800c\u4e14\u5bf9\u8c61\u4f1a\u5728\u51fd\u6570\u5185\u4f20\u8fdb\u4f20\u51fa\u3002 std::move() vector < int > v1 { 1 , 2 , 3 , 4 }; vector < int > v2 = v1 ; vector < int > v3 = std :: move ( v1 ); // \u6b64\u65f6\u8c03\u7528\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570 \u6b64\u65f6\u8c03\u7528\u590d\u5236\u6784\u9020\u51fd\u6570\uff0cv2\u662fv1\u7684\u526f\u672c \u901a\u8fc7 std::move \u5c06 v1 \u8f6c\u5316\u4e3a\u53f3\u503c\uff0c\u4ece\u2f7d\u6fc0\u53d1 v3 \u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u5b9e\u73b0\u79fb\u52a8\u8bed\u4e49 * \u5bf9\u8c61\u521d\u59cb\u5316\u7684\u5f62\u5f0f //\u5c0f\u62ec\u53f7\u521d\u59cb\u5316 string str ( \"hello\" ); //\u7b49\u53f7\u521d\u59cb\u5316 string str = \"hello\" ; //\u5927\u62ec\u53f7\u521d\u59cb\u5316 struct Studnet { char * name ; int age ; }; Studnet s = { \"dablelv\" , 18 }; //Plain of Data\u7c7b\u578b\u5bf9\u8c61 Studnet sArr [] = {{ \"dablelv\" , 18 }, { \"tommy\" , 19 }}; //POD\u6570\u7ec4 * \u5217\u8868\u521d\u59cb\u5316\u7684\u5f62\u5f0f class Test { int a ; int b ; public : Test ( int i , int j ); }; Test t { 0 , 0 }; //C++11 only\uff0c\u76f8\u5f53\u4e8e Test t(0,0); Test * pT = new Test { 1 , 2 }; //C++11 only\uff0c\u76f8\u5f53\u4e8e Test* pT=new Test(1,2); int * a = new int [ 3 ]{ 1 , 2 , 0 }; //C++11 only Delegating Ctor","title":"Move Constructor"},{"location":"OOP/oop9/","text":"Overloaded operators \u00b6 \u53ef\u4ee5\u8ba9\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u50cf\u539f\u751f\u7c7b\u578b\u4e00\u6837\u5177\u6709\u8fd0\u7b97\u7684\u80fd\u529b\u3002 Allows user-defined types to act like built in types. Another way of function call \u53ef\u4ee5\u88ab\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26 \u4e0d\u80fd\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26 . .* :: ?: sizeof typeid static_cast dynamic_cast const_cast reinterpret_cast a+b \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 a \u7684\u7c7b\u578b (receiver) \u6765\u51b3\u5b9a\u6211\u4eec\u7684\u8fd0\u7b97\u7b26\uff0c\u4f46 a>b?a:b \u6ca1\u6709 receiver. typeid \u83b7\u53d6\u7c7b\u7684\u65b9\u5f0f\u3002\u53ef\u4ee5\u7528 VPTR \u8868\u793a\uff08\u5982\u679c\u6709\u865a\u51fd\u6570\uff09 Restrictions Only existing operators can be overloaded. \u4e0d\u80fd\u91cd\u8f7d\u4e0d\u5b58\u5728\u7684\u8fd0\u7b97\u7b26\uff0c\u5982 Python \u7684 ** \u4f46\u91cd\u8f7d\u65f6\u53ef\u4ee5\u6beb\u65e0\u987e\u5fcc\u8fd0\u7b97\u7b26\u539f\u6765\u7684\u8bed\u4e49\uff08\u5982\u91cd\u8f7d + , \u4f46\u5b9e\u9645\u4e0a\u662f\u505a\u51cf\u6cd5\uff09 Operators must be overloaded on a class or enumeration type Overloaded operators must Preserve number of operands \u5982\u5bf9\u4e8e\u9664\u6cd5 / , \u5b83\u91cd\u8f7d\u65f6\u5fc5\u987b\u4e5f\u662f\u53cc\u76ee\u7684\u3002 Preserve precedence \u4f18\u5148\u7ea7\u548c\u7ed3\u5408\u5f8b\u662f\u4e0d\u53d8\u7684 C++ overloaded operator \u00b6 Just a function with an operator name. \u4f7f\u7528 operator \u5173\u952e\u5b57\u4f5c\u4e3a\u524d\u7f00\uff0c\u540e\u9762\u8ddf\u4e0a\u8fd0\u7b97\u7b26\u3002 operator *(...) Can be a member function Implicit first argument const String String::operator + (const String &that) Can be a global(free) function Both arguments explicit \u8fd9\u4e24\u79cd\u5199\u6cd5\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u3002 How to overload \u00b6 As a member function Implicit first argument No type conversion performed on reveiver class A { public : A ( int ii ) : i ( ii ){} int get () { return i ;} /* \u8fd4\u56de\u7684\u4e00\u5b9a\u662f A \u7684\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61 */ const A operator + ( const A & that ) const { A c ( this -> i + that . i ); /* \u8fd9\u91cc\u53ef\u4ee5\u8bbf\u95ee that. \u79c1\u6709\u662f\u9488\u5bf9\u7c7b\u7684\uff0c\u4e0d\u662f\u9488\u5bf9\u5bf9\u8c61\u7684\u3002 */ return c ; } private : int i ; } int main () { A a = 6 ; A b = 7 ; A c = a + b ; /* a + 9 \u4e5f\u662f\u53ef\u4ee5\u7684\uff1b\u4f46 9 + a \u4e0d\u884c */ cout << c . get () << endl ; /* \u8f93\u51fa 13 */ } \u8fd9\u91cc\u6211\u4eec\u4e0d\u5e0c\u671b\u8fd4\u56de\u7684\u5bf9\u8c61\u88ab\u4fee\u6539\uff0c\u5426\u5219\u53ef\u80fd\u51fa\u73b0 (a+b) = a \u7684\u60c5\u51b5\u3002 \u5982\u679c c = a + 9 \u7f16\u8bd1\u5668\u4f1a\u7528 9 \u5e2e\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\u3002 \u4e8c\u5143\u8fd0\u7b97\u7b26\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u5143\u8fd0\u7b97\u7b26\u4e0d\u9700\u8981\u53c2\u6570\u3002 e.g. -a, +a, *p, !a, ~b As a global function Explicit first argument Developer does not need special access to classes May need to be a friend const A operator - ( const A & r , const A & l ) { A c ( r . i - l . i ); return c ; } \u8fd9\u91cc\u5168\u5c40\u51fd\u6570\u662f\u4e0d\u80fd\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\u7684\u3002\u56e0\u6b64\u8981 friend const A operator - (const A&r, const A&l) \u58f0\u660e\u53cb\u5143\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u5199 A c = 9-b; \u4f46 A c = 9-7; \u4e0d\u4f1a\u91cd\u8f7d\u3002 Members vs. Free Functions Unary operators should be members. assignment = () [] -> ->* must be memebers; All other binary operators as non-members. Argument Passing \u00b6 if it is read-only pass it in as a const reference (except built-ins) make member functions const that don't change the class (boolean operators, +, -, etc) for global functions, if the left-hand side changes pass as a reference (assignment operators) Select the return type depending on the expected meaning of the operator. \u5982\u52a0\u51cf\u4e58\u9664\u53ea\u80fd\u4f5c\u4e3a\u53f3\u503c\uff0c\u56e0\u6b64\u8981 const. \u800c [] \u53ef\u4ee5\u4f5c\u4e3a\u5de6\u503c\uff0c\u5c31\u4e0d\u80fd const. The prototypes of operator + - * / % ^ & | ~ const T operator X(const T&l, const T&r); \u8fd9\u91cc\u8fd4\u56de\u7684\u5fc5\u987b\u662f\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u3002\u5982\u679c\u8fd9\u91cc\u8fd4\u56de\u5f15\u7528\uff0c\u90a3\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5168\u5c40\u7684\u5730\u5740\uff0c\u4f46\u51fd\u6570\u53ea\u6709\u672c\u5730\u7a7a\u95f4\u3002 ! && || < <= == >= > bool operator X(const T&l, const T&r); [] \u8fd4\u56de\u7684\u662f\u5de6\u503c\uff08\u4e0d\u80fd\u4e3a const\uff09\uff0c\u800c\u4e14\u4e0d\u80fd\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff08\u5426\u5219 a[6]=7 \u6267\u884c\u540e\u5c31\u88ab\u4e22\u6389\u4e86\uff09 E& T::operator[](int index); class Integer { public : ... const Integer & operator ++ (); //prefix++ const Integer operator ++ ( int ); //postfix++ const Integer & operator -- (); //prefix-- const Integer operator -- ( int ); //postfix-- ... }; // const Integer & Integer :: operator ++ () { * this += 1 ; // increment return * this ; // fetch } // int argument not used so leave unnamed so // won't get compiler warnings const Integer Integer :: operator ++ ( int ){ Integer old ( * this ); // fetch ++ ( * this ); // increment \u8c03\u7528\u4e86\u521a\u521a\u7684\u51fd\u6570 return old ; // return \u7b2c\u4e00\u4e2a\u662f\u524d\u7f00 ++a , \u7b2c\u4e8c\u4e2a\u662f\u540e\u7f00 a++ . \u8981 overload += \u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199 i++ \u540e\u8fd4\u56de *this , \u8282\u7701\u5f00\u9500\uff0c\u4e0d\u7528\u65b0\u5efa\u5bf9\u8c61\u3002 ++ x ; // calls x.operator++(); x ++ ; // calls x.operator++(0); -- x ; // calls x.operator--(); x -- ; // calls x.operator--(0); Relational operators class Integer { public : ... bool operator == ( const Integer & rhs ) const ; bool operator != ( const Integer & rhs ) const ; bool operator < ( const Integer & rhs ) const ; bool operator > ( const Integer & rhs ) const ; bool operator <= ( const Integer & rhs ) const ; bool operator >= ( const Integer & rhs ) const ; } bool Integer :: operator == ( const Integer & rhs ) const { return i == rhs . i ; } // implement lhs != rhs in terms of !(lhs == rhs) bool Integer :: operator != ( const Integer & rhs ) const { return ! ( * this == rhs ); } bool Integer :: operator < ( const Integer & rhs ) const { return i < rhs . i ; } // implement lhs > rhs in terms of lhs < rhs bool Integer :: operator > ( const Integer & rhs ) const { return rhs < * this ; } // implement lhs <= rhs in terms of !(rhs < lhs) bool Integer :: operator <= ( const Integer & rhs ) const { return ! ( rhs < * this ); } // implement lhs >= rhs in terms of !(lhs < rhs) bool Integer :: operator >= ( const Integer & rhs ) const { return ! ( * this < rhs ); } Operator [] \u8ba4\u4e3a\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2a\u5bb9\u5668 class A { int & operator [] ( int idx ) { return buf [ index ]; } private : int size ; int * buf ; } stream extractor/inserter ostream & operator << ( ostream & , const A & a ) { cout << a . size () << endl ; return os ; } \u8fd9\u91cc ostream \u4e0d\u80fd\u662f const, \u56e0\u4e3a\u5f80\u91cc\u9762\u8f93\u51fa\u4f1a\u4fee\u6539 cout \u5185\u90e8\u3002 cout << a << 5; \u8fd9\u91cc\u5b9e\u9645\u4e0a\u662f\u5148\u6267\u884c cout << a; \u518d\u6267\u884c (cout << a) << 5 . \u56e0\u6b64\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u662f ostream . \u8fd9\u91cc\u4e5f\u8981\u58f0\u660e\u53cb\u5143\u3002 istream & operator >> ( istream & is , T & obj ) { // \u8fd9\u91cc\u6ca1\u6709 const, \u56e0\u4e3a\u8981\u5f80\u91cc\u5199\u5165 // specific code to read obj return is ; } You can define your own manipulators. ostream & manip ( ostream & out ) { ... return out ; } ostream & tab ( ostream & out ) { return out << '\\t' ; } cout << \"Hello\" << tab << \"World!\" << endl ; Copying vs. Initialization \u00b6 Assignment Operator Must be a member function \u5fc5\u987b\u662f\u6210\u5458\u51fd\u6570 Will be generated for you if you don't provide one \u2013Same behavior as automatic copy ctor -- memberwise assignment Check for assignment to self \u62f7\u8d1d\u6784\u9020\u4e4b\u524d\uff0c\u5185\u5b58\u7684\u6307\u9488 p \u662f\u6ca1\u6709\u503c\u7684\uff0c\u4f46\u662f\u8d4b\u503c\u7684\u65f6\u5019 p \u662f\u6709\u503c\u7684\u3002\u6240\u4ee5\u9700\u8981\u5148 delete p \u518d new . \u4f46\u5982\u679c\u662f\u81ea\u5df1\u8d4b\u503c\u7ed9\u81ea\u5df1\uff0c\u6e90\u64cd\u4f5c\u7684\u5185\u5b58\u5df2\u7ecf\u88ab delete \u6389\u4e86\u3002 Be sure to assign to all data members Return a reference to *this Type Conversion \u00b6 User-defined Type conversions (int)3.5 \u5355\u76ee\u7684\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u91cd\u8f7d class PathName { string name ; public : // or could be multi-argument with defaults PathName ( const string & ); ~ PathName (); }; ... string abc ( \"abc\" ); PathName xyz ( abc ); // OK! xyz = abc ; // OK abc => PathName \u8fd9\u91cc\u6211\u4eec\u4f1a\u5148\u5229\u7528 abc \u6784\u9020\u4e00\u4e2a PathName \u7684\u5bf9\u8c61\uff0c\u968f\u540e\u8d4b\u503c\u7ed9 xyz. \u4ee5\u5176\u4ed6\u53d8\u91cf\u4e3a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u505a\u8d4b\u503c\u3002 \u6211\u4eec\u5728\u6784\u9020\u51fd\u6570\u524d\u9762\u52a0\u4e0a explicit \u5173\u952e\u5b57\uff0c\u5373 explicit PathName(const string&); \u5373\u6211\u4eec\u7684\u6784\u9020\u51fd\u6570\u53ea\u80fd\u7528\u6765\u505a\u6784\u9020\uff0c\u4e0d\u80fd\u628a string \u5bf9\u8c61\u8d4b\u503c\u7ed9 PathName . \u8fd9\u6837\u7f16\u8bd1\u65f6\u5c31\u4f1a\u51fa\u9519\u3002 Conversion operations Operator name is any type descriptor No explicit arguments No return type Compiler will use it as a type conversion from \\(X \\Rightarrow T\\) class Rational { public : ... operator double () const ; // Rational to double } Rational :: operator double () const { return numerator_ / ( double ) denominator_ ; } Rational r ( 1 , 3 ); double d = r ; // r=>double \u4e0d\u9700\u8981\u5199\u8fd4\u56de\u7c7b\u578b\u3002 \u5982\u679c\u6211\u4eec\u5728\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u524d\u9762\u52a0\u4e0a explicit , \u90a3\u4e48\u6211\u4eec\u5c31\u5fc5\u987b\u5199\u4f5c double d = (double)r; \u60f3\u5c06 T \u8f6c\u5316\u4e3a C, \u90a3\u4e48\u9700\u8981\u4e00\u4e2a C(T) \u7684\u4e0d\u52a0 explicit \u7684\u6784\u9020\u51fd\u6570\uff0c\u6216\u8005 operator C() \u7684\u91cd\u8f7d\u3002\u5982\u679c\u4e24\u4e2a\u90fd\u6709\uff0c\u7f16\u8bd1\u5668\u4f1a\u51fa\u9519\u3002 Use explicit conversion functions.","title":"Overloaded Operators"},{"location":"OOP/oop9/#overloaded-operators","text":"\u53ef\u4ee5\u8ba9\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u50cf\u539f\u751f\u7c7b\u578b\u4e00\u6837\u5177\u6709\u8fd0\u7b97\u7684\u80fd\u529b\u3002 Allows user-defined types to act like built in types. Another way of function call \u53ef\u4ee5\u88ab\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26 \u4e0d\u80fd\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26 . .* :: ?: sizeof typeid static_cast dynamic_cast const_cast reinterpret_cast a+b \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 a \u7684\u7c7b\u578b (receiver) \u6765\u51b3\u5b9a\u6211\u4eec\u7684\u8fd0\u7b97\u7b26\uff0c\u4f46 a>b?a:b \u6ca1\u6709 receiver. typeid \u83b7\u53d6\u7c7b\u7684\u65b9\u5f0f\u3002\u53ef\u4ee5\u7528 VPTR \u8868\u793a\uff08\u5982\u679c\u6709\u865a\u51fd\u6570\uff09 Restrictions Only existing operators can be overloaded. \u4e0d\u80fd\u91cd\u8f7d\u4e0d\u5b58\u5728\u7684\u8fd0\u7b97\u7b26\uff0c\u5982 Python \u7684 ** \u4f46\u91cd\u8f7d\u65f6\u53ef\u4ee5\u6beb\u65e0\u987e\u5fcc\u8fd0\u7b97\u7b26\u539f\u6765\u7684\u8bed\u4e49\uff08\u5982\u91cd\u8f7d + , \u4f46\u5b9e\u9645\u4e0a\u662f\u505a\u51cf\u6cd5\uff09 Operators must be overloaded on a class or enumeration type Overloaded operators must Preserve number of operands \u5982\u5bf9\u4e8e\u9664\u6cd5 / , \u5b83\u91cd\u8f7d\u65f6\u5fc5\u987b\u4e5f\u662f\u53cc\u76ee\u7684\u3002 Preserve precedence \u4f18\u5148\u7ea7\u548c\u7ed3\u5408\u5f8b\u662f\u4e0d\u53d8\u7684","title":"Overloaded operators"},{"location":"OOP/oop9/#c-overloaded-operator","text":"Just a function with an operator name. \u4f7f\u7528 operator \u5173\u952e\u5b57\u4f5c\u4e3a\u524d\u7f00\uff0c\u540e\u9762\u8ddf\u4e0a\u8fd0\u7b97\u7b26\u3002 operator *(...) Can be a member function Implicit first argument const String String::operator + (const String &that) Can be a global(free) function Both arguments explicit \u8fd9\u4e24\u79cd\u5199\u6cd5\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u3002","title":"C++ overloaded operator"},{"location":"OOP/oop9/#how-to-overload","text":"As a member function Implicit first argument No type conversion performed on reveiver class A { public : A ( int ii ) : i ( ii ){} int get () { return i ;} /* \u8fd4\u56de\u7684\u4e00\u5b9a\u662f A \u7684\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61 */ const A operator + ( const A & that ) const { A c ( this -> i + that . i ); /* \u8fd9\u91cc\u53ef\u4ee5\u8bbf\u95ee that. \u79c1\u6709\u662f\u9488\u5bf9\u7c7b\u7684\uff0c\u4e0d\u662f\u9488\u5bf9\u5bf9\u8c61\u7684\u3002 */ return c ; } private : int i ; } int main () { A a = 6 ; A b = 7 ; A c = a + b ; /* a + 9 \u4e5f\u662f\u53ef\u4ee5\u7684\uff1b\u4f46 9 + a \u4e0d\u884c */ cout << c . get () << endl ; /* \u8f93\u51fa 13 */ } \u8fd9\u91cc\u6211\u4eec\u4e0d\u5e0c\u671b\u8fd4\u56de\u7684\u5bf9\u8c61\u88ab\u4fee\u6539\uff0c\u5426\u5219\u53ef\u80fd\u51fa\u73b0 (a+b) = a \u7684\u60c5\u51b5\u3002 \u5982\u679c c = a + 9 \u7f16\u8bd1\u5668\u4f1a\u7528 9 \u5e2e\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\u3002 \u4e8c\u5143\u8fd0\u7b97\u7b26\u9700\u8981\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u5143\u8fd0\u7b97\u7b26\u4e0d\u9700\u8981\u53c2\u6570\u3002 e.g. -a, +a, *p, !a, ~b As a global function Explicit first argument Developer does not need special access to classes May need to be a friend const A operator - ( const A & r , const A & l ) { A c ( r . i - l . i ); return c ; } \u8fd9\u91cc\u5168\u5c40\u51fd\u6570\u662f\u4e0d\u80fd\u8bbf\u95ee\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\u7684\u3002\u56e0\u6b64\u8981 friend const A operator - (const A&r, const A&l) \u58f0\u660e\u53cb\u5143\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u5199 A c = 9-b; \u4f46 A c = 9-7; \u4e0d\u4f1a\u91cd\u8f7d\u3002 Members vs. Free Functions Unary operators should be members. assignment = () [] -> ->* must be memebers; All other binary operators as non-members.","title":"How to overload"},{"location":"OOP/oop9/#argument-passing","text":"if it is read-only pass it in as a const reference (except built-ins) make member functions const that don't change the class (boolean operators, +, -, etc) for global functions, if the left-hand side changes pass as a reference (assignment operators) Select the return type depending on the expected meaning of the operator. \u5982\u52a0\u51cf\u4e58\u9664\u53ea\u80fd\u4f5c\u4e3a\u53f3\u503c\uff0c\u56e0\u6b64\u8981 const. \u800c [] \u53ef\u4ee5\u4f5c\u4e3a\u5de6\u503c\uff0c\u5c31\u4e0d\u80fd const. The prototypes of operator + - * / % ^ & | ~ const T operator X(const T&l, const T&r); \u8fd9\u91cc\u8fd4\u56de\u7684\u5fc5\u987b\u662f\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u3002\u5982\u679c\u8fd9\u91cc\u8fd4\u56de\u5f15\u7528\uff0c\u90a3\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5168\u5c40\u7684\u5730\u5740\uff0c\u4f46\u51fd\u6570\u53ea\u6709\u672c\u5730\u7a7a\u95f4\u3002 ! && || < <= == >= > bool operator X(const T&l, const T&r); [] \u8fd4\u56de\u7684\u662f\u5de6\u503c\uff08\u4e0d\u80fd\u4e3a const\uff09\uff0c\u800c\u4e14\u4e0d\u80fd\u662f\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff08\u5426\u5219 a[6]=7 \u6267\u884c\u540e\u5c31\u88ab\u4e22\u6389\u4e86\uff09 E& T::operator[](int index); class Integer { public : ... const Integer & operator ++ (); //prefix++ const Integer operator ++ ( int ); //postfix++ const Integer & operator -- (); //prefix-- const Integer operator -- ( int ); //postfix-- ... }; // const Integer & Integer :: operator ++ () { * this += 1 ; // increment return * this ; // fetch } // int argument not used so leave unnamed so // won't get compiler warnings const Integer Integer :: operator ++ ( int ){ Integer old ( * this ); // fetch ++ ( * this ); // increment \u8c03\u7528\u4e86\u521a\u521a\u7684\u51fd\u6570 return old ; // return \u7b2c\u4e00\u4e2a\u662f\u524d\u7f00 ++a , \u7b2c\u4e8c\u4e2a\u662f\u540e\u7f00 a++ . \u8981 overload += \u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199 i++ \u540e\u8fd4\u56de *this , \u8282\u7701\u5f00\u9500\uff0c\u4e0d\u7528\u65b0\u5efa\u5bf9\u8c61\u3002 ++ x ; // calls x.operator++(); x ++ ; // calls x.operator++(0); -- x ; // calls x.operator--(); x -- ; // calls x.operator--(0); Relational operators class Integer { public : ... bool operator == ( const Integer & rhs ) const ; bool operator != ( const Integer & rhs ) const ; bool operator < ( const Integer & rhs ) const ; bool operator > ( const Integer & rhs ) const ; bool operator <= ( const Integer & rhs ) const ; bool operator >= ( const Integer & rhs ) const ; } bool Integer :: operator == ( const Integer & rhs ) const { return i == rhs . i ; } // implement lhs != rhs in terms of !(lhs == rhs) bool Integer :: operator != ( const Integer & rhs ) const { return ! ( * this == rhs ); } bool Integer :: operator < ( const Integer & rhs ) const { return i < rhs . i ; } // implement lhs > rhs in terms of lhs < rhs bool Integer :: operator > ( const Integer & rhs ) const { return rhs < * this ; } // implement lhs <= rhs in terms of !(rhs < lhs) bool Integer :: operator <= ( const Integer & rhs ) const { return ! ( rhs < * this ); } // implement lhs >= rhs in terms of !(lhs < rhs) bool Integer :: operator >= ( const Integer & rhs ) const { return ! ( * this < rhs ); } Operator [] \u8ba4\u4e3a\u8fd9\u4e2a\u7c7b\u662f\u4e00\u4e2a\u5bb9\u5668 class A { int & operator [] ( int idx ) { return buf [ index ]; } private : int size ; int * buf ; } stream extractor/inserter ostream & operator << ( ostream & , const A & a ) { cout << a . size () << endl ; return os ; } \u8fd9\u91cc ostream \u4e0d\u80fd\u662f const, \u56e0\u4e3a\u5f80\u91cc\u9762\u8f93\u51fa\u4f1a\u4fee\u6539 cout \u5185\u90e8\u3002 cout << a << 5; \u8fd9\u91cc\u5b9e\u9645\u4e0a\u662f\u5148\u6267\u884c cout << a; \u518d\u6267\u884c (cout << a) << 5 . \u56e0\u6b64\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u662f ostream . \u8fd9\u91cc\u4e5f\u8981\u58f0\u660e\u53cb\u5143\u3002 istream & operator >> ( istream & is , T & obj ) { // \u8fd9\u91cc\u6ca1\u6709 const, \u56e0\u4e3a\u8981\u5f80\u91cc\u5199\u5165 // specific code to read obj return is ; } You can define your own manipulators. ostream & manip ( ostream & out ) { ... return out ; } ostream & tab ( ostream & out ) { return out << '\\t' ; } cout << \"Hello\" << tab << \"World!\" << endl ;","title":"Argument Passing"},{"location":"OOP/oop9/#copying-vs-initialization","text":"Assignment Operator Must be a member function \u5fc5\u987b\u662f\u6210\u5458\u51fd\u6570 Will be generated for you if you don't provide one \u2013Same behavior as automatic copy ctor -- memberwise assignment Check for assignment to self \u62f7\u8d1d\u6784\u9020\u4e4b\u524d\uff0c\u5185\u5b58\u7684\u6307\u9488 p \u662f\u6ca1\u6709\u503c\u7684\uff0c\u4f46\u662f\u8d4b\u503c\u7684\u65f6\u5019 p \u662f\u6709\u503c\u7684\u3002\u6240\u4ee5\u9700\u8981\u5148 delete p \u518d new . \u4f46\u5982\u679c\u662f\u81ea\u5df1\u8d4b\u503c\u7ed9\u81ea\u5df1\uff0c\u6e90\u64cd\u4f5c\u7684\u5185\u5b58\u5df2\u7ecf\u88ab delete \u6389\u4e86\u3002 Be sure to assign to all data members Return a reference to *this","title":"Copying vs. Initialization"},{"location":"OOP/oop9/#type-conversion","text":"User-defined Type conversions (int)3.5 \u5355\u76ee\u7684\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u91cd\u8f7d class PathName { string name ; public : // or could be multi-argument with defaults PathName ( const string & ); ~ PathName (); }; ... string abc ( \"abc\" ); PathName xyz ( abc ); // OK! xyz = abc ; // OK abc => PathName \u8fd9\u91cc\u6211\u4eec\u4f1a\u5148\u5229\u7528 abc \u6784\u9020\u4e00\u4e2a PathName \u7684\u5bf9\u8c61\uff0c\u968f\u540e\u8d4b\u503c\u7ed9 xyz. \u4ee5\u5176\u4ed6\u53d8\u91cf\u4e3a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u505a\u8d4b\u503c\u3002 \u6211\u4eec\u5728\u6784\u9020\u51fd\u6570\u524d\u9762\u52a0\u4e0a explicit \u5173\u952e\u5b57\uff0c\u5373 explicit PathName(const string&); \u5373\u6211\u4eec\u7684\u6784\u9020\u51fd\u6570\u53ea\u80fd\u7528\u6765\u505a\u6784\u9020\uff0c\u4e0d\u80fd\u628a string \u5bf9\u8c61\u8d4b\u503c\u7ed9 PathName . \u8fd9\u6837\u7f16\u8bd1\u65f6\u5c31\u4f1a\u51fa\u9519\u3002 Conversion operations Operator name is any type descriptor No explicit arguments No return type Compiler will use it as a type conversion from \\(X \\Rightarrow T\\) class Rational { public : ... operator double () const ; // Rational to double } Rational :: operator double () const { return numerator_ / ( double ) denominator_ ; } Rational r ( 1 , 3 ); double d = r ; // r=>double \u4e0d\u9700\u8981\u5199\u8fd4\u56de\u7c7b\u578b\u3002 \u5982\u679c\u6211\u4eec\u5728\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u524d\u9762\u52a0\u4e0a explicit , \u90a3\u4e48\u6211\u4eec\u5c31\u5fc5\u987b\u5199\u4f5c double d = (double)r; \u60f3\u5c06 T \u8f6c\u5316\u4e3a C, \u90a3\u4e48\u9700\u8981\u4e00\u4e2a C(T) \u7684\u4e0d\u52a0 explicit \u7684\u6784\u9020\u51fd\u6570\uff0c\u6216\u8005 operator C() \u7684\u91cd\u8f7d\u3002\u5982\u679c\u4e24\u4e2a\u90fd\u6709\uff0c\u7f16\u8bd1\u5668\u4f1a\u51fa\u9519\u3002 Use explicit conversion functions.","title":"Type Conversion"},{"location":"android/dataflow/","text":"Android \u89e6\u63a7\u4e8b\u4ef6\u6570\u636e\u6d41 \u00b6 \u57fa\u672c\u6982\u5ff5 \u00b6 \u89e6\u6478\u4e8b\u4ef6\u6a21\u578b \u00b6 \u89e6\u6478\u4e8b\u4ef6\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b 1. \u6355\u83b7\u89e6\u63a7\u4e8b\u4ef6\u3002\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u4e0d\u65ad\u7684\u76d1\u542c\u5c4f\u5e55\uff0c\u4e00\u65e6\u6709\u89e6\u6478\u4e8b\u4ef6\uff0c\u5c31\u5c06\u4e8b\u4ef6\u6355\u83b7\u3002 2. \u6d3e\u53d1\u4e8b\u4ef6\u3002\u56e0\u4e3a\u53ef\u80fd\u6709\u591a\u4e2aAPP\u7684\u591a\u4e2a\u754c\u9762\u4e3a\u7528\u6237\u53ef\u89c1\uff0c\u5fc5\u987b\u627e\u5230\u76ee\u6807\u7a97\u53e3\uff0c\u786e\u5b9a\u8fd9\u4e2a\u4e8b\u4ef6\u7a76\u7adf\u901a\u77e5\u90a3\u4e2a\u7a97\u53e3\uff0c\u5e76\u628a\u4e8b\u4ef6\u53d1\u9001\u7ed9\u76ee\u6807\u7a97\u53e3\u3002 3. \u76ee\u6807\u7a97\u53e3\u6d88\u8d39\u4e8b\u4ef6\u3002 \u6355\u83b7\u89e6\u63a7\u4e8b\u4ef6 \u00b6 InputManagerService InputManagerService \u662f Android \u4e3a\u4e86\u5904\u7406\u5404\u79cd\u7528\u6237\u64cd\u4f5c\u800c\u62bd\u8c61\u7684\u4e00\u4e2a\u670d\u52a1\uff0c\u81ea\u8eab\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a Binder \u670d\u52a1\u5b9e\u4f53\uff0c\u5728 SystemServer \u8fdb\u7a0b\u542f\u52a8\u7684\u65f6\u5019\u5b9e\u4f8b\u5316\uff0c\u5e76\u6ce8\u518c\u5230 ServiceManager \u4e2d\u53bb\u3002 InputManagerService \u521b\u5efa\u4e00\u4e2a \u4e8b\u4ef6\u8bfb\u53d6\u7ebf\u7a0b \uff0c\u521b\u5efa\u4e00\u4e2a \u4e8b\u4ef6\u6d3e\u53d1\u7ebf\u7a0b \u3002 EventHub \u5229\u7528 Linux \u7684 inotify \u548c epoll \u673a\u5236\uff0c\u76d1\u542c\u8bbe\u5907\u4e8b\u4ef6\uff0c\u9762\u5411\u7684\u662f /dev/input \u76ee\u5f55\u4e0b\u7684\u8bbe\u5907\u8282\u70b9\u3002\u901a\u8fc7 EventHub \u7684 getEvents \u53ef\u4ee5\u76d1\u542c\u5e76\u83b7\u5f97\u8be5\u4e8b\u4ef6\u3002 \u5728 new InputManager \u65f6\u5019\uff0c\u4f1a\u65b0\u5efa\u4e00\u4e2a InputReaderThread \u7ebf\u7a0b\u53ca InputDispatcherThread \u7ebf\u7a0b\u3002 \u8fd9\u4e2a Reader \u7ebf\u7a0b\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u901a\u8fc7 EventHub \u7684 getEvents \u83b7\u53d6 Input \u4e8b\u4ef6\u3002 processEventsLocked \u4f1a\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u521d\u6b65\u5c01\u88c5\u4e3a RawEvent. Reader \u91cc\u7684 loopOnce \u65b9\u6cd5\u4f1a\u5728\u8bfb\u53d6\u5230\u4e8b\u4ef6\u540e\uff0c mQueuedListener->flush() \u5373\u5411 InputDispatcherThread \u7ebf\u7a0b\u53d1\u9001\u6d88\u606f\u3002 Dispatcher \u7ebf\u7a0b\u8d77\u521d\u5904\u4e8e\u7761\u7720\u72b6\u6001\uff0c\u63a5\u53d7\u5230\u6d88\u606f\u540e\u88ab\u5524\u9192\uff0c\u5904\u7406\u540e\u7ee7\u7eed\u7761\u7720\u3002 InputManager :: InputManager ( const sp < EventHubInterface >& eventHub , const sp < InputReaderPolicyInterface >& readerPolicy , const sp < InputDispatcherPolicyInterface >& dispatcherPolicy ) { <!-- \u4e8b\u4ef6\u5206\u53d1\u6267\u884c\u7c7b --> mDispatcher = new InputDispatcher ( dispatcherPolicy ); <!-- \u4e8b\u4ef6\u8bfb\u53d6\u6267\u884c\u7c7b --> mReader = new InputReader ( eventHub , readerPolicy , mDispatcher ); initialize (); } void InputManager :: initialize () { mReaderThread = new InputReaderThread ( mReader ); // \u4e8b\u4ef6\u8bfb\u53d6\u7ebf\u7a0b mDispatcherThread = new InputDispatcherThread ( mDispatcher ); // \u4e8b\u4ef6\u6d3e\u53d1\u7ebf\u7a0b } bool InputReaderThread :: threadLoop () { mReader -> loopOnce (); return true ; } void InputReader :: loopOnce () { int32_t oldGeneration ; int32_t timeoutMillis ; bool inputDevicesChanged = false ; Vector < InputDeviceInfo > inputDevices ; { ... <!-- \u76d1\u542c\u4e8b\u4ef6 --> size_t count = mEventHub -> getEvents ( timeoutMillis , mEventBuffer , EVENT_BUFFER_SIZE ); .... <!-- \u5904\u7406\u4e8b\u4ef6 --> processEventsLocked ( mEventBuffer , count ); ... <!-- \u901a\u77e5\u6d3e\u53d1 --> mQueuedListener -> flush (); // \u5411\u5206\u53d1\u7ebf\u7a0b\u53d1\u9001\u6d88\u606f } \u4e8b\u4ef6\u6d3e\u53d1 \u00b6 bool InputDispatcherThread :: threadLoop () { mDispatcher -> dispatchOnce (); return true ; } void InputDispatcher :: dispatchOnce () { nsecs_t nextWakeupTime = LONG_LONG_MAX ; { <!-- \u88ab\u5524\u9192 \uff0c \u5904\u7406Input\u6d88\u606f --> if ( ! haveCommandsLocked ()) { dispatchOnceInnerLocked ( & nextWakeupTime ); } ... } nsecs_t currentTime = now (); int timeoutMillis = toMillisecondTimeoutDelay ( currentTime , nextWakeupTime ); <!-- \u7761\u7720\u7b49\u5f85input\u4e8b\u4ef6 --> mLooper -> pollOnce ( timeoutMillis ); } \u5982\u4e0a\u6587\u6240\u8bf4\uff0c\u5728\u65b0\u5efa InputManager \u65f6\u4e5f\u521b\u5efa\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u6d3e\u53d1\u8fdb\u7a0b. InputDispatcherThread \u662f\u4e00\u4e2a Looper \u7ebf\u7a0b\uff0c\u57fa\u4e8e native \u7684 Looper \u5b9e\u73b0\u4e86 Hanlder \u6d88\u606f\u5904\u7406\u6a21\u578b\uff0c\u5982\u679c\u6709 Input \u4e8b\u4ef6\u5230\u6765\u5c31\u88ab\u5524\u9192\u5904\u7406\u4e8b\u4ef6\uff0c\u5904\u7406\u5b8c\u6bd5\u540e\u7ee7\u7eed\u7761\u7720\u7b49\u5f85\u3002 \u8fd9\u91cc dispatchOnceInnerLocked \u662f\u5177\u4f53\u7684\u6d3e\u53d1\u903b\u8f91\u3002\u5bf9\u4e8e\u89e6\u6478\u4e8b\u4ef6\u4f1a\u9996\u5148\u901a\u8fc7 findTouchedWindowTargetsLocked \u627e\u5230\u76ee\u6807 Window, \u8fdb\u800c\u901a\u8fc7 dispatchEventLocked \u5c06\u6d88\u606f\u53d1\u9001\u5230\u76ee\u6807\u7a97\u53e3\u3002 void InputDispatcher :: dispatchOnceInnerLocked ( nsecs_t * nextWakeupTime ) { ... case EventEntry :: TYPE_MOTION : { MotionEntry * typedEntry = static_cast < MotionEntry *> ( mPendingEvent ); ... done = dispatchMotionLocked ( currentTime , typedEntry , & dropReason , nextWakeupTime ); break ; } bool InputDispatcher :: dispatchMotionLocked ( nsecs_t currentTime , MotionEntry * entry , DropReason * dropReason , nsecs_t * nextWakeupTime ) { ... Vector < InputTarget > inputTargets ; bool conflictingPointerActions = false ; int32_t injectionResult ; if ( isPointerEvent ) { <!-- \u5173\u952e\u70b91 \u627e\u5230\u76ee\u6807Window --> injectionResult = findTouchedWindowTargetsLocked ( currentTime , entry , inputTargets , nextWakeupTime , & conflictingPointerActions ); } else { injectionResult = findFocusedWindowTargetsLocked ( currentTime , entry , inputTargets , nextWakeupTime ); } ... <!-- \u5173\u952e\u70b92 \u6d3e\u53d1 --> dispatchEventLocked ( currentTime , entry , inputTargets ); return true ; } \u627e\u5230\u76ee\u6807\u7a97\u53e3 \u00b6 Android \u7cfb\u7edf\u80fd\u591f\u540c\u65f6\u652f\u6301\u591a\u5757\u5c4f\u5e55\uff0c\u6bcf\u5757\u5c4f\u5e55\u88ab\u62bd\u8c61\u6210\u4e00\u4e2a DisplayContent \u5bf9\u8c61\uff0c\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a WindowList \u5217\u8868\u5bf9\u8c61\uff0c\u7528\u6765\u8bb0\u5f55\u5f53\u524d\u5c4f\u5e55\u4e2d\u7684\u6240\u6709\u7a97\u53e3\uff0c\u5305\u62ec\u72b6\u6001\u680f\u3001\u5bfc\u822a\u680f\u3001\u5e94\u7528\u7a97\u53e3\u3001\u5b50\u7a97\u53e3\u7b49\u3002 \u6211\u4eec\u53ef\u4ee5\u6839\u636e\u89e6\u6478\u4e8b\u4ef6\u7684\u4f4d\u7f6e\u53ca\u7a97\u53e3\u7684\u5c5e\u6027\u904d\u5386 WindowList \u5217\u8868\u6765\u786e\u5b9a\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u54ea\u4e2a\u7a97\u53e3\u3002\uff08\u5224\u65ad\u662f\u5426\u53ef\u89c1\u3001\u662f\u5426\u53ef\u89e6\u6478\u7b49\u4fe1\u606f\uff09 \u53d1\u9001\u4e8b\u4ef6\u5230\u76ee\u6807\u7a97\u53e3 \u00b6 \u76ee\u524d\u6240\u6709\u903b\u8f91\u5728 SystemServer \u8fdb\u7a0b\uff0c\u8981\u901a\u77e5\u7684\u7a97\u53e3\u4f4d\u4e8e APP \u7aef\u7684\u7528\u6237\u8fdb\u7a0b\u3002\u9ad8\u7248\u672c\u7684\u91c7\u7528\u7684\u90fd\u662f Socket \u7684\u901a\u4fe1\u65b9\u5f0f\uff0c\u800c\u6bd4\u8f83\u65e7\u7684\u7248\u672c\u91c7\u7528\u7684\u662f Pipe \u7ba1\u9053\u7684\u65b9\u5f0f\u3002 \u5176\u4e2d\uff0c\u4e24\u7aef\u901a\u4fe1\u7684 Socket, \u5728 APP \u7aef\u5411 WMS \u8bf7\u6c42\u6dfb\u52a0\u7a97\u53e3\u7684\u65f6\u5019\uff0c\u4f1a\u4f34\u968f\u7740 Input \u901a\u9053\u7684\u521b\u5efa\uff0c\u7a97\u53e3\u7684\u6dfb\u52a0\u4e00\u5b9a\u4f1a\u8c03\u7528 ViewRootImpl \u7684 setView \u51fd\u6570\u3002 public void setView ( View view , WindowManager . LayoutParams attrs , View panelParentView ) { ... requestLayout (); if (( mWindowAttributes . inputFeatures & WindowManager . LayoutParams . INPUT_FEATURE_NO_INPUT_CHANNEL ) == 0 ) { <!-- \u521b\u5efaInputChannel\u5bb9\u5668 --> mInputChannel = new InputChannel (); // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 InputChannel } try { mOrigWindowType = mWindowAttributes . type ; mAttachInfo . mRecomputeGlobalAttributes = true ; collectViewAttributes (); <!-- \u6dfb\u52a0\u7a97\u53e3 \uff0c \u5e76\u8bf7\u6c42\u5f00\u8f9fSocket Input\u901a\u4fe1\u901a\u9053 --> res = mWindowSession . addToDisplay ( mWindow , mSeq , mWindowAttributes , getHostVisibility (), mDisplay . getDisplayId (), mAttachInfo . mContentInsets , mAttachInfo . mStableInsets , mAttachInfo . mOutsets , mInputChannel ); // \u8fd9\u91cc\u4f1a\u8f6c\u5316\u4e3a\u5bf9 addWindow \u7684\u8c03\u7528 // Binder \u8c03\u7528 WMS \u7684 addToDisplay \u63a5\u53e3\uff0c\u5e76\u5c06 InputChanel \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u4ee5\u5b8c\u6210\u8d4b\u503c }... <!-- \u76d1\u542c \uff0c \u5f00\u542fInput\u4fe1\u9053 --> if ( mInputChannel != null ) { if ( mInputQueueCallback != null ) { mInputQueue = new InputQueue (); mInputQueueCallback . onInputQueueCreated ( mInputQueue ); } mInputEventReceiver = new WindowInputEventReceiver ( mInputChannel , Looper . myLooper ()); // \u6839\u636e\u8d4b\u503c\u540e\u7684 InputChannel \u5c01\u88c5\u521b\u5efa WindowInputEventReceiver \u5bf9\u8c61\uff0c\u4ee5\u4fbf\u540e\u7eed\u63a5\u6536 Input \u4e8b\u4ef6 } setView \u4e2d\u521b\u5efa\u4e86 InputChannel \u5bb9\u5668\uff0c\u5b83\u662f out \u7c7b\u578b\uff0c\u9700\u8981\u7531\u670d\u52a1\u7aef\u8fdb\u884c\u586b\u5145\u3002 public int addWindow ( Session session , IWindow client , int seq , WindowManager . LayoutParams attrs , int viewVisibility , int displayId , Rect outContentInsets , Rect outStableInsets , Rect outOutsets , InputChannel outInputChannel ) { ... if ( outInputChannel != null && ( attrs . inputFeatures & WindowManager . LayoutParams . INPUT_FEATURE_NO_INPUT_CHANNEL ) == 0 ) { String name = win . makeInputChannelName (); <!-- \u521b\u5efa InputChannelPair , \u5b9e\u73b0\u521b\u5efa socketpair \u5168\u53cc\u5de5\u901a\u4fe1\u4fe1\u9053 --> InputChannel [] inputChannels = InputChannel . openInputChannelPair ( name ); // \u521b\u5efa\u901a\u4fe1\u4fe1\u9053\uff0c\u5e76\u5206\u522b\u586b\u5145\u5230\u5ba2\u6237\u548c\u670d\u52a1\u7684 InputChannel <!-- \u672c\u5730\u7528 --> win . setInputChannel ( inputChannels [ 0 ] ); <!-- APP\u7aef\u7528 --> inputChannels [ 1 ] . transferTo ( outInputChannel ); // \u5c06\u5ba2\u6237\u7aef InputChannel \u8d4b\u503c\u7ed9 outInputChannel, \u5e76 Binder \u56de\u4f20\u7ed9\u5e94\u7528\u8fdb\u7a0b\u4e2d ViewRootImpl \u4e2d <!-- \u6ce8\u518c\u4fe1\u9053\u4e0e\u7a97\u53e3 --> mInputManager . registerInputChannel ( win . mInputChannel , win . mInputWindowHandle ); // mInputWindowHandle.token \u552f\u4e00\u6807\u8bc6\u4e86\u63a5\u6536 Input \u4e8b\u4ef6\u7684 App \u7a97\u53e3 } \u8fd9\u91cc openInputChannelPair \u521b\u5efa\u4e86 socketpair, \u5e76\u5206\u522b\u586b\u5145\u5230 Client \u4e0e Server \u7684 InputChannel \u4e2d\u53bb\u3002\u8ba9 InputManager \u5c06 Input \u901a\u4fe1\u4fe1\u9053\u4e0e\u5f53\u524d\u7684\u7a97\u53e3 ID \u7ed1\u5b9a\uff0c\u6700\u540e\u901a\u8fc7 Binder \u5c06 outInputChannel \u56de\u4f20\u5230 APP \u7aef\u3002WMS \u9700\u8981\u501f\u52a9 Binder \u901a\u4fe1\u5411 APP \u7aef\u56de\u4f20\u6587\u4ef6\u63cf\u8ff0\u7b26 fd. \u7a97\u53e3\u6dfb\u52a0\u6210\u529f\u540e, socketpair \u88ab\u521b\u5efa\uff0c\u88ab\u4f20\u9012\u5230\u4e86 APP \u7aef\uff0c\u4f46\u662f\u4fe1\u9053\u5e76\u672a\u5b8c\u5168\u5efa\u7acb\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u4e3b\u52a8\u7684\u76d1\u542c\u3002 APP \u7aef\u7684\u76d1\u542c\u6d88\u606f\u7684\u624b\u6bb5\u662f\uff1a\u5c06 socket \u6dfb\u52a0\u5230 Looper \u7ebf\u7a0b\u7684 epoll \u6570\u7ec4\u4e2d\u53bb\uff0c\u4e00\u6709\u6d88\u606f\u5230\u6765 Looper \u7ebf\u7a0b\u5c31\u4f1a\u88ab\u5524\u9192\uff0c\u5e76\u83b7\u53d6\u4e8b\u4ef6\u5185\u5bb9\uff0c\u4ece\u4ee3\u7801\u4e0a\u6765\u770b\uff0c\u901a\u4fe1\u4fe1\u9053\u7684\u6253\u5f00\u662f\u4f34\u968f WindowInputEventReceiver \u7684\u521b\u5efa\u6765\u5b8c\u6210\u7684\u3002 \u4fe1\u606f\u5230\u6765, Looper\u6839\u636e fd \u627e\u5230\u5bf9\u5e94\u7684\u76d1\u542c\u5668: NativeInputEventReceiver, \u5e76\u8c03\u7528 handleEvent \u5904\u7406\u5bf9\u5e94\u4e8b\u4ef6\u3002\u4e4b\u540e\u4f1a\u8fdb\u4e00\u6b65\u8bfb\u53d6\u4e8b\u4ef6\uff0c\u5e76\u5c01\u88c5\u6210 Java \u5c42\u5bf9\u8c61\uff0c\u4f20\u9012\u7ed9 Java \u5c42\u3002 int NativeInputEventReceiver :: handleEvent ( int receiveFd , int events , void * data ) { ... if ( events & ALOOPER_EVENT_INPUT ) { JNIEnv * env = AndroidRuntime :: getJNIEnv (); status_t status = consumeEvents ( env , false /*consumeBatches*/ , - 1 , NULL ); mMessageQueue -> raiseAndClearException ( env , \"handleReceiveCallback\" ); return status == OK || status == NO_MEMORY ? 1 : 0 ; } ... status_t NativeInputEventReceiver :: consumeEvents ( JNIEnv * env , bool consumeBatches , nsecs_t frameTime , bool * outConsumedBatch ) { ... for (;;) { uint32_t seq ; InputEvent * inputEvent ; <!-- \u83b7\u53d6\u4e8b\u4ef6 --> status_t status = mInputConsumer . consume ( & mInputEventFactory , consumeBatches , frameTime , & seq , & inputEvent ); ... <!-- \u5904\u7406touch\u4e8b\u4ef6 --> case AINPUT_EVENT_TYPE_MOTION : { MotionEvent * motionEvent = static_cast < MotionEvent *> ( inputEvent ); if (( motionEvent -> getAction () & AMOTION_EVENT_ACTION_MOVE ) && outConsumedBatch ) { * outConsumedBatch = true ; } inputEventObj = android_view_MotionEvent_obtainAsCopy ( env , motionEvent ); break ; } ... \u6700\u540e\u5c31\u662f\u89e6\u6478\u4e8b\u4ef6\u88ab\u5c01\u88c5\u6210\u4e86 InputEvent , \u5e76\u901a\u8fc7 InputEventReceiver \u7684 dispatchInputEvent \u8fdb\u884c\u5904\u7406\u3002InputEventReceiver \u7684 dispatchInputEvent \u65b9\u6cd5\u4f1a\u8c03\u7528 onInputEvent \u5177\u4f53\u5904\u7406 Input event \u89e6\u63a7\u4e8b\u4ef6\u3002 \u76ee\u6807\u7a97\u53e3\u6d88\u8d39\u4e8b\u4ef6 \u00b6 UI \u7ebf\u7a0b\u5bf9\u89e6\u63a7\u4e8b\u4ef6\u7684\u5206\u53d1\u5904\u7406 \u00b6 \u4ece ViewRootImpl::WindowInputDispatcherReceiver::onInputEvent \u51fd\u6570\u5f00\u59cb, Input \u4e8b\u4ef6\u5148\u540e\u6765\u5230 UI \u7ebf\u7a0b\uff0c\u901a\u8fc7 enqueueInputEvent \u51fd\u6570\u653e\u5165\u672c\u5730\u5f85\u5904\u7406\u961f\u5217\u4e2d\u3002 \u5177\u4f53\u5bf9 Input \u89e6\u63a7\u4e8b\u4ef6\u7684\u5904\u7406\u903b\u8f91\u90fd\u5c01\u88c5\u5728 InputUsage \u7c7b\u4e2d\uff0c\u5728 ViewRootImpl \u521b\u5efa Window \u65f6\u7684 setView \u903b\u8f91\u4e2d\u4f1a\u521b\u5efa\u4e86\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684 InputUsage \u5bf9\u8c61\u4f9d\u6b21\u8fdb\u884c\u4e8b\u4ef6\u5904\u7406\uff0c\u8bbe\u8ba1\u4e0a\u91c7\u7528\u8d23\u4efb\u94fe\u6a21\u5f0f\uff0c\u5c06\u6bcf\u4e2a InputStage \u5b9e\u73b0\u7c7b\u901a\u8fc7 mNext \u53d8\u91cf\u8fde\u63a5\u8d77\u6765\u3002 \u6bcf\u4e2a InputUsage \u4e3b\u8981\u903b\u8f91\u662f\u5728 OnProcess \u51fd\u6570\u4e2d\u5177\u4f53\u5904\u7406\u89e6\u63a7\u4e8b\u4ef6\uff0c\u7136\u540e\u5224\u65ad\u5904\u7406\u662f\u5426\u5b8c\u6210\uff0c\u6ca1\u6709\u5219 onDeliverToNext \u4ea4\u7ed9\u4e0b\u4e00\u4e2a InputUsage \u7ee7\u7eed\u5904\u7406\uff0c\u5426\u5219\u5c31\u8c03\u7528 finishInputEvent \u7ed3\u675f\u4e8b\u4ef6\u3002 public void setView ( View view , WindowManager . LayoutParams attrs , View panelParentView , int userId ) { ... // Set up the input pipeline. CharSequence counterSuffix = attrs . getTitle (); // \u521b\u5efa\u591a\u4e2a\u4e0d\u540c\u7c7b\u578bInputUsage\u4ee5\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u89e6\u63a7\u4e8b\u4ef6 mSyntheticInputStage = new SyntheticInputStage (); // ViewPostImeInputStage\u4e2d\u5c01\u88c5\u6211\u4eec\u5e94\u7528\u4e00\u822c\u89e6\u63a7\u4e8b\u4ef6\u5904\u7406\u903b\u8f91\uff08\u91cd\u8981\uff09 InputStage viewPostImeStage = new ViewPostImeInputStage ( mSyntheticInputStage ); InputStage nativePostImeStage = new NativePostImeInputStage ( viewPostImeStage , \"aq:native-post-ime:\" + counterSuffix ); ... } abstract class InputStage { ... /** * Delivers an event to be processed. */ public final void deliver ( QueuedInputEvent q ) { // \u662f\u5426\u5e26\u6709FLAG_FINISHED\u7684flag\uff0c\u5982\u6709\u5219\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9mNext if (( q . mFlags & QueuedInputEvent . FLAG_FINISHED ) != 0 ) { forward ( q ); // \u662f\u5426\u5e94\u8be5\u4e22\u5f03\u4e8b\u4ef6 } else if ( shouldDropInputEvent ( q )) { finish ( q , false ); } else { traceEvent ( q , Trace . TRACE_TAG_VIEW ); final int result ; try { // 1.\u5b9e\u9645\u5904\u7406\u4e8b\u4ef6 result = onProcess ( q ); } finally { Trace . traceEnd ( Trace . TRACE_TAG_VIEW ); } // 2.\u62ff\u5230\u5904\u7406\u4e8b\u4ef6\u7684\u7ed3\u679c\u540e\u51b3\u5b9a\u8fdb\u4e00\u6b65\u884c\u52a8 apply ( q , result ); } } protected void apply ( QueuedInputEvent q , int result ) { if ( result == FORWARD ) { forward ( q ); } else if ( result == FINISH_HANDLED ) { finish ( q , true ); } else if ( result == FINISH_NOT_HANDLED ) { finish ( q , false ); } } protected void finish ( QueuedInputEvent q , boolean handled ) { q . mFlags |= QueuedInputEvent . FLAG_FINISHED ; if ( handled ) { q . mFlags |= QueuedInputEvent . FLAG_FINISHED_HANDLED ; } // \u4ea4\u7ed9\u4e0b\u4e00\u4e2aInputUsage\u7ee7\u7eed\u5904\u7406 forward ( q ); } protected void forward ( QueuedInputEvent q ) { // \u4ea4\u7ed9\u4e0b\u4e00\u4e2aInputUsage\u7ee7\u7eed\u5904\u7406 onDeliverToNext ( q ); } protected void onDeliverToNext ( QueuedInputEvent q ) { if ( DEBUG_INPUT_STAGES ) { Log . v ( mTag , \"Done with \" + getClass (). getSimpleName () + \". \" + q ); } if ( mNext != null ) { // 1.\u4ea4\u7ed9\u4e0b\u4e00\u4e2aInputUsage\u7ee7\u7eed\u5904\u7406 mNext . deliver ( q ); } else { // 2.\u5224\u65ad\u6240\u6709\u7684InputUsage\u90fd\u5904\u7406\u5b8c\u6210\u5219\u8c03\u7528finishInputEvent\u7ed3\u675f\u89e6\u63a7\u4e8b\u4ef6 finishInputEvent ( q ); } } } \u5176\u4e2d, onProcess \u51fd\u6570\u4f1a\u628a\u4e8b\u4ef6\u5206\u53d1\u5230 View \u6811\u7684\u6839\u8282\u70b9 DecorView \u7684 dispatchTouchEvent \u51fd\u6570\u4e2d\uff0c\u5177\u4f53\u6d41\u7a0b\u89c1 2.3.2. \u5904\u7406\u5b8c\u6210\u540e\uff0c\u8c03\u7528 finishInputEvent \u4f1a\u901a\u8fc7 Client \u7aef\u7684 InputChannel \u7684 sendMessage \u901a\u77e5 InputDispatcher. \u670d\u52a1\u7aef\u7684 InputDispatcher \u5728\u6536\u5230\u6d88\u606f\u540e\u5c06\u6b64\u89e6\u63a7\u4e8b\u4ef6\u79fb\u51fa\u7b49\u5f85\u961f\u5217\u3002 View \u7684\u89e6\u63a7\u4e8b\u4ef6\u5206\u53d1\u673a\u5236 \u00b6 \u5176\u4e2d Window.Callback \u6307\u5411\u5f53\u524d Activity. \u8fd9\u91cc\u6211\u4eec\u4f1a\u628a\u4e8b\u4ef6\u4ea4\u7ed9 Activity \u7684 dispatchTouchEvent \u5904\u7406\u4e8b\u4ef6\u3002 @Override public boolean dispatchTouchEvent ( MotionEvent ev ) { final Window . Callback cb = mWindow . getCallback (); // \u4ea4\u7ed9\u5e94\u7528 Activity \u7684 dispatchTouchEvent \u5904\u7406\u89e6\u63a7\u4e8b\u4ef6 return cb != null && ! mWindow . isDestroyed () && mFeatureId < 0 ? cb . dispatchTouchEvent ( ev ) : super . dispatchTouchEvent ( ev ); } Activity \u4e2d\u4f1a\u5148\u5c06\u4e8b\u4ef6\u4ea4\u7ed9 PhoneWindow \u5904\u7406\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4ea4\u7ed9 DecorView \u4e2d\u5904\u7406. DecorView \u4f1a\u7ee7\u7eed\u628a\u4e8b\u4ef6\u4ea4\u7ed9\u5176\u7236\u7c7b ViewGroup \u5904\u7406\u3002 ViewGroup \u4e2d\u7684\u4e8b\u4ef6\u5206\u53d1\u7684\u4e3b\u8981\u903b\u8f91\u5c31\u662f \u5224\u65ad\u5b50 View \u4e2d\u662f\u5426\u8bbe\u7f6e\u4e86\u7981\u6b62\u7236 ViewGroup \u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6\u3002 \uff08\u89e3\u51b3\u6ed1\u52a8\u51b2\u7a81\u7684\u4e00\u4e2a\u4e3b\u8981\u601d\u8def\u5c31\u662f\u5b50 View \u901a\u8fc7\u8c03\u7528requestDisallowInterceptTouchEvent \u7981\u6b62\u7236 ViewGroup \u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6\uff0c\u4ece\u800c\u5c06\u4e8b\u4ef6\u7edf\u4e00\u4ea4\u7ed9\u5b50 View \u5904\u7406\u4ee5\u907f\u514d\u4ea7\u751f\u6ed1\u52a8\u51b2\u7a81\uff09 \u82e5\u6ca1\u6709, onInterceptTouchEvent \u5224\u65ad\u662f\u5426\u62e6\u622a\u6b64\u4e8b\u4ef6\uff08\u9ed8\u8ba4\u4e3a False)\u3002 \u4e0d\u62e6\u622a\uff0c\u5219\u904d\u5386\u6240\u6709\u5b50 View \u627e\u5230\u5339\u914d\u7684\u5b50 View, \u7136\u540e\u901a\u8fc7 dispatchTransformedTouchEvent \u4ea4\u7ed9\u8be5\u5b50 View \u7684 dispatchTouchEvent \u7ee7\u7eed\u5904\u7406\u3002 public boolean dispatchTouchEvent ( MotionEvent ev ) { ... if ( onFilterTouchEventForSecurity ( ev )) { ... if ( actionMasked == MotionEvent . ACTION_DOWN || mFirstTouchTarget != null ) { // 1.\u5224\u65ad\u5b50View\u4e2d\u662f\u5426\u8bbe\u7f6e\u4e86\u7981\u6b62\u7236ViewGroup\u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6\uff0c\u89e3\u51b3\u6ed1\u52a8\u51b2\u7a81\u7684\u5173\u952e final boolean disallowIntercept = ( mGroupFlags & FLAG_DISALLOW_INTERCEPT ) != 0 ; if ( ! disallowIntercept ) { // onInterceptTouchEvent\u4e2d\u5224\u65adViewGroup\u662f\u5426\u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6 intercepted = onInterceptTouchEvent ( ev ); } } ... if ( ! canceled && ! intercepted ) { if ( actionMasked == MotionEvent . ACTION_DOWN || ( split && actionMasked == MotionEvent . ACTION_POINTER_DOWN ) || actionMasked == MotionEvent . ACTION_HOVER_MOVE ) { ... if ( newTouchTarget == null && childrenCount != 0 ) { ... final View [] children = mChildren ; // 2.\u5bf9\u6240\u6709\u5b50View\u8fdb\u884c\u904d\u5386 for ( int i = childrenCount - 1 ; i >= 0 ; i -- ) { ... if ( ! child . canReceivePointerEvents () || ! isTransformedTouchPointInView ( x , y , child , null )) { // 3.\u5982\u679c\u6b64View\u65e0\u6cd5\u63a5\u6536\u4e8b\u4ef6\u6216\u8005\u5f53\u524d\u4e8b\u4ef6\u7684\u6216\u843d\u70b9\u4e0d\u5728\u8fd9\u4e2aView\u533a\u57df\u5185\u5219\u8fd4\u56de\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af continue ; } ... // 4.\u8fd9\u91cc\u5c31\u4f1a\u6267\u884c\u5b50View\u4e8b\u4ef6\u5206\u53d1\u5904\u7406\u903b\u8f91\u4e86 if ( dispatchTransformedTouchEvent ( ev , false , child , idBitsToAssign )) { ... break ; } ... } } ... } } ... } public boolean onInterceptTouchEvent ( MotionEvent ev ) { if ( ev . isFromSource ( InputDevice . SOURCE_MOUSE ) && ev . getAction () == MotionEvent . ACTION_DOWN && ev . isButtonPressed ( MotionEvent . BUTTON_PRIMARY ) && isOnScrollbarThumb ( ev . getX (), ev . getY ())) { return true ; } // ViewGroup\u9ed8\u8ba4\u4e0d\u62e6\u622a\u4e8b\u4ef6 return false ; } private boolean dispatchTransformedTouchEvent ( MotionEvent event , boolean cancel , View child , int desiredPointerIdBits ) { ... // Perform any necessary transformations and dispatch. if ( child == null ) { handled = super . dispatchTouchEvent ( transformedEvent ); } else { ... // \u8c03\u7528\u5b50View\u7684dispatchTouchEvent\u7ee7\u7eed\u8fdb\u884c\u4e8b\u4ef6\u5206\u53d1 handled = child . dispatchTouchEvent ( transformedEvent ); } ... } \u4e8b\u4ef6\u4f20\u9012\u5230 View \u7684 dispatchTouchEvent \u540e \u5224\u65ad\u8be5 View \u662f\u5426\u8bbe\u7f6e\u4e86\u89e6\u6478\u76d1\u542c\uff0c\u5373\u662f\u5426\u8c03\u7528\u8fc7 setOnTouchListener \u65b9\u6cd5\uff0c\u5982\u679c\u6709\u5219\u5c06\u4e8b\u4ef6\u4f20\u5165\u5176 onTouch \u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c \u6ca1\u6709\u8bbe\u7f6e\uff0c\u5219\u4f1a\u8c03\u7528 View \u7684 onTouchEvent \u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u4e2d\u4f1a\u6709\u6761\u4ef6\u7684\u8c03\u7528 onClick public boolean dispatchTouchEvent ( MotionEvent event ) { ... boolean result = false ; if ( onFilterTouchEventForSecurity ( event )) { ... // 1.\u5224\u65ad\u662f\u5426\u8c03\u7528\u8fc7setOnTouchListener\u65b9\u6cd5\uff0c\u5982\u679c\u6709\u5219\u5c06\u4e8b\u4ef6\u4f20\u5165\u5176onTouch\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c if ( li != null && li . mOnTouchListener != null && ( mViewFlags & ENABLED_MASK ) == ENABLED && li . mOnTouchListener . onTouch ( this , event )) { result = true ; } // 2.onTouchEvent\u4e2d\u5224\u65ad\u662f\u5426\u6d88\u8d39\u89e6\u63a7\u4e8b\u4ef6 if ( ! result && onTouchEvent ( event )) { result = true ; } } ... return result ; }","title":"\u89e6\u63a7\u4e8b\u4ef6\u7684\u6570\u636e\u6d41"},{"location":"android/dataflow/#android","text":"","title":"Android \u89e6\u63a7\u4e8b\u4ef6\u6570\u636e\u6d41"},{"location":"android/dataflow/#_1","text":"","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"android/dataflow/#_2","text":"\u89e6\u6478\u4e8b\u4ef6\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b 1. \u6355\u83b7\u89e6\u63a7\u4e8b\u4ef6\u3002\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u4e0d\u65ad\u7684\u76d1\u542c\u5c4f\u5e55\uff0c\u4e00\u65e6\u6709\u89e6\u6478\u4e8b\u4ef6\uff0c\u5c31\u5c06\u4e8b\u4ef6\u6355\u83b7\u3002 2. \u6d3e\u53d1\u4e8b\u4ef6\u3002\u56e0\u4e3a\u53ef\u80fd\u6709\u591a\u4e2aAPP\u7684\u591a\u4e2a\u754c\u9762\u4e3a\u7528\u6237\u53ef\u89c1\uff0c\u5fc5\u987b\u627e\u5230\u76ee\u6807\u7a97\u53e3\uff0c\u786e\u5b9a\u8fd9\u4e2a\u4e8b\u4ef6\u7a76\u7adf\u901a\u77e5\u90a3\u4e2a\u7a97\u53e3\uff0c\u5e76\u628a\u4e8b\u4ef6\u53d1\u9001\u7ed9\u76ee\u6807\u7a97\u53e3\u3002 3. \u76ee\u6807\u7a97\u53e3\u6d88\u8d39\u4e8b\u4ef6\u3002","title":"\u89e6\u6478\u4e8b\u4ef6\u6a21\u578b"},{"location":"android/dataflow/#_3","text":"InputManagerService InputManagerService \u662f Android \u4e3a\u4e86\u5904\u7406\u5404\u79cd\u7528\u6237\u64cd\u4f5c\u800c\u62bd\u8c61\u7684\u4e00\u4e2a\u670d\u52a1\uff0c\u81ea\u8eab\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a Binder \u670d\u52a1\u5b9e\u4f53\uff0c\u5728 SystemServer \u8fdb\u7a0b\u542f\u52a8\u7684\u65f6\u5019\u5b9e\u4f8b\u5316\uff0c\u5e76\u6ce8\u518c\u5230 ServiceManager \u4e2d\u53bb\u3002 InputManagerService \u521b\u5efa\u4e00\u4e2a \u4e8b\u4ef6\u8bfb\u53d6\u7ebf\u7a0b \uff0c\u521b\u5efa\u4e00\u4e2a \u4e8b\u4ef6\u6d3e\u53d1\u7ebf\u7a0b \u3002 EventHub \u5229\u7528 Linux \u7684 inotify \u548c epoll \u673a\u5236\uff0c\u76d1\u542c\u8bbe\u5907\u4e8b\u4ef6\uff0c\u9762\u5411\u7684\u662f /dev/input \u76ee\u5f55\u4e0b\u7684\u8bbe\u5907\u8282\u70b9\u3002\u901a\u8fc7 EventHub \u7684 getEvents \u53ef\u4ee5\u76d1\u542c\u5e76\u83b7\u5f97\u8be5\u4e8b\u4ef6\u3002 \u5728 new InputManager \u65f6\u5019\uff0c\u4f1a\u65b0\u5efa\u4e00\u4e2a InputReaderThread \u7ebf\u7a0b\u53ca InputDispatcherThread \u7ebf\u7a0b\u3002 \u8fd9\u4e2a Reader \u7ebf\u7a0b\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u901a\u8fc7 EventHub \u7684 getEvents \u83b7\u53d6 Input \u4e8b\u4ef6\u3002 processEventsLocked \u4f1a\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u521d\u6b65\u5c01\u88c5\u4e3a RawEvent. Reader \u91cc\u7684 loopOnce \u65b9\u6cd5\u4f1a\u5728\u8bfb\u53d6\u5230\u4e8b\u4ef6\u540e\uff0c mQueuedListener->flush() \u5373\u5411 InputDispatcherThread \u7ebf\u7a0b\u53d1\u9001\u6d88\u606f\u3002 Dispatcher \u7ebf\u7a0b\u8d77\u521d\u5904\u4e8e\u7761\u7720\u72b6\u6001\uff0c\u63a5\u53d7\u5230\u6d88\u606f\u540e\u88ab\u5524\u9192\uff0c\u5904\u7406\u540e\u7ee7\u7eed\u7761\u7720\u3002 InputManager :: InputManager ( const sp < EventHubInterface >& eventHub , const sp < InputReaderPolicyInterface >& readerPolicy , const sp < InputDispatcherPolicyInterface >& dispatcherPolicy ) { <!-- \u4e8b\u4ef6\u5206\u53d1\u6267\u884c\u7c7b --> mDispatcher = new InputDispatcher ( dispatcherPolicy ); <!-- \u4e8b\u4ef6\u8bfb\u53d6\u6267\u884c\u7c7b --> mReader = new InputReader ( eventHub , readerPolicy , mDispatcher ); initialize (); } void InputManager :: initialize () { mReaderThread = new InputReaderThread ( mReader ); // \u4e8b\u4ef6\u8bfb\u53d6\u7ebf\u7a0b mDispatcherThread = new InputDispatcherThread ( mDispatcher ); // \u4e8b\u4ef6\u6d3e\u53d1\u7ebf\u7a0b } bool InputReaderThread :: threadLoop () { mReader -> loopOnce (); return true ; } void InputReader :: loopOnce () { int32_t oldGeneration ; int32_t timeoutMillis ; bool inputDevicesChanged = false ; Vector < InputDeviceInfo > inputDevices ; { ... <!-- \u76d1\u542c\u4e8b\u4ef6 --> size_t count = mEventHub -> getEvents ( timeoutMillis , mEventBuffer , EVENT_BUFFER_SIZE ); .... <!-- \u5904\u7406\u4e8b\u4ef6 --> processEventsLocked ( mEventBuffer , count ); ... <!-- \u901a\u77e5\u6d3e\u53d1 --> mQueuedListener -> flush (); // \u5411\u5206\u53d1\u7ebf\u7a0b\u53d1\u9001\u6d88\u606f }","title":"\u6355\u83b7\u89e6\u63a7\u4e8b\u4ef6"},{"location":"android/dataflow/#_4","text":"bool InputDispatcherThread :: threadLoop () { mDispatcher -> dispatchOnce (); return true ; } void InputDispatcher :: dispatchOnce () { nsecs_t nextWakeupTime = LONG_LONG_MAX ; { <!-- \u88ab\u5524\u9192 \uff0c \u5904\u7406Input\u6d88\u606f --> if ( ! haveCommandsLocked ()) { dispatchOnceInnerLocked ( & nextWakeupTime ); } ... } nsecs_t currentTime = now (); int timeoutMillis = toMillisecondTimeoutDelay ( currentTime , nextWakeupTime ); <!-- \u7761\u7720\u7b49\u5f85input\u4e8b\u4ef6 --> mLooper -> pollOnce ( timeoutMillis ); } \u5982\u4e0a\u6587\u6240\u8bf4\uff0c\u5728\u65b0\u5efa InputManager \u65f6\u4e5f\u521b\u5efa\u4e86\u4e00\u4e2a\u4e8b\u4ef6\u6d3e\u53d1\u8fdb\u7a0b. InputDispatcherThread \u662f\u4e00\u4e2a Looper \u7ebf\u7a0b\uff0c\u57fa\u4e8e native \u7684 Looper \u5b9e\u73b0\u4e86 Hanlder \u6d88\u606f\u5904\u7406\u6a21\u578b\uff0c\u5982\u679c\u6709 Input \u4e8b\u4ef6\u5230\u6765\u5c31\u88ab\u5524\u9192\u5904\u7406\u4e8b\u4ef6\uff0c\u5904\u7406\u5b8c\u6bd5\u540e\u7ee7\u7eed\u7761\u7720\u7b49\u5f85\u3002 \u8fd9\u91cc dispatchOnceInnerLocked \u662f\u5177\u4f53\u7684\u6d3e\u53d1\u903b\u8f91\u3002\u5bf9\u4e8e\u89e6\u6478\u4e8b\u4ef6\u4f1a\u9996\u5148\u901a\u8fc7 findTouchedWindowTargetsLocked \u627e\u5230\u76ee\u6807 Window, \u8fdb\u800c\u901a\u8fc7 dispatchEventLocked \u5c06\u6d88\u606f\u53d1\u9001\u5230\u76ee\u6807\u7a97\u53e3\u3002 void InputDispatcher :: dispatchOnceInnerLocked ( nsecs_t * nextWakeupTime ) { ... case EventEntry :: TYPE_MOTION : { MotionEntry * typedEntry = static_cast < MotionEntry *> ( mPendingEvent ); ... done = dispatchMotionLocked ( currentTime , typedEntry , & dropReason , nextWakeupTime ); break ; } bool InputDispatcher :: dispatchMotionLocked ( nsecs_t currentTime , MotionEntry * entry , DropReason * dropReason , nsecs_t * nextWakeupTime ) { ... Vector < InputTarget > inputTargets ; bool conflictingPointerActions = false ; int32_t injectionResult ; if ( isPointerEvent ) { <!-- \u5173\u952e\u70b91 \u627e\u5230\u76ee\u6807Window --> injectionResult = findTouchedWindowTargetsLocked ( currentTime , entry , inputTargets , nextWakeupTime , & conflictingPointerActions ); } else { injectionResult = findFocusedWindowTargetsLocked ( currentTime , entry , inputTargets , nextWakeupTime ); } ... <!-- \u5173\u952e\u70b92 \u6d3e\u53d1 --> dispatchEventLocked ( currentTime , entry , inputTargets ); return true ; }","title":"\u4e8b\u4ef6\u6d3e\u53d1"},{"location":"android/dataflow/#_5","text":"Android \u7cfb\u7edf\u80fd\u591f\u540c\u65f6\u652f\u6301\u591a\u5757\u5c4f\u5e55\uff0c\u6bcf\u5757\u5c4f\u5e55\u88ab\u62bd\u8c61\u6210\u4e00\u4e2a DisplayContent \u5bf9\u8c61\uff0c\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a WindowList \u5217\u8868\u5bf9\u8c61\uff0c\u7528\u6765\u8bb0\u5f55\u5f53\u524d\u5c4f\u5e55\u4e2d\u7684\u6240\u6709\u7a97\u53e3\uff0c\u5305\u62ec\u72b6\u6001\u680f\u3001\u5bfc\u822a\u680f\u3001\u5e94\u7528\u7a97\u53e3\u3001\u5b50\u7a97\u53e3\u7b49\u3002 \u6211\u4eec\u53ef\u4ee5\u6839\u636e\u89e6\u6478\u4e8b\u4ef6\u7684\u4f4d\u7f6e\u53ca\u7a97\u53e3\u7684\u5c5e\u6027\u904d\u5386 WindowList \u5217\u8868\u6765\u786e\u5b9a\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230\u54ea\u4e2a\u7a97\u53e3\u3002\uff08\u5224\u65ad\u662f\u5426\u53ef\u89c1\u3001\u662f\u5426\u53ef\u89e6\u6478\u7b49\u4fe1\u606f\uff09","title":"\u627e\u5230\u76ee\u6807\u7a97\u53e3"},{"location":"android/dataflow/#_6","text":"\u76ee\u524d\u6240\u6709\u903b\u8f91\u5728 SystemServer \u8fdb\u7a0b\uff0c\u8981\u901a\u77e5\u7684\u7a97\u53e3\u4f4d\u4e8e APP \u7aef\u7684\u7528\u6237\u8fdb\u7a0b\u3002\u9ad8\u7248\u672c\u7684\u91c7\u7528\u7684\u90fd\u662f Socket \u7684\u901a\u4fe1\u65b9\u5f0f\uff0c\u800c\u6bd4\u8f83\u65e7\u7684\u7248\u672c\u91c7\u7528\u7684\u662f Pipe \u7ba1\u9053\u7684\u65b9\u5f0f\u3002 \u5176\u4e2d\uff0c\u4e24\u7aef\u901a\u4fe1\u7684 Socket, \u5728 APP \u7aef\u5411 WMS \u8bf7\u6c42\u6dfb\u52a0\u7a97\u53e3\u7684\u65f6\u5019\uff0c\u4f1a\u4f34\u968f\u7740 Input \u901a\u9053\u7684\u521b\u5efa\uff0c\u7a97\u53e3\u7684\u6dfb\u52a0\u4e00\u5b9a\u4f1a\u8c03\u7528 ViewRootImpl \u7684 setView \u51fd\u6570\u3002 public void setView ( View view , WindowManager . LayoutParams attrs , View panelParentView ) { ... requestLayout (); if (( mWindowAttributes . inputFeatures & WindowManager . LayoutParams . INPUT_FEATURE_NO_INPUT_CHANNEL ) == 0 ) { <!-- \u521b\u5efaInputChannel\u5bb9\u5668 --> mInputChannel = new InputChannel (); // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 InputChannel } try { mOrigWindowType = mWindowAttributes . type ; mAttachInfo . mRecomputeGlobalAttributes = true ; collectViewAttributes (); <!-- \u6dfb\u52a0\u7a97\u53e3 \uff0c \u5e76\u8bf7\u6c42\u5f00\u8f9fSocket Input\u901a\u4fe1\u901a\u9053 --> res = mWindowSession . addToDisplay ( mWindow , mSeq , mWindowAttributes , getHostVisibility (), mDisplay . getDisplayId (), mAttachInfo . mContentInsets , mAttachInfo . mStableInsets , mAttachInfo . mOutsets , mInputChannel ); // \u8fd9\u91cc\u4f1a\u8f6c\u5316\u4e3a\u5bf9 addWindow \u7684\u8c03\u7528 // Binder \u8c03\u7528 WMS \u7684 addToDisplay \u63a5\u53e3\uff0c\u5e76\u5c06 InputChanel \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u4ee5\u5b8c\u6210\u8d4b\u503c }... <!-- \u76d1\u542c \uff0c \u5f00\u542fInput\u4fe1\u9053 --> if ( mInputChannel != null ) { if ( mInputQueueCallback != null ) { mInputQueue = new InputQueue (); mInputQueueCallback . onInputQueueCreated ( mInputQueue ); } mInputEventReceiver = new WindowInputEventReceiver ( mInputChannel , Looper . myLooper ()); // \u6839\u636e\u8d4b\u503c\u540e\u7684 InputChannel \u5c01\u88c5\u521b\u5efa WindowInputEventReceiver \u5bf9\u8c61\uff0c\u4ee5\u4fbf\u540e\u7eed\u63a5\u6536 Input \u4e8b\u4ef6 } setView \u4e2d\u521b\u5efa\u4e86 InputChannel \u5bb9\u5668\uff0c\u5b83\u662f out \u7c7b\u578b\uff0c\u9700\u8981\u7531\u670d\u52a1\u7aef\u8fdb\u884c\u586b\u5145\u3002 public int addWindow ( Session session , IWindow client , int seq , WindowManager . LayoutParams attrs , int viewVisibility , int displayId , Rect outContentInsets , Rect outStableInsets , Rect outOutsets , InputChannel outInputChannel ) { ... if ( outInputChannel != null && ( attrs . inputFeatures & WindowManager . LayoutParams . INPUT_FEATURE_NO_INPUT_CHANNEL ) == 0 ) { String name = win . makeInputChannelName (); <!-- \u521b\u5efa InputChannelPair , \u5b9e\u73b0\u521b\u5efa socketpair \u5168\u53cc\u5de5\u901a\u4fe1\u4fe1\u9053 --> InputChannel [] inputChannels = InputChannel . openInputChannelPair ( name ); // \u521b\u5efa\u901a\u4fe1\u4fe1\u9053\uff0c\u5e76\u5206\u522b\u586b\u5145\u5230\u5ba2\u6237\u548c\u670d\u52a1\u7684 InputChannel <!-- \u672c\u5730\u7528 --> win . setInputChannel ( inputChannels [ 0 ] ); <!-- APP\u7aef\u7528 --> inputChannels [ 1 ] . transferTo ( outInputChannel ); // \u5c06\u5ba2\u6237\u7aef InputChannel \u8d4b\u503c\u7ed9 outInputChannel, \u5e76 Binder \u56de\u4f20\u7ed9\u5e94\u7528\u8fdb\u7a0b\u4e2d ViewRootImpl \u4e2d <!-- \u6ce8\u518c\u4fe1\u9053\u4e0e\u7a97\u53e3 --> mInputManager . registerInputChannel ( win . mInputChannel , win . mInputWindowHandle ); // mInputWindowHandle.token \u552f\u4e00\u6807\u8bc6\u4e86\u63a5\u6536 Input \u4e8b\u4ef6\u7684 App \u7a97\u53e3 } \u8fd9\u91cc openInputChannelPair \u521b\u5efa\u4e86 socketpair, \u5e76\u5206\u522b\u586b\u5145\u5230 Client \u4e0e Server \u7684 InputChannel \u4e2d\u53bb\u3002\u8ba9 InputManager \u5c06 Input \u901a\u4fe1\u4fe1\u9053\u4e0e\u5f53\u524d\u7684\u7a97\u53e3 ID \u7ed1\u5b9a\uff0c\u6700\u540e\u901a\u8fc7 Binder \u5c06 outInputChannel \u56de\u4f20\u5230 APP \u7aef\u3002WMS \u9700\u8981\u501f\u52a9 Binder \u901a\u4fe1\u5411 APP \u7aef\u56de\u4f20\u6587\u4ef6\u63cf\u8ff0\u7b26 fd. \u7a97\u53e3\u6dfb\u52a0\u6210\u529f\u540e, socketpair \u88ab\u521b\u5efa\uff0c\u88ab\u4f20\u9012\u5230\u4e86 APP \u7aef\uff0c\u4f46\u662f\u4fe1\u9053\u5e76\u672a\u5b8c\u5168\u5efa\u7acb\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u4e3b\u52a8\u7684\u76d1\u542c\u3002 APP \u7aef\u7684\u76d1\u542c\u6d88\u606f\u7684\u624b\u6bb5\u662f\uff1a\u5c06 socket \u6dfb\u52a0\u5230 Looper \u7ebf\u7a0b\u7684 epoll \u6570\u7ec4\u4e2d\u53bb\uff0c\u4e00\u6709\u6d88\u606f\u5230\u6765 Looper \u7ebf\u7a0b\u5c31\u4f1a\u88ab\u5524\u9192\uff0c\u5e76\u83b7\u53d6\u4e8b\u4ef6\u5185\u5bb9\uff0c\u4ece\u4ee3\u7801\u4e0a\u6765\u770b\uff0c\u901a\u4fe1\u4fe1\u9053\u7684\u6253\u5f00\u662f\u4f34\u968f WindowInputEventReceiver \u7684\u521b\u5efa\u6765\u5b8c\u6210\u7684\u3002 \u4fe1\u606f\u5230\u6765, Looper\u6839\u636e fd \u627e\u5230\u5bf9\u5e94\u7684\u76d1\u542c\u5668: NativeInputEventReceiver, \u5e76\u8c03\u7528 handleEvent \u5904\u7406\u5bf9\u5e94\u4e8b\u4ef6\u3002\u4e4b\u540e\u4f1a\u8fdb\u4e00\u6b65\u8bfb\u53d6\u4e8b\u4ef6\uff0c\u5e76\u5c01\u88c5\u6210 Java \u5c42\u5bf9\u8c61\uff0c\u4f20\u9012\u7ed9 Java \u5c42\u3002 int NativeInputEventReceiver :: handleEvent ( int receiveFd , int events , void * data ) { ... if ( events & ALOOPER_EVENT_INPUT ) { JNIEnv * env = AndroidRuntime :: getJNIEnv (); status_t status = consumeEvents ( env , false /*consumeBatches*/ , - 1 , NULL ); mMessageQueue -> raiseAndClearException ( env , \"handleReceiveCallback\" ); return status == OK || status == NO_MEMORY ? 1 : 0 ; } ... status_t NativeInputEventReceiver :: consumeEvents ( JNIEnv * env , bool consumeBatches , nsecs_t frameTime , bool * outConsumedBatch ) { ... for (;;) { uint32_t seq ; InputEvent * inputEvent ; <!-- \u83b7\u53d6\u4e8b\u4ef6 --> status_t status = mInputConsumer . consume ( & mInputEventFactory , consumeBatches , frameTime , & seq , & inputEvent ); ... <!-- \u5904\u7406touch\u4e8b\u4ef6 --> case AINPUT_EVENT_TYPE_MOTION : { MotionEvent * motionEvent = static_cast < MotionEvent *> ( inputEvent ); if (( motionEvent -> getAction () & AMOTION_EVENT_ACTION_MOVE ) && outConsumedBatch ) { * outConsumedBatch = true ; } inputEventObj = android_view_MotionEvent_obtainAsCopy ( env , motionEvent ); break ; } ... \u6700\u540e\u5c31\u662f\u89e6\u6478\u4e8b\u4ef6\u88ab\u5c01\u88c5\u6210\u4e86 InputEvent , \u5e76\u901a\u8fc7 InputEventReceiver \u7684 dispatchInputEvent \u8fdb\u884c\u5904\u7406\u3002InputEventReceiver \u7684 dispatchInputEvent \u65b9\u6cd5\u4f1a\u8c03\u7528 onInputEvent \u5177\u4f53\u5904\u7406 Input event \u89e6\u63a7\u4e8b\u4ef6\u3002","title":"\u53d1\u9001\u4e8b\u4ef6\u5230\u76ee\u6807\u7a97\u53e3"},{"location":"android/dataflow/#_7","text":"","title":"\u76ee\u6807\u7a97\u53e3\u6d88\u8d39\u4e8b\u4ef6"},{"location":"android/dataflow/#ui","text":"\u4ece ViewRootImpl::WindowInputDispatcherReceiver::onInputEvent \u51fd\u6570\u5f00\u59cb, Input \u4e8b\u4ef6\u5148\u540e\u6765\u5230 UI \u7ebf\u7a0b\uff0c\u901a\u8fc7 enqueueInputEvent \u51fd\u6570\u653e\u5165\u672c\u5730\u5f85\u5904\u7406\u961f\u5217\u4e2d\u3002 \u5177\u4f53\u5bf9 Input \u89e6\u63a7\u4e8b\u4ef6\u7684\u5904\u7406\u903b\u8f91\u90fd\u5c01\u88c5\u5728 InputUsage \u7c7b\u4e2d\uff0c\u5728 ViewRootImpl \u521b\u5efa Window \u65f6\u7684 setView \u903b\u8f91\u4e2d\u4f1a\u521b\u5efa\u4e86\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684 InputUsage \u5bf9\u8c61\u4f9d\u6b21\u8fdb\u884c\u4e8b\u4ef6\u5904\u7406\uff0c\u8bbe\u8ba1\u4e0a\u91c7\u7528\u8d23\u4efb\u94fe\u6a21\u5f0f\uff0c\u5c06\u6bcf\u4e2a InputStage \u5b9e\u73b0\u7c7b\u901a\u8fc7 mNext \u53d8\u91cf\u8fde\u63a5\u8d77\u6765\u3002 \u6bcf\u4e2a InputUsage \u4e3b\u8981\u903b\u8f91\u662f\u5728 OnProcess \u51fd\u6570\u4e2d\u5177\u4f53\u5904\u7406\u89e6\u63a7\u4e8b\u4ef6\uff0c\u7136\u540e\u5224\u65ad\u5904\u7406\u662f\u5426\u5b8c\u6210\uff0c\u6ca1\u6709\u5219 onDeliverToNext \u4ea4\u7ed9\u4e0b\u4e00\u4e2a InputUsage \u7ee7\u7eed\u5904\u7406\uff0c\u5426\u5219\u5c31\u8c03\u7528 finishInputEvent \u7ed3\u675f\u4e8b\u4ef6\u3002 public void setView ( View view , WindowManager . LayoutParams attrs , View panelParentView , int userId ) { ... // Set up the input pipeline. CharSequence counterSuffix = attrs . getTitle (); // \u521b\u5efa\u591a\u4e2a\u4e0d\u540c\u7c7b\u578bInputUsage\u4ee5\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u89e6\u63a7\u4e8b\u4ef6 mSyntheticInputStage = new SyntheticInputStage (); // ViewPostImeInputStage\u4e2d\u5c01\u88c5\u6211\u4eec\u5e94\u7528\u4e00\u822c\u89e6\u63a7\u4e8b\u4ef6\u5904\u7406\u903b\u8f91\uff08\u91cd\u8981\uff09 InputStage viewPostImeStage = new ViewPostImeInputStage ( mSyntheticInputStage ); InputStage nativePostImeStage = new NativePostImeInputStage ( viewPostImeStage , \"aq:native-post-ime:\" + counterSuffix ); ... } abstract class InputStage { ... /** * Delivers an event to be processed. */ public final void deliver ( QueuedInputEvent q ) { // \u662f\u5426\u5e26\u6709FLAG_FINISHED\u7684flag\uff0c\u5982\u6709\u5219\u5c06\u4e8b\u4ef6\u5206\u53d1\u7ed9mNext if (( q . mFlags & QueuedInputEvent . FLAG_FINISHED ) != 0 ) { forward ( q ); // \u662f\u5426\u5e94\u8be5\u4e22\u5f03\u4e8b\u4ef6 } else if ( shouldDropInputEvent ( q )) { finish ( q , false ); } else { traceEvent ( q , Trace . TRACE_TAG_VIEW ); final int result ; try { // 1.\u5b9e\u9645\u5904\u7406\u4e8b\u4ef6 result = onProcess ( q ); } finally { Trace . traceEnd ( Trace . TRACE_TAG_VIEW ); } // 2.\u62ff\u5230\u5904\u7406\u4e8b\u4ef6\u7684\u7ed3\u679c\u540e\u51b3\u5b9a\u8fdb\u4e00\u6b65\u884c\u52a8 apply ( q , result ); } } protected void apply ( QueuedInputEvent q , int result ) { if ( result == FORWARD ) { forward ( q ); } else if ( result == FINISH_HANDLED ) { finish ( q , true ); } else if ( result == FINISH_NOT_HANDLED ) { finish ( q , false ); } } protected void finish ( QueuedInputEvent q , boolean handled ) { q . mFlags |= QueuedInputEvent . FLAG_FINISHED ; if ( handled ) { q . mFlags |= QueuedInputEvent . FLAG_FINISHED_HANDLED ; } // \u4ea4\u7ed9\u4e0b\u4e00\u4e2aInputUsage\u7ee7\u7eed\u5904\u7406 forward ( q ); } protected void forward ( QueuedInputEvent q ) { // \u4ea4\u7ed9\u4e0b\u4e00\u4e2aInputUsage\u7ee7\u7eed\u5904\u7406 onDeliverToNext ( q ); } protected void onDeliverToNext ( QueuedInputEvent q ) { if ( DEBUG_INPUT_STAGES ) { Log . v ( mTag , \"Done with \" + getClass (). getSimpleName () + \". \" + q ); } if ( mNext != null ) { // 1.\u4ea4\u7ed9\u4e0b\u4e00\u4e2aInputUsage\u7ee7\u7eed\u5904\u7406 mNext . deliver ( q ); } else { // 2.\u5224\u65ad\u6240\u6709\u7684InputUsage\u90fd\u5904\u7406\u5b8c\u6210\u5219\u8c03\u7528finishInputEvent\u7ed3\u675f\u89e6\u63a7\u4e8b\u4ef6 finishInputEvent ( q ); } } } \u5176\u4e2d, onProcess \u51fd\u6570\u4f1a\u628a\u4e8b\u4ef6\u5206\u53d1\u5230 View \u6811\u7684\u6839\u8282\u70b9 DecorView \u7684 dispatchTouchEvent \u51fd\u6570\u4e2d\uff0c\u5177\u4f53\u6d41\u7a0b\u89c1 2.3.2. \u5904\u7406\u5b8c\u6210\u540e\uff0c\u8c03\u7528 finishInputEvent \u4f1a\u901a\u8fc7 Client \u7aef\u7684 InputChannel \u7684 sendMessage \u901a\u77e5 InputDispatcher. \u670d\u52a1\u7aef\u7684 InputDispatcher \u5728\u6536\u5230\u6d88\u606f\u540e\u5c06\u6b64\u89e6\u63a7\u4e8b\u4ef6\u79fb\u51fa\u7b49\u5f85\u961f\u5217\u3002","title":"UI \u7ebf\u7a0b\u5bf9\u89e6\u63a7\u4e8b\u4ef6\u7684\u5206\u53d1\u5904\u7406"},{"location":"android/dataflow/#view","text":"\u5176\u4e2d Window.Callback \u6307\u5411\u5f53\u524d Activity. \u8fd9\u91cc\u6211\u4eec\u4f1a\u628a\u4e8b\u4ef6\u4ea4\u7ed9 Activity \u7684 dispatchTouchEvent \u5904\u7406\u4e8b\u4ef6\u3002 @Override public boolean dispatchTouchEvent ( MotionEvent ev ) { final Window . Callback cb = mWindow . getCallback (); // \u4ea4\u7ed9\u5e94\u7528 Activity \u7684 dispatchTouchEvent \u5904\u7406\u89e6\u63a7\u4e8b\u4ef6 return cb != null && ! mWindow . isDestroyed () && mFeatureId < 0 ? cb . dispatchTouchEvent ( ev ) : super . dispatchTouchEvent ( ev ); } Activity \u4e2d\u4f1a\u5148\u5c06\u4e8b\u4ef6\u4ea4\u7ed9 PhoneWindow \u5904\u7406\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4ea4\u7ed9 DecorView \u4e2d\u5904\u7406. DecorView \u4f1a\u7ee7\u7eed\u628a\u4e8b\u4ef6\u4ea4\u7ed9\u5176\u7236\u7c7b ViewGroup \u5904\u7406\u3002 ViewGroup \u4e2d\u7684\u4e8b\u4ef6\u5206\u53d1\u7684\u4e3b\u8981\u903b\u8f91\u5c31\u662f \u5224\u65ad\u5b50 View \u4e2d\u662f\u5426\u8bbe\u7f6e\u4e86\u7981\u6b62\u7236 ViewGroup \u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6\u3002 \uff08\u89e3\u51b3\u6ed1\u52a8\u51b2\u7a81\u7684\u4e00\u4e2a\u4e3b\u8981\u601d\u8def\u5c31\u662f\u5b50 View \u901a\u8fc7\u8c03\u7528requestDisallowInterceptTouchEvent \u7981\u6b62\u7236 ViewGroup \u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6\uff0c\u4ece\u800c\u5c06\u4e8b\u4ef6\u7edf\u4e00\u4ea4\u7ed9\u5b50 View \u5904\u7406\u4ee5\u907f\u514d\u4ea7\u751f\u6ed1\u52a8\u51b2\u7a81\uff09 \u82e5\u6ca1\u6709, onInterceptTouchEvent \u5224\u65ad\u662f\u5426\u62e6\u622a\u6b64\u4e8b\u4ef6\uff08\u9ed8\u8ba4\u4e3a False)\u3002 \u4e0d\u62e6\u622a\uff0c\u5219\u904d\u5386\u6240\u6709\u5b50 View \u627e\u5230\u5339\u914d\u7684\u5b50 View, \u7136\u540e\u901a\u8fc7 dispatchTransformedTouchEvent \u4ea4\u7ed9\u8be5\u5b50 View \u7684 dispatchTouchEvent \u7ee7\u7eed\u5904\u7406\u3002 public boolean dispatchTouchEvent ( MotionEvent ev ) { ... if ( onFilterTouchEventForSecurity ( ev )) { ... if ( actionMasked == MotionEvent . ACTION_DOWN || mFirstTouchTarget != null ) { // 1.\u5224\u65ad\u5b50View\u4e2d\u662f\u5426\u8bbe\u7f6e\u4e86\u7981\u6b62\u7236ViewGroup\u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6\uff0c\u89e3\u51b3\u6ed1\u52a8\u51b2\u7a81\u7684\u5173\u952e final boolean disallowIntercept = ( mGroupFlags & FLAG_DISALLOW_INTERCEPT ) != 0 ; if ( ! disallowIntercept ) { // onInterceptTouchEvent\u4e2d\u5224\u65adViewGroup\u662f\u5426\u62e6\u622a\u89e6\u63a7\u4e8b\u4ef6 intercepted = onInterceptTouchEvent ( ev ); } } ... if ( ! canceled && ! intercepted ) { if ( actionMasked == MotionEvent . ACTION_DOWN || ( split && actionMasked == MotionEvent . ACTION_POINTER_DOWN ) || actionMasked == MotionEvent . ACTION_HOVER_MOVE ) { ... if ( newTouchTarget == null && childrenCount != 0 ) { ... final View [] children = mChildren ; // 2.\u5bf9\u6240\u6709\u5b50View\u8fdb\u884c\u904d\u5386 for ( int i = childrenCount - 1 ; i >= 0 ; i -- ) { ... if ( ! child . canReceivePointerEvents () || ! isTransformedTouchPointInView ( x , y , child , null )) { // 3.\u5982\u679c\u6b64View\u65e0\u6cd5\u63a5\u6536\u4e8b\u4ef6\u6216\u8005\u5f53\u524d\u4e8b\u4ef6\u7684\u6216\u843d\u70b9\u4e0d\u5728\u8fd9\u4e2aView\u533a\u57df\u5185\u5219\u8fd4\u56de\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af continue ; } ... // 4.\u8fd9\u91cc\u5c31\u4f1a\u6267\u884c\u5b50View\u4e8b\u4ef6\u5206\u53d1\u5904\u7406\u903b\u8f91\u4e86 if ( dispatchTransformedTouchEvent ( ev , false , child , idBitsToAssign )) { ... break ; } ... } } ... } } ... } public boolean onInterceptTouchEvent ( MotionEvent ev ) { if ( ev . isFromSource ( InputDevice . SOURCE_MOUSE ) && ev . getAction () == MotionEvent . ACTION_DOWN && ev . isButtonPressed ( MotionEvent . BUTTON_PRIMARY ) && isOnScrollbarThumb ( ev . getX (), ev . getY ())) { return true ; } // ViewGroup\u9ed8\u8ba4\u4e0d\u62e6\u622a\u4e8b\u4ef6 return false ; } private boolean dispatchTransformedTouchEvent ( MotionEvent event , boolean cancel , View child , int desiredPointerIdBits ) { ... // Perform any necessary transformations and dispatch. if ( child == null ) { handled = super . dispatchTouchEvent ( transformedEvent ); } else { ... // \u8c03\u7528\u5b50View\u7684dispatchTouchEvent\u7ee7\u7eed\u8fdb\u884c\u4e8b\u4ef6\u5206\u53d1 handled = child . dispatchTouchEvent ( transformedEvent ); } ... } \u4e8b\u4ef6\u4f20\u9012\u5230 View \u7684 dispatchTouchEvent \u540e \u5224\u65ad\u8be5 View \u662f\u5426\u8bbe\u7f6e\u4e86\u89e6\u6478\u76d1\u542c\uff0c\u5373\u662f\u5426\u8c03\u7528\u8fc7 setOnTouchListener \u65b9\u6cd5\uff0c\u5982\u679c\u6709\u5219\u5c06\u4e8b\u4ef6\u4f20\u5165\u5176 onTouch \u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c \u6ca1\u6709\u8bbe\u7f6e\uff0c\u5219\u4f1a\u8c03\u7528 View \u7684 onTouchEvent \u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u4e2d\u4f1a\u6709\u6761\u4ef6\u7684\u8c03\u7528 onClick public boolean dispatchTouchEvent ( MotionEvent event ) { ... boolean result = false ; if ( onFilterTouchEventForSecurity ( event )) { ... // 1.\u5224\u65ad\u662f\u5426\u8c03\u7528\u8fc7setOnTouchListener\u65b9\u6cd5\uff0c\u5982\u679c\u6709\u5219\u5c06\u4e8b\u4ef6\u4f20\u5165\u5176onTouch\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c if ( li != null && li . mOnTouchListener != null && ( mViewFlags & ENABLED_MASK ) == ENABLED && li . mOnTouchListener . onTouch ( this , event )) { result = true ; } // 2.onTouchEvent\u4e2d\u5224\u65ad\u662f\u5426\u6d88\u8d39\u89e6\u63a7\u4e8b\u4ef6 if ( ! result && onTouchEvent ( event )) { result = true ; } } ... return result ; }","title":"View \u7684\u89e6\u63a7\u4e8b\u4ef6\u5206\u53d1\u673a\u5236"},{"location":"dip/","text":"\u56fe\u50cf\u4fe1\u606f\u5904\u7406 \u00b6 Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u56fe\u50cf\u4fe1\u606f\u5904\u7406\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u6559\u6750: \u672a\u77e5 \u8001\u5e08: \u5b8b\u660e\u9ece/TA: \u80e1\u51ef\u6587","title":"\u56fe\u50cf\u4fe1\u606f\u5904\u7406"},{"location":"dip/#_1","text":"Abstract \u6d59\u6c5f\u5927\u5b66 \u201c\u56fe\u50cf\u4fe1\u606f\u5904\u7406\u201d \u8bfe\u7a0b\u53ca\u76f8\u5173\u77e5\u8bc6\u7b14\u8bb0 \u6559\u6750: \u672a\u77e5 \u8001\u5e08: \u5b8b\u660e\u9ece/TA: \u80e1\u51ef\u6587","title":"\u56fe\u50cf\u4fe1\u606f\u5904\u7406"},{"location":"dip/dip1/","text":"Introduction \u00b6 Digital Image Representation \u00b6 \u6bcf\u4e2a\u7070\u5ea6\u56fe\u50cf\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6216\u8005\u77e9\u9635 \u7070\u5ea6\u56fe\u50cf(grayscale image)\u4e00\u822c\u6bcf\u4e2a\u50cf\u7d20\uff08pixel\uff09\u7528\u4e00\u4e2a\u5b57\u8282\uff088bit\uff09\u8868\u793a\uff0c\u6b64\u65f6\u6700\u5927\u80fd\u8868\u793a[0..255]\u5171256\u4e2a\u7070\u5ea6\u7ea7\u3002 32 \u4f4d\u591a\u4e86\u4e00\u4e2a\u963f\u5c14\u6cd5\u901a\u9053, \u7528\u6765\u8868\u793a\u900f\u660e\u5ea6. Image Format \u00b6 \u76ee\u7684: \u5b58\u50a8\u56fe\u50cf\u4fe1\u606f \u57fa\u4e8e\u50cf\u7d20, \u77e9\u5f62\u533a\u57df. \u4e0d\u540c\u7684\u56fe\u50cf\u683c\u5f0f\u548c\u64cd\u4f5c\u7cfb\u7edf, \u8f6f\u4ef6\u6709\u5173. \u7f16\u7801\u65b9\u6cd5: \u6709\u7684\u6709\u538b\u7f29, \u5305\u62ec\u6709\u635f\u538b\u7f29(\u4fe1\u606f\u6709\u635f\u5931), \u65e0\u635f\u538b\u7f29 \u5e38\u89c1\u683c\u5f0f: bmp, jpeg, tiff, gif, png... Info \u624b\u673a\u91cc\u4e00\u822c\u662f jpeg. tiff \u4e3b\u8981\u7528\u4e8e\u5730\u7406\u4fe1\u606f\u7cfb\u7edf. gif \u662f\u52a8\u6001\u7684. \u4e92\u8054\u7f51\u4e00\u822c\u662f png. BMP Format \u00b6 Windows \u7cfb\u7edf\u91cc\u7684\u6807\u51c6\u5f62\u5f0f, \u6709\u65f6\u88ab\u5b58\u4e3a .dib \u6587\u4ef6. \u5927\u90e8\u5206 BMP \u6587\u4ef6\u662f\u4e0d\u538b\u7f29\u7684\u5f62\u5f0f, \u4f46\u5b83\u672c\u8eab\u8fd8\u662f\u652f\u6301\u56fe\u50cf\u538b\u7f29\u7684\uff0c\u5982 rle \u683c\u5f0f\uff08\u884c\u7a0b\u957f\u5ea6\u7f16\u7801\uff0crunlength encoding\uff09\u538b\u7f29\u683c\u5f0f\u7b49 \u56fe\u50cf\u6587\u4ef6\u5934 : bfType : \u8bf4\u660e\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u8be5\u503c\u5fc5\u9700\u662f0x4D42\uff0c\u4e5f\u5c31\u662f\u5b57\u7b26'BM'.(C \u8bed\u8a00\u53ef\u7528 fopen \u8bfb) bfSize : \u8bf4\u660e\u8be5\u4f4d\u56fe\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u7528\u5b57\u8282\u4e3a\u5355\u4f4d bfReserved1 : \u4fdd\u7559\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a0 bfReserved2 : \u4fdd\u7559\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a0 bfOffBits : \u8bf4\u660e\u4ece\u6587\u4ef6\u5934\u5f00\u59cb\u5230\u5b9e\u9645\u7684\u56fe\u8c61\u6570\u636e\u4e4b\u95f4\u7684\u5b57\u8282\u7684\u504f\u79fb\u91cf\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u56e0\u4e3a\u4f4d\u56fe\u4fe1\u606f\u5934\u548c\u8c03\u8272\u677f\u7684\u957f\u5ea6\u4f1a\u6839\u636e\u4e0d\u540c\u60c5\u51b5\u800c\u53d8\u5316\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e2a\u504f\u79fb\u503c\u8fc5\u901f\u7684\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u4f4d\u6570\u636e. \u56fe\u50cf\u4fe1\u606f\u5934 : biSize \u8bf4\u660e BITMAPINFOHEADER(\u56fe\u50cf\u4fe1\u606f\u5934) \u7ed3\u6784\u6240\u9700\u8981\u7684\u5b57\u6570. biWidth \u8bf4\u660e\u56fe\u8c61\u7684\u5bbd\u5ea6\uff0c\u4ee5\u8c61\u7d20\u4e3a\u5355\u4f4d. biHeight \u8bf4\u660e\u56fe\u8c61\u7684\u9ad8\u5ea6\uff0c\u4ee5\u8c61\u7d20\u4e3a\u5355\u4f4d. \u6ce8\uff1a\u8fd9\u4e2a\u503c\u9664\u4e86\u7528\u4e8e\u63cf\u8ff0\u56fe\u50cf\u7684\u9ad8\u5ea6\u4e4b\u5916\uff0c\u5b83\u8fd8\u6709\u53e6\u4e00\u4e2a\u7528\u5904\uff0c\u5c31\u662f\u6307\u660e\u8be5\u56fe\u50cf\u662f\u5012\u5411\u7684\u4f4d\u56fe\uff0c\u8fd8\u662f\u6b63\u5411\u7684\u4f4d\u56fe\u3002\u5982\u679c\u8be5\u503c\u662f\u4e00\u4e2a\u6b63\u6570\uff0c\u8bf4\u660e\u56fe\u50cf\u662f\u5012\u5411\u7684(\u5934\u671d\u4e0a\u811a\u671d\u4e0b)\uff0c\u5982\u679c\u8be5\u503c\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u5219\u8bf4\u660e\u56fe\u50cf\u662f\u6b63\u5411\u7684\u3002\u5927\u591a\u6570\u7684BMP\u6587\u4ef6\u90fd\u662f\u5012\u5411\u7684\u4f4d\u56fe\uff0c\u4e5f\u5c31\u662f\u65f6\uff0c\u9ad8\u5ea6\u503c\u662f\u4e00\u4e2a\u6b63\u6570.(\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u4f1a\u63d0\u524d\u5904\u7406\u4ee5\u4fdd\u8bc1\u6211\u4eec\u770b\u5230\u7684\u662f\u6b63\u5411\u7684) biPlanes \u4e3a\u76ee\u6807\u8bbe\u5907\u8bf4\u660e\u4f4d\u9762\u6570\uff0c\u5176\u503c\u5c06\u603b\u662f\u88ab\u8bbe\u4e3a 1. biBitCount \u6bcf\u4e2a\u50cf\u7d20\u591a\u5c11\u4f4d. \u5176\u503c\u4e3a1\u30014\u30018\u300116\u300124\u3001\u6216 32. \u5982\u679c\u50cf\u7d20\u5341\u516d\u4f4d, \u5373\u4e3a\u4f2a\u5f69\u8272(\u4ecb\u4e8e\u9ed1\u767d\u548c\u5f69\u8272\u4e4b\u95f4) biCompression \u8bf4\u660e\u56fe\u8c61\u6570\u636e\u538b\u7f29\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ea\u8ba8\u8bba\u6ca1\u6709\u538b\u7f29\u7684\u7c7b\u578b\uff1aBI_RGB. biSizeImage \u8bf4\u660e\u56fe\u8c61\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d. \u5f53\u7528 BI_RGB \u683c\u5f0f\u65f6\uff0c\u53ef\u8bbe\u7f6e\u4e3a 0. biXPelsPerMeter/biYPelsPerMeter \u6c34\u5e73/\u5782\u76f4\u65b9\u5411\u5206\u8fa8\u7387, \u6bcf\u7c73\u6709\u591a\u5c11\u4e2a\u50cf\u7d20. \u50cf\u7d20\u4e0d\u662f\u8d8a\u591a\u8d8a\u597d, \u800c\u662f\u9897\u7c92\u8d8a\u5c0f\u8d8a\u597d. biClrUsd \u4f4d\u56fe\u4e2d\u5b9e\u9645\u8981\u4f7f\u7528\u7684\u989c\u8272\u7d22\u5f15\u7684\u6570\u91cf.(0 \u8bf4\u660e\u8981\u4f7f\u7528\u6240\u6709\u8c03\u8272\u677f\u9879). biClrImportant \u8bf4\u660e\u5bf9\u56fe\u8c61\u663e\u793a\u6709\u91cd\u8981\u5f71\u54cd\u7684\u989c\u8272\u7d22\u5f15\u7684\u6570\u76ee\uff0c\u5982\u679c\u662f 0\uff0c\u8868\u793a\u90fd\u91cd\u8981. \u5f53\u4e0d\u5f97\u4e0d\u629b\u5f03\u989c\u8272\u65f6, \u4f1a\u5148\u628a\u4e0d\u91cd\u8981\u7684\u989c\u8272\u4e22\u6389. \u8c03\u8272\u677f(palette) . \u4e00\u4e2a\u5b57\u8282\u8868\u793a\u84dd\u8272, \u4e00\u4e2a\u5b57\u8282\u8868\u793a\u7eff\u8272, \u4e00\u4e2a\u5b57\u8282\u8868\u793a\u7ea2\u8272, \u4e00\u4e2a\u5b57\u8282\u603b\u662f 0.(BGR) \u5185\u5b58\u5145\u8db3, \u5f80\u5f80\u4e0d\u518d\u9700\u8981\u8c03\u8272\u677f, \u76f4\u63a5\u5b58\u6570\u636e. \u4f4d\u56fe\u6570\u636e(Bitmap data) \u6bcf\u4e00\u884c\u7684\u5b57\u8282\u6570\u5fc5\u987b\u662f4\u7684\u6574\u500d\u6570\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u9700\u8981\u8865\u9f50\u3002 \u4e00\u822c\u6765\u8bf4\uff0c.bMP\u6587\u4ef6\u7684\u6570\u636e\u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u6587\u4ef6\u4e2d\u6700\u5148\u8bfb\u5230\u7684\u662f\u56fe\u8c61\u6700\u4e0b\u9762\u4e00\u884c\u7684\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u8c61\u7d20\uff0c\u7136\u540e\u662f\u5de6\u8fb9\u7b2c\u4e8c\u4e2a\u8c61\u7d20\u2026\u2026\u63a5\u4e0b\u6765\u662f\u5012\u6570\u7b2c\u4e8c\u884c\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u8c61\u7d20\uff0c\u5de6\u8fb9\u7b2c\u4e8c\u4e2a\u8c61\u7d20\u2026\u2026\u4f9d\u6b21\u7c7b\u63a8 \uff0c\u6700\u540e\u5f97\u5230\u7684\u662f\u6700\u4e0a\u9762\u4e00\u884c\u7684\u6700\u53f3\u4e00\u4e2a\u8c61\u7d20\u3002 JPEG \u00b6 \u538b\u7f29\u7b56\u7565\uff1a\u6839\u636e\u538b\u7f29\u6bd4\u8981\u6c42\uff0c\u4ece\u9ad8\u9891\u5230\u4f4e\u9891\u9010\u6b65\u524a\u51cf\u4fe1\u606f \u597d\u5904 \u9ad8\u9891\u4fe1\u606f\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5927\uff0c\u51cf\u5c11\u9ad8\u9891\u4fe1\u606f\u66f4\u5bb9\u6613\u83b7\u5f97\u9ad8\u538b\u7f29\u6bd4\uff1b \u4f4e\u9891\u4fe1\u606f\u53ef\u4ee5\u4fdd\u7559\u7269\u4f53\u7684\u57fa\u672c\u8f6e\u5ed3\u548c\u8272\u5f69\u5206\u5e03\uff0c\u6700\u5927\u9650\u5ea6\u7ef4\u6301\u56fe\u50cf\u8d28\u91cf\u3002 \u9002\u5408\u7528\u4e8e\u4e92\u8054\u7f51 \u4e0d\u9002\u5408\u7528\u4e8e\u7ebf\u6761\u753b\u3001\u6587\u5b57\u3001\u56fe\u6807\u7b49\uff0c\u5176\u6709\u635f\u538b\u7f29\u4f1a\u5bfc\u81f4\u8fd9\u7c7b\u5bf9\u8c61\u7684\u7455\u75b5\u4e25\u91cd TIFF \u00b6 TIFF\u662fTagged Image File Format\u7684\u7f29\u5199\uff0c\u662f\u4e00\u4e2a\u5e7f\u4e3a\u5e94\u7528\u7684\u5149\u6805\u56fe\u50cf\u6587\u4ef6\u683c\u5f0f\uff0c\u5b83\u7684\u6765\u6e90\u6709\uff1a\u626b\u63cf\u4eea\u3001CAD\u7cfb\u7edf\u3001\u5730\u7406\u4fe1\u606f TIFF\u662f\u4e00\u4e2a\u975e\u5e38\u7a33\u5b9a\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u6709\u5f88\u957f\u7684\u5e94\u7528\u5386\u53f2\uff0c\u6709\u516c\u5171\u7684\u8f6f\u4ef6\u5e93\u6765\u8bfb\u5199TIFF\u683c\u5f0f\u7684\u56fe\u50cf\uff08\u652f\u6301\u5404\u79cd\u64cd\u4f5c\u7cfb\u7edf\uff09 \u652f\u6301\u4ece\u9ad8\u7aef\u5230\u4f4e\u7aef\u7684\u8bbe\u5907 \u53ef\u6269\u5c55\u6027\u5f3a\uff0c\u652f\u6301\u516c\u5171\u548c\u79c1\u7528\u7684\u6807\u8bb0\u7ed3\u6784\uff08\u6bcf\u4e2a\u516c\u53f8\u6709\u81ea\u5df1\u79c1\u6709\u7684\u90e8\u5206\uff09 \u652f\u6301\u5404\u79cd\u538b\u7f29\u683c\u5f0f \u6709\u516c\u5171\u8f6f\u4ef6\u5e93\u652f\u6301 \u4e8c\u503c\u56fe\u3001\u7070\u5ea6\u56fe\u3001\u8c03\u8272\u677f\u3001\u771f\u5f69\u8272\u3001\u5176\u4ed6\u6269\u5c55 GIF \u00b6 Graphics Interchange Format \u91c7\u7528\u590d\u6742\u7684 LZW \u7f16\u7801\u65b9\u5f0f \u4e00\u4e2a GIF \u6587\u4ef6\u53ef\u4ee5\u5b58\u50a8\u591a\u5e45\u56fe\u50cf \u5e26\u6709\u8272\u5f69\u8868\uff08\u5168\u5c40\u3001\u5c40\u90e8\u8272\u5f69\u8868\uff09 \u652f\u6301\u56fe\u50cf\u5b9a\u5e8f\u663e\u793a\u6216\u8986\u76d6(\u64ad\u653e\u6b21\u5e8f\uff0c\u5982\u4ece\u540e\u5f80\u524d) \u53ef\u4ee5\u9519\u884c\u5b58\u653e \u652f\u6301\u6587\u672c\u8986\u76d6\u5d4c\u5165 Basic Principle of Imaging \u00b6 \u901a\u8fc7\u4f7f\u7528\u900f\u955c\u53ef\u4ee5\u4f1a\u805a\u66f4\u591a\u7684\u5149\u7ebf\u5230\u4e00\u4e2a\u6210\u50cf\u70b9\uff0c\u53ea\u662f\u53ea\u6709\u5728\u7279\u6b8a\u7684\u4f4d\u7f6e\u4e0a\u624d\u80fd\u8fbe\u5230\u8fd9\u4e2a\u76ee\u6807\uff0c\u5373\u5927\u5bb6\u4ee5\u524d\u5c31\u5b66\u4e60\u8fc7\u7684\u900f\u955c\u805a\u7126\u3002\u4f4d\u4e8e\u5408\u9002\u8ddd\u79bb\u7684\u7269\u4f53\u70b9\u53ef\u4ee5\u6210\u6e05\u6670\u50cf\uff0c\u5176\u4ed6\u7684\u70b9\u5219\u4f1a\u4ea7\u751f\u5f25\u6563\u5706\u3002 \u901a\u8fc7\u6539\u53d8\u955c\u5934\u7684\u5f62\u72b6\u53ef\u4ee5\u6539\u53d8\u805a\u7126\u65f6\u7684\u7269\u4f53\u70b9\u6240\u9700\u8981\u7684\u8ddd\u79bb\u3002 \u5f25\u6563\u5706 (circle of confusion) \uff1a\u5728\u7126\u70b9\u524d\u540e\uff0c\u5149\u7ebf\u5f00\u59cb\u805a\u96c6\u548c\u6269\u6563\uff0c\u70b9\u7684\u5f71\u50cf\u53d8\u6a21\u7cca\uff0c\u5f62\u6210\u4e00\u4e2a\u6269\u5927\u7684\u5706\u3002\u5982\u679c\u5f25\u6563\u5706\u7684\u76f4\u5f84\u5c0f\u4e8e\u4eba\u773c\u7684\u9274\u522b\u80fd\u529b\uff0c\u5728\u4e00\u5b9a\u8303\u56f4\u5185\u5b9e\u9645\u5f71\u50cf\u4ea7\u751f\u7684\u6a21\u7cca\u662f\u4e0d\u80fd\u8fa8\u8ba4\u7684\u3002\u4e0d\u80fd\u8fa8\u8ba4\u7684\u76f4\u5f84\u53eb\u505a\u5bb9\u8bb8\u5f25\u6563\u5706\u3002\u7126\u70b9\u524d\u540e\u5404\u6709\u4e00\u4e2a\u5bb9\u8bb8\u5f25\u6563\u5706\u3002\u5bf9\u4e8e6\u5bf8\u7167\u7247\uff0c\u89c2\u5bdf\u8ddd\u79bb25\uff0d30cm \uff0c\u5927\u6982\u662f\u5e95\u7247\u5bf9\u89d2\u7ebf1/1000-1/1500\uff0c \u6570\u7801\u76f8\u673a\u7684\u6210\u50cf\u8fc7\u7a0b\uff1a \u5f53\u4f7f\u7528\u6570\u7801\u76f8\u673a\u62cd \u5f53CCD\u66dd\u5149\u540e\uff0c\u5149\u7535\u4e8c\u6781\u7ba1\u53d7\u5230\u5149\u7ebf\u7684\u6fc0\u53d1\u800c\u91ca\u653e\u51fa\u7535\u8377\uff0c\u751f\u6210\u611f\u5149\u5143\u4ef6\u7684\u7535\u4fe1\u53f7\u3002\u6444\u666f\u7269\u65f6\uff0c\u666f\u7269\u53cd\u5c04\u7684\u5149\u7ebf\u901a\u8fc7\u6570\u7801\u76f8\u673a\u7684\u955c\u5934\u900f\u5c04\u5230CCD\u4e0a\u3002 CCD\u63a7\u5236\u82af\u7247\u5229\u7528\u611f\u5149\u5143\u4ef6\u4e2d\u7684\u63a7\u5236\u4fe1\u53f7\u7ebf\u8def\u5bf9\u53d1\u5149\u4e8c\u6781\u7ba1\u4ea7\u751f\u7684\u7535\u6d41\u8fdb\u884c\u63a7\u5236\uff0c\u7531\u7535\u6d41\u4f20\u8f93\u7535\u8def\u8f93\u51fa\uff0cCCD\u4f1a\u5c06\u4e00\u6b21\u6210\u50cf\u4ea7\u751f\u7684\u7535\u4fe1\u53f7\u6536\u96c6\u8d77\u6765\uff0c\u7edf\u4e00\u8f93\u51fa\u5230\u653e\u5927\u5668\u3002 \u7ecf\u8fc7\u653e\u5927\u548c\u6ee4\u6ce2\u540e\u7684\u7535\u4fe1\u53f7\u88ab\u4f20\u9001\u5230ADC\uff0c\u7531ADC\u5c06\u7535\u4fe1\u53f7\uff08\u6a21\u62df\u4fe1\u53f7\uff09\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0c\u6570\u503c\u7684\u5927\u5c0f\u548c\u7535\u4fe1\u53f7\u7684\u5f3a\u5ea6\u4e0e\u7535\u538b\u7684\u9ad8\u4f4e\u6210\u6b63\u6bd4\uff0c\u8fd9\u4e9b\u6570\u503c\u5176\u5b9e\u4e5f\u5c31\u662f\u56fe\u50cf\u7684\u6570\u636e\u3002 \u6b64\u65f6\u8fd9\u4e9b\u56fe\u50cf\u6570\u636e\u8fd8\u4e0d\u80fd\u76f4\u63a5\u751f\u6210\u56fe\u50cf\uff0c\u8fd8\u8981\u8f93\u51fa\u5230DSP\uff08\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668\uff09\u4e2d\uff0c\u5728DSP\u4e2d\uff0c\u5c06\u4f1a\u5bf9\u8fd9\u4e9b\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u8272\u5f69\u6821\u6b63\u3001\u767d\u5e73\u8861\u5904\u7406\uff0c\u5e76\u7f16\u7801\u4e3a\u6570\u7801\u76f8\u673a\u6240\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\u3001\u5206\u8fa8\u7387\uff0c\u7136\u540e\u624d\u4f1a\u88ab\u5b58\u50a8\u4e3a\u56fe\u50cf\u6587\u4ef6\u3002 \u5f53\u5b8c\u6210\u4e0a\u8ff0\u6b65\u9aa4\u540e\uff0c\u56fe\u50cf\u6587\u4ef6\u5c31\u4f1a\u88ab\u4fdd\u5b58\u5230\u5b58\u50a8\u5668\u4e0a,\u6211\u4eec\u5c31\u53ef\u4ee5\u6b23\u8d4f\u4e86\u3002 Light and Color \u00b6 \u8272\u5f69 \u8272\u5f69\u53ef\u4ee5\u5206\u4e3a \u5f69\u8272 \uff08chromatic color\uff09\u548c \u6d88\u8272 \uff08achromatic color\uff09\u4e24\u5927\u7c7b\u3002 \u5f69\u8272 \u662f\u6307\u7ea2\u3001\u9ec4\u3001\u84dd\u7b49\u5355\u8272\u4ee5\u53ca\u5b83\u4eec\u7684\u6df7\u5408\u8272\u3002\u5f69\u8272\u7269\u4f53\u5bf9\u5149\u8c31\u5404\u6ce2\u957f\u7684\u53cd\u5c04\u5177\u6709\u9009\u62e9\u6027\uff0c\u6240\u4ee5\u5b83\u4eec\u5728\u767d\u5149\u7167\u5c04\u4e0b\u5448\u73b0\u51fa\u4e0d\u540c\u7684\u989c\u8272\u3002 \u6d88\u8272 \uff0c\u53c8\u79f0\u975e\u5f69\u8272\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684 \u7070\u5ea6 \uff0c\u662f\u6307\u767d\u8272\uff0c\u9ed1\u8272\u4ee5\u53ca\u5404\u79cd\u6df1\u6d45\u4e0d\u540c\u7684\u7070\u8272\u3002\u6d88\u8272\u7269\u4f53\u5bf9\u5149\u8c31\u5404\u6ce2\u957f\u7684\u53cd\u5c04\u6ca1\u6709\u9009\u62e9\u6027\uff0c\u5b83\u4eec\u662f\u4e2d\u6027\u8272\u3002 \u8272\u89c9 \u8272\u89c9 \u662f\u6307\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u7ebf\u4f5c\u7528\u4e8e\u89c6\u7f51\u819c\u800c\u5728\u5927\u8111\u4e2d\u5f15\u8d77\u7684\u611f\u89c9\u3002\u4eba\u773c\u53ef\u89c1\u5149\u7ebf\u7684\u6ce2\u957f\u662f390nm\uff5e780nm\uff0c\u4e00\u822c\u53ef\u8fa8\u51fa\u5305\u62ec\u7d2b\u3001\u84dd\u3001\u9752\u3001\u7eff\u3001\u9ec4\u3001\u6a59\u3001\u7ea27\u79cd\u4e3b\u8981\u989c\u8272\u5728\u5185\u7684120\uff5e180\u79cd\u4e0d\u540c\u7684\u989c\u8272\u3002 \u89c6\u7f51\u819c \u89c6\u7f51\u819c\u662f\u4eba\u773c\u4e2d\u6700\u91cd\u8981\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u5c31\u50cf\u76f8\u673a\u91cc\u7684\u611f\u5149\u5e95\u7247\uff0c\u4e13\u95e8\u8d1f\u8d23\u611f\u5149\u6210\u50cf\u3002\u6355\u6349\u5149\u5e76\u4ea7\u751f\u56fe\u50cf\u3002 \u77b3\u5b54\u53ef\u4ee5 \u653e\u5927\u653e\u5c0f ---- \u5149\u5708 \u8fd9\u91cc\u6709\u4e24\u79cd\u89c6\u89c9\u7ec6\u80de \u9525\u5f62 \u6570\u91cf\u5c11, \u4f46\u53ef\u4ee5\u533a\u5206\u8272\u5f69(\u524d\u63d0: \u5149\u7ebf\u6bd4\u8f83\u5145\u8db3\uff0c\u5f3a\u5149\u624d\u80fd\u6fc0\u53d1) \u6746\u72b6 \u6570\u91cf\u591a, \u5bf9\u5149\u7684\u4eae\u5ea6\u6bd4\u8f83\u654f\u611f, \u4f46\u4e0d\u80fd\u533a\u5206\u8272\u5f69 \u4e09\u539f\u8272 \u662f\u76ee\u524d\u6700\u4e3a\u4ee3\u8868\u6027\u7684\u8272\u89c9\u673a\u5236\u89e3\u91ca\uff1a \u5728\u89c6\u7f51\u819c\u4e0a\u5b58\u5728\u7740\u4e09\u79cd\u5206\u522b\u5bf9\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u7ebf\u7684\u6ce2\u957f\u7279\u522b\u654f\u611f\u7684\u89c6\u9525\u7ec6\u80de\u6216\u76f8\u5e94\u7684\u611f\u5149\u8272\u7d20\uff0c\u5f53\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u7ebf\u8fdb\u5165\u4eba\u773c\u65f6\uff0c\u4e0e\u4e4b\u76f8\u7b26\u6216\u76f8\u8fd1\u7684\u89c6\u9525\u7ec6\u80de\u53d1\u751f\u4e0d\u540c\u7a0b\u5ea6\u7684\u5174\u594b\uff0c\u4e8e\u662f\u5728\u5927\u8111\u4ea7\u751f\u76f8\u5e94\u7684\u8272\u89c9\uff1b\u4e09\u79cd\u89c6\u9525\u7ec6\u80de\u82e5\u53d7\u5230\u540c\u7b49\u7a0b\u5ea6\u7684\u523a\u6fc0\uff0c\u5219\u4ea7\u751f\u6d88\u8272\u3002 Color Vision Basic \u00b6 \u56fd\u9645\u7167\u660e\u59d4\u5458\u4f1a\uff08Commission internationale de l\u2018\u00e9clairage\uff09\uff0c\u7b80\u79f0 CIE \uff0c\u57281931\u5e74\u6839\u636e\u5df2\u6709\u7684\u5b9e\u9a8c\u7ed3\u679c\uff0c\u9009\u62e9700nm\uff08R\uff09\u3001541.6nm\uff08G\uff09\u3001435.8nm\uff08B\uff09\u4f5c\u4e3a\u4e09\u539f\u8272\uff0c\u8ba1\u7b97\u51fa\u76f8\u5e94\u7684\u5149\u8c31\u4e09\u523a\u6fc0\u503c r\u3001g \u3001b \uff0c\u5176\u4e09\u523a\u6fc0\u503c\u66f2\u7ebf\u5982\u56fe\u6240\u793a\uff1a Properties of Color Vision \u00b6 \u7edd\u5bf9\u8272\u89c9\u611f\u77e5\u4e0d\u51c6\u786e\uff0c\u4e00\u822c\u901a\u8fc7\u4e0a\u4e0b\u6587\u5224\u65ad\u3002\u6240\u4ee5\u8bf4\u6709\u65f6\u5019\u4f1a\u51fa\u9519\uff0c\u8fd9\u4e2a\u53ebvision illusion Vision Illusion \u611f\u77e5\u80fd\u529b, \u4e0d\u540c\u7684\u4eba\u7684\u611f\u77e5\u80fd\u529b\u4e5f\u4e0d\u540c Weber's Law \u611f\u77e5\u5230\u7684\u5bf9\u6bd4\u5ea6, \u548c\u80cc\u666f\u7684\u7070\u5ea6\u6210\u6b63\u6bd4. \u80fd\u88ab\u611f\u77e5\u5230\u7684 deltaI \u4e0e I \u6210\u6b63\u6bd4(\u9ec4\u8272\u7ebf\u5185\u7b26\u5408\u8fd9\u4e2a\u5b9a\u5f8b) \u611f\u77e5\u7684\u4f18\u5148\u7a0b\u5ea6\u548c\u654f\u611f\u5ea6 \u4f18\u5148\u7a0b\u5ea6\uff1a\u540c\u7b49\u6761\u4ef6\u4e0b\uff0c\u4eba\u4eec\u5f80\u5f80\u4f1a\u6ce8\u610f\u5230 \u8272\u8c03 \uff08Hue, H\uff09\u7684\u53d8\u5316\uff0c\u7136\u540e\u662f \u9971\u548c\u5ea6 \uff08Saturation, S\uff09\uff0c\u7136\u540e\u662f \u4eae\u5ea6 \uff08Value, V\uff09\u3002 \u654f\u611f\u5ea6\uff1a\u4eba\u773c\u5bf9\u4e8e \u4eae\u5ea6 \u7684\u53d8\u5316\u6700\u4e3a\u654f\u611f\uff0c\u5206\u8fa8\u80fd\u529b\u6700\u5f3a\u3002\u6070\u597d\u4e0e\u4eba\u773c\u7684\u9ad8\u52a8\u6001\u80fd\u529b\u76f8\u5339\u914d\u3002 Color Space \u00b6 \u989c\u8272\u6a21\u578b\u5305\u62ec\u4e00\u7cfb\u5217\u989c\u8272\u6a21\u578b\uff0c\u8fd9\u4e9b\u989c\u8272\u6a21\u578b\u662f\u7531\u56fd\u9645\u7167\u660e\u59d4\u5458\u4f1a\u63d0\u51fa\u7684\uff0c\u662f\u57fa\u4e8e\u4eba\u7684\u773c\u775b\u5bf9RGB\u7684\u53cd\u5e94\uff0c\u88ab\u7528\u4e8e\u7cbe\u786e\u8868\u793a\u5bf9\u8272\u5f69\u7684\u63a5\u6536\u3002 \u8bbe\u5907\u65e0\u5173\u6027 \uff1a\u8fd9\u4e9b\u989c\u8272\u6a21\u578b\u88ab\u7528\u6765\u5b9a\u4e49\u6240\u8c13\u7684\u72ec\u7acb\u4e8e\u8bbe\u5907\u7684\u989c\u8272\u3002\u5b83\u80fd\u591f\u5728\u4efb\u4f55\u7c7b\u578b\u7684\u8bbe\u5907\u4e0a\u4ea7\u751f\u771f\u5b9e\u7684\u989c\u8272\uff0c\u4f8b\u5982\uff1a\u626b\u63cf\u4eea\u3001\u76d1\u89c6\u5668\u548c\u6253\u5370\u673a\u3002\u8fd9\u4e9b\u6a21\u578b\u88ab\u5e7f\u6cdb\u5730\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u5f88\u5bb9\u6613\u88ab\u7528\u4e8e\u8ba1\u7b97\u673a\uff0c\u63cf\u8ff0\u989c\u8272\u7684\u8303\u56f4\u3002 \u4e0e \u8bbe\u5907\u6709\u5173 \u7684\u989c\u8272\u6a21\u578b: RGB, CMY, HSV \u4e0e \u8bbe\u5907\u65e0\u5173 \u7684\u989c\u8272\u6a21\u578b\uff1a \u4e3b\u8981\u662f\u56fd\u9645\u7167\u660e\u59d4\u5458\u4f1a(CIE, Commission Internationale de L\u2018Eclairage/International Commission on Illumination)\u5b9a\u4e49\u7684CIE CIE XYZ, CIE L*a*b\u548c CIE YUV \u8fd9\u4e9b\u989c\u8272\u6a21\u578b\u88ab\u7528\u6765\u5b9a\u4e49\u6240\u8c13\u7684\u72ec\u7acb\u4e8e\u8bbe\u5907\u7684\u989c\u8272\u3002\u5b83\u80fd\u591f\u5728\u4efb\u4f55\u7c7b\u578b\u7684\u8bbe\u5907\u4e0a\u4ea7\u751f\u771f\u5b9e\u7684\u989c\u8272\uff0c\u4f8b\u5982\uff1a\u626b\u63cf\u4eea\u3001\u76d1\u89c6\u5668\u548c\u6253\u5370\u673a\u3002\u8fd9\u4e9b\u6a21\u578b\u88ab\u5e7f\u6cdb\u5730\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u5f88\u5bb9\u6613\u88ab\u7528\u4e8e\u8ba1\u7b97\u673a\uff0c\u63cf\u8ff0\u989c\u8272\u7684\u8303\u56f4\u3002 RGB Color Model \u00b6 RBG \u989c\u8272\u6a21\u578b\u662f\u4e09\u7ef4\u76f4\u89d2\u5750\u6807\u989c\u8272\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u5355\u4f4d\u6b63\u65b9\u4f53 \u5728\u6b63\u65b9\u4f53\u7684\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u5404\u539f\u8272\u7684\u91cf\u76f8\u7b49\uff0c\u4ea7\u751f\u7531\u6697\u5230\u4eae\u7684\u767d\u8272\uff0c\u5373\u7070\u5ea6\u3002\uff080\uff0c0\uff0c0\uff09\u4e3a\u9ed1\uff0c\uff081\uff0c1\uff0c1\uff09\u4e3a\u767d\uff0c\u6b63\u65b9\u4f53\u7684\u5176\u4ed66\u4e2a\u89d2\u70b9\u5206\u522b\u4e3a\u7ea2\u3001\u9ec4\u3001\u7eff\u3001\u9752\u3001\u84dd\u548c\u54c1\u7ea2\u3002 RGB\u989c\u8272\u6a21\u578b\u6784\u6210\u7684\u989c\u8272\u7a7a\u95f4\u662fCIE\u539f\u8272\u7a7a\u95f4\u7684\u4e00\u4e2a\u771f\u5b50\u96c6\u3002 RGB\u989c\u8272\u6a21\u578b\u901a\u5e38\u7528\u4e8e\u5f69\u8272\u9634\u6781\u5c04\u7ebf\u7ba1\u548c\u5f69\u8272\u5149\u6805\u56fe\u5f62\u663e\u793a\u5668\uff08\u8ba1\u7b97\u673a\u548c\u7535\u89c6\u673a\u91c7\u7528\uff09\u3002 CMY Color Model \u00b6 \u5f69\u8272\u5370\u5237\u6216\u8005\u5f69\u8272\u6253\u5370\u7684\u7eb8\u5f20\u4e0d\u80fd\u53d1\u5c04\u5149\u7ebf\uff0c\u56e0\u800c\u5370\u5237\u673a\u6216\u6253\u5370\u673a\u5c31\u53ea\u80fd\u4f7f\u7528\u4e00\u4e9b\u80fd\u591f\u5438\u6536\u7279\u5b9a\u5149\u6ce2\u800c\u53cd\u5c04\u5176\u4ed6\u5149\u6ce2\u7684\u6cb9\u58a8\u6216\u8005\u989c\u8272\u3002 \u6cb9\u58a8\u6216\u989c\u6599\u76843\u79cd\u57fa\u8272\u662f\u4ee5\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u8272\u7684\u8865\u8272\u9752\uff08Cyan\uff09\u3001\u54c1\u7ea2\uff08Magenta\uff09\u3001\u9ec4\uff08Yellow\uff09\u4e3a\u57fa\u8272\u3002 \u7528CMY\u6a21\u578b\u4ea7\u751f\u7684\u989c\u8272\u79f0\u4e3a\u76f8\u51cf\u8272\uff0c\u662f\u56e0\u4e3a\u5b83\u51cf\u6389\u4e86\u4e3a\u89c6\u89c9\u7cfb\u7edf\u8bc6\u522b\u989c\u8272\u6240\u9700\u8981\u7684\u53cd\u5c04\u5149 CMY\u7a7a\u95f4\u4e0eRGB\u7a7a\u95f4\u4e92\u8865\uff0c\u4e5f\u5c31\u662f\u7528\u767d\u8272\u51cf\u53bbRGB\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e00\u989c\u8272\u503c\u5c31\u7b49\u4e8e\u540c\u6837\u989c\u8272\u5728CMY\u7a7a\u95f4\u4e2d\u7684\u503c HSV Color Model \u00b6 \u989c\u8272\u7a7a\u95f4\u662f\u4ece\u4eba\u7684\u89c6\u89c9\u7cfb\u7edf\u51fa\u53d1\uff0c\u7528\u8272\u8c03\uff08Hue)\u3001\u8272\u9971\u548c\u5ea6\uff08Saturation\uff09\u548c\u4eae\u5ea6\uff08Intensity\uff0c\u6216\u8005Value\uff09\u6765 \u5706\u9525\u7684\u9876\u9762\u5bf9\u5e94\u4e8eV=1\uff0c\u5b83\u5305\u542bRGB\u6a21\u578b\u4e2d\u7684R=1\uff0cG=1\uff0cB=1\u4e09\u4e2a\u9762\uff0c\u6545\u6240\u4ee3\u8868\u7684\u989c\u8272\u8f83\u4eae\u3002\u8272\u5ea6H\u7531\u7ed5V\u8f74\u7684\u65cb\u8f6c\u89d2\u7ed9\u5b9a\u3002\u7ea2\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea60o\uff0c\u7eff\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea6120o\uff0c\u84dd\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea6240o\u3002\u63cf\u8ff0\u989c\u8272\u3002 \u5728\u5706\u9525\u7684\u9876\u70b9\u5904\uff0cV=0\uff0cH\u548cS\u65e0\u5b9a\u4e49\uff0c\u4ee3\u8868\u9ed1\u8272\u3002 \u7b26\u5408\u4eba\u7c7b\u89c6\u89c9\u7cfb\u7edf \u5f53\u91c7\u7528RGB\uff08\u6216\u8005CMY\uff09\u989c\u8272\u6a21\u578b\u65f6\uff0c\u6539\u53d8\u67d0\u4e00\u989c\u8272\u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u6539\u53d8\u8272\u8c03\u5c31\u5fc5\u987b\u540c\u65f6\u6539\u53d8R\u3001G\u3001B\uff08\u6216\u8005C\u3001M\u3001Y\uff09\u4e09\u4e2a\u5750\u6807\uff1b\u800c\u91c7\u7528HSV\u989c\u8272\u6a21\u578b\u65f6\u53ea\u9700\u6539\u53d8H\u5750\u6807\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cHSV\u989c\u8272\u6a21\u578b\u4e2d\u7684\u4e09\u4e2a\u5750\u6807\u662f\u72ec\u7acb\u7684\u3002\u5408\u4eba\u773c\u5bf9\u989c\u8272\u7684\u611f\u89c9\u3002 HSV\u989c\u8272\u6a21\u578b\u6784\u6210\u7684\u662f\u4e00\u4e2a\u5747\u5300\u7684\u989c\u8272\u7a7a\u95f4\uff0c\u91c7\u7528\u7ebf\u6027\u7684\u6807\u5c3a\uff0c\u5f69\u8272\u4e4b\u95f4\u611f\u89c9\u4e0a\u7684\u8ddd\u79bb\u4e0eHSV\u989c\u8272\u6a21\u578b\u5750\u6807\u4e0a\u70b9\u7684\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u6210\u6b63\u6bd4\u3002 CIE XYZ \u00b6 XYZ \u4e09\u523a\u6fc0\u503c\u7684\u6982\u5ff5\u662f\u4ee5\u8272\u89c6\u89c9\u7684\u4e09\u5143\u7406\u8bba\u4e3a\u6839\u636e\u7684\uff0c\u5b83\u8bf4\u660e\u4eba\u773c\u5177\u6709\u63a5\u53d7\u4e09\u539f\u8272(\u7ea2\u3001\u7eff\u3001\u84dd)\u7684\u63a5\u53d7\u5668\uff0c\u800c\u6240\u6709\u7684\u989c\u8272\u5747\u88ab\u89c6\u4f5c\u8be5\u4e09\u539f\u8272\u7684\u6df7\u5408\u8272\u3002 1931\u5e74CIE\u5236\u5b9a\u4e86\u4e00\u79cd\u5047\u60f3\u7684\u6807\u51c6\u89c2\u5bdf\u8005\uff0c\u8bbe\u7f6e\u914d\u8272\u51fd\u6570 \\(\\overline x(\\lambda)\\) \\(\\overline y(\\lambda)\\) \\(\\overline z(\\lambda)\\) XYZ\u4e09\u523a\u6fc0\u503c\u662f\u5229\u7528\u8fd9\u4e9b\u6807\u51c6\u89c2\u5bdf\u8005\u914d\u8272\u51fd\u6570\u8ba1\u7b97\u5f97\u6765\u7684\u3002 \u5728\u6b64\u57fa\u7840\u4e0a\uff0cCIE\u4e8e1931\u5e74\u89c4\u5b9a\u4e86Yxy\u989c\u8272\u7a7a\u95f4\uff0c\u5176\u4e2dY\u4e3a\u4eae\u5ea6\uff0cx,y\u662f\u4ece\u4e09\u523a\u6fc0\u503cXYZ\u8ba1\u7b97\u5f97\u6765\u7684\u8272\u5750\u6807\u3002\u5b83\u4ee3\u8868\u4eba\u7c7b\u53ef\u89c1\u7684\u989c\u8272\u8303\u56f4\u3002 CIE L*a*b \u00b6 L a b \u989c\u8272\u7a7a\u95f4\u662f\u57281976\u5e74\u5236\u5b9a\u7684\uff0c\u5b83\u662fCIE XYZ\u989c\u8272\u6a21\u578b\u7684\u6539\u8fdb\u578b\uff0c\u4ee5\u4fbf\u514b\u670d\u539f\u6765\u7684Yxy\u989c\u8272\u7a7a\u95f4\u5b58\u5728\u7684\u5728x\uff0cy\u8272\u5ea6\u56fe\u4e0a\u76f8\u7b49\u7684\u8ddd\u79bb\u5e76\u4e0d\u76f8\u5f53\u4e8e\u6211\u4eec\u6240\u89c9\u5bdf\u5230\u7684\u76f8\u7b49\u8272\u5dee\u7684\u95ee\u9898\u3002 \u5b83\u7684\u201cL\u201d\uff08\u660e\u4eae\u5ea6\uff09\uff0c\u201ca\u201d\uff08\u7eff\u8272\u5230\u7ea2\u8272\uff09\u548c\u201cb\u201d(\u84dd\u8272\u5230\u9ec4\u8272)\u4ee3\u8868\u8bb8\u591a\u7684\u503c\u3002\u4e0eXYZ\u6bd4\u8f83\uff0cCIE L a b \u989c\u8272\u66f4\u9002\u5408\u4e8e\u4eba\u773c\u7684\u611f\u89c9\u3002 \u5229\u7528CIE L a b*\uff0c\u989c\u8272\u7684\u4eae\u5ea6\uff08L\uff09\u3001\u7070\u9636\u548c\u9971\u548c\u5ea6\uff08a,b\uff09\u53ef\u4ee5\u5355\u72ec\u4fee\u6b63\uff0c\u8fd9\u6837\uff0c\u56fe\u50cf\u7684\u6574\u4e2a\u989c\u8272\u90fd\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u56fe\u50cf\u6216\u5176\u4eae\u5ea6\u7684\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u6539\u53d8\u3002 CIE YUV \u00b6 \u5728\u73b0\u4ee3\u5f69\u8272\u7535\u89c6\u7cfb\u7edf\u4e2d\uff0c\u901a\u5e38\u91c7\u7528\u4e09\u7ba1\u5f69\u8272\u6444\u50cf\u673a\u6216\u5f69\u8272CCD\uff08\u7535\u8377\u8026\u5408\u5668\u4ef6\uff09\u6444\u50cf\u673a\uff0c\u5b83\u628a\u6444\u5f97\u7684\u5f69\u8272\u56fe\u50cf\u4fe1\u53f7\uff0c\u7ecf\u5206\u8272\uff0c\u5206\u522b\u653e\u5927\u6821\u6b63\u5f97\u5230RGB\uff0c\u518d\u7ecf\u8fc7\u77e9\u9635\u53d8\u6362\u7535\u8def\u5f97\u5230\u4eae\u5ea6\u4fe1\u53f7Y\u548c\u4e24\u4e2a\u8272\u5dee\u4fe1\u53f7R\uff0dY\u3001B\uff0dY\uff0c\u6700\u540e\u53d1\u9001\u7aef\u5c06\u4eae\u5ea6\u548c\u8272\u5dee\u4e09\u4e2a\u4fe1\u53f7\u5206\u522b\u8fdb\u884c\u7f16\u7801\uff0c\u7528\u540c\u4e00\u4fe1\u9053\u53d1\u9001\u51fa\u53bb\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u5e38\u7528\u7684YUV\u989c\u8272\u7a7a\u95f4\u3002 \u91c7\u7528YUV\u989c\u8272\u7a7a\u95f4\u7684\u91cd\u8981\u6027\u662f\u5b83\u7684\u4eae\u5ea6\u4fe1\u53f7Y\u548c\u8272\u5ea6\u4fe1\u53f7U\u3001V\u662f\u5206\u79bb\u7684\u3002\u5982\u679c\u53ea\u6709Y\u4fe1\u53f7\u5206\u91cf\u800c\u6ca1\u6709U\u3001V\u5206\u91cf\uff0c\u90a3\u4e48\u8fd9\u6837\u8868\u793a\u7684\u56fe\u5c31\u662f\u9ed1\u767d\u7070\u5ea6\u56fe\u3002\u5f69\u8272\u7535\u89c6\u91c7\u7528YUV\u7a7a\u95f4\u6b63\u662f\u4e3a\u4e86\u7528\u4eae\u5ea6\u4fe1\u53f7Y\u89e3\u51b3\u5f69\u8272\u7535\u89c6\u673a\u4e0e\u9ed1\u767d\u7535\u89c6\u673a\u7684\u517c\u5bb9\u95ee\u9898\uff0c\u4f7f\u9ed1\u767d\u7535\u89c6\u673a\u4e5f\u80fd\u63a5\u6536\u5f69\u8272\u4fe1\u53f7\u3002 \u6839\u636e\u7f8e\u56fd\u56fd\u5bb6\u7535\u89c6\u5236\u5f0f\u59d4\u5458\u4f1a\uff0cNTSC\u5236\u5f0f\u7684\u6807\u51c6\uff0c\u5f53\u767d\u5149\u7684\u4eae\u5ea6\u7528Y\u6765\u8868\u793a\u65f6\uff0c\u5b83\u548c\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u8272\u5149\u7684\u5173\u7cfb\u53ef\u7528\u5982\u4e0b\u5f0f\u7684\u65b9\u7a0b\u63cf\u8ff0\uff1a Image Processing Data Structure \u00b6 \u77e9\u9635 \u94fe\u5f0f \u4e00\u4e2a\u56fe\u50cf\u662f\u7531\u4e00\u4e2a\u5217\u8868\u8868\u793a\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u53c8\u662f\u4e00\u4e2a\u5b50\u5217\u8868\u3002\u5b50\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u8868\u793a\u76ee\u524d\u662f\u7b2c\u51e0\u884c\uff0c\u968f\u540e\u7684\u6570\u5b57\u6210\u5bf9\u51fa\u73b0\u3002\u6bcf\u5bf9\u8868\u793a\u4e00\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\u4f4d\u7f6e\u3002","title":"\u56fe\u50cf\u4fe1\u606f\u5904\u7406\u4ecb\u7ecd"},{"location":"dip/dip1/#introduction","text":"","title":"Introduction"},{"location":"dip/dip1/#digital-image-representation","text":"\u6bcf\u4e2a\u7070\u5ea6\u56fe\u50cf\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6216\u8005\u77e9\u9635 \u7070\u5ea6\u56fe\u50cf(grayscale image)\u4e00\u822c\u6bcf\u4e2a\u50cf\u7d20\uff08pixel\uff09\u7528\u4e00\u4e2a\u5b57\u8282\uff088bit\uff09\u8868\u793a\uff0c\u6b64\u65f6\u6700\u5927\u80fd\u8868\u793a[0..255]\u5171256\u4e2a\u7070\u5ea6\u7ea7\u3002 32 \u4f4d\u591a\u4e86\u4e00\u4e2a\u963f\u5c14\u6cd5\u901a\u9053, \u7528\u6765\u8868\u793a\u900f\u660e\u5ea6.","title":"Digital Image Representation"},{"location":"dip/dip1/#image-format","text":"\u76ee\u7684: \u5b58\u50a8\u56fe\u50cf\u4fe1\u606f \u57fa\u4e8e\u50cf\u7d20, \u77e9\u5f62\u533a\u57df. \u4e0d\u540c\u7684\u56fe\u50cf\u683c\u5f0f\u548c\u64cd\u4f5c\u7cfb\u7edf, \u8f6f\u4ef6\u6709\u5173. \u7f16\u7801\u65b9\u6cd5: \u6709\u7684\u6709\u538b\u7f29, \u5305\u62ec\u6709\u635f\u538b\u7f29(\u4fe1\u606f\u6709\u635f\u5931), \u65e0\u635f\u538b\u7f29 \u5e38\u89c1\u683c\u5f0f: bmp, jpeg, tiff, gif, png... Info \u624b\u673a\u91cc\u4e00\u822c\u662f jpeg. tiff \u4e3b\u8981\u7528\u4e8e\u5730\u7406\u4fe1\u606f\u7cfb\u7edf. gif \u662f\u52a8\u6001\u7684. \u4e92\u8054\u7f51\u4e00\u822c\u662f png.","title":"Image Format"},{"location":"dip/dip1/#bmp-format","text":"Windows \u7cfb\u7edf\u91cc\u7684\u6807\u51c6\u5f62\u5f0f, \u6709\u65f6\u88ab\u5b58\u4e3a .dib \u6587\u4ef6. \u5927\u90e8\u5206 BMP \u6587\u4ef6\u662f\u4e0d\u538b\u7f29\u7684\u5f62\u5f0f, \u4f46\u5b83\u672c\u8eab\u8fd8\u662f\u652f\u6301\u56fe\u50cf\u538b\u7f29\u7684\uff0c\u5982 rle \u683c\u5f0f\uff08\u884c\u7a0b\u957f\u5ea6\u7f16\u7801\uff0crunlength encoding\uff09\u538b\u7f29\u683c\u5f0f\u7b49 \u56fe\u50cf\u6587\u4ef6\u5934 : bfType : \u8bf4\u660e\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u8be5\u503c\u5fc5\u9700\u662f0x4D42\uff0c\u4e5f\u5c31\u662f\u5b57\u7b26'BM'.(C \u8bed\u8a00\u53ef\u7528 fopen \u8bfb) bfSize : \u8bf4\u660e\u8be5\u4f4d\u56fe\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u7528\u5b57\u8282\u4e3a\u5355\u4f4d bfReserved1 : \u4fdd\u7559\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a0 bfReserved2 : \u4fdd\u7559\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a0 bfOffBits : \u8bf4\u660e\u4ece\u6587\u4ef6\u5934\u5f00\u59cb\u5230\u5b9e\u9645\u7684\u56fe\u8c61\u6570\u636e\u4e4b\u95f4\u7684\u5b57\u8282\u7684\u504f\u79fb\u91cf\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u56e0\u4e3a\u4f4d\u56fe\u4fe1\u606f\u5934\u548c\u8c03\u8272\u677f\u7684\u957f\u5ea6\u4f1a\u6839\u636e\u4e0d\u540c\u60c5\u51b5\u800c\u53d8\u5316\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e2a\u504f\u79fb\u503c\u8fc5\u901f\u7684\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u4f4d\u6570\u636e. \u56fe\u50cf\u4fe1\u606f\u5934 : biSize \u8bf4\u660e BITMAPINFOHEADER(\u56fe\u50cf\u4fe1\u606f\u5934) \u7ed3\u6784\u6240\u9700\u8981\u7684\u5b57\u6570. biWidth \u8bf4\u660e\u56fe\u8c61\u7684\u5bbd\u5ea6\uff0c\u4ee5\u8c61\u7d20\u4e3a\u5355\u4f4d. biHeight \u8bf4\u660e\u56fe\u8c61\u7684\u9ad8\u5ea6\uff0c\u4ee5\u8c61\u7d20\u4e3a\u5355\u4f4d. \u6ce8\uff1a\u8fd9\u4e2a\u503c\u9664\u4e86\u7528\u4e8e\u63cf\u8ff0\u56fe\u50cf\u7684\u9ad8\u5ea6\u4e4b\u5916\uff0c\u5b83\u8fd8\u6709\u53e6\u4e00\u4e2a\u7528\u5904\uff0c\u5c31\u662f\u6307\u660e\u8be5\u56fe\u50cf\u662f\u5012\u5411\u7684\u4f4d\u56fe\uff0c\u8fd8\u662f\u6b63\u5411\u7684\u4f4d\u56fe\u3002\u5982\u679c\u8be5\u503c\u662f\u4e00\u4e2a\u6b63\u6570\uff0c\u8bf4\u660e\u56fe\u50cf\u662f\u5012\u5411\u7684(\u5934\u671d\u4e0a\u811a\u671d\u4e0b)\uff0c\u5982\u679c\u8be5\u503c\u662f\u4e00\u4e2a\u8d1f\u6570\uff0c\u5219\u8bf4\u660e\u56fe\u50cf\u662f\u6b63\u5411\u7684\u3002\u5927\u591a\u6570\u7684BMP\u6587\u4ef6\u90fd\u662f\u5012\u5411\u7684\u4f4d\u56fe\uff0c\u4e5f\u5c31\u662f\u65f6\uff0c\u9ad8\u5ea6\u503c\u662f\u4e00\u4e2a\u6b63\u6570.(\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u4f1a\u63d0\u524d\u5904\u7406\u4ee5\u4fdd\u8bc1\u6211\u4eec\u770b\u5230\u7684\u662f\u6b63\u5411\u7684) biPlanes \u4e3a\u76ee\u6807\u8bbe\u5907\u8bf4\u660e\u4f4d\u9762\u6570\uff0c\u5176\u503c\u5c06\u603b\u662f\u88ab\u8bbe\u4e3a 1. biBitCount \u6bcf\u4e2a\u50cf\u7d20\u591a\u5c11\u4f4d. \u5176\u503c\u4e3a1\u30014\u30018\u300116\u300124\u3001\u6216 32. \u5982\u679c\u50cf\u7d20\u5341\u516d\u4f4d, \u5373\u4e3a\u4f2a\u5f69\u8272(\u4ecb\u4e8e\u9ed1\u767d\u548c\u5f69\u8272\u4e4b\u95f4) biCompression \u8bf4\u660e\u56fe\u8c61\u6570\u636e\u538b\u7f29\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ea\u8ba8\u8bba\u6ca1\u6709\u538b\u7f29\u7684\u7c7b\u578b\uff1aBI_RGB. biSizeImage \u8bf4\u660e\u56fe\u8c61\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d. \u5f53\u7528 BI_RGB \u683c\u5f0f\u65f6\uff0c\u53ef\u8bbe\u7f6e\u4e3a 0. biXPelsPerMeter/biYPelsPerMeter \u6c34\u5e73/\u5782\u76f4\u65b9\u5411\u5206\u8fa8\u7387, \u6bcf\u7c73\u6709\u591a\u5c11\u4e2a\u50cf\u7d20. \u50cf\u7d20\u4e0d\u662f\u8d8a\u591a\u8d8a\u597d, \u800c\u662f\u9897\u7c92\u8d8a\u5c0f\u8d8a\u597d. biClrUsd \u4f4d\u56fe\u4e2d\u5b9e\u9645\u8981\u4f7f\u7528\u7684\u989c\u8272\u7d22\u5f15\u7684\u6570\u91cf.(0 \u8bf4\u660e\u8981\u4f7f\u7528\u6240\u6709\u8c03\u8272\u677f\u9879). biClrImportant \u8bf4\u660e\u5bf9\u56fe\u8c61\u663e\u793a\u6709\u91cd\u8981\u5f71\u54cd\u7684\u989c\u8272\u7d22\u5f15\u7684\u6570\u76ee\uff0c\u5982\u679c\u662f 0\uff0c\u8868\u793a\u90fd\u91cd\u8981. \u5f53\u4e0d\u5f97\u4e0d\u629b\u5f03\u989c\u8272\u65f6, \u4f1a\u5148\u628a\u4e0d\u91cd\u8981\u7684\u989c\u8272\u4e22\u6389. \u8c03\u8272\u677f(palette) . \u4e00\u4e2a\u5b57\u8282\u8868\u793a\u84dd\u8272, \u4e00\u4e2a\u5b57\u8282\u8868\u793a\u7eff\u8272, \u4e00\u4e2a\u5b57\u8282\u8868\u793a\u7ea2\u8272, \u4e00\u4e2a\u5b57\u8282\u603b\u662f 0.(BGR) \u5185\u5b58\u5145\u8db3, \u5f80\u5f80\u4e0d\u518d\u9700\u8981\u8c03\u8272\u677f, \u76f4\u63a5\u5b58\u6570\u636e. \u4f4d\u56fe\u6570\u636e(Bitmap data) \u6bcf\u4e00\u884c\u7684\u5b57\u8282\u6570\u5fc5\u987b\u662f4\u7684\u6574\u500d\u6570\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u9700\u8981\u8865\u9f50\u3002 \u4e00\u822c\u6765\u8bf4\uff0c.bMP\u6587\u4ef6\u7684\u6570\u636e\u4ece\u4e0b\u5230\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u6587\u4ef6\u4e2d\u6700\u5148\u8bfb\u5230\u7684\u662f\u56fe\u8c61\u6700\u4e0b\u9762\u4e00\u884c\u7684\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u8c61\u7d20\uff0c\u7136\u540e\u662f\u5de6\u8fb9\u7b2c\u4e8c\u4e2a\u8c61\u7d20\u2026\u2026\u63a5\u4e0b\u6765\u662f\u5012\u6570\u7b2c\u4e8c\u884c\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u8c61\u7d20\uff0c\u5de6\u8fb9\u7b2c\u4e8c\u4e2a\u8c61\u7d20\u2026\u2026\u4f9d\u6b21\u7c7b\u63a8 \uff0c\u6700\u540e\u5f97\u5230\u7684\u662f\u6700\u4e0a\u9762\u4e00\u884c\u7684\u6700\u53f3\u4e00\u4e2a\u8c61\u7d20\u3002","title":"BMP Format"},{"location":"dip/dip1/#jpeg","text":"\u538b\u7f29\u7b56\u7565\uff1a\u6839\u636e\u538b\u7f29\u6bd4\u8981\u6c42\uff0c\u4ece\u9ad8\u9891\u5230\u4f4e\u9891\u9010\u6b65\u524a\u51cf\u4fe1\u606f \u597d\u5904 \u9ad8\u9891\u4fe1\u606f\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u5927\uff0c\u51cf\u5c11\u9ad8\u9891\u4fe1\u606f\u66f4\u5bb9\u6613\u83b7\u5f97\u9ad8\u538b\u7f29\u6bd4\uff1b \u4f4e\u9891\u4fe1\u606f\u53ef\u4ee5\u4fdd\u7559\u7269\u4f53\u7684\u57fa\u672c\u8f6e\u5ed3\u548c\u8272\u5f69\u5206\u5e03\uff0c\u6700\u5927\u9650\u5ea6\u7ef4\u6301\u56fe\u50cf\u8d28\u91cf\u3002 \u9002\u5408\u7528\u4e8e\u4e92\u8054\u7f51 \u4e0d\u9002\u5408\u7528\u4e8e\u7ebf\u6761\u753b\u3001\u6587\u5b57\u3001\u56fe\u6807\u7b49\uff0c\u5176\u6709\u635f\u538b\u7f29\u4f1a\u5bfc\u81f4\u8fd9\u7c7b\u5bf9\u8c61\u7684\u7455\u75b5\u4e25\u91cd","title":"JPEG"},{"location":"dip/dip1/#tiff","text":"TIFF\u662fTagged Image File Format\u7684\u7f29\u5199\uff0c\u662f\u4e00\u4e2a\u5e7f\u4e3a\u5e94\u7528\u7684\u5149\u6805\u56fe\u50cf\u6587\u4ef6\u683c\u5f0f\uff0c\u5b83\u7684\u6765\u6e90\u6709\uff1a\u626b\u63cf\u4eea\u3001CAD\u7cfb\u7edf\u3001\u5730\u7406\u4fe1\u606f TIFF\u662f\u4e00\u4e2a\u975e\u5e38\u7a33\u5b9a\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u6709\u5f88\u957f\u7684\u5e94\u7528\u5386\u53f2\uff0c\u6709\u516c\u5171\u7684\u8f6f\u4ef6\u5e93\u6765\u8bfb\u5199TIFF\u683c\u5f0f\u7684\u56fe\u50cf\uff08\u652f\u6301\u5404\u79cd\u64cd\u4f5c\u7cfb\u7edf\uff09 \u652f\u6301\u4ece\u9ad8\u7aef\u5230\u4f4e\u7aef\u7684\u8bbe\u5907 \u53ef\u6269\u5c55\u6027\u5f3a\uff0c\u652f\u6301\u516c\u5171\u548c\u79c1\u7528\u7684\u6807\u8bb0\u7ed3\u6784\uff08\u6bcf\u4e2a\u516c\u53f8\u6709\u81ea\u5df1\u79c1\u6709\u7684\u90e8\u5206\uff09 \u652f\u6301\u5404\u79cd\u538b\u7f29\u683c\u5f0f \u6709\u516c\u5171\u8f6f\u4ef6\u5e93\u652f\u6301 \u4e8c\u503c\u56fe\u3001\u7070\u5ea6\u56fe\u3001\u8c03\u8272\u677f\u3001\u771f\u5f69\u8272\u3001\u5176\u4ed6\u6269\u5c55","title":"TIFF"},{"location":"dip/dip1/#gif","text":"Graphics Interchange Format \u91c7\u7528\u590d\u6742\u7684 LZW \u7f16\u7801\u65b9\u5f0f \u4e00\u4e2a GIF \u6587\u4ef6\u53ef\u4ee5\u5b58\u50a8\u591a\u5e45\u56fe\u50cf \u5e26\u6709\u8272\u5f69\u8868\uff08\u5168\u5c40\u3001\u5c40\u90e8\u8272\u5f69\u8868\uff09 \u652f\u6301\u56fe\u50cf\u5b9a\u5e8f\u663e\u793a\u6216\u8986\u76d6(\u64ad\u653e\u6b21\u5e8f\uff0c\u5982\u4ece\u540e\u5f80\u524d) \u53ef\u4ee5\u9519\u884c\u5b58\u653e \u652f\u6301\u6587\u672c\u8986\u76d6\u5d4c\u5165","title":"GIF"},{"location":"dip/dip1/#basic-principle-of-imaging","text":"\u901a\u8fc7\u4f7f\u7528\u900f\u955c\u53ef\u4ee5\u4f1a\u805a\u66f4\u591a\u7684\u5149\u7ebf\u5230\u4e00\u4e2a\u6210\u50cf\u70b9\uff0c\u53ea\u662f\u53ea\u6709\u5728\u7279\u6b8a\u7684\u4f4d\u7f6e\u4e0a\u624d\u80fd\u8fbe\u5230\u8fd9\u4e2a\u76ee\u6807\uff0c\u5373\u5927\u5bb6\u4ee5\u524d\u5c31\u5b66\u4e60\u8fc7\u7684\u900f\u955c\u805a\u7126\u3002\u4f4d\u4e8e\u5408\u9002\u8ddd\u79bb\u7684\u7269\u4f53\u70b9\u53ef\u4ee5\u6210\u6e05\u6670\u50cf\uff0c\u5176\u4ed6\u7684\u70b9\u5219\u4f1a\u4ea7\u751f\u5f25\u6563\u5706\u3002 \u901a\u8fc7\u6539\u53d8\u955c\u5934\u7684\u5f62\u72b6\u53ef\u4ee5\u6539\u53d8\u805a\u7126\u65f6\u7684\u7269\u4f53\u70b9\u6240\u9700\u8981\u7684\u8ddd\u79bb\u3002 \u5f25\u6563\u5706 (circle of confusion) \uff1a\u5728\u7126\u70b9\u524d\u540e\uff0c\u5149\u7ebf\u5f00\u59cb\u805a\u96c6\u548c\u6269\u6563\uff0c\u70b9\u7684\u5f71\u50cf\u53d8\u6a21\u7cca\uff0c\u5f62\u6210\u4e00\u4e2a\u6269\u5927\u7684\u5706\u3002\u5982\u679c\u5f25\u6563\u5706\u7684\u76f4\u5f84\u5c0f\u4e8e\u4eba\u773c\u7684\u9274\u522b\u80fd\u529b\uff0c\u5728\u4e00\u5b9a\u8303\u56f4\u5185\u5b9e\u9645\u5f71\u50cf\u4ea7\u751f\u7684\u6a21\u7cca\u662f\u4e0d\u80fd\u8fa8\u8ba4\u7684\u3002\u4e0d\u80fd\u8fa8\u8ba4\u7684\u76f4\u5f84\u53eb\u505a\u5bb9\u8bb8\u5f25\u6563\u5706\u3002\u7126\u70b9\u524d\u540e\u5404\u6709\u4e00\u4e2a\u5bb9\u8bb8\u5f25\u6563\u5706\u3002\u5bf9\u4e8e6\u5bf8\u7167\u7247\uff0c\u89c2\u5bdf\u8ddd\u79bb25\uff0d30cm \uff0c\u5927\u6982\u662f\u5e95\u7247\u5bf9\u89d2\u7ebf1/1000-1/1500\uff0c \u6570\u7801\u76f8\u673a\u7684\u6210\u50cf\u8fc7\u7a0b\uff1a \u5f53\u4f7f\u7528\u6570\u7801\u76f8\u673a\u62cd \u5f53CCD\u66dd\u5149\u540e\uff0c\u5149\u7535\u4e8c\u6781\u7ba1\u53d7\u5230\u5149\u7ebf\u7684\u6fc0\u53d1\u800c\u91ca\u653e\u51fa\u7535\u8377\uff0c\u751f\u6210\u611f\u5149\u5143\u4ef6\u7684\u7535\u4fe1\u53f7\u3002\u6444\u666f\u7269\u65f6\uff0c\u666f\u7269\u53cd\u5c04\u7684\u5149\u7ebf\u901a\u8fc7\u6570\u7801\u76f8\u673a\u7684\u955c\u5934\u900f\u5c04\u5230CCD\u4e0a\u3002 CCD\u63a7\u5236\u82af\u7247\u5229\u7528\u611f\u5149\u5143\u4ef6\u4e2d\u7684\u63a7\u5236\u4fe1\u53f7\u7ebf\u8def\u5bf9\u53d1\u5149\u4e8c\u6781\u7ba1\u4ea7\u751f\u7684\u7535\u6d41\u8fdb\u884c\u63a7\u5236\uff0c\u7531\u7535\u6d41\u4f20\u8f93\u7535\u8def\u8f93\u51fa\uff0cCCD\u4f1a\u5c06\u4e00\u6b21\u6210\u50cf\u4ea7\u751f\u7684\u7535\u4fe1\u53f7\u6536\u96c6\u8d77\u6765\uff0c\u7edf\u4e00\u8f93\u51fa\u5230\u653e\u5927\u5668\u3002 \u7ecf\u8fc7\u653e\u5927\u548c\u6ee4\u6ce2\u540e\u7684\u7535\u4fe1\u53f7\u88ab\u4f20\u9001\u5230ADC\uff0c\u7531ADC\u5c06\u7535\u4fe1\u53f7\uff08\u6a21\u62df\u4fe1\u53f7\uff09\u8f6c\u6362\u4e3a\u6570\u5b57\u4fe1\u53f7\uff0c\u6570\u503c\u7684\u5927\u5c0f\u548c\u7535\u4fe1\u53f7\u7684\u5f3a\u5ea6\u4e0e\u7535\u538b\u7684\u9ad8\u4f4e\u6210\u6b63\u6bd4\uff0c\u8fd9\u4e9b\u6570\u503c\u5176\u5b9e\u4e5f\u5c31\u662f\u56fe\u50cf\u7684\u6570\u636e\u3002 \u6b64\u65f6\u8fd9\u4e9b\u56fe\u50cf\u6570\u636e\u8fd8\u4e0d\u80fd\u76f4\u63a5\u751f\u6210\u56fe\u50cf\uff0c\u8fd8\u8981\u8f93\u51fa\u5230DSP\uff08\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668\uff09\u4e2d\uff0c\u5728DSP\u4e2d\uff0c\u5c06\u4f1a\u5bf9\u8fd9\u4e9b\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u8272\u5f69\u6821\u6b63\u3001\u767d\u5e73\u8861\u5904\u7406\uff0c\u5e76\u7f16\u7801\u4e3a\u6570\u7801\u76f8\u673a\u6240\u652f\u6301\u7684\u56fe\u50cf\u683c\u5f0f\u3001\u5206\u8fa8\u7387\uff0c\u7136\u540e\u624d\u4f1a\u88ab\u5b58\u50a8\u4e3a\u56fe\u50cf\u6587\u4ef6\u3002 \u5f53\u5b8c\u6210\u4e0a\u8ff0\u6b65\u9aa4\u540e\uff0c\u56fe\u50cf\u6587\u4ef6\u5c31\u4f1a\u88ab\u4fdd\u5b58\u5230\u5b58\u50a8\u5668\u4e0a,\u6211\u4eec\u5c31\u53ef\u4ee5\u6b23\u8d4f\u4e86\u3002","title":"Basic Principle of Imaging"},{"location":"dip/dip1/#light-and-color","text":"\u8272\u5f69 \u8272\u5f69\u53ef\u4ee5\u5206\u4e3a \u5f69\u8272 \uff08chromatic color\uff09\u548c \u6d88\u8272 \uff08achromatic color\uff09\u4e24\u5927\u7c7b\u3002 \u5f69\u8272 \u662f\u6307\u7ea2\u3001\u9ec4\u3001\u84dd\u7b49\u5355\u8272\u4ee5\u53ca\u5b83\u4eec\u7684\u6df7\u5408\u8272\u3002\u5f69\u8272\u7269\u4f53\u5bf9\u5149\u8c31\u5404\u6ce2\u957f\u7684\u53cd\u5c04\u5177\u6709\u9009\u62e9\u6027\uff0c\u6240\u4ee5\u5b83\u4eec\u5728\u767d\u5149\u7167\u5c04\u4e0b\u5448\u73b0\u51fa\u4e0d\u540c\u7684\u989c\u8272\u3002 \u6d88\u8272 \uff0c\u53c8\u79f0\u975e\u5f69\u8272\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684 \u7070\u5ea6 \uff0c\u662f\u6307\u767d\u8272\uff0c\u9ed1\u8272\u4ee5\u53ca\u5404\u79cd\u6df1\u6d45\u4e0d\u540c\u7684\u7070\u8272\u3002\u6d88\u8272\u7269\u4f53\u5bf9\u5149\u8c31\u5404\u6ce2\u957f\u7684\u53cd\u5c04\u6ca1\u6709\u9009\u62e9\u6027\uff0c\u5b83\u4eec\u662f\u4e2d\u6027\u8272\u3002 \u8272\u89c9 \u8272\u89c9 \u662f\u6307\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u7ebf\u4f5c\u7528\u4e8e\u89c6\u7f51\u819c\u800c\u5728\u5927\u8111\u4e2d\u5f15\u8d77\u7684\u611f\u89c9\u3002\u4eba\u773c\u53ef\u89c1\u5149\u7ebf\u7684\u6ce2\u957f\u662f390nm\uff5e780nm\uff0c\u4e00\u822c\u53ef\u8fa8\u51fa\u5305\u62ec\u7d2b\u3001\u84dd\u3001\u9752\u3001\u7eff\u3001\u9ec4\u3001\u6a59\u3001\u7ea27\u79cd\u4e3b\u8981\u989c\u8272\u5728\u5185\u7684120\uff5e180\u79cd\u4e0d\u540c\u7684\u989c\u8272\u3002 \u89c6\u7f51\u819c \u89c6\u7f51\u819c\u662f\u4eba\u773c\u4e2d\u6700\u91cd\u8981\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u5c31\u50cf\u76f8\u673a\u91cc\u7684\u611f\u5149\u5e95\u7247\uff0c\u4e13\u95e8\u8d1f\u8d23\u611f\u5149\u6210\u50cf\u3002\u6355\u6349\u5149\u5e76\u4ea7\u751f\u56fe\u50cf\u3002 \u77b3\u5b54\u53ef\u4ee5 \u653e\u5927\u653e\u5c0f ---- \u5149\u5708 \u8fd9\u91cc\u6709\u4e24\u79cd\u89c6\u89c9\u7ec6\u80de \u9525\u5f62 \u6570\u91cf\u5c11, \u4f46\u53ef\u4ee5\u533a\u5206\u8272\u5f69(\u524d\u63d0: \u5149\u7ebf\u6bd4\u8f83\u5145\u8db3\uff0c\u5f3a\u5149\u624d\u80fd\u6fc0\u53d1) \u6746\u72b6 \u6570\u91cf\u591a, \u5bf9\u5149\u7684\u4eae\u5ea6\u6bd4\u8f83\u654f\u611f, \u4f46\u4e0d\u80fd\u533a\u5206\u8272\u5f69 \u4e09\u539f\u8272 \u662f\u76ee\u524d\u6700\u4e3a\u4ee3\u8868\u6027\u7684\u8272\u89c9\u673a\u5236\u89e3\u91ca\uff1a \u5728\u89c6\u7f51\u819c\u4e0a\u5b58\u5728\u7740\u4e09\u79cd\u5206\u522b\u5bf9\u7ea2\u3001\u7eff\u548c\u84dd\u5149\u7ebf\u7684\u6ce2\u957f\u7279\u522b\u654f\u611f\u7684\u89c6\u9525\u7ec6\u80de\u6216\u76f8\u5e94\u7684\u611f\u5149\u8272\u7d20\uff0c\u5f53\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u7ebf\u8fdb\u5165\u4eba\u773c\u65f6\uff0c\u4e0e\u4e4b\u76f8\u7b26\u6216\u76f8\u8fd1\u7684\u89c6\u9525\u7ec6\u80de\u53d1\u751f\u4e0d\u540c\u7a0b\u5ea6\u7684\u5174\u594b\uff0c\u4e8e\u662f\u5728\u5927\u8111\u4ea7\u751f\u76f8\u5e94\u7684\u8272\u89c9\uff1b\u4e09\u79cd\u89c6\u9525\u7ec6\u80de\u82e5\u53d7\u5230\u540c\u7b49\u7a0b\u5ea6\u7684\u523a\u6fc0\uff0c\u5219\u4ea7\u751f\u6d88\u8272\u3002","title":"Light and Color"},{"location":"dip/dip1/#color-vision-basic","text":"\u56fd\u9645\u7167\u660e\u59d4\u5458\u4f1a\uff08Commission internationale de l\u2018\u00e9clairage\uff09\uff0c\u7b80\u79f0 CIE \uff0c\u57281931\u5e74\u6839\u636e\u5df2\u6709\u7684\u5b9e\u9a8c\u7ed3\u679c\uff0c\u9009\u62e9700nm\uff08R\uff09\u3001541.6nm\uff08G\uff09\u3001435.8nm\uff08B\uff09\u4f5c\u4e3a\u4e09\u539f\u8272\uff0c\u8ba1\u7b97\u51fa\u76f8\u5e94\u7684\u5149\u8c31\u4e09\u523a\u6fc0\u503c r\u3001g \u3001b \uff0c\u5176\u4e09\u523a\u6fc0\u503c\u66f2\u7ebf\u5982\u56fe\u6240\u793a\uff1a","title":"Color Vision Basic"},{"location":"dip/dip1/#properties-of-color-vision","text":"\u7edd\u5bf9\u8272\u89c9\u611f\u77e5\u4e0d\u51c6\u786e\uff0c\u4e00\u822c\u901a\u8fc7\u4e0a\u4e0b\u6587\u5224\u65ad\u3002\u6240\u4ee5\u8bf4\u6709\u65f6\u5019\u4f1a\u51fa\u9519\uff0c\u8fd9\u4e2a\u53ebvision illusion Vision Illusion \u611f\u77e5\u80fd\u529b, \u4e0d\u540c\u7684\u4eba\u7684\u611f\u77e5\u80fd\u529b\u4e5f\u4e0d\u540c Weber's Law \u611f\u77e5\u5230\u7684\u5bf9\u6bd4\u5ea6, \u548c\u80cc\u666f\u7684\u7070\u5ea6\u6210\u6b63\u6bd4. \u80fd\u88ab\u611f\u77e5\u5230\u7684 deltaI \u4e0e I \u6210\u6b63\u6bd4(\u9ec4\u8272\u7ebf\u5185\u7b26\u5408\u8fd9\u4e2a\u5b9a\u5f8b) \u611f\u77e5\u7684\u4f18\u5148\u7a0b\u5ea6\u548c\u654f\u611f\u5ea6 \u4f18\u5148\u7a0b\u5ea6\uff1a\u540c\u7b49\u6761\u4ef6\u4e0b\uff0c\u4eba\u4eec\u5f80\u5f80\u4f1a\u6ce8\u610f\u5230 \u8272\u8c03 \uff08Hue, H\uff09\u7684\u53d8\u5316\uff0c\u7136\u540e\u662f \u9971\u548c\u5ea6 \uff08Saturation, S\uff09\uff0c\u7136\u540e\u662f \u4eae\u5ea6 \uff08Value, V\uff09\u3002 \u654f\u611f\u5ea6\uff1a\u4eba\u773c\u5bf9\u4e8e \u4eae\u5ea6 \u7684\u53d8\u5316\u6700\u4e3a\u654f\u611f\uff0c\u5206\u8fa8\u80fd\u529b\u6700\u5f3a\u3002\u6070\u597d\u4e0e\u4eba\u773c\u7684\u9ad8\u52a8\u6001\u80fd\u529b\u76f8\u5339\u914d\u3002","title":"Properties of Color Vision"},{"location":"dip/dip1/#color-space","text":"\u989c\u8272\u6a21\u578b\u5305\u62ec\u4e00\u7cfb\u5217\u989c\u8272\u6a21\u578b\uff0c\u8fd9\u4e9b\u989c\u8272\u6a21\u578b\u662f\u7531\u56fd\u9645\u7167\u660e\u59d4\u5458\u4f1a\u63d0\u51fa\u7684\uff0c\u662f\u57fa\u4e8e\u4eba\u7684\u773c\u775b\u5bf9RGB\u7684\u53cd\u5e94\uff0c\u88ab\u7528\u4e8e\u7cbe\u786e\u8868\u793a\u5bf9\u8272\u5f69\u7684\u63a5\u6536\u3002 \u8bbe\u5907\u65e0\u5173\u6027 \uff1a\u8fd9\u4e9b\u989c\u8272\u6a21\u578b\u88ab\u7528\u6765\u5b9a\u4e49\u6240\u8c13\u7684\u72ec\u7acb\u4e8e\u8bbe\u5907\u7684\u989c\u8272\u3002\u5b83\u80fd\u591f\u5728\u4efb\u4f55\u7c7b\u578b\u7684\u8bbe\u5907\u4e0a\u4ea7\u751f\u771f\u5b9e\u7684\u989c\u8272\uff0c\u4f8b\u5982\uff1a\u626b\u63cf\u4eea\u3001\u76d1\u89c6\u5668\u548c\u6253\u5370\u673a\u3002\u8fd9\u4e9b\u6a21\u578b\u88ab\u5e7f\u6cdb\u5730\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u5f88\u5bb9\u6613\u88ab\u7528\u4e8e\u8ba1\u7b97\u673a\uff0c\u63cf\u8ff0\u989c\u8272\u7684\u8303\u56f4\u3002 \u4e0e \u8bbe\u5907\u6709\u5173 \u7684\u989c\u8272\u6a21\u578b: RGB, CMY, HSV \u4e0e \u8bbe\u5907\u65e0\u5173 \u7684\u989c\u8272\u6a21\u578b\uff1a \u4e3b\u8981\u662f\u56fd\u9645\u7167\u660e\u59d4\u5458\u4f1a(CIE, Commission Internationale de L\u2018Eclairage/International Commission on Illumination)\u5b9a\u4e49\u7684CIE CIE XYZ, CIE L*a*b\u548c CIE YUV \u8fd9\u4e9b\u989c\u8272\u6a21\u578b\u88ab\u7528\u6765\u5b9a\u4e49\u6240\u8c13\u7684\u72ec\u7acb\u4e8e\u8bbe\u5907\u7684\u989c\u8272\u3002\u5b83\u80fd\u591f\u5728\u4efb\u4f55\u7c7b\u578b\u7684\u8bbe\u5907\u4e0a\u4ea7\u751f\u771f\u5b9e\u7684\u989c\u8272\uff0c\u4f8b\u5982\uff1a\u626b\u63cf\u4eea\u3001\u76d1\u89c6\u5668\u548c\u6253\u5370\u673a\u3002\u8fd9\u4e9b\u6a21\u578b\u88ab\u5e7f\u6cdb\u5730\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u5f88\u5bb9\u6613\u88ab\u7528\u4e8e\u8ba1\u7b97\u673a\uff0c\u63cf\u8ff0\u989c\u8272\u7684\u8303\u56f4\u3002","title":"Color Space"},{"location":"dip/dip1/#rgb-color-model","text":"RBG \u989c\u8272\u6a21\u578b\u662f\u4e09\u7ef4\u76f4\u89d2\u5750\u6807\u989c\u8272\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u5355\u4f4d\u6b63\u65b9\u4f53 \u5728\u6b63\u65b9\u4f53\u7684\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u5404\u539f\u8272\u7684\u91cf\u76f8\u7b49\uff0c\u4ea7\u751f\u7531\u6697\u5230\u4eae\u7684\u767d\u8272\uff0c\u5373\u7070\u5ea6\u3002\uff080\uff0c0\uff0c0\uff09\u4e3a\u9ed1\uff0c\uff081\uff0c1\uff0c1\uff09\u4e3a\u767d\uff0c\u6b63\u65b9\u4f53\u7684\u5176\u4ed66\u4e2a\u89d2\u70b9\u5206\u522b\u4e3a\u7ea2\u3001\u9ec4\u3001\u7eff\u3001\u9752\u3001\u84dd\u548c\u54c1\u7ea2\u3002 RGB\u989c\u8272\u6a21\u578b\u6784\u6210\u7684\u989c\u8272\u7a7a\u95f4\u662fCIE\u539f\u8272\u7a7a\u95f4\u7684\u4e00\u4e2a\u771f\u5b50\u96c6\u3002 RGB\u989c\u8272\u6a21\u578b\u901a\u5e38\u7528\u4e8e\u5f69\u8272\u9634\u6781\u5c04\u7ebf\u7ba1\u548c\u5f69\u8272\u5149\u6805\u56fe\u5f62\u663e\u793a\u5668\uff08\u8ba1\u7b97\u673a\u548c\u7535\u89c6\u673a\u91c7\u7528\uff09\u3002","title":"RGB Color Model"},{"location":"dip/dip1/#cmy-color-model","text":"\u5f69\u8272\u5370\u5237\u6216\u8005\u5f69\u8272\u6253\u5370\u7684\u7eb8\u5f20\u4e0d\u80fd\u53d1\u5c04\u5149\u7ebf\uff0c\u56e0\u800c\u5370\u5237\u673a\u6216\u6253\u5370\u673a\u5c31\u53ea\u80fd\u4f7f\u7528\u4e00\u4e9b\u80fd\u591f\u5438\u6536\u7279\u5b9a\u5149\u6ce2\u800c\u53cd\u5c04\u5176\u4ed6\u5149\u6ce2\u7684\u6cb9\u58a8\u6216\u8005\u989c\u8272\u3002 \u6cb9\u58a8\u6216\u989c\u6599\u76843\u79cd\u57fa\u8272\u662f\u4ee5\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u8272\u7684\u8865\u8272\u9752\uff08Cyan\uff09\u3001\u54c1\u7ea2\uff08Magenta\uff09\u3001\u9ec4\uff08Yellow\uff09\u4e3a\u57fa\u8272\u3002 \u7528CMY\u6a21\u578b\u4ea7\u751f\u7684\u989c\u8272\u79f0\u4e3a\u76f8\u51cf\u8272\uff0c\u662f\u56e0\u4e3a\u5b83\u51cf\u6389\u4e86\u4e3a\u89c6\u89c9\u7cfb\u7edf\u8bc6\u522b\u989c\u8272\u6240\u9700\u8981\u7684\u53cd\u5c04\u5149 CMY\u7a7a\u95f4\u4e0eRGB\u7a7a\u95f4\u4e92\u8865\uff0c\u4e5f\u5c31\u662f\u7528\u767d\u8272\u51cf\u53bbRGB\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e00\u989c\u8272\u503c\u5c31\u7b49\u4e8e\u540c\u6837\u989c\u8272\u5728CMY\u7a7a\u95f4\u4e2d\u7684\u503c","title":"CMY Color Model"},{"location":"dip/dip1/#hsv-color-model","text":"\u989c\u8272\u7a7a\u95f4\u662f\u4ece\u4eba\u7684\u89c6\u89c9\u7cfb\u7edf\u51fa\u53d1\uff0c\u7528\u8272\u8c03\uff08Hue)\u3001\u8272\u9971\u548c\u5ea6\uff08Saturation\uff09\u548c\u4eae\u5ea6\uff08Intensity\uff0c\u6216\u8005Value\uff09\u6765 \u5706\u9525\u7684\u9876\u9762\u5bf9\u5e94\u4e8eV=1\uff0c\u5b83\u5305\u542bRGB\u6a21\u578b\u4e2d\u7684R=1\uff0cG=1\uff0cB=1\u4e09\u4e2a\u9762\uff0c\u6545\u6240\u4ee3\u8868\u7684\u989c\u8272\u8f83\u4eae\u3002\u8272\u5ea6H\u7531\u7ed5V\u8f74\u7684\u65cb\u8f6c\u89d2\u7ed9\u5b9a\u3002\u7ea2\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea60o\uff0c\u7eff\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea6120o\uff0c\u84dd\u8272\u5bf9\u5e94\u4e8e\u89d2\u5ea6240o\u3002\u63cf\u8ff0\u989c\u8272\u3002 \u5728\u5706\u9525\u7684\u9876\u70b9\u5904\uff0cV=0\uff0cH\u548cS\u65e0\u5b9a\u4e49\uff0c\u4ee3\u8868\u9ed1\u8272\u3002 \u7b26\u5408\u4eba\u7c7b\u89c6\u89c9\u7cfb\u7edf \u5f53\u91c7\u7528RGB\uff08\u6216\u8005CMY\uff09\u989c\u8272\u6a21\u578b\u65f6\uff0c\u6539\u53d8\u67d0\u4e00\u989c\u8272\u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u6539\u53d8\u8272\u8c03\u5c31\u5fc5\u987b\u540c\u65f6\u6539\u53d8R\u3001G\u3001B\uff08\u6216\u8005C\u3001M\u3001Y\uff09\u4e09\u4e2a\u5750\u6807\uff1b\u800c\u91c7\u7528HSV\u989c\u8272\u6a21\u578b\u65f6\u53ea\u9700\u6539\u53d8H\u5750\u6807\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cHSV\u989c\u8272\u6a21\u578b\u4e2d\u7684\u4e09\u4e2a\u5750\u6807\u662f\u72ec\u7acb\u7684\u3002\u5408\u4eba\u773c\u5bf9\u989c\u8272\u7684\u611f\u89c9\u3002 HSV\u989c\u8272\u6a21\u578b\u6784\u6210\u7684\u662f\u4e00\u4e2a\u5747\u5300\u7684\u989c\u8272\u7a7a\u95f4\uff0c\u91c7\u7528\u7ebf\u6027\u7684\u6807\u5c3a\uff0c\u5f69\u8272\u4e4b\u95f4\u611f\u89c9\u4e0a\u7684\u8ddd\u79bb\u4e0eHSV\u989c\u8272\u6a21\u578b\u5750\u6807\u4e0a\u70b9\u7684\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u6210\u6b63\u6bd4\u3002","title":"HSV Color Model"},{"location":"dip/dip1/#cie-xyz","text":"XYZ \u4e09\u523a\u6fc0\u503c\u7684\u6982\u5ff5\u662f\u4ee5\u8272\u89c6\u89c9\u7684\u4e09\u5143\u7406\u8bba\u4e3a\u6839\u636e\u7684\uff0c\u5b83\u8bf4\u660e\u4eba\u773c\u5177\u6709\u63a5\u53d7\u4e09\u539f\u8272(\u7ea2\u3001\u7eff\u3001\u84dd)\u7684\u63a5\u53d7\u5668\uff0c\u800c\u6240\u6709\u7684\u989c\u8272\u5747\u88ab\u89c6\u4f5c\u8be5\u4e09\u539f\u8272\u7684\u6df7\u5408\u8272\u3002 1931\u5e74CIE\u5236\u5b9a\u4e86\u4e00\u79cd\u5047\u60f3\u7684\u6807\u51c6\u89c2\u5bdf\u8005\uff0c\u8bbe\u7f6e\u914d\u8272\u51fd\u6570 \\(\\overline x(\\lambda)\\) \\(\\overline y(\\lambda)\\) \\(\\overline z(\\lambda)\\) XYZ\u4e09\u523a\u6fc0\u503c\u662f\u5229\u7528\u8fd9\u4e9b\u6807\u51c6\u89c2\u5bdf\u8005\u914d\u8272\u51fd\u6570\u8ba1\u7b97\u5f97\u6765\u7684\u3002 \u5728\u6b64\u57fa\u7840\u4e0a\uff0cCIE\u4e8e1931\u5e74\u89c4\u5b9a\u4e86Yxy\u989c\u8272\u7a7a\u95f4\uff0c\u5176\u4e2dY\u4e3a\u4eae\u5ea6\uff0cx,y\u662f\u4ece\u4e09\u523a\u6fc0\u503cXYZ\u8ba1\u7b97\u5f97\u6765\u7684\u8272\u5750\u6807\u3002\u5b83\u4ee3\u8868\u4eba\u7c7b\u53ef\u89c1\u7684\u989c\u8272\u8303\u56f4\u3002","title":"CIE XYZ"},{"location":"dip/dip1/#cie-lab","text":"L a b \u989c\u8272\u7a7a\u95f4\u662f\u57281976\u5e74\u5236\u5b9a\u7684\uff0c\u5b83\u662fCIE XYZ\u989c\u8272\u6a21\u578b\u7684\u6539\u8fdb\u578b\uff0c\u4ee5\u4fbf\u514b\u670d\u539f\u6765\u7684Yxy\u989c\u8272\u7a7a\u95f4\u5b58\u5728\u7684\u5728x\uff0cy\u8272\u5ea6\u56fe\u4e0a\u76f8\u7b49\u7684\u8ddd\u79bb\u5e76\u4e0d\u76f8\u5f53\u4e8e\u6211\u4eec\u6240\u89c9\u5bdf\u5230\u7684\u76f8\u7b49\u8272\u5dee\u7684\u95ee\u9898\u3002 \u5b83\u7684\u201cL\u201d\uff08\u660e\u4eae\u5ea6\uff09\uff0c\u201ca\u201d\uff08\u7eff\u8272\u5230\u7ea2\u8272\uff09\u548c\u201cb\u201d(\u84dd\u8272\u5230\u9ec4\u8272)\u4ee3\u8868\u8bb8\u591a\u7684\u503c\u3002\u4e0eXYZ\u6bd4\u8f83\uff0cCIE L a b \u989c\u8272\u66f4\u9002\u5408\u4e8e\u4eba\u773c\u7684\u611f\u89c9\u3002 \u5229\u7528CIE L a b*\uff0c\u989c\u8272\u7684\u4eae\u5ea6\uff08L\uff09\u3001\u7070\u9636\u548c\u9971\u548c\u5ea6\uff08a,b\uff09\u53ef\u4ee5\u5355\u72ec\u4fee\u6b63\uff0c\u8fd9\u6837\uff0c\u56fe\u50cf\u7684\u6574\u4e2a\u989c\u8272\u90fd\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u56fe\u50cf\u6216\u5176\u4eae\u5ea6\u7684\u60c5\u51b5\u4e0b\uff0c\u53d1\u751f\u6539\u53d8\u3002","title":"CIE L*a*b"},{"location":"dip/dip1/#cie-yuv","text":"\u5728\u73b0\u4ee3\u5f69\u8272\u7535\u89c6\u7cfb\u7edf\u4e2d\uff0c\u901a\u5e38\u91c7\u7528\u4e09\u7ba1\u5f69\u8272\u6444\u50cf\u673a\u6216\u5f69\u8272CCD\uff08\u7535\u8377\u8026\u5408\u5668\u4ef6\uff09\u6444\u50cf\u673a\uff0c\u5b83\u628a\u6444\u5f97\u7684\u5f69\u8272\u56fe\u50cf\u4fe1\u53f7\uff0c\u7ecf\u5206\u8272\uff0c\u5206\u522b\u653e\u5927\u6821\u6b63\u5f97\u5230RGB\uff0c\u518d\u7ecf\u8fc7\u77e9\u9635\u53d8\u6362\u7535\u8def\u5f97\u5230\u4eae\u5ea6\u4fe1\u53f7Y\u548c\u4e24\u4e2a\u8272\u5dee\u4fe1\u53f7R\uff0dY\u3001B\uff0dY\uff0c\u6700\u540e\u53d1\u9001\u7aef\u5c06\u4eae\u5ea6\u548c\u8272\u5dee\u4e09\u4e2a\u4fe1\u53f7\u5206\u522b\u8fdb\u884c\u7f16\u7801\uff0c\u7528\u540c\u4e00\u4fe1\u9053\u53d1\u9001\u51fa\u53bb\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u5e38\u7528\u7684YUV\u989c\u8272\u7a7a\u95f4\u3002 \u91c7\u7528YUV\u989c\u8272\u7a7a\u95f4\u7684\u91cd\u8981\u6027\u662f\u5b83\u7684\u4eae\u5ea6\u4fe1\u53f7Y\u548c\u8272\u5ea6\u4fe1\u53f7U\u3001V\u662f\u5206\u79bb\u7684\u3002\u5982\u679c\u53ea\u6709Y\u4fe1\u53f7\u5206\u91cf\u800c\u6ca1\u6709U\u3001V\u5206\u91cf\uff0c\u90a3\u4e48\u8fd9\u6837\u8868\u793a\u7684\u56fe\u5c31\u662f\u9ed1\u767d\u7070\u5ea6\u56fe\u3002\u5f69\u8272\u7535\u89c6\u91c7\u7528YUV\u7a7a\u95f4\u6b63\u662f\u4e3a\u4e86\u7528\u4eae\u5ea6\u4fe1\u53f7Y\u89e3\u51b3\u5f69\u8272\u7535\u89c6\u673a\u4e0e\u9ed1\u767d\u7535\u89c6\u673a\u7684\u517c\u5bb9\u95ee\u9898\uff0c\u4f7f\u9ed1\u767d\u7535\u89c6\u673a\u4e5f\u80fd\u63a5\u6536\u5f69\u8272\u4fe1\u53f7\u3002 \u6839\u636e\u7f8e\u56fd\u56fd\u5bb6\u7535\u89c6\u5236\u5f0f\u59d4\u5458\u4f1a\uff0cNTSC\u5236\u5f0f\u7684\u6807\u51c6\uff0c\u5f53\u767d\u5149\u7684\u4eae\u5ea6\u7528Y\u6765\u8868\u793a\u65f6\uff0c\u5b83\u548c\u7ea2\u3001\u7eff\u3001\u84dd\u4e09\u8272\u5149\u7684\u5173\u7cfb\u53ef\u7528\u5982\u4e0b\u5f0f\u7684\u65b9\u7a0b\u63cf\u8ff0\uff1a","title":"CIE YUV"},{"location":"dip/dip1/#image-processing-data-structure","text":"\u77e9\u9635 \u94fe\u5f0f \u4e00\u4e2a\u56fe\u50cf\u662f\u7531\u4e00\u4e2a\u5217\u8868\u8868\u793a\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u53c8\u662f\u4e00\u4e2a\u5b50\u5217\u8868\u3002\u5b50\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u8868\u793a\u76ee\u524d\u662f\u7b2c\u51e0\u884c\uff0c\u968f\u540e\u7684\u6570\u5b57\u6210\u5bf9\u51fa\u73b0\u3002\u6bcf\u5bf9\u8868\u793a\u4e00\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\u4f4d\u7f6e\u3002","title":"Image Processing Data Structure"},{"location":"dip/dip10/","text":"Fourier Transform \u00b6 Abstract Fourier and his work Background of Fourier Transform Fourier Transform Discrete Fourier Transform (1D) FFT Discrete Fourier Transform (2D) FFT for Image in Matlab Fourier Transform \u00b6 Expansion of a Function \u00b6 \u82f1\u56fd\u6570\u5b66\u5bb6\u6cf0\u52d2\u572817\u4e16\u7eaa\u627e\u5230\u4e86\u7528\u5e42\u51fd\u6570\u7684\u65e0\u9650\u7ebf\u6027\u7ec4\u5408\u8868\u793a\u4e00\u822c\u7684\u89e3\u6790\u51fd\u6570\u7684\u65b9\u6cd5\u3002 \\[ f(x)=f(a)+f'(a)(x-a)+\\dfrac{f''(a)}{2!}(x-a)^2+\\dfrac{f'''(a)}{3!}(x-a)^3+\\ldots+\\dfrac{f^{(n)}(a)}{n!}(x-a)^n+\\ldots \\] Fourier Series \u00b6 18\u4e16\u7eaa\u4e2d\u53f6\uff0c\u6cd5\u56fd\u6570\u5b66\u5bb6\u5085\u91cc\u53f6\u5728\u7814\u7a76\u70ed\u4f20\u5bfc\u95ee\u9898\u65f6\uff0c\u627e\u5230\u4e86\u4e09\u89d2\u51fd\u6570\u7684\u65e0\u9650\u7ebf\u6027\u7ec4\u5408\u8868\u793a\u6709\u9650\u533a\u95f4\u4e0a\u7684\u4e00\u822c\u51fd\u6570\u7684\u65b9\u6cd5\uff0c\u5373\u628a\u51fd\u6570\u5c55\u5f00\u6210\u4e09\u89d2\u7ea7\u6570\u3002 \\[ \\begin{align*} f(x) & =\\dfrac{1}{2}a_0+\\sum\\limits_{n=1}^{\\infty}a_n\\cos(nx)+\\sum\\limits_{n=1}^{\\infty}b_n\\sin(nx)\\\\ a_0 & = \\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)dx\\\\ a_n & =\\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)\\cos(nx)dx\\\\ b_n & =\\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)\\sin(nx)dx \\end{align*} \\] \u7b80\u5355\u7684\u5468\u671f\u73b0\u8c61\uff0c\u7b80\u8c10\u632f\u52a8: \\(y=A\\sin(\\omega t+\\phi)\\) \u4e00\u4e2a\u5468\u671f\u8fd0\u52a8\uff0c\u7269\u7406\u5b66\u4e0a\u53ef\u4ee5\u5206\u6210\u82e5\u5e72\u4e2a\u7b80\u8c10\u632f\u52a8\u7684\u53e0\u52a0: \\(y=\\sum\\limits_{k=1}^n y_k=\\sum\\limits_{k=1}^n A_k\\sin(k\\omega t+\\phi)\\) Example Complex Numbers \u00b6 \u590d\u6570\u53ef\u4ee5\u91c7\u7528 Magnitude-Phase (vector) \u8868\u793a\uff0c\u5373 \\(x=|x|e^{j\\phi(x)}\\) , \u5176\u4e2d Magnitude \\(|x|=\\sqrt{a^2+b^2}\\) , Phase \\(\\phi(x)=\\tan^{-1}(b/a)\\) \u5728\u8fd9\u79cd\u8868\u793a\u4e0b\uff0c\u590d\u6570\u4e58\u6cd5\u53ef\u4ee5\u5199\u4f5c \\(xy=|x|e^{j\\phi(x)}\\cdot |y|e^{j\\phi(y)}=|x||y|e^{j\\phi(x)+\\phi(y)}\\) \u5171\u8f6d\u590d\u6570 \\(x^* = a-jb\\) , \u5b83\u6ee1\u8db3 \\(|x|=|x^*|,\\phi(x)=-\\phi(x),xx^*=|x|^2\\) Euler Formula : \\(e^{j\\theta}=\\cos(\\theta)+j\\sin(\\theta)\\) \u5b83\u6ee1\u8db3 \\(|e^{j\\theta}|=1, phi(e^{j\\theta})=\\theta,sin(\\theta)=\\dfrac{1}{2l}(e^{j\\theta}-e^{-j\\theta}),cos(\\theta)=\\dfrac{1}{2}(e^{j\\theta}+e^{-j\\theta})\\) Fourier Transform \u00b6 \u5085\u91cc\u53f6\u53d8\u6362\u662f\u590d\u5085\u91cc\u53f6\u7cfb\u6570\u5728\u7ed9\u5b9a\u533a\u95f4\u4e0a\u7684\u4e00\u4e2a\u63a8\u5e7f\u3002 \u5085\u91cc\u53f6\u5206\u6790\u6307\u9891\u7387\u533a\u57df\u5206\u6790\uff0c\u5176\u4e2d \\(n\\) \u8f83\u5c0f\u65f6\u4e3a\u4f4e\u9891\uff0c \\(n\\) \u8f83\u5927\u65f6\u4e3a\u9ad8\u9891\u3002 \u6ce8\u610f\u5230\u6b63\u5f26\u6ce2\u548c\u4f59\u5f26\u6ce2\u90fd\u662f\u65e0\u9650\u957f\u7684\uff0c\u8fd9\u662f\u5085\u91cc\u53f6\u5206\u6790\u7684\u4e00\u4e2a\u4e0d\u8db3\uff0c\u56e0\u6b64\u5fae\u6ce2(wavelet)\u5206\u6790\u6bd4\u7279\u5b9a\u4fe1\u53f7\u7684\u5206\u6790\u66f4\u597d\u3002 Example \u5bf9\u4e8e\u975e\u5468\u671f\u51fd\u6570,\u5982\u679c\u51fd\u6570 \\(f(x)\\) \u53ea\u5728\u533a\u95f4 \\([\u2212\\pi,\\pi]\\) \u4e0a,\u4e5f\u53ef\u5c55\u5f00\u6210\u5085\u6c0f\u7ea7\u6570. \u5468\u671f\u5ef6\u62d3 \\[ \\begin{align*} F(x)=\\left\\{\\begin{matrix} & f(x) ,x \\in(-\\pi,\\pi] \\\\ & f(x-2k\\pi) ,x\\in ((2k-1)\\pi,(2k+1)\\pi], k=\\pm 1 ,\\pm 2,\\ldots \\end{matrix}\\right. \\end{align*} \\] 1-D 2-D Continuous Image Transform \u00b6 \u5f88\u591a\u65f6\u5019\uff0c\u56fe\u50cf\u5904\u7406\u4efb\u52a1\u5728\u53d8\u6362\u57df\uff08\u9891\u57df\uff09\u800c\u4e0d\u662f\u7a7a\u95f4\u57df\u4e2d\u6267\u884c\u5f97\u6700\u597d\u3002 \u56fe\u50cf\u53d8\u6362 \u8fdb\u884c\u64cd\u4f5c \u56fe\u50cf\u9006\u53d8\u6362\uff0c\u56de\u5230\u7a7a\u95f4\u57df T InvT \u4f4e\u9891\u5bf9\u5e94\u56fe\u50cf\u7f13\u6162\u53d8\u5316\u7684\u4fe1\u606f\uff08\u5982\u8fde\u7eed\u7684\u8868\u9762\uff09\uff1b\u9ad8\u9891\u5bf9\u5e94\u5feb\u901f\u53d8\u5316\u7684\u4fe1\u606f\uff08\u5982\u8fb9\uff09 Frequency Filtering Steps \u5bf9 \\(f(x)\\) \u5085\u91cc\u53f6\u53d8\u6362 \\(F(f(x))\\) \u53bb\u6389\u4e0d\u60f3\u8981\u7684\u9891\u7387 \\(D(F(f(x)))\\) \u8f6c\u6362\u56de\u539f\u6765\u7684\u4fe1\u53f7 \\(\\hat f(x)=F^{-1}(D(F(f(x))))\\) Discrete Fourier Transform (DFT) \u00b6 Forward DFT \\(F(u)=\\sum\\limits_{x=0}^{N-1}f(x)e^{-\\frac{j2\\pi ux}{N}}, u=0,1,\\ldots,N-1\\) N \u9891\u7387\u7684\u6570\u76ee\uff0cx \u91c7\u6837\u70b9\u7684\u6570\u76ee Inverse \\(f(x)=\\dfrac{1}{N}\\sum\\limits_{u=0}^{N-1}f(u)e^{\\frac{j2\\pi ux}{N}}, x=0,1,\\ldots,N-1\\) Magnitude VS Phase \u5982\u679c\u6211\u4eec\u53ea\u7528\u632f\u5e45/\u76f8\u4f4d\u4f5c\u4e3a\u4fe1\u606f\u91cd\u5efa\u56fe\u50cf\uff0c\u4f1a\u5f97\u5230\u4ec0\u4e48\u6837\u7684\u7ed3\u679c\uff1f \u5229\u7528\u632f\u5e45 \u5229\u7528\u76f8\u4f4d \u76f8\u4f4d\u66f4\u591a\u7684\u4f20\u9012\u4e86\u56fe\u50cf\u7684\u7ed3\u6784\u4fe1\u606f\uff01 Fast Fourier Transform(FFT) \u00b6 \u5c06\u539f\u59cb\u7684 N \u70b9\u5e8f\u5217\u4f9d\u6b21\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u77ed\u5e8f\u5217\uff1b \u6c42\u51fa\u8fd9\u4e9b\u77ed\u5e8f\u5217\u7684\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\uff1b \u7ec4\u5408\u51fa\u6240\u9700\u7684\u53d8\u6362\u503c\uff1b \u8ba1\u7b97\u91cf\uff08\u4e58\u9664\u6cd5\uff09\uff1a \\(2N^2\\rightarrow 2N\\lg_2N\\) Principle \u00b6 \\(F(k)=\\dfrac{1}{N}\\sum\\limits_{n=0}^{N-1}f(n)e^{\\frac{j2\\pi kn}{N}}\\) Let \\(W_N^{n,k}=e^{-j2\\pi nk/N}\\) then DFT is \\(F(k)=\\dfrac{1}{N}\\sum\\limits_{n=0}^{N-1}f(n)W_N^{n,k}\\) \u5047\u5b9a \\(N\\) \u4e3a \\(2\\) \u7684\u6b63\u6574\u6570\u5e42\uff1a \\(N=2^H\\Rightarrow N=2M\\) , \u5c06\u539f\u5f0f\u5b50\u5206\u4e3a\u5947\u6570\u9879\u548c\u5076\u6570\u9879 \\[ \\begin{align*} F(k) & = \\dfrac{1}{2M} \\sum\\limits_{n=0}^{2M-1}f(n)W_{2M}^{n,k}\\\\ & = \\dfrac{1}{2}\\left[\\dfrac{1}{M}\\sum\\limits_{n=0}^{M-1}f(2n)W_{2M}^{2n,k}+\\dfrac{1}{M}\\sum\\limits_{n=0}^{M-1}f(2n+1)W_{2M}^{2n+1,k}\\right]\\\\ W_{2M}^{2n,k} & = e^{-j2\\pi \\cdot 2nk/2M} = e^{-j2\\pi nk/M} = W_M^{n,k}\\\\ W_{2M}^{2n+1,k} & = e^{-j2\\pi \\cdot (2n+1)k/2M} = e^{-j2\\pi nk/M} \\cdot e^{-j2\\pi k/2M}= W_M^{n,k}\\cdot W_{2M}^k\\\\ F(k) & = \\left[\\sum\\limits_{n=0}^{M-1}f(2n)W_M^{n,k}+\\sum\\limits_{n=0}^{M-1}f(2n+1)W_M^{n,k}W_{2M}^k\\right], k=0,1,\\ldots,M-1 \\end{align*} \\] \u4ee4 \\(\\left\\{ \\begin{matrix} F_e(k) & = \\sum\\limits_{n=0}^{M-1}f(2n)W_M^{n,k} \\\\ F_o(k) & = \\sum\\limits_{n=0}^{M-1}f(2n+1)W_M^{n,k} \\end{matrix}\\right.\\) \u90a3\u4e48 \\(F(k)=\\lfloor F_e(k)+F_o(k)W_{2M}^k \\rfloor\\) \u5982\u679c \\(e, o\\) \u662f \\(2\\) \u7684\u5e42\u6b21\uff0c\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u62c6 \u5bf9\u4e8e \\(k=M,M+1\\ldots,2M-1\\) \\[ \\begin{align*} W_M^{n,k+M} & = e^{-j2\\pi (k+M)/M}\\\\ & = e^{-j2\\pi n k/M} \\cdot e^{-j2n\\pi}\\\\ & = e^{-j2\\pi n k /M}\\\\ & = W_M^{n,k}\\\\ W_{2M}^{k+M} & = e^{-j2\\pi k/2M\\cdot e^{-j\\pi}=-W_{2M}^k} \\end{align*} \\] \u56e0\u6b64 $F(k+M)=\\lfloor F_e(k)-F_o(k)W_{2M}^k\\rfloor $ \u610f\u4e49\uff1a\u5bf9\u4e00\u4e2a\u957f\u5ea6\u4e3a N \u7684\u5e8f\u5217\u8fdb\u884c\u5085\u7acb\u53f6\u53d8\u6362\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u5206\u6210\u4e24\u534a\u8ba1\u7b97\uff0c\u5bf9\u7b2c\u4e00\u90e8\u5206\u7684\u8ba1\u7b97\u9700\u8981\u901a\u8fc7\u8ba1\u7b97\u4e24\u4e2a\u957f\u5ea6\u4e3a N/2 \u957f\u5ea6\u5e8f\u5217\u7684\u5085\u7acb\u53f6\u53d8\u6362\u5f0f\u8fdb\u884c\uff0c\u7136\u540e\u5229\u7528\u8fd9\u4e24\u4e2a\u957f\u5ea6\u4e3a N/2 \u7684\u5e8f\u5217\u53ef\u4ee5\u5f97\u5230\u7b2c\u4e8c\u90e8\u5206\u7684\u503c\u3002","title":"\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"dip/dip10/#fourier-transform","text":"Abstract Fourier and his work Background of Fourier Transform Fourier Transform Discrete Fourier Transform (1D) FFT Discrete Fourier Transform (2D) FFT for Image in Matlab","title":"Fourier Transform"},{"location":"dip/dip10/#fourier-transform_1","text":"","title":"Fourier Transform"},{"location":"dip/dip10/#expansion-of-a-function","text":"\u82f1\u56fd\u6570\u5b66\u5bb6\u6cf0\u52d2\u572817\u4e16\u7eaa\u627e\u5230\u4e86\u7528\u5e42\u51fd\u6570\u7684\u65e0\u9650\u7ebf\u6027\u7ec4\u5408\u8868\u793a\u4e00\u822c\u7684\u89e3\u6790\u51fd\u6570\u7684\u65b9\u6cd5\u3002 \\[ f(x)=f(a)+f'(a)(x-a)+\\dfrac{f''(a)}{2!}(x-a)^2+\\dfrac{f'''(a)}{3!}(x-a)^3+\\ldots+\\dfrac{f^{(n)}(a)}{n!}(x-a)^n+\\ldots \\]","title":"Expansion of a Function"},{"location":"dip/dip10/#fourier-series","text":"18\u4e16\u7eaa\u4e2d\u53f6\uff0c\u6cd5\u56fd\u6570\u5b66\u5bb6\u5085\u91cc\u53f6\u5728\u7814\u7a76\u70ed\u4f20\u5bfc\u95ee\u9898\u65f6\uff0c\u627e\u5230\u4e86\u4e09\u89d2\u51fd\u6570\u7684\u65e0\u9650\u7ebf\u6027\u7ec4\u5408\u8868\u793a\u6709\u9650\u533a\u95f4\u4e0a\u7684\u4e00\u822c\u51fd\u6570\u7684\u65b9\u6cd5\uff0c\u5373\u628a\u51fd\u6570\u5c55\u5f00\u6210\u4e09\u89d2\u7ea7\u6570\u3002 \\[ \\begin{align*} f(x) & =\\dfrac{1}{2}a_0+\\sum\\limits_{n=1}^{\\infty}a_n\\cos(nx)+\\sum\\limits_{n=1}^{\\infty}b_n\\sin(nx)\\\\ a_0 & = \\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)dx\\\\ a_n & =\\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)\\cos(nx)dx\\\\ b_n & =\\dfrac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(x)\\sin(nx)dx \\end{align*} \\] \u7b80\u5355\u7684\u5468\u671f\u73b0\u8c61\uff0c\u7b80\u8c10\u632f\u52a8: \\(y=A\\sin(\\omega t+\\phi)\\) \u4e00\u4e2a\u5468\u671f\u8fd0\u52a8\uff0c\u7269\u7406\u5b66\u4e0a\u53ef\u4ee5\u5206\u6210\u82e5\u5e72\u4e2a\u7b80\u8c10\u632f\u52a8\u7684\u53e0\u52a0: \\(y=\\sum\\limits_{k=1}^n y_k=\\sum\\limits_{k=1}^n A_k\\sin(k\\omega t+\\phi)\\) Example","title":"Fourier Series"},{"location":"dip/dip10/#complex-numbers","text":"\u590d\u6570\u53ef\u4ee5\u91c7\u7528 Magnitude-Phase (vector) \u8868\u793a\uff0c\u5373 \\(x=|x|e^{j\\phi(x)}\\) , \u5176\u4e2d Magnitude \\(|x|=\\sqrt{a^2+b^2}\\) , Phase \\(\\phi(x)=\\tan^{-1}(b/a)\\) \u5728\u8fd9\u79cd\u8868\u793a\u4e0b\uff0c\u590d\u6570\u4e58\u6cd5\u53ef\u4ee5\u5199\u4f5c \\(xy=|x|e^{j\\phi(x)}\\cdot |y|e^{j\\phi(y)}=|x||y|e^{j\\phi(x)+\\phi(y)}\\) \u5171\u8f6d\u590d\u6570 \\(x^* = a-jb\\) , \u5b83\u6ee1\u8db3 \\(|x|=|x^*|,\\phi(x)=-\\phi(x),xx^*=|x|^2\\) Euler Formula : \\(e^{j\\theta}=\\cos(\\theta)+j\\sin(\\theta)\\) \u5b83\u6ee1\u8db3 \\(|e^{j\\theta}|=1, phi(e^{j\\theta})=\\theta,sin(\\theta)=\\dfrac{1}{2l}(e^{j\\theta}-e^{-j\\theta}),cos(\\theta)=\\dfrac{1}{2}(e^{j\\theta}+e^{-j\\theta})\\)","title":"Complex Numbers"},{"location":"dip/dip10/#fourier-transform_2","text":"\u5085\u91cc\u53f6\u53d8\u6362\u662f\u590d\u5085\u91cc\u53f6\u7cfb\u6570\u5728\u7ed9\u5b9a\u533a\u95f4\u4e0a\u7684\u4e00\u4e2a\u63a8\u5e7f\u3002 \u5085\u91cc\u53f6\u5206\u6790\u6307\u9891\u7387\u533a\u57df\u5206\u6790\uff0c\u5176\u4e2d \\(n\\) \u8f83\u5c0f\u65f6\u4e3a\u4f4e\u9891\uff0c \\(n\\) \u8f83\u5927\u65f6\u4e3a\u9ad8\u9891\u3002 \u6ce8\u610f\u5230\u6b63\u5f26\u6ce2\u548c\u4f59\u5f26\u6ce2\u90fd\u662f\u65e0\u9650\u957f\u7684\uff0c\u8fd9\u662f\u5085\u91cc\u53f6\u5206\u6790\u7684\u4e00\u4e2a\u4e0d\u8db3\uff0c\u56e0\u6b64\u5fae\u6ce2(wavelet)\u5206\u6790\u6bd4\u7279\u5b9a\u4fe1\u53f7\u7684\u5206\u6790\u66f4\u597d\u3002 Example \u5bf9\u4e8e\u975e\u5468\u671f\u51fd\u6570,\u5982\u679c\u51fd\u6570 \\(f(x)\\) \u53ea\u5728\u533a\u95f4 \\([\u2212\\pi,\\pi]\\) \u4e0a,\u4e5f\u53ef\u5c55\u5f00\u6210\u5085\u6c0f\u7ea7\u6570. \u5468\u671f\u5ef6\u62d3 \\[ \\begin{align*} F(x)=\\left\\{\\begin{matrix} & f(x) ,x \\in(-\\pi,\\pi] \\\\ & f(x-2k\\pi) ,x\\in ((2k-1)\\pi,(2k+1)\\pi], k=\\pm 1 ,\\pm 2,\\ldots \\end{matrix}\\right. \\end{align*} \\] 1-D 2-D Continuous","title":"Fourier Transform"},{"location":"dip/dip10/#image-transform","text":"\u5f88\u591a\u65f6\u5019\uff0c\u56fe\u50cf\u5904\u7406\u4efb\u52a1\u5728\u53d8\u6362\u57df\uff08\u9891\u57df\uff09\u800c\u4e0d\u662f\u7a7a\u95f4\u57df\u4e2d\u6267\u884c\u5f97\u6700\u597d\u3002 \u56fe\u50cf\u53d8\u6362 \u8fdb\u884c\u64cd\u4f5c \u56fe\u50cf\u9006\u53d8\u6362\uff0c\u56de\u5230\u7a7a\u95f4\u57df T InvT \u4f4e\u9891\u5bf9\u5e94\u56fe\u50cf\u7f13\u6162\u53d8\u5316\u7684\u4fe1\u606f\uff08\u5982\u8fde\u7eed\u7684\u8868\u9762\uff09\uff1b\u9ad8\u9891\u5bf9\u5e94\u5feb\u901f\u53d8\u5316\u7684\u4fe1\u606f\uff08\u5982\u8fb9\uff09 Frequency Filtering Steps \u5bf9 \\(f(x)\\) \u5085\u91cc\u53f6\u53d8\u6362 \\(F(f(x))\\) \u53bb\u6389\u4e0d\u60f3\u8981\u7684\u9891\u7387 \\(D(F(f(x)))\\) \u8f6c\u6362\u56de\u539f\u6765\u7684\u4fe1\u53f7 \\(\\hat f(x)=F^{-1}(D(F(f(x))))\\)","title":"Image Transform"},{"location":"dip/dip10/#discrete-fourier-transform-dft","text":"Forward DFT \\(F(u)=\\sum\\limits_{x=0}^{N-1}f(x)e^{-\\frac{j2\\pi ux}{N}}, u=0,1,\\ldots,N-1\\) N \u9891\u7387\u7684\u6570\u76ee\uff0cx \u91c7\u6837\u70b9\u7684\u6570\u76ee Inverse \\(f(x)=\\dfrac{1}{N}\\sum\\limits_{u=0}^{N-1}f(u)e^{\\frac{j2\\pi ux}{N}}, x=0,1,\\ldots,N-1\\) Magnitude VS Phase \u5982\u679c\u6211\u4eec\u53ea\u7528\u632f\u5e45/\u76f8\u4f4d\u4f5c\u4e3a\u4fe1\u606f\u91cd\u5efa\u56fe\u50cf\uff0c\u4f1a\u5f97\u5230\u4ec0\u4e48\u6837\u7684\u7ed3\u679c\uff1f \u5229\u7528\u632f\u5e45 \u5229\u7528\u76f8\u4f4d \u76f8\u4f4d\u66f4\u591a\u7684\u4f20\u9012\u4e86\u56fe\u50cf\u7684\u7ed3\u6784\u4fe1\u606f\uff01","title":"Discrete Fourier Transform (DFT)"},{"location":"dip/dip10/#fast-fourier-transformfft","text":"\u5c06\u539f\u59cb\u7684 N \u70b9\u5e8f\u5217\u4f9d\u6b21\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u77ed\u5e8f\u5217\uff1b \u6c42\u51fa\u8fd9\u4e9b\u77ed\u5e8f\u5217\u7684\u79bb\u6563\u5085\u7acb\u53f6\u53d8\u6362\uff1b \u7ec4\u5408\u51fa\u6240\u9700\u7684\u53d8\u6362\u503c\uff1b \u8ba1\u7b97\u91cf\uff08\u4e58\u9664\u6cd5\uff09\uff1a \\(2N^2\\rightarrow 2N\\lg_2N\\)","title":"Fast Fourier Transform(FFT)"},{"location":"dip/dip10/#principle","text":"\\(F(k)=\\dfrac{1}{N}\\sum\\limits_{n=0}^{N-1}f(n)e^{\\frac{j2\\pi kn}{N}}\\) Let \\(W_N^{n,k}=e^{-j2\\pi nk/N}\\) then DFT is \\(F(k)=\\dfrac{1}{N}\\sum\\limits_{n=0}^{N-1}f(n)W_N^{n,k}\\) \u5047\u5b9a \\(N\\) \u4e3a \\(2\\) \u7684\u6b63\u6574\u6570\u5e42\uff1a \\(N=2^H\\Rightarrow N=2M\\) , \u5c06\u539f\u5f0f\u5b50\u5206\u4e3a\u5947\u6570\u9879\u548c\u5076\u6570\u9879 \\[ \\begin{align*} F(k) & = \\dfrac{1}{2M} \\sum\\limits_{n=0}^{2M-1}f(n)W_{2M}^{n,k}\\\\ & = \\dfrac{1}{2}\\left[\\dfrac{1}{M}\\sum\\limits_{n=0}^{M-1}f(2n)W_{2M}^{2n,k}+\\dfrac{1}{M}\\sum\\limits_{n=0}^{M-1}f(2n+1)W_{2M}^{2n+1,k}\\right]\\\\ W_{2M}^{2n,k} & = e^{-j2\\pi \\cdot 2nk/2M} = e^{-j2\\pi nk/M} = W_M^{n,k}\\\\ W_{2M}^{2n+1,k} & = e^{-j2\\pi \\cdot (2n+1)k/2M} = e^{-j2\\pi nk/M} \\cdot e^{-j2\\pi k/2M}= W_M^{n,k}\\cdot W_{2M}^k\\\\ F(k) & = \\left[\\sum\\limits_{n=0}^{M-1}f(2n)W_M^{n,k}+\\sum\\limits_{n=0}^{M-1}f(2n+1)W_M^{n,k}W_{2M}^k\\right], k=0,1,\\ldots,M-1 \\end{align*} \\] \u4ee4 \\(\\left\\{ \\begin{matrix} F_e(k) & = \\sum\\limits_{n=0}^{M-1}f(2n)W_M^{n,k} \\\\ F_o(k) & = \\sum\\limits_{n=0}^{M-1}f(2n+1)W_M^{n,k} \\end{matrix}\\right.\\) \u90a3\u4e48 \\(F(k)=\\lfloor F_e(k)+F_o(k)W_{2M}^k \\rfloor\\) \u5982\u679c \\(e, o\\) \u662f \\(2\\) \u7684\u5e42\u6b21\uff0c\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u62c6 \u5bf9\u4e8e \\(k=M,M+1\\ldots,2M-1\\) \\[ \\begin{align*} W_M^{n,k+M} & = e^{-j2\\pi (k+M)/M}\\\\ & = e^{-j2\\pi n k/M} \\cdot e^{-j2n\\pi}\\\\ & = e^{-j2\\pi n k /M}\\\\ & = W_M^{n,k}\\\\ W_{2M}^{k+M} & = e^{-j2\\pi k/2M\\cdot e^{-j\\pi}=-W_{2M}^k} \\end{align*} \\] \u56e0\u6b64 $F(k+M)=\\lfloor F_e(k)-F_o(k)W_{2M}^k\\rfloor $ \u610f\u4e49\uff1a\u5bf9\u4e00\u4e2a\u957f\u5ea6\u4e3a N \u7684\u5e8f\u5217\u8fdb\u884c\u5085\u7acb\u53f6\u53d8\u6362\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u5206\u6210\u4e24\u534a\u8ba1\u7b97\uff0c\u5bf9\u7b2c\u4e00\u90e8\u5206\u7684\u8ba1\u7b97\u9700\u8981\u901a\u8fc7\u8ba1\u7b97\u4e24\u4e2a\u957f\u5ea6\u4e3a N/2 \u957f\u5ea6\u5e8f\u5217\u7684\u5085\u7acb\u53f6\u53d8\u6362\u5f0f\u8fdb\u884c\uff0c\u7136\u540e\u5229\u7528\u8fd9\u4e24\u4e2a\u957f\u5ea6\u4e3a N/2 \u7684\u5e8f\u5217\u53ef\u4ee5\u5f97\u5230\u7b2c\u4e8c\u90e8\u5206\u7684\u503c\u3002","title":"Principle"},{"location":"dip/dip11/","text":"Image Feature \u00b6 Abstract Image feature Image matching Feature detection Harris operator Invariance Scale Invariant Feature Transform (SIFT) Image Matching \u00b6 \u505a\u56fe\u50cf\u62fc\u63a5: \u68c0\u6d4b\u4e24\u5f20\u56fe\u8c61\u7684\u7279\u5f81\u70b9\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u70b9\u5bf9\uff0c\u7528\u8fd9\u4e9b\u70b9\u5bf9\u5bf9\u9f50\u56fe\u50cf Feature detection \u00b6 \u63d0\u53d6\u51fa\u5c40\u90e8\u7684\u5177\u6709\u51e0\u4f55\u4e0d\u53d8\u6027\u7684\u7279\u5f81 \u600e\u6837\u627e\u5230\u4e00\u4e2a\u597d\u7684\u7279\u5f81\uff1f \u2014\u2014\u627e\u5230\u4e00\u4e2a\u975e\u540c\u5bfb\u5e38\u7684\u533a\u57df \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u5c0f\u7a97\u53e3\u7684\u50cf\u7d20 flat : \u5728\u4efb\u4f55\u65b9\u5411\u90fd\u4e0d\u4f1a\u6709\u50cf\u7d20\u7684\u6539\u53d8 egde : \u6cbf\u7740\u8fb9\u7684\u65b9\u5411\u4e0d\u4f1a\u6709\u50cf\u7d20\u7684\u6539\u53d8 corner : \u5728\u4efb\u4f55\u65b9\u5411\u90fd\u4f1a\u6709\u660e\u663e\u7684\u6539\u53d8 \u91cf\u5316\u7a97\u53e3\u50cf\u7d20\u7684\u53d8\u5316: \\(W\\) \u8868\u793a\u7a97\u53e3\uff0c \\((u,v)\\) \u8868\u793a\u65b9\u5411 \\(E(u,v)=\\sum\\limits_{(x,y)\\in W}[I(x+u,y+v)-I(x,y)]^2\\) \u6cf0\u52d2\u5c55\u5f00: \\(I(x+u,y+v)-I(x,y)=\\dfrac{\\partial I}{\\partial x}u + \\dfrac{\\partial I}{\\partial y}v + higher\\ order\\ terms\\) \u5982\u679c\u79fb\u52a8 \\((u,v)\\) \u5c0f\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u4e00\u9636\u5fae\u5206\u4f30\u8ba1 \\(I(x+u,y+v)-I(x,y)\\approx \\dfrac{\\partial I}{\\partial x}u + \\dfrac{\\partial I}{\\partial y}v=\\left[\\begin{matrix}I_x & I_y \\end{matrix}\\right]\\left[\\begin{matrix}u \\\\ v \\end{matrix}\\right]\\) \u5c06\u5f0f\u5b50\u5e26\u5165\u4e4b\u524d\u7684\u516c\u5f0f\u5f97\u5230 \\[ \\begin{align*} E(u,v) & \\approx \\sum\\limits_{(x,y)\\in W} \\left[\\left[\\begin{matrix}I_x & I_y \\end{matrix}\\right]\\left[\\begin{matrix}u \\\\ v \\end{matrix}\\right]\\right]^2\\\\ & = \\sum\\limits_{(x,y)\\in W}\\left[\\begin{matrix}u & v \\end{matrix}\\right]\\left[\\begin{matrix}I_x^2 & I_xI_y \\\\ I_yI_x & I_y^2 \\end{matrix}\\right] \\left[\\begin{matrix}u \\\\ v \\end{matrix}\\right] \\end{align*} \\] \u6cbf\u7740\u77e9\u9635 \\(H\\) \u7684\u4e24\u4e2a\u7279\u5f81\u5411\u91cf\uff0c\u53d8\u5316\u6700\u5927\u3002 \\(\\lambda_{+}, \\lambda_{-}\\) \u6bd4\u8f83\u5927\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u597d\u7684\u4f4d\u7f6e\uff08\u56e0\u4e3a\u6cbf\u5404\u4e2a\u65b9\u5411\u7684\u53d8\u5316\u90fd\u8f83\u5927\uff09 \u4e00\u4e2a\u5927\u4e00\u4e2a\u5c0f: \\(edge\\) ; \u4e24\u4e2a\u90fd\u5c0f: \\(flat\\) Feature Detection \u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u70b9\u7684\u68af\u5ea6 \u901a\u8fc7\u68af\u5ea6\u5f97\u5230\u6bcf\u4e2a windows \u7684 \\(H\\) \u77e9\u9635 \u8ba1\u7b97\u7279\u5f81\u503c \u627e\u5230\u76f8\u5e94\u8f83\u5927\u7684\u70b9( \\(\\lambda_- > Threshold\\) ) \u9009\u62e9\u90a3\u4e9b \\(\\lambda_-\\) \u662f\u5c40\u90e8\u6781\u5927\u503c\u7684\u70b9\u4f5c\u4e3a\u7279\u5f81 The Harries operator \u00b6 \\(\\lambda_-\\) \u662f Harries operator \u7528\u4e8e\u7279\u5f81\u68c0\u6d4b\u7684\u53d8\u4f53 \\[ \\begin{align*} f & = \\dfrac{\\lambda_1\\lambda_2}{\\lambda_1 + \\lambda_2}\\\\ & = \\dfrac{det(H)}{trace(H)} \\end{align*} \\] \\(trace(H)=h_{11}+h_{22}\\) \u8fd9\u5c31\u662f \u201cHarris Corner Detector\u201d or \u201cHarris Operator\u201d, \u8fd9\u4e2a\u7b97\u5b50\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u54cd\u5e94\u503c Some properties \u00b6 \u65cb\u8f6c\u4e0d\u53d8\u6027 \u692d\u5706\u65cb\u8f6c\uff0c\u4f46\u957f\u8f74\u77ed\u8f74\u7684\u5f62\u72b6\u4e0d\u53d8\uff0c\u7279\u5f81\u503c\u4e5f\u4e0d\u53d8 \u5bf9\u56fe\u50cf\u5f3a\u5ea6\u6539\u53d8 \u5bf9\u52a0\u6cd5\u548c\u6570\u4e58\u5f3a\u5ea6\u53d8\u5316\u4fdd\u6301\u4e0d\u53d8 \\(I\\rightarrow I+b,I\\rightarrow aI\\) \u6781\u503c\u70b9\u4e0d\u53d8 \u56fe\u50cf\u5c3a\u5ea6\u53d8\u5316\u4f1a\u6709\u5f71\u54cd\uff01 Scale Invariant Detection \u00b6 \u5728\u533a\u57df\u5185\u8bbe\u8ba1\u4e00\u4e2a\u6bd4\u4f8b\u4e0d\u53d8\u7684\u51fd\u6570 \u5728\u4e0d\u540c\u7684\u56fe\u50cf(\u6bd4\u4f8b\u4e0d\u540c)\uff0c\u6781\u503c\u70b9\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u73b0 a. edge, \u6ca1\u6709\u6781\u503c\u70b9 b. \u597d\u51e0\u4e2a\u6781\u503c\u70b9 \u4e0d\u77e5\u9053\u662f\u54ea\u4e2a c. good \u80fd\u7b5b\u6389\u524d\u4e24\u79cd \u4e8c\u8005\u601d\u8def\u76f8\u540c, kernal \u7565\u6709\u5dee\u5f02 \\(f=Kernal * Image\\) kernals : \\(L=\\sigma^2(G_{xx}(x,y\\sigma)+G_{yy}(x,y,\\sigma))\\) \\(DoG=G(x,y,k\\sigma)-G(x,y,\\sigma)\\) \u5176\u4e2d \\(G(x,y,\\sigma)=\\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^2+y^2}{2\\sigma^2}}\\) Harris-Laplacian \u00b6 \u4e0d\u540c\u7ef4\u5ea6\u8ba1\u7b97\u65b9\u6cd5\u4e0d\u4e00\u6837 \u521d\u59cb\u5316\uff1a\u591a\u5c3a\u5ea6\u7684 Harris corner detection(\u6539\u53d8\u6e05\u6670\u5ea6\u540e\uff0c\u5355\u72ec\u627e\u89d2\u70b9) \u53ea\u6709\u5728\u4efb\u4f55\u5c3a\u5ea6\u4e0a\u90fd\u662f\u89d2\u70b9\u7684\u70b9\uff0c\u624d\u80fd\u88ab\u4fdd\u7559 \u57fa\u4e8e\u62c9\u666e\u62c9\u65af\u7b97\u5b50\uff0c\u8fdb\u884c\u5c3a\u5ea6\u9009\u62e9\u3002\u5bf9\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u54ea\u4e00\u4e2a\u5c3a\u5ea6\u4e0a\u62c9\u666e\u62c9\u65af\u503c\u6700\u5927\uff0c\u5c06\u8fd9\u4e2a\u4f4d\u7f6e\u548c\u5c3a\u5ea6\u4f5c\u4e3a\u89d2\u70b9\u3002\uff08\u552f\u4e00\u6027\uff0c\u5728\u8fd9\u4e2a\u5c3a\u5ea6\u4e0a\u662f\u6781\u5927\u503c\uff0c\u90a3\u4e48\u5728\u53e6\u4e00\u4e2a\u5c3a\u5ea6\u4e0a\u4e5f\u662f\u6781\u5927\u503c\uff0c\u53ea\u662f\u6781\u5927\u503c\u7684\u6570\u503c\u53ef\u80fd\u4e0d\u540c\uff09\uff1f\uff1f\uff1f Laplacian-of-Gaussian = \"blob\" detector \\(\\nabla^2 g=\\dfrac{\\partial^2 g}{\\partial x^2}+\\dfrac{\\partial^2 g}{\\partial y^2}\\) \u5728\u56fe\u50cf\u4e2d\u7ed9\u5b9a\u7684\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5b9a\u4e49\u62c9\u666e\u62c9\u65af\u54cd\u5e94\u503c\u8fbe\u5230\u5cf0\u503c\u7684\u5c3a\u5ea6\u4e3a \u7279\u5f81\u5c3a\u5ea6(characteristic scale) SIFT \u00b6 \u4e09\u4e2a\u65b9\u5411\u90fd\u662f DOG. \u5bf9\u4e8e\u753b \u00d7 \u7684\u9700\u8981\u6bd4\u8f8326\u4e2a\u90bb\u5c45\u624d\u80fd\u5f97\u51fa\u5176\u662f\u5426\u662f\u6781\u503c\uff0c\u8ba1\u7b97\u901f\u5ea6\u76f8\u5bf9\u8f83\u6162\u3002 \u5f97\u5230\u89d2\u70b9\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u89d2\u70b9\u7684\u7279\u5f81\uff0c\u5982\u65b9\u5411\u6027 \u68af\u5ea6\u548c\u89d2\u5ea6 \u5176\u4e2d \\(m(x,y)\\) \u662f\u70b9\u7684\u5e45\u503c\uff0c\u5373 x \u65b9\u5411\u7684\u5dee\u5206\u548c y \u65b9\u5411\u7684\u5dee\u5206\u7684\u5e73\u65b9\u548c \\(\\theta(x,y)\\) \u662f\u901a\u8fc7 y \u65b9\u5411\u7684\u68af\u5ea6\u548c\u6bd4\u4e0a x \u65b9\u5411\u7684\u68af\u5ea6\u7684\u53cd\u6b63\u5207\u8ba1\u7b97 \u65b9\u5411\u9009\u62e9 \u53ef\u4ee5\u7528\u6295\u7968\u7684\u65b9\u5f0f\u5b9a\u4e49\u90bb\u57df\u7684\u671d\u5411 SIFT Descriptor \u00b6 Invariance: \u5047\u8bbe\u8fd9\u91cc\u6709\u4e24\u5e45\u56fe\u50cf \\(I_1, I_2\\) , \u5176\u4e2d \\(I_2\\) \u662f \\(I_1\\) \u7ecf\u8fc7\u67d0\u79cd\u53d8\u6362\u540e\u7684\u7248\u672c\uff08\u4eff\u5c04\u53d8\u6362\uff0c\u4eae\u5ea6\u7b49\uff09 \u5728\u53d8\u6362\u4e2d\u4e0d\u53d8\u7684\u7279\u5f81\u79f0\u4e3a \u53d8\u6362\u4e0d\u53d8\u6027 SIFT \u7279\u5f81\uff1a\u65cb\u8f6c\u4e0d\u53d8\u6027 \u6839\u636e\u5176\u4e3b\u8981\u68af\u5ea6\u65b9\u5411(dominant gradient orientation)\u65cb\u8f6c patch, \u8fd9\u6837\u53ef\u4ee5\u4f7f\u4ed6\u5904\u4e8e\u89c4\u8303\u65b9\u5411 Scale Invariant Feature Transform \u57fa\u672c\u601d\u60f3 \u5728\u68c0\u6d4b\u5230\u7684\u7279\u5f81\u89d2\u70b9\u5468\u56f4\u9009\u53d6 \\(16\\times16\\) \u7684\u65b9\u5f62\u7a97\u53e3 \u8ba1\u7b97\u6bcf\u4e2a\u50cf\u7d20\u7684\u8fb9\u7684\u671d\u5411(\u68af\u5ea6\u7684\u89d2\u5ea6- 90\u00b0) \u5254\u9664\u5f31\u8fb9\u7f18(\u5c0f\u4e8e\u9608\u503c\u68af\u5ea6\u5e45\u5ea6) \u521b\u5efa\u5269\u4e0b\u8fb9\u7684\u65b9\u5411\u7684\u76f4\u65b9\u56fe \u5b8c\u6574\u7248\uff1a \u5c06 \\(16\\times16\\) \u7684\u7a97\u53e3 \u5212\u5206\u4e3a \\(4\\times4\\) \u7684\u7f51\u683c \u5bf9\u6bcf\u4e2a\u7f51\u683c\u8ba1\u7b97\u5176\u65b9\u5411\u76f4\u65b9\u56fe 16 cells * 8 orientations = 128 dimensional descriptor(128 \u7ef4\u5411\u91cf) SIFT Feature Descriptor 128-D \u53ef\u4ee5\u901a\u8fc7\u53bb\u6389\u5149\u7167\u53d8\u5316\u5e26\u6765\u7684\u5f71\u54cd \u4f4d\u7f6e \\((x,y)\\) \u5c3a\u5ea6\uff0c\u63a7\u5236\u7279\u5f81\u63d0\u53d6\u7684\u8986\u76d6\u8303\u56f4 \u65b9\u5411\uff0c\u5b9e\u73b0\u65cb\u8f6c\u4e0d\u53d8\u7684 descriptor SIFT \u7279\u5f81\u53ef\u4ee5\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b Bag of visual words \u63d0\u53d6SIFT\u7279\u5f81\uff0c\u5c06\u7279\u5f81\u505a\u4e00\u4e2a\u805a\u7c7b(kmeans)\uff0c\u5c06\u6bcf\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u79f0\u4e3a visual word \u89c6\u89c9\u5355\u8bcd Conclusion of SIFT \u4f18\u70b9 \u671f\u671b\u5728\u6bd4\u4f8b\u3001\u65cb\u8f6c\u3001\u5149\u7167\u7b49\u53d8\u5316\u4e2d\u7684\u4e0d\u53d8\u6027\u3002 \u5c40\u90e8 patch \u5177\u6709\u5f88\u5f3a\u7684\u533a\u5206\u6027\u548c\u8868\u5f81\u80fd\u529b\u3002 \u5728\u521a\u6027\u5bf9\u8c61\u8868\u793a\u4e0a\u975e\u5e38\u6709\u6548\u3002 \u7f3a\u70b9 \u63d0\u53d6\u8017\u65f6 \u5bf9\u4e8e\u5927\u5c0f\u4e3a400 * 400\u7684\u56fe\u50cf\uff0c\u5e73\u5747\u9700\u89811\u79d2\u3002 \u5bf9\u975e\u521a\u6027\u7269\u4f53\u6027\u80fd\u8f83\u5dee\u3002 \u5982\u4eba\u8138\u3001\u52a8\u7269\u7b49\u3002 \u5728\u4e25\u91cd\u7684\u4eff\u5c04\u5931\u771f\u4e0b\u53ef\u80fd\u65e0\u6cd5\u5de5\u4f5c\u3002 \u5c40\u90e8\u8865\u4e01\u662f\u4e00\u4e2a\u5706\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u692d\u5706\u8c03\u6574\u5230\u4eff\u5c04\u5931\u771f\u3002 SURF detectors and descriptors \u00b6 \u89d2\u70b9\u68c0\u6d4b repeatable \u7279\u5f81\u63d0\u53d6\uff1a\u63cf\u8ff0\u80fd\u529b\u5177\u6709 dinstinctive robust \u90fd\u9700\u8981 fast SURF algorithm Interest point detector: \u8ba1\u7b97\u79ef\u5206\u56fe\u50cf \u5750\u6807 \\((x,y)\\) \u7684\u50cf\u7d20\u503c\u662f \u524d\u7f00\u548c \\(s(x,y)\\) (\u5de6\u4e0a\u65b9\u957f\u65b9\u5f62\u7684\u50cf\u7d20\u503c\u6c42\u548c). \u5e94\u7528\u4e8c\u9636\u5bfc\u6570(\u8fd1\u4f3c\uff0c\u6c42\u5dee\u5206\u7684\u5dee\u5206\uff0c\u53ef\u4ee5\u7528\u79ef\u5206\u56fe\u8fd1\u4f3c)\u6ee4\u6ce2\u5668\u5bf9\u56fe\u50cf\u6ee4\u6ce2\u64cd\u4f5c \u975e\u6781\u5927\u6291\u5236(\u5728 \\((x,y,\\sigma)\\) \u7a7a\u95f4\u4e2d\u5bfb\u627e\u5c40\u90e8\u6781\u5927\u503c\uff0c\u5176\u4ed6\u7684\u4e22\u6389) \u4e8c\u6b21\u63d2\u503c\u6cd5 Interest point descriptor: \u628a\u7a97\u53e3\u5206\u4e3a \\(t\\times 4\\) (16 \u4e2a\u5b50\u7a97\u53e3) \u8ba1\u7b97 Haar \u5c0f\u6ce2\u7279\u5f81\uff08\u79bb\u6563\u60c5\u51b5\u4e0b\u7684\u8fd1\u4f3c\uff09 \u5728\u6bcf\u4e2a\u5b50\u7a97\u53e3\u5185\uff0c\u8ba1\u7b97 \\(v_{subregion}=\\left[\\sum dx,\\sum dy,\\sum |dx|,\\sum|dy|\\right]\\) \u8fd9\u5f97\u5230 64 \u4e2a\u7279\u5f81 Integral Image \u00b6 Integral Image(a.k.a. Summed area table) \u662f \\(S(x,y)=\\sum\\sum I(x,y)\\) \\(V(l,t,r,b)=S(l,t)+S(r,b)-S(l,b)-S(r,t)\\) \u5f97\u5230\u77e9\u5f62\u5185\u7684\u50cf\u7d20\u503c\u7684\u548c \u79ef\u5206\u56fe\u8ba9\u6211\u4eec\u5f88\u65b9\u4fbf\u7684\u5bf9\u5c3a\u5ea6\u8fdb\u884c\u4e0a\u91c7\u6837 Interpolation \u00b6 \u4e0d\u540c\u5c3a\u5ea6\u4e4b\u95f4\u53ef\u4ee5\u7528\u63d2\u503c\u6765\u8ba1\u7b97\u4e2d\u95f4\u7684\u5c3a\u5ea6\u3002 Why SURF is better than SIFT \u7ef4\u5ea6\u4f4e, \u53ea\u7528 64 \u7ef4\u7279\u5f81 \u5728\u5747\u5300\u3001\u6e10\u53d8\u3001\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u56fe\u50cf\u4e0a SIFT \u65e0\u6cd5\u5206\u8fa8\uff0c\u4f46 SURF \u53ef\u4ee5 \u5e26\u566a\u58f0\u4f1a\u4f7f SIFT \u7279\u5f81\u51cc\u4e71\uff0c\u5bf9 SURF \u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd RANSAC \u00b6 RANSAC \u89e3\u51b3\u56fe\u50cf\u62fc\u63a5\u7684\u79bb\u7fa4\u70b9 RANSAC RANdom SAmple Consensus \u6392\u9664\u79bb\u7fa4\u70b9\uff0c\u53ea\u5173\u6ce8\u5e76\u4f7f\u7528 inliers. \u601d\u60f3\uff1a\u5982\u679c\u79bb\u7fa4\u70b9\u88ab\u9009\u4e2d\u8ba1\u7b97\u5f53\u524d\u7684\u5339\u914d\uff0c\u90a3\u4e48\u56de\u5f52\u51fa\u6765\u7684\u7ebf\u80af\u5b9a\u4e0d\u8db3\u4ee5\u652f\u6491\u5269\u4e0b\u70b9\u7684\u5339\u914d\uff0c\u548c\u771f\u6b63 inlier \u5f97\u5230\u7684\u7ebf\u6709\u5f88\u5927\u7684\u5dee\u5f02\u3002 RANSAC Loop \u968f\u673a\u9009\u62e9\u79cd\u5b50\u70b9\u4f5c\u4e3a\u8f6c\u6362\u4f30\u8ba1\u7684\u57fa\u7840 \u8ba1\u7b97\u79cd\u5b50\u70b9\u4e4b\u95f4\u7684\u53d8\u6362 \u627e\u5230\u8fd9\u6b21\u53d8\u6362\u7684 inliers \u5982\u679c inliners \u7684\u6570\u76ee\u8db3\u591f\u591a\uff0c\u90a3\u4e48\u91cd\u65b0\u8ba1\u7b97\u6240\u6709 inliners \u4e0a\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5\u4f30\u8ba1 \u56de\u5f52\u4e4b\u540e\u518d\u8ba1\u7b97 inliners \u5982\u6b64\u5f80\u590d\uff0c\u7ee7\u7eed\u8c03\u6574\u3002\u5982\u679c\u6ca1\u6709\u8c03\u6574\u90a3\u6211\u4eec\u53ef\u4ee5\u505c\u6b62\u5faa\u73af\u3002\u6700\u7ec8\u4f7f\u5f97\u56de\u5f52\u51fa\u7684\u7ebf\u8fbe\u5230\u6700\u591a\u7684 inliners. \u9700\u8981\u591a\u5c11\u6b21\u53d6\u6837\uff1f\u5047\u8bbe \\(w\\) \u662f inliners \u7684\u4e00\u90e8\u5206, \\(n\\) \u4e2a\u9700\u8981\u7528\u6765\u5b9a\u4e49\u524d\u63d0\u7684\u70b9\uff0c\u8fdb\u884c\u4e86 \\(k\\) \u6b21\u53d6\u6837\u3002 \\(n\\) \u4e2a\u70b9\u90fd\u662f\u6b63\u786e\u7684 \\(w^n\\) \\(k\\) \u6b21\u91c7\u6837\u90fd\u5931\u8d25\u4e86 \\((1-w^n)^k\\) \u9009\u62e9 k \u8fbe\u5230\u8db3\u591f\u9ad8\u4f7f\u5f97\u5931\u8d25\u7684\u6982\u7387\u4f4e\u4e8e\u9608\u503c RANSAC \u4e4b\u540e\u5c06\u6570\u636e\u5212\u5206\u4e3a outiler \u548c inliner. \u4f18\u70b9 \u5bf9\u4e8e\u6a21\u578b\u62df\u5408\u95ee\u9898\u662f\u4e00\u79cd\u901a\u7528\u7684\u65b9\u6cd5 \u5bb9\u6613\u5b9e\u73b0\uff0c\u5bb9\u6613\u8ba1\u7b97\u5931\u8d25\u7387 \u7f3a\u70b9 \u53ea\u80fd\u89e3\u51b3\u9002\u5ea6 outliers \u65f6\u7684\u60c5\u51b5\uff0c\u5426\u5219\u5f00\u9500\u6bd4\u8f83\u9ad8 \u5f88\u591a\u5b9e\u9645\u95ee\u9898\u4e2d\u7684 outliers \u7684\u6bd4\u7387\u8f83\u9ad8\uff08\u4f46\u6709\u65f6\u6311\u9009\u7b56\u7565\u53ef\u4ee5\u6709\u5e2e\u52a9\uff0c\u800c\u975e\u968f\u673a\u9009\u53d6\uff09 Image Blending - Pyramid Creation \u00b6 Image Stitching Detect key points \u68c0\u6d4b\u7279\u5f81\u70b9 Build the SIFT descriptors \u63d0\u53d6 SIFT \u7279\u5f81 Match SIFT descriptors SIFT \u7279\u5f81\u5339\u914d\uff08\u6c42\u6b27\u6c0f\u8ddd\u79bb\uff09 Fitting the transformation \u8ba1\u7b97\u53d8\u6362 RANSAC \u7b5b\u9664\u5916\u70b9 Image Blending \u56fe\u50cf\u878d\u5408\uff0c\u89e3\u51b3\u8df3\u53d8","title":"\u56fe\u50cf\u7279\u5f81\u68c0\u6d4b\u548c\u63d0\u53d6"},{"location":"dip/dip11/#image-feature","text":"Abstract Image feature Image matching Feature detection Harris operator Invariance Scale Invariant Feature Transform (SIFT)","title":"Image Feature"},{"location":"dip/dip11/#image-matching","text":"\u505a\u56fe\u50cf\u62fc\u63a5: \u68c0\u6d4b\u4e24\u5f20\u56fe\u8c61\u7684\u7279\u5f81\u70b9\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u70b9\u5bf9\uff0c\u7528\u8fd9\u4e9b\u70b9\u5bf9\u5bf9\u9f50\u56fe\u50cf","title":"Image Matching"},{"location":"dip/dip11/#feature-detection","text":"\u63d0\u53d6\u51fa\u5c40\u90e8\u7684\u5177\u6709\u51e0\u4f55\u4e0d\u53d8\u6027\u7684\u7279\u5f81 \u600e\u6837\u627e\u5230\u4e00\u4e2a\u597d\u7684\u7279\u5f81\uff1f \u2014\u2014\u627e\u5230\u4e00\u4e2a\u975e\u540c\u5bfb\u5e38\u7684\u533a\u57df \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u5c0f\u7a97\u53e3\u7684\u50cf\u7d20 flat : \u5728\u4efb\u4f55\u65b9\u5411\u90fd\u4e0d\u4f1a\u6709\u50cf\u7d20\u7684\u6539\u53d8 egde : \u6cbf\u7740\u8fb9\u7684\u65b9\u5411\u4e0d\u4f1a\u6709\u50cf\u7d20\u7684\u6539\u53d8 corner : \u5728\u4efb\u4f55\u65b9\u5411\u90fd\u4f1a\u6709\u660e\u663e\u7684\u6539\u53d8 \u91cf\u5316\u7a97\u53e3\u50cf\u7d20\u7684\u53d8\u5316: \\(W\\) \u8868\u793a\u7a97\u53e3\uff0c \\((u,v)\\) \u8868\u793a\u65b9\u5411 \\(E(u,v)=\\sum\\limits_{(x,y)\\in W}[I(x+u,y+v)-I(x,y)]^2\\) \u6cf0\u52d2\u5c55\u5f00: \\(I(x+u,y+v)-I(x,y)=\\dfrac{\\partial I}{\\partial x}u + \\dfrac{\\partial I}{\\partial y}v + higher\\ order\\ terms\\) \u5982\u679c\u79fb\u52a8 \\((u,v)\\) \u5c0f\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u4e00\u9636\u5fae\u5206\u4f30\u8ba1 \\(I(x+u,y+v)-I(x,y)\\approx \\dfrac{\\partial I}{\\partial x}u + \\dfrac{\\partial I}{\\partial y}v=\\left[\\begin{matrix}I_x & I_y \\end{matrix}\\right]\\left[\\begin{matrix}u \\\\ v \\end{matrix}\\right]\\) \u5c06\u5f0f\u5b50\u5e26\u5165\u4e4b\u524d\u7684\u516c\u5f0f\u5f97\u5230 \\[ \\begin{align*} E(u,v) & \\approx \\sum\\limits_{(x,y)\\in W} \\left[\\left[\\begin{matrix}I_x & I_y \\end{matrix}\\right]\\left[\\begin{matrix}u \\\\ v \\end{matrix}\\right]\\right]^2\\\\ & = \\sum\\limits_{(x,y)\\in W}\\left[\\begin{matrix}u & v \\end{matrix}\\right]\\left[\\begin{matrix}I_x^2 & I_xI_y \\\\ I_yI_x & I_y^2 \\end{matrix}\\right] \\left[\\begin{matrix}u \\\\ v \\end{matrix}\\right] \\end{align*} \\] \u6cbf\u7740\u77e9\u9635 \\(H\\) \u7684\u4e24\u4e2a\u7279\u5f81\u5411\u91cf\uff0c\u53d8\u5316\u6700\u5927\u3002 \\(\\lambda_{+}, \\lambda_{-}\\) \u6bd4\u8f83\u5927\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u597d\u7684\u4f4d\u7f6e\uff08\u56e0\u4e3a\u6cbf\u5404\u4e2a\u65b9\u5411\u7684\u53d8\u5316\u90fd\u8f83\u5927\uff09 \u4e00\u4e2a\u5927\u4e00\u4e2a\u5c0f: \\(edge\\) ; \u4e24\u4e2a\u90fd\u5c0f: \\(flat\\) Feature Detection \u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u70b9\u7684\u68af\u5ea6 \u901a\u8fc7\u68af\u5ea6\u5f97\u5230\u6bcf\u4e2a windows \u7684 \\(H\\) \u77e9\u9635 \u8ba1\u7b97\u7279\u5f81\u503c \u627e\u5230\u76f8\u5e94\u8f83\u5927\u7684\u70b9( \\(\\lambda_- > Threshold\\) ) \u9009\u62e9\u90a3\u4e9b \\(\\lambda_-\\) \u662f\u5c40\u90e8\u6781\u5927\u503c\u7684\u70b9\u4f5c\u4e3a\u7279\u5f81","title":"Feature detection"},{"location":"dip/dip11/#the-harries-operator","text":"\\(\\lambda_-\\) \u662f Harries operator \u7528\u4e8e\u7279\u5f81\u68c0\u6d4b\u7684\u53d8\u4f53 \\[ \\begin{align*} f & = \\dfrac{\\lambda_1\\lambda_2}{\\lambda_1 + \\lambda_2}\\\\ & = \\dfrac{det(H)}{trace(H)} \\end{align*} \\] \\(trace(H)=h_{11}+h_{22}\\) \u8fd9\u5c31\u662f \u201cHarris Corner Detector\u201d or \u201cHarris Operator\u201d, \u8fd9\u4e2a\u7b97\u5b50\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u54cd\u5e94\u503c","title":"The Harries operator"},{"location":"dip/dip11/#some-properties","text":"\u65cb\u8f6c\u4e0d\u53d8\u6027 \u692d\u5706\u65cb\u8f6c\uff0c\u4f46\u957f\u8f74\u77ed\u8f74\u7684\u5f62\u72b6\u4e0d\u53d8\uff0c\u7279\u5f81\u503c\u4e5f\u4e0d\u53d8 \u5bf9\u56fe\u50cf\u5f3a\u5ea6\u6539\u53d8 \u5bf9\u52a0\u6cd5\u548c\u6570\u4e58\u5f3a\u5ea6\u53d8\u5316\u4fdd\u6301\u4e0d\u53d8 \\(I\\rightarrow I+b,I\\rightarrow aI\\) \u6781\u503c\u70b9\u4e0d\u53d8 \u56fe\u50cf\u5c3a\u5ea6\u53d8\u5316\u4f1a\u6709\u5f71\u54cd\uff01","title":"Some properties"},{"location":"dip/dip11/#scale-invariant-detection","text":"\u5728\u533a\u57df\u5185\u8bbe\u8ba1\u4e00\u4e2a\u6bd4\u4f8b\u4e0d\u53d8\u7684\u51fd\u6570 \u5728\u4e0d\u540c\u7684\u56fe\u50cf(\u6bd4\u4f8b\u4e0d\u540c)\uff0c\u6781\u503c\u70b9\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u73b0 a. edge, \u6ca1\u6709\u6781\u503c\u70b9 b. \u597d\u51e0\u4e2a\u6781\u503c\u70b9 \u4e0d\u77e5\u9053\u662f\u54ea\u4e2a c. good \u80fd\u7b5b\u6389\u524d\u4e24\u79cd \u4e8c\u8005\u601d\u8def\u76f8\u540c, kernal \u7565\u6709\u5dee\u5f02 \\(f=Kernal * Image\\) kernals : \\(L=\\sigma^2(G_{xx}(x,y\\sigma)+G_{yy}(x,y,\\sigma))\\) \\(DoG=G(x,y,k\\sigma)-G(x,y,\\sigma)\\) \u5176\u4e2d \\(G(x,y,\\sigma)=\\dfrac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^2+y^2}{2\\sigma^2}}\\)","title":"Scale Invariant Detection"},{"location":"dip/dip11/#harris-laplacian","text":"\u4e0d\u540c\u7ef4\u5ea6\u8ba1\u7b97\u65b9\u6cd5\u4e0d\u4e00\u6837 \u521d\u59cb\u5316\uff1a\u591a\u5c3a\u5ea6\u7684 Harris corner detection(\u6539\u53d8\u6e05\u6670\u5ea6\u540e\uff0c\u5355\u72ec\u627e\u89d2\u70b9) \u53ea\u6709\u5728\u4efb\u4f55\u5c3a\u5ea6\u4e0a\u90fd\u662f\u89d2\u70b9\u7684\u70b9\uff0c\u624d\u80fd\u88ab\u4fdd\u7559 \u57fa\u4e8e\u62c9\u666e\u62c9\u65af\u7b97\u5b50\uff0c\u8fdb\u884c\u5c3a\u5ea6\u9009\u62e9\u3002\u5bf9\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u54ea\u4e00\u4e2a\u5c3a\u5ea6\u4e0a\u62c9\u666e\u62c9\u65af\u503c\u6700\u5927\uff0c\u5c06\u8fd9\u4e2a\u4f4d\u7f6e\u548c\u5c3a\u5ea6\u4f5c\u4e3a\u89d2\u70b9\u3002\uff08\u552f\u4e00\u6027\uff0c\u5728\u8fd9\u4e2a\u5c3a\u5ea6\u4e0a\u662f\u6781\u5927\u503c\uff0c\u90a3\u4e48\u5728\u53e6\u4e00\u4e2a\u5c3a\u5ea6\u4e0a\u4e5f\u662f\u6781\u5927\u503c\uff0c\u53ea\u662f\u6781\u5927\u503c\u7684\u6570\u503c\u53ef\u80fd\u4e0d\u540c\uff09\uff1f\uff1f\uff1f Laplacian-of-Gaussian = \"blob\" detector \\(\\nabla^2 g=\\dfrac{\\partial^2 g}{\\partial x^2}+\\dfrac{\\partial^2 g}{\\partial y^2}\\) \u5728\u56fe\u50cf\u4e2d\u7ed9\u5b9a\u7684\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5b9a\u4e49\u62c9\u666e\u62c9\u65af\u54cd\u5e94\u503c\u8fbe\u5230\u5cf0\u503c\u7684\u5c3a\u5ea6\u4e3a \u7279\u5f81\u5c3a\u5ea6(characteristic scale)","title":"Harris-Laplacian"},{"location":"dip/dip11/#sift","text":"\u4e09\u4e2a\u65b9\u5411\u90fd\u662f DOG. \u5bf9\u4e8e\u753b \u00d7 \u7684\u9700\u8981\u6bd4\u8f8326\u4e2a\u90bb\u5c45\u624d\u80fd\u5f97\u51fa\u5176\u662f\u5426\u662f\u6781\u503c\uff0c\u8ba1\u7b97\u901f\u5ea6\u76f8\u5bf9\u8f83\u6162\u3002 \u5f97\u5230\u89d2\u70b9\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u89d2\u70b9\u7684\u7279\u5f81\uff0c\u5982\u65b9\u5411\u6027 \u68af\u5ea6\u548c\u89d2\u5ea6 \u5176\u4e2d \\(m(x,y)\\) \u662f\u70b9\u7684\u5e45\u503c\uff0c\u5373 x \u65b9\u5411\u7684\u5dee\u5206\u548c y \u65b9\u5411\u7684\u5dee\u5206\u7684\u5e73\u65b9\u548c \\(\\theta(x,y)\\) \u662f\u901a\u8fc7 y \u65b9\u5411\u7684\u68af\u5ea6\u548c\u6bd4\u4e0a x \u65b9\u5411\u7684\u68af\u5ea6\u7684\u53cd\u6b63\u5207\u8ba1\u7b97 \u65b9\u5411\u9009\u62e9 \u53ef\u4ee5\u7528\u6295\u7968\u7684\u65b9\u5f0f\u5b9a\u4e49\u90bb\u57df\u7684\u671d\u5411","title":"SIFT"},{"location":"dip/dip11/#sift-descriptor","text":"Invariance: \u5047\u8bbe\u8fd9\u91cc\u6709\u4e24\u5e45\u56fe\u50cf \\(I_1, I_2\\) , \u5176\u4e2d \\(I_2\\) \u662f \\(I_1\\) \u7ecf\u8fc7\u67d0\u79cd\u53d8\u6362\u540e\u7684\u7248\u672c\uff08\u4eff\u5c04\u53d8\u6362\uff0c\u4eae\u5ea6\u7b49\uff09 \u5728\u53d8\u6362\u4e2d\u4e0d\u53d8\u7684\u7279\u5f81\u79f0\u4e3a \u53d8\u6362\u4e0d\u53d8\u6027 SIFT \u7279\u5f81\uff1a\u65cb\u8f6c\u4e0d\u53d8\u6027 \u6839\u636e\u5176\u4e3b\u8981\u68af\u5ea6\u65b9\u5411(dominant gradient orientation)\u65cb\u8f6c patch, \u8fd9\u6837\u53ef\u4ee5\u4f7f\u4ed6\u5904\u4e8e\u89c4\u8303\u65b9\u5411 Scale Invariant Feature Transform \u57fa\u672c\u601d\u60f3 \u5728\u68c0\u6d4b\u5230\u7684\u7279\u5f81\u89d2\u70b9\u5468\u56f4\u9009\u53d6 \\(16\\times16\\) \u7684\u65b9\u5f62\u7a97\u53e3 \u8ba1\u7b97\u6bcf\u4e2a\u50cf\u7d20\u7684\u8fb9\u7684\u671d\u5411(\u68af\u5ea6\u7684\u89d2\u5ea6- 90\u00b0) \u5254\u9664\u5f31\u8fb9\u7f18(\u5c0f\u4e8e\u9608\u503c\u68af\u5ea6\u5e45\u5ea6) \u521b\u5efa\u5269\u4e0b\u8fb9\u7684\u65b9\u5411\u7684\u76f4\u65b9\u56fe \u5b8c\u6574\u7248\uff1a \u5c06 \\(16\\times16\\) \u7684\u7a97\u53e3 \u5212\u5206\u4e3a \\(4\\times4\\) \u7684\u7f51\u683c \u5bf9\u6bcf\u4e2a\u7f51\u683c\u8ba1\u7b97\u5176\u65b9\u5411\u76f4\u65b9\u56fe 16 cells * 8 orientations = 128 dimensional descriptor(128 \u7ef4\u5411\u91cf) SIFT Feature Descriptor 128-D \u53ef\u4ee5\u901a\u8fc7\u53bb\u6389\u5149\u7167\u53d8\u5316\u5e26\u6765\u7684\u5f71\u54cd \u4f4d\u7f6e \\((x,y)\\) \u5c3a\u5ea6\uff0c\u63a7\u5236\u7279\u5f81\u63d0\u53d6\u7684\u8986\u76d6\u8303\u56f4 \u65b9\u5411\uff0c\u5b9e\u73b0\u65cb\u8f6c\u4e0d\u53d8\u7684 descriptor SIFT \u7279\u5f81\u53ef\u4ee5\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b Bag of visual words \u63d0\u53d6SIFT\u7279\u5f81\uff0c\u5c06\u7279\u5f81\u505a\u4e00\u4e2a\u805a\u7c7b(kmeans)\uff0c\u5c06\u6bcf\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u79f0\u4e3a visual word \u89c6\u89c9\u5355\u8bcd Conclusion of SIFT \u4f18\u70b9 \u671f\u671b\u5728\u6bd4\u4f8b\u3001\u65cb\u8f6c\u3001\u5149\u7167\u7b49\u53d8\u5316\u4e2d\u7684\u4e0d\u53d8\u6027\u3002 \u5c40\u90e8 patch \u5177\u6709\u5f88\u5f3a\u7684\u533a\u5206\u6027\u548c\u8868\u5f81\u80fd\u529b\u3002 \u5728\u521a\u6027\u5bf9\u8c61\u8868\u793a\u4e0a\u975e\u5e38\u6709\u6548\u3002 \u7f3a\u70b9 \u63d0\u53d6\u8017\u65f6 \u5bf9\u4e8e\u5927\u5c0f\u4e3a400 * 400\u7684\u56fe\u50cf\uff0c\u5e73\u5747\u9700\u89811\u79d2\u3002 \u5bf9\u975e\u521a\u6027\u7269\u4f53\u6027\u80fd\u8f83\u5dee\u3002 \u5982\u4eba\u8138\u3001\u52a8\u7269\u7b49\u3002 \u5728\u4e25\u91cd\u7684\u4eff\u5c04\u5931\u771f\u4e0b\u53ef\u80fd\u65e0\u6cd5\u5de5\u4f5c\u3002 \u5c40\u90e8\u8865\u4e01\u662f\u4e00\u4e2a\u5706\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u692d\u5706\u8c03\u6574\u5230\u4eff\u5c04\u5931\u771f\u3002","title":"SIFT Descriptor"},{"location":"dip/dip11/#surf-detectors-and-descriptors","text":"\u89d2\u70b9\u68c0\u6d4b repeatable \u7279\u5f81\u63d0\u53d6\uff1a\u63cf\u8ff0\u80fd\u529b\u5177\u6709 dinstinctive robust \u90fd\u9700\u8981 fast SURF algorithm Interest point detector: \u8ba1\u7b97\u79ef\u5206\u56fe\u50cf \u5750\u6807 \\((x,y)\\) \u7684\u50cf\u7d20\u503c\u662f \u524d\u7f00\u548c \\(s(x,y)\\) (\u5de6\u4e0a\u65b9\u957f\u65b9\u5f62\u7684\u50cf\u7d20\u503c\u6c42\u548c). \u5e94\u7528\u4e8c\u9636\u5bfc\u6570(\u8fd1\u4f3c\uff0c\u6c42\u5dee\u5206\u7684\u5dee\u5206\uff0c\u53ef\u4ee5\u7528\u79ef\u5206\u56fe\u8fd1\u4f3c)\u6ee4\u6ce2\u5668\u5bf9\u56fe\u50cf\u6ee4\u6ce2\u64cd\u4f5c \u975e\u6781\u5927\u6291\u5236(\u5728 \\((x,y,\\sigma)\\) \u7a7a\u95f4\u4e2d\u5bfb\u627e\u5c40\u90e8\u6781\u5927\u503c\uff0c\u5176\u4ed6\u7684\u4e22\u6389) \u4e8c\u6b21\u63d2\u503c\u6cd5 Interest point descriptor: \u628a\u7a97\u53e3\u5206\u4e3a \\(t\\times 4\\) (16 \u4e2a\u5b50\u7a97\u53e3) \u8ba1\u7b97 Haar \u5c0f\u6ce2\u7279\u5f81\uff08\u79bb\u6563\u60c5\u51b5\u4e0b\u7684\u8fd1\u4f3c\uff09 \u5728\u6bcf\u4e2a\u5b50\u7a97\u53e3\u5185\uff0c\u8ba1\u7b97 \\(v_{subregion}=\\left[\\sum dx,\\sum dy,\\sum |dx|,\\sum|dy|\\right]\\) \u8fd9\u5f97\u5230 64 \u4e2a\u7279\u5f81","title":"SURF detectors and descriptors"},{"location":"dip/dip11/#integral-image","text":"Integral Image(a.k.a. Summed area table) \u662f \\(S(x,y)=\\sum\\sum I(x,y)\\) \\(V(l,t,r,b)=S(l,t)+S(r,b)-S(l,b)-S(r,t)\\) \u5f97\u5230\u77e9\u5f62\u5185\u7684\u50cf\u7d20\u503c\u7684\u548c \u79ef\u5206\u56fe\u8ba9\u6211\u4eec\u5f88\u65b9\u4fbf\u7684\u5bf9\u5c3a\u5ea6\u8fdb\u884c\u4e0a\u91c7\u6837","title":"Integral Image"},{"location":"dip/dip11/#interpolation","text":"\u4e0d\u540c\u5c3a\u5ea6\u4e4b\u95f4\u53ef\u4ee5\u7528\u63d2\u503c\u6765\u8ba1\u7b97\u4e2d\u95f4\u7684\u5c3a\u5ea6\u3002 Why SURF is better than SIFT \u7ef4\u5ea6\u4f4e, \u53ea\u7528 64 \u7ef4\u7279\u5f81 \u5728\u5747\u5300\u3001\u6e10\u53d8\u3001\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u56fe\u50cf\u4e0a SIFT \u65e0\u6cd5\u5206\u8fa8\uff0c\u4f46 SURF \u53ef\u4ee5 \u5e26\u566a\u58f0\u4f1a\u4f7f SIFT \u7279\u5f81\u51cc\u4e71\uff0c\u5bf9 SURF \u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd","title":"Interpolation"},{"location":"dip/dip11/#ransac","text":"RANSAC \u89e3\u51b3\u56fe\u50cf\u62fc\u63a5\u7684\u79bb\u7fa4\u70b9 RANSAC RANdom SAmple Consensus \u6392\u9664\u79bb\u7fa4\u70b9\uff0c\u53ea\u5173\u6ce8\u5e76\u4f7f\u7528 inliers. \u601d\u60f3\uff1a\u5982\u679c\u79bb\u7fa4\u70b9\u88ab\u9009\u4e2d\u8ba1\u7b97\u5f53\u524d\u7684\u5339\u914d\uff0c\u90a3\u4e48\u56de\u5f52\u51fa\u6765\u7684\u7ebf\u80af\u5b9a\u4e0d\u8db3\u4ee5\u652f\u6491\u5269\u4e0b\u70b9\u7684\u5339\u914d\uff0c\u548c\u771f\u6b63 inlier \u5f97\u5230\u7684\u7ebf\u6709\u5f88\u5927\u7684\u5dee\u5f02\u3002 RANSAC Loop \u968f\u673a\u9009\u62e9\u79cd\u5b50\u70b9\u4f5c\u4e3a\u8f6c\u6362\u4f30\u8ba1\u7684\u57fa\u7840 \u8ba1\u7b97\u79cd\u5b50\u70b9\u4e4b\u95f4\u7684\u53d8\u6362 \u627e\u5230\u8fd9\u6b21\u53d8\u6362\u7684 inliers \u5982\u679c inliners \u7684\u6570\u76ee\u8db3\u591f\u591a\uff0c\u90a3\u4e48\u91cd\u65b0\u8ba1\u7b97\u6240\u6709 inliners \u4e0a\u7684\u6700\u5c0f\u4e8c\u4e58\u6cd5\u4f30\u8ba1 \u56de\u5f52\u4e4b\u540e\u518d\u8ba1\u7b97 inliners \u5982\u6b64\u5f80\u590d\uff0c\u7ee7\u7eed\u8c03\u6574\u3002\u5982\u679c\u6ca1\u6709\u8c03\u6574\u90a3\u6211\u4eec\u53ef\u4ee5\u505c\u6b62\u5faa\u73af\u3002\u6700\u7ec8\u4f7f\u5f97\u56de\u5f52\u51fa\u7684\u7ebf\u8fbe\u5230\u6700\u591a\u7684 inliners. \u9700\u8981\u591a\u5c11\u6b21\u53d6\u6837\uff1f\u5047\u8bbe \\(w\\) \u662f inliners \u7684\u4e00\u90e8\u5206, \\(n\\) \u4e2a\u9700\u8981\u7528\u6765\u5b9a\u4e49\u524d\u63d0\u7684\u70b9\uff0c\u8fdb\u884c\u4e86 \\(k\\) \u6b21\u53d6\u6837\u3002 \\(n\\) \u4e2a\u70b9\u90fd\u662f\u6b63\u786e\u7684 \\(w^n\\) \\(k\\) \u6b21\u91c7\u6837\u90fd\u5931\u8d25\u4e86 \\((1-w^n)^k\\) \u9009\u62e9 k \u8fbe\u5230\u8db3\u591f\u9ad8\u4f7f\u5f97\u5931\u8d25\u7684\u6982\u7387\u4f4e\u4e8e\u9608\u503c RANSAC \u4e4b\u540e\u5c06\u6570\u636e\u5212\u5206\u4e3a outiler \u548c inliner. \u4f18\u70b9 \u5bf9\u4e8e\u6a21\u578b\u62df\u5408\u95ee\u9898\u662f\u4e00\u79cd\u901a\u7528\u7684\u65b9\u6cd5 \u5bb9\u6613\u5b9e\u73b0\uff0c\u5bb9\u6613\u8ba1\u7b97\u5931\u8d25\u7387 \u7f3a\u70b9 \u53ea\u80fd\u89e3\u51b3\u9002\u5ea6 outliers \u65f6\u7684\u60c5\u51b5\uff0c\u5426\u5219\u5f00\u9500\u6bd4\u8f83\u9ad8 \u5f88\u591a\u5b9e\u9645\u95ee\u9898\u4e2d\u7684 outliers \u7684\u6bd4\u7387\u8f83\u9ad8\uff08\u4f46\u6709\u65f6\u6311\u9009\u7b56\u7565\u53ef\u4ee5\u6709\u5e2e\u52a9\uff0c\u800c\u975e\u968f\u673a\u9009\u53d6\uff09","title":"RANSAC"},{"location":"dip/dip11/#image-blending-pyramid-creation","text":"Image Stitching Detect key points \u68c0\u6d4b\u7279\u5f81\u70b9 Build the SIFT descriptors \u63d0\u53d6 SIFT \u7279\u5f81 Match SIFT descriptors SIFT \u7279\u5f81\u5339\u914d\uff08\u6c42\u6b27\u6c0f\u8ddd\u79bb\uff09 Fitting the transformation \u8ba1\u7b97\u53d8\u6362 RANSAC \u7b5b\u9664\u5916\u70b9 Image Blending \u56fe\u50cf\u878d\u5408\uff0c\u89e3\u51b3\u8df3\u53d8","title":"Image Blending - Pyramid Creation"},{"location":"dip/dip12/","text":"\u6df1\u5ea6\u5b66\u4e60\u7b80\u4ecb \u00b6 \u7279\u5f81\u4e0d\u80fd\u5b66\u4e60/\u8bad\u7ec3\u7684 \u5206\u7c7b\u5668\u901a\u5e38\u662f\u53ef\u8bad\u7ec3\u7684\uff0c\u5982 SVM, HMM... \u7279\u5f81\u975e\u5e38\u91cd\u8981\uff0c\u5f88\u591a\u7279\u5f81\u90fd\u662f\u4e3a\u4e86\u7279\u5b9a\u7684\u4efb\u52a1\u800c\u624b\u5de5\u8bbe\u8ba1\uff0c\u4f46\u624b\u5de5\u8bbe\u8ba1\u4e00\u4e2a\u7279\u5f81\u63d0\u53d6\u9700\u8981\u76f8\u5f53\u5927\u7684\u52aa\u529b\u3002 \u4e3a\u4e86\u7279\u5b9a\u7684\u8bc6\u522b\u4efb\u52a1\uff0c\u627e\u5230\u66f4\u9002\u5408\u7684\u7279\u5f81\uff0c\u4ee5\u53ef\u8bad\u7ec3\u7684\u65b9\u5f0f\u63d0\u53d6\u7279\u5f81 \u5b66\u4e60\u7edf\u8ba1\u7ed3\u6784\u6216\u8005\u6570\u636e\u4e0e\u6570\u636e\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb\u5f97\u5230\u7279\u5f81\u8868\u8fbe \u5b66\u4e60\u5f97\u5230\u7684\u7279\u5f81\u8868\u8fbe\u53ef\u4ee5\u7528\u6765\u4f5c\u4e3a\u8bc6\u522b\u4efb\u52a1\u4e2d\u7684\u7279\u5f81 CNN \u5377\u79ef\u795e\u7ecf\u7f51\u7edc CNN \u662f\u5c11\u6709\u7684\u53ef\u4ee5\u76d1\u7763\u8bad\u7ec3\u7684\u6df1\u5ea6\u6a21\u578b\uff0c\u800c\u4e14\u5bb9\u6613\u7406\u89e3\u3001\u5b9e\u73b0\u3002 \u795e\u7ecf \u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\uff0c\u5bf9\u7a81\u89e6\u7684\u89c2\u6d4b\u503c\u8fde\u5230\u6c47\u603b\u7684\u5730\u65b9\uff0c\u5e76\u8fdb\u884c\u52a0\u6743\u6c42\u548c\uff0c\u901a\u8fc7\u6fc0\u6d3b\u51fd\u6570\u4ea7\u751f\u8f93\u51fa \\(w_0\\) \u7528\u4e8e\u77eb\u6b63\u6570\u636e\u7684\u504f\u7f6e\u91cf Bias \u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570 ReLU \u4f1a\u628a\u8f93\u5165\u7684\u4fe1\u53f7\u53bb\u6389\u4e00\u90e8\u5206 \u591a\u5c42\u795e\u7ecf\u7f51\u7edc \u5982\u4f55\u89e3\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc(\u89e3\uff0c\u6307\u6c42\u51fa \\(w\\) ) \u53cd\u5411\u4f20\u64ad Back-propagation(BP) \u968f\u673a\u521d\u59cb\u5316\u6743\u91cd\uff0c\u8ba1\u7b97 \\(h_W(X)\\) \u8ba1\u7b97\u8bef\u5dee \\(E=(h_W(X)-y)^2\\) \\(W_k=W_{k-1}-\\epsilon \\frac{\\partial E}{\\partial W}\\) \u7279\u522b\u5730, \\(w_{ij}^{(k)}=w_{ij}^{(k-1)}-\\epsilon \\frac{\\partial E}{\\partial w_{ij}^{(k-1)}}\\) \u68af\u5ea6\u4e0b\u964d\u6cd5 \\(\\epsilon\\) \u662f\u4e2a\u8d85\u53c2\uff0c\u79f0\u4e3a\u5b66\u4e60\u7387\u3002\u5982\u679c\u8bbe\u7f6e\u8fc7\u5927\u53ef\u80fd\u4f1a\u5728\u6536\u655b\u7684\u4e24\u8fb9\u5267\u70c8\u9707\u8361\uff1b\u5982\u679c\u8fc7\u5c0f\u5bb9\u6613\u9677\u5165\u5c40\u90e8\u6700\u4f18\u722c\u4e0d\u51fa\u6765\uff0c\u4ee5\u53ca\u6536\u655b\u66f4\u6162\u3002 \u5171\u4eab\u6743\u91cd \u8bbe\u8ba1\u4e00\u4e2a\u5377\u79ef\u6838\u7528\u6765\u63d0\u53d6\u7279\u5f81\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u50cf feature map \u7279\u5f81\u56fe\u3002 10 \u4e2a\u5377\u79ef\u6838\u5f97\u5230 10 \u5f20\u7279\u5f81\u56fe\uff0c\u5f62\u6210\u4e00\u4e2a\u4e09\u7ef4\u7684\u7279\u5f81\u4f53\u3002 \u5377\u79ef\u6838\u53ef\u4ee5\u590d\u7528 \u7b80\u5355\u7684\u7ec6\u80de\u68c0\u6d4b\u5c40\u90e8\u7279\u5f81\uff1b\u590d\u6742\u7684\u7ec6\u80de\u4f1a\u6c60\u5316\uff0c\u7b5b\u9009\u63d0\u53d6\u7279\u5f81\uff08\u7279\u5f81\u56fe\u7684\u964d\u91c7\u6837\uff09 \u6c60\u5316\uff1a \u7a7a\u95f4\uff0c\u9009\u62e9\u91cd\u8981\u7684\u503c\uff0c\u964d\u4f4e\u590d\u6742\u5ea6 \u662f\u901a\u8fc7\u68af\u5ea6\u4e0b\u964d\u7684\u65b9\u6cd5\u6765\u4f18\u5316\uff0c\u5982\u4f55\u8bbe\u7f6e\u5b66\u4e60\u7387\uff1f \u5b66\u4e60\u7387\u4f4e\uff0c\u6536\u655b\u6162\uff0c\u5bb9\u6613\u6389\u5230\u5751\u91cc\u9677\u5165\u5c40\u90e8\u6700\u4f18\uff1b\u5b66\u4e60\u7387\u9ad8\uff0c\u53ef\u80fd\u4f7f\u5f97\u6536\u655b\u8fc7\u7a0b\u4e0d\u7a33\u5b9a\uff0c\u6765\u56de\u9707\u8361\uff0c\u4e00\u76f4\u4e0d\u6536\u655b idea: \u8bbe\u7f6e\u4e0d\u540c\u7684\u5b66\u4e60\u7387\uff0c\u770b\u54ea\u79cd\u60c5\u51b5\u6700\u597d \u8bbe\u8ba1\u4e00\u4e2a\u81ea\u9002\u5e94\u5b66\u4e60\u7387\u3002\u6b64\u65f6\u5b66\u4e60\u7387\u4e0d\u518d\u56fa\u5b9a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5916\u5728\u6761\u4ef6\u7b97(\u68af\u5ea6\uff0c\u5b66\u4e60\u8981\u6709\u591a\u5feb\uff0c\u7279\u5f81\u6743\u91cd\u7684\u5927\u5c0f...) \u7b2c\u4e09\u6b65\u7684\u68af\u5ea6\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u7b97\u51fa \u5982\u679c\u6211\u4eec\u968f\u673a\u9009\u4e00\u4e2a\u70b9\uff0c\u5f88\u5bb9\u6613\u88ab\u566a\u70b9\u5f71\u54cd\u3002\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a batch B \u6b63\u5219\u5316\uff1adropout \u4e22\u6389\u4e00\u534a\uff0c\u9632\u6b62\u8fc7\u62df\u5408 \u65e9\u505c\u6cd5\uff0c\u89c1\u597d\u5c31\u6536","title":"\u6df1\u5ea6\u5b66\u4e60"},{"location":"dip/dip12/#_1","text":"\u7279\u5f81\u4e0d\u80fd\u5b66\u4e60/\u8bad\u7ec3\u7684 \u5206\u7c7b\u5668\u901a\u5e38\u662f\u53ef\u8bad\u7ec3\u7684\uff0c\u5982 SVM, HMM... \u7279\u5f81\u975e\u5e38\u91cd\u8981\uff0c\u5f88\u591a\u7279\u5f81\u90fd\u662f\u4e3a\u4e86\u7279\u5b9a\u7684\u4efb\u52a1\u800c\u624b\u5de5\u8bbe\u8ba1\uff0c\u4f46\u624b\u5de5\u8bbe\u8ba1\u4e00\u4e2a\u7279\u5f81\u63d0\u53d6\u9700\u8981\u76f8\u5f53\u5927\u7684\u52aa\u529b\u3002 \u4e3a\u4e86\u7279\u5b9a\u7684\u8bc6\u522b\u4efb\u52a1\uff0c\u627e\u5230\u66f4\u9002\u5408\u7684\u7279\u5f81\uff0c\u4ee5\u53ef\u8bad\u7ec3\u7684\u65b9\u5f0f\u63d0\u53d6\u7279\u5f81 \u5b66\u4e60\u7edf\u8ba1\u7ed3\u6784\u6216\u8005\u6570\u636e\u4e0e\u6570\u636e\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb\u5f97\u5230\u7279\u5f81\u8868\u8fbe \u5b66\u4e60\u5f97\u5230\u7684\u7279\u5f81\u8868\u8fbe\u53ef\u4ee5\u7528\u6765\u4f5c\u4e3a\u8bc6\u522b\u4efb\u52a1\u4e2d\u7684\u7279\u5f81 CNN \u5377\u79ef\u795e\u7ecf\u7f51\u7edc CNN \u662f\u5c11\u6709\u7684\u53ef\u4ee5\u76d1\u7763\u8bad\u7ec3\u7684\u6df1\u5ea6\u6a21\u578b\uff0c\u800c\u4e14\u5bb9\u6613\u7406\u89e3\u3001\u5b9e\u73b0\u3002 \u795e\u7ecf \u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\uff0c\u5bf9\u7a81\u89e6\u7684\u89c2\u6d4b\u503c\u8fde\u5230\u6c47\u603b\u7684\u5730\u65b9\uff0c\u5e76\u8fdb\u884c\u52a0\u6743\u6c42\u548c\uff0c\u901a\u8fc7\u6fc0\u6d3b\u51fd\u6570\u4ea7\u751f\u8f93\u51fa \\(w_0\\) \u7528\u4e8e\u77eb\u6b63\u6570\u636e\u7684\u504f\u7f6e\u91cf Bias \u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570 ReLU \u4f1a\u628a\u8f93\u5165\u7684\u4fe1\u53f7\u53bb\u6389\u4e00\u90e8\u5206 \u591a\u5c42\u795e\u7ecf\u7f51\u7edc \u5982\u4f55\u89e3\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc(\u89e3\uff0c\u6307\u6c42\u51fa \\(w\\) ) \u53cd\u5411\u4f20\u64ad Back-propagation(BP) \u968f\u673a\u521d\u59cb\u5316\u6743\u91cd\uff0c\u8ba1\u7b97 \\(h_W(X)\\) \u8ba1\u7b97\u8bef\u5dee \\(E=(h_W(X)-y)^2\\) \\(W_k=W_{k-1}-\\epsilon \\frac{\\partial E}{\\partial W}\\) \u7279\u522b\u5730, \\(w_{ij}^{(k)}=w_{ij}^{(k-1)}-\\epsilon \\frac{\\partial E}{\\partial w_{ij}^{(k-1)}}\\) \u68af\u5ea6\u4e0b\u964d\u6cd5 \\(\\epsilon\\) \u662f\u4e2a\u8d85\u53c2\uff0c\u79f0\u4e3a\u5b66\u4e60\u7387\u3002\u5982\u679c\u8bbe\u7f6e\u8fc7\u5927\u53ef\u80fd\u4f1a\u5728\u6536\u655b\u7684\u4e24\u8fb9\u5267\u70c8\u9707\u8361\uff1b\u5982\u679c\u8fc7\u5c0f\u5bb9\u6613\u9677\u5165\u5c40\u90e8\u6700\u4f18\u722c\u4e0d\u51fa\u6765\uff0c\u4ee5\u53ca\u6536\u655b\u66f4\u6162\u3002 \u5171\u4eab\u6743\u91cd \u8bbe\u8ba1\u4e00\u4e2a\u5377\u79ef\u6838\u7528\u6765\u63d0\u53d6\u7279\u5f81\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u56fe\u50cf feature map \u7279\u5f81\u56fe\u3002 10 \u4e2a\u5377\u79ef\u6838\u5f97\u5230 10 \u5f20\u7279\u5f81\u56fe\uff0c\u5f62\u6210\u4e00\u4e2a\u4e09\u7ef4\u7684\u7279\u5f81\u4f53\u3002 \u5377\u79ef\u6838\u53ef\u4ee5\u590d\u7528 \u7b80\u5355\u7684\u7ec6\u80de\u68c0\u6d4b\u5c40\u90e8\u7279\u5f81\uff1b\u590d\u6742\u7684\u7ec6\u80de\u4f1a\u6c60\u5316\uff0c\u7b5b\u9009\u63d0\u53d6\u7279\u5f81\uff08\u7279\u5f81\u56fe\u7684\u964d\u91c7\u6837\uff09 \u6c60\u5316\uff1a \u7a7a\u95f4\uff0c\u9009\u62e9\u91cd\u8981\u7684\u503c\uff0c\u964d\u4f4e\u590d\u6742\u5ea6 \u662f\u901a\u8fc7\u68af\u5ea6\u4e0b\u964d\u7684\u65b9\u6cd5\u6765\u4f18\u5316\uff0c\u5982\u4f55\u8bbe\u7f6e\u5b66\u4e60\u7387\uff1f \u5b66\u4e60\u7387\u4f4e\uff0c\u6536\u655b\u6162\uff0c\u5bb9\u6613\u6389\u5230\u5751\u91cc\u9677\u5165\u5c40\u90e8\u6700\u4f18\uff1b\u5b66\u4e60\u7387\u9ad8\uff0c\u53ef\u80fd\u4f7f\u5f97\u6536\u655b\u8fc7\u7a0b\u4e0d\u7a33\u5b9a\uff0c\u6765\u56de\u9707\u8361\uff0c\u4e00\u76f4\u4e0d\u6536\u655b idea: \u8bbe\u7f6e\u4e0d\u540c\u7684\u5b66\u4e60\u7387\uff0c\u770b\u54ea\u79cd\u60c5\u51b5\u6700\u597d \u8bbe\u8ba1\u4e00\u4e2a\u81ea\u9002\u5e94\u5b66\u4e60\u7387\u3002\u6b64\u65f6\u5b66\u4e60\u7387\u4e0d\u518d\u56fa\u5b9a\uff0c\u53ef\u4ee5\u901a\u8fc7\u5916\u5728\u6761\u4ef6\u7b97(\u68af\u5ea6\uff0c\u5b66\u4e60\u8981\u6709\u591a\u5feb\uff0c\u7279\u5f81\u6743\u91cd\u7684\u5927\u5c0f...) \u7b2c\u4e09\u6b65\u7684\u68af\u5ea6\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u7b97\u51fa \u5982\u679c\u6211\u4eec\u968f\u673a\u9009\u4e00\u4e2a\u70b9\uff0c\u5f88\u5bb9\u6613\u88ab\u566a\u70b9\u5f71\u54cd\u3002\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u4e2a batch B \u6b63\u5219\u5316\uff1adropout \u4e22\u6389\u4e00\u534a\uff0c\u9632\u6b62\u8fc7\u62df\u5408 \u65e9\u505c\u6cd5\uff0c\u89c1\u597d\u5c31\u6536","title":"\u6df1\u5ea6\u5b66\u4e60\u7b80\u4ecb"},{"location":"dip/dip2/","text":"Binary Image and Morphological \u00b6 \u5982\u4f55\u4ece\u7070\u5ea6\u56fe\u8f6c\u4e3a\u4e8c\u503c\u56fe\u50cf\uff1f \u4e3a\u4ec0\u4e48\u9700\u8981\u4e8c\u503c\u56fe\u50cf\uff08\u5b9e\u9645\u5e94\u7528\u4e2d\u4e8c\u503c\u5316\u80fd\u628a\u4e0d\u91cd\u8981\u7684\u4fe1\u606f\u53bb\u6389\uff09 Binary Image \u00b6 Pixel value is limited to 0 or 1. \u524d\u666f\u7f6e\u4e3a 1, \u540e\u666f\u7f6e\u4e3a 0. \u4e8c\u503c\u56fe\u50cf\uff08Binary Image\uff09\u4e2d\u50cf\u7d20\uff08Pixel\uff09\u7684\u503c\u53ea\u6709 [0,1] \u6216\u8005 [0,255]\uff0c\u7f16\u7a0b\u4e2d\u4e00\u822c\u7528 [0,255] \u6765\u6784\u9020\u4e8c\u503c\u56fe\u50cf\u3002 \u4f18\u70b9\uff1a \u66f4\u5c0f\u7684\u5185\u5b58\u9700\u6c42 \u8fd0\u884c\u901f\u5ea6\u66f4\u5feb \u4e3a\u4e8c\u503c\u56fe\u50cf\u5f00\u53d1\u7684\u7b97\u6cd5\u5f80\u5f80\u53ef\u4ee5\u7528\u4e8e\u7070\u5ea6\u7ea7\u56fe\u50cf \u66f4\u4fbf\u5b9c \u7f3a\u70b9\uff1a \u5e94\u7528\u8303\u56f4\u6bd5\u7adf\u6709\u9650\uff1b \u66f4\u65e0\u6cd5\u63a8\u5e7f\u5230\u4e09\u7ef4\u7a7a\u95f4\u4e2d \u8868\u73b0\u529b\u6b20\u7f3a\uff0c\u4e0d\u80fd\u8868\u73b0\u7269\u4f53\u5185\u90e8\u7ec6\u8282 \u65e0\u6cd5\u63a7\u5236\u5bf9\u6bd4\u5ea6 Image binarization \u00b6 \u8bbe\u7f6e\u4e00\u4e2a\u9608\u503c Threshold\uff0c\u6bd4\u9608\u503c\u5c0f\u7684\u7f6e\u4e3a 0, \u6bd4\u9608\u503c\u5927\u7684\u5c31\u7f6e\u4e3a 255. \\(\\left\\{\\begin{matrix}I(x,y)=0\\ if\\ I(x,y)\\leq Threshold \\\\ I(x,y)=255\\ if\\ I(x,y)\\geq Threshold \\end{matrix} \\right.\\) \u5982\u4f55\u9009\u53d6\u5408\u9002\u7684 threshold? \u57fa\u672c\u601d\u60f3\uff1a\u5c06\u4e8c\u503c\u5316\u5f97\u5230\u7684\u4e8c\u503c\u56fe\u50cf\u89c6\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5bf9\u5e94\u524d\u666f\uff08Foreground\uff09\uff0c\u53e6\u4e00\u90e8\u5206\u5bf9\u5e94\u80cc\u666f\uff08Background\uff09\u3002\u5c1d\u8bd5\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684threshold\u4f7f\u5f97\u5230\u7684\u524d\u666f\u548c\u80cc\u666f\u7684\u5185\u90e8\u65b9\u5dee\u6700\u5c0f\uff0c\u800c\u5b83\u4eec\u4e4b\u95f4\u7684\u65b9\u5dee\u5219\u6700\u5927\u3002\uff08\u4e0b\u9762\u7684\u63a8\u5bfc\u53ef\u770b\u51fa\uff0c\u8fd9\u4e8c\u8005\u662f\u7b49\u4ef7\u7684\uff09 Otto \u5927\u6d25\u7b97\u6cd5\uff1a ( \\(N\\) \u662f\u50cf\u7d20\u603b\u4e2a\u6570\uff0c \\(N_{Fgrd}\\) \u662f\u7ed9\u5b9a T \u7684\u60c5\u51b5\u4e0b\u5c5e\u4e8e\u524d\u666f\u7684\u50cf\u7d20\u4e2a\u6570) \u7b80\u5316\u7248\u63a8\u5bfc \u5177\u4f53\u8fc7\u7a0b Step 1: \u786e\u5b9a\u539f\u59cb\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff1b Step 2: \u6700\u5c0f\u503c\u52a0 1 \u4f5c\u4e3a threshold \u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u4e8c\u503c\u5316\u64cd\u4f5c\uff1b Step 3: \u6839\u636e\u5bf9\u5e94\u5173\u7cfb\u786e\u5b9a\u524d\u666f\u548c\u80cc\u666f\uff0c\u5206\u522b\u8ba1\u7b97\u5f53\u524d threshold \u4e0b\u7684\u5185\u90e8\u534f\u65b9\u5dee\u548c\u5916\u90e8\u534f\u65b9\u5dee\uff1b\uff08\u7b97\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86\uff09 Step 4: \u56de\u5230 Step 2 \u76f4\u5230\u8fbe\u5230\u50cf\u7d20\u6700\u5927\u503c\uff1b Step 5\uff1a\u6bd4\u8f83\u627e\u5230\u6700\u5927\u5916\u90e8\u548c\u6700\u5c0f\u5185\u90e8\u534f\u65b9\u5dee\u5bf9\u5e94\u7684 threshold. \u6211\u4eec\u53ef\u4ee5\u524d\u8ff0 thresholding \u7b56\u7565\u63a8\u5e7f\u5230\u5f69\u8272\u56fe\u50cf\uff0c\u540c\u65f6\u8003\u8651 rgb \u4e09\u4e2a\u901a\u9053\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9488\u5bf9\u7279\u5b9a\u7684\u8272\u5f69\u8fdb\u884c thresholding \u64cd\u4f5c\uff0c Example \u5927\u6d25\u7b97\u6cd5\u5b58\u5728\u95ee\u9898\uff1a\u5168\u5c40\u8fdb\u884c\u4e8c\u503c\u5316\u64cd\u4f5c\u4e0d\u7ed9\u529b\uff0c\u5982 \u89e3\u51b3\u65b9\u6cd5\uff1a\u5c40\u90e8\u81ea\u9002\u5e94\u64cd\u4f5c \u8bbe\u5b9a\u4e00\u4e2a\u5c40\u90e8\u7a97\u53e3\uff0c\u5728\u6574\u4e2a\u56fe\u50cf\u4e0a\u6ed1\u52a8\u8be5\u7a97\u53e3\uff1b\u5bf9\u4e8e\u6bcf\u4e00\u7a97\u53e3\u4f4d\u7f6e\uff0c\u786e\u5b9a\u9488\u5bf9\u8be5\u7a97\u53e3\u7684threshold\u3002 Morphology Operation \u00b6 Morphology \u00b6 \u5f62\u6001\u5b66 Morphology 1960s \u540e\u671f\u63d0\u51fa\uff0c\u7814\u7a76\u52a8\u690d\u7269\u7684\u7ed3\u6784\u4e0e\u5f62\u6001\u3002\u5f62\u6001\u5b66\u4e00\u822c\u6307\u751f\u7269\u5b66\u4e2d\u7814\u7a76\u52a8\u7269\u548c\u690d\u7269\u7ed3\u6784\u7684\u4e00\u4e2a\u5206\u652f \u6570\u5b66\u5f62\u6001\u5b66 Mathematical morphology \u57fa\u7840\u7406\u8bba\uff1a\u96c6\u5408\u8bba \u4e00\u79cd\u7b80\u5355\u7684\u975e\u7ebf\u6027\u4ee3\u6570\u7b97\u5b50\uff0c\u4e3b\u8981\u7528\u4e8e\u4e8c\u503c\u56fe\u50cf\uff0c\u53ef\u6269\u5c55\u5230\u7070\u5ea6\u56fe\u50cf\u3002\u7528\u5728\u566a\u58f0\u8fc7\u6ee4\u3001\u5f62\u72b6\u7b80\u5316\u3001\u7ec6\u5316\u3001\u5206\u5272\u3001\u7269\u4f53\u63cf\u8ff0\u7b49 \u7528\u6570\u5b66\u5f62\u6001\u5b66\uff08\u4e5f\u79f0\u56fe\u50cf\u4ee3\u6570\uff09\u8868\u793a\u4ee5\u5f62\u6001\u4e3a\u57fa\u7840\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u6790\u7684\u6570\u5b66\u5de5\u5177 \u57fa\u672c\u601d\u60f3\u662f\u7528\u5177\u6709\u4e00\u5b9a\u5f62\u6001\u7684 \u7ed3\u6784\u5143\u7d20(structure element) \u53bb\u5ea6\u91cf\u548c\u63d0\u53d6\u56fe\u50cf\u4e2d\u7684\u5bf9\u5e94\u5f62\u72b6\u4ee5\u8fbe\u5230\u5bf9\u56fe\u50cf\u5206\u6790\u548c\u8bc6\u522b\u7684\u76ee\u7684\u3002 \u5f62\u6001\u5b66\u56fe\u50cf\u5904\u7406\u7684\u6570\u5b66\u57fa\u7840\u548c\u6240\u7528\u8bed\u8a00\u662f \u96c6\u5408\u8bba \u3002 \u5f62\u6001\u5b66\u56fe\u50cf\u5904\u7406\u7684\u5e94\u7528\u53ef\u4ee5\u7b80\u5316\u56fe\u50cf\u6570\u636e\uff0c\u4fdd\u6301\u5b83\u4eec\u57fa\u672c\u7684\u5f62\u72b6\u7279\u6027\uff0c\u5e76\u9664\u53bb\u4e0d\u76f8\u5e72\u7ed3\u6784\u3002 \u5f62\u6001\u5b66\u56fe\u50cf\u5904\u7406\u7684\u57fa\u672c\u8fd0\u7b97\u67094\u4e2a\uff1a \u81a8\u80c0\u3001\u8150\u8680\u3001\u5f00\u64cd\u4f5c\u548c\u95ed\u64cd\u4f5c Set Theory for Image \u00b6 Dilation \u00b6 A: \u4e8c\u503c\u56fe\u50cf B: \u4e8c\u503c\u6a21\u677f\uff0c\u79f0\u4e3a \u7ed3\u6784\u5143\uff08structure element\uff09 \\(A\\oplus B = \\{z| (B)_z \\cap A \\neq \\empty\\}\\) \u4e0a\u5f0f\u8868\u793aB\u8fdb\u884c\u5e73\u79fb\u4e0eA\u7684\u4ea4\u96c6\u4e0d\u4e3a\u7a7a \u81a8\u80c0\u662f\u5c06\u4e0e\u7269\u4f53\u201c \u63a5\u89e6 \u201d\u7684\u6240\u6709\u80cc\u666f\u70b9\u5408\u5e76\u5230\u8be5\u7269\u4f53\u4e2d\uff0c\u4f7f\u8fb9\u754c\u5411\u5916\u90e8\u6269\u5f20\u7684\u8fc7\u7a0b\u3002\u53ef\u4ee5\u7528\u6765\u586b\u8865\u7269\u4f53\u4e2d\u7684\u7a7a\u6d1e\u3002 \uff08\u5176\u4e2d\u201c\u63a5\u89e6\u201d\u7684\u542b\u4e49\u7531\u7ed3\u6784\u5143\u63cf\u8ff0\uff09 \u7528\u884c\u626b\u63cf\u7684\u65b9\u5f0f\uff0c\u4f5c\u4e3a A \u7684\u4e00\u90e8\u5206\uff0c\u5e0c\u671b\u628a\u524d\u666f\u5468\u56f4\u7684\u4e00\u5708\u7eb3\u5165\u5230\u524d\u666f\u3002 \u6838\u5fc3\u5224\u65ad\uff0c\u4ea4\u96c6\u4e0d\u4e3a\u7a7a\u3002 \u586b\u5145 B \u7684\u4e2d\u5fc3 \u9009\u62e9\u4e0d\u540c\u5f62\u72b6\u7684\u7ed3\u6784\u5143\uff0c\u7ed3\u679c\u4e5f\u4e0d\u540c Example \u53ef\u4ee5\u7528\u6765\u586b\u8865 gap. Erosion \u00b6 \u8150\u8680\u662f\u4e00\u79cd\u6d88\u9664\u8fb9\u754c\u70b9\uff0c\u4f7f\u8fb9\u754c\u5411\u5185\u90e8\u6536\u7f29\u7684\u8fc7\u7a0b\u3002\u53ef\u4ee5\u7528\u6765\u6d88\u9664\u5c0f\u4e14\u65e0\u610f\u4e49\u7684\u7269\u4f53\u3002 A: Binary image B: binary template, structure element \\(A\\ominus B=\\{(x,y)|(B)_{xy}\\sube A\\}\\) Physical meaning: remove boundary, remove unwanted small objects. padding \u7684\u601d\u60f3\uff1a\u5982\u679c\u6211\u4eec\u60f3\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u626b\u63cf\uff0c\u4f46\u662f\u8fd9\u6837\u6709\u7684\u5c31\u8d85\u51fa\u8fb9\u754c\u4e86\uff0c\u6211\u4eec\u5c31\u628a\u8fd9\u4e00\u884c\u518d\u590d\u5236\u4e00\u904d\uff0c\u518d\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u626b\u63cf\u3002 (\u8fd9\u91cc\u76f4\u63a5\u628a\u7b2c\u4e00\u884c\u53d8\u6210 0, \u6ca1\u6709 padding) Example \u53ef\u4ee5\u7528\u7b2c\u4e8c\u5f20\u56fe\u9a8c\u8bc1\u4ee3\u7801\u662f\u5426\u6b63\u786e\u3002\u518d\u5229\u7528\u7b97\u6cd5\u4e8c\u503c\u5316\u5e76\u64cd\u4f5c\u3002 \u53ef\u4ee5\u4f7f\u7528\u8150\u8680\u6d88\u9664\u56fe\u50cf\u7684\u7ec6\u8282\u90e8\u5206\uff0c\u4ea7\u751f\u6ee4\u6ce2\u5668\u7684\u4f5c\u7528\u3002 Dilation and Erosion \u81a8\u80c0 \u7531B\u5bf9A\u81a8\u80c0\u6240\u4ea7\u751f\u7684\u4e8c\u503c\u56fe\u8c61D\u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u70b9(x,y)\u7684\u96c6\u5408\uff1a\u5982\u679cB\u7684\u539f\u70b9\u5e73\u79fb\u5230\u70b9(x,y)\uff0c\u90a3\u4e48\u5b83\u4e0eA\u7684\u4ea4\u96c6\u975e\u7a7a\u3002 \u8150\u8680 \u7531B\u5bf9A\u8150\u8680\u6240\u4ea7\u751f\u7684\u4e8c\u503c\u56fe\u8c61E\u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u70b9(x,y)\u7684\u96c6\u5408\uff1a\u5982\u679cB\u7684\u539f\u70b9\u5e73\u79fb\u5230\u70b9(x,y)\uff0c\u90a3\u4e48B\u5c06\u5b8c\u5168\u5305\u542b\u4e8eA\u4e2d \u81a8\u80c0\u4e0e\u8150\u8680\u662f\u5bf9\u5076\u7684 \\((A\\ominus B)^c=\\{z|(B_z)\\sube A\\}^c=\\{z|(B_z)\\cap A=\\empty\\}c=\\{z|(B_z)\\cap A^c \\neq \\empty\\}=A^c\\oplus B\\) Application A - erode(A) \u5f97\u5230\u8fb9\u754c p25 \u4e0e A \u7684\u8865\u96c6\u6c42\u4ea4 Open \u00b6 erosion, then dilation \\(A\\circ B=(A\\ominus B)\\oplus B\\) Remove small objects, segment object at thin part, smooth boundary of large object but preserve its original area. \u9762\u79ef\u57fa\u672c\u76f8\u540c Close \u00b6 dilation, then erosion \\(A \\bullet B =(A\\oplus B)\\ominus B\\) Fill small holes, connect the neighboring objects, smooth boundary while preserving the area at most. \u7528\u6765\u586b\u5145\u7269\u4f53\u5185\u7ec6\u5c0f\u7a7a\u6d1e\u3001\u8fde\u63a5\u90bb\u8fd1\u7269\u4f53\u3001\u5e73\u6ed1\u5176\u8fb9\u754c\u7684\u540c\u65f6\u5e76\u4e0d\u660e\u663e\u6539\u53d8\u5176\u9762\u79ef\u3002","title":"\u4e8c\u503c\u56fe\u50cf\u548c\u5f62\u6001\u5b66"},{"location":"dip/dip2/#binary-image-and-morphological","text":"\u5982\u4f55\u4ece\u7070\u5ea6\u56fe\u8f6c\u4e3a\u4e8c\u503c\u56fe\u50cf\uff1f \u4e3a\u4ec0\u4e48\u9700\u8981\u4e8c\u503c\u56fe\u50cf\uff08\u5b9e\u9645\u5e94\u7528\u4e2d\u4e8c\u503c\u5316\u80fd\u628a\u4e0d\u91cd\u8981\u7684\u4fe1\u606f\u53bb\u6389\uff09","title":"Binary Image and Morphological"},{"location":"dip/dip2/#binary-image","text":"Pixel value is limited to 0 or 1. \u524d\u666f\u7f6e\u4e3a 1, \u540e\u666f\u7f6e\u4e3a 0. \u4e8c\u503c\u56fe\u50cf\uff08Binary Image\uff09\u4e2d\u50cf\u7d20\uff08Pixel\uff09\u7684\u503c\u53ea\u6709 [0,1] \u6216\u8005 [0,255]\uff0c\u7f16\u7a0b\u4e2d\u4e00\u822c\u7528 [0,255] \u6765\u6784\u9020\u4e8c\u503c\u56fe\u50cf\u3002 \u4f18\u70b9\uff1a \u66f4\u5c0f\u7684\u5185\u5b58\u9700\u6c42 \u8fd0\u884c\u901f\u5ea6\u66f4\u5feb \u4e3a\u4e8c\u503c\u56fe\u50cf\u5f00\u53d1\u7684\u7b97\u6cd5\u5f80\u5f80\u53ef\u4ee5\u7528\u4e8e\u7070\u5ea6\u7ea7\u56fe\u50cf \u66f4\u4fbf\u5b9c \u7f3a\u70b9\uff1a \u5e94\u7528\u8303\u56f4\u6bd5\u7adf\u6709\u9650\uff1b \u66f4\u65e0\u6cd5\u63a8\u5e7f\u5230\u4e09\u7ef4\u7a7a\u95f4\u4e2d \u8868\u73b0\u529b\u6b20\u7f3a\uff0c\u4e0d\u80fd\u8868\u73b0\u7269\u4f53\u5185\u90e8\u7ec6\u8282 \u65e0\u6cd5\u63a7\u5236\u5bf9\u6bd4\u5ea6","title":"Binary Image"},{"location":"dip/dip2/#image-binarization","text":"\u8bbe\u7f6e\u4e00\u4e2a\u9608\u503c Threshold\uff0c\u6bd4\u9608\u503c\u5c0f\u7684\u7f6e\u4e3a 0, \u6bd4\u9608\u503c\u5927\u7684\u5c31\u7f6e\u4e3a 255. \\(\\left\\{\\begin{matrix}I(x,y)=0\\ if\\ I(x,y)\\leq Threshold \\\\ I(x,y)=255\\ if\\ I(x,y)\\geq Threshold \\end{matrix} \\right.\\) \u5982\u4f55\u9009\u53d6\u5408\u9002\u7684 threshold? \u57fa\u672c\u601d\u60f3\uff1a\u5c06\u4e8c\u503c\u5316\u5f97\u5230\u7684\u4e8c\u503c\u56fe\u50cf\u89c6\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5bf9\u5e94\u524d\u666f\uff08Foreground\uff09\uff0c\u53e6\u4e00\u90e8\u5206\u5bf9\u5e94\u80cc\u666f\uff08Background\uff09\u3002\u5c1d\u8bd5\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684threshold\u4f7f\u5f97\u5230\u7684\u524d\u666f\u548c\u80cc\u666f\u7684\u5185\u90e8\u65b9\u5dee\u6700\u5c0f\uff0c\u800c\u5b83\u4eec\u4e4b\u95f4\u7684\u65b9\u5dee\u5219\u6700\u5927\u3002\uff08\u4e0b\u9762\u7684\u63a8\u5bfc\u53ef\u770b\u51fa\uff0c\u8fd9\u4e8c\u8005\u662f\u7b49\u4ef7\u7684\uff09 Otto \u5927\u6d25\u7b97\u6cd5\uff1a ( \\(N\\) \u662f\u50cf\u7d20\u603b\u4e2a\u6570\uff0c \\(N_{Fgrd}\\) \u662f\u7ed9\u5b9a T \u7684\u60c5\u51b5\u4e0b\u5c5e\u4e8e\u524d\u666f\u7684\u50cf\u7d20\u4e2a\u6570) \u7b80\u5316\u7248\u63a8\u5bfc \u5177\u4f53\u8fc7\u7a0b Step 1: \u786e\u5b9a\u539f\u59cb\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff1b Step 2: \u6700\u5c0f\u503c\u52a0 1 \u4f5c\u4e3a threshold \u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u4e8c\u503c\u5316\u64cd\u4f5c\uff1b Step 3: \u6839\u636e\u5bf9\u5e94\u5173\u7cfb\u786e\u5b9a\u524d\u666f\u548c\u80cc\u666f\uff0c\u5206\u522b\u8ba1\u7b97\u5f53\u524d threshold \u4e0b\u7684\u5185\u90e8\u534f\u65b9\u5dee\u548c\u5916\u90e8\u534f\u65b9\u5dee\uff1b\uff08\u7b97\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86\uff09 Step 4: \u56de\u5230 Step 2 \u76f4\u5230\u8fbe\u5230\u50cf\u7d20\u6700\u5927\u503c\uff1b Step 5\uff1a\u6bd4\u8f83\u627e\u5230\u6700\u5927\u5916\u90e8\u548c\u6700\u5c0f\u5185\u90e8\u534f\u65b9\u5dee\u5bf9\u5e94\u7684 threshold. \u6211\u4eec\u53ef\u4ee5\u524d\u8ff0 thresholding \u7b56\u7565\u63a8\u5e7f\u5230\u5f69\u8272\u56fe\u50cf\uff0c\u540c\u65f6\u8003\u8651 rgb \u4e09\u4e2a\u901a\u9053\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9488\u5bf9\u7279\u5b9a\u7684\u8272\u5f69\u8fdb\u884c thresholding \u64cd\u4f5c\uff0c Example \u5927\u6d25\u7b97\u6cd5\u5b58\u5728\u95ee\u9898\uff1a\u5168\u5c40\u8fdb\u884c\u4e8c\u503c\u5316\u64cd\u4f5c\u4e0d\u7ed9\u529b\uff0c\u5982 \u89e3\u51b3\u65b9\u6cd5\uff1a\u5c40\u90e8\u81ea\u9002\u5e94\u64cd\u4f5c \u8bbe\u5b9a\u4e00\u4e2a\u5c40\u90e8\u7a97\u53e3\uff0c\u5728\u6574\u4e2a\u56fe\u50cf\u4e0a\u6ed1\u52a8\u8be5\u7a97\u53e3\uff1b\u5bf9\u4e8e\u6bcf\u4e00\u7a97\u53e3\u4f4d\u7f6e\uff0c\u786e\u5b9a\u9488\u5bf9\u8be5\u7a97\u53e3\u7684threshold\u3002","title":"Image binarization"},{"location":"dip/dip2/#morphology-operation","text":"","title":"Morphology Operation"},{"location":"dip/dip2/#morphology","text":"\u5f62\u6001\u5b66 Morphology 1960s \u540e\u671f\u63d0\u51fa\uff0c\u7814\u7a76\u52a8\u690d\u7269\u7684\u7ed3\u6784\u4e0e\u5f62\u6001\u3002\u5f62\u6001\u5b66\u4e00\u822c\u6307\u751f\u7269\u5b66\u4e2d\u7814\u7a76\u52a8\u7269\u548c\u690d\u7269\u7ed3\u6784\u7684\u4e00\u4e2a\u5206\u652f \u6570\u5b66\u5f62\u6001\u5b66 Mathematical morphology \u57fa\u7840\u7406\u8bba\uff1a\u96c6\u5408\u8bba \u4e00\u79cd\u7b80\u5355\u7684\u975e\u7ebf\u6027\u4ee3\u6570\u7b97\u5b50\uff0c\u4e3b\u8981\u7528\u4e8e\u4e8c\u503c\u56fe\u50cf\uff0c\u53ef\u6269\u5c55\u5230\u7070\u5ea6\u56fe\u50cf\u3002\u7528\u5728\u566a\u58f0\u8fc7\u6ee4\u3001\u5f62\u72b6\u7b80\u5316\u3001\u7ec6\u5316\u3001\u5206\u5272\u3001\u7269\u4f53\u63cf\u8ff0\u7b49 \u7528\u6570\u5b66\u5f62\u6001\u5b66\uff08\u4e5f\u79f0\u56fe\u50cf\u4ee3\u6570\uff09\u8868\u793a\u4ee5\u5f62\u6001\u4e3a\u57fa\u7840\u5bf9\u56fe\u50cf\u8fdb\u884c\u5206\u6790\u7684\u6570\u5b66\u5de5\u5177 \u57fa\u672c\u601d\u60f3\u662f\u7528\u5177\u6709\u4e00\u5b9a\u5f62\u6001\u7684 \u7ed3\u6784\u5143\u7d20(structure element) \u53bb\u5ea6\u91cf\u548c\u63d0\u53d6\u56fe\u50cf\u4e2d\u7684\u5bf9\u5e94\u5f62\u72b6\u4ee5\u8fbe\u5230\u5bf9\u56fe\u50cf\u5206\u6790\u548c\u8bc6\u522b\u7684\u76ee\u7684\u3002 \u5f62\u6001\u5b66\u56fe\u50cf\u5904\u7406\u7684\u6570\u5b66\u57fa\u7840\u548c\u6240\u7528\u8bed\u8a00\u662f \u96c6\u5408\u8bba \u3002 \u5f62\u6001\u5b66\u56fe\u50cf\u5904\u7406\u7684\u5e94\u7528\u53ef\u4ee5\u7b80\u5316\u56fe\u50cf\u6570\u636e\uff0c\u4fdd\u6301\u5b83\u4eec\u57fa\u672c\u7684\u5f62\u72b6\u7279\u6027\uff0c\u5e76\u9664\u53bb\u4e0d\u76f8\u5e72\u7ed3\u6784\u3002 \u5f62\u6001\u5b66\u56fe\u50cf\u5904\u7406\u7684\u57fa\u672c\u8fd0\u7b97\u67094\u4e2a\uff1a \u81a8\u80c0\u3001\u8150\u8680\u3001\u5f00\u64cd\u4f5c\u548c\u95ed\u64cd\u4f5c","title":"Morphology"},{"location":"dip/dip2/#set-theory-for-image","text":"","title":"Set Theory for Image"},{"location":"dip/dip2/#dilation","text":"A: \u4e8c\u503c\u56fe\u50cf B: \u4e8c\u503c\u6a21\u677f\uff0c\u79f0\u4e3a \u7ed3\u6784\u5143\uff08structure element\uff09 \\(A\\oplus B = \\{z| (B)_z \\cap A \\neq \\empty\\}\\) \u4e0a\u5f0f\u8868\u793aB\u8fdb\u884c\u5e73\u79fb\u4e0eA\u7684\u4ea4\u96c6\u4e0d\u4e3a\u7a7a \u81a8\u80c0\u662f\u5c06\u4e0e\u7269\u4f53\u201c \u63a5\u89e6 \u201d\u7684\u6240\u6709\u80cc\u666f\u70b9\u5408\u5e76\u5230\u8be5\u7269\u4f53\u4e2d\uff0c\u4f7f\u8fb9\u754c\u5411\u5916\u90e8\u6269\u5f20\u7684\u8fc7\u7a0b\u3002\u53ef\u4ee5\u7528\u6765\u586b\u8865\u7269\u4f53\u4e2d\u7684\u7a7a\u6d1e\u3002 \uff08\u5176\u4e2d\u201c\u63a5\u89e6\u201d\u7684\u542b\u4e49\u7531\u7ed3\u6784\u5143\u63cf\u8ff0\uff09 \u7528\u884c\u626b\u63cf\u7684\u65b9\u5f0f\uff0c\u4f5c\u4e3a A \u7684\u4e00\u90e8\u5206\uff0c\u5e0c\u671b\u628a\u524d\u666f\u5468\u56f4\u7684\u4e00\u5708\u7eb3\u5165\u5230\u524d\u666f\u3002 \u6838\u5fc3\u5224\u65ad\uff0c\u4ea4\u96c6\u4e0d\u4e3a\u7a7a\u3002 \u586b\u5145 B \u7684\u4e2d\u5fc3 \u9009\u62e9\u4e0d\u540c\u5f62\u72b6\u7684\u7ed3\u6784\u5143\uff0c\u7ed3\u679c\u4e5f\u4e0d\u540c Example \u53ef\u4ee5\u7528\u6765\u586b\u8865 gap.","title":"Dilation"},{"location":"dip/dip2/#erosion","text":"\u8150\u8680\u662f\u4e00\u79cd\u6d88\u9664\u8fb9\u754c\u70b9\uff0c\u4f7f\u8fb9\u754c\u5411\u5185\u90e8\u6536\u7f29\u7684\u8fc7\u7a0b\u3002\u53ef\u4ee5\u7528\u6765\u6d88\u9664\u5c0f\u4e14\u65e0\u610f\u4e49\u7684\u7269\u4f53\u3002 A: Binary image B: binary template, structure element \\(A\\ominus B=\\{(x,y)|(B)_{xy}\\sube A\\}\\) Physical meaning: remove boundary, remove unwanted small objects. padding \u7684\u601d\u60f3\uff1a\u5982\u679c\u6211\u4eec\u60f3\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u626b\u63cf\uff0c\u4f46\u662f\u8fd9\u6837\u6709\u7684\u5c31\u8d85\u51fa\u8fb9\u754c\u4e86\uff0c\u6211\u4eec\u5c31\u628a\u8fd9\u4e00\u884c\u518d\u590d\u5236\u4e00\u904d\uff0c\u518d\u4ece\u7b2c\u4e00\u884c\u5f00\u59cb\u626b\u63cf\u3002 (\u8fd9\u91cc\u76f4\u63a5\u628a\u7b2c\u4e00\u884c\u53d8\u6210 0, \u6ca1\u6709 padding) Example \u53ef\u4ee5\u7528\u7b2c\u4e8c\u5f20\u56fe\u9a8c\u8bc1\u4ee3\u7801\u662f\u5426\u6b63\u786e\u3002\u518d\u5229\u7528\u7b97\u6cd5\u4e8c\u503c\u5316\u5e76\u64cd\u4f5c\u3002 \u53ef\u4ee5\u4f7f\u7528\u8150\u8680\u6d88\u9664\u56fe\u50cf\u7684\u7ec6\u8282\u90e8\u5206\uff0c\u4ea7\u751f\u6ee4\u6ce2\u5668\u7684\u4f5c\u7528\u3002 Dilation and Erosion \u81a8\u80c0 \u7531B\u5bf9A\u81a8\u80c0\u6240\u4ea7\u751f\u7684\u4e8c\u503c\u56fe\u8c61D\u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u70b9(x,y)\u7684\u96c6\u5408\uff1a\u5982\u679cB\u7684\u539f\u70b9\u5e73\u79fb\u5230\u70b9(x,y)\uff0c\u90a3\u4e48\u5b83\u4e0eA\u7684\u4ea4\u96c6\u975e\u7a7a\u3002 \u8150\u8680 \u7531B\u5bf9A\u8150\u8680\u6240\u4ea7\u751f\u7684\u4e8c\u503c\u56fe\u8c61E\u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u70b9(x,y)\u7684\u96c6\u5408\uff1a\u5982\u679cB\u7684\u539f\u70b9\u5e73\u79fb\u5230\u70b9(x,y)\uff0c\u90a3\u4e48B\u5c06\u5b8c\u5168\u5305\u542b\u4e8eA\u4e2d \u81a8\u80c0\u4e0e\u8150\u8680\u662f\u5bf9\u5076\u7684 \\((A\\ominus B)^c=\\{z|(B_z)\\sube A\\}^c=\\{z|(B_z)\\cap A=\\empty\\}c=\\{z|(B_z)\\cap A^c \\neq \\empty\\}=A^c\\oplus B\\) Application A - erode(A) \u5f97\u5230\u8fb9\u754c p25 \u4e0e A \u7684\u8865\u96c6\u6c42\u4ea4","title":"Erosion"},{"location":"dip/dip2/#open","text":"erosion, then dilation \\(A\\circ B=(A\\ominus B)\\oplus B\\) Remove small objects, segment object at thin part, smooth boundary of large object but preserve its original area. \u9762\u79ef\u57fa\u672c\u76f8\u540c","title":"Open"},{"location":"dip/dip2/#close","text":"dilation, then erosion \\(A \\bullet B =(A\\oplus B)\\ominus B\\) Fill small holes, connect the neighboring objects, smooth boundary while preserving the area at most. \u7528\u6765\u586b\u5145\u7269\u4f53\u5185\u7ec6\u5c0f\u7a7a\u6d1e\u3001\u8fde\u63a5\u90bb\u8fd1\u7269\u4f53\u3001\u5e73\u6ed1\u5176\u8fb9\u754c\u7684\u540c\u65f6\u5e76\u4e0d\u660e\u663e\u6539\u53d8\u5176\u9762\u79ef\u3002","title":"Close"},{"location":"dip/dip3/","text":"Image grayscale transform \u00b6 Grayscale perception \u00b6 \u7070\u5ea6\u7ea7\u611f\u77e5\uff1a32\u7070\u5ea6\u7ea7\u300164\u7070\u5ea6\u7ea7\u3001128\u7070\u5ea6\u7ea7\u3001256\u7070\u5ea6\u7ea7 \u53ef\u89c6\u7684\u9608\u503c Weber\u2019s Law \u80fd\u88ab\u6211\u4eec\u770b\u5230\u7684\u9608\u503c(delta I) \u4e0e I \u6210\u6b63\u6bd4 \\(\\dfrac{\\Delta I}{I}\\approx K_{weber}\\approx 1...2\\%\\) P \u5047\u8bbe\u8fde\u7eed\u4e24\u4e2a\u7070\u5ea6\u7ea7\u4e4b\u95f4\u7684\u4eae\u5ea6\u5dee\u5f02\u5c31\u662fWeber\u2019s Law\u4e2d\u7684\u53ef\u89c6\u4e34\u754c\u503c\uff0c \\(\\dfrac{I_{max}}{I_{min}}=(1+K_{weber})^{255}\\) \u8003\u8651\u5230 \\(K_{weber}=0.01...0.02,\\dfrac{I_{max}}{I_{min}}=13...156\\) Visibility enhancement: a logarithmic operation \u00b6 \u53ef\u89c6\u5316\u589e\u5f3a\uff1a\u4ee5\u5bf9\u6570\u64cd\u4f5c\u4e3a\u4f8b \u4e3a\u4e86\u589e\u5f3a\u56fe\u50cf\u7684\u53ef\u89c6\u4fe1\u606f\uff0c\u5bf9\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u8fdb\u884c\u57fa\u4e8e\u5bf9\u6570\u7684\u64cd\u4f5c \\(L_d=\\dfrac{\\log(L_w+1)}{\\log(L_{max}+1)}\\) \\(L_d\\) \u662f\u663e\u793a\u4eae\u5ea6\uff0c \\(L_w\\) \u662f\u771f\u5b9e\u4e16\u754c\u4eae\u5ea6\uff0c \\(L_{max}\\) \u662f\u573a\u666f\u4e2d\u7684\u6700\u4eae\u503c\u3002 \u8fd9\u4e2a\u6620\u5c04\u80fd\u591f\u786e\u4fdd\u4e0d\u7ba1\u573a\u666f\u7684\u52a8\u6001\u8303\u56f4\u662f\u600e\u4e48\u6837\u7684\uff0c\u5176\u6700\u5927\u503c\u90fd\u80fd\u6620\u5c04\u52301\uff08\u767d\uff09\uff0c\u5176\u4ed6\u7684\u503c\u80fd\u591f\u6bd4\u8f83\u5e73\u6ed1\u5730\u53d8\u5316\u3002 \u5e73\u6ed1\u66f2\u7ebf\uff0c\u4e0d\u4f1a\u51fa\u73b0\u68af\u5ea6\u9006\u8f6c\uff08\u539f\u6765\u6bd4\u8f83\u6697\uff0c\u73b0\u5728\u8fd8\u662f\u6bd4\u8f83\u6697\uff09 global method. \u5bf9\u6570\u7684\u95ee\u9898\uff1a \u867d\u7136\u7ec6\u8282\u66f4\u591a\uff0c\u4f46\u662f\u5bf9\u6bd4\u5ea6\u6ca1\u90a3\u4e48 sharp \u4e86\uff0c\u7f8e\u611f Grayscale image and histogram \u00b6 Grayscale image \u00b6 \u4e8c\u7ef4\u6570\u7ec4\uff0c\u6bcf\u4e2a\u50cf\u7d20 8 \u4f4d\uff08\u901a\u5e38\u5199\u4f5c 0..255\uff09 \u7070\u5ea6\u7ea7\u7684\u503c\u8d8a\u5c0f\uff0c\u8fd9\u4e2a\u56fe\u50cf\u770b\u4e0a\u53bb\u8d8a\u6697\uff1b\u53cd\u4e4b\u8d8a\u4eae Histogram \u00b6 \u7070\u5ea6\u76f4\u65b9\u56fe\u662f\u4e00\u7c7b\u7edf\u8ba1\u56fe\u5f62\uff0c\u5b83\u8868\u793a\u4e00\u5e45\u56fe\u50cf\u4e2d\u5404\u4e2a\u7070\u5ea6\u7b49\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u5728\u50cf\u7d20\u603b\u6570\u4e2d\u6240\u5360\u7684\u6bd4\u91cd\u3002 e.g. \u91cf\u5316\uff1a\u5982 256 \u5206\u4e3a 8 \u4e2a\u7070\u5ea6\u7ea7\uff0c 0-32 \u4e3a\u4e00\u4e2a\u7070\u5ea6\u7ea7\uff0c\u4ee5\u6b64\u7c7b\u63a8... \u6bcf\u4e2a\u67f1\u5b50\u5c31\u53cd\u6620\u4e86\u50cf\u7d20\u6570\u76ee\u5360\u7684\u6bd4\u4f8b\u3002 \u8bbe\u7070\u5ea6\u7b49\u7ea7\u8303\u56f4\u4e3a[0,L-1] \uff0c\u7070\u5ea6\u76f4\u65b9\u56fe\u7528\u4e0b\u5217\u79bb\u6563\u51fd\u6570\u6765\u8868\u793a\uff1a \\(h(r_k)=n_k\\) \u5176\u4e2d\uff0c \\(r_k\\) \u4e3a\u7b2ck\u7ea7\u7070\u5ea6\uff0c \\(n_k\\) \u662f\u56fe\u50cf\u4e2d\u5177\u6709\u7070\u5ea6\u7ea7 \\(r_k\\) \u7684\u50cf\u7d20\u6570\u76ee\uff0c \\(0 \\leq k \\leq L-1\uff0c0 \\leq n_k \\leq n-1\\) , \\(n\\) \u4e3a\u56fe\u50cf\u603b\u7684\u50cf\u7d20\u6570\u76ee\u3002 \u901a\u5e38\u7528\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u6765\u5f52\u4e00\u5316\u76f4\u65b9\u56fe\uff1a \\(P(r_k)\\) \u4e3a\u7070\u5ea6\u7ea7 \\(r_k\\) \u6240\u53d1\u751f\u7684\u6982\u7387\uff08\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff09\u3002\u6b64\u65f6\uff0c\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a \\(\\sum\\limits_{k=0}^{L-1}P(r_k)=1\\) Example Color image and histogram \u00b6 Color histogram \u00b6 \u5f69\u8272\u76f4\u65b9\u56fe\u662f\u4e00\u7c7b\u7edf\u8ba1\u56fe\u5f62\uff0c\u5b83\u8868\u793a\u4e00\u5e45\u56fe\u50cf\u4e2d r,g,b \u901a\u9053\u4e0a\u5404\u4e2a\u7070\u5ea6\u7b49\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u5728\u50cf\u7d20\u603b\u6570\u4e2d\u6240\u5360\u7684\u6bd4\u91cd\u3002 Characteristics of histogram \u00b6 \u76f4\u65b9\u56fe \u662f\u7a7a\u95f4\u57df\u5904\u7406\u6280\u672f\u7684\u57fa\u7840\u3002 \u53cd\u6620\u56fe\u50cf\u7070\u5ea6\u7684\u5206\u5e03\u89c4\u5f8b\uff0c\u4f46\u4e0d\u80fd\u4f53\u73b0\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u53d8\u5316\u60c5\u51b5\u3002 \u5bf9\u4e8e\u4e00\u5e45\u7ed9\u5b9a\u7684\u56fe\u50cf\uff0c\u5176\u76f4\u65b9\u56fe\u662f\u552f\u4e00\u7684\u3002 \u4e0d\u540c\u7684\u56fe\u50cf\u53ef\u4ee5\u5bf9\u5e94\u76f8\u540c\u7684\u76f4\u65b9\u56fe\u3002 \u5bf9\u76f4\u65b9\u56fe\u8fdb\u884c\u64cd\u4f5c\u80fd\u6709\u6548\u5730\u7528\u4e8e\u56fe\u50cf\u589e\u5f3a\u3001\u538b\u7f29\u548c\u5206\u5272, \u4ed6\u4eec\u662f\u56fe\u50cf\u5904\u7406\u7684\u4e00\u4e2a\u5b9e\u7528\u624b\u6bb5\u3002 \u7f3a\u70b9\uff1a\u5e26\u6765\u566a\u58f0 Question \u4f46\u662f\u76f4\u65b9\u56fe\u628a\u7ed3\u6784\u4fe1\u606f\u4e22\u5931\uff0c\u53ea\u77e5\u9053\u989c\u8272\u5206\u5e03\uff0c\u4e0d\u77e5\u9053\u7ed3\u6784\u3002 Histogram equalization and fitting \u00b6 Histogram equalization \u00b6 \u76f4\u65b9\u56fe\u5747\u8861\u5316\uff1a\u5c06\u539f\u56fe\u50cf\u7684\u975e\u5747\u5300\u5206\u5e03\u7684\u76f4\u65b9\u56fe\u901a\u8fc7\u53d8\u6362\u51fd\u6570T\u4fee\u6b63\u4e3a\u5747\u5206\u5e03\u7684\u76f4\u65b9\u56fe\uff0c\u7136\u540e\u6309\u5747\u8861\u76f4\u65b9\u56fe\u4fee\u6b63\u539f\u56fe\u50cf\u3002 \u627e\u5230\u53d8\u6362\u51fd\u6570T\uff0c\u786e\u5b9a\u5982\u4e0b\u5bf9\u5e94\u5173\u7cfb\uff1a \\(s=T(r)\\) \u4ece\u800c\u786e\u4fdd\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7070\u5ea6r\u90fd\u80fd\u8f6c\u6362\u4e3a\u65b0\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u5bf9\u5e94\u7684\u7070\u5ea6s\u3002 \u76f4\u65b9\u56fe\u5747\u8861\u5316\u2014\u2014\u5bfb\u627eT\uff08\u8fde\u7eed\u7070\u5ea6\u53d8\u5316\uff09 \u5047\u8bbe\uff1a \u4ee4 r\u548c s \u5206\u522b\u4ee3\u8868\u53d8\u5316\u524d\u540e\u56fe\u50cf\u7684\u7070\u5ea6\u7ea7\uff0c\u5e76\u4e14 \\(0\\leq r,s \\leq 1\\) \u3002 P\u00ae \u548c P(s) \u5206\u522b\u4e3a\u53d8\u5316\u524d\u540e\u5404\u7ea7\u7070\u5ea6\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff08r\u548cs\u503c\u5df2\u5f52\u4e00\u5316\uff0c\u6700\u5927\u7070\u5ea6\u503c\u4e3a1\uff09 \u89c4\u5b9a\uff1a \u5728 \\(0\\leq r \\leq\\) \u4e2d\uff0cT\u00ae\u662f\u5355\u8c03\u9012\u589e\u51fd\u6570\uff0c\u5e76\u4e14 \\(0\\leq T(r)\\leq 1\\) \u3002 \u53cd\u53d8\u6362 \\(r = T-1(s)\\) \u4e5f\u4e3a\u5355\u8c03\u9012\u589e\u51fd\u6570\u3002 \u8003\u8651\u5230\u7070\u5ea6\u53d8\u6362\u4e0d\u5f71\u54cd\u50cf\u7d20\u7684\u4f4d\u7f6e\u5206\u5e03\uff0c\u4e5f\u4e0d\u4f1a\u589e\u51cf\u50cf\u7d20\u6570\u76ee\u3002\u6240\u4ee5\u6709\uff1a \\(\\int_{0}^rP(r)dr =\\int_{0}^sP(s)ds=\\int_{0}^s1ds=s=T(r)\\) (\u4e3a\u4ec0\u4e48 Ps = 1, \u56e0\u4e3a\u662f\u6982\u7387\u5bc6\u5ea6) \u56e0\u6b64 \\(s=T(r)=\\int_{0}^rP(r)dr\\) \u5373\u8f6c\u6362\u51fd\u6570 T \u5728\u53d8\u91cf r \u5904\u7684\u51fd\u6570\u503c s\uff0c\u662f\u539f\u76f4\u65b9\u56fe\u4e2d\u7070\u5ea6\u7b49\u7ea7\u4e3a [0,r] \u4ee5\u5185\u7684\u76f4\u65b9\u56fe\u66f2\u7ebf\u6240\u8986\u76d6\u7684\u9762\u79ef\u3002 Discrete: \u8bbe\u4e00\u5e45\u56fe\u50cf\u7684\u50cf\u7d20\u603b\u6570\u4e3a n\uff0c\u5206 L \u4e2a\u7070\u5ea6\u7ea7\uff0c \\(n_k\\) \u4e3a\u7b2c k \u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u50cf\u7d20\u6570\uff0c\u5219\u7b2c k \u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u6982\u7387\u4e3a\uff1a \\(P(r_k)=\\dfrac{n_k}{n}\\quad (0\\leq r_k\\leq 1,k=0,1,2,...L-1)\\) \u79bb\u6563 \u7070\u5ea6\u76f4\u65b9\u56fe\u5747\u8861\u5316\u7684\u8f6c\u6362\u516c\u5f0f\u4e3a\uff1a \\(s_k=T(r_k)=\\sum\\limits_{i=0}^kP(r_i)=\\sum\\limits_{i=0}^k\\dfrac{n_i}{n}=\\dfrac{1}{n}\\sum\\limits_{i=0}^k n_i\\) \u5bf9\u4e8e\u539f\u76f4\u65b9\u56fe\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u7070\u5ea6\u7ea7 \\(r_k\\) \uff0c\u53ea\u9700\u5c06\u7070\u5ea6\u7ea7\u4e3a \\([0,r_k]\\) \u4ee5\u5185\u7684\u6240\u6709\u50cf\u7d20\u4e2a\u6570\u7684\u548c\u9664\u4ee5\u56fe\u50cf\u7684\u50cf\u7d20\u603b\u6570\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8f6c\u6362\u4e4b\u540e\u7684\u5bf9\u5e94\u7070\u5ea6\u7ea7 \\(s_k\\) Example \u8bbe\u56fe\u50cf\u670964*64=4096\u4e2a\u50cf\u7d20\uff0c\u67098\u4e2a\u7070\u5ea6\u7ea7\uff0c\u7070\u5ea6\u5206\u5e03: 1. \u8ba1\u7b97 \\(s_k\\) (\u5229\u7528\u524d\u7f00\u548c) 2. \u628a\u8ba1\u7b97\u7684 \\(s_k\\) \u5c31\u8fd1\u5b89\u6392\u52308\u4e2a\u7070\u5ea6\u7ea7\u4e2d\uff08\u5f97\u5230 \\(s_k\\) \u820d\u5165\uff09 \u6ce8\u610f\u8fd9\u91cc 34 \u7070\u5ea6\u7ea7\u88ab\u5408\u5e76\uff0c\u7070\u5ea6\u7ea7\u603b\u6570\u51cf\u5c11\uff0c\u610f\u5473\u7740\u7070\u5ea6\u7ea7\u4e4b\u95f4\u7684\u5dee\u5f02\u589e\u5927\uff0c\u5bf9\u6bd4\u5ea6\u589e\u5f3a\u3002 Question \u6309\u7167\u5747\u8861\u5316\u7684\u8981\u6c42\uff0c\u5728\u5747\u8861\u5316\u540e\u7684\u7ed3\u679c\u76f4\u65b9\u56fe\u4e2d\uff0c\u5404\u7070\u5ea6\u7ea7\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u662f\u76f8\u540c\u7684\uff0c\u5982\u53f3\u4e0a\u56fe\u6240\u793a\u8fde\u7eed\u7070\u5ea6\u7ea7\u5747\u8861\u5316\u7ed3\u679c\u90a3\u6837\u3002\u4f46\u662f\uff0c\u5982\u521a\u521a\u4e2d\u79bb\u6563\u7070\u5ea6\u7ea7\u5747\u8861\u5316\u540e\uff0c\u5404\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u6982\u7387\u5e76\u4e0d\u5b8c\u5168\u4e00\u6837\u3002\u4e3a\u4ec0\u4e48\uff1f \u6b65\u9aa42\u4e2d\uff0c\u6240\u5f97\u7684 \\(s_k\\) \u4e0d\u53ef\u80fd\u6b63\u597d\u7b49\u4e8e8\u7ea7\u7070\u5ea6\u503c\u4e2d\u7684\u67d0\u4e00\u7ea7\uff0c\u56e0\u6b64\u9700\u8981\u5c31\u8fd1\u5f52\u5165\u67d0\u4e00\u4e2a\u7070\u5ea6\u7ea7\u4e2d\u3002\u8fd9\u6837\uff0c\u76f8\u90bb\u7684\u591a\u4e2a \\(s_k\\) \u5c31\u53ef\u80fd\u843d\u5165\u540c\u4e00\u4e2a\u7070\u5ea6\u7ea7\uff0c\u9700\u8981\u5728\u6b65\u9aa43\u65f6\u5c06\u5904\u4e8e\u540c\u4e00\u4e2a\u7070\u5ea6\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u7d2f\u52a0\u3002\u56e0\u6b64\uff0c\u79bb\u6563\u7070\u5ea6\u76f4\u65b9\u56fe\u5747\u8861\u5316\u64cd\u4f5c\u4ee5\u540e\uff0c\u6bcf\u4e2a\u7070\u5ea6\u7ea7\u5904\u7684\u6982\u7387\u5bc6\u5ea6\uff08\u6216\u50cf\u7d20\u4e2a\u6570\uff09\u5e76\u4e0d\u5b8c\u5168\u4e00\u6837\u3002 \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5b9e\u8d28\u4e0a\u662f\u51cf\u5c11\u56fe\u50cf\u7684\u7070\u5ea6\u7ea7\u4ee5\u6362\u53d6\u5bf9\u6bd4\u5ea6\u7684\u52a0\u5927\u3002\u5728\u5747\u8861\u8fc7\u7a0b\u4e2d\uff0c\u539f\u6765\u7684\u76f4\u65b9\u56fe\u4e0a\u51fa\u73b0\u6982\u7387\u8f83\u5c0f\u7684\u7070\u5ea6\u7ea7\u88ab\u5f52\u5165\u5f88\u5c11\u51e0\u4e2a\u751a\u81f3\u4e00\u4e2a\u7070\u5ea6\u7ea7\u4e2d\uff0c\u6545\u5f97\u4e0d\u5230\u589e\u5f3a\u3002\u82e5\u8fd9\u4e9b\u7070\u5ea6\u7ea7\u6240\u6784\u6210\u7684\u56fe\u8c61\u7ec6\u8282\u6bd4\u8f83\u91cd\u8981\uff0c\u5219\u9700\u91c7\u7528\u5c40\u90e8\u533a\u57df\u76f4\u65b9\u56fe\u5747\u8861\u5316\u5904\u7406\u3002 Histogram fitting \u00b6 \u6240\u8c13\u76f4\u65b9\u56fe\u5339\u914d\uff0c\u5c31\u662f\u4fee\u6539\u4e00\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\uff0c\u4f7f\u5f97\u5b83\u4e0e\u53e6\u4e00\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u5339\u914d\u6216\u5177\u6709\u4e00\u79cd\u9884\u5148\u89c4\u5b9a\u7684\u51fd\u6570\u5f62\u72b6\u3002 \u76f4\u65b9\u56fe\u5339\u914d\u7684\u76ee\u6807\uff0c\u662f\u7a81\u51fa\u6211\u4eec\u611f\u5174\u8da3\u7684\u7070\u5ea6\u8303\u56f4\uff0c\u4f7f\u56fe\u50cf\u8d28\u91cf\u6539\u5584\u3002 \u5229\u7528\u76f4\u65b9\u56fe\u5747\u8861\u5316\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5b9e\u73b0\u76f4\u65b9\u56fe\u5339\u914d\u8fc7\u7a0b\u3002 \u5177\u4f53\u8fc7\u7a0b\uff1a Base on the equation \\(s=T(r)=\\int_0^rP(r)dr\\) map the gray level r in the resulted histogram to be s. Base on the equation \\(v=T(z)=\\int_0^zP(z)dz\\) map the gray level z in the resulted histogram to be v. \u7531 \\(v = G(z)\\) \u5f97\u5230 \\(z =G^{-1}(v)\\) \u3002\u7531\u4e8es\u548cv\u6709\u76f8\u540c\u7684\u5206\u5e03\uff0c\u9010\u4e00\u53d6 \\(v = s\\) \uff0c\u6c42\u51fa\u4e0er\u5bf9\u5e94\u7684 \\(z =G^{-1}(s)\\) \u3002 \u65b9\u6cd5\u7b80\u8ff0\uff1a \u5728\u6b65\u9aa41\u548c2\u4e2d\uff0c\u5206\u522b\u8ba1\u7b97\u83b7\u5f97\u4e24\u5f20\u8868\uff08\u53c2\u89c1\u76f4\u65b9\u56fe\u5747\u8861\u5316\u4e2d\u7684\u7b97\u4f8b\uff09\uff0c\u4ece\u4e2d\u9009\u53d6\u4e00\u5bf9vk\u3001sj\uff0c\u4f7fvk = sj\uff0c\u5e76\u4ece\u4e24\u5f20\u8868\u4e2d\u67e5\u51fa\u5bf9\u5e94\u7684zk\u3001rj\u3002\u8fd9\u6837\uff0c\u539f\u59cb\u56fe\u50cf\u4e2d\u7070\u5ea6\u7ea7\u4e3arj\u7684\u6240\u6709\u50cf\u7d20\u90fd\u6620\u5c04\u6210\u7070\u5ea6\u7ea7zk\uff0c\u6700\u7ec8\u5f97\u5230\u6240\u671f\u671b\u7684\u56fe\u50cf\u3002 \u76f4\u65b9\u56fe\uff08\u7070\u5ea6\uff09\u53d8\u6362\u7528\u4ee5\u786e\u5b9a\u53d8\u6362\u524d\u540e\u4e24\u4e2a\u76f4\u65b9\u56fe\u7070\u5ea6\u7ea7\u4e4b\u95f4\u5bf9\u5e94\u5173\u7cfb\u7684\u53d8\u6362\u51fd\u6570\u3002\u7ecf\u8fc7\u76f4\u65b9\u56fe\u53d8\u6362\u4ee5\u540e\uff0c\u539f\u56fe\u50cf\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7070\u5ea6\u503c\u90fd\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a\u65b0\u7684\u7070\u5ea6\u503c\uff0c\u4ece\u800c\u6784\u6210\u4e00\u5e45\u65b0\u56fe\u50cf\u3002 \u76f4\u65b9\u56fe\u5747\u8861\u5316\u3001\u76f4\u65b9\u56fe\u5339\u914d\u90fd\u5c5e\u4e8e\u76f4\u65b9\u56fe\u53d8\u6362\u64cd\u4f5c\u3002 Histogram transform\u2014image enhancement \u00b6 \u56fe\u50cf\u589e\u5f3a * \u91c7\u7528\u4e00\u7cfb\u5217\u6280\u672f\u53bb\u6539\u5584\u56fe\u50cf\u7684\u89c6\u89c9\u6548\u679c\uff0c\u6216\u5c06\u56fe\u50cf\u8f6c\u6362\u6210\u4e00\u79cd\u66f4\u9002\u5408\u4e8e\u4eba\u6216\u673a\u5668\u8fdb\u884c\u5206\u6790\u5904\u7406\u7684\u5f62\u5f0f\u3002 * \u56fe\u50cf\u589e\u5f3a\u5e76\u4e0d\u4ee5\u56fe\u50cf\u4fdd\u771f\u4e3a\u51c6\u5219\uff0c\u800c\u662f\u6709\u9009\u62e9\u5730\u7a81\u51fa\u67d0\u4e9b\u5bf9\u4eba\u6216\u673a\u5668\u5206\u6790\u6709\u610f\u4e49\u7684\u4fe1\u606f\uff0c\u6291\u5236\u65e0\u7528\u4fe1\u606f\uff0c\u63d0\u9ad8\u56fe\u50cf\u7684\u4f7f\u7528\u4ef7\u503c\u3002 * \u6839\u636e\u4efb\u52a1\u76ee\u6807\u7a81\u51fa\u56fe\u50cf\u4e2d\u611f\u5174\u8da3\u7684\u4fe1\u606f\uff0c\u6d88\u9664\u5e72\u6270\uff0c\u6539\u5584\u56fe\u50cf\u7684\u89c6\u89c9\u6548\u679c\u6216\u589e\u5f3a\u4fbf\u4e8e\u673a\u5668\u8bc6\u522b\u7684\u4fe1\u606f\u3002 Luminance adjustment Example Contrast adjustment Example Color quantization Example \u6839\u636e\u53d8\u6362\u51fd\u6570\u7c7b\u578b\u7684\u4e0d\u540c\uff0c\u76f4\u65b9\u56fe\u7070\u5ea6\u53d8\u6362\u53ef\u4ee5\u5206\u4e3a\u7ebf\u6027\u53d8\u6362\u548c\u975e\u7ebf\u6027\u53d8\u6362\u4e24\u5927\u7c7b\u3002 Linear grayscale transform \u00b6 Example Contrast stretching \u62c9\u4f38 \u8f93\u5165\u56fe\u50cff(x,y)\u7070\u5ea6\u8303\u56f4\u4e3a[a,b] \u8f93\u51fa\u56fe\u50cfg(x,y)\u7070\u5ea6\u8303\u56f4\u4e3a[c,d] \u6709\u7684\u65f6\u5019 \u5206\u6bb5\u62c9\u4f38 \u5229\u7528\u5206\u6bb5\u76f4\u65b9\u56fe\u53d8\u6362\uff0c\u53ef\u4ee5\u5c06\u611f\u5174\u8da3\u7684\u7070\u5ea6\u8303\u56f4\u7ebf\u6027\u6269\u5c55\uff0c\u540c\u65f6\u76f8\u5bf9\u6291\u5236\u4e0d\u611f\u5174\u8da3\u7684\u7070\u5ea6\u533a\u57df\u3002 Nonlinear histogram transform \u00b6","title":"\u56fe\u50cf\u7070\u5ea6\u53d8\u6362\u4e0e\u76f4\u65b9\u56fe"},{"location":"dip/dip3/#image-grayscale-transform","text":"","title":"Image grayscale transform"},{"location":"dip/dip3/#grayscale-perception","text":"\u7070\u5ea6\u7ea7\u611f\u77e5\uff1a32\u7070\u5ea6\u7ea7\u300164\u7070\u5ea6\u7ea7\u3001128\u7070\u5ea6\u7ea7\u3001256\u7070\u5ea6\u7ea7 \u53ef\u89c6\u7684\u9608\u503c Weber\u2019s Law \u80fd\u88ab\u6211\u4eec\u770b\u5230\u7684\u9608\u503c(delta I) \u4e0e I \u6210\u6b63\u6bd4 \\(\\dfrac{\\Delta I}{I}\\approx K_{weber}\\approx 1...2\\%\\) P \u5047\u8bbe\u8fde\u7eed\u4e24\u4e2a\u7070\u5ea6\u7ea7\u4e4b\u95f4\u7684\u4eae\u5ea6\u5dee\u5f02\u5c31\u662fWeber\u2019s Law\u4e2d\u7684\u53ef\u89c6\u4e34\u754c\u503c\uff0c \\(\\dfrac{I_{max}}{I_{min}}=(1+K_{weber})^{255}\\) \u8003\u8651\u5230 \\(K_{weber}=0.01...0.02,\\dfrac{I_{max}}{I_{min}}=13...156\\)","title":"Grayscale perception"},{"location":"dip/dip3/#visibility-enhancement-a-logarithmic-operation","text":"\u53ef\u89c6\u5316\u589e\u5f3a\uff1a\u4ee5\u5bf9\u6570\u64cd\u4f5c\u4e3a\u4f8b \u4e3a\u4e86\u589e\u5f3a\u56fe\u50cf\u7684\u53ef\u89c6\u4fe1\u606f\uff0c\u5bf9\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u8fdb\u884c\u57fa\u4e8e\u5bf9\u6570\u7684\u64cd\u4f5c \\(L_d=\\dfrac{\\log(L_w+1)}{\\log(L_{max}+1)}\\) \\(L_d\\) \u662f\u663e\u793a\u4eae\u5ea6\uff0c \\(L_w\\) \u662f\u771f\u5b9e\u4e16\u754c\u4eae\u5ea6\uff0c \\(L_{max}\\) \u662f\u573a\u666f\u4e2d\u7684\u6700\u4eae\u503c\u3002 \u8fd9\u4e2a\u6620\u5c04\u80fd\u591f\u786e\u4fdd\u4e0d\u7ba1\u573a\u666f\u7684\u52a8\u6001\u8303\u56f4\u662f\u600e\u4e48\u6837\u7684\uff0c\u5176\u6700\u5927\u503c\u90fd\u80fd\u6620\u5c04\u52301\uff08\u767d\uff09\uff0c\u5176\u4ed6\u7684\u503c\u80fd\u591f\u6bd4\u8f83\u5e73\u6ed1\u5730\u53d8\u5316\u3002 \u5e73\u6ed1\u66f2\u7ebf\uff0c\u4e0d\u4f1a\u51fa\u73b0\u68af\u5ea6\u9006\u8f6c\uff08\u539f\u6765\u6bd4\u8f83\u6697\uff0c\u73b0\u5728\u8fd8\u662f\u6bd4\u8f83\u6697\uff09 global method. \u5bf9\u6570\u7684\u95ee\u9898\uff1a \u867d\u7136\u7ec6\u8282\u66f4\u591a\uff0c\u4f46\u662f\u5bf9\u6bd4\u5ea6\u6ca1\u90a3\u4e48 sharp \u4e86\uff0c\u7f8e\u611f","title":"Visibility enhancement: a logarithmic operation"},{"location":"dip/dip3/#grayscale-image-and-histogram","text":"","title":"Grayscale image and histogram"},{"location":"dip/dip3/#grayscale-image","text":"\u4e8c\u7ef4\u6570\u7ec4\uff0c\u6bcf\u4e2a\u50cf\u7d20 8 \u4f4d\uff08\u901a\u5e38\u5199\u4f5c 0..255\uff09 \u7070\u5ea6\u7ea7\u7684\u503c\u8d8a\u5c0f\uff0c\u8fd9\u4e2a\u56fe\u50cf\u770b\u4e0a\u53bb\u8d8a\u6697\uff1b\u53cd\u4e4b\u8d8a\u4eae","title":"Grayscale image"},{"location":"dip/dip3/#histogram","text":"\u7070\u5ea6\u76f4\u65b9\u56fe\u662f\u4e00\u7c7b\u7edf\u8ba1\u56fe\u5f62\uff0c\u5b83\u8868\u793a\u4e00\u5e45\u56fe\u50cf\u4e2d\u5404\u4e2a\u7070\u5ea6\u7b49\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u5728\u50cf\u7d20\u603b\u6570\u4e2d\u6240\u5360\u7684\u6bd4\u91cd\u3002 e.g. \u91cf\u5316\uff1a\u5982 256 \u5206\u4e3a 8 \u4e2a\u7070\u5ea6\u7ea7\uff0c 0-32 \u4e3a\u4e00\u4e2a\u7070\u5ea6\u7ea7\uff0c\u4ee5\u6b64\u7c7b\u63a8... \u6bcf\u4e2a\u67f1\u5b50\u5c31\u53cd\u6620\u4e86\u50cf\u7d20\u6570\u76ee\u5360\u7684\u6bd4\u4f8b\u3002 \u8bbe\u7070\u5ea6\u7b49\u7ea7\u8303\u56f4\u4e3a[0,L-1] \uff0c\u7070\u5ea6\u76f4\u65b9\u56fe\u7528\u4e0b\u5217\u79bb\u6563\u51fd\u6570\u6765\u8868\u793a\uff1a \\(h(r_k)=n_k\\) \u5176\u4e2d\uff0c \\(r_k\\) \u4e3a\u7b2ck\u7ea7\u7070\u5ea6\uff0c \\(n_k\\) \u662f\u56fe\u50cf\u4e2d\u5177\u6709\u7070\u5ea6\u7ea7 \\(r_k\\) \u7684\u50cf\u7d20\u6570\u76ee\uff0c \\(0 \\leq k \\leq L-1\uff0c0 \\leq n_k \\leq n-1\\) , \\(n\\) \u4e3a\u56fe\u50cf\u603b\u7684\u50cf\u7d20\u6570\u76ee\u3002 \u901a\u5e38\u7528\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u6765\u5f52\u4e00\u5316\u76f4\u65b9\u56fe\uff1a \\(P(r_k)\\) \u4e3a\u7070\u5ea6\u7ea7 \\(r_k\\) \u6240\u53d1\u751f\u7684\u6982\u7387\uff08\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff09\u3002\u6b64\u65f6\uff0c\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a \\(\\sum\\limits_{k=0}^{L-1}P(r_k)=1\\) Example","title":"Histogram"},{"location":"dip/dip3/#color-image-and-histogram","text":"","title":"Color image and histogram"},{"location":"dip/dip3/#color-histogram","text":"\u5f69\u8272\u76f4\u65b9\u56fe\u662f\u4e00\u7c7b\u7edf\u8ba1\u56fe\u5f62\uff0c\u5b83\u8868\u793a\u4e00\u5e45\u56fe\u50cf\u4e2d r,g,b \u901a\u9053\u4e0a\u5404\u4e2a\u7070\u5ea6\u7b49\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u5728\u50cf\u7d20\u603b\u6570\u4e2d\u6240\u5360\u7684\u6bd4\u91cd\u3002","title":"Color histogram"},{"location":"dip/dip3/#characteristics-of-histogram","text":"\u76f4\u65b9\u56fe \u662f\u7a7a\u95f4\u57df\u5904\u7406\u6280\u672f\u7684\u57fa\u7840\u3002 \u53cd\u6620\u56fe\u50cf\u7070\u5ea6\u7684\u5206\u5e03\u89c4\u5f8b\uff0c\u4f46\u4e0d\u80fd\u4f53\u73b0\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u53d8\u5316\u60c5\u51b5\u3002 \u5bf9\u4e8e\u4e00\u5e45\u7ed9\u5b9a\u7684\u56fe\u50cf\uff0c\u5176\u76f4\u65b9\u56fe\u662f\u552f\u4e00\u7684\u3002 \u4e0d\u540c\u7684\u56fe\u50cf\u53ef\u4ee5\u5bf9\u5e94\u76f8\u540c\u7684\u76f4\u65b9\u56fe\u3002 \u5bf9\u76f4\u65b9\u56fe\u8fdb\u884c\u64cd\u4f5c\u80fd\u6709\u6548\u5730\u7528\u4e8e\u56fe\u50cf\u589e\u5f3a\u3001\u538b\u7f29\u548c\u5206\u5272, \u4ed6\u4eec\u662f\u56fe\u50cf\u5904\u7406\u7684\u4e00\u4e2a\u5b9e\u7528\u624b\u6bb5\u3002 \u7f3a\u70b9\uff1a\u5e26\u6765\u566a\u58f0 Question \u4f46\u662f\u76f4\u65b9\u56fe\u628a\u7ed3\u6784\u4fe1\u606f\u4e22\u5931\uff0c\u53ea\u77e5\u9053\u989c\u8272\u5206\u5e03\uff0c\u4e0d\u77e5\u9053\u7ed3\u6784\u3002","title":"Characteristics of histogram"},{"location":"dip/dip3/#histogram-equalization-and-fitting","text":"","title":"Histogram equalization and fitting"},{"location":"dip/dip3/#histogram-equalization","text":"\u76f4\u65b9\u56fe\u5747\u8861\u5316\uff1a\u5c06\u539f\u56fe\u50cf\u7684\u975e\u5747\u5300\u5206\u5e03\u7684\u76f4\u65b9\u56fe\u901a\u8fc7\u53d8\u6362\u51fd\u6570T\u4fee\u6b63\u4e3a\u5747\u5206\u5e03\u7684\u76f4\u65b9\u56fe\uff0c\u7136\u540e\u6309\u5747\u8861\u76f4\u65b9\u56fe\u4fee\u6b63\u539f\u56fe\u50cf\u3002 \u627e\u5230\u53d8\u6362\u51fd\u6570T\uff0c\u786e\u5b9a\u5982\u4e0b\u5bf9\u5e94\u5173\u7cfb\uff1a \\(s=T(r)\\) \u4ece\u800c\u786e\u4fdd\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u7070\u5ea6r\u90fd\u80fd\u8f6c\u6362\u4e3a\u65b0\u56fe\u50cf\u4e2d\u7684\u4e00\u4e2a\u5bf9\u5e94\u7684\u7070\u5ea6s\u3002 \u76f4\u65b9\u56fe\u5747\u8861\u5316\u2014\u2014\u5bfb\u627eT\uff08\u8fde\u7eed\u7070\u5ea6\u53d8\u5316\uff09 \u5047\u8bbe\uff1a \u4ee4 r\u548c s \u5206\u522b\u4ee3\u8868\u53d8\u5316\u524d\u540e\u56fe\u50cf\u7684\u7070\u5ea6\u7ea7\uff0c\u5e76\u4e14 \\(0\\leq r,s \\leq 1\\) \u3002 P\u00ae \u548c P(s) \u5206\u522b\u4e3a\u53d8\u5316\u524d\u540e\u5404\u7ea7\u7070\u5ea6\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff08r\u548cs\u503c\u5df2\u5f52\u4e00\u5316\uff0c\u6700\u5927\u7070\u5ea6\u503c\u4e3a1\uff09 \u89c4\u5b9a\uff1a \u5728 \\(0\\leq r \\leq\\) \u4e2d\uff0cT\u00ae\u662f\u5355\u8c03\u9012\u589e\u51fd\u6570\uff0c\u5e76\u4e14 \\(0\\leq T(r)\\leq 1\\) \u3002 \u53cd\u53d8\u6362 \\(r = T-1(s)\\) \u4e5f\u4e3a\u5355\u8c03\u9012\u589e\u51fd\u6570\u3002 \u8003\u8651\u5230\u7070\u5ea6\u53d8\u6362\u4e0d\u5f71\u54cd\u50cf\u7d20\u7684\u4f4d\u7f6e\u5206\u5e03\uff0c\u4e5f\u4e0d\u4f1a\u589e\u51cf\u50cf\u7d20\u6570\u76ee\u3002\u6240\u4ee5\u6709\uff1a \\(\\int_{0}^rP(r)dr =\\int_{0}^sP(s)ds=\\int_{0}^s1ds=s=T(r)\\) (\u4e3a\u4ec0\u4e48 Ps = 1, \u56e0\u4e3a\u662f\u6982\u7387\u5bc6\u5ea6) \u56e0\u6b64 \\(s=T(r)=\\int_{0}^rP(r)dr\\) \u5373\u8f6c\u6362\u51fd\u6570 T \u5728\u53d8\u91cf r \u5904\u7684\u51fd\u6570\u503c s\uff0c\u662f\u539f\u76f4\u65b9\u56fe\u4e2d\u7070\u5ea6\u7b49\u7ea7\u4e3a [0,r] \u4ee5\u5185\u7684\u76f4\u65b9\u56fe\u66f2\u7ebf\u6240\u8986\u76d6\u7684\u9762\u79ef\u3002 Discrete: \u8bbe\u4e00\u5e45\u56fe\u50cf\u7684\u50cf\u7d20\u603b\u6570\u4e3a n\uff0c\u5206 L \u4e2a\u7070\u5ea6\u7ea7\uff0c \\(n_k\\) \u4e3a\u7b2c k \u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u50cf\u7d20\u6570\uff0c\u5219\u7b2c k \u4e2a\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u6982\u7387\u4e3a\uff1a \\(P(r_k)=\\dfrac{n_k}{n}\\quad (0\\leq r_k\\leq 1,k=0,1,2,...L-1)\\) \u79bb\u6563 \u7070\u5ea6\u76f4\u65b9\u56fe\u5747\u8861\u5316\u7684\u8f6c\u6362\u516c\u5f0f\u4e3a\uff1a \\(s_k=T(r_k)=\\sum\\limits_{i=0}^kP(r_i)=\\sum\\limits_{i=0}^k\\dfrac{n_i}{n}=\\dfrac{1}{n}\\sum\\limits_{i=0}^k n_i\\) \u5bf9\u4e8e\u539f\u76f4\u65b9\u56fe\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u7070\u5ea6\u7ea7 \\(r_k\\) \uff0c\u53ea\u9700\u5c06\u7070\u5ea6\u7ea7\u4e3a \\([0,r_k]\\) \u4ee5\u5185\u7684\u6240\u6709\u50cf\u7d20\u4e2a\u6570\u7684\u548c\u9664\u4ee5\u56fe\u50cf\u7684\u50cf\u7d20\u603b\u6570\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u8f6c\u6362\u4e4b\u540e\u7684\u5bf9\u5e94\u7070\u5ea6\u7ea7 \\(s_k\\) Example \u8bbe\u56fe\u50cf\u670964*64=4096\u4e2a\u50cf\u7d20\uff0c\u67098\u4e2a\u7070\u5ea6\u7ea7\uff0c\u7070\u5ea6\u5206\u5e03: 1. \u8ba1\u7b97 \\(s_k\\) (\u5229\u7528\u524d\u7f00\u548c) 2. \u628a\u8ba1\u7b97\u7684 \\(s_k\\) \u5c31\u8fd1\u5b89\u6392\u52308\u4e2a\u7070\u5ea6\u7ea7\u4e2d\uff08\u5f97\u5230 \\(s_k\\) \u820d\u5165\uff09 \u6ce8\u610f\u8fd9\u91cc 34 \u7070\u5ea6\u7ea7\u88ab\u5408\u5e76\uff0c\u7070\u5ea6\u7ea7\u603b\u6570\u51cf\u5c11\uff0c\u610f\u5473\u7740\u7070\u5ea6\u7ea7\u4e4b\u95f4\u7684\u5dee\u5f02\u589e\u5927\uff0c\u5bf9\u6bd4\u5ea6\u589e\u5f3a\u3002 Question \u6309\u7167\u5747\u8861\u5316\u7684\u8981\u6c42\uff0c\u5728\u5747\u8861\u5316\u540e\u7684\u7ed3\u679c\u76f4\u65b9\u56fe\u4e2d\uff0c\u5404\u7070\u5ea6\u7ea7\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u662f\u76f8\u540c\u7684\uff0c\u5982\u53f3\u4e0a\u56fe\u6240\u793a\u8fde\u7eed\u7070\u5ea6\u7ea7\u5747\u8861\u5316\u7ed3\u679c\u90a3\u6837\u3002\u4f46\u662f\uff0c\u5982\u521a\u521a\u4e2d\u79bb\u6563\u7070\u5ea6\u7ea7\u5747\u8861\u5316\u540e\uff0c\u5404\u7070\u5ea6\u7ea7\u51fa\u73b0\u7684\u6982\u7387\u5e76\u4e0d\u5b8c\u5168\u4e00\u6837\u3002\u4e3a\u4ec0\u4e48\uff1f \u6b65\u9aa42\u4e2d\uff0c\u6240\u5f97\u7684 \\(s_k\\) \u4e0d\u53ef\u80fd\u6b63\u597d\u7b49\u4e8e8\u7ea7\u7070\u5ea6\u503c\u4e2d\u7684\u67d0\u4e00\u7ea7\uff0c\u56e0\u6b64\u9700\u8981\u5c31\u8fd1\u5f52\u5165\u67d0\u4e00\u4e2a\u7070\u5ea6\u7ea7\u4e2d\u3002\u8fd9\u6837\uff0c\u76f8\u90bb\u7684\u591a\u4e2a \\(s_k\\) \u5c31\u53ef\u80fd\u843d\u5165\u540c\u4e00\u4e2a\u7070\u5ea6\u7ea7\uff0c\u9700\u8981\u5728\u6b65\u9aa43\u65f6\u5c06\u5904\u4e8e\u540c\u4e00\u4e2a\u7070\u5ea6\u7ea7\u7684\u50cf\u7d20\u4e2a\u6570\u7d2f\u52a0\u3002\u56e0\u6b64\uff0c\u79bb\u6563\u7070\u5ea6\u76f4\u65b9\u56fe\u5747\u8861\u5316\u64cd\u4f5c\u4ee5\u540e\uff0c\u6bcf\u4e2a\u7070\u5ea6\u7ea7\u5904\u7684\u6982\u7387\u5bc6\u5ea6\uff08\u6216\u50cf\u7d20\u4e2a\u6570\uff09\u5e76\u4e0d\u5b8c\u5168\u4e00\u6837\u3002 \u76f4\u65b9\u56fe\u5747\u8861\u5316\u5b9e\u8d28\u4e0a\u662f\u51cf\u5c11\u56fe\u50cf\u7684\u7070\u5ea6\u7ea7\u4ee5\u6362\u53d6\u5bf9\u6bd4\u5ea6\u7684\u52a0\u5927\u3002\u5728\u5747\u8861\u8fc7\u7a0b\u4e2d\uff0c\u539f\u6765\u7684\u76f4\u65b9\u56fe\u4e0a\u51fa\u73b0\u6982\u7387\u8f83\u5c0f\u7684\u7070\u5ea6\u7ea7\u88ab\u5f52\u5165\u5f88\u5c11\u51e0\u4e2a\u751a\u81f3\u4e00\u4e2a\u7070\u5ea6\u7ea7\u4e2d\uff0c\u6545\u5f97\u4e0d\u5230\u589e\u5f3a\u3002\u82e5\u8fd9\u4e9b\u7070\u5ea6\u7ea7\u6240\u6784\u6210\u7684\u56fe\u8c61\u7ec6\u8282\u6bd4\u8f83\u91cd\u8981\uff0c\u5219\u9700\u91c7\u7528\u5c40\u90e8\u533a\u57df\u76f4\u65b9\u56fe\u5747\u8861\u5316\u5904\u7406\u3002","title":"Histogram equalization"},{"location":"dip/dip3/#histogram-fitting","text":"\u6240\u8c13\u76f4\u65b9\u56fe\u5339\u914d\uff0c\u5c31\u662f\u4fee\u6539\u4e00\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\uff0c\u4f7f\u5f97\u5b83\u4e0e\u53e6\u4e00\u5e45\u56fe\u50cf\u7684\u76f4\u65b9\u56fe\u5339\u914d\u6216\u5177\u6709\u4e00\u79cd\u9884\u5148\u89c4\u5b9a\u7684\u51fd\u6570\u5f62\u72b6\u3002 \u76f4\u65b9\u56fe\u5339\u914d\u7684\u76ee\u6807\uff0c\u662f\u7a81\u51fa\u6211\u4eec\u611f\u5174\u8da3\u7684\u7070\u5ea6\u8303\u56f4\uff0c\u4f7f\u56fe\u50cf\u8d28\u91cf\u6539\u5584\u3002 \u5229\u7528\u76f4\u65b9\u56fe\u5747\u8861\u5316\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5b9e\u73b0\u76f4\u65b9\u56fe\u5339\u914d\u8fc7\u7a0b\u3002 \u5177\u4f53\u8fc7\u7a0b\uff1a Base on the equation \\(s=T(r)=\\int_0^rP(r)dr\\) map the gray level r in the resulted histogram to be s. Base on the equation \\(v=T(z)=\\int_0^zP(z)dz\\) map the gray level z in the resulted histogram to be v. \u7531 \\(v = G(z)\\) \u5f97\u5230 \\(z =G^{-1}(v)\\) \u3002\u7531\u4e8es\u548cv\u6709\u76f8\u540c\u7684\u5206\u5e03\uff0c\u9010\u4e00\u53d6 \\(v = s\\) \uff0c\u6c42\u51fa\u4e0er\u5bf9\u5e94\u7684 \\(z =G^{-1}(s)\\) \u3002 \u65b9\u6cd5\u7b80\u8ff0\uff1a \u5728\u6b65\u9aa41\u548c2\u4e2d\uff0c\u5206\u522b\u8ba1\u7b97\u83b7\u5f97\u4e24\u5f20\u8868\uff08\u53c2\u89c1\u76f4\u65b9\u56fe\u5747\u8861\u5316\u4e2d\u7684\u7b97\u4f8b\uff09\uff0c\u4ece\u4e2d\u9009\u53d6\u4e00\u5bf9vk\u3001sj\uff0c\u4f7fvk = sj\uff0c\u5e76\u4ece\u4e24\u5f20\u8868\u4e2d\u67e5\u51fa\u5bf9\u5e94\u7684zk\u3001rj\u3002\u8fd9\u6837\uff0c\u539f\u59cb\u56fe\u50cf\u4e2d\u7070\u5ea6\u7ea7\u4e3arj\u7684\u6240\u6709\u50cf\u7d20\u90fd\u6620\u5c04\u6210\u7070\u5ea6\u7ea7zk\uff0c\u6700\u7ec8\u5f97\u5230\u6240\u671f\u671b\u7684\u56fe\u50cf\u3002 \u76f4\u65b9\u56fe\uff08\u7070\u5ea6\uff09\u53d8\u6362\u7528\u4ee5\u786e\u5b9a\u53d8\u6362\u524d\u540e\u4e24\u4e2a\u76f4\u65b9\u56fe\u7070\u5ea6\u7ea7\u4e4b\u95f4\u5bf9\u5e94\u5173\u7cfb\u7684\u53d8\u6362\u51fd\u6570\u3002\u7ecf\u8fc7\u76f4\u65b9\u56fe\u53d8\u6362\u4ee5\u540e\uff0c\u539f\u56fe\u50cf\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7070\u5ea6\u503c\u90fd\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a\u65b0\u7684\u7070\u5ea6\u503c\uff0c\u4ece\u800c\u6784\u6210\u4e00\u5e45\u65b0\u56fe\u50cf\u3002 \u76f4\u65b9\u56fe\u5747\u8861\u5316\u3001\u76f4\u65b9\u56fe\u5339\u914d\u90fd\u5c5e\u4e8e\u76f4\u65b9\u56fe\u53d8\u6362\u64cd\u4f5c\u3002","title":"Histogram fitting"},{"location":"dip/dip3/#histogram-transformimage-enhancement","text":"\u56fe\u50cf\u589e\u5f3a * \u91c7\u7528\u4e00\u7cfb\u5217\u6280\u672f\u53bb\u6539\u5584\u56fe\u50cf\u7684\u89c6\u89c9\u6548\u679c\uff0c\u6216\u5c06\u56fe\u50cf\u8f6c\u6362\u6210\u4e00\u79cd\u66f4\u9002\u5408\u4e8e\u4eba\u6216\u673a\u5668\u8fdb\u884c\u5206\u6790\u5904\u7406\u7684\u5f62\u5f0f\u3002 * \u56fe\u50cf\u589e\u5f3a\u5e76\u4e0d\u4ee5\u56fe\u50cf\u4fdd\u771f\u4e3a\u51c6\u5219\uff0c\u800c\u662f\u6709\u9009\u62e9\u5730\u7a81\u51fa\u67d0\u4e9b\u5bf9\u4eba\u6216\u673a\u5668\u5206\u6790\u6709\u610f\u4e49\u7684\u4fe1\u606f\uff0c\u6291\u5236\u65e0\u7528\u4fe1\u606f\uff0c\u63d0\u9ad8\u56fe\u50cf\u7684\u4f7f\u7528\u4ef7\u503c\u3002 * \u6839\u636e\u4efb\u52a1\u76ee\u6807\u7a81\u51fa\u56fe\u50cf\u4e2d\u611f\u5174\u8da3\u7684\u4fe1\u606f\uff0c\u6d88\u9664\u5e72\u6270\uff0c\u6539\u5584\u56fe\u50cf\u7684\u89c6\u89c9\u6548\u679c\u6216\u589e\u5f3a\u4fbf\u4e8e\u673a\u5668\u8bc6\u522b\u7684\u4fe1\u606f\u3002 Luminance adjustment Example Contrast adjustment Example Color quantization Example \u6839\u636e\u53d8\u6362\u51fd\u6570\u7c7b\u578b\u7684\u4e0d\u540c\uff0c\u76f4\u65b9\u56fe\u7070\u5ea6\u53d8\u6362\u53ef\u4ee5\u5206\u4e3a\u7ebf\u6027\u53d8\u6362\u548c\u975e\u7ebf\u6027\u53d8\u6362\u4e24\u5927\u7c7b\u3002","title":"Histogram transform\u2014image enhancement"},{"location":"dip/dip3/#linear-grayscale-transform","text":"Example Contrast stretching \u62c9\u4f38 \u8f93\u5165\u56fe\u50cff(x,y)\u7070\u5ea6\u8303\u56f4\u4e3a[a,b] \u8f93\u51fa\u56fe\u50cfg(x,y)\u7070\u5ea6\u8303\u56f4\u4e3a[c,d] \u6709\u7684\u65f6\u5019 \u5206\u6bb5\u62c9\u4f38 \u5229\u7528\u5206\u6bb5\u76f4\u65b9\u56fe\u53d8\u6362\uff0c\u53ef\u4ee5\u5c06\u611f\u5174\u8da3\u7684\u7070\u5ea6\u8303\u56f4\u7ebf\u6027\u6269\u5c55\uff0c\u540c\u65f6\u76f8\u5bf9\u6291\u5236\u4e0d\u611f\u5174\u8da3\u7684\u7070\u5ea6\u533a\u57df\u3002","title":"Linear grayscale transform"},{"location":"dip/dip3/#nonlinear-histogram-transform","text":"","title":"Nonlinear histogram transform"},{"location":"dip/dip5/","text":"Geometric transform \u00b6 Abstract Simple geometric transform Interpolation Warp and morph Application \u5229\u7528\u53d8\u6362\u51fd\u6570\u6539\u53d8\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002 \u51e0\u4f55\u53d8\u6362\u4e0d\u6539\u53d8\u50cf\u7d20\u503c\uff0c\u800c\u662f\u6539\u53d8\u50cf\u7d20\u6240\u5728\u7684\u4f4d\u7f6e\u3002 Example \\(g(x,y)=f(x^{'},y^{'})=f[a(x,y),b(x,y)]\\) \\(f(x,y)\\) \u8868\u793a\u8f93\u5165\u56fe\u50cf\uff0c \\(g(x,y)\\) \u8868\u793a\u8f93\u51fa\u56fe\u50cf\u3002\u51fd\u6570 \\(a(x,y)\\) \u548c \\(b(x,y)\\) \u552f\u4e00\u5730\u63cf\u8ff0\u4e86\u7a7a\u95f4\u53d8\u6362\u3002 \u51e0\u4f55\u53d8\u6362\u6839\u636e\u96be\u6613\u7a0b\u5ea6\u901a\u5e38\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4e24\u7c7b\uff1a \u7b80\u5355\u53d8\u6362 \u2014\u2014\u53d8\u6362\u8fc7\u7a0b\uff08\u5404\u4e2a\u50cf\u7d20\u53d8\u6362\u524d\u540e\u7684\u4f4d\u7f6e\uff09\u4ee5\u53ca\u53d8\u6362\u53c2\u6570\u53ef\u77e5\u65f6\u7684\u53d8\u6362\uff0c\u5982\u56fe\u50cf\u7684 \u5e73\u79fb\u3001\u955c\u50cf\u3001\u8f6c\u7f6e\u3001\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u9519\u5207\u53d8\u6362 \u7b49\u3002 \u4e00\u822c\u53d8\u6362 \u2014\u2014\u53d8\u6362\u8fc7\u7a0b\u4e0d\u662f\u4e00\u76ee\u4e86\u7136\uff0c\u53d8\u6362\u53c2\u6570\u96be\u4ee5\u6d4b\u91cf\u65f6\u7684\u53d8\u6362\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u56fe\u50cf\u7578\u53d8\u8fdb\u884c\u6821\u6b63\u65f6\uff0c\u9700\u8981\u7528\u5230\u8f83\u4e3a\u590d\u6742\u7684\u53d8\u6362\u516c\u5f0f\u3002 Simple geometric transform \u00b6 Translation \u00b6 \u5c06\u56fe\u50cf\u6cbf\u6c34\u5e73\u548c\u7ad6\u76f4\u65b9\u5411\u79fb\u52a8\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002 \\[ \\left\\{ \\begin{matrix} x^{'}=x+x_0 \\\\ y^{'}=y+y_0 \\end{matrix} \\right. \\] \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} 1 & 0 & x_0 \\\\ 0 & 1 & y_0 \\\\ 0 & 0 & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \u5e73\u79fb\u540e\u7684\u666f\u7269\u4e0e\u539f\u56fe\u50cf\u76f8\u540c\uff0c\u4f46\u201c\u753b\u5e03\u201d\u4e00\u5b9a\u662f\u6269\u5927\u4e86\uff0c\u5426\u5219\u5c31\u4f1a\u4e22\u5931\u4fe1\u606f\u3002 Mirror \u00b6 \u7ed5x\u8f74\u6216y\u8f74\u7ffb\u8f6c\uff0c\u4ece\u800c\u4ea7\u751f\u4e0e\u539f\u56fe\u50cf\u5bf9\u79f0\u7684\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b: \\(\\left\\{ \\begin{matrix} x^{'}=x \\\\ y^{'}=-y \\end{matrix} \\right.\\) \u7ed5x\u8f74\u6216y\u8f74\u7ffb\u8f6c\uff0c\u4ece\u800c\u4ea7\u751f\u4e0e\u539f\u56fe\u50cf\u5bf9\u79f0\u7684\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b: \\(\\left\\{ \\begin{matrix} x^{'}=-x \\\\ y^{'}=y \\end{matrix} \\right.\\) \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} s_x & 0 & 0 \\\\ 0 & s_y & 0 \\\\ 0 & 0 & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} \\cos\\theta & -\\sin\\theta & 0 \\\\ \\sin\\theta & \\cos\\theta & 0 \\\\ 0 & 0 & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \u5f53 \\(S_x = 1\\) \uff0c\u4e14 \\(S_y = -1\\) \u65f6\u5b9e\u73b0\u7ed5x\u8f74\u7684\u955c\u50cf\u53d8\u6362 \u5f53 \\(S_x = -1\\) \uff0c\u4e14 \\(S_y = 1\\) \u65f6\u5b9e\u73b0\u7ed5y\u8f74\u7684\u955c\u50cf\u53d8\u6362 Rotation \u00b6 \u7ed5\u539f\u70b9\u65cb\u8f6c \\(\\theta\\) \u89d2\uff0c\u5f97\u5230\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b \\[ \\left\\{ \\begin{matrix} x^{'}=x\\cos\\theta - y\\sin\\theta\\\\ y^{'}=x\\sin\\theta + y\\cos\\theta \\end{matrix} \\right. \\] \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} \\cos\\theta & 0 & x_0 \\\\ 0 & 1 & y_0 \\\\ 0 & 0 & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] Example \u56db\u820d\u4e94\u5165/\u4fdd\u7559\u539f\u6765\u80cc\u666f\u989c\u8272\uff08\u7a7a\u767d\uff09 \u7a7a\u6d1e\u95ee\u9898\uff0c\u56fe\u50cf\u7ecf\u8fc7\u65cb\u8f6c\u53d8\u6362\u4ee5\u540e\uff0c\u65b0\u56fe\u50cf\u4e2d\u4f1a\u51fa\u73b0\u8bb8\u591a\u7a7a\u6d1e\uff0c\u9700\u8981\u63d2\u5165 \u89e3\u51b3\uff1a \u7528\u63d2\u503c\u65b9\u6cd5\u586b\u8865\u3002 \u884c\u63d2\u503c\u2014\u2014\u6309\u987a\u5e8f\u5bfb\u627e\u6bcf\u4e00\u884c\u4e2d\u7684\u7a7a\u6d1e\u50cf\u7d20\uff0c\u8bbe\u7f6e\u5176\u50cf\u7d20\u503c\u4e0e\u540c\u4e00\u884c\u4e2d\u524d\u4e00\u4e2a\u50cf\u7d20\u7684\u50cf\u7d20\u503c\u76f8\u540c\u3002 \u8fd8\u53ef\u4ee5\u7f29\u653e\u3002 Scale \u00b6 \u5c06\u56fe\u50cf\u4e58\u4ee5\u4e00\u5b9a\u7cfb\u6570\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002 \\[ \\left\\{ \\begin{matrix} x^{'}=cx\\\\ y^{'}=dy \\end{matrix} \\right. \\] \u6216\u8005\u7528\u77e9\u9635\u8868\u793a\u4e3a \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} c & 0 & 0 \\\\ 0 & d & 0 \\\\ 0 & 0 & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \u6cbfx\u8f74\u65b9\u5411\u7f29\u653ec\u500d\uff08c>1\u65f6\u4e3a\u653e\u5927\uff0c0<c<1\u65f6\u4e3a\u7f29\u5c0f\uff09\uff1b\u6cbfy\u8f74\u65b9\u5411\u7f29\u653ed\u500d\uff08d>1\u65f6\u4e3a\u653e\u5927\uff0c0<d<1\u65f6\u4e3a\u7f29\u5c0f\uff09\u3002 \u5f53 \\(c=d\\) \u65f6\uff0c\u56fe\u50cf\u7b49\u6bd4\u7f29\u653e\uff1b\u5426\u5219\u4e3a\u975e\u7b49\u6bd4\u7f29\u653e\uff0c\u5bfc\u81f4\u56fe\u50cf\u53d8\u5f62\u3002 \u7f29\u5c0f\u2014\u2014\u6309\u4e00\u5b9a\u95f4\u9694\u9009\u53d6\u67d0\u4e9b\u884c\u548c\u5217\u7684\u50cf\u7d20\u6784\u6210\u7f29\u5c0f\u540e\u7684\u65b0\u56fe\u50cf\uff1b \u653e\u5927\u2014\u2014\u65b0\u56fe\u50cf\u51fa\u73b0\u7a7a\u884c\u548c\u7a7a\u5217\uff0c\u53ef\u91c7\u7528\u63d2\u503c\u7684\u65b9\u6cd5\u52a0\u4ee5\u586b\u8865\uff0c\u4f46\u5b58\u5728\u201c\u9a6c\u8d5b\u514b\u201d\u73b0\u8c61\u3002 e.g. Shear \u00b6 \u56fe\u50cf\u7684\u9519\u5207\u53d8\u6362\u5b9e\u9645\u4e0a\u662f\u666f\u7269\u5728\u5e73\u9762\u4e0a\u7684\u975e\u5782\u76f4\u6295\u5f71\u6548\u679c\u3002 \u5047\u8bbe\u526a\u5207\u53d8\u6362\u7684\u53c2\u6570\u4e3a \\(d_x\\) \u6216\u8005 \\(d_y\\) \uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u6570\u5b66\u516c\u5f0f\u8868\u73b0\u4e3a Shear on x-axis: \\(\\left\\{ \\begin{matrix} a(x,y)=x+d_xy\\\\ b(x,y)=y \\end{matrix} \\right.\\) Shear on y-axis: \\(\\left\\{ \\begin{matrix} a(x,y)=x\\\\ b(x,y)=y+d_yx \\end{matrix} \\right.\\) \u4ec5 x \u5750\u6807\u6216 y \u5750\u6807\u53d7\u5230\u526a\u5207\u6216\u8005 x\u3001y \u540c\u65f6\u53d7\u5230\u526a\u5207\u7684\u53d8\u6362\u77e9\u9635\u5206\u522b\u4e3a\uff1a \\[ \\left( \\begin{matrix} 1 & 0 \\\\ d_x & 1 \\end{matrix} \\right) \\left( \\begin{matrix} 1 & d_y \\\\ 0 & 1 \\end{matrix} \\right) \\left( \\begin{matrix} 1 & d_y \\\\ d_x & 1 \\end{matrix} \\right) \\] e.g. Combination \u00b6 \u56fe\u50cf\u7684\u7ec4\u5408\u53d8\u6362\u662f\u5404\u9879\u7b80\u5355\u51e0\u4f55\u53d8\u6362\u7684\u6df7\u5408\u64cd\u4f5c\u3002 \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} a & b & c \\\\ d & e & f \\\\ g & h & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \u53d8\u6362\u77e9\u9635\u662f\u7531\u6784\u6210\u7ec4\u5408\u53d8\u6362\u7684\u5404\u79cd\u7b80\u5355\u53d8\u6362\u7684\u53d8\u6362\u77e9\u9635\u6309 \u4ece\u5de6\u81f3\u53f3 \u7684\u987a\u5e8f\u9010\u6b21\u76f8\u4e58\u4ee5\u540e\u5f97\u5230\u7684\u7ed3\u679c\u3002 \u53d8\u6362\u77e9\u9635\u76f8\u4e58\u65f6\u7684\u987a\u5e8f\u662f\u4e0d\u53ef\u4ee5\u4efb\u610f\u6539\u53d8\u7684 Interpolation \u00b6 \u63d2\u503c\u662f\u51e0\u4f55\u53d8\u6362\u6700\u5e38\u7528\u7684\u5de5\u5177\uff0c\u5229\u7528\u5df2\u77e5\u50cf\u7d20\u503c\uff0c\u91c7\u7528\u4e0d\u540c\u7684\u63d2\u503c\u65b9\u6cd5\uff0c\u53ef\u4ee5\u6a21\u62df\u51fa\u672a\u77e5\u50cf\u7d20\u7684\u50cf\u7d20\u503c\u3002 Nearest neighbor \u00b6 \u6700\u8fd1\u90bb\u63d2\u503c \uff1a\u8f93\u51fa\u50cf\u7d20\u7684\u7070\u5ea6\u503c\u7b49\u4e8e\u79bb\u5b83\u6240\u6620\u5c04\u5230\u7684\u4f4d\u7f6e\u6700\u8fd1\u7684\u8f93\u5165\u50cf\u7d20\u7684\u7070\u5ea6\u503c\u3002 \u8ba1\u7b97\u8fc7\u7a0b\uff1a \u4e3a\u4e86\u8ba1\u7b97\u51e0\u4f55\u53d8\u6362\u540e\u65b0\u56fe\u50cf\u4e2d\u67d0\u4e00\u70b9P\u2019\u5904\u7684\u50cf\u7d20\u503c\uff0c\u53ef\u4ee5\u9996\u5148\u8ba1\u7b97\u8be5\u51e0\u4f55\u53d8\u6362\u7684\u9006\u53d8\u6362\uff0c\u8ba1\u7b97\u51faP\u2019\u6240\u5bf9\u5e94\u7684\u539f\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6eP\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cP\u7684\u4f4d\u7f6e\u4e0d\u53ef\u80fd\u6b63\u597d\u5904\u5728\u539f\u56fe\u50cf\u7684\u67d0\u4e00\u4e2a\u50cf\u7d20\u4f4d\u7f6e\u4e0a\uff08\u5373P\u70b9\u7684\u5750\u6807\u901a\u5e38\u90fd\u4e0d\u4f1a\u6b63\u597d\u662f\u6574\u6570\uff09\u3002\u5bfb\u627e\u4e0eP\u70b9\u6700\u63a5\u8fd1\u7684\u50cf\u7d20Q\uff0c\u628aQ\u70b9\u7684\u50cf\u7d20\u503c\u4f5c\u4e3a\u65b0\u56fe\u50cf\u4e2dP\u2019\u70b9\u7684\u50cf\u7d20\u503c\u3002 \u5f53\u56fe\u50cf\u4e2d\u5305\u542b\u660e\u663e\u7684\u51e0\u4f55\u7ed3\u6784\u65f6\uff0c\u7ed3\u679c\u5c06\u4e0d\u592a\u5149\u6ed1\u8fde\u7eed\uff0c\u4ece\u800c\u5728\u56fe\u50cf\u4e2d\u4ea7\u751f\u4eba\u4e3a\u7684\u75d5\u8ff9\u3002 Linear interpolation \u00b6 \u5728\u4e00\u7ef4\u60c5\u51b5\u4e0b\uff0c\u5df2\u77e5x1\u548cx2\u5904\u7684\u7070\u5ea6\u503c\u5206\u522b\u4e3ag1\u548cg2\uff0c\u5219x3\u5904\u7684\u7070\u5ea6\u503cg3\u4e3a\uff1a \\(g_3=\\dfrac{g_2-g_1}{x_2-x_1}(x_3-x_1)+g_1\\) \u4f46\u6211\u4eec\u56fe\u50cf\u662f\u4e8c\u7ef4\u7684\uff08\u884c\u5217\uff09\uff0c\u56e0\u6b64\u9700\u8981\u4e8c\u7ef4\u63d2\u503c\u3002 \u5728\u4e8c\u7ef4\u60c5\u51b5\u4e0b\uff0c\u79f0\u4e3a\u53cc\u7ebf\u6027\u63d2\u503c\u3002 \u5df2\u77e5\u56fe\u50cf\u7684\u6b63\u65b9\u5f62\u7f51\u683c\u4e0a\u56db\u4e2a\u70b9A\u3001B\u3001C\u3001D\u7684\u7070\u5ea6\uff0c\u6c42P\u70b9\u7684\u7070\u5ea6\u3002 \u5b9a\u4e49\u53cc\u7ebf\u6027\u65b9\u7a0b \\(g(x,y)=ax+by+cxy+d\\) \u5206\u522b\u5c06A\u3001B\u3001C\u3001D\u56db\u70b9\u7684\u4f4d\u7f6e\u548c\u7070\u5ea6\u4ee3\u5165\u65b9\u7a0b\uff0c\u5f97\u5230\u65b9\u7a0b\u7ec4\u3002 \u89e3\u65b9\u7a0b\u7ec4\uff0c\u89e3\u51faa\u3001b\u3001c\u3001d\u56db\u4e2a\u7cfb\u6570\u3002 \u5c06P\u70b9\u7684\u4f4d\u7f6e\u4ee3\u5165\u65b9\u7a0b\uff0c\u5f97\u5230P\u70b9\u7684\u7070\u5ea6\u3002 \u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97. \u5b9e\u9645\u4e2d\u53ef\u4ee5\u5206\u522b\u5728\u884c\u5217\u505a\u4e24\u6b21\u7ebf\u6027\u63d2\u503c\uff0c\u968f\u540e\u518d\u5728\u524d\u4e24\u6b21\u57fa\u7840\u4e0a\u8fdb\u884c\u4e00\u6b21\u7ebf\u6027\u63d2\u503c\u3002 RBF interpolation \u00b6 \\(G(x)=\\sum_{i=1}^n w_iG(c_i)\\) where \\(w_i=\\dfrac{\\phi(|x-c_i|)}{\\sum_{i=1}^n\\phi(|x-c_i|}\\) \u5176\u4e2d \\(x\\) \u53ef\u4ee5\u662f\u4e00\u4e2a\u6807\u91cf\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\u65e2\u53ef\u4ee5\u662f\u4e00\u7ef4\u63d2\u503c\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e8c\u7ef4\u3001\u591a\u7ef4\u63d2\u503c\uff0c\u53d6\u51b3\u4e8e \\(x\\) \u7684\u7ef4\u5ea6\u3002 \u7528\u9f20\u6807\u62d6\uff0c\u79bb\u9f20\u6807\u8d8a\u8fd1\uff0c\u53d7\u5f71\u54cd\u8d8a\u5c0f \u5e38\u7528\u7684\u6838\u51fd\u6570\uff1a Gaussian: \\(\\phi(r)=exp\\{-\\dfrac{e^2}{2\\sigma^2}\\}\\) Multiquadrics: \\(\\phi(r)=\\sqrt{1+\\dfrac{r^2}{\\sigma^2}}\\) Linear: \\(\\phi(r)=r\\) Cubic: \\(\\phi(r)=r^3\\) Thinplate: \\(\\phi(r)=r^2\\ln(r+1)\\) Warp and Morph \u00b6 Warp: \u53ea\u6539\u53d8\u50cf\u7d20\u7684\u4f4d\u7f6e Morph \u4e0d\u4ec5\u6539\u53d8\u4f4d\u7f6e\uff0c\u8fd8\u8981\u6539\u53d8\u989c\u8272 Image Morph \u00b6 \u8fd9\u91cc\u8ba8\u8bba\u7684 Morph \u53d8\u5f62\u4e0d\u540c\u4e8e\u4e00\u822c\u7684\u51e0\u4f55\u53d8\u6362(Warp) Morph \u53d8\u5f62\u6307\u666f\u7269\u7684\u5f62\u4f53\u53d8\u5316\uff0c\u5b83\u662f\u4f7f\u4e00\u5e45\u56fe\u50cf\u9010\u6b65\u53d8\u5316\u5230\u53e6\u4e00\u5e45\u56fe\u50cf\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u8fd9\u662f\u4e00\u79cd\u8f83\u590d\u6742\u7684\u4e8c\u7ef4\u56fe\u50cf\u5904\u7406\uff0c\u9700\u8981\u5bf9\u5404\u50cf\u7d20\u70b9\u7684 \u989c\u8272\u3001\u4f4d\u7f6e \u4f5c\u53d8\u6362\u3002 \u53d8\u5f62\u7684\u8d77\u59cb\u56fe\u50cf\u548c\u7ed3\u675f\u56fe\u50cf\u5206\u522b\u4e3a\u4e24\u5e45\u5173\u952e\u5e27\uff08\u8d77\u59cb\u5e27\u548c\u7ed3\u675f\u5e27\uff09\uff0c\u4ece\u8d77\u59cb\u5f62\u72b6\u53d8\u5316\u5230\u7ed3\u675f\u5f62\u72b6\u7684\u5173\u952e\u5728\u4e8e\u81ea\u52a8\u5730\u751f\u6210\u4e2d\u95f4\u5f62\u72b6\uff0c\u4e5f\u5373\u81ea\u52a8\u751f\u6210\u4e2d\u95f4\u5e27\u3002 \u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5e45\u56fe\u7684\u8f6c\u6362\u4f5c\u9759\u6001\u53d8\u6362\u3002\u4ece\u4e00\u5e45\u56fea\u9010\u6e10\u53d8\u5316\u6210\u7b2c\u4e8c\u5e45\u56feb \u539f\u7406\uff1a\u8ba9\u56fea\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\uff0c\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u50cf\u7d20\u7684\u989c\u8272\u3002 \u65b9\u6cd5\uff1a\u6839\u636e\u53d8\u6362\u7684\u5feb\u6162\uff0c\u8bbe\u7f6e\u76f8\u5e94\u7684\u6b65\u957f\uff0c\u5c06\u56fea\u6bcf\u4e00\u70b9\u7684RGB\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u8c61\u7d20\u7684RGB\u3002\u53ef\u4ee5\u9009\u62e9\u7b49\u6bd4\u6216\u7b49\u5dee\u7684\u65b9\u5f0f\uff0c\u6216\u5176\u5b83\u65b9\u5f0f\u8ba9\uff1a \\(r^a\\rightarrow r^b\\) \u5982\uff1a \\(I_i=I_{begin}+i*\\dfrac{I_{end}-I_{begin}}{n}\\) \u5bf9\u4e8e\u5f69\u8272\u56fe\u50cf\uff0cRGB\u4e09\u8272\u540c\u65f6\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe\u50cf\u3002\u53ef\u4ee5\u5206\u522b\u53d8\u5316\uff0c\u4e5f\u53ef\u8003\u8651RGB\u7684\u76f8\u5bf9\u6bd4\u4f8b\u5173\u7cfb\u540c\u65f6\u53d8\u5316\u3002 \u5bf9\u4e8e\u7070\u5ea6\u56fe\u50cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7b49\u6bd4\u6216\u7b49\u5dee\u7ea7\u6570\u5b9a\u4e49\u6b65\u957f\uff0c\u4f7f\u989c\u8272\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe\u3002 \u5982\u4f55\u9009\u62e9\u5173\u952e\u5e27\uff1a \u9009\u62e9\u4e24\u5e45\u7ed3\u6784\u76f8\u4f3c\u3001\u5927\u5c0f\u76f8\u540c\u7684\u753b\u9762\u4f5c\u4e3a\u8d77\u59cb\u548c\u7ed3\u675f\u5173\u952e\u5e27\uff0c\u8fd9\u6837\u624d\u80fd\u6bd4\u8f83\u5bb9\u6613\u5730\u5b9e\u73b0\u81ea\u7136\u3001\u8fde\u7eed\u7684\u4e2d\u95f4\u53d8\u5f62\u8fc7\u7a0b\u3002\uff08\u5426\u5219\u6548\u679c\u5f88\u5dee\uff09 Morph based on segment \u00b6 \u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u63a7\u5236\u50cf\u7d20\u7684\u79fb\u52a8\u3002\u5229\u7528 RBF \u7684\u601d\u8def\uff0c\u79fb\u52a8\u7ebf\u6bb5\u3002\u8ddd\u79bb\u63a7\u5236\u70b9\u8d8a\u8fd1\uff0c\u79fb\u52a8\u5e45\u5ea6\u8d8a\u76f8\u4f3c\u3002 \u5728\u8d77\u59cb\u548c\u7ed3\u675f\u753b\u9762\u4e0a\u786e\u5b9a\u548c\u52fe\u753b\u51fa\u5404\u90e8\u5206\uff08\u4e3b\u8981\u8f6e\u5ed3\uff09\u7684\u7ed3\u6784\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e5f\u5373\u4ece\u8d77\u59cb\u753b\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\u53d8\u5230\u7ed3\u675f\u753b\u9762\u4e0a\u7684\u53e6\u4e00\u4e2a\u5bf9\u5e94\u70b9\u7684\u4f4d\u7f6e\uff0c\u8fd9\u662f\u53d8\u5f62\u8fd0\u7b97\u6240\u9700\u8981\u7684\u53c2\u6570\u3002\u6839\u636e\u9700\u8981\uff0c\u5bf9\u5e94\u70b9\u7684\u4f4d\u7f6e\u53ef\u4ee5\u4efb\u610f\u79fb\u52a8\u3002\u8c03\u6574\u8d77\u59cb\u5e27\u7684\u5bf9\u5e94\u70b9\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u6a21\u62df\u6444\u50cf\u4e2d\u7684\u955c\u5934\u6e10\u53d8\u6548\u679c\u3002 \u5728\u5404\u70b9\u50cf\u7d20\u5750\u6807\u53d8\u5316\u7684\u540c\u65f6\uff0c\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272RGB\u4e5f\u4e00\u8d77\u4ece\u539f\u56fe\u50cf\u6539\u53d8\u4e3a\u76ee\u6807\u56fe\u50cf\u3002 \u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u63d2\u503c\u7b56\u7565\u8ba1\u7b97\u50cf\u7d20\u4e2d\u95f4\u503c\uff08\u7a7a\u95f4\uff0c\u989c\u8272\uff09 Morph based on grid \u00b6 \u89c6\u70b9\u53d8\u6362 \u5c31\u662f\u6c42\u5728\u89c6\u70b9\u79fb\u52a8\u540e\u539f\u59cb\u56fe\u50cf\u53d8\u6362\u751f\u6210\u7684\u65b0\u89c6\u56fe\u3002 \u5728\u7528\u76f8\u673a\u62cd\u6444\u7269\u4f53\u65f6\uff0c\u4fdd\u6301\u7269\u4f53\u7684\u4f4d\u7f6e\u4e0d\u52a8\uff0c\u800c\u5c06\u76f8\u673a\u79fb\u79bb\u7269\u4f53\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e \u89c6\u70b9\u53d8\u6362 \uff1b \u5982\u679c\u6211\u4eec\u4fdd\u6301\u76f8\u673a\u56fa\u5b9a\u4f4d\u7f6e\uff0c\u5c06\u7269\u4f53\u79fb\u79bb\u76f8\u673a\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e \u6a21\u578b\u8f6c\u6362 \u3002 \u89c6\u70b9\u53d8\u5f62\u8981\u6c42\u5bf9\u7269\u4f53\u6709\u4e09\u7ef4\u5750\u6807\u77e5\u8bc6\u3002 Application \u00b6 Question \u6211\u4eec\u53ef\u4ee5 \\(v_{B'}=v_{B}+v_{A'}-v_A\\) , \u4f46\u8fd9\u6837\u5f97\u5230\u7684\u8868\u60c5\u7ec6\u8282\u4e22\u5931\u4e86\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5148\u4ecb\u7ecd\u4e00\u4e2a\u5149\u7167\u6a21\u578b Lambertian model. Lambertian model \u00b6 \u5047\u8bbe\u7a7a\u95f4\u4e2d m \u70b9\u5149\u6e90\uff0c\u66f2\u9762\u4eae\u5ea6\u5982\u4e0b\uff1a \\(I=\\rho\\sum\\limits_{1\\leq i\\leq m} S_iI_in_i\\cdot l_i\\equiv \\rho E(n)\\) where \\(S_i=\\left\\{\\begin{matrix} 0, cannot\\ be\\ seen \\\\ 1, otherwise\\end{matrix}\\right.\\) \u5176\u4e2d \\(l_i\\) \u7b2c i \u4e2a\u5149\u6e90\u7167\u8fc7\u6765\u7684\u89d2\u5ea6\uff0c \\(n\\) \u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u66f2\u9762\u7684\u6cd5\u5411\u91cf\uff0c\u6240\u4ee5 \\(n\\cdot l_i\\) \u76f8\u5f53\u4e8e\u4f59\u5f26\u5173\u7cfb; \\(I_i\\) \u8868\u793a\u7b2c i \u4e2a\u5149\u6e90\u7684\u4eae\u5ea6\uff1b \\(S_i\\) \u8868\u793a\u66f2\u9762\u80fd\u4e0d\u80fd\u88ab\u7b2c i \u4e2a\u70b9\u5149\u6e90\u7167\u5230; \\(\\rho\\) \u8868\u793a\u66f2\u9762\u7684\u6750\u8d28 Expression ratio image : \\(\\dfrac{I'}{I}=\\dfrac{E(n')}{E(n)}\\) ( \\(\\rho\\) \u4e00\u6837\uff0c\u56e0\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5bf9\u8c61\u53d8\u6362\u524d\u540e\u7684\u6750\u8d28\u662f\u4e00\u6837\u7684) \u7b80\u79f0 ERI ERI \u662f\u56e0\u4e3a\u66f2\u9762\u53d8\u5f62\u6240\u5bfc\u81f4\u7684\u4eae\u5ea6\u7684\u53d8\u5316\uff1b\u4e0d\u4f9d\u8d56\u4e8e\u6750\u8d28\u7684\u3002 \u5047\u8bbe\u5728\u5bf9\u5e94\u7684\u70b9\u90fd\u6709\u76f8\u540c\u7684\u6cd5\u5411\u91cf\uff0c\u6750\u8d28\u4e0d\u540c\uff0c\u76f8\u540c\u7684\u5f62\u53d8 Before deform After deform Surface 1 \\(I_1=\\rho_1E(n)\\) \\(I_1^{'}=\\rho_1E(n')\\) Surface 2 \\(I_2=\\rho_2E(n)\\) \\(I_2^{'}=\\rho_2E(n')\\) \u4e8e\u662f\u521a\u521a\u7684\u95ee\u9898\u8f6c\u53d8\u4e3a\uff1a\uff08\u5047\u8bbe\u4eba\u8138\u6709\u8fd1\u4f3c\u76f8\u540c\u7684\u6cd5\u5411\u91cf\uff09 Neutral Expression Person A \\(I_a=\\rho_aE(n)\\) \\(I_a^{'}=\\rho_aE(n')\\) Person B \\(I_b=\\rho_bE(n)\\) \\(I_b^{'}=?\\) \u7531\u521a\u521a\u7684\u63a8\u5bfc\u53ef\u5f97 \\(I_b^{'}=\\dfrac{I_a^{'}}{I_a}I_b\\) Algorithm: mark feature points \u5bf9\u6bcf\u4e00\u4e2a\u7279\u5f81\u70b9 \\(v_b\\) in B, warp it: \\(v_{b'}=v_b+v_{a'}-v_a\\) , \u4ee4 \\(B_g\\) \u662f B \u53d8\u5f62\u540e\u7684\u56fe\u50cf \u7528 \\(B_g\\) \u5bf9\u9f50 A A' \u76f4\u5230\u6bcf\u4e2a\u50cf\u7d20\u90fd\u80fd\u627e\u5230\u53e6\u5916\u4e24\u79cd\u56fe\u50cf\u4e0a\u7684\u5bf9\u5e94\u70b9 \u8ba1\u7b97 ratio image \\(\\dfrac{A'}{A}\\) \\(B' = \\dfrac{A'}{A} \\cdot B_g\\) \u5982\u4f55\u627e\u50cf\u7d20\u7684 coreespondence \u901a\u8fc7\u56fe\u50cf\u5bf9\u9f50\uff0c\u624b\u5de5\u6807\u8bb0\u7279\u5f81\u70b9\u540e\u8fdb\u884c\u53c2\u6570\u5316\u3002","title":"\u51e0\u4f55\u53d8\u6362"},{"location":"dip/dip5/#geometric-transform","text":"Abstract Simple geometric transform Interpolation Warp and morph Application \u5229\u7528\u53d8\u6362\u51fd\u6570\u6539\u53d8\u56fe\u50cf\u4e2d\u50cf\u7d20\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002 \u51e0\u4f55\u53d8\u6362\u4e0d\u6539\u53d8\u50cf\u7d20\u503c\uff0c\u800c\u662f\u6539\u53d8\u50cf\u7d20\u6240\u5728\u7684\u4f4d\u7f6e\u3002 Example \\(g(x,y)=f(x^{'},y^{'})=f[a(x,y),b(x,y)]\\) \\(f(x,y)\\) \u8868\u793a\u8f93\u5165\u56fe\u50cf\uff0c \\(g(x,y)\\) \u8868\u793a\u8f93\u51fa\u56fe\u50cf\u3002\u51fd\u6570 \\(a(x,y)\\) \u548c \\(b(x,y)\\) \u552f\u4e00\u5730\u63cf\u8ff0\u4e86\u7a7a\u95f4\u53d8\u6362\u3002 \u51e0\u4f55\u53d8\u6362\u6839\u636e\u96be\u6613\u7a0b\u5ea6\u901a\u5e38\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4e24\u7c7b\uff1a \u7b80\u5355\u53d8\u6362 \u2014\u2014\u53d8\u6362\u8fc7\u7a0b\uff08\u5404\u4e2a\u50cf\u7d20\u53d8\u6362\u524d\u540e\u7684\u4f4d\u7f6e\uff09\u4ee5\u53ca\u53d8\u6362\u53c2\u6570\u53ef\u77e5\u65f6\u7684\u53d8\u6362\uff0c\u5982\u56fe\u50cf\u7684 \u5e73\u79fb\u3001\u955c\u50cf\u3001\u8f6c\u7f6e\u3001\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u9519\u5207\u53d8\u6362 \u7b49\u3002 \u4e00\u822c\u53d8\u6362 \u2014\u2014\u53d8\u6362\u8fc7\u7a0b\u4e0d\u662f\u4e00\u76ee\u4e86\u7136\uff0c\u53d8\u6362\u53c2\u6570\u96be\u4ee5\u6d4b\u91cf\u65f6\u7684\u53d8\u6362\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u56fe\u50cf\u7578\u53d8\u8fdb\u884c\u6821\u6b63\u65f6\uff0c\u9700\u8981\u7528\u5230\u8f83\u4e3a\u590d\u6742\u7684\u53d8\u6362\u516c\u5f0f\u3002","title":"Geometric transform"},{"location":"dip/dip5/#simple-geometric-transform","text":"","title":"Simple geometric transform"},{"location":"dip/dip5/#translation","text":"\u5c06\u56fe\u50cf\u6cbf\u6c34\u5e73\u548c\u7ad6\u76f4\u65b9\u5411\u79fb\u52a8\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002 \\[ \\left\\{ \\begin{matrix} x^{'}=x+x_0 \\\\ y^{'}=y+y_0 \\end{matrix} \\right. \\] \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} 1 & 0 & x_0 \\\\ 0 & 1 & y_0 \\\\ 0 & 0 & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \u5e73\u79fb\u540e\u7684\u666f\u7269\u4e0e\u539f\u56fe\u50cf\u76f8\u540c\uff0c\u4f46\u201c\u753b\u5e03\u201d\u4e00\u5b9a\u662f\u6269\u5927\u4e86\uff0c\u5426\u5219\u5c31\u4f1a\u4e22\u5931\u4fe1\u606f\u3002","title":"Translation"},{"location":"dip/dip5/#mirror","text":"\u7ed5x\u8f74\u6216y\u8f74\u7ffb\u8f6c\uff0c\u4ece\u800c\u4ea7\u751f\u4e0e\u539f\u56fe\u50cf\u5bf9\u79f0\u7684\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b: \\(\\left\\{ \\begin{matrix} x^{'}=x \\\\ y^{'}=-y \\end{matrix} \\right.\\) \u7ed5x\u8f74\u6216y\u8f74\u7ffb\u8f6c\uff0c\u4ece\u800c\u4ea7\u751f\u4e0e\u539f\u56fe\u50cf\u5bf9\u79f0\u7684\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b: \\(\\left\\{ \\begin{matrix} x^{'}=-x \\\\ y^{'}=y \\end{matrix} \\right.\\) \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} s_x & 0 & 0 \\\\ 0 & s_y & 0 \\\\ 0 & 0 & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} \\cos\\theta & -\\sin\\theta & 0 \\\\ \\sin\\theta & \\cos\\theta & 0 \\\\ 0 & 0 & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \u5f53 \\(S_x = 1\\) \uff0c\u4e14 \\(S_y = -1\\) \u65f6\u5b9e\u73b0\u7ed5x\u8f74\u7684\u955c\u50cf\u53d8\u6362 \u5f53 \\(S_x = -1\\) \uff0c\u4e14 \\(S_y = 1\\) \u65f6\u5b9e\u73b0\u7ed5y\u8f74\u7684\u955c\u50cf\u53d8\u6362","title":"Mirror"},{"location":"dip/dip5/#rotation","text":"\u7ed5\u539f\u70b9\u65cb\u8f6c \\(\\theta\\) \u89d2\uff0c\u5f97\u5230\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b \\[ \\left\\{ \\begin{matrix} x^{'}=x\\cos\\theta - y\\sin\\theta\\\\ y^{'}=x\\sin\\theta + y\\cos\\theta \\end{matrix} \\right. \\] \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} \\cos\\theta & 0 & x_0 \\\\ 0 & 1 & y_0 \\\\ 0 & 0 & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] Example \u56db\u820d\u4e94\u5165/\u4fdd\u7559\u539f\u6765\u80cc\u666f\u989c\u8272\uff08\u7a7a\u767d\uff09 \u7a7a\u6d1e\u95ee\u9898\uff0c\u56fe\u50cf\u7ecf\u8fc7\u65cb\u8f6c\u53d8\u6362\u4ee5\u540e\uff0c\u65b0\u56fe\u50cf\u4e2d\u4f1a\u51fa\u73b0\u8bb8\u591a\u7a7a\u6d1e\uff0c\u9700\u8981\u63d2\u5165 \u89e3\u51b3\uff1a \u7528\u63d2\u503c\u65b9\u6cd5\u586b\u8865\u3002 \u884c\u63d2\u503c\u2014\u2014\u6309\u987a\u5e8f\u5bfb\u627e\u6bcf\u4e00\u884c\u4e2d\u7684\u7a7a\u6d1e\u50cf\u7d20\uff0c\u8bbe\u7f6e\u5176\u50cf\u7d20\u503c\u4e0e\u540c\u4e00\u884c\u4e2d\u524d\u4e00\u4e2a\u50cf\u7d20\u7684\u50cf\u7d20\u503c\u76f8\u540c\u3002 \u8fd8\u53ef\u4ee5\u7f29\u653e\u3002","title":"Rotation"},{"location":"dip/dip5/#scale","text":"\u5c06\u56fe\u50cf\u4e58\u4ee5\u4e00\u5b9a\u7cfb\u6570\uff0c\u4ece\u800c\u4ea7\u751f\u65b0\u56fe\u50cf\u7684\u8fc7\u7a0b\u3002 \\[ \\left\\{ \\begin{matrix} x^{'}=cx\\\\ y^{'}=dy \\end{matrix} \\right. \\] \u6216\u8005\u7528\u77e9\u9635\u8868\u793a\u4e3a \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} c & 0 & 0 \\\\ 0 & d & 0 \\\\ 0 & 0 & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \u6cbfx\u8f74\u65b9\u5411\u7f29\u653ec\u500d\uff08c>1\u65f6\u4e3a\u653e\u5927\uff0c0<c<1\u65f6\u4e3a\u7f29\u5c0f\uff09\uff1b\u6cbfy\u8f74\u65b9\u5411\u7f29\u653ed\u500d\uff08d>1\u65f6\u4e3a\u653e\u5927\uff0c0<d<1\u65f6\u4e3a\u7f29\u5c0f\uff09\u3002 \u5f53 \\(c=d\\) \u65f6\uff0c\u56fe\u50cf\u7b49\u6bd4\u7f29\u653e\uff1b\u5426\u5219\u4e3a\u975e\u7b49\u6bd4\u7f29\u653e\uff0c\u5bfc\u81f4\u56fe\u50cf\u53d8\u5f62\u3002 \u7f29\u5c0f\u2014\u2014\u6309\u4e00\u5b9a\u95f4\u9694\u9009\u53d6\u67d0\u4e9b\u884c\u548c\u5217\u7684\u50cf\u7d20\u6784\u6210\u7f29\u5c0f\u540e\u7684\u65b0\u56fe\u50cf\uff1b \u653e\u5927\u2014\u2014\u65b0\u56fe\u50cf\u51fa\u73b0\u7a7a\u884c\u548c\u7a7a\u5217\uff0c\u53ef\u91c7\u7528\u63d2\u503c\u7684\u65b9\u6cd5\u52a0\u4ee5\u586b\u8865\uff0c\u4f46\u5b58\u5728\u201c\u9a6c\u8d5b\u514b\u201d\u73b0\u8c61\u3002 e.g.","title":"Scale"},{"location":"dip/dip5/#shear","text":"\u56fe\u50cf\u7684\u9519\u5207\u53d8\u6362\u5b9e\u9645\u4e0a\u662f\u666f\u7269\u5728\u5e73\u9762\u4e0a\u7684\u975e\u5782\u76f4\u6295\u5f71\u6548\u679c\u3002 \u5047\u8bbe\u526a\u5207\u53d8\u6362\u7684\u53c2\u6570\u4e3a \\(d_x\\) \u6216\u8005 \\(d_y\\) \uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u6570\u5b66\u516c\u5f0f\u8868\u73b0\u4e3a Shear on x-axis: \\(\\left\\{ \\begin{matrix} a(x,y)=x+d_xy\\\\ b(x,y)=y \\end{matrix} \\right.\\) Shear on y-axis: \\(\\left\\{ \\begin{matrix} a(x,y)=x\\\\ b(x,y)=y+d_yx \\end{matrix} \\right.\\) \u4ec5 x \u5750\u6807\u6216 y \u5750\u6807\u53d7\u5230\u526a\u5207\u6216\u8005 x\u3001y \u540c\u65f6\u53d7\u5230\u526a\u5207\u7684\u53d8\u6362\u77e9\u9635\u5206\u522b\u4e3a\uff1a \\[ \\left( \\begin{matrix} 1 & 0 \\\\ d_x & 1 \\end{matrix} \\right) \\left( \\begin{matrix} 1 & d_y \\\\ 0 & 1 \\end{matrix} \\right) \\left( \\begin{matrix} 1 & d_y \\\\ d_x & 1 \\end{matrix} \\right) \\] e.g.","title":"Shear"},{"location":"dip/dip5/#combination","text":"\u56fe\u50cf\u7684\u7ec4\u5408\u53d8\u6362\u662f\u5404\u9879\u7b80\u5355\u51e0\u4f55\u53d8\u6362\u7684\u6df7\u5408\u64cd\u4f5c\u3002 \\[ \\left[ \\begin{matrix} x^{'}\\\\ y^{'}\\\\ 1 \\end{matrix} \\right]=\\left[ \\begin{matrix} a & b & c \\\\ d & e & f \\\\ g & h & 1 \\end{matrix} \\right] \\left[ \\begin{matrix} x\\\\ y\\\\ 1 \\end{matrix} \\right] \\] \u53d8\u6362\u77e9\u9635\u662f\u7531\u6784\u6210\u7ec4\u5408\u53d8\u6362\u7684\u5404\u79cd\u7b80\u5355\u53d8\u6362\u7684\u53d8\u6362\u77e9\u9635\u6309 \u4ece\u5de6\u81f3\u53f3 \u7684\u987a\u5e8f\u9010\u6b21\u76f8\u4e58\u4ee5\u540e\u5f97\u5230\u7684\u7ed3\u679c\u3002 \u53d8\u6362\u77e9\u9635\u76f8\u4e58\u65f6\u7684\u987a\u5e8f\u662f\u4e0d\u53ef\u4ee5\u4efb\u610f\u6539\u53d8\u7684","title":"Combination"},{"location":"dip/dip5/#interpolation","text":"\u63d2\u503c\u662f\u51e0\u4f55\u53d8\u6362\u6700\u5e38\u7528\u7684\u5de5\u5177\uff0c\u5229\u7528\u5df2\u77e5\u50cf\u7d20\u503c\uff0c\u91c7\u7528\u4e0d\u540c\u7684\u63d2\u503c\u65b9\u6cd5\uff0c\u53ef\u4ee5\u6a21\u62df\u51fa\u672a\u77e5\u50cf\u7d20\u7684\u50cf\u7d20\u503c\u3002","title":"Interpolation"},{"location":"dip/dip5/#nearest-neighbor","text":"\u6700\u8fd1\u90bb\u63d2\u503c \uff1a\u8f93\u51fa\u50cf\u7d20\u7684\u7070\u5ea6\u503c\u7b49\u4e8e\u79bb\u5b83\u6240\u6620\u5c04\u5230\u7684\u4f4d\u7f6e\u6700\u8fd1\u7684\u8f93\u5165\u50cf\u7d20\u7684\u7070\u5ea6\u503c\u3002 \u8ba1\u7b97\u8fc7\u7a0b\uff1a \u4e3a\u4e86\u8ba1\u7b97\u51e0\u4f55\u53d8\u6362\u540e\u65b0\u56fe\u50cf\u4e2d\u67d0\u4e00\u70b9P\u2019\u5904\u7684\u50cf\u7d20\u503c\uff0c\u53ef\u4ee5\u9996\u5148\u8ba1\u7b97\u8be5\u51e0\u4f55\u53d8\u6362\u7684\u9006\u53d8\u6362\uff0c\u8ba1\u7b97\u51faP\u2019\u6240\u5bf9\u5e94\u7684\u539f\u56fe\u50cf\u4e2d\u7684\u4f4d\u7f6eP\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cP\u7684\u4f4d\u7f6e\u4e0d\u53ef\u80fd\u6b63\u597d\u5904\u5728\u539f\u56fe\u50cf\u7684\u67d0\u4e00\u4e2a\u50cf\u7d20\u4f4d\u7f6e\u4e0a\uff08\u5373P\u70b9\u7684\u5750\u6807\u901a\u5e38\u90fd\u4e0d\u4f1a\u6b63\u597d\u662f\u6574\u6570\uff09\u3002\u5bfb\u627e\u4e0eP\u70b9\u6700\u63a5\u8fd1\u7684\u50cf\u7d20Q\uff0c\u628aQ\u70b9\u7684\u50cf\u7d20\u503c\u4f5c\u4e3a\u65b0\u56fe\u50cf\u4e2dP\u2019\u70b9\u7684\u50cf\u7d20\u503c\u3002 \u5f53\u56fe\u50cf\u4e2d\u5305\u542b\u660e\u663e\u7684\u51e0\u4f55\u7ed3\u6784\u65f6\uff0c\u7ed3\u679c\u5c06\u4e0d\u592a\u5149\u6ed1\u8fde\u7eed\uff0c\u4ece\u800c\u5728\u56fe\u50cf\u4e2d\u4ea7\u751f\u4eba\u4e3a\u7684\u75d5\u8ff9\u3002","title":"Nearest neighbor"},{"location":"dip/dip5/#linear-interpolation","text":"\u5728\u4e00\u7ef4\u60c5\u51b5\u4e0b\uff0c\u5df2\u77e5x1\u548cx2\u5904\u7684\u7070\u5ea6\u503c\u5206\u522b\u4e3ag1\u548cg2\uff0c\u5219x3\u5904\u7684\u7070\u5ea6\u503cg3\u4e3a\uff1a \\(g_3=\\dfrac{g_2-g_1}{x_2-x_1}(x_3-x_1)+g_1\\) \u4f46\u6211\u4eec\u56fe\u50cf\u662f\u4e8c\u7ef4\u7684\uff08\u884c\u5217\uff09\uff0c\u56e0\u6b64\u9700\u8981\u4e8c\u7ef4\u63d2\u503c\u3002 \u5728\u4e8c\u7ef4\u60c5\u51b5\u4e0b\uff0c\u79f0\u4e3a\u53cc\u7ebf\u6027\u63d2\u503c\u3002 \u5df2\u77e5\u56fe\u50cf\u7684\u6b63\u65b9\u5f62\u7f51\u683c\u4e0a\u56db\u4e2a\u70b9A\u3001B\u3001C\u3001D\u7684\u7070\u5ea6\uff0c\u6c42P\u70b9\u7684\u7070\u5ea6\u3002 \u5b9a\u4e49\u53cc\u7ebf\u6027\u65b9\u7a0b \\(g(x,y)=ax+by+cxy+d\\) \u5206\u522b\u5c06A\u3001B\u3001C\u3001D\u56db\u70b9\u7684\u4f4d\u7f6e\u548c\u7070\u5ea6\u4ee3\u5165\u65b9\u7a0b\uff0c\u5f97\u5230\u65b9\u7a0b\u7ec4\u3002 \u89e3\u65b9\u7a0b\u7ec4\uff0c\u89e3\u51faa\u3001b\u3001c\u3001d\u56db\u4e2a\u7cfb\u6570\u3002 \u5c06P\u70b9\u7684\u4f4d\u7f6e\u4ee3\u5165\u65b9\u7a0b\uff0c\u5f97\u5230P\u70b9\u7684\u7070\u5ea6\u3002 \u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97. \u5b9e\u9645\u4e2d\u53ef\u4ee5\u5206\u522b\u5728\u884c\u5217\u505a\u4e24\u6b21\u7ebf\u6027\u63d2\u503c\uff0c\u968f\u540e\u518d\u5728\u524d\u4e24\u6b21\u57fa\u7840\u4e0a\u8fdb\u884c\u4e00\u6b21\u7ebf\u6027\u63d2\u503c\u3002","title":"Linear interpolation"},{"location":"dip/dip5/#rbf-interpolation","text":"\\(G(x)=\\sum_{i=1}^n w_iG(c_i)\\) where \\(w_i=\\dfrac{\\phi(|x-c_i|)}{\\sum_{i=1}^n\\phi(|x-c_i|}\\) \u5176\u4e2d \\(x\\) \u53ef\u4ee5\u662f\u4e00\u4e2a\u6807\u91cf\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\u65e2\u53ef\u4ee5\u662f\u4e00\u7ef4\u63d2\u503c\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e8c\u7ef4\u3001\u591a\u7ef4\u63d2\u503c\uff0c\u53d6\u51b3\u4e8e \\(x\\) \u7684\u7ef4\u5ea6\u3002 \u7528\u9f20\u6807\u62d6\uff0c\u79bb\u9f20\u6807\u8d8a\u8fd1\uff0c\u53d7\u5f71\u54cd\u8d8a\u5c0f \u5e38\u7528\u7684\u6838\u51fd\u6570\uff1a Gaussian: \\(\\phi(r)=exp\\{-\\dfrac{e^2}{2\\sigma^2}\\}\\) Multiquadrics: \\(\\phi(r)=\\sqrt{1+\\dfrac{r^2}{\\sigma^2}}\\) Linear: \\(\\phi(r)=r\\) Cubic: \\(\\phi(r)=r^3\\) Thinplate: \\(\\phi(r)=r^2\\ln(r+1)\\)","title":"RBF interpolation"},{"location":"dip/dip5/#warp-and-morph","text":"Warp: \u53ea\u6539\u53d8\u50cf\u7d20\u7684\u4f4d\u7f6e Morph \u4e0d\u4ec5\u6539\u53d8\u4f4d\u7f6e\uff0c\u8fd8\u8981\u6539\u53d8\u989c\u8272","title":"Warp and Morph"},{"location":"dip/dip5/#image-morph","text":"\u8fd9\u91cc\u8ba8\u8bba\u7684 Morph \u53d8\u5f62\u4e0d\u540c\u4e8e\u4e00\u822c\u7684\u51e0\u4f55\u53d8\u6362(Warp) Morph \u53d8\u5f62\u6307\u666f\u7269\u7684\u5f62\u4f53\u53d8\u5316\uff0c\u5b83\u662f\u4f7f\u4e00\u5e45\u56fe\u50cf\u9010\u6b65\u53d8\u5316\u5230\u53e6\u4e00\u5e45\u56fe\u50cf\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u8fd9\u662f\u4e00\u79cd\u8f83\u590d\u6742\u7684\u4e8c\u7ef4\u56fe\u50cf\u5904\u7406\uff0c\u9700\u8981\u5bf9\u5404\u50cf\u7d20\u70b9\u7684 \u989c\u8272\u3001\u4f4d\u7f6e \u4f5c\u53d8\u6362\u3002 \u53d8\u5f62\u7684\u8d77\u59cb\u56fe\u50cf\u548c\u7ed3\u675f\u56fe\u50cf\u5206\u522b\u4e3a\u4e24\u5e45\u5173\u952e\u5e27\uff08\u8d77\u59cb\u5e27\u548c\u7ed3\u675f\u5e27\uff09\uff0c\u4ece\u8d77\u59cb\u5f62\u72b6\u53d8\u5316\u5230\u7ed3\u675f\u5f62\u72b6\u7684\u5173\u952e\u5728\u4e8e\u81ea\u52a8\u5730\u751f\u6210\u4e2d\u95f4\u5f62\u72b6\uff0c\u4e5f\u5373\u81ea\u52a8\u751f\u6210\u4e2d\u95f4\u5e27\u3002 \u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5e45\u56fe\u7684\u8f6c\u6362\u4f5c\u9759\u6001\u53d8\u6362\u3002\u4ece\u4e00\u5e45\u56fea\u9010\u6e10\u53d8\u5316\u6210\u7b2c\u4e8c\u5e45\u56feb \u539f\u7406\uff1a\u8ba9\u56fea\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272\uff0c\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u50cf\u7d20\u7684\u989c\u8272\u3002 \u65b9\u6cd5\uff1a\u6839\u636e\u53d8\u6362\u7684\u5feb\u6162\uff0c\u8bbe\u7f6e\u76f8\u5e94\u7684\u6b65\u957f\uff0c\u5c06\u56fea\u6bcf\u4e00\u70b9\u7684RGB\u9010\u6e10\u53d8\u6210\u56feb\u76f8\u540c\u4f4d\u7f6e\u8c61\u7d20\u7684RGB\u3002\u53ef\u4ee5\u9009\u62e9\u7b49\u6bd4\u6216\u7b49\u5dee\u7684\u65b9\u5f0f\uff0c\u6216\u5176\u5b83\u65b9\u5f0f\u8ba9\uff1a \\(r^a\\rightarrow r^b\\) \u5982\uff1a \\(I_i=I_{begin}+i*\\dfrac{I_{end}-I_{begin}}{n}\\) \u5bf9\u4e8e\u5f69\u8272\u56fe\u50cf\uff0cRGB\u4e09\u8272\u540c\u65f6\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe\u50cf\u3002\u53ef\u4ee5\u5206\u522b\u53d8\u5316\uff0c\u4e5f\u53ef\u8003\u8651RGB\u7684\u76f8\u5bf9\u6bd4\u4f8b\u5173\u7cfb\u540c\u65f6\u53d8\u5316\u3002 \u5bf9\u4e8e\u7070\u5ea6\u56fe\u50cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7b49\u6bd4\u6216\u7b49\u5dee\u7ea7\u6570\u5b9a\u4e49\u6b65\u957f\uff0c\u4f7f\u989c\u8272\u4ece\u539f\u56fe\u53d8\u5230\u76ee\u6807\u56fe\u3002 \u5982\u4f55\u9009\u62e9\u5173\u952e\u5e27\uff1a \u9009\u62e9\u4e24\u5e45\u7ed3\u6784\u76f8\u4f3c\u3001\u5927\u5c0f\u76f8\u540c\u7684\u753b\u9762\u4f5c\u4e3a\u8d77\u59cb\u548c\u7ed3\u675f\u5173\u952e\u5e27\uff0c\u8fd9\u6837\u624d\u80fd\u6bd4\u8f83\u5bb9\u6613\u5730\u5b9e\u73b0\u81ea\u7136\u3001\u8fde\u7eed\u7684\u4e2d\u95f4\u53d8\u5f62\u8fc7\u7a0b\u3002\uff08\u5426\u5219\u6548\u679c\u5f88\u5dee\uff09","title":"Image Morph"},{"location":"dip/dip5/#morph-based-on-segment","text":"\u4ee5\u70b9\u4e3a\u4e2d\u5fc3\u63a7\u5236\u50cf\u7d20\u7684\u79fb\u52a8\u3002\u5229\u7528 RBF \u7684\u601d\u8def\uff0c\u79fb\u52a8\u7ebf\u6bb5\u3002\u8ddd\u79bb\u63a7\u5236\u70b9\u8d8a\u8fd1\uff0c\u79fb\u52a8\u5e45\u5ea6\u8d8a\u76f8\u4f3c\u3002 \u5728\u8d77\u59cb\u548c\u7ed3\u675f\u753b\u9762\u4e0a\u786e\u5b9a\u548c\u52fe\u753b\u51fa\u5404\u90e8\u5206\uff08\u4e3b\u8981\u8f6e\u5ed3\uff09\u7684\u7ed3\u6784\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e5f\u5373\u4ece\u8d77\u59cb\u753b\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\u53d8\u5230\u7ed3\u675f\u753b\u9762\u4e0a\u7684\u53e6\u4e00\u4e2a\u5bf9\u5e94\u70b9\u7684\u4f4d\u7f6e\uff0c\u8fd9\u662f\u53d8\u5f62\u8fd0\u7b97\u6240\u9700\u8981\u7684\u53c2\u6570\u3002\u6839\u636e\u9700\u8981\uff0c\u5bf9\u5e94\u70b9\u7684\u4f4d\u7f6e\u53ef\u4ee5\u4efb\u610f\u79fb\u52a8\u3002\u8c03\u6574\u8d77\u59cb\u5e27\u7684\u5bf9\u5e94\u70b9\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u6a21\u62df\u6444\u50cf\u4e2d\u7684\u955c\u5934\u6e10\u53d8\u6548\u679c\u3002 \u5728\u5404\u70b9\u50cf\u7d20\u5750\u6807\u53d8\u5316\u7684\u540c\u65f6\uff0c\u6bcf\u4e2a\u50cf\u7d20\u7684\u989c\u8272RGB\u4e5f\u4e00\u8d77\u4ece\u539f\u56fe\u50cf\u6539\u53d8\u4e3a\u76ee\u6807\u56fe\u50cf\u3002 \u8fd9\u65f6\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u63d2\u503c\u7b56\u7565\u8ba1\u7b97\u50cf\u7d20\u4e2d\u95f4\u503c\uff08\u7a7a\u95f4\uff0c\u989c\u8272\uff09","title":"Morph based on segment"},{"location":"dip/dip5/#morph-based-on-grid","text":"\u89c6\u70b9\u53d8\u6362 \u5c31\u662f\u6c42\u5728\u89c6\u70b9\u79fb\u52a8\u540e\u539f\u59cb\u56fe\u50cf\u53d8\u6362\u751f\u6210\u7684\u65b0\u89c6\u56fe\u3002 \u5728\u7528\u76f8\u673a\u62cd\u6444\u7269\u4f53\u65f6\uff0c\u4fdd\u6301\u7269\u4f53\u7684\u4f4d\u7f6e\u4e0d\u52a8\uff0c\u800c\u5c06\u76f8\u673a\u79fb\u79bb\u7269\u4f53\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e \u89c6\u70b9\u53d8\u6362 \uff1b \u5982\u679c\u6211\u4eec\u4fdd\u6301\u76f8\u673a\u56fa\u5b9a\u4f4d\u7f6e\uff0c\u5c06\u7269\u4f53\u79fb\u79bb\u76f8\u673a\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e \u6a21\u578b\u8f6c\u6362 \u3002 \u89c6\u70b9\u53d8\u5f62\u8981\u6c42\u5bf9\u7269\u4f53\u6709\u4e09\u7ef4\u5750\u6807\u77e5\u8bc6\u3002","title":"Morph based on grid"},{"location":"dip/dip5/#application","text":"Question \u6211\u4eec\u53ef\u4ee5 \\(v_{B'}=v_{B}+v_{A'}-v_A\\) , \u4f46\u8fd9\u6837\u5f97\u5230\u7684\u8868\u60c5\u7ec6\u8282\u4e22\u5931\u4e86\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5148\u4ecb\u7ecd\u4e00\u4e2a\u5149\u7167\u6a21\u578b Lambertian model.","title":"Application"},{"location":"dip/dip5/#lambertian-model","text":"\u5047\u8bbe\u7a7a\u95f4\u4e2d m \u70b9\u5149\u6e90\uff0c\u66f2\u9762\u4eae\u5ea6\u5982\u4e0b\uff1a \\(I=\\rho\\sum\\limits_{1\\leq i\\leq m} S_iI_in_i\\cdot l_i\\equiv \\rho E(n)\\) where \\(S_i=\\left\\{\\begin{matrix} 0, cannot\\ be\\ seen \\\\ 1, otherwise\\end{matrix}\\right.\\) \u5176\u4e2d \\(l_i\\) \u7b2c i \u4e2a\u5149\u6e90\u7167\u8fc7\u6765\u7684\u89d2\u5ea6\uff0c \\(n\\) \u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u66f2\u9762\u7684\u6cd5\u5411\u91cf\uff0c\u6240\u4ee5 \\(n\\cdot l_i\\) \u76f8\u5f53\u4e8e\u4f59\u5f26\u5173\u7cfb; \\(I_i\\) \u8868\u793a\u7b2c i \u4e2a\u5149\u6e90\u7684\u4eae\u5ea6\uff1b \\(S_i\\) \u8868\u793a\u66f2\u9762\u80fd\u4e0d\u80fd\u88ab\u7b2c i \u4e2a\u70b9\u5149\u6e90\u7167\u5230; \\(\\rho\\) \u8868\u793a\u66f2\u9762\u7684\u6750\u8d28 Expression ratio image : \\(\\dfrac{I'}{I}=\\dfrac{E(n')}{E(n)}\\) ( \\(\\rho\\) \u4e00\u6837\uff0c\u56e0\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5bf9\u8c61\u53d8\u6362\u524d\u540e\u7684\u6750\u8d28\u662f\u4e00\u6837\u7684) \u7b80\u79f0 ERI ERI \u662f\u56e0\u4e3a\u66f2\u9762\u53d8\u5f62\u6240\u5bfc\u81f4\u7684\u4eae\u5ea6\u7684\u53d8\u5316\uff1b\u4e0d\u4f9d\u8d56\u4e8e\u6750\u8d28\u7684\u3002 \u5047\u8bbe\u5728\u5bf9\u5e94\u7684\u70b9\u90fd\u6709\u76f8\u540c\u7684\u6cd5\u5411\u91cf\uff0c\u6750\u8d28\u4e0d\u540c\uff0c\u76f8\u540c\u7684\u5f62\u53d8 Before deform After deform Surface 1 \\(I_1=\\rho_1E(n)\\) \\(I_1^{'}=\\rho_1E(n')\\) Surface 2 \\(I_2=\\rho_2E(n)\\) \\(I_2^{'}=\\rho_2E(n')\\) \u4e8e\u662f\u521a\u521a\u7684\u95ee\u9898\u8f6c\u53d8\u4e3a\uff1a\uff08\u5047\u8bbe\u4eba\u8138\u6709\u8fd1\u4f3c\u76f8\u540c\u7684\u6cd5\u5411\u91cf\uff09 Neutral Expression Person A \\(I_a=\\rho_aE(n)\\) \\(I_a^{'}=\\rho_aE(n')\\) Person B \\(I_b=\\rho_bE(n)\\) \\(I_b^{'}=?\\) \u7531\u521a\u521a\u7684\u63a8\u5bfc\u53ef\u5f97 \\(I_b^{'}=\\dfrac{I_a^{'}}{I_a}I_b\\) Algorithm: mark feature points \u5bf9\u6bcf\u4e00\u4e2a\u7279\u5f81\u70b9 \\(v_b\\) in B, warp it: \\(v_{b'}=v_b+v_{a'}-v_a\\) , \u4ee4 \\(B_g\\) \u662f B \u53d8\u5f62\u540e\u7684\u56fe\u50cf \u7528 \\(B_g\\) \u5bf9\u9f50 A A' \u76f4\u5230\u6bcf\u4e2a\u50cf\u7d20\u90fd\u80fd\u627e\u5230\u53e6\u5916\u4e24\u79cd\u56fe\u50cf\u4e0a\u7684\u5bf9\u5e94\u70b9 \u8ba1\u7b97 ratio image \\(\\dfrac{A'}{A}\\) \\(B' = \\dfrac{A'}{A} \\cdot B_g\\) \u5982\u4f55\u627e\u50cf\u7d20\u7684 coreespondence \u901a\u8fc7\u56fe\u50cf\u5bf9\u9f50\uff0c\u624b\u5de5\u6807\u8bb0\u7279\u5f81\u70b9\u540e\u8fdb\u884c\u53c2\u6570\u5316\u3002","title":"Lambertian model"},{"location":"dip/dip6/","text":"Convolution and Filtering \u00b6 Abstract Continuous 1D convolution Properties of convolution Discrete 1D convolution Spatial domain filtering 1D Convolution \u00b6 Definition \u00b6 \u4e00\u7ef4\u5377\u79ef \u4e24\u4e2a\u4e00\u7ef4\u8fde\u7eed\u51fd\u6570 \\(f(x)\\) \u548c \\(h(x)\\) \u7684\u5377\u79ef \\(g(x)\\) \u4e3a \\(g(x)=f(x)*h(x)=\\int_{-\\infty}^{\\infty}f(t)h(x-t)dt\\) \u5b83\u8868\u793a\u4e24\u4e2a\u51fd\u6570\u7684\u5377\u79ef\u53ef\u4ee5\u8f6c\u5316\u6210\u4e58\u79ef\u7684\u79ef\u5206\u6765\u8ba1\u7b97\u3002\u901a\u5e38\u5c06 \\(f(x)\\) \u79f0\u4e3a\u8f93\u5165\u51fd\u6570\uff0c\u5c06 \\(h(x)\\) \u79f0\u4e3a\u5377\u79ef\u51fd\u6570\u3002 Computing process \u00b6 \u5df2\u77e5\u4e24\u4e2a\u51fd\u6570\uff0c\u8981\u6c42\u8ba1\u7b97\u5b83\u4eec\u7684\u5377\u79ef\u5728\u4efb\u610f\u70b9x\u5904\u7684\u503c\u3002 \u5c06\u5377\u79ef\u51fd\u6570 \\(h(t)\\) \u53cd\u6298 \u5c06\u53cd\u6298\u540e\u7684\u5377\u79ef\u51fd\u6570\u5411\u53f3\u79fb\u52a8\u8ddd\u79bb \\(x\\) \u8ba1\u7b97 f \u548c h \u5728\u4efb\u610f t \u7684\u4e58\u79ef\uff0c\u5e76\u79ef\u5206 \u5bf9\u6bcf\u4e00\u4e2a \\(x\\) \u503c\u91cd\u590d\u4e0a\u8ff0\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5c31\u5f97\u5230\u4e86\u8f93\u51fa\u66f2\u7ebf \\(g(x)\\) \u5f53 \\(x\\) \u53d8\u5316\u65f6\uff0c\u53cd\u6298\u7684\u51fd\u6570\u88ab\u5e73\u79fb\u901a\u8fc7\u9759\u6b62\u4e0d\u52a8\u7684\u8f93\u5165\u51fd\u6570, \\(g(x)\\) \u503c\u53d6\u51b3\u4e8e\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u91cd\u53e0\u90e8\u5206\u7684\u7d2f\u79ef\u3002 Property \u00b6 Exchangeable : \\(f(x)*g(x)=g(x)*f(x)\\) Distributive : \\(f*(g+h)=f*g+f*h\\) Associative : \\(f*(g*h)=(f*g)*h\\) Discrete 1D convolution \u00b6 \u5bf9\u4e8e\u79bb\u6563\u5e8f\u5217\uff0c\u5176\u5377\u79ef\u53ef\u7528\u4e0e\u8fde\u7eed\u51fd\u6570\u76f8\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6c42\u5f97\u3002\u6b64\u65f6\u81ea\u53d8\u91cf\u53d8\u4e3a\u4e0b\u6807\uff0c\u9762\u79ef\u5219\u7531\u6c42\u548c\u4ee3\u66ff\u3002 \u5bf9\u4e8e\u4e24\u4e2a\u957f\u5ea6\u5747\u4e3a M \u7684\u5e8f\u5217 \\(f(x)\\) \u548c \\(h(x)\\) \uff0c\u5176\u5377\u79ef\u4e3a: \\(h(x)=f(x)*h(x)=\\dfrac{1}{M}=\\sum\\limits_{t=0}^{M-1}f(t)h(x-t)\\) \u6709\u6548\u8303\u56f4\uff1a\u8986\u76d6\u4e86\u6240\u6709 \\(h(t)\\) \u7684\u70b9\u3002 e.g. \u5377\u79ef\u5b9e\u8d28\u4e0a\u662f\u5bf9\u56fe\u50cf\u50cf\u7d20\u7684\u52a0\u6743\u6c42\u548c Spatial filtering \u00b6 Concept \u00b6 \u6ee4\u6ce2\u5668\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(M\\times N\\) \u7684\u7a97\u53e3\uff0c\u7a97\u53e3\u4e2d\u7684\u5143\u7d20\u4e0e\u539f\u56fe\u50cf\u7684\u5904\u4e8e\u7a97\u53e3\u5185\u7684\u50cf\u7d20\u8fdb\u884c\u67d0\u79cd\u8fd0\u7b97\uff0c\u7ed3\u679c\u4f5c\u4e3a\u65b0\u56fe\u50cf\u7684\u4e00\u4e2a\u50cf\u7d20\u3002\u5f53\u7a97\u53e3\u6ed1\u8fc7\u539f\u56fe\u50cf\u5e76\u5b8c\u6210\u4e0a\u8ff0\u8fd0\u7b97\u4e4b\u540e\uff0c\u5c31\u80fd\u591f\u5f97\u5230\u4e00\u5e45\u65b0\u56fe\u50cf\u3002\uff08\u672c\u8d28\u5c31\u662f\u521a\u521a\u7684\u5377\u79ef\uff09 \u6ee4\u6ce2\u5668\u7684\u522b\u540d\uff1a\u6ee4\u6ce2\u5668\u3001\u63a9\u6a21\u3001\u6838\u3001\u6a21\u677f\uff0c\u7a97\u53e3 \u6ee4\u6ce2\u5668\u5b50\u56fe\u50cf\u4e2d\u7684\u503c\u662f\u7cfb\u6570\u503c\uff0c\u800c\u4e0d\u662f\u50cf\u7d20\u503c\uff0c\u5b83\u4ee3\u8868\u4e86\u5f71\u54cd\u65b0\u50cf\u7d20\u4ea7\u751f\u7684\u6743\u91cd\u3002 \u5377\u79ef\u548c\u5f62\u6001\u5b66\u4e2d\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff1a\u8fb9\u754c\u5982\u4f55\u5904\u7406\uff0c\u53ef\u4ee5\u6269\u5c55\u884c\u5217\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06\u4e2d\u5fc3\u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u3002 Procedure \u00b6 \u5728\u5f85\u5904\u7406\u56fe\u50cf\u4e2d\u9010\u70b9\u79fb\u52a8\u63a9\u6a21\uff0c\u5728\u6bcf\u4e00\u70b9 \\((x,y)\\) \u5904\uff0c\u6ee4\u6ce2\u5668\u5728\u8be5\u70b9\u7684\u54cd\u5e94\u901a\u8fc7\u5b9e\u73b0\u5b9a\u4e49\u7684\u5173\u7cfb\u6765\u8ba1\u7b97\u3002\u5bf9\u4e8e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\uff0c\u5176\u54cd\u5e94\u7531\u6ee4\u6ce2\u5668\u7cfb\u6570\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u626b\u8fc7\u533a\u57df\u7684\u5bf9\u5e94\u50cf\u7d20\u503c\u7684\u4e58\u79ef\u4e4b\u548c\u7ed9\u51fa\u3002 Principle of filtering\u2014\u2014Response \u00b6 \u54cd\u5e94\u503c: \\(R=w(-1,-1)f(x-1,y-1)+w(-1,0)f(x-1, y)+\\ldots +w(0,0)f(x,y)+\\ldots+w(1,0)f(x+1,y)+w(1,1)f(x+1,y)\\) \u8fd9\u5b9e\u8d28\u4e0a\u662f\u4e00\u79cd\u5377\u79ef\u64cd\u4f5c\uff0c\u5377\u79ef\u8868\u793a\u4e3a: \\(h(x)=f(x)*h(x)=\\dfrac{1}{M}=\\sum\\limits_{t=0}^{M-1}f(t)h(x-t)\\) \u901a\u5e38\uff0c\u63a9\u6a21\u7684\u957f\u5bbd\u90fd\u4e3a\u5947\u6570\u3002\u5047\u8bbe\u5206\u522b\u4e3a \\(2a+1\\) \u548c \\(2b+1\\) . \u5f53\u7a97\u53e3\u4e2d\u5fc3\u5904\u4e8e\u50cf\u7d20 \\((x,y)\\) \u5904\u65f6\uff0c\u65b0\u7684\u50cf\u7d20\u503c\u4e3a\uff1a \u5bf9\u56fe\u50cf \\(f\\) \u4e2d\u6240\u6709\u50cf\u7d20\u90fd\u4e0e\u63a9\u6a21\u8fdb\u884c\u8fd0\u7b97\u4e4b\u540e\uff0c\u6700\u7ec8\u4ea7\u751f\u4e00\u5e45\u65b0\u56fe\u50cf \\(g\\) . \\(g(x,y)=\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^b w(s,t)f(x+s,y+t)\\) \u5373 \\(R=w_1z_1+w_2z_2+\\cdots+w_{mn}z_{mn}=\\sum\\limits_{i=1}^m w_iz_i\\) \u56fe\u50cf\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u4f20\u8f93\u4fe1\u9053\u3001\u91c7\u6837\u7cfb\u7edf\u8d28\u91cf\u8f83\u5dee\uff0c\u6216\u53d7\u5404\u79cd\u5e72\u6270\u7684\u5f71\u54cd\uff0c\u800c\u9020\u6210\u56fe\u50cf\u6bdb\u7cd9\uff0c\u6b64\u65f6\uff0c\u5c31\u9700\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\u3002\u5e73\u6ed1\u53ef\u4ee5\u6291\u5236\u9ad8\u9891\u6210\u5206\uff0c\u4f46\u4e5f\u4f7f\u56fe\u50cf\u53d8\u5f97\u6a21\u7cca\u3002 Spatial filtering for smoothing \u00b6 \u5e73\u6ed1\u7a7a\u95f4\u6ee4\u6ce2\u5668 \uff08\u4e5f\u53eb\u4f4e\u901a\u6ee4\u6ce2\uff0c\u56e0\u4e3a\u5e73\u6ed1\u7684\u90e8\u5206\u4e00\u822c\u662f\u4f4e\u9891\u7684\uff09\u7528\u4e8e\u6a21\u7cca\u5904\u7406\u548c\u51cf\u5c11\u566a\u58f0\u3002\u6a21\u7cca\u5904\u7406\u7ecf\u5e38\u7528\u4e8e\u9884\u5904\u7406\uff0c\u4f8b\u5982\uff0c\u5728\u63d0\u53d6\u5927\u7684\u76ee\u6807\u4e4b\u524d\u53bb\u9664\u56fe\u50cf\u4e2d\u4e00\u4e9b\u7410\u788e\u7684\u7ec6\u8282\uff0c\u6865\u63a5\u76f4\u7ebf\u6216\u66f2\u7ebf\u7684\u7f1d\u9699\u3002 \u53ef\u4ee5\u53bb\u6389\u566a\u58f0\uff0c\u4f46\u4f1a\u4f7f\u56fe\u6a21\u7cca\uff0c\u4e00\u822c\u7528\u4e8e\u9884\u5904\u7406\u3002 Linear smoothing filter \u00b6 \u5e73\u6ed1\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5668 \u7684\u8f93\u51fa\u662f\u5305\u542b\u5728\u6ee4\u6ce2\u63a9\u6a21\u90bb\u57df\u5185\u50cf\u7d20\u7684\u7b80\u5355\u5e73\u5747\u503c\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u6ee4\u6ce2\u5668\u4e5f\u79f0\u4e3a \u5747\u503c\u6ee4\u6ce2\u5668 \u3002 \u5747\u503c\u6ee4\u6ce2\u5668\u7684\u4e3b\u8981\u5e94\u7528\u662f\u53bb\u9664\u56fe\u50cf\u4e2d\u7684\u4e0d\u76f8\u5e72\u7ec6\u8282\uff0c\u5373\u90a3\u4e9b\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u5c3a\u5bf8\u76f8\u6bd4\u66f4\u5c0f\u7684\u50cf\u7d20\u533a\u57df\u3002 \u7b80\u5355\u5e73\u5747\uff0c\u8868\u793a\u7a97\u53e3\u4e2d\u6bcf\u4e00\u4e2a\u50cf\u7d20\u5bf9\u54cd\u5e94\u7684\u8d21\u732e\u662f\u4e00\u6837\u7684 \u52a0\u6743\u5e73\u5747\uff0c\u8868\u793a\u7a97\u53e3\u4e2d\u7684\u50cf\u7d20\u5bf9\u76f8\u5e94\u7684\u8d21\u732e\u6709\u5927\u5c0f\u4e4b\u5206\u3002 \u4e24\u4e2a3\u00d73\u5e73\u6ed1\uff08\u5747\u503c\uff09\u6ee4\u6ce2\u5668\u63a9\u6a21\uff0c\u6bcf\u4e2a\u63a9\u6a21\u524d\u8fb9\u7684\u4e58\u6570\u7b49\u4e8e\u5b83\u7684\u7cfb\u6570\u503c\u7684\u548c\uff0c\u4ee5\u8ba1\u7b97\u5e73\u5747\u503c Example \u8fd9\u6837\u4e2d\u95f4\u50cf\u7d20\u80fd\u66f4\u591a\u5730\u88ab\u4fdd\u7559\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u9ad8\u65af\u51fd\u6570\u3002 \\(g(x,y)=\\dfrac{\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^bw(s,t)f(x+s,y+t)}{\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^b w(s,t)}\\) \u5176\u4e2d\uff0c\u6ee4\u6ce2\u5668\u5927\u5c0f\u4e3a \\((2a+1) \\times (2b+1)\\) \uff0c \\(w\\) \u4e3a\u6ee4\u6ce2\u5668\uff0c \\(f\\) \u4e3a\u8f93\u5165\u56fe\u50cf\uff0c \\(g\\) \u4e3a\u8f93\u51fa\u56fe\u50cf\u3002 \u6ee4\u6ce2\u63a9\u6a21\u7684\u5927\u5c0f\u4e0e\u56fe\u50cf\u7684\u5e73\u6ed1\u6548\u679c\u6709\u76f4\u63a5\u7684\u5173\u7cfb\u3002\u5f53\u63a9\u6a21\u6bd4\u8f83\u5c0f\u65f6\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u5728\u6574\u5e45\u56fe\u50cf\u4e2d\u6709\u8f7b\u5fae\u7684\u6a21\u7cca\uff0c\u5f53\u63a9\u6a21\u5927\u5c0f\u589e\u52a0\uff0c\u6a21\u7cca\u7a0b\u5ea6\u4e5f\u968f\u4e4b\u589e\u52a0\u3002 \u5377\u79ef\u6838\u8d8a\u5927\uff0c\u56fe\u8d8a\u6a21\u7cca\uff0c\u4fdd\u7559\u7684\u7ec6\u8282\u8d8a\u5c11\uff08\u7c7b\u4f3c\u7167\u76f8\u673a\u7684\u5149\u5708\uff09 \u4e3a\u4e86\u5bf9\u611f\u5174\u8da3\u7269\u4f53\u5f97\u5230\u4e00\u4e2a\u7c97\u7565\u7684\u63cf\u8ff0\u800c\u6a21\u7cca\u4e00\u5e45\u56fe\u50cf\uff0c\u8fd9\u6837\uff0c\u90a3\u4e9b\u8f83\u5c0f\u7269\u4f53\u7684\u5f3a\u5ea6\u4e0e\u80cc\u666f\u6df7\u5408\u5728\u4e00\u8d77\u4e86\uff0c\u8f83\u5927\u7269\u4f53\u53d8\u5f97\u50cf\u201c\u6591\u70b9\u201d\u800c\u6613\u4e8e\u68c0\u6d4b\u3002\u63a9\u6a21\u7684\u5927\u5c0f\u7531\u90a3\u4e9b\u5373\u5c06\u878d\u5165\u80cc\u666f\u4e2d\u53bb\u7684\u7269\u4ef6\u5c3a\u5bf8\u6765\u51b3\u5b9a\u3002 Statistical sorting filter \u00b6 \u7edf\u8ba1\u6ee4\u6ce2\u5668 \u662f\u4e00\u79cd\u975e\u7ebf\u6027\u7684\u7a7a\u95f4\u6ee4\u6ce2\u5668\uff0c\u5b83\u7684\u54cd\u5e94\u662f\u57fa\u4e8e\u7a97\u53e3\u5185\u56fe\u50cf\u533a\u57df\u4e2d\u50cf\u7d20\u503c\u7684\u6392\u5e8f\uff0c\u7531\u7edf\u8ba1\u6392\u5e8f\u7ed3\u679c\u51b3\u5b9a\u7684\u503c\u4ee3\u66ff\u4e2d\u5fc3\u50cf\u7d20\u7684\u503c\u3002(\u6bcf\u6b21\u90fd\u8981\u6392\u5e8f\uff0c\u56e0\u6b64\u8ba1\u7b97\u901f\u5ea6\u6bd4\u7ebf\u6027\u6ee4\u6ce2\u6162) \u7edf\u8ba1\u6ee4\u6ce2\u5668\u4e2d\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f \u4e2d\u503c\u6ee4\u6ce2\u5668 \u3002 \u7528\u50cf\u7d20\u90bb\u57df\u5185\u7070\u5ea6\u7684\u4e2d\u503c\u4ee3\u66ff\u8be5\u50cf\u7d20\u7684\u503c\u3002 \u63d0\u4f9b\u4e86\u4f18\u79c0\u7684\u53bb\u566a\u80fd\u529b\uff0c\u6bd4\u5c0f\u5c3a\u5bf8\u7684\u7ebf\u6027\u5e73\u6ed1\u6ee4\u6ce2\u5668\u7684\u6a21\u7cca\u7a0b\u5ea6\u660e\u663e\u8981\u4f4e\u3002 \u5bf9\u5904\u7406\u8109\u51b2\u566a\u58f0\uff08\u4e5f\u79f0\u4e3a\u6912\u76d0\u566a\u58f0\uff09\u975e\u5e38\u6709\u6548\uff0c\u56e0\u4e3a\u8fd9\u79cd\u566a\u58f0\u662f\u4ee5\u9ed1\u767d\u70b9\u53e0\u52a0\u5728\u56fe\u50cf\u4e0a\u7684\u3002 \u4e3a\u4e86\u5bf9\u4e00\u5e45\u56fe\u50cf\u4e0a\u7684\u67d0\u4e2a\u70b9\u4f5c\u4e2d\u503c\u6ee4\u6ce2\u5904\u7406\u3002\u5fc5\u987b\u5148\u5c06\u63a9\u6a21\u5185\u6b32\u6c42\u7684\u50cf\u7d20\u53ca\u5176\u90bb\u57df\u7684\u50cf\u7d20\u503c\u6392\u5e8f\uff0c\u786e\u5b9a\u51fa\u4e2d\u503c\uff0c\u5e76\u5c06\u4e2d\u503c\u8d4b\u4e88\u8be5\u50cf\u7d20\u70b9\u3002 \u5e38\u7528 \\(n\\times n\\) \u7684\u4e2d\u503c\u6ee4\u6ce2\u5668\u53bb\u9664\u90a3\u4e9b\u76f8\u5bf9\u4e8e\u5176\u90bb\u57df\u50cf\u7d20\u66f4\u4eae\u6216\u66f4\u6697\uff0c\u5e76\u4e14\u5176\u533a\u57df\u5c0f\u4e8e \\(n^2/2\\) \uff08\u6ee4\u6ce2\u5668\u533a\u57df\u7684\u4e00\u534a\uff09\u7684\u5b64\u7acb\u50cf\u7d20\u96c6\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u6709\u5229\u4e8e\u7a81\u51fa\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u6216\u8005\u589e\u5f3a\u88ab\u6a21\u7cca\u4e86\u7684\u7ec6\u8282\u3002 Sharpening spatial filter \u00b6 \u5fae\u5206\u7b97\u5b50\u662f\u5b9e\u73b0\u9510\u5316\u7684\u5de5\u5177\uff0c\u5176\u54cd\u5e94\u7a0b\u5ea6\u4e0e\u56fe\u50cf\u5728\u8be5\u70b9\u5904\u7684\u7a81\u53d8\u7a0b\u5ea6\u6709\u5173\u3002\u5fae\u5206\u7b97\u5b50\u589e\u5f3a\u4e86\u8fb9\u7f18\u548c\u5176\u4ed6\u7a81\u53d8\uff08\u5982\u566a\u58f0\uff09\u5e76\u524a\u5f31\u4e86\u7070\u5ea6\u53d8\u5316\u7f13\u6162\u7684\u533a\u57df\u3002 \u57fa\u4e8e\u4e8c\u9636\u5fae\u5206\u7684\u56fe\u50cf\u589e\u5f3a\u2014\u2014 \u62c9\u666e\u62c9\u65af\u7b97\u5b50 \u57fa\u4e8e\u4e00\u9636\u5fae\u5206\u7684\u56fe\u50cf\u589e\u5f3a\u2014\u2014 \u68af\u5ea6\u6cd5 \u5bf9\u4e8e\u4e00\u4e2a\u6574\u6570\u503c\u51fd\u6570 \\(f(x)\\) \u6765\u8bf4\uff0c\u6211\u4eec\u4f7f\u7528\u5dee\u5206\u6765\u8868\u793a\u5fae\u5206\u7b97\u5b50\uff1a \\[\\dfrac{\\partial f}{\\partial x}=f(x+1)-f(x)\\] \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e8c\u9636\u5fae\u5206\u5199\u6210\u8fd9\u6837\uff1a \\[\\dfrac{\\partial^2 f}{\\partial x^2}=f(x+1)+f(x-1)-2f(x)\\] gradient based operator \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570 \\(f(x,y)\\) \u6765\u8bf4\uff0c\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u7684\u5411\u91cf\uff1a \\[ \\nabla f=\\left[\\dfrac{G_x}{G_y}\\right]=\\left[\\dfrac{\\dfrac{\\partial f}{\\partial x}}{\\dfrac{\\partial f}{\\partial y}}\\right] \\] \u5b83\u7684\u5e45\u503c(Magnitude)\u88ab\u8868\u793a\u4e3a\uff1a \\[ \\nabla f = (G_x^2+G_y^2)^{\\frac{1}{2}}=\\left[(\\dfrac{\\partial f}{\\partial x})^2 + (\\dfrac{\\partial f}{\\partial y})^2\\right]^{\\frac{1}{2}} \\] \u5f53\u5bf9\u6574\u5e45\u56fe\u50cf\u8ba1\u7b97\u68af\u5ea6\u65f6\uff0c\u8fd0\u7b97\u91cf\u4f1a\u5f88\u5927\uff0c\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u5e38\u7528\u7edd\u5bf9\u503c\u4ee3\u66ff\u5e73\u65b9\u4e0e\u5e73\u65b9\u6839\u8fd0\u7b97\u8fd1\u4f3c\u6c42\u68af\u5ea6\u7684\u6a21\u503c \\[\\nabla f\\approx |G_x|+|G_y|\\] \u53e6\u4e00\u79cd\u8ba1\u7b97\u65b9\u6cd5: Robert \u4ea4\u53c9\u68af\u5ea6\u7b97\u5b50 Laplacian operator \u00b6 \u5bf9\u51fd\u6570 \\(f(x, y)\\) \uff0c\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5b9a\u4e49\u5982\u4e0b(\u548c\u68af\u5ea6\u4e0d\u540c\uff0c\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u662f\u4e00\u4e2a\u6807\u91cf) \\[ \\nabla^2 f=\\dfrac{\\partial^2 f}{\\partial x^2}+\\dfrac{\\partial^2 f}{\\partial y^2} \\] \u4e24\u4e2a\u53d8\u91cf\u7684\u79bb\u6563\u62c9\u666e\u62c9\u65af\u51fd\u6570\u662f: \\[ \\nabla^2 f(x,y)=f(x+1,y)+f(x-1,y)+f(x,y+1)+f(x,y-1)-4f(x,y) \\] \u76f8\u5f53\u4e8e\u7528\u8fd9\u4e2a\u5377\u79ef\u6838\u5bf9\u56fe\u50cf\u505a\u5377\u79ef\uff08\u8fd9\u4e2a\u5377\u79ef\u6838\u662f\u5404\u5411\u540c\u6027\u7684\uff0c rotation-invariant \uff09 \u5bf9\u89d2\u7ebf\u4e0a\u7684\u5143\u7d20\u4e5f\u53ef\u4ee5\u8003\u8651\u8fdb\u6765\u8bbe\u8ba1\u63a9\u819c\uff1a \\[ \\begin{align*} \\nabla^2 f(x,y) & =f(x-1,y-1)+f(x,y-1)+f(x+1,y-1)+f(x-1,y) f(x+1,y)+f(x-1,y+1)+f(x,y+1)+f(x+1,y+1)-8f(x,y) \\\\ & = \\sum\\limits_{i=-1}^1\\sum\\limits_{j=-1}^1 f(x+i,y+j)-9f(x,y) \\end{align*} \\] \u53cd\u8fc7\u6765 \u5f53\u62c9\u666e\u62c9\u65af\u6ee4\u6ce2\u540e\u7684\u56fe\u50cf\u4e0e\u5176\u5b83\u56fe\u50cf\u5408\u5e76\u65f6\uff08\u76f8\u52a0\u6216\u76f8\u51cf\uff09\uff0c\u5219\u5fc5\u987b\u8003\u8651\u7b26\u53f7\u4e0a\u7684\u5dee\u522b\u3002 Application \u5c06\u539f\u59cb\u56fe\u50cf\u548c\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u53e0\u52a0\u5728\u4e00\u8d77\u7684\u7b80\u5355\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u62c9\u666e\u62c9\u65af\u9510\u5316\u5904\u7406\u7684\u6548\u679c\uff0c\u540c\u65f6\u53c8\u80fd\u590d\u539f\u80cc\u666f\u4fe1\u606f\u3002 \\[ g(x,y)=\\left\\{\\begin{matrix}f(x,y)-\\nabla^2f(x,y), If\\ the\\ center\\ of\\ the\\ mask\\ is\\ negative \\\\ f(x,y)+\\nabla^2f(x,y), If\\ the\\ center\\ of\\ the\\ mask\\ is\\ positive \\end{matrix} \\right. \\] Laplacian Example Bilateral Filtering \u00b6 \u4fdd\u8fb9\u6ee4\u6ce2(edge-preserving)\u7684\u4e00\u79cd Bilateral filtering Example \u76ee\u6807\uff1a\u56fe\u50cf\u7684\u5e73\u6ed1\uff0c\u4f46\u8981\u628a large-scale \u7684\u7ed3\u6784\u4fdd\u7559, small-scale \u7684\u7eb9\u8def\u62b9\u6389\u3002 space domain S, \u8868\u793a\u50cf\u7d20\u53ef\u80fd\u7684\u4f4d\u7f6e(\u9ad8\u65af\u6ee4\u6ce2\u4e3b\u8981\u8003\u8651\u7684) intensity domain R, \u50cf\u7d20\u53ef\u80fd\u7684\u7070\u5ea6\u503c \u60f3\u6cd5: \u6bcf\u4e2a\u6837\u672c\u90fd\u88ab\u5468\u56f4\u7684\u52a0\u6743\u5e73\u5747\u66ff\u4ee3 \u6743\u91cd\u8981\u540c\u65f6\u53cd\u6620\u8ddd\u79bb\u4e2d\u5fc3\u50cf\u7d20\u7684\u8fdc\u8fd1\uff0c\u4ee5\u53ca\u50cf\u7d20\u503c\u548c\u4e2d\u5fc3\u50cf\u7d20\u503c\u7684\u76f8\u4f3c\u5ea6 Review of Gaussian Blur \\[ GB[I]_p=\\sum\\limits_{q\\in S}G_\\sigma (||p-q||)I_q \\] \u5f53 G \u6ee1\u8db3\u9ad8\u65af\u5206\u5e03\u65f6\uff1a \u8fd9\u91cc\u7684 \\(\\sigma\\) \u662f\u6211\u4eec\u9009\u53d6\u7a97\u53e3\u7684\u5927\u5c0f\u3002\u5982\u4f55\u8bbe\u7f6e \\(\\sigma\\) ? \u6839\u636e\u7ecf\u9a8c\uff0c\u901a\u5e38\u7684\u7b56\u7565\u662f\u662f\u8bbe\u7f6e\u4e3a\u56fe\u50cf\u5927\u5c0f\u7684\u4e00\u4e2a\u6bd4\u4f8b\uff0c\u5982 2%. \u53ef\u4ee5\u8d77\u5230\u5e73\u6ed1\u6548\u679c\uff0c\u4f46\u4f1a\u4f7f\u56fe\u50cf\u6a21\u7cca\uff0c\u56e0\u4e3a\u53ea\u8003\u8651\u4e86\u8ddd\u79bb\u56e0\u7d20\u3002 \\[ BF[I]_p=\\dfrac{1}{W_p}\\sum\\limits_{q\\in S}G_{\\sigma_s} (||p-q||)G_{\\sigma_r} (|I_p-I_q|)I_q \\] \\(\\dfrac{1}{W_p}\\) \u5f52\u4e00\u5316\u56e0\u5b50 \\(G_{\\sigma_s} (||p-q||)\\) \u7a7a\u95f4(spatial)\u7684\u6743\u91cd\uff0c\u548c\u9ad8\u65af\u6ee4\u6ce2\u4e2d\u76f8\u540c( \\(\\sigma_s\\) \u8868\u793a\u6838\u7684\u7a7a\u95f4\u8303\u56f4) \\(G_{\\sigma_r} (|I_p-I_q|)\\) \u7070\u5ea6(range)\u7684\u6743\u91cd(\u6ce8\u610f\u8fd9\u91cc\u53ea\u662f\u4e00\u8303\u5f0f\u800c\u975e\u4e8c\u8303\u5f0f\uff0c\u56e0\u4e3a\u7070\u5ea6\u53ea\u662f\u6807\u91cf)( \\(\\sigma_r\\) \u8868\u793a\u7070\u5ea6\u7684\u8303\u56f4) \u8303\u56f4\u53d8\u5316\u5bf9\u56fe\u50cf\u7684\u5f71\u54cd \u5982\u4f55\u8bbe\u7f6e\u53c2\u6570: intensity proportional to edge amplitude(\u5bf9\u6bcf\u4e00\u4e2a\u5c0f\u7a97\u53e3\u90fd\u9700\u8981\u91cd\u65b0\u8ba1\u7b97 \\(\\sigma_r\\) ) \u53ef\u4ee5\u53cd\u590d\u5728\u4e00\u5f20\u56fe\u50cf\u4e0a\u505a\u53cc\u8fb9\u6ee4\u6ce2\uff0c \\(I_{(n+1)}=BF[I_{(n)}]\\) \u82e5\u5728\u5f69\u8272\u56fe\u4e0a\u505a\u53cc\u8fb9\u6ee4\u6ce2\uff0c\u53ea\u9700\u8981\u5c06\u5f0f\u5b50\u6539\u4e3a \\[ BF[I]_p=\\dfrac{1}{W_p}\\sum\\limits_{q\\in S}G_{\\sigma_s} (||p-q||)G_{\\sigma_r} (|||C_p-C_q|||)I_q \\] \u5176\u4e2d \\(|||C_p-C_q|||\\) \u662f\u4e09\u7ef4\u5411\u91cf(RGB/Lab) \u7684\u6b27\u6c0f\u8ddd\u79bb Denoising \u00b6 \u8f83\u5c0f\u7684\u7a7a\u95f4 \\(\\sigma_s\\) \u6839\u636e\u566a\u58f0\u6c34\u5e73\u8c03\u6574 \\(\\sigma_r\\) \u53ef\u80fd\u4e0d\u662f\u6700\u597d\u7684\u53bb\u566a\u65b9\u6cd5\uff0c\u4f46\u80fd\u505a\u597d\u7b80\u6d01\u6027\u548c\u6548\u679c\u7684 tradeoff Tone mapping \u00b6 \u5c06\u771f\u5b9e\u4e16\u754c\u7684 \u8f93\u5165: HDR Image(high-dynamic-range) 32 \u4f4d\u56fe\u50cf\uff0c\u591a\u51fa\u6765\u7684 8 \u4f4d\u79f0\u4e3a\u963f\u5c14\u6cd5\u901a\u9053\uff0c\u5373\u900f\u660e\u5ea6\u3002\u6bcf\u4e2a\u50cf\u7d20\u662f\u6d6e\u70b9\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u589e\u52a0\u8303\u56f4\u3002 \u4ece 1:10000 \u538b\u5230 1:100\uff1f \u51cf\u5c11\u4f4e\u9891\uff0c\u4f46\u53ef\u80fd\u4f1a\u51fa\u73b0\u68af\u5ea6\u9006\u8f6c(halo) Brute-force problem \u66b4\u529b\u5b9e\u73b0\u53cc\u8fb9\u6ee4\u6ce2\u7684\u65f6\u95f4\u53ef\u80fd\u4f1a\u975e\u5e38\u6162\uff0c\u56e0\u4e3a\u4ed6\u662f\u975e\u7ebf\u6027\u7684\uff0c\u800c\u4e14\u6bcf\u4e2a\u6838\u90fd\u4e0d\u4e00\u6837\uff0c\u4e0d\u80fd\u63d0\u524d\u7b97\u51fa","title":"\u5377\u79ef\u4e0e\u6ee4\u6ce2"},{"location":"dip/dip6/#convolution-and-filtering","text":"Abstract Continuous 1D convolution Properties of convolution Discrete 1D convolution Spatial domain filtering","title":"Convolution and Filtering"},{"location":"dip/dip6/#1d-convolution","text":"","title":"1D Convolution"},{"location":"dip/dip6/#definition","text":"\u4e00\u7ef4\u5377\u79ef \u4e24\u4e2a\u4e00\u7ef4\u8fde\u7eed\u51fd\u6570 \\(f(x)\\) \u548c \\(h(x)\\) \u7684\u5377\u79ef \\(g(x)\\) \u4e3a \\(g(x)=f(x)*h(x)=\\int_{-\\infty}^{\\infty}f(t)h(x-t)dt\\) \u5b83\u8868\u793a\u4e24\u4e2a\u51fd\u6570\u7684\u5377\u79ef\u53ef\u4ee5\u8f6c\u5316\u6210\u4e58\u79ef\u7684\u79ef\u5206\u6765\u8ba1\u7b97\u3002\u901a\u5e38\u5c06 \\(f(x)\\) \u79f0\u4e3a\u8f93\u5165\u51fd\u6570\uff0c\u5c06 \\(h(x)\\) \u79f0\u4e3a\u5377\u79ef\u51fd\u6570\u3002","title":"Definition"},{"location":"dip/dip6/#computing-process","text":"\u5df2\u77e5\u4e24\u4e2a\u51fd\u6570\uff0c\u8981\u6c42\u8ba1\u7b97\u5b83\u4eec\u7684\u5377\u79ef\u5728\u4efb\u610f\u70b9x\u5904\u7684\u503c\u3002 \u5c06\u5377\u79ef\u51fd\u6570 \\(h(t)\\) \u53cd\u6298 \u5c06\u53cd\u6298\u540e\u7684\u5377\u79ef\u51fd\u6570\u5411\u53f3\u79fb\u52a8\u8ddd\u79bb \\(x\\) \u8ba1\u7b97 f \u548c h \u5728\u4efb\u610f t \u7684\u4e58\u79ef\uff0c\u5e76\u79ef\u5206 \u5bf9\u6bcf\u4e00\u4e2a \\(x\\) \u503c\u91cd\u590d\u4e0a\u8ff0\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u5c31\u5f97\u5230\u4e86\u8f93\u51fa\u66f2\u7ebf \\(g(x)\\) \u5f53 \\(x\\) \u53d8\u5316\u65f6\uff0c\u53cd\u6298\u7684\u51fd\u6570\u88ab\u5e73\u79fb\u901a\u8fc7\u9759\u6b62\u4e0d\u52a8\u7684\u8f93\u5165\u51fd\u6570, \\(g(x)\\) \u503c\u53d6\u51b3\u4e8e\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u91cd\u53e0\u90e8\u5206\u7684\u7d2f\u79ef\u3002","title":"Computing process"},{"location":"dip/dip6/#property","text":"Exchangeable : \\(f(x)*g(x)=g(x)*f(x)\\) Distributive : \\(f*(g+h)=f*g+f*h\\) Associative : \\(f*(g*h)=(f*g)*h\\)","title":"Property"},{"location":"dip/dip6/#discrete-1d-convolution","text":"\u5bf9\u4e8e\u79bb\u6563\u5e8f\u5217\uff0c\u5176\u5377\u79ef\u53ef\u7528\u4e0e\u8fde\u7eed\u51fd\u6570\u76f8\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6c42\u5f97\u3002\u6b64\u65f6\u81ea\u53d8\u91cf\u53d8\u4e3a\u4e0b\u6807\uff0c\u9762\u79ef\u5219\u7531\u6c42\u548c\u4ee3\u66ff\u3002 \u5bf9\u4e8e\u4e24\u4e2a\u957f\u5ea6\u5747\u4e3a M \u7684\u5e8f\u5217 \\(f(x)\\) \u548c \\(h(x)\\) \uff0c\u5176\u5377\u79ef\u4e3a: \\(h(x)=f(x)*h(x)=\\dfrac{1}{M}=\\sum\\limits_{t=0}^{M-1}f(t)h(x-t)\\) \u6709\u6548\u8303\u56f4\uff1a\u8986\u76d6\u4e86\u6240\u6709 \\(h(t)\\) \u7684\u70b9\u3002 e.g. \u5377\u79ef\u5b9e\u8d28\u4e0a\u662f\u5bf9\u56fe\u50cf\u50cf\u7d20\u7684\u52a0\u6743\u6c42\u548c","title":"Discrete 1D convolution"},{"location":"dip/dip6/#spatial-filtering","text":"","title":"Spatial filtering"},{"location":"dip/dip6/#concept","text":"\u6ee4\u6ce2\u5668\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(M\\times N\\) \u7684\u7a97\u53e3\uff0c\u7a97\u53e3\u4e2d\u7684\u5143\u7d20\u4e0e\u539f\u56fe\u50cf\u7684\u5904\u4e8e\u7a97\u53e3\u5185\u7684\u50cf\u7d20\u8fdb\u884c\u67d0\u79cd\u8fd0\u7b97\uff0c\u7ed3\u679c\u4f5c\u4e3a\u65b0\u56fe\u50cf\u7684\u4e00\u4e2a\u50cf\u7d20\u3002\u5f53\u7a97\u53e3\u6ed1\u8fc7\u539f\u56fe\u50cf\u5e76\u5b8c\u6210\u4e0a\u8ff0\u8fd0\u7b97\u4e4b\u540e\uff0c\u5c31\u80fd\u591f\u5f97\u5230\u4e00\u5e45\u65b0\u56fe\u50cf\u3002\uff08\u672c\u8d28\u5c31\u662f\u521a\u521a\u7684\u5377\u79ef\uff09 \u6ee4\u6ce2\u5668\u7684\u522b\u540d\uff1a\u6ee4\u6ce2\u5668\u3001\u63a9\u6a21\u3001\u6838\u3001\u6a21\u677f\uff0c\u7a97\u53e3 \u6ee4\u6ce2\u5668\u5b50\u56fe\u50cf\u4e2d\u7684\u503c\u662f\u7cfb\u6570\u503c\uff0c\u800c\u4e0d\u662f\u50cf\u7d20\u503c\uff0c\u5b83\u4ee3\u8868\u4e86\u5f71\u54cd\u65b0\u50cf\u7d20\u4ea7\u751f\u7684\u6743\u91cd\u3002 \u5377\u79ef\u548c\u5f62\u6001\u5b66\u4e2d\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\uff1a\u8fb9\u754c\u5982\u4f55\u5904\u7406\uff0c\u53ef\u4ee5\u6269\u5c55\u884c\u5217\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06\u4e2d\u5fc3\u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u3002","title":"Concept"},{"location":"dip/dip6/#procedure","text":"\u5728\u5f85\u5904\u7406\u56fe\u50cf\u4e2d\u9010\u70b9\u79fb\u52a8\u63a9\u6a21\uff0c\u5728\u6bcf\u4e00\u70b9 \\((x,y)\\) \u5904\uff0c\u6ee4\u6ce2\u5668\u5728\u8be5\u70b9\u7684\u54cd\u5e94\u901a\u8fc7\u5b9e\u73b0\u5b9a\u4e49\u7684\u5173\u7cfb\u6765\u8ba1\u7b97\u3002\u5bf9\u4e8e\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\uff0c\u5176\u54cd\u5e94\u7531\u6ee4\u6ce2\u5668\u7cfb\u6570\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u626b\u8fc7\u533a\u57df\u7684\u5bf9\u5e94\u50cf\u7d20\u503c\u7684\u4e58\u79ef\u4e4b\u548c\u7ed9\u51fa\u3002","title":"Procedure"},{"location":"dip/dip6/#principle-of-filteringresponse","text":"\u54cd\u5e94\u503c: \\(R=w(-1,-1)f(x-1,y-1)+w(-1,0)f(x-1, y)+\\ldots +w(0,0)f(x,y)+\\ldots+w(1,0)f(x+1,y)+w(1,1)f(x+1,y)\\) \u8fd9\u5b9e\u8d28\u4e0a\u662f\u4e00\u79cd\u5377\u79ef\u64cd\u4f5c\uff0c\u5377\u79ef\u8868\u793a\u4e3a: \\(h(x)=f(x)*h(x)=\\dfrac{1}{M}=\\sum\\limits_{t=0}^{M-1}f(t)h(x-t)\\) \u901a\u5e38\uff0c\u63a9\u6a21\u7684\u957f\u5bbd\u90fd\u4e3a\u5947\u6570\u3002\u5047\u8bbe\u5206\u522b\u4e3a \\(2a+1\\) \u548c \\(2b+1\\) . \u5f53\u7a97\u53e3\u4e2d\u5fc3\u5904\u4e8e\u50cf\u7d20 \\((x,y)\\) \u5904\u65f6\uff0c\u65b0\u7684\u50cf\u7d20\u503c\u4e3a\uff1a \u5bf9\u56fe\u50cf \\(f\\) \u4e2d\u6240\u6709\u50cf\u7d20\u90fd\u4e0e\u63a9\u6a21\u8fdb\u884c\u8fd0\u7b97\u4e4b\u540e\uff0c\u6700\u7ec8\u4ea7\u751f\u4e00\u5e45\u65b0\u56fe\u50cf \\(g\\) . \\(g(x,y)=\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^b w(s,t)f(x+s,y+t)\\) \u5373 \\(R=w_1z_1+w_2z_2+\\cdots+w_{mn}z_{mn}=\\sum\\limits_{i=1}^m w_iz_i\\) \u56fe\u50cf\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u4f20\u8f93\u4fe1\u9053\u3001\u91c7\u6837\u7cfb\u7edf\u8d28\u91cf\u8f83\u5dee\uff0c\u6216\u53d7\u5404\u79cd\u5e72\u6270\u7684\u5f71\u54cd\uff0c\u800c\u9020\u6210\u56fe\u50cf\u6bdb\u7cd9\uff0c\u6b64\u65f6\uff0c\u5c31\u9700\u5bf9\u56fe\u50cf\u8fdb\u884c\u5e73\u6ed1\u5904\u7406\u3002\u5e73\u6ed1\u53ef\u4ee5\u6291\u5236\u9ad8\u9891\u6210\u5206\uff0c\u4f46\u4e5f\u4f7f\u56fe\u50cf\u53d8\u5f97\u6a21\u7cca\u3002","title":"Principle of filtering\u2014\u2014Response"},{"location":"dip/dip6/#spatial-filtering-for-smoothing","text":"\u5e73\u6ed1\u7a7a\u95f4\u6ee4\u6ce2\u5668 \uff08\u4e5f\u53eb\u4f4e\u901a\u6ee4\u6ce2\uff0c\u56e0\u4e3a\u5e73\u6ed1\u7684\u90e8\u5206\u4e00\u822c\u662f\u4f4e\u9891\u7684\uff09\u7528\u4e8e\u6a21\u7cca\u5904\u7406\u548c\u51cf\u5c11\u566a\u58f0\u3002\u6a21\u7cca\u5904\u7406\u7ecf\u5e38\u7528\u4e8e\u9884\u5904\u7406\uff0c\u4f8b\u5982\uff0c\u5728\u63d0\u53d6\u5927\u7684\u76ee\u6807\u4e4b\u524d\u53bb\u9664\u56fe\u50cf\u4e2d\u4e00\u4e9b\u7410\u788e\u7684\u7ec6\u8282\uff0c\u6865\u63a5\u76f4\u7ebf\u6216\u66f2\u7ebf\u7684\u7f1d\u9699\u3002 \u53ef\u4ee5\u53bb\u6389\u566a\u58f0\uff0c\u4f46\u4f1a\u4f7f\u56fe\u6a21\u7cca\uff0c\u4e00\u822c\u7528\u4e8e\u9884\u5904\u7406\u3002","title":"Spatial filtering for smoothing"},{"location":"dip/dip6/#linear-smoothing-filter","text":"\u5e73\u6ed1\u7ebf\u6027\u7a7a\u95f4\u6ee4\u6ce2\u5668 \u7684\u8f93\u51fa\u662f\u5305\u542b\u5728\u6ee4\u6ce2\u63a9\u6a21\u90bb\u57df\u5185\u50cf\u7d20\u7684\u7b80\u5355\u5e73\u5747\u503c\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u6ee4\u6ce2\u5668\u4e5f\u79f0\u4e3a \u5747\u503c\u6ee4\u6ce2\u5668 \u3002 \u5747\u503c\u6ee4\u6ce2\u5668\u7684\u4e3b\u8981\u5e94\u7528\u662f\u53bb\u9664\u56fe\u50cf\u4e2d\u7684\u4e0d\u76f8\u5e72\u7ec6\u8282\uff0c\u5373\u90a3\u4e9b\u4e0e\u6ee4\u6ce2\u63a9\u6a21\u5c3a\u5bf8\u76f8\u6bd4\u66f4\u5c0f\u7684\u50cf\u7d20\u533a\u57df\u3002 \u7b80\u5355\u5e73\u5747\uff0c\u8868\u793a\u7a97\u53e3\u4e2d\u6bcf\u4e00\u4e2a\u50cf\u7d20\u5bf9\u54cd\u5e94\u7684\u8d21\u732e\u662f\u4e00\u6837\u7684 \u52a0\u6743\u5e73\u5747\uff0c\u8868\u793a\u7a97\u53e3\u4e2d\u7684\u50cf\u7d20\u5bf9\u76f8\u5e94\u7684\u8d21\u732e\u6709\u5927\u5c0f\u4e4b\u5206\u3002 \u4e24\u4e2a3\u00d73\u5e73\u6ed1\uff08\u5747\u503c\uff09\u6ee4\u6ce2\u5668\u63a9\u6a21\uff0c\u6bcf\u4e2a\u63a9\u6a21\u524d\u8fb9\u7684\u4e58\u6570\u7b49\u4e8e\u5b83\u7684\u7cfb\u6570\u503c\u7684\u548c\uff0c\u4ee5\u8ba1\u7b97\u5e73\u5747\u503c Example \u8fd9\u6837\u4e2d\u95f4\u50cf\u7d20\u80fd\u66f4\u591a\u5730\u88ab\u4fdd\u7559\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u9ad8\u65af\u51fd\u6570\u3002 \\(g(x,y)=\\dfrac{\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^bw(s,t)f(x+s,y+t)}{\\sum\\limits_{s=-a}^a\\sum\\limits_{t=-b}^b w(s,t)}\\) \u5176\u4e2d\uff0c\u6ee4\u6ce2\u5668\u5927\u5c0f\u4e3a \\((2a+1) \\times (2b+1)\\) \uff0c \\(w\\) \u4e3a\u6ee4\u6ce2\u5668\uff0c \\(f\\) \u4e3a\u8f93\u5165\u56fe\u50cf\uff0c \\(g\\) \u4e3a\u8f93\u51fa\u56fe\u50cf\u3002 \u6ee4\u6ce2\u63a9\u6a21\u7684\u5927\u5c0f\u4e0e\u56fe\u50cf\u7684\u5e73\u6ed1\u6548\u679c\u6709\u76f4\u63a5\u7684\u5173\u7cfb\u3002\u5f53\u63a9\u6a21\u6bd4\u8f83\u5c0f\u65f6\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u5728\u6574\u5e45\u56fe\u50cf\u4e2d\u6709\u8f7b\u5fae\u7684\u6a21\u7cca\uff0c\u5f53\u63a9\u6a21\u5927\u5c0f\u589e\u52a0\uff0c\u6a21\u7cca\u7a0b\u5ea6\u4e5f\u968f\u4e4b\u589e\u52a0\u3002 \u5377\u79ef\u6838\u8d8a\u5927\uff0c\u56fe\u8d8a\u6a21\u7cca\uff0c\u4fdd\u7559\u7684\u7ec6\u8282\u8d8a\u5c11\uff08\u7c7b\u4f3c\u7167\u76f8\u673a\u7684\u5149\u5708\uff09 \u4e3a\u4e86\u5bf9\u611f\u5174\u8da3\u7269\u4f53\u5f97\u5230\u4e00\u4e2a\u7c97\u7565\u7684\u63cf\u8ff0\u800c\u6a21\u7cca\u4e00\u5e45\u56fe\u50cf\uff0c\u8fd9\u6837\uff0c\u90a3\u4e9b\u8f83\u5c0f\u7269\u4f53\u7684\u5f3a\u5ea6\u4e0e\u80cc\u666f\u6df7\u5408\u5728\u4e00\u8d77\u4e86\uff0c\u8f83\u5927\u7269\u4f53\u53d8\u5f97\u50cf\u201c\u6591\u70b9\u201d\u800c\u6613\u4e8e\u68c0\u6d4b\u3002\u63a9\u6a21\u7684\u5927\u5c0f\u7531\u90a3\u4e9b\u5373\u5c06\u878d\u5165\u80cc\u666f\u4e2d\u53bb\u7684\u7269\u4ef6\u5c3a\u5bf8\u6765\u51b3\u5b9a\u3002","title":"Linear smoothing filter"},{"location":"dip/dip6/#statistical-sorting-filter","text":"\u7edf\u8ba1\u6ee4\u6ce2\u5668 \u662f\u4e00\u79cd\u975e\u7ebf\u6027\u7684\u7a7a\u95f4\u6ee4\u6ce2\u5668\uff0c\u5b83\u7684\u54cd\u5e94\u662f\u57fa\u4e8e\u7a97\u53e3\u5185\u56fe\u50cf\u533a\u57df\u4e2d\u50cf\u7d20\u503c\u7684\u6392\u5e8f\uff0c\u7531\u7edf\u8ba1\u6392\u5e8f\u7ed3\u679c\u51b3\u5b9a\u7684\u503c\u4ee3\u66ff\u4e2d\u5fc3\u50cf\u7d20\u7684\u503c\u3002(\u6bcf\u6b21\u90fd\u8981\u6392\u5e8f\uff0c\u56e0\u6b64\u8ba1\u7b97\u901f\u5ea6\u6bd4\u7ebf\u6027\u6ee4\u6ce2\u6162) \u7edf\u8ba1\u6ee4\u6ce2\u5668\u4e2d\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f \u4e2d\u503c\u6ee4\u6ce2\u5668 \u3002 \u7528\u50cf\u7d20\u90bb\u57df\u5185\u7070\u5ea6\u7684\u4e2d\u503c\u4ee3\u66ff\u8be5\u50cf\u7d20\u7684\u503c\u3002 \u63d0\u4f9b\u4e86\u4f18\u79c0\u7684\u53bb\u566a\u80fd\u529b\uff0c\u6bd4\u5c0f\u5c3a\u5bf8\u7684\u7ebf\u6027\u5e73\u6ed1\u6ee4\u6ce2\u5668\u7684\u6a21\u7cca\u7a0b\u5ea6\u660e\u663e\u8981\u4f4e\u3002 \u5bf9\u5904\u7406\u8109\u51b2\u566a\u58f0\uff08\u4e5f\u79f0\u4e3a\u6912\u76d0\u566a\u58f0\uff09\u975e\u5e38\u6709\u6548\uff0c\u56e0\u4e3a\u8fd9\u79cd\u566a\u58f0\u662f\u4ee5\u9ed1\u767d\u70b9\u53e0\u52a0\u5728\u56fe\u50cf\u4e0a\u7684\u3002 \u4e3a\u4e86\u5bf9\u4e00\u5e45\u56fe\u50cf\u4e0a\u7684\u67d0\u4e2a\u70b9\u4f5c\u4e2d\u503c\u6ee4\u6ce2\u5904\u7406\u3002\u5fc5\u987b\u5148\u5c06\u63a9\u6a21\u5185\u6b32\u6c42\u7684\u50cf\u7d20\u53ca\u5176\u90bb\u57df\u7684\u50cf\u7d20\u503c\u6392\u5e8f\uff0c\u786e\u5b9a\u51fa\u4e2d\u503c\uff0c\u5e76\u5c06\u4e2d\u503c\u8d4b\u4e88\u8be5\u50cf\u7d20\u70b9\u3002 \u5e38\u7528 \\(n\\times n\\) \u7684\u4e2d\u503c\u6ee4\u6ce2\u5668\u53bb\u9664\u90a3\u4e9b\u76f8\u5bf9\u4e8e\u5176\u90bb\u57df\u50cf\u7d20\u66f4\u4eae\u6216\u66f4\u6697\uff0c\u5e76\u4e14\u5176\u533a\u57df\u5c0f\u4e8e \\(n^2/2\\) \uff08\u6ee4\u6ce2\u5668\u533a\u57df\u7684\u4e00\u534a\uff09\u7684\u5b64\u7acb\u50cf\u7d20\u96c6\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u6709\u5229\u4e8e\u7a81\u51fa\u56fe\u50cf\u4e2d\u7684\u7ec6\u8282\u6216\u8005\u589e\u5f3a\u88ab\u6a21\u7cca\u4e86\u7684\u7ec6\u8282\u3002","title":"Statistical sorting filter"},{"location":"dip/dip6/#sharpening-spatial-filter","text":"\u5fae\u5206\u7b97\u5b50\u662f\u5b9e\u73b0\u9510\u5316\u7684\u5de5\u5177\uff0c\u5176\u54cd\u5e94\u7a0b\u5ea6\u4e0e\u56fe\u50cf\u5728\u8be5\u70b9\u5904\u7684\u7a81\u53d8\u7a0b\u5ea6\u6709\u5173\u3002\u5fae\u5206\u7b97\u5b50\u589e\u5f3a\u4e86\u8fb9\u7f18\u548c\u5176\u4ed6\u7a81\u53d8\uff08\u5982\u566a\u58f0\uff09\u5e76\u524a\u5f31\u4e86\u7070\u5ea6\u53d8\u5316\u7f13\u6162\u7684\u533a\u57df\u3002 \u57fa\u4e8e\u4e8c\u9636\u5fae\u5206\u7684\u56fe\u50cf\u589e\u5f3a\u2014\u2014 \u62c9\u666e\u62c9\u65af\u7b97\u5b50 \u57fa\u4e8e\u4e00\u9636\u5fae\u5206\u7684\u56fe\u50cf\u589e\u5f3a\u2014\u2014 \u68af\u5ea6\u6cd5 \u5bf9\u4e8e\u4e00\u4e2a\u6574\u6570\u503c\u51fd\u6570 \\(f(x)\\) \u6765\u8bf4\uff0c\u6211\u4eec\u4f7f\u7528\u5dee\u5206\u6765\u8868\u793a\u5fae\u5206\u7b97\u5b50\uff1a \\[\\dfrac{\\partial f}{\\partial x}=f(x+1)-f(x)\\] \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e8c\u9636\u5fae\u5206\u5199\u6210\u8fd9\u6837\uff1a \\[\\dfrac{\\partial^2 f}{\\partial x^2}=f(x+1)+f(x-1)-2f(x)\\]","title":"Sharpening spatial filter"},{"location":"dip/dip6/#gradient-based-operator","text":"\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570 \\(f(x,y)\\) \u6765\u8bf4\uff0c\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u7684\u5411\u91cf\uff1a \\[ \\nabla f=\\left[\\dfrac{G_x}{G_y}\\right]=\\left[\\dfrac{\\dfrac{\\partial f}{\\partial x}}{\\dfrac{\\partial f}{\\partial y}}\\right] \\] \u5b83\u7684\u5e45\u503c(Magnitude)\u88ab\u8868\u793a\u4e3a\uff1a \\[ \\nabla f = (G_x^2+G_y^2)^{\\frac{1}{2}}=\\left[(\\dfrac{\\partial f}{\\partial x})^2 + (\\dfrac{\\partial f}{\\partial y})^2\\right]^{\\frac{1}{2}} \\] \u5f53\u5bf9\u6574\u5e45\u56fe\u50cf\u8ba1\u7b97\u68af\u5ea6\u65f6\uff0c\u8fd0\u7b97\u91cf\u4f1a\u5f88\u5927\uff0c\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u5e38\u7528\u7edd\u5bf9\u503c\u4ee3\u66ff\u5e73\u65b9\u4e0e\u5e73\u65b9\u6839\u8fd0\u7b97\u8fd1\u4f3c\u6c42\u68af\u5ea6\u7684\u6a21\u503c \\[\\nabla f\\approx |G_x|+|G_y|\\] \u53e6\u4e00\u79cd\u8ba1\u7b97\u65b9\u6cd5: Robert \u4ea4\u53c9\u68af\u5ea6\u7b97\u5b50","title":"gradient based operator"},{"location":"dip/dip6/#laplacian-operator","text":"\u5bf9\u51fd\u6570 \\(f(x, y)\\) \uff0c\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u5b9a\u4e49\u5982\u4e0b(\u548c\u68af\u5ea6\u4e0d\u540c\uff0c\u62c9\u666e\u62c9\u65af\u7b97\u5b50\u662f\u4e00\u4e2a\u6807\u91cf) \\[ \\nabla^2 f=\\dfrac{\\partial^2 f}{\\partial x^2}+\\dfrac{\\partial^2 f}{\\partial y^2} \\] \u4e24\u4e2a\u53d8\u91cf\u7684\u79bb\u6563\u62c9\u666e\u62c9\u65af\u51fd\u6570\u662f: \\[ \\nabla^2 f(x,y)=f(x+1,y)+f(x-1,y)+f(x,y+1)+f(x,y-1)-4f(x,y) \\] \u76f8\u5f53\u4e8e\u7528\u8fd9\u4e2a\u5377\u79ef\u6838\u5bf9\u56fe\u50cf\u505a\u5377\u79ef\uff08\u8fd9\u4e2a\u5377\u79ef\u6838\u662f\u5404\u5411\u540c\u6027\u7684\uff0c rotation-invariant \uff09 \u5bf9\u89d2\u7ebf\u4e0a\u7684\u5143\u7d20\u4e5f\u53ef\u4ee5\u8003\u8651\u8fdb\u6765\u8bbe\u8ba1\u63a9\u819c\uff1a \\[ \\begin{align*} \\nabla^2 f(x,y) & =f(x-1,y-1)+f(x,y-1)+f(x+1,y-1)+f(x-1,y) f(x+1,y)+f(x-1,y+1)+f(x,y+1)+f(x+1,y+1)-8f(x,y) \\\\ & = \\sum\\limits_{i=-1}^1\\sum\\limits_{j=-1}^1 f(x+i,y+j)-9f(x,y) \\end{align*} \\] \u53cd\u8fc7\u6765 \u5f53\u62c9\u666e\u62c9\u65af\u6ee4\u6ce2\u540e\u7684\u56fe\u50cf\u4e0e\u5176\u5b83\u56fe\u50cf\u5408\u5e76\u65f6\uff08\u76f8\u52a0\u6216\u76f8\u51cf\uff09\uff0c\u5219\u5fc5\u987b\u8003\u8651\u7b26\u53f7\u4e0a\u7684\u5dee\u522b\u3002 Application \u5c06\u539f\u59cb\u56fe\u50cf\u548c\u62c9\u666e\u62c9\u65af\u56fe\u50cf\u53e0\u52a0\u5728\u4e00\u8d77\u7684\u7b80\u5355\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u62c9\u666e\u62c9\u65af\u9510\u5316\u5904\u7406\u7684\u6548\u679c\uff0c\u540c\u65f6\u53c8\u80fd\u590d\u539f\u80cc\u666f\u4fe1\u606f\u3002 \\[ g(x,y)=\\left\\{\\begin{matrix}f(x,y)-\\nabla^2f(x,y), If\\ the\\ center\\ of\\ the\\ mask\\ is\\ negative \\\\ f(x,y)+\\nabla^2f(x,y), If\\ the\\ center\\ of\\ the\\ mask\\ is\\ positive \\end{matrix} \\right. \\] Laplacian Example","title":"Laplacian operator"},{"location":"dip/dip6/#bilateral-filtering","text":"\u4fdd\u8fb9\u6ee4\u6ce2(edge-preserving)\u7684\u4e00\u79cd Bilateral filtering Example \u76ee\u6807\uff1a\u56fe\u50cf\u7684\u5e73\u6ed1\uff0c\u4f46\u8981\u628a large-scale \u7684\u7ed3\u6784\u4fdd\u7559, small-scale \u7684\u7eb9\u8def\u62b9\u6389\u3002 space domain S, \u8868\u793a\u50cf\u7d20\u53ef\u80fd\u7684\u4f4d\u7f6e(\u9ad8\u65af\u6ee4\u6ce2\u4e3b\u8981\u8003\u8651\u7684) intensity domain R, \u50cf\u7d20\u53ef\u80fd\u7684\u7070\u5ea6\u503c \u60f3\u6cd5: \u6bcf\u4e2a\u6837\u672c\u90fd\u88ab\u5468\u56f4\u7684\u52a0\u6743\u5e73\u5747\u66ff\u4ee3 \u6743\u91cd\u8981\u540c\u65f6\u53cd\u6620\u8ddd\u79bb\u4e2d\u5fc3\u50cf\u7d20\u7684\u8fdc\u8fd1\uff0c\u4ee5\u53ca\u50cf\u7d20\u503c\u548c\u4e2d\u5fc3\u50cf\u7d20\u503c\u7684\u76f8\u4f3c\u5ea6 Review of Gaussian Blur \\[ GB[I]_p=\\sum\\limits_{q\\in S}G_\\sigma (||p-q||)I_q \\] \u5f53 G \u6ee1\u8db3\u9ad8\u65af\u5206\u5e03\u65f6\uff1a \u8fd9\u91cc\u7684 \\(\\sigma\\) \u662f\u6211\u4eec\u9009\u53d6\u7a97\u53e3\u7684\u5927\u5c0f\u3002\u5982\u4f55\u8bbe\u7f6e \\(\\sigma\\) ? \u6839\u636e\u7ecf\u9a8c\uff0c\u901a\u5e38\u7684\u7b56\u7565\u662f\u662f\u8bbe\u7f6e\u4e3a\u56fe\u50cf\u5927\u5c0f\u7684\u4e00\u4e2a\u6bd4\u4f8b\uff0c\u5982 2%. \u53ef\u4ee5\u8d77\u5230\u5e73\u6ed1\u6548\u679c\uff0c\u4f46\u4f1a\u4f7f\u56fe\u50cf\u6a21\u7cca\uff0c\u56e0\u4e3a\u53ea\u8003\u8651\u4e86\u8ddd\u79bb\u56e0\u7d20\u3002 \\[ BF[I]_p=\\dfrac{1}{W_p}\\sum\\limits_{q\\in S}G_{\\sigma_s} (||p-q||)G_{\\sigma_r} (|I_p-I_q|)I_q \\] \\(\\dfrac{1}{W_p}\\) \u5f52\u4e00\u5316\u56e0\u5b50 \\(G_{\\sigma_s} (||p-q||)\\) \u7a7a\u95f4(spatial)\u7684\u6743\u91cd\uff0c\u548c\u9ad8\u65af\u6ee4\u6ce2\u4e2d\u76f8\u540c( \\(\\sigma_s\\) \u8868\u793a\u6838\u7684\u7a7a\u95f4\u8303\u56f4) \\(G_{\\sigma_r} (|I_p-I_q|)\\) \u7070\u5ea6(range)\u7684\u6743\u91cd(\u6ce8\u610f\u8fd9\u91cc\u53ea\u662f\u4e00\u8303\u5f0f\u800c\u975e\u4e8c\u8303\u5f0f\uff0c\u56e0\u4e3a\u7070\u5ea6\u53ea\u662f\u6807\u91cf)( \\(\\sigma_r\\) \u8868\u793a\u7070\u5ea6\u7684\u8303\u56f4) \u8303\u56f4\u53d8\u5316\u5bf9\u56fe\u50cf\u7684\u5f71\u54cd \u5982\u4f55\u8bbe\u7f6e\u53c2\u6570: intensity proportional to edge amplitude(\u5bf9\u6bcf\u4e00\u4e2a\u5c0f\u7a97\u53e3\u90fd\u9700\u8981\u91cd\u65b0\u8ba1\u7b97 \\(\\sigma_r\\) ) \u53ef\u4ee5\u53cd\u590d\u5728\u4e00\u5f20\u56fe\u50cf\u4e0a\u505a\u53cc\u8fb9\u6ee4\u6ce2\uff0c \\(I_{(n+1)}=BF[I_{(n)}]\\) \u82e5\u5728\u5f69\u8272\u56fe\u4e0a\u505a\u53cc\u8fb9\u6ee4\u6ce2\uff0c\u53ea\u9700\u8981\u5c06\u5f0f\u5b50\u6539\u4e3a \\[ BF[I]_p=\\dfrac{1}{W_p}\\sum\\limits_{q\\in S}G_{\\sigma_s} (||p-q||)G_{\\sigma_r} (|||C_p-C_q|||)I_q \\] \u5176\u4e2d \\(|||C_p-C_q|||\\) \u662f\u4e09\u7ef4\u5411\u91cf(RGB/Lab) \u7684\u6b27\u6c0f\u8ddd\u79bb","title":"Bilateral Filtering"},{"location":"dip/dip6/#denoising","text":"\u8f83\u5c0f\u7684\u7a7a\u95f4 \\(\\sigma_s\\) \u6839\u636e\u566a\u58f0\u6c34\u5e73\u8c03\u6574 \\(\\sigma_r\\) \u53ef\u80fd\u4e0d\u662f\u6700\u597d\u7684\u53bb\u566a\u65b9\u6cd5\uff0c\u4f46\u80fd\u505a\u597d\u7b80\u6d01\u6027\u548c\u6548\u679c\u7684 tradeoff","title":"Denoising"},{"location":"dip/dip6/#tone-mapping","text":"\u5c06\u771f\u5b9e\u4e16\u754c\u7684 \u8f93\u5165: HDR Image(high-dynamic-range) 32 \u4f4d\u56fe\u50cf\uff0c\u591a\u51fa\u6765\u7684 8 \u4f4d\u79f0\u4e3a\u963f\u5c14\u6cd5\u901a\u9053\uff0c\u5373\u900f\u660e\u5ea6\u3002\u6bcf\u4e2a\u50cf\u7d20\u662f\u6d6e\u70b9\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u589e\u52a0\u8303\u56f4\u3002 \u4ece 1:10000 \u538b\u5230 1:100\uff1f \u51cf\u5c11\u4f4e\u9891\uff0c\u4f46\u53ef\u80fd\u4f1a\u51fa\u73b0\u68af\u5ea6\u9006\u8f6c(halo) Brute-force problem \u66b4\u529b\u5b9e\u73b0\u53cc\u8fb9\u6ee4\u6ce2\u7684\u65f6\u95f4\u53ef\u80fd\u4f1a\u975e\u5e38\u6162\uff0c\u56e0\u4e3a\u4ed6\u662f\u975e\u7ebf\u6027\u7684\uff0c\u800c\u4e14\u6bcf\u4e2a\u6838\u90fd\u4e0d\u4e00\u6837\uff0c\u4e0d\u80fd\u63d0\u524d\u7b97\u51fa","title":"Tone mapping"},{"location":"dip/dip7/","text":"Basic Image Operation (V) \u00b6 Abstract A Fast Approximation of the Bilateral Filter using a Signal Processing Approach \u8bfe\u5916\u8d44\u6e90: http://people.csail.mit.edu/sparis/bf/#code Definition \u00b6 \u53cc\u8fb9\u6ee4\u6ce2\u4f7f\u56fe\u50cf\u5e73\u6ed1\uff0c\u540c\u65f6\u80fd\u4fdd\u8fb9 \u672c\u8d28\u662f\u8fd1\u90bb\u7684\u52a0\u6743\u5e73\u5747\uff0c\u6743\u91cd\u5305\u62ec\uff1a space \u4e0a\u7684\u9ad8\u65af\u51fd\u6570 range \u4e0a\u7684\u9ad8\u65af\u51fd\u6570 \u5f52\u4e00\u5316\u56e0\u5b50 \\[ I_p^{bf}=\\dfrac{1}{W_p^{bf}}\\sum\\limits_{q\\in S}G_{\\sigma_s}(||p-q||)G_{\\sigma_r}(|I_p-I_q|)I_q \\] Contribution \u00b6 \u548c\u7ebf\u6027\u6ee4\u6ce2\u76f8\u8054\u7cfb\u8d77\u6765 \u505a\u5230\u4e86\u5feb\u3001\u4e14\u51c6\u786e\u7684 \u8fd1\u4f3c \uff08\u6709\u8bef\u5dee\uff0c\u5e76\u4e0d\u662f\u76f8\u7b49\uff09 Intuition on 1D Signal \u00b6 \u8fd1\u4e14\u76f8\u4f3c\u7684\u50cf\u7d20\u662f\u6709\u5f71\u54cd\u529b\u7684 \u8fdc\u7684\u50cf\u7d20\u6ca1\u6709\u5f71\u54cd\u529b \u548c\u4e2d\u5fc3\u50cf\u7d20\u76f8\u5dee\u8f83\u5927\u7684\u5f71\u54cd\u529b\u4e5f\u6bd4\u8f83\u5c0f\uff08\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4fdd\u8fb9\u4e0b\uff09 Handling the Division \u00b6 \u901a\u8fc7\u6295\u5f71\u7a7a\u95f4\u7684\u65b9\u6cd5\u5904\u7406\u5f52\u4e00\u5316\u56e0\u5b50\u8fd9\u91cc\u7684\u9664\u6cd5 \u7b2c\u4e00\u884c( \\(I_p^{bf}\\) ) \u4e58\u4e0a\u5f52\u4e00\u5316\u56e0\u5b50\uff0c\u4ece\u800c\u5f62\u6210\u4e00\u4e2a \\(2\\times 1\\) \u5411\u91cf\uff0c\u5982\u4e0a\u56fe\u4e0b\u9762\u6240\u793a\u3002 \u7c7b\u4f3c\u4e8e\u6295\u5f71\u7a7a\u95f4\u4e2d\u7684\u9f50\u6b21\u5750\u6807 \u6211\u4eec\u628a\u9664\u6cd5\u5f80\u540e\u653e\uff0c\u76f4\u5230\u8ba1\u7b97\u7ed3\u675f\u518d\u8fdb\u884c\u5f52\u4e00\u5316\u56e0\u5b50\u7684\u9664\u6cd5 \u4e0b\u4e00\u6b65\uff1a\u6dfb\u52a0\u4e00\u7ef4\uff0c\u4f7f\u5f97\u53ef\u4ee5\u8fdb\u884c\u5377\u79ef\u64cd\u4f5c Introducing a Convolution \u00b6 \u4e09\u7ef4\u9ad8\u65af\uff0c\u4e8c\u7ef4\u5377\u79ef\uff08\u5377\u79ef\u53ef\u4ee5\u53d8\u4e3a\u9891\u7387\u7684\u4e58\u79ef\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5229\u7528 FFT \u53d8\u6362\uff09 \u53d8\u4e3a \\(\\sum\\limits_{(q,\\xi)\\in S\\times R}\\left(\\begin{matrix}W_q I_q \\\\ W_q \\end{matrix}\\right)\\) space-range Gaussian \u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c\u8fd8\u9700\u8981\u91c7\u6837 Summary \u00b6 \u4e0a\u91c7\u6837\uff0c\u4e0b\u91c7\u6837\u5e76\u4e0d\u662f\u5b8c\u5168\u7684\u53cc\u8fb9\u6ee4\u6ce2\uff0c\u505a\u4e86\u4e00\u4e2a\u8fd1\u4f3c","title":"\u53cc\u8fb9\u6ee4\u6ce2\u7684\u52a0\u901f"},{"location":"dip/dip7/#basic-image-operation-v","text":"Abstract A Fast Approximation of the Bilateral Filter using a Signal Processing Approach \u8bfe\u5916\u8d44\u6e90: http://people.csail.mit.edu/sparis/bf/#code","title":"Basic Image Operation (V)"},{"location":"dip/dip7/#definition","text":"\u53cc\u8fb9\u6ee4\u6ce2\u4f7f\u56fe\u50cf\u5e73\u6ed1\uff0c\u540c\u65f6\u80fd\u4fdd\u8fb9 \u672c\u8d28\u662f\u8fd1\u90bb\u7684\u52a0\u6743\u5e73\u5747\uff0c\u6743\u91cd\u5305\u62ec\uff1a space \u4e0a\u7684\u9ad8\u65af\u51fd\u6570 range \u4e0a\u7684\u9ad8\u65af\u51fd\u6570 \u5f52\u4e00\u5316\u56e0\u5b50 \\[ I_p^{bf}=\\dfrac{1}{W_p^{bf}}\\sum\\limits_{q\\in S}G_{\\sigma_s}(||p-q||)G_{\\sigma_r}(|I_p-I_q|)I_q \\]","title":"Definition"},{"location":"dip/dip7/#contribution","text":"\u548c\u7ebf\u6027\u6ee4\u6ce2\u76f8\u8054\u7cfb\u8d77\u6765 \u505a\u5230\u4e86\u5feb\u3001\u4e14\u51c6\u786e\u7684 \u8fd1\u4f3c \uff08\u6709\u8bef\u5dee\uff0c\u5e76\u4e0d\u662f\u76f8\u7b49\uff09","title":"Contribution"},{"location":"dip/dip7/#intuition-on-1d-signal","text":"\u8fd1\u4e14\u76f8\u4f3c\u7684\u50cf\u7d20\u662f\u6709\u5f71\u54cd\u529b\u7684 \u8fdc\u7684\u50cf\u7d20\u6ca1\u6709\u5f71\u54cd\u529b \u548c\u4e2d\u5fc3\u50cf\u7d20\u76f8\u5dee\u8f83\u5927\u7684\u5f71\u54cd\u529b\u4e5f\u6bd4\u8f83\u5c0f\uff08\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4fdd\u8fb9\u4e0b\uff09","title":"Intuition on 1D Signal"},{"location":"dip/dip7/#handling-the-division","text":"\u901a\u8fc7\u6295\u5f71\u7a7a\u95f4\u7684\u65b9\u6cd5\u5904\u7406\u5f52\u4e00\u5316\u56e0\u5b50\u8fd9\u91cc\u7684\u9664\u6cd5 \u7b2c\u4e00\u884c( \\(I_p^{bf}\\) ) \u4e58\u4e0a\u5f52\u4e00\u5316\u56e0\u5b50\uff0c\u4ece\u800c\u5f62\u6210\u4e00\u4e2a \\(2\\times 1\\) \u5411\u91cf\uff0c\u5982\u4e0a\u56fe\u4e0b\u9762\u6240\u793a\u3002 \u7c7b\u4f3c\u4e8e\u6295\u5f71\u7a7a\u95f4\u4e2d\u7684\u9f50\u6b21\u5750\u6807 \u6211\u4eec\u628a\u9664\u6cd5\u5f80\u540e\u653e\uff0c\u76f4\u5230\u8ba1\u7b97\u7ed3\u675f\u518d\u8fdb\u884c\u5f52\u4e00\u5316\u56e0\u5b50\u7684\u9664\u6cd5 \u4e0b\u4e00\u6b65\uff1a\u6dfb\u52a0\u4e00\u7ef4\uff0c\u4f7f\u5f97\u53ef\u4ee5\u8fdb\u884c\u5377\u79ef\u64cd\u4f5c","title":"Handling the Division"},{"location":"dip/dip7/#introducing-a-convolution","text":"\u4e09\u7ef4\u9ad8\u65af\uff0c\u4e8c\u7ef4\u5377\u79ef\uff08\u5377\u79ef\u53ef\u4ee5\u53d8\u4e3a\u9891\u7387\u7684\u4e58\u79ef\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5229\u7528 FFT \u53d8\u6362\uff09 \u53d8\u4e3a \\(\\sum\\limits_{(q,\\xi)\\in S\\times R}\\left(\\begin{matrix}W_q I_q \\\\ W_q \\end{matrix}\\right)\\) space-range Gaussian \u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c\u8fd8\u9700\u8981\u91c7\u6837","title":"Introducing a Convolution"},{"location":"dip/dip7/#summary","text":"\u4e0a\u91c7\u6837\uff0c\u4e0b\u91c7\u6837\u5e76\u4e0d\u662f\u5b8c\u5168\u7684\u53cc\u8fb9\u6ee4\u6ce2\uff0c\u505a\u4e86\u4e00\u4e2a\u8fd1\u4f3c","title":"Summary"},{"location":"dip/dip8/","text":"Guided Image Filtering \u00b6 Abstract \u4ecb\u7ecd Guided Image Filtering, \u5305\u62ec\u5176\u57fa\u672c\u601d\u60f3\uff0c\u4f18\u70b9\u548c\u5c40\u9650\u6027\uff0c\u4ee5\u53ca\u5e94\u7528\u3002 Guided Filter \u00b6 \u53cc\u8fb9\u6ee4\u6ce2\u53ea\u80fd\u4fdd\u8fb9\uff0c\u6ca1\u6709\u4fdd\u68af\u5ea6\uff08\u5373\u6b63\u8d1f\u53f7\uff09\uff0c\u5f88\u6709\u53ef\u80fd\u53d1\u751f\u68af\u5ea6\u9006\u8f6c \u8f93\u5165\u6709\u566a\u58f0\u7684\u56fe\u50cf \\(p\\) , \u8f93\u51fa\u53bb\u566a\u540e\u5e73\u6ed1\u7684\u56fe\u50cf \\(q\\) . \u90a3\u4e48 $q_i = p_i - n_i $ \u5176\u4e2d \\(n_i\\) \u8868\u793a\u566a\u58f0\u6216\u8005\u662f\u7eb9\u8def \u5f15\u5165\u4e86 guided image \\(I\\) . \\(\\nabla q_i=a \\nabla I_i\\Rightarrow q_i=aI_i+b\\) ( \\(a\\) \u662f\u4e00\u4e2a\u6807\u91cf\u7cfb\u6570) \u8981\u6c42 \\(\\min\\limits_{(a,b)}\\sum\\limits_i (aI_i+b-p_i)^2+\\epsilon a^2\\) (\u8fd9\u91cc \\(\\epsilon a^2\\) \u662f\u6b63\u5219\u9879\uff0c\u7528\u6765\u63a7\u5236\u65b9\u5411) \u5bf9 \\(a\\) \u6c42\u504f\u5bfc\uff0c\u4ee4\u504f\u5bfc\u6570\u4e3a \\(0\\) ; \u5bf9 \\(b\\) \u540c\u7406, \u8fd9\u6837\u53ef\u4ee5\u89e3\u4e00\u4e2a\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u5f97\u5230 \\(a\\) \u548c \\(b\\) . (\u8fd9\u91cc \\(\\overline p\\) \u6307\u7684\u662f \\(I\\) \u8fd9\u4e2a\u90bb\u57df\u7684\u5e73\u5747\u503c) \u4ee5\u4e0a\u662f\u5bf9\u5355\u4e2a\u50cf\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u6269\u5145\u5230\u6574\u4e2a\u56fe\u50cf\uff1a \u5bf9\u6bcf\u4e00\u4e2a\u5c40\u90e8\u7a97\u53e3 \\(w_k\\) \u6211\u4eec\u53ef\u4ee5\u7b97\u51fa \\(a_k, b_k\\) \u7a97\u53e3\u4e4b\u95f4\u53ef\u80fd\u6709\u91cd\u53e0\uff0c\u8981\u7b97\u7a97\u53e3\u5185 \\(q_k\\) \u7684\u5e73\u5747\u503c\uff0c\u5373\u6240\u6709\u5305\u542b \\(q_i\\) \u7684\u7a97\u53e3\u7684\u5747\u503c \u53c2\u6570: \u7a97\u53e3\u534a\u5f84 \\(r\\) , \u6b63\u5219\u7cfb\u6570 \\(\\epsilon\\) \u5982\u679c\u7a97\u53e3\u7684 \\(var(I)\\ll \\epsilon, Cov(I,p)\\ll \\epsilon\\Rightarrow a\\approx 0, b\\approx \\overline p\\Rightarrow q_i\\approx \\overline{\\overline p}\\) (\u76f8\u5f53\u4e8e\u5bf9\u5747\u503c\u6ee4\u6ce2\u7684\u4e00\u4e2a\u7ea7\u8054) guided image \u600e\u4e48\u627e\uff1f\u53ef\u4ee5\u7528\u8f93\u51fa\u56fe\u50cf\u7684\u5e73\u5747\u503c \\(\\overline p\\) \u4f5c\u4e3a guided image. \\(r\\) \u51b3\u5b9a\u4e86\u91c7\u6837\u7a97\u53e3\u7684\u5927\u5c0f \u8fd9\u8bf4\u660e\u5b83\u4e0d\u4ec5\u53ef\u4ee5\u4fdd\u8fb9\uff0c\u8fd8\u53ef\u4ee5\u4fdd\u65b9\u5411\uff0c\u5373\u4e0d\u4f1a\u51fa\u73b0\u68af\u5ea6\u9006\u8f6c\u7684\u60c5\u51b5\u3002 \\(\\epsilon\\) \u51b3\u5b9a\u4e86\u6211\u4eec\u4fdd\u8fb9\u7684\u7a0b\u5ea6\uff0c\u8d8a\u5927\u4fdd\u8fb9\u80fd\u529b\u8d8a\u5f3a Example Guided Filter \u7684\u4f18\u70b9 \u4fdd\u8fb9\uff08\u4fdd\u68af\u5ea6\u5c31\u4e00\u5b9a\u80fd\u4fdd\u8fb9\uff0c\u53cd\u4e4b\u4e0d\u4e00\u5b9a\uff09 \u975e\u8fed\u4ee3 \\(O(1)\\) \u7684\u65f6\u95f4\uff0c\u5feb\u4e14\u4e0d\u9700\u8981\u901a\u8fc7\u8fd1\u4f3c\u7684\u65b9\u6cd5 \u4e0d\u5b58\u5728\u68af\u5ea6\u9006\u8f6c\u7684\u95ee\u9898 Complexity \u00b6 \u5728\u6bcf\u4e2a\u5c40\u90e8\u7a97\u53e3\u8ba1\u7b97\u5747\u503c\u3001\u65b9\u5dee\u3001\u534f\u65b9\u5dee \u7ea7\u8054\uff0c\u53ef\u4ee5\u7528\u79ef\u5206\u56fe\u63d0\u524d\u505a\u8ba1\u7b97 \\(O(1)\\) \u4e14\u4e0d\u4f9d\u8d56\u4e8e\u7a97\u53e3\u5927\u5c0f \\(r\\) \u975e\u8fd1\u4f3c Gradient Preserving \u00b6 \u68af\u5ea6\u9006\u8f6c\u7684\u4f8b\u5b50 \u9664\u4e86\u56fe\u50cf\u5e73\u6ed1\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u53bb\u96fe\u3001\u62a0\u56fe Limitation \u00b6 \u5bf9\u8fb9\u7f18\u7684\u5b9a\u4e49\u4e0d\u6e05\u6dc5\uff0c\u800c\u4e14\u8fb9\u7f18\u662f context-dependent \u7684\u3002\u8089\u773c\u4e2d\u7684\u8fb9\u754c\uff0c\u53ef\u80fd\u4e0d\u88ab\u8ba4\u4e3a\u662f\u8fb9\u754c\uff0c\u6700\u7ec8\u8fd8\u662f\u4f1a\u51fa\u73b0 halo \u7684\u73b0\u8c61\u3002","title":"\u5f15\u5bfc\u6ee4\u6ce2"},{"location":"dip/dip8/#guided-image-filtering","text":"Abstract \u4ecb\u7ecd Guided Image Filtering, \u5305\u62ec\u5176\u57fa\u672c\u601d\u60f3\uff0c\u4f18\u70b9\u548c\u5c40\u9650\u6027\uff0c\u4ee5\u53ca\u5e94\u7528\u3002","title":"Guided Image Filtering"},{"location":"dip/dip8/#guided-filter","text":"\u53cc\u8fb9\u6ee4\u6ce2\u53ea\u80fd\u4fdd\u8fb9\uff0c\u6ca1\u6709\u4fdd\u68af\u5ea6\uff08\u5373\u6b63\u8d1f\u53f7\uff09\uff0c\u5f88\u6709\u53ef\u80fd\u53d1\u751f\u68af\u5ea6\u9006\u8f6c \u8f93\u5165\u6709\u566a\u58f0\u7684\u56fe\u50cf \\(p\\) , \u8f93\u51fa\u53bb\u566a\u540e\u5e73\u6ed1\u7684\u56fe\u50cf \\(q\\) . \u90a3\u4e48 $q_i = p_i - n_i $ \u5176\u4e2d \\(n_i\\) \u8868\u793a\u566a\u58f0\u6216\u8005\u662f\u7eb9\u8def \u5f15\u5165\u4e86 guided image \\(I\\) . \\(\\nabla q_i=a \\nabla I_i\\Rightarrow q_i=aI_i+b\\) ( \\(a\\) \u662f\u4e00\u4e2a\u6807\u91cf\u7cfb\u6570) \u8981\u6c42 \\(\\min\\limits_{(a,b)}\\sum\\limits_i (aI_i+b-p_i)^2+\\epsilon a^2\\) (\u8fd9\u91cc \\(\\epsilon a^2\\) \u662f\u6b63\u5219\u9879\uff0c\u7528\u6765\u63a7\u5236\u65b9\u5411) \u5bf9 \\(a\\) \u6c42\u504f\u5bfc\uff0c\u4ee4\u504f\u5bfc\u6570\u4e3a \\(0\\) ; \u5bf9 \\(b\\) \u540c\u7406, \u8fd9\u6837\u53ef\u4ee5\u89e3\u4e00\u4e2a\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u5f97\u5230 \\(a\\) \u548c \\(b\\) . (\u8fd9\u91cc \\(\\overline p\\) \u6307\u7684\u662f \\(I\\) \u8fd9\u4e2a\u90bb\u57df\u7684\u5e73\u5747\u503c) \u4ee5\u4e0a\u662f\u5bf9\u5355\u4e2a\u50cf\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u6269\u5145\u5230\u6574\u4e2a\u56fe\u50cf\uff1a \u5bf9\u6bcf\u4e00\u4e2a\u5c40\u90e8\u7a97\u53e3 \\(w_k\\) \u6211\u4eec\u53ef\u4ee5\u7b97\u51fa \\(a_k, b_k\\) \u7a97\u53e3\u4e4b\u95f4\u53ef\u80fd\u6709\u91cd\u53e0\uff0c\u8981\u7b97\u7a97\u53e3\u5185 \\(q_k\\) \u7684\u5e73\u5747\u503c\uff0c\u5373\u6240\u6709\u5305\u542b \\(q_i\\) \u7684\u7a97\u53e3\u7684\u5747\u503c \u53c2\u6570: \u7a97\u53e3\u534a\u5f84 \\(r\\) , \u6b63\u5219\u7cfb\u6570 \\(\\epsilon\\) \u5982\u679c\u7a97\u53e3\u7684 \\(var(I)\\ll \\epsilon, Cov(I,p)\\ll \\epsilon\\Rightarrow a\\approx 0, b\\approx \\overline p\\Rightarrow q_i\\approx \\overline{\\overline p}\\) (\u76f8\u5f53\u4e8e\u5bf9\u5747\u503c\u6ee4\u6ce2\u7684\u4e00\u4e2a\u7ea7\u8054) guided image \u600e\u4e48\u627e\uff1f\u53ef\u4ee5\u7528\u8f93\u51fa\u56fe\u50cf\u7684\u5e73\u5747\u503c \\(\\overline p\\) \u4f5c\u4e3a guided image. \\(r\\) \u51b3\u5b9a\u4e86\u91c7\u6837\u7a97\u53e3\u7684\u5927\u5c0f \u8fd9\u8bf4\u660e\u5b83\u4e0d\u4ec5\u53ef\u4ee5\u4fdd\u8fb9\uff0c\u8fd8\u53ef\u4ee5\u4fdd\u65b9\u5411\uff0c\u5373\u4e0d\u4f1a\u51fa\u73b0\u68af\u5ea6\u9006\u8f6c\u7684\u60c5\u51b5\u3002 \\(\\epsilon\\) \u51b3\u5b9a\u4e86\u6211\u4eec\u4fdd\u8fb9\u7684\u7a0b\u5ea6\uff0c\u8d8a\u5927\u4fdd\u8fb9\u80fd\u529b\u8d8a\u5f3a Example Guided Filter \u7684\u4f18\u70b9 \u4fdd\u8fb9\uff08\u4fdd\u68af\u5ea6\u5c31\u4e00\u5b9a\u80fd\u4fdd\u8fb9\uff0c\u53cd\u4e4b\u4e0d\u4e00\u5b9a\uff09 \u975e\u8fed\u4ee3 \\(O(1)\\) \u7684\u65f6\u95f4\uff0c\u5feb\u4e14\u4e0d\u9700\u8981\u901a\u8fc7\u8fd1\u4f3c\u7684\u65b9\u6cd5 \u4e0d\u5b58\u5728\u68af\u5ea6\u9006\u8f6c\u7684\u95ee\u9898","title":"Guided Filter"},{"location":"dip/dip8/#complexity","text":"\u5728\u6bcf\u4e2a\u5c40\u90e8\u7a97\u53e3\u8ba1\u7b97\u5747\u503c\u3001\u65b9\u5dee\u3001\u534f\u65b9\u5dee \u7ea7\u8054\uff0c\u53ef\u4ee5\u7528\u79ef\u5206\u56fe\u63d0\u524d\u505a\u8ba1\u7b97 \\(O(1)\\) \u4e14\u4e0d\u4f9d\u8d56\u4e8e\u7a97\u53e3\u5927\u5c0f \\(r\\) \u975e\u8fd1\u4f3c","title":"Complexity"},{"location":"dip/dip8/#gradient-preserving","text":"\u68af\u5ea6\u9006\u8f6c\u7684\u4f8b\u5b50 \u9664\u4e86\u56fe\u50cf\u5e73\u6ed1\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u53bb\u96fe\u3001\u62a0\u56fe","title":"Gradient Preserving"},{"location":"dip/dip8/#limitation","text":"\u5bf9\u8fb9\u7f18\u7684\u5b9a\u4e49\u4e0d\u6e05\u6dc5\uff0c\u800c\u4e14\u8fb9\u7f18\u662f context-dependent \u7684\u3002\u8089\u773c\u4e2d\u7684\u8fb9\u754c\uff0c\u53ef\u80fd\u4e0d\u88ab\u8ba4\u4e3a\u662f\u8fb9\u754c\uff0c\u6700\u7ec8\u8fd8\u662f\u4f1a\u51fa\u73b0 halo \u7684\u73b0\u8c61\u3002","title":"Limitation"},{"location":"dip/dip9/","text":"Sparse Norm Filtering \u00b6 Core Algorithm \u00b6 \u5e73\u6ed1\u4e00\u4e2a\u56fe\u50cf\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 \\(l^2\\) \u8303\u5f0f\u5e76\u6c42: \\(\\min\\limits_{l_i^{new}}\\sum\\limits_{j\\in N_i(l_i^{new}-l_j)^2}\\Rightarrow\\) \u5747\u503c\u6ee4\u6ce2, \u6c42\u504f\u5bfc\u5e76\u4ee4\u5176\u7b49\u4e8e \\(0\\) , \u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u70b9\u7684\u50cf\u7d20\u503c\u3002 \u4e3a\u4e86\u8ba9\u6ee4\u6ce2\u80fd\u591f\u4fdd\u8fb9\uff0c\u6211\u4eec\u5efa\u8bae\u6539\u53d8\u4e3a \\(p\\) \u8303\u5f0f\uff0c\u53d8\u4e3a sparser norm, \u5f0f\u5b50\u63a8\u5e7f\u4e3a \\(\\min\\limits_{l_i^{new}}\\sum\\limits_{j\\in N_i}|l_i^{new}-l_j|^p,0<p\\leq 2\\Rightarrow\\) Sparse Norm Filter Application \u00b6 Halo free filtering \u00b6 \u52a0\u6743\u5e73\u5747\u4f1a\u5e26\u6765 Halo, \u57fa\u4e8e\u6ee4\u6ce2\u8fdb\u884c\u6700\u4f18\u5316\u6bd4\u8f83\u6162\u800c\u4e14\u4f1a\u4ea7\u751f\u4e0d\u60f3\u770b\u5230\u7684\u7ed3\u679c\u3002 \u6211\u4eec\u80fd\u901a\u8fc7 Sparse Norm Filter \u751f\u6210 halo free \u7684\u7ed3\u679c\u662f\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8 \\(l^p\\) \u8303\u5f0f Example \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u8282 \\(p\\) \u7684\u5927\u5c0f\uff0c\u5728\u7b2c\u4e8c\u5f20\u56fe\u50cf\u4e2d\u68af\u5ea6\u9006\u8f6c\u7684\u73b0\u8c61\u6d88\u5931\u4e86\uff01 \\(p>1\\) \u65f6\u4e0d\u80fd\u9632\u6b62\u68af\u5ea6\u9006\u8f6c\uff0c \\(p<1\\) \u53ef\u4ee5. Outlier tolerant filtering \u00b6 SNF \u662f\u4e00\u4e2a\u901a\u7528\u7684\u6ee4\u6ce2\uff08\u4e2d\u503c\u6ee4\u6ce2\u662f\u4e00\u4e2a\u7279\u4f8b\uff0c\u76f8\u5f53\u4e8e \\(l^1\\) \u8303\u5f0f\u6ee4\u6ce2\uff09 \u4e5f\u53ef\u4ee5\u8d77\u5230\u53bb\u566a\u7684\u6548\u679c Example \u539f\u56fe p=0.1 norm filter HDR Compression \u00b6 \u56e0\u4e3a SNF \u7684\u5fae\u5206\u662f\u975e\u5c40\u90e8\u7684\uff0c\u4ed6\u4e0d\u90a3\u4e48\u53ef\u80fd\u9677\u5165\u68af\u5ea6\u4e0b\u964d\u7684\u60c5\u51b5\u3002 Example \u539f\u56fe p=0.2 norm filter Non-blind Deconvolution \u00b6 \u8fd0\u52a8\u53bb\u6a21\u7cca Example \u539f\u56fe p=0.5, r=5 \u5982\u4f55\u505a\u8fd0\u52a8\u53bb\u6a21\u7cca\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5148\u4f30\u8ba1\u51fa\u8fd0\u52a8\u7684\u8f68\u8ff9\uff08\u548c\u5899\u5bf9\u9f50\uff09\uff0c\u518d\u901a\u8fc7\u5bf9\u5f27\uff08\u8f68\u8ff9\uff09\u8fdb\u884c\u53bb\u5377\u79ef\u3002 Joint filtering \u00b6 \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u53e6\u4e00\u4e2a\u5f15\u5bfc\u56fe\u50cf\u6765\u63d0\u4f9b\u6ee4\u6ce2\u7684\u5f15\u5bfc\u6743\u91cd\uff0c\u5982\u5c06\u5f15\u5bfc\u56fe\u50cf\u7684\u8272\u8c03\u7528\u5230\u53e6\u4e00\u5f20\u56fe\u50cf\u4e0a Example Segmentation \u00b6 \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8054\u5408\u6ee4\u6ce2\u52a0\u901f\u5f52\u4e00\u5316\u5207\u5272\u6765\u8fdb\u884c\u56fe\u50cf\u5206\u5272\u3002 \u5728\u7279\u5f81\u6c42\u89e3\u5668\u4e2d\u7528\u9ad8\u6548\u7684\u8054\u5408\u6ee4\u6ce2\u4ee3\u66ff\u77e9\u9635\u4e58\u6cd5 Example \u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6280\u672f\u6269\u5c55\u5230\u5f52\u4e00\u5316\u5207\u5272\u7684\u76f8\u5173\u7b97\u6cd5\u3002 Colorization \u00b6 \u57fa\u4e8e\u5bf9\u56fe\u50cf\u7684\u5206\u5272\uff0c\u518d\u4e0a\u8272 Example \u8f93\u5165\u56fe\u50cf Result after 5 iter Final result by SNF using p=0.1,r=1/4 of the image height Seamless editing \u00b6 \u65e0\u7f1d\u8854\u63a5\uff0c\u601d\u8def\u7c7b\u4f3c\u4e0a\u8272\uff0c\u4e0d\u65ad\u4f7f\u7528 SNF \u8fed\u4ee3 Example \u8f93\u5165\u56fe\u50cf Result by drag-and-drop Final result by SNF","title":"\u7a00\u758f\u8303\u6570\u6ee4\u6ce2"},{"location":"dip/dip9/#sparse-norm-filtering","text":"","title":"Sparse Norm Filtering"},{"location":"dip/dip9/#core-algorithm","text":"\u5e73\u6ed1\u4e00\u4e2a\u56fe\u50cf\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 \\(l^2\\) \u8303\u5f0f\u5e76\u6c42: \\(\\min\\limits_{l_i^{new}}\\sum\\limits_{j\\in N_i(l_i^{new}-l_j)^2}\\Rightarrow\\) \u5747\u503c\u6ee4\u6ce2, \u6c42\u504f\u5bfc\u5e76\u4ee4\u5176\u7b49\u4e8e \\(0\\) , \u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u70b9\u7684\u50cf\u7d20\u503c\u3002 \u4e3a\u4e86\u8ba9\u6ee4\u6ce2\u80fd\u591f\u4fdd\u8fb9\uff0c\u6211\u4eec\u5efa\u8bae\u6539\u53d8\u4e3a \\(p\\) \u8303\u5f0f\uff0c\u53d8\u4e3a sparser norm, \u5f0f\u5b50\u63a8\u5e7f\u4e3a \\(\\min\\limits_{l_i^{new}}\\sum\\limits_{j\\in N_i}|l_i^{new}-l_j|^p,0<p\\leq 2\\Rightarrow\\) Sparse Norm Filter","title":"Core Algorithm"},{"location":"dip/dip9/#application","text":"","title":"Application"},{"location":"dip/dip9/#halo-free-filtering","text":"\u52a0\u6743\u5e73\u5747\u4f1a\u5e26\u6765 Halo, \u57fa\u4e8e\u6ee4\u6ce2\u8fdb\u884c\u6700\u4f18\u5316\u6bd4\u8f83\u6162\u800c\u4e14\u4f1a\u4ea7\u751f\u4e0d\u60f3\u770b\u5230\u7684\u7ed3\u679c\u3002 \u6211\u4eec\u80fd\u901a\u8fc7 Sparse Norm Filter \u751f\u6210 halo free \u7684\u7ed3\u679c\u662f\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8 \\(l^p\\) \u8303\u5f0f Example \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u8282 \\(p\\) \u7684\u5927\u5c0f\uff0c\u5728\u7b2c\u4e8c\u5f20\u56fe\u50cf\u4e2d\u68af\u5ea6\u9006\u8f6c\u7684\u73b0\u8c61\u6d88\u5931\u4e86\uff01 \\(p>1\\) \u65f6\u4e0d\u80fd\u9632\u6b62\u68af\u5ea6\u9006\u8f6c\uff0c \\(p<1\\) \u53ef\u4ee5.","title":"Halo free filtering"},{"location":"dip/dip9/#outlier-tolerant-filtering","text":"SNF \u662f\u4e00\u4e2a\u901a\u7528\u7684\u6ee4\u6ce2\uff08\u4e2d\u503c\u6ee4\u6ce2\u662f\u4e00\u4e2a\u7279\u4f8b\uff0c\u76f8\u5f53\u4e8e \\(l^1\\) \u8303\u5f0f\u6ee4\u6ce2\uff09 \u4e5f\u53ef\u4ee5\u8d77\u5230\u53bb\u566a\u7684\u6548\u679c Example \u539f\u56fe p=0.1 norm filter","title":"Outlier tolerant filtering"},{"location":"dip/dip9/#hdr-compression","text":"\u56e0\u4e3a SNF \u7684\u5fae\u5206\u662f\u975e\u5c40\u90e8\u7684\uff0c\u4ed6\u4e0d\u90a3\u4e48\u53ef\u80fd\u9677\u5165\u68af\u5ea6\u4e0b\u964d\u7684\u60c5\u51b5\u3002 Example \u539f\u56fe p=0.2 norm filter","title":"HDR Compression"},{"location":"dip/dip9/#non-blind-deconvolution","text":"\u8fd0\u52a8\u53bb\u6a21\u7cca Example \u539f\u56fe p=0.5, r=5 \u5982\u4f55\u505a\u8fd0\u52a8\u53bb\u6a21\u7cca\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5148\u4f30\u8ba1\u51fa\u8fd0\u52a8\u7684\u8f68\u8ff9\uff08\u548c\u5899\u5bf9\u9f50\uff09\uff0c\u518d\u901a\u8fc7\u5bf9\u5f27\uff08\u8f68\u8ff9\uff09\u8fdb\u884c\u53bb\u5377\u79ef\u3002","title":"Non-blind Deconvolution"},{"location":"dip/dip9/#joint-filtering","text":"\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u53e6\u4e00\u4e2a\u5f15\u5bfc\u56fe\u50cf\u6765\u63d0\u4f9b\u6ee4\u6ce2\u7684\u5f15\u5bfc\u6743\u91cd\uff0c\u5982\u5c06\u5f15\u5bfc\u56fe\u50cf\u7684\u8272\u8c03\u7528\u5230\u53e6\u4e00\u5f20\u56fe\u50cf\u4e0a Example","title":"Joint filtering"},{"location":"dip/dip9/#segmentation","text":"\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8054\u5408\u6ee4\u6ce2\u52a0\u901f\u5f52\u4e00\u5316\u5207\u5272\u6765\u8fdb\u884c\u56fe\u50cf\u5206\u5272\u3002 \u5728\u7279\u5f81\u6c42\u89e3\u5668\u4e2d\u7528\u9ad8\u6548\u7684\u8054\u5408\u6ee4\u6ce2\u4ee3\u66ff\u77e9\u9635\u4e58\u6cd5 Example \u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6280\u672f\u6269\u5c55\u5230\u5f52\u4e00\u5316\u5207\u5272\u7684\u76f8\u5173\u7b97\u6cd5\u3002","title":"Segmentation"},{"location":"dip/dip9/#colorization","text":"\u57fa\u4e8e\u5bf9\u56fe\u50cf\u7684\u5206\u5272\uff0c\u518d\u4e0a\u8272 Example \u8f93\u5165\u56fe\u50cf Result after 5 iter Final result by SNF using p=0.1,r=1/4 of the image height","title":"Colorization"},{"location":"dip/dip9/#seamless-editing","text":"\u65e0\u7f1d\u8854\u63a5\uff0c\u601d\u8def\u7c7b\u4f3c\u4e0a\u8272\uff0c\u4e0d\u65ad\u4f7f\u7528 SNF \u8fed\u4ee3 Example \u8f93\u5165\u56fe\u50cf Result by drag-and-drop Final result by SNF","title":"Seamless editing"},{"location":"ds/","text":"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5 \u00b6 Abstract \u8fd9\u91cc\u662f\u6d59\u6c5f\u5927\u5b66 \u6570\u636e\u7ed3\u6784\u57fa\u7840 \u8bfe\u7a0b\u7b14\u8bb0\u53ca\u76f8\u5173\u77e5\u8bc6 \u8001\u5e08: \u6731\u5efa\u79d1 \u53c2\u8003: Data Structures and Algorithm Analysis in C (\u6559\u6750) \u8001\u5e08\u4e0a\u8bfe\u7684 PPT (by cyll)","title":"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5"},{"location":"ds/#_1","text":"Abstract \u8fd9\u91cc\u662f\u6d59\u6c5f\u5927\u5b66 \u6570\u636e\u7ed3\u6784\u57fa\u7840 \u8bfe\u7a0b\u7b14\u8bb0\u53ca\u76f8\u5173\u77e5\u8bc6 \u8001\u5e08: \u6731\u5efa\u79d1 \u53c2\u8003: Data Structures and Algorithm Analysis in C (\u6559\u6750) \u8001\u5e08\u4e0a\u8bfe\u7684 PPT (by cyll)","title":"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5"},{"location":"ds/algorithm/","text":"\u7b97\u6cd5\u5206\u6790 \u00b6 \u4e00\u4e2a \u7b97\u6cd5(algorithm) \u662f\u4e3a\u4e86\u5b9e\u73b0\u7279\u5b9a\u4efb\u52a1\u7684\u4e00\u4e2a\u6709\u9650\u6761\u6307\u4ee4\u7684\u96c6\u5408 \u7b97\u6cd5\u6ee1\u8db3\u8fd9\u4e9b\u6027\u8d28\uff1a Input Output Definiteness Finiteness Effectiveness Note: program \u53ef\u4ee5\u4e0d finite( e.g. \u64cd\u4f5c\u7cfb\u7edf) \u5206\u6790\u5185\u5bb9 \u00b6 \u8fd0\u884c\u65f6\u95f4\uff1a\u4e0e\u673a\u5668\u3001\u7f16\u8bd1\u5668\u6709\u5173 \u65f6\u95f4 & \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4e0e\u673a\u5668\u3001\u7f16\u8bd1\u5668\u65e0\u5173 \u5047\u8bbe\uff1a \u6307\u4ee4\u6309\u987a\u5e8f\u6267\u884c \u6bcf\u6761\u6307\u4ee4\u662f\u7b80\u5355\u7684\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u65f6\u95f4\u5355\u4f4d\u6267\u884c \u6570\u636e\u89c4\u6a21\u662f\u7ed9\u5b9a\u7684\uff0c\u800c\u7a7a\u95f4\u662f\u65e0\u9650\u7684 \u901a\u5e38\u6211\u4eec\u9700\u8981\u5206\u6790 \\(T_{avg}(N) \\& T_{worst}(N)\\) , \\(N\\) \u662f\u8f93\u5165\u89c4\u6a21\uff08\u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165\uff09 \u6e10\u8fdb\u7b26\u53f7 \u00b6 \u5b9a\u4e49 \u00b6 \u5927 \\(O\\) \u8868\u793a\u6cd5 \\(T(N) = O(f(N))\\) \uff0c\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(c\\) \u548c \\(n_0\\) \u200b\u4f7f\u5f97\u5f53 \\(N\\geq n_0\\) \u65f6 \\(T(N)\\leq c\\cdot f(N)\\) \u6e10\u8fdb\u4e0a\u754c\uff0c\u5373 \\(T(N)\\) \u7684\u9636\u4e0d\u4f1a\u9ad8\u4e8e \\(f(N)\\) \uff08\u589e\u957f\u6bd4 \\(f(N)\\) \u6162\u6216\u76f8\u540c\uff0c \\(\\leq\\) \uff09 \u5927 \\(\\Omega\\) \u8868\u793a\u6cd5 \\(T(N) = \\Omega(g(N))\\) \uff0c\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(c\\) \u548c \\(n_0\\) \u200b\u4f7f\u5f97\u5f53 \\(N\\geq n_0\\) \u65f6 \\(T(N)\\geq c\\cdot f(N)\\) \u6e10\u8fdb\u4e0b\u754c\uff0c\u5373 \\(T(N)\\) \u7684\u9636\u4e0d\u4f1a\u4f4e\u4e8e \\(f(N)\\) \uff08\u589e\u957f\u6bd4 \\(f(N)\\) \u5feb\u6216\u76f8\u540c\uff0c \\(\\geq\\) \uff09 \u5927 \\(\\Theta\\) \u8868\u793a\u6cd5 \\(T(N) = \\Theta(h(N))\\) \uff0c\u5f53\u4e14\u4ec5\u5f53 \\(T(N) = O(h(N))\\) \u4e14 \\(T(N) = \\Omega(h(N))\\) \u6e10\u8fdb\u7d27\u786e\u754c\uff0c\u5373 \\(T(N)\\) \u4e0e \\(h(N)\\) \u540c\u9636\uff08\u589e\u957f\u901f\u5ea6\u76f8\u540c\uff0c \\(=\\) ) \u5c0f \\(o\\) \u8868\u793a\u6cd5 \\(T(N) = o(p(N))\\) \uff0c\u5f53 \\(T(N)=O(p(N))\\) \u4e14 \\(T(N)\\neq \\Theta(p(N))\\) \u65f6\u6210\u7acb \u975e\u6e10\u8fdb\u7d27\u786e\u4e0a\u754c\uff0c\uff08\u5373 \\(T(N)\\) \u589e\u957f\u6bd4 \\(p(N)\\) \u6162\uff0c \\(<\\) \uff09 \u5c0f \\(w\\) \u8868\u793a\u6cd5 \\(T(N) = w(p(N))\\) \uff0c\u5f53 \\(T(N)=\\Omega(p(N))\\) \u4e14 \\(T(N)\\neq \\Theta(p(N))\\) \u65f6\u6210\u7acb \u975e\u6e10\u8fdb\u7d27\u786e\u4e0b\u754c\uff0c\uff08\u5373 \\(T(N)\\) \u589e\u957f\u6bd4 \\(p(N)\\) \u5feb\uff0c \\(>\\) \uff09 \u8fd0\u7b97\u89c4\u5219 \u00b6 \u82e5 \\(T_1(N)=O(f(N)), T_2(N)=O(g(N))\\) \\(T_1(N)+T_2(N)=\\max(O(f(N)), O(g(N))\\) \\(T_1(N)\\cdot T_2(N)=O(f(N)\\cdot g(N))\\) \u82e5 \\(T(N)\\) \u662f\u6700\u9ad8\u6b21\u6570\u4e3a k \u6b21\u7684\u591a\u9879\u5f0f\uff0c\u90a3\u4e48 \\(T(N)=\\Theta ((N^k))\\) \u5bf9\u4e8e\u4efb\u610f\u5e38\u6570 \\(k\\) , \u90fd\u6709 \\(\\log^kN=O(N)\\) \uff0c\u8fd9\u8bf4\u660e\u5bf9\u589e\u957f\u975e\u5e38\u7f13\u6162\u3002 \u5206\u6790\u65f6\u7684\u89c4\u5219 for loop \u8fd0\u884c\u65f6\u95f4\u662f\u5faa\u73af\u5185\u90e8\u8bed\u53e5\u7684\u6700\u957f\u65f6\u95f4\uff08\u5305\u62ec for \u8fb9\u754c\u5224\u65ad\uff09\u4e58\u5faa\u73af\u7684\u6b21\u6570 \u5d4c\u5957 for loop \u8fd0\u884c\u65f6\u95f4\u662f\u5404\u4e2a for loop \u7684\u8fd0\u884c\u65f6\u95f4\u9010\u6b21\u76f8\u4e58 \u8fde\u7eed\u6267\u884c\u7684\u8bed\u53e5 \u76f8\u52a0 if else \u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7\u5224\u65ad\u65f6\u95f4\u52a0\u4e0a\u7528\u65f6\u6700\u591a\u7684\u8bed\u53e5\u5757\u7684\u65f6\u95f4","title":"\u7b97\u6cd5\u5206\u6790"},{"location":"ds/algorithm/#_1","text":"\u4e00\u4e2a \u7b97\u6cd5(algorithm) \u662f\u4e3a\u4e86\u5b9e\u73b0\u7279\u5b9a\u4efb\u52a1\u7684\u4e00\u4e2a\u6709\u9650\u6761\u6307\u4ee4\u7684\u96c6\u5408 \u7b97\u6cd5\u6ee1\u8db3\u8fd9\u4e9b\u6027\u8d28\uff1a Input Output Definiteness Finiteness Effectiveness Note: program \u53ef\u4ee5\u4e0d finite( e.g. \u64cd\u4f5c\u7cfb\u7edf)","title":"\u7b97\u6cd5\u5206\u6790"},{"location":"ds/algorithm/#_2","text":"\u8fd0\u884c\u65f6\u95f4\uff1a\u4e0e\u673a\u5668\u3001\u7f16\u8bd1\u5668\u6709\u5173 \u65f6\u95f4 & \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u4e0e\u673a\u5668\u3001\u7f16\u8bd1\u5668\u65e0\u5173 \u5047\u8bbe\uff1a \u6307\u4ee4\u6309\u987a\u5e8f\u6267\u884c \u6bcf\u6761\u6307\u4ee4\u662f\u7b80\u5355\u7684\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u65f6\u95f4\u5355\u4f4d\u6267\u884c \u6570\u636e\u89c4\u6a21\u662f\u7ed9\u5b9a\u7684\uff0c\u800c\u7a7a\u95f4\u662f\u65e0\u9650\u7684 \u901a\u5e38\u6211\u4eec\u9700\u8981\u5206\u6790 \\(T_{avg}(N) \\& T_{worst}(N)\\) , \\(N\\) \u662f\u8f93\u5165\u89c4\u6a21\uff08\u53ef\u4ee5\u6709\u591a\u4e2a\u8f93\u5165\uff09","title":"\u5206\u6790\u5185\u5bb9"},{"location":"ds/algorithm/#_3","text":"","title":"\u6e10\u8fdb\u7b26\u53f7"},{"location":"ds/algorithm/#_4","text":"\u5927 \\(O\\) \u8868\u793a\u6cd5 \\(T(N) = O(f(N))\\) \uff0c\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(c\\) \u548c \\(n_0\\) \u200b\u4f7f\u5f97\u5f53 \\(N\\geq n_0\\) \u65f6 \\(T(N)\\leq c\\cdot f(N)\\) \u6e10\u8fdb\u4e0a\u754c\uff0c\u5373 \\(T(N)\\) \u7684\u9636\u4e0d\u4f1a\u9ad8\u4e8e \\(f(N)\\) \uff08\u589e\u957f\u6bd4 \\(f(N)\\) \u6162\u6216\u76f8\u540c\uff0c \\(\\leq\\) \uff09 \u5927 \\(\\Omega\\) \u8868\u793a\u6cd5 \\(T(N) = \\Omega(g(N))\\) \uff0c\u5982\u679c\u5b58\u5728\u5e38\u6570 \\(c\\) \u548c \\(n_0\\) \u200b\u4f7f\u5f97\u5f53 \\(N\\geq n_0\\) \u65f6 \\(T(N)\\geq c\\cdot f(N)\\) \u6e10\u8fdb\u4e0b\u754c\uff0c\u5373 \\(T(N)\\) \u7684\u9636\u4e0d\u4f1a\u4f4e\u4e8e \\(f(N)\\) \uff08\u589e\u957f\u6bd4 \\(f(N)\\) \u5feb\u6216\u76f8\u540c\uff0c \\(\\geq\\) \uff09 \u5927 \\(\\Theta\\) \u8868\u793a\u6cd5 \\(T(N) = \\Theta(h(N))\\) \uff0c\u5f53\u4e14\u4ec5\u5f53 \\(T(N) = O(h(N))\\) \u4e14 \\(T(N) = \\Omega(h(N))\\) \u6e10\u8fdb\u7d27\u786e\u754c\uff0c\u5373 \\(T(N)\\) \u4e0e \\(h(N)\\) \u540c\u9636\uff08\u589e\u957f\u901f\u5ea6\u76f8\u540c\uff0c \\(=\\) ) \u5c0f \\(o\\) \u8868\u793a\u6cd5 \\(T(N) = o(p(N))\\) \uff0c\u5f53 \\(T(N)=O(p(N))\\) \u4e14 \\(T(N)\\neq \\Theta(p(N))\\) \u65f6\u6210\u7acb \u975e\u6e10\u8fdb\u7d27\u786e\u4e0a\u754c\uff0c\uff08\u5373 \\(T(N)\\) \u589e\u957f\u6bd4 \\(p(N)\\) \u6162\uff0c \\(<\\) \uff09 \u5c0f \\(w\\) \u8868\u793a\u6cd5 \\(T(N) = w(p(N))\\) \uff0c\u5f53 \\(T(N)=\\Omega(p(N))\\) \u4e14 \\(T(N)\\neq \\Theta(p(N))\\) \u65f6\u6210\u7acb \u975e\u6e10\u8fdb\u7d27\u786e\u4e0b\u754c\uff0c\uff08\u5373 \\(T(N)\\) \u589e\u957f\u6bd4 \\(p(N)\\) \u5feb\uff0c \\(>\\) \uff09","title":"\u5b9a\u4e49"},{"location":"ds/algorithm/#_5","text":"\u82e5 \\(T_1(N)=O(f(N)), T_2(N)=O(g(N))\\) \\(T_1(N)+T_2(N)=\\max(O(f(N)), O(g(N))\\) \\(T_1(N)\\cdot T_2(N)=O(f(N)\\cdot g(N))\\) \u82e5 \\(T(N)\\) \u662f\u6700\u9ad8\u6b21\u6570\u4e3a k \u6b21\u7684\u591a\u9879\u5f0f\uff0c\u90a3\u4e48 \\(T(N)=\\Theta ((N^k))\\) \u5bf9\u4e8e\u4efb\u610f\u5e38\u6570 \\(k\\) , \u90fd\u6709 \\(\\log^kN=O(N)\\) \uff0c\u8fd9\u8bf4\u660e\u5bf9\u589e\u957f\u975e\u5e38\u7f13\u6162\u3002 \u5206\u6790\u65f6\u7684\u89c4\u5219 for loop \u8fd0\u884c\u65f6\u95f4\u662f\u5faa\u73af\u5185\u90e8\u8bed\u53e5\u7684\u6700\u957f\u65f6\u95f4\uff08\u5305\u62ec for \u8fb9\u754c\u5224\u65ad\uff09\u4e58\u5faa\u73af\u7684\u6b21\u6570 \u5d4c\u5957 for loop \u8fd0\u884c\u65f6\u95f4\u662f\u5404\u4e2a for loop \u7684\u8fd0\u884c\u65f6\u95f4\u9010\u6b21\u76f8\u4e58 \u8fde\u7eed\u6267\u884c\u7684\u8bed\u53e5 \u76f8\u52a0 if else \u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7\u5224\u65ad\u65f6\u95f4\u52a0\u4e0a\u7528\u65f6\u6700\u591a\u7684\u8bed\u53e5\u5757\u7684\u65f6\u95f4","title":"\u8fd0\u7b97\u89c4\u5219"},{"location":"ds/graph/","text":"\u56fe\u8bba \u00b6 \u5b9a\u4e49 \u00b6 \u4e00\u4e2a\u56fe \\(G=(V,E)\\) \u5176\u4e2d \\(V\\) \u662f\u8282\u70b9\u7684\u6709\u9650\u975e\u7a7a\u96c6\u5408, \\(E\\) \u662f\u8fb9\u7684\u6709\u9650\u975e\u7a7a\u96c6\u5408. \u6bcf\u4e00\u6761\u8fb9\u5c31\u662f\u4e00\u4e2a\u70b9\u5bf9 \\((v,w)\\) . \u65e0\u5411\u56fe: \\((v_i,v_j)=(v_j,v_i)\\) \u8868\u793a\u540c\u4e00\u6761\u8fb9 \u6709\u5411\u56fe: \\((v_i,v_j)\\neq (v_j,v_i)\\) \u5176\u4e2d \\((v_i,v_j)\\) \u8868\u793a\u7531 \\(v_i\\) (tail) \u6307\u5411 \\(v_j\\) (head) \u7684\u4e00\u6761\u8fb9\u3002 \u9650\u5236\uff1a\u81ea\u73af\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u540c\u65f6\u6211\u4eec\u4e0d\u8003\u8651\u591a\u91cd\u56fe \u5bf9\u4e8e \\((v_i,v_j)\\) \u8fd9\u6761\u8fb9\uff0c\u6211\u4eec\u79f0 \\(v_i,v_j\\) \u662f\u90bb\u63a5\u7684(adjacent), \u79f0 \\((v_i,v_j)\\) \u9644\u5c5e\u4e8e(incident) \\(v_i/v_j\\) \u5b8c\u5168\u56fe : \u6bcf\u4e00\u5bf9\u8282\u70b9\u95f4\u90fd\u5b58\u5728\u4e00\u6761\u8fb9\u7684\u56fe \u5b50\u56fe : \\(G'\\sub G\\) \u5373 \\(G'\\) \u4e2d\u7684\u70b9\u548c\u8fb9\u90fd\u5305\u542b\u5728 G \u4e2d( \\(V(G')\\sube V(G)\\quad E(G')\\sube E(G)\\) ) \u8def\u5f84 : \\(\\{v_p,v_{i1},v_{i2},\\ldots, v_{in},v_q\\}((v_i,v_i)\\in E)\\) \u79f0\u4e3a\u4ece \\(v_p\\) \u5230 \\(v_q\\) \u7684\u4e00\u6761\u8def\u5f84 \u8def\u5f84\u7684\u957f\u5ea6 \uff1a\u8def\u5f84\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf \u7b80\u5355\u8def\u5f84 : \\(v_{i1},v_{i2}...\\) \u5404\u4e0d\u76f8\u540c(\u6ce8\u610f\u7b2c\u4e00\u4e2a\u70b9\u53ef\u4ee5\u548c\u6700\u540e\u4e00\u4e2a\u70b9\u76f8\u540c) \u5708 : \\(v_p=v_q\\) \u7684\u7b80\u5355\u8def\u5f84 \u5982\u679c\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\u6bcf\u4e00\u4e2a\u9876\u70b9\u5230\u53e6\u4e00\u4e2a\u5176\u4ed6\u9876\u70b9\u90fd\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48\u65e0\u5411\u56fe\u662f \u8fde\u901a \u7684\u3002\u5177\u6709\u8fd9\u6837\u6027\u8d28\u7684\u6709\u5411\u56fe\u79f0\u4e3a \u5f3a\u8fde\u901a \u3002\u5982\u679c\u6709\u5411\u56fe\u4e0d\u662f\u5f3a\u8fde\u901a\uff0c\u4f46\u4ed6\u7684 \u57fa\u7840\u56fe \uff08\u8fb9\u53bb\u6389\u65b9\u5411\u6240\u5f62\u6210\u7684\u56fe\uff09\u662f\u8fde\u901a\u7684\uff0c\u90a3\u4e48\u79f0\u4e3a \u5f31\u8054\u901a \u3002 DAG : Directed Acyclic Graph(\u6709\u5411\u65e0\u73af\u56fe)\uff0c\u6811\u662f\u8fde\u901a\u7684\u6709\u5411\u65e0\u73af\u56fe \u5ea6\u6570 : \u9644\u5c5e\u4e8e \\(v\\) \u7684\u8fb9\u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8fd8\u5206\u4e3a\u51fa\u5ea6\u548c\u5165\u5ea6\u3002\u7ed9\u4e00\u4e2a \\(n\\) \u4e2a\u8282\u70b9\u7684\u56fe \\(G\\) , \u6211\u4eec\u6709 \\(e=\\dfrac{\\sum\\limits_{i=0}^{n-1}d_i}{2}\\) \uff08\u5176\u4e2d \\(d_i=degree(v_i)\\) \u56fe\u7684\u8868\u793a \u00b6 \u90bb\u63a5\u77e9\u9635 \u00b6 \\[ adj\\_mat[i][j]=\\left\\{ \\begin{matrix} 1\\quad if\\ (v_i,v_j)\\ or\\ <v_i,v_j>\\in E(G)\\\\ 0\\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\ \\ \\ otherwise \\end{matrix} \\right. \\] \u5982\u679c \\(G\\) \u662f\u65e0\u5411\u56fe\uff0c\u90a3\u4e48\u90bb\u63a5\u77e9\u9635\u662f\u5bf9\u79f0\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53ea\u5b58\u4e00\u534a\u7684\u6570\u636e\u3002 \\(deg(i)=\\sum\\limits_{j=0}^{n-1}adj\\_mat[i][j]+\\sum\\limits_{j=0}^{n-1}adj\\_mat[j][i]\\) \u4f46\u8fd9\u6837\u7684\u7a7a\u95f4\u9700\u6c42\u662f \\(\\Theta(|V|^2)\\) , \u5bf9\u4e8e\u975e\u7a20\u5bc6\u56fe\u5f00\u9500\u592a\u5927\u3002 \u90bb\u63a5\u8868 \u00b6 \u5bf9\u6bcf\u4e00\u4e2a\u9876\u70b9\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u94fe\u8868\u5b58\u653e\u5176\u6240\u6709\u90bb\u63a5\u7684\u9876\u70b9\uff0c\u6b64\u65f6\u7684\u7a7a\u95f4\u9700\u6c42\u4e3a \\(O(|E|+|V|)\\) \u5728\u65e0\u5411\u56fe\u4e0a\uff0c\u6bcf\u6761\u8fb9 \\((u,v)\\) \u51fa\u73b0\u5728\u4e24\u4e2a\u8868\u4e2d\uff0c\u56e0\u6b64\u7a7a\u95f4\u7684\u4f7f\u7528\u662f\u53cc\u500d\u7684\uff0c$S=n heads + 2e edges $ \u5728\u65e0\u5411\u56fe\u4e2d\uff0c \\(v\\) \u7684\u5ea6\u6570\u5c31\u662f \\(graph[v]\\) \u4e2d\u7684\u8282\u70b9\u4e2a\u6570\u3002\u5982\u679c \\(G\\) \u662f \u6709\u5411\u56fe\uff0c\u8fd9\u6837\u53ea\u80fd\u627e\u5230\u51fa\u5ea6\uff0c\u5bf9\u4e8e\u5165\u5ea6\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5: \u589e\u52a0\u4e00\u4e2a\u94fe\u8868\uff0c\u5c06\u8fb9\u53cd\u5411\u5e76\u5b58\u5165 \u4f7f\u7528\u591a\u91cd\u8868 \u90bb\u63a5\u591a\u91cd\u8868\u5217 \u00b6 \u62d3\u6251\u6392\u5e8f \u00b6 AOV \u7f51\u7edc\uff1a\u6709\u5411\u56fe\u4e2d\uff0c\u7528\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u7528\u5f27\u8868\u793a\u6d3b\u52a8\u4e4b\u95f4\u7684\u4f18\u5148\u5173\u7cfb \u5728\u6709\u5411\u56fe\u4e2d\uff0c\u6211\u4eec\u79f0 \\(i\\) \u662f \\(j\\) \u7684 \u524d\u9a71 \uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u4ece \\(i\\) \u5230 \\(j\\) \u7684\u8def\u5f84 \u6211\u4eec\u79f0 \\(i\\) \u662f \\(j\\) \u7684 \u76f4\u63a5\u524d\u9a71 \uff0c\u5982\u679c \\(<i,j>\\in E(G)\\) . \u540c\u65f6 \\(j\\) \u79f0\u4e3a \\(i\\) \u7684 \u76f4\u63a5\u540e\u7ee7 \u53ef\u5b9e\u73b0\u7684 AOV \u7f51\u7edc\u4e00\u5b9a\u662f DAG. \u62d3\u6251\u6392\u5e8f \u662f\u5bf9\u6709\u5411\u65e0\u73af\u56fe\u7684\u9876\u70b9\u7684\u4e00\u79cd\u6392\u5e8f\uff0c\u5b83\u4f7f\u5f97\u5982\u679c \\(i\\) \u662f \\(j\\) \u7684\u524d\u9a71\uff0c\u90a3\u4e48\u5728\u62d3\u6251\u5e8f\u5217\u4e2d \\(i\\) \u4e00\u5b9a\u51fa\u73b0\u5728 \\(j\\) \u7684\u524d\u9762\u3002 \u5b9e\u73b0\u601d\u8def\uff1a\u5728\u5bb9\u5668\u4e2d\uff08\u961f\u5217/\u6808\uff09\u653e\u672a\u88ab\u6392\u5e8f\u4e14\u5ea6\u6570\u4e3a 0 \u7684\u8282\u70b9 void Topsort ( Graph G ) { Queue Q ; int Counter = 0 ; Vertex V , W ; Q = CreateQueue ( NumVertex ); MakeEmpty ( Q ); for ( each vertex V ) if ( Indegree [ V ] == 0 ) Enqueue ( V , Q ); while ( ! IsEmpty ( Q ) ) { V = Dequeue ( Q ); TopNum [ V ] = ++ Counter ; /* assign next */ for ( each W adjacent to V ) if ( \u2013 \u2013 Indegree [ W ] == 0 ) Enqueue ( W , Q ); } /* end-while */ if ( Counter != NumVertex ) Error ( \u201c Graph has a cycle \u201d ); DisposeQueue ( Q ); /* free memory */ } Note \u62d3\u6251\u6392\u5e8f\u53ef\u80fd\u4e0d\u662f\u552f\u4e00\u7684 \u6700\u77ed\u8def \u00b6 \u7ed9\u5b9a\u6709\u5411\u56fe \\(G=(V,E)\\) \u4ee5\u53ca\u4e00\u4e2a\u82b1\u8d39\u51fd\u6570 \\(c(e), e\\in E(G)\\) . \u4ece\u6e90\u70b9\u5230\u7ec8\u70b9\u7684\u4e00\u6761\u8def\u5f84 \\(P\\) \u7684\u957f\u5ea6\u5b9a\u4e49\u4e3a \\(\\sum\\limits_{e_i\\sub P}c(e_i)\\) \uff08\u4e5f\u79f0\u4e3a\u5e26\u6743\u8def\u5f84\u957f\uff09 \u5355\u6e90\u6700\u77ed\u8def\u5f84 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u8d4b\u6743\u56fe\u548c\u4e00\u4e2a\u7279\u5b9a\u9876\u70b9 \\(s\\) \u4f5c\u4e3a\u8f93\u5165\uff0c\u627e\u51fa\u4ece \\(s\\) \u5230 \\(G\\) \u4e2d\u6bcf\u4e00\u4e2a\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u5e26\u6743\u8def\u5f84\u3002 \u6ce8\u610f : \u5982\u679c\u8fd9\u91cc\u6709\u8d1f\u73af\uff0c\u90a3\u4e48\u6700\u77ed\u8def\u5f84\u5b9a\u4e49\u4e3a 0. \u65e0\u6743\u6700\u77ed\u8def\u5f84 \u00b6 \u91c7\u7528 BFS(Breadth-First Search) \u7684\u65b9\u5f0f\uff0c\u4ece \\(s\\) \u51fa\u53d1\u5bfb\u627e\u6240\u6709\u8ddd\u79bb\u4e3a 1 \u7684\u9876\u70b9(\u5373\u4e0e \\(s\\) \u90bb\u63a5)\u968f\u540e\u5bfb\u627e\u4e0e \\(s\\) \u8ddd\u79bb\u4e3a 2 \u7684\u9876\u70b9\uff0c\u5373\u4e0e\u521a\u521a\u90a3\u4e9b\u9876\u70b9\u90bb\u63a5\u7684\u9876\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 void Unweighted ( Table T ) { /* T is initialized with the source vertex S given */ Queue Q ; Vertex V , W ; Q = CreateQueue ( NumVertex ); MakeEmpty ( Q ); Enqueue ( S , Q ); /* Enqueue the source vertex */ while ( ! IsEmpty ( Q ) ) { V = Dequeue ( Q ); T [ V ]. Known = true ; /* not really necessary */ for ( each W adjacent to V ) if ( T [ W ]. Dist == Infinity ) { T [ W ]. Dist = T [ V ]. Dist + 1 ; T [ W ]. Path = V ; Enqueue ( W , Q ); } /* end-if Dist == Infinity */ } /* end-while */ DisposeQueue ( Q ); /* free memory */ } Dijkstra \u7b97\u6cd5 \u00b6 \u4ee4 S \u8868\u793a\u6e90\u70b9 s \u4ee5\u53ca\u5176\u4ed6\u5df2\u7ecf\u627e\u5230\u6700\u77ed\u8def\u7684\u8282\u70b9\u7684\u96c6\u5408\uff0c\u5bf9\u4e8e\u4e0d\u5728 S \u96c6\u5408\u4e2d\u7684\u8282\u70b9 u, \u6211\u4eec\u5b9a\u4e49 \\(dist[u]\\) \u8868\u793a\u6700\u77ed\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u5176\u4e2d\u8def\u5f84\u662f\u4ece \\(s\\rightarrow v_i\\rightarrow u(v_i\\in S)\\) . \u5982\u679c\u8def\u5f84\u662f\u975e\u964d\u5e8f\u751f\u6210\u7684\uff0c\u90a3\u4e48 \u6700\u77ed\u8def\u5f84\u4e00\u5b9a\u662f\u4ece \\(S\\) \u4e2d\u7684\u67d0\u4e2a\u70b9 \\(v_i\\) \u5230 \\(u\\) . \\(dist[u]=\\min\\{w\\notin S\\ |\\ dist[w]\\}\\) . \u5373\u6211\u4eec\u4ece \\(S\\) \u4e4b\u5916\u7684\u8282\u70b9\u4e2d\u9009\u62e9 \\(dist[u]\\) \u6700\u5c0f\u7684\u4f5c\u4e3a\u4e0b\u4e00\u4e2a \\(u\\) . \u5982\u679c \\(dist[u_1]<dist[u_2]\\) \u540c\u65f6\u6211\u4eec\u5c06 \\(u_1\\) \u52a0\u5165\u4e86 \\(S\\) , \u90a3\u4e48 \\(dist[u_2]\\) \u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u5982\u679c\u6539\u53d8\u4e86\uff0c\u90a3\u4e48 \\(dist[u_2]=dist[u_1]+length<u_1,u_2>\\) . void Dijkstra ( Table T ) { /* T is initialized by Figure 9.30 on p.303 */ Vertex V , W ; for ( ; ; ) { /* O( |V| ) */ V = smallest unknown distance vertex ; if ( V == NotAVertex ) break ; T [ V ]. Known = true ; for ( each W adjacent to V ) if ( ! T [ W ]. Known ) if ( T [ V ]. Dist + Cvw < T [ W ]. Dist ) { Decrease ( T [ W ]. Dist to T [ V ]. Dist + Cvw ); T [ W ]. Path = V ; } /* end-if update W */ } /* end-for( ; ; ) */ } /* not work for edge with negative cost */ \u603b\u7684\u8fd0\u884c\u65f6\u95f4 \\(O(|E|+|V|^2)\\) \u5177\u4f53\u5b9e\u73b0: \u901a\u8fc7\u626b\u63cf\u6574\u4e2a\u8868\u6765\u627e\u5230 smallest unknown distance vertex - \\(O(|V|^2+|E|)\\) \uff08\u5f53\u56fe\u662f\u7a20\u5bc6\u7684\u65f6\u5019\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u597d\u7684\uff09 \u4f7f\u7528\u5806\u3002\u9996\u5148\u6211\u4eec DeleteMin , \u968f\u540e\u53ef\u4ee5 DecreaseKey \u6765\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u6837\u6211\u4eec\u9700\u8981\u8bb0\u5f55 \\(d_i\\) \u7684\u503c\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5f53\u5806\u53d1\u751f\u53d8\u5316\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u66f4\u65b0\uff1b\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5728\u6bcf\u6b21\u66f4\u65b0\u540e\u5c06 \\(w\\) \u548c\u65b0\u503c \\(d_w\\) \u63d2\u5165\u5806\uff0c\u8fd9\u6837\u5806\u4e2d\u53ef\u80fd\u6709\u540c\u4e00\u9876\u70b9\u7684\u591a\u4e2a\u4ee3\u8868\u3002\u5f53\u5220\u9664\u6700\u5c0f\u503c\u7684\u65f6\u5019\u9700\u8981\u68c0\u67e5\u8fd9\u4e2a\u70b9\u662f\u4e0d\u662f\u5df2\u7ecf\u77e5\u9053\u7684\u3002 \u8d1f\u6743\u8fb9\u7684\u56fe \u00b6 void WeightedNegative ( Table T ) { /* T is initialized by Figure 9.30 on p.303 */ Queue Q ; Vertex V , W ; Q = CreateQueue ( NumVertex ); MakeEmpty ( Q ); Enqueue ( S , Q ); /* Enqueue the source vertex */ while ( ! IsEmpty ( Q ) ) { /* each vertex can dequeue at most |V| times */ V = Dequeue ( Q ); for ( each W adjacent to V ) if ( T [ V ]. Dist + Cvw < T [ W ]. Dist ) { T [ W ]. Dist = T [ V ]. Dist + Cvw ; T [ W ]. Path = V ; if ( W is not already in Q ) Enqueue ( W , Q ); } /* end-if update */ } /* end-while */ DisposeQueue ( Q ); /* free memory */ } /* negative-cost cycle will cause indefinite loop */ \u65e0\u5708\u56fe \u00b6 \u5982\u679c\u56fe\u662f\u65e0\u5708\u7684\uff0c\u6211\u4eec\u4ee5\u62d3\u6251\u5e8f\u9009\u62e9\u8282\u70b9\u6765\u6539\u8fdb\u7b97\u6cd5\u3002\u5f53\u9009\u62e9\u4e00\u4e2a\u9876\u70b9\u540e\uff0c\u6309\u7167\u62d3\u6251\u5e8f\u4ed6\u6ca1\u6709\u4ece\u672a\u77e5\u9876\u70b9\u53d1\u51fa\u7684\u8fdb\u5165\u8fb9\uff0c\u56e0\u6b64\u4ed6\u7684\u8ddd\u79bb\u4e0d\u53ef\u80fd\u518d\u964d\u4f4e\uff0c\u7b97\u6cd5\u5f97\u4ee5\u4e00\u6b21\u5b8c\u6210\u3002 \\(T=O(|V|+|E|)\\) \u800c\u4e14\u4e0d\u9700\u8981\u5806 \u5e94\u7528\uff1aAOE (Activity On Edge) \u7f51\u7edc Info digraph: \u6709\u5411\u56fe Multigraph: \u591a\u91cd\u56fe\uff0c\u5373\u6709\u91cd\u8fb9\u7684\u56fe cycle: \u5708 underlying graph: \u57fa\u7840\u56fe Adjacency Matrix: \u90bb\u63a5\u77e9\u9635 Adjacency Lists: \u90bb\u63a5\u8868 Adjacency Multilists: \u90bb\u63a5\u591a\u91cd\u8868\u5217","title":"\u56fe\u8bba"},{"location":"ds/graph/#_1","text":"","title":"\u56fe\u8bba"},{"location":"ds/graph/#_2","text":"\u4e00\u4e2a\u56fe \\(G=(V,E)\\) \u5176\u4e2d \\(V\\) \u662f\u8282\u70b9\u7684\u6709\u9650\u975e\u7a7a\u96c6\u5408, \\(E\\) \u662f\u8fb9\u7684\u6709\u9650\u975e\u7a7a\u96c6\u5408. \u6bcf\u4e00\u6761\u8fb9\u5c31\u662f\u4e00\u4e2a\u70b9\u5bf9 \\((v,w)\\) . \u65e0\u5411\u56fe: \\((v_i,v_j)=(v_j,v_i)\\) \u8868\u793a\u540c\u4e00\u6761\u8fb9 \u6709\u5411\u56fe: \\((v_i,v_j)\\neq (v_j,v_i)\\) \u5176\u4e2d \\((v_i,v_j)\\) \u8868\u793a\u7531 \\(v_i\\) (tail) \u6307\u5411 \\(v_j\\) (head) \u7684\u4e00\u6761\u8fb9\u3002 \u9650\u5236\uff1a\u81ea\u73af\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u540c\u65f6\u6211\u4eec\u4e0d\u8003\u8651\u591a\u91cd\u56fe \u5bf9\u4e8e \\((v_i,v_j)\\) \u8fd9\u6761\u8fb9\uff0c\u6211\u4eec\u79f0 \\(v_i,v_j\\) \u662f\u90bb\u63a5\u7684(adjacent), \u79f0 \\((v_i,v_j)\\) \u9644\u5c5e\u4e8e(incident) \\(v_i/v_j\\) \u5b8c\u5168\u56fe : \u6bcf\u4e00\u5bf9\u8282\u70b9\u95f4\u90fd\u5b58\u5728\u4e00\u6761\u8fb9\u7684\u56fe \u5b50\u56fe : \\(G'\\sub G\\) \u5373 \\(G'\\) \u4e2d\u7684\u70b9\u548c\u8fb9\u90fd\u5305\u542b\u5728 G \u4e2d( \\(V(G')\\sube V(G)\\quad E(G')\\sube E(G)\\) ) \u8def\u5f84 : \\(\\{v_p,v_{i1},v_{i2},\\ldots, v_{in},v_q\\}((v_i,v_i)\\in E)\\) \u79f0\u4e3a\u4ece \\(v_p\\) \u5230 \\(v_q\\) \u7684\u4e00\u6761\u8def\u5f84 \u8def\u5f84\u7684\u957f\u5ea6 \uff1a\u8def\u5f84\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf \u7b80\u5355\u8def\u5f84 : \\(v_{i1},v_{i2}...\\) \u5404\u4e0d\u76f8\u540c(\u6ce8\u610f\u7b2c\u4e00\u4e2a\u70b9\u53ef\u4ee5\u548c\u6700\u540e\u4e00\u4e2a\u70b9\u76f8\u540c) \u5708 : \\(v_p=v_q\\) \u7684\u7b80\u5355\u8def\u5f84 \u5982\u679c\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\u6bcf\u4e00\u4e2a\u9876\u70b9\u5230\u53e6\u4e00\u4e2a\u5176\u4ed6\u9876\u70b9\u90fd\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48\u65e0\u5411\u56fe\u662f \u8fde\u901a \u7684\u3002\u5177\u6709\u8fd9\u6837\u6027\u8d28\u7684\u6709\u5411\u56fe\u79f0\u4e3a \u5f3a\u8fde\u901a \u3002\u5982\u679c\u6709\u5411\u56fe\u4e0d\u662f\u5f3a\u8fde\u901a\uff0c\u4f46\u4ed6\u7684 \u57fa\u7840\u56fe \uff08\u8fb9\u53bb\u6389\u65b9\u5411\u6240\u5f62\u6210\u7684\u56fe\uff09\u662f\u8fde\u901a\u7684\uff0c\u90a3\u4e48\u79f0\u4e3a \u5f31\u8054\u901a \u3002 DAG : Directed Acyclic Graph(\u6709\u5411\u65e0\u73af\u56fe)\uff0c\u6811\u662f\u8fde\u901a\u7684\u6709\u5411\u65e0\u73af\u56fe \u5ea6\u6570 : \u9644\u5c5e\u4e8e \\(v\\) \u7684\u8fb9\u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8fd8\u5206\u4e3a\u51fa\u5ea6\u548c\u5165\u5ea6\u3002\u7ed9\u4e00\u4e2a \\(n\\) \u4e2a\u8282\u70b9\u7684\u56fe \\(G\\) , \u6211\u4eec\u6709 \\(e=\\dfrac{\\sum\\limits_{i=0}^{n-1}d_i}{2}\\) \uff08\u5176\u4e2d \\(d_i=degree(v_i)\\)","title":"\u5b9a\u4e49"},{"location":"ds/graph/#_3","text":"","title":"\u56fe\u7684\u8868\u793a"},{"location":"ds/graph/#_4","text":"\\[ adj\\_mat[i][j]=\\left\\{ \\begin{matrix} 1\\quad if\\ (v_i,v_j)\\ or\\ <v_i,v_j>\\in E(G)\\\\ 0\\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\ \\ \\ otherwise \\end{matrix} \\right. \\] \u5982\u679c \\(G\\) \u662f\u65e0\u5411\u56fe\uff0c\u90a3\u4e48\u90bb\u63a5\u77e9\u9635\u662f\u5bf9\u79f0\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53ea\u5b58\u4e00\u534a\u7684\u6570\u636e\u3002 \\(deg(i)=\\sum\\limits_{j=0}^{n-1}adj\\_mat[i][j]+\\sum\\limits_{j=0}^{n-1}adj\\_mat[j][i]\\) \u4f46\u8fd9\u6837\u7684\u7a7a\u95f4\u9700\u6c42\u662f \\(\\Theta(|V|^2)\\) , \u5bf9\u4e8e\u975e\u7a20\u5bc6\u56fe\u5f00\u9500\u592a\u5927\u3002","title":"\u90bb\u63a5\u77e9\u9635"},{"location":"ds/graph/#_5","text":"\u5bf9\u6bcf\u4e00\u4e2a\u9876\u70b9\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u94fe\u8868\u5b58\u653e\u5176\u6240\u6709\u90bb\u63a5\u7684\u9876\u70b9\uff0c\u6b64\u65f6\u7684\u7a7a\u95f4\u9700\u6c42\u4e3a \\(O(|E|+|V|)\\) \u5728\u65e0\u5411\u56fe\u4e0a\uff0c\u6bcf\u6761\u8fb9 \\((u,v)\\) \u51fa\u73b0\u5728\u4e24\u4e2a\u8868\u4e2d\uff0c\u56e0\u6b64\u7a7a\u95f4\u7684\u4f7f\u7528\u662f\u53cc\u500d\u7684\uff0c$S=n heads + 2e edges $ \u5728\u65e0\u5411\u56fe\u4e2d\uff0c \\(v\\) \u7684\u5ea6\u6570\u5c31\u662f \\(graph[v]\\) \u4e2d\u7684\u8282\u70b9\u4e2a\u6570\u3002\u5982\u679c \\(G\\) \u662f \u6709\u5411\u56fe\uff0c\u8fd9\u6837\u53ea\u80fd\u627e\u5230\u51fa\u5ea6\uff0c\u5bf9\u4e8e\u5165\u5ea6\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5: \u589e\u52a0\u4e00\u4e2a\u94fe\u8868\uff0c\u5c06\u8fb9\u53cd\u5411\u5e76\u5b58\u5165 \u4f7f\u7528\u591a\u91cd\u8868","title":"\u90bb\u63a5\u8868"},{"location":"ds/graph/#_6","text":"","title":"\u90bb\u63a5\u591a\u91cd\u8868\u5217"},{"location":"ds/graph/#_7","text":"AOV \u7f51\u7edc\uff1a\u6709\u5411\u56fe\u4e2d\uff0c\u7528\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u7528\u5f27\u8868\u793a\u6d3b\u52a8\u4e4b\u95f4\u7684\u4f18\u5148\u5173\u7cfb \u5728\u6709\u5411\u56fe\u4e2d\uff0c\u6211\u4eec\u79f0 \\(i\\) \u662f \\(j\\) \u7684 \u524d\u9a71 \uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u4ece \\(i\\) \u5230 \\(j\\) \u7684\u8def\u5f84 \u6211\u4eec\u79f0 \\(i\\) \u662f \\(j\\) \u7684 \u76f4\u63a5\u524d\u9a71 \uff0c\u5982\u679c \\(<i,j>\\in E(G)\\) . \u540c\u65f6 \\(j\\) \u79f0\u4e3a \\(i\\) \u7684 \u76f4\u63a5\u540e\u7ee7 \u53ef\u5b9e\u73b0\u7684 AOV \u7f51\u7edc\u4e00\u5b9a\u662f DAG. \u62d3\u6251\u6392\u5e8f \u662f\u5bf9\u6709\u5411\u65e0\u73af\u56fe\u7684\u9876\u70b9\u7684\u4e00\u79cd\u6392\u5e8f\uff0c\u5b83\u4f7f\u5f97\u5982\u679c \\(i\\) \u662f \\(j\\) \u7684\u524d\u9a71\uff0c\u90a3\u4e48\u5728\u62d3\u6251\u5e8f\u5217\u4e2d \\(i\\) \u4e00\u5b9a\u51fa\u73b0\u5728 \\(j\\) \u7684\u524d\u9762\u3002 \u5b9e\u73b0\u601d\u8def\uff1a\u5728\u5bb9\u5668\u4e2d\uff08\u961f\u5217/\u6808\uff09\u653e\u672a\u88ab\u6392\u5e8f\u4e14\u5ea6\u6570\u4e3a 0 \u7684\u8282\u70b9 void Topsort ( Graph G ) { Queue Q ; int Counter = 0 ; Vertex V , W ; Q = CreateQueue ( NumVertex ); MakeEmpty ( Q ); for ( each vertex V ) if ( Indegree [ V ] == 0 ) Enqueue ( V , Q ); while ( ! IsEmpty ( Q ) ) { V = Dequeue ( Q ); TopNum [ V ] = ++ Counter ; /* assign next */ for ( each W adjacent to V ) if ( \u2013 \u2013 Indegree [ W ] == 0 ) Enqueue ( W , Q ); } /* end-while */ if ( Counter != NumVertex ) Error ( \u201c Graph has a cycle \u201d ); DisposeQueue ( Q ); /* free memory */ } Note \u62d3\u6251\u6392\u5e8f\u53ef\u80fd\u4e0d\u662f\u552f\u4e00\u7684","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"ds/graph/#_8","text":"\u7ed9\u5b9a\u6709\u5411\u56fe \\(G=(V,E)\\) \u4ee5\u53ca\u4e00\u4e2a\u82b1\u8d39\u51fd\u6570 \\(c(e), e\\in E(G)\\) . \u4ece\u6e90\u70b9\u5230\u7ec8\u70b9\u7684\u4e00\u6761\u8def\u5f84 \\(P\\) \u7684\u957f\u5ea6\u5b9a\u4e49\u4e3a \\(\\sum\\limits_{e_i\\sub P}c(e_i)\\) \uff08\u4e5f\u79f0\u4e3a\u5e26\u6743\u8def\u5f84\u957f\uff09","title":"\u6700\u77ed\u8def"},{"location":"ds/graph/#_9","text":"\u7ed9\u5b9a\u4e00\u4e2a\u8d4b\u6743\u56fe\u548c\u4e00\u4e2a\u7279\u5b9a\u9876\u70b9 \\(s\\) \u4f5c\u4e3a\u8f93\u5165\uff0c\u627e\u51fa\u4ece \\(s\\) \u5230 \\(G\\) \u4e2d\u6bcf\u4e00\u4e2a\u5176\u4ed6\u9876\u70b9\u7684\u6700\u77ed\u5e26\u6743\u8def\u5f84\u3002 \u6ce8\u610f : \u5982\u679c\u8fd9\u91cc\u6709\u8d1f\u73af\uff0c\u90a3\u4e48\u6700\u77ed\u8def\u5f84\u5b9a\u4e49\u4e3a 0.","title":"\u5355\u6e90\u6700\u77ed\u8def\u5f84"},{"location":"ds/graph/#_10","text":"\u91c7\u7528 BFS(Breadth-First Search) \u7684\u65b9\u5f0f\uff0c\u4ece \\(s\\) \u51fa\u53d1\u5bfb\u627e\u6240\u6709\u8ddd\u79bb\u4e3a 1 \u7684\u9876\u70b9(\u5373\u4e0e \\(s\\) \u90bb\u63a5)\u968f\u540e\u5bfb\u627e\u4e0e \\(s\\) \u8ddd\u79bb\u4e3a 2 \u7684\u9876\u70b9\uff0c\u5373\u4e0e\u521a\u521a\u90a3\u4e9b\u9876\u70b9\u90bb\u63a5\u7684\u9876\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 void Unweighted ( Table T ) { /* T is initialized with the source vertex S given */ Queue Q ; Vertex V , W ; Q = CreateQueue ( NumVertex ); MakeEmpty ( Q ); Enqueue ( S , Q ); /* Enqueue the source vertex */ while ( ! IsEmpty ( Q ) ) { V = Dequeue ( Q ); T [ V ]. Known = true ; /* not really necessary */ for ( each W adjacent to V ) if ( T [ W ]. Dist == Infinity ) { T [ W ]. Dist = T [ V ]. Dist + 1 ; T [ W ]. Path = V ; Enqueue ( W , Q ); } /* end-if Dist == Infinity */ } /* end-while */ DisposeQueue ( Q ); /* free memory */ }","title":"\u65e0\u6743\u6700\u77ed\u8def\u5f84"},{"location":"ds/graph/#dijkstra","text":"\u4ee4 S \u8868\u793a\u6e90\u70b9 s \u4ee5\u53ca\u5176\u4ed6\u5df2\u7ecf\u627e\u5230\u6700\u77ed\u8def\u7684\u8282\u70b9\u7684\u96c6\u5408\uff0c\u5bf9\u4e8e\u4e0d\u5728 S \u96c6\u5408\u4e2d\u7684\u8282\u70b9 u, \u6211\u4eec\u5b9a\u4e49 \\(dist[u]\\) \u8868\u793a\u6700\u77ed\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u5176\u4e2d\u8def\u5f84\u662f\u4ece \\(s\\rightarrow v_i\\rightarrow u(v_i\\in S)\\) . \u5982\u679c\u8def\u5f84\u662f\u975e\u964d\u5e8f\u751f\u6210\u7684\uff0c\u90a3\u4e48 \u6700\u77ed\u8def\u5f84\u4e00\u5b9a\u662f\u4ece \\(S\\) \u4e2d\u7684\u67d0\u4e2a\u70b9 \\(v_i\\) \u5230 \\(u\\) . \\(dist[u]=\\min\\{w\\notin S\\ |\\ dist[w]\\}\\) . \u5373\u6211\u4eec\u4ece \\(S\\) \u4e4b\u5916\u7684\u8282\u70b9\u4e2d\u9009\u62e9 \\(dist[u]\\) \u6700\u5c0f\u7684\u4f5c\u4e3a\u4e0b\u4e00\u4e2a \\(u\\) . \u5982\u679c \\(dist[u_1]<dist[u_2]\\) \u540c\u65f6\u6211\u4eec\u5c06 \\(u_1\\) \u52a0\u5165\u4e86 \\(S\\) , \u90a3\u4e48 \\(dist[u_2]\\) \u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u5982\u679c\u6539\u53d8\u4e86\uff0c\u90a3\u4e48 \\(dist[u_2]=dist[u_1]+length<u_1,u_2>\\) . void Dijkstra ( Table T ) { /* T is initialized by Figure 9.30 on p.303 */ Vertex V , W ; for ( ; ; ) { /* O( |V| ) */ V = smallest unknown distance vertex ; if ( V == NotAVertex ) break ; T [ V ]. Known = true ; for ( each W adjacent to V ) if ( ! T [ W ]. Known ) if ( T [ V ]. Dist + Cvw < T [ W ]. Dist ) { Decrease ( T [ W ]. Dist to T [ V ]. Dist + Cvw ); T [ W ]. Path = V ; } /* end-if update W */ } /* end-for( ; ; ) */ } /* not work for edge with negative cost */ \u603b\u7684\u8fd0\u884c\u65f6\u95f4 \\(O(|E|+|V|^2)\\) \u5177\u4f53\u5b9e\u73b0: \u901a\u8fc7\u626b\u63cf\u6574\u4e2a\u8868\u6765\u627e\u5230 smallest unknown distance vertex - \\(O(|V|^2+|E|)\\) \uff08\u5f53\u56fe\u662f\u7a20\u5bc6\u7684\u65f6\u5019\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u597d\u7684\uff09 \u4f7f\u7528\u5806\u3002\u9996\u5148\u6211\u4eec DeleteMin , \u968f\u540e\u53ef\u4ee5 DecreaseKey \u6765\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u6837\u6211\u4eec\u9700\u8981\u8bb0\u5f55 \\(d_i\\) \u7684\u503c\u5728\u5806\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5f53\u5806\u53d1\u751f\u53d8\u5316\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u66f4\u65b0\uff1b\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5728\u6bcf\u6b21\u66f4\u65b0\u540e\u5c06 \\(w\\) \u548c\u65b0\u503c \\(d_w\\) \u63d2\u5165\u5806\uff0c\u8fd9\u6837\u5806\u4e2d\u53ef\u80fd\u6709\u540c\u4e00\u9876\u70b9\u7684\u591a\u4e2a\u4ee3\u8868\u3002\u5f53\u5220\u9664\u6700\u5c0f\u503c\u7684\u65f6\u5019\u9700\u8981\u68c0\u67e5\u8fd9\u4e2a\u70b9\u662f\u4e0d\u662f\u5df2\u7ecf\u77e5\u9053\u7684\u3002","title":"Dijkstra \u7b97\u6cd5"},{"location":"ds/graph/#_11","text":"void WeightedNegative ( Table T ) { /* T is initialized by Figure 9.30 on p.303 */ Queue Q ; Vertex V , W ; Q = CreateQueue ( NumVertex ); MakeEmpty ( Q ); Enqueue ( S , Q ); /* Enqueue the source vertex */ while ( ! IsEmpty ( Q ) ) { /* each vertex can dequeue at most |V| times */ V = Dequeue ( Q ); for ( each W adjacent to V ) if ( T [ V ]. Dist + Cvw < T [ W ]. Dist ) { T [ W ]. Dist = T [ V ]. Dist + Cvw ; T [ W ]. Path = V ; if ( W is not already in Q ) Enqueue ( W , Q ); } /* end-if update */ } /* end-while */ DisposeQueue ( Q ); /* free memory */ } /* negative-cost cycle will cause indefinite loop */","title":"\u8d1f\u6743\u8fb9\u7684\u56fe"},{"location":"ds/graph/#_12","text":"\u5982\u679c\u56fe\u662f\u65e0\u5708\u7684\uff0c\u6211\u4eec\u4ee5\u62d3\u6251\u5e8f\u9009\u62e9\u8282\u70b9\u6765\u6539\u8fdb\u7b97\u6cd5\u3002\u5f53\u9009\u62e9\u4e00\u4e2a\u9876\u70b9\u540e\uff0c\u6309\u7167\u62d3\u6251\u5e8f\u4ed6\u6ca1\u6709\u4ece\u672a\u77e5\u9876\u70b9\u53d1\u51fa\u7684\u8fdb\u5165\u8fb9\uff0c\u56e0\u6b64\u4ed6\u7684\u8ddd\u79bb\u4e0d\u53ef\u80fd\u518d\u964d\u4f4e\uff0c\u7b97\u6cd5\u5f97\u4ee5\u4e00\u6b21\u5b8c\u6210\u3002 \\(T=O(|V|+|E|)\\) \u800c\u4e14\u4e0d\u9700\u8981\u5806 \u5e94\u7528\uff1aAOE (Activity On Edge) \u7f51\u7edc Info digraph: \u6709\u5411\u56fe Multigraph: \u591a\u91cd\u56fe\uff0c\u5373\u6709\u91cd\u8fb9\u7684\u56fe cycle: \u5708 underlying graph: \u57fa\u7840\u56fe Adjacency Matrix: \u90bb\u63a5\u77e9\u9635 Adjacency Lists: \u90bb\u63a5\u8868 Adjacency Multilists: \u90bb\u63a5\u591a\u91cd\u8868\u5217","title":"\u65e0\u5708\u56fe"},{"location":"ds/hash/","text":"\u6563\u5217 \u00b6 \u57fa\u672c\u601d\u60f3 \u00b6 \u7406\u60f3\u7684\u6563\u5217\u8868\u662f\u4e00\u4e2a\u542b\u6709\u5173\u952e\u5b57\u7684\u5177\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u7ec4\u3002 ADT \u6a21\u578b \u5bf9\u8c61\uff1a\u4e00\u7ec4 \u540d\u79f0-\u5c5e\u6027 \u5bf9\uff0c\u5176\u4e2d\u540d\u79f0\u662f\u552f\u4e00\u7684\u3002 \u64cd\u4f5c \u521b\u5efa\u6563\u5217\u8868 \u67e5\u8be2\u5173\u952e\u5b57\u662f\u5426\u5728\u6563\u5217\u8868\u4e2d \u67e5\u8be2\u5173\u952e\u5b57 \u63d2\u5165\u5173\u952e\u5b57 \u5220\u9664\u5173\u952e\u5b57 \u5bf9\u6bcf\u4e2a\u6807\u8bc6\u7b26 x , \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a \u6563\u5217\u51fd\u6570 f(x)= position of x in ht[ ] ( i.e. the index of the bucket that contains x ) \u8fd9\u91cc\u6211\u4eec\u7528 \\(T\\) \u8868\u793a x \u53ef\u80fd\u7684\u4e0d\u540c\u503c; \\(n\\) \u8868\u793a ht[] \u4e2d\u6240\u6709\u4e0d\u540c\u6807\u8bc6\u7b26\u7684\u4e2a\u6570; \u6807\u8bc6\u7b26\u5bc6\u5ea6\u5b9a\u4e49\u4e3a \\(\\dfrac{n}{T}\\) ; \u88c5\u8f7d\u5bc6\u5ea6\u5b9a\u4e49\u4e3a \\(\\dfrac{n}{sb}\\) \u5f53\u6211\u4eec\u628a\u4e24\u4e2a\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u6876\u91cc\u65f6\uff0c \u51b2\u7a81 \u53d1\u751f\u4e86( i.e. \\(f(i_1)=f(i_2), i_1\\neq i_2\\) ) \u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u65b0\u7684\u6807\u8bc6\u7b26\u6620\u5c04\u5230\u4e00\u4e2a\u6ee1\u7684\u6876\u91cc\u65f6\uff0c \u6ea2\u51fa \u53d1\u751f\u4e86 \u6ca1\u6709\u6ea2\u51fa\u65f6, \\(T_{search} = T_{insert} = T_{delete} = O( 1 )\\) \u6563\u5217\u51fd\u6570 \u00b6 \\(f\\) \u8981\u6ee1\u8db3\u7684\u6027\u8d28\uff1a \u5bb9\u6613\u8ba1\u7b97\uff0c\u6700\u5c0f\u5316\u51b2\u7a81\u7684\u6570\u91cf \\(f\\) \u5e94\u8be5\u662f\u65e0\u504f\u89c1\u7684\uff0c\u5373 \\(\\forall x,i\\) \u6211\u4eec\u6709 \\(P(f(x)=i)=\\dfrac{1}{b}\\) . \u8fd9\u6837\u7684\u6563\u5217\u51fd\u6570\u79f0\u4e3a \u5747\u5300\u6563\u5217\u51fd\u6570 . TableSize \u5e94\u8be5\u662f\u4e00\u4e2a\u7d20\u6570\uff0c\u8fd9\u6837\u5bf9\u968f\u673a\u8f93\u5165\uff0c\u5173\u952e\u5b57\u7684\u5206\u5e03\u6bd4\u8f83\u5747\u5300 \u5982 \\(f(x)=(\\sum x[N-i-1]*32^i)\\%TableSize\\) \u5206\u79bb\u94fe\u63a5 \u00b6 \u89e3\u51b3\u51b2\u7a81\u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\u53eb\u4f5c\u5206\u79bb\u94fe\u63a5\u6cd5\u3002\u5176\u505a\u6cd5\u662f\u5c06\u6563\u5217\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u503c\u7684\u6240\u6709\u5143\u7d20\u4fdd\u5b58\u5728\u4e00\u4e2a\u5217\u8868\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u94fe\u8868\u7684\u65b9\u5f0f\u5b58\u50a8\u3002 \u7ed3\u6784\u4f53\u5b9a\u4e49 struct ListNode ; typedef struct ListNode * Position ; struct HashTbl ; typedef struct HashTbl * HashTable ; struct ListNode { ElementType Element ; Position Next ; }; typedef Position List ; /* List *TheList will be an array of lists, allocated later */ /* The lists use headers (for simplicity), */ /* though this wastes space */ struct HashTbl { int TableSize ; List * TheLists ; }; \u521b\u5efa\u7a7a\u8868 HashTable InitializeTable ( int TableSize ) { HashTable H ; int i ; if ( TableSize < MinTableSize ) { Error ( \"Table size too small\" ); return NULL ; } H = malloc ( sizeof ( struct HashTbl ) ); /* Allocate table */ if ( H == NULL ) FatalError ( \"Out of space!!!\" ); H -> TableSize = NextPrime ( TableSize ); /* Better be prime */ H -> TheLists = malloc ( sizeof ( List ) * H -> TableSize ); /*Array of lists*/ if ( H -> TheLists == NULL ) FatalError ( \"Out of space!!!\" ); for ( i = 0 ; i < H -> TableSize ; i ++ ) { /* Allocate list headers */ H -> TheLists [ i ] = malloc ( sizeof ( struct ListNode ) ); /* Slow! */ if ( H -> TheLists [ i ] == NULL ) FatalError ( \"Out of space!!!\" ); else H -> TheLists [ i ] -> Next = NULL ; } return H ; } \u67e5\u8be2\u5173\u952e\u5b57 Position Find ( ElementType Key , HashTable H ) { Position P ; List L ; L = H -> TheLists [ Hash ( Key , H -> TableSize ) ]; P = L -> Next ; while ( P != NULL && P -> Element != Key ) /* Probably need strcmp */ P = P -> Next ; return P ; } \u63d2\u5165\u5173\u952e\u5b57 \u9996\u5148\u6211\u4eec\u67e5\u627e\u8fd9\u4e2a\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u503c\u5df2\u7ecf\u5b58\u5728\u90a3\u4e48\u6211\u4eec\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002 void Insert ( ElementType Key , HashTable H ) { Position Pos , NewCell ; List L ; Pos = Find ( Key , H ); if ( Pos == NULL ) { /* Key is not found, then insert */ NewCell = malloc ( sizeof ( struct ListNode ) ); if ( NewCell == NULL ) FatalError ( \"Out of space!!!\" ); else { L = H -> TheLists [ Hash ( Key , H -> TableSize ) ]; NewCell -> Next = L -> Next ; NewCell -> Element = Key ; /* Probably need strcpy! */ L -> Next = NewCell ; } } } \u5f00\u653e\u5730\u5740 \u00b6 \u5f00\u653e\u5730\u5740\u6cd5\uff0c\u5f53\u6709\u51b2\u7a81\u53d1\u751f\u65f6\uff0c\u5c1d\u8bd5\u9009\u62e9\u5176\u4ed6\u7684\u5355\u5143\uff0c\u76f4\u5230\u627e\u5230\u7a7a\u7684\u5355\u5143\u4e3a\u6b62\u3002 \u4e00\u822c\u5730, \\(h_0(X),h_1(X),\\ldots,\\) \u5176\u4e2d $h_i(X)=(Hash(X)+F(i)) mod TableSize $ \u4e00\u822c\u6765\u8bf4 \\(\\lambda<0.5\\) Algorithm : insert key into an array of hash table { index = hash ( key ); initialize i = 0 ------ the counter of probing ; while ( collision at index ) { index = ( hash ( key ) + f ( i ) ) % TableSize ; if ( table is full ) break ; else i ++ ; } if ( table is full ) ERROR ( \u201c No space left \u201d ); else insert key at index ; } \u7ebf\u6027\u63a2\u6d4b\u6cd5 \u00b6 \u5728\u7ebf\u6027\u63a2\u6d4b\u6cd5\u4e2d\uff0c\u51fd\u6570 \\(F\\) \u662f \\(i\\) \u7684\u7ebf\u6027\u51fd\u6570\uff0c\u5178\u578b\u60c5\u5f62\u662f \\(F(i)=i\\) . \u8fd9\u76f8\u5f53\u4e8e\u9010\u4e2a\u63a2\u6d4b\u5355\u5143\uff08\u5fc5\u8981\u65f6\u53ef\u4ee5\u7ed5\u56de\u5230\u7b2c\u4e00\u4e2a\u5355\u5143\uff09\u4ee5\u67e5\u627e\u51fa\u4e00\u4e2a\u7a7a\u5355\u5143\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u4f7f\u7528\u7ebf\u6027\u63a2\u6d4b\u7684\u63a2\u6d4b\u6b21\u6570\u5bf9\u4e8e\u63d2\u5165\u548c\u4e0d\u6210\u529f\u7684\u67e5\u627e\u6765\u8bf4\u7ea6\u4e3a \\(\\dfrac{1}{2}(1+\\dfrac{1}{(1-\\lambda)^2})\\) \u6b21; \u5bf9\u4e8e\u6210\u529f\u7684\u67e5\u627e\u6765\u8bf4\u5219\u9700 \\(\\dfrac{1}{2}(1+\\dfrac{1}{1-\\lambda})\\) \u6b21 \u5e73\u65b9\u63a2\u6d4b\u6cd5 \u00b6 \u5e73\u65b9\u63a2\u6d4b\u6cd5\u662f\u6d88\u9664\u7ebf\u6027\u63a2\u6d4b\u4e2d\u4e00\u6b21\u805a\u96c6\u95ee\u9898\u7684\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5\u3002\u51b2\u7a81\u51fd\u6570\u4e3a\u4e8c\u6b21\u51fd\u6570\uff0c\u4e00\u822c\u4e3a \\(F(i)=i^2\\) \u5b9a\u7406: \u5982\u679c\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\uff0c\u4e14\u8868\u7684\u5927\u5c0f\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f53\u8868\u81f3\u5c11\u6709\u4e00\u534a\u4e3a\u7a7a\u65f6\uff0c\u603b\u80fd\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002 \u5bf9\u4e8e\u4efb\u610f\u5143\u7d20 \\(x\\) , \u5b83\u6709 \\(\\lceil TableSize/2 \\rceil\\) \u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\u53ef\u80fd\u653e\u7f6e\u8fd9\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6700\u591a $\\lfloor TableSize/2 \\rfloor $ \u4f4d\u7f6e\u88ab\u4f7f\u7528\uff0c\u90a3\u4e48\u603b\u80fd\u627e\u5230\u653e \\(x\\) \u7684\u7a7a\u5355\u5143\u3002 \u67e5\u627e\u5143\u7d20 \\(F(i)=F(i-1)+i^2-(i-1)^2=F(i-1)+2i-1\\) \u8fd9\u91cc while \u8bed\u53e5\u7684\u6d4b\u8bd5\u987a\u5e8f\u4e0d\u80fd\u6539\u53d8\u3002\u5982\u679c\u662f empty \uff0c\u5219 key \u6ca1\u6709\u5b9a\u4e49\uff0c\u5148\u5224\u65ad\u4f1a\u51fa\u9519\u3002 \u5047\u8bbe\u63a2\u6d4b\u6b65\u6570 i \u4e0d\u8d85\u8fc7 \\(\\dfrac{TS}{2}+1\\) \u6b65\uff0c\u5373\u5047\u8bbe\u8868 \\(<50\\%\\) \u3002\u8fd9\u65f6 CurrentPos+2i-1 <= 2TS-1 \uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u51cf\u6cd5\u3002 Position Find ( ElementType Key , HashTable H ) { Position CurrentPos ; int CollisionNum ; CollisionNum = 0 ; CurrentPos = Hash ( Key , H -> TableSize ); while ( H -> TheCells [ CurrentPos ]. Info != Empty && H -> TheCells [ CurrentPos ]. Element != Key ) { CurrentPos += 2 * ++ CollisionNum \uf02d 1 ; if ( CurrentPos >= H -> TableSize ) CurrentPos \uf02d = H -> TableSize ; } return CurrentPos ; } \u63d2\u5165\u5143\u7d20 void Insert ( ElementType Key , HashTable H ) { Position Pos ; Pos = Find ( Key , H ); if ( H -> TheCells [ Pos ]. Info != Legitimate ) { /* OK to insert here */ H -> TheCells [ Pos ]. Info = Legitimate ; H -> TheCells [ Pos ]. Element = Key ; /* Probably need strcpy */ } } \u6563\u5217\u5230\u540c\u4e00\u4f4d\u7f6e\u4e0a\u7684\u90a3\u4e9b\u5143\u7d20\u5c06\u63a2\u6d4b\u76f8\u540c\u7684\u5907\u9009\u5355\u5143\uff0c\u8fd9\u79f0\u4e3a \u4e8c\u6b21\u805a\u96c6 \u3002 \u53cc\u6563\u5217 \u00b6 \\(f(i)=i*hash_2(X)\\) \u6211\u4eec\u5728 \\(X\\) \u8ddd\u79bb \\(hash_2(X),2hash_2(X),\\ldots\\) \u7b49\u4f4d\u7f6e\u8fdb\u884c\u63a2\u6d4b\u3002 \u5e38\u7528 \\(hash_2(X)=R-(X mod R)\\) , \u5176\u4e2d \\(R\\) \u662f\u4e00\u4e2a\u6bd4 \\(TableSize\\) \u5c0f\u7684\u7d20\u6570\u3002 \u5982\u679c\u6b63\u786e\u5b9e\u73b0\u4e86\u53cc\u91cd\u54c8\u5e0c\uff0c\u6a21\u62df\u8868\u660e\u9884\u671f\u7684\u63a2\u6d4b\u6570\u91cf\u51e0\u4e4e\u4e0e\u968f\u673a\u51b2\u7a81\u89e3\u51b3\u7b56\u7565\u76f8\u540c\u3002 \u4e8c\u6b21\u63a2\u6d4b\u4e0d\u9700\u8981\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u54c8\u5e0c\u51fd\u6570\uff0c\u56e0\u6b64\u5728\u5b9e\u8df5\u4e2d\u53ef\u80fd\u66f4\u7b80\u5355\u3001\u66f4\u5feb\u3002 \u518d\u6563\u5217 \u00b6 \u5bf9\u4e8e\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\u7684\u5f00\u653e\u5730\u5740\u6563\u5217\u6cd5\uff0c\u5982\u679c\u8868\u7684\u5143\u7d20\u8fc7\u591a\uff0c\u90a3\u4e48\u64cd\u4f5c\u7684\u8fd0\u884c\u65f6\u95f4\u5c06\u5f00\u59cb\u6d88\u8017\u8fc7\u957f\u3002 \u5efa\u7acb\u4e00\u4e2a\u4e24\u500d\u5927\u7684\u8868 \u626b\u63cf\u539f\u59cb\u6563\u5217\u8868 \u5229\u7528\u65b0\u7684\u6563\u5217\u51fd\u6570\u5c06\u5143\u7d20\u6620\u5c04\u5230\u65b0\u7684\u6563\u5217\u503c\uff0c\u5e76\u63d2\u5165 \\(T(N)=O(N)\\) \u4ec0\u4e48\u65f6\u5019\u518d\u6563\u5217\uff1f \u8868\u586b\u6ee1\u4e00\u534a\u5c31\u518d\u6563\u5217 \u5f53\u63d2\u5165\u5931\u8d25\u65f6 \u5f53\u8868\u8fbe\u5230\u67d0\u4e00\u4e2a\u88c5\u586b\u56e0\u5b50\u65f6\u8fdb\u884c\u518d\u6563\u5217\u3002 \u901a\u5e38\u5728\u91cd\u54c8\u5e0c\u4e4b\u524d\u5e94\u8be5\u6709 \\(N/2\\) \u4e2a\u63d2\u5165\uff0c\u6240\u4ee5 \\(O(N)\\) \u91cd\u54c8\u5e0c\u53ea\u4f1a\u7ed9\u6bcf\u4e2a\u63d2\u5165\u589e\u52a0\u4e00\u4e2a\u6052\u5b9a\u7684\u4ee3\u4ef7\u3002 \u7136\u800c\uff0c\u5728\u4ea4\u4e92\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u5e78\u7684\u7528\u6237\u7684\u63d2\u5165\u5bfc\u81f4\u91cd\u65b0\u6563\u5217\uff0c\u53ef\u80fd\u4f1a\u770b\u5230\u901f\u5ea6\u51cf\u6162\u3002","title":"\u6563\u5217"},{"location":"ds/hash/#_1","text":"","title":"\u6563\u5217"},{"location":"ds/hash/#_2","text":"\u7406\u60f3\u7684\u6563\u5217\u8868\u662f\u4e00\u4e2a\u542b\u6709\u5173\u952e\u5b57\u7684\u5177\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u7ec4\u3002 ADT \u6a21\u578b \u5bf9\u8c61\uff1a\u4e00\u7ec4 \u540d\u79f0-\u5c5e\u6027 \u5bf9\uff0c\u5176\u4e2d\u540d\u79f0\u662f\u552f\u4e00\u7684\u3002 \u64cd\u4f5c \u521b\u5efa\u6563\u5217\u8868 \u67e5\u8be2\u5173\u952e\u5b57\u662f\u5426\u5728\u6563\u5217\u8868\u4e2d \u67e5\u8be2\u5173\u952e\u5b57 \u63d2\u5165\u5173\u952e\u5b57 \u5220\u9664\u5173\u952e\u5b57 \u5bf9\u6bcf\u4e2a\u6807\u8bc6\u7b26 x , \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a \u6563\u5217\u51fd\u6570 f(x)= position of x in ht[ ] ( i.e. the index of the bucket that contains x ) \u8fd9\u91cc\u6211\u4eec\u7528 \\(T\\) \u8868\u793a x \u53ef\u80fd\u7684\u4e0d\u540c\u503c; \\(n\\) \u8868\u793a ht[] \u4e2d\u6240\u6709\u4e0d\u540c\u6807\u8bc6\u7b26\u7684\u4e2a\u6570; \u6807\u8bc6\u7b26\u5bc6\u5ea6\u5b9a\u4e49\u4e3a \\(\\dfrac{n}{T}\\) ; \u88c5\u8f7d\u5bc6\u5ea6\u5b9a\u4e49\u4e3a \\(\\dfrac{n}{sb}\\) \u5f53\u6211\u4eec\u628a\u4e24\u4e2a\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u6876\u91cc\u65f6\uff0c \u51b2\u7a81 \u53d1\u751f\u4e86( i.e. \\(f(i_1)=f(i_2), i_1\\neq i_2\\) ) \u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u65b0\u7684\u6807\u8bc6\u7b26\u6620\u5c04\u5230\u4e00\u4e2a\u6ee1\u7684\u6876\u91cc\u65f6\uff0c \u6ea2\u51fa \u53d1\u751f\u4e86 \u6ca1\u6709\u6ea2\u51fa\u65f6, \\(T_{search} = T_{insert} = T_{delete} = O( 1 )\\)","title":"\u57fa\u672c\u601d\u60f3"},{"location":"ds/hash/#_3","text":"\\(f\\) \u8981\u6ee1\u8db3\u7684\u6027\u8d28\uff1a \u5bb9\u6613\u8ba1\u7b97\uff0c\u6700\u5c0f\u5316\u51b2\u7a81\u7684\u6570\u91cf \\(f\\) \u5e94\u8be5\u662f\u65e0\u504f\u89c1\u7684\uff0c\u5373 \\(\\forall x,i\\) \u6211\u4eec\u6709 \\(P(f(x)=i)=\\dfrac{1}{b}\\) . \u8fd9\u6837\u7684\u6563\u5217\u51fd\u6570\u79f0\u4e3a \u5747\u5300\u6563\u5217\u51fd\u6570 . TableSize \u5e94\u8be5\u662f\u4e00\u4e2a\u7d20\u6570\uff0c\u8fd9\u6837\u5bf9\u968f\u673a\u8f93\u5165\uff0c\u5173\u952e\u5b57\u7684\u5206\u5e03\u6bd4\u8f83\u5747\u5300 \u5982 \\(f(x)=(\\sum x[N-i-1]*32^i)\\%TableSize\\)","title":"\u6563\u5217\u51fd\u6570"},{"location":"ds/hash/#_4","text":"\u89e3\u51b3\u51b2\u7a81\u7684\u7b2c\u4e00\u79cd\u65b9\u6cd5\u53eb\u4f5c\u5206\u79bb\u94fe\u63a5\u6cd5\u3002\u5176\u505a\u6cd5\u662f\u5c06\u6563\u5217\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u503c\u7684\u6240\u6709\u5143\u7d20\u4fdd\u5b58\u5728\u4e00\u4e2a\u5217\u8868\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u94fe\u8868\u7684\u65b9\u5f0f\u5b58\u50a8\u3002 \u7ed3\u6784\u4f53\u5b9a\u4e49 struct ListNode ; typedef struct ListNode * Position ; struct HashTbl ; typedef struct HashTbl * HashTable ; struct ListNode { ElementType Element ; Position Next ; }; typedef Position List ; /* List *TheList will be an array of lists, allocated later */ /* The lists use headers (for simplicity), */ /* though this wastes space */ struct HashTbl { int TableSize ; List * TheLists ; }; \u521b\u5efa\u7a7a\u8868 HashTable InitializeTable ( int TableSize ) { HashTable H ; int i ; if ( TableSize < MinTableSize ) { Error ( \"Table size too small\" ); return NULL ; } H = malloc ( sizeof ( struct HashTbl ) ); /* Allocate table */ if ( H == NULL ) FatalError ( \"Out of space!!!\" ); H -> TableSize = NextPrime ( TableSize ); /* Better be prime */ H -> TheLists = malloc ( sizeof ( List ) * H -> TableSize ); /*Array of lists*/ if ( H -> TheLists == NULL ) FatalError ( \"Out of space!!!\" ); for ( i = 0 ; i < H -> TableSize ; i ++ ) { /* Allocate list headers */ H -> TheLists [ i ] = malloc ( sizeof ( struct ListNode ) ); /* Slow! */ if ( H -> TheLists [ i ] == NULL ) FatalError ( \"Out of space!!!\" ); else H -> TheLists [ i ] -> Next = NULL ; } return H ; } \u67e5\u8be2\u5173\u952e\u5b57 Position Find ( ElementType Key , HashTable H ) { Position P ; List L ; L = H -> TheLists [ Hash ( Key , H -> TableSize ) ]; P = L -> Next ; while ( P != NULL && P -> Element != Key ) /* Probably need strcmp */ P = P -> Next ; return P ; } \u63d2\u5165\u5173\u952e\u5b57 \u9996\u5148\u6211\u4eec\u67e5\u627e\u8fd9\u4e2a\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u503c\u5df2\u7ecf\u5b58\u5728\u90a3\u4e48\u6211\u4eec\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002 void Insert ( ElementType Key , HashTable H ) { Position Pos , NewCell ; List L ; Pos = Find ( Key , H ); if ( Pos == NULL ) { /* Key is not found, then insert */ NewCell = malloc ( sizeof ( struct ListNode ) ); if ( NewCell == NULL ) FatalError ( \"Out of space!!!\" ); else { L = H -> TheLists [ Hash ( Key , H -> TableSize ) ]; NewCell -> Next = L -> Next ; NewCell -> Element = Key ; /* Probably need strcpy! */ L -> Next = NewCell ; } } }","title":"\u5206\u79bb\u94fe\u63a5"},{"location":"ds/hash/#_5","text":"\u5f00\u653e\u5730\u5740\u6cd5\uff0c\u5f53\u6709\u51b2\u7a81\u53d1\u751f\u65f6\uff0c\u5c1d\u8bd5\u9009\u62e9\u5176\u4ed6\u7684\u5355\u5143\uff0c\u76f4\u5230\u627e\u5230\u7a7a\u7684\u5355\u5143\u4e3a\u6b62\u3002 \u4e00\u822c\u5730, \\(h_0(X),h_1(X),\\ldots,\\) \u5176\u4e2d $h_i(X)=(Hash(X)+F(i)) mod TableSize $ \u4e00\u822c\u6765\u8bf4 \\(\\lambda<0.5\\) Algorithm : insert key into an array of hash table { index = hash ( key ); initialize i = 0 ------ the counter of probing ; while ( collision at index ) { index = ( hash ( key ) + f ( i ) ) % TableSize ; if ( table is full ) break ; else i ++ ; } if ( table is full ) ERROR ( \u201c No space left \u201d ); else insert key at index ; }","title":"\u5f00\u653e\u5730\u5740"},{"location":"ds/hash/#_6","text":"\u5728\u7ebf\u6027\u63a2\u6d4b\u6cd5\u4e2d\uff0c\u51fd\u6570 \\(F\\) \u662f \\(i\\) \u7684\u7ebf\u6027\u51fd\u6570\uff0c\u5178\u578b\u60c5\u5f62\u662f \\(F(i)=i\\) . \u8fd9\u76f8\u5f53\u4e8e\u9010\u4e2a\u63a2\u6d4b\u5355\u5143\uff08\u5fc5\u8981\u65f6\u53ef\u4ee5\u7ed5\u56de\u5230\u7b2c\u4e00\u4e2a\u5355\u5143\uff09\u4ee5\u67e5\u627e\u51fa\u4e00\u4e2a\u7a7a\u5355\u5143\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u4f7f\u7528\u7ebf\u6027\u63a2\u6d4b\u7684\u63a2\u6d4b\u6b21\u6570\u5bf9\u4e8e\u63d2\u5165\u548c\u4e0d\u6210\u529f\u7684\u67e5\u627e\u6765\u8bf4\u7ea6\u4e3a \\(\\dfrac{1}{2}(1+\\dfrac{1}{(1-\\lambda)^2})\\) \u6b21; \u5bf9\u4e8e\u6210\u529f\u7684\u67e5\u627e\u6765\u8bf4\u5219\u9700 \\(\\dfrac{1}{2}(1+\\dfrac{1}{1-\\lambda})\\) \u6b21","title":"\u7ebf\u6027\u63a2\u6d4b\u6cd5"},{"location":"ds/hash/#_7","text":"\u5e73\u65b9\u63a2\u6d4b\u6cd5\u662f\u6d88\u9664\u7ebf\u6027\u63a2\u6d4b\u4e2d\u4e00\u6b21\u805a\u96c6\u95ee\u9898\u7684\u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5\u3002\u51b2\u7a81\u51fd\u6570\u4e3a\u4e8c\u6b21\u51fd\u6570\uff0c\u4e00\u822c\u4e3a \\(F(i)=i^2\\) \u5b9a\u7406: \u5982\u679c\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\uff0c\u4e14\u8868\u7684\u5927\u5c0f\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5f53\u8868\u81f3\u5c11\u6709\u4e00\u534a\u4e3a\u7a7a\u65f6\uff0c\u603b\u80fd\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u3002 \u5bf9\u4e8e\u4efb\u610f\u5143\u7d20 \\(x\\) , \u5b83\u6709 \\(\\lceil TableSize/2 \\rceil\\) \u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\u53ef\u80fd\u653e\u7f6e\u8fd9\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6700\u591a $\\lfloor TableSize/2 \\rfloor $ \u4f4d\u7f6e\u88ab\u4f7f\u7528\uff0c\u90a3\u4e48\u603b\u80fd\u627e\u5230\u653e \\(x\\) \u7684\u7a7a\u5355\u5143\u3002 \u67e5\u627e\u5143\u7d20 \\(F(i)=F(i-1)+i^2-(i-1)^2=F(i-1)+2i-1\\) \u8fd9\u91cc while \u8bed\u53e5\u7684\u6d4b\u8bd5\u987a\u5e8f\u4e0d\u80fd\u6539\u53d8\u3002\u5982\u679c\u662f empty \uff0c\u5219 key \u6ca1\u6709\u5b9a\u4e49\uff0c\u5148\u5224\u65ad\u4f1a\u51fa\u9519\u3002 \u5047\u8bbe\u63a2\u6d4b\u6b65\u6570 i \u4e0d\u8d85\u8fc7 \\(\\dfrac{TS}{2}+1\\) \u6b65\uff0c\u5373\u5047\u8bbe\u8868 \\(<50\\%\\) \u3002\u8fd9\u65f6 CurrentPos+2i-1 <= 2TS-1 \uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u51cf\u6cd5\u3002 Position Find ( ElementType Key , HashTable H ) { Position CurrentPos ; int CollisionNum ; CollisionNum = 0 ; CurrentPos = Hash ( Key , H -> TableSize ); while ( H -> TheCells [ CurrentPos ]. Info != Empty && H -> TheCells [ CurrentPos ]. Element != Key ) { CurrentPos += 2 * ++ CollisionNum \uf02d 1 ; if ( CurrentPos >= H -> TableSize ) CurrentPos \uf02d = H -> TableSize ; } return CurrentPos ; } \u63d2\u5165\u5143\u7d20 void Insert ( ElementType Key , HashTable H ) { Position Pos ; Pos = Find ( Key , H ); if ( H -> TheCells [ Pos ]. Info != Legitimate ) { /* OK to insert here */ H -> TheCells [ Pos ]. Info = Legitimate ; H -> TheCells [ Pos ]. Element = Key ; /* Probably need strcpy */ } } \u6563\u5217\u5230\u540c\u4e00\u4f4d\u7f6e\u4e0a\u7684\u90a3\u4e9b\u5143\u7d20\u5c06\u63a2\u6d4b\u76f8\u540c\u7684\u5907\u9009\u5355\u5143\uff0c\u8fd9\u79f0\u4e3a \u4e8c\u6b21\u805a\u96c6 \u3002","title":"\u5e73\u65b9\u63a2\u6d4b\u6cd5"},{"location":"ds/hash/#_8","text":"\\(f(i)=i*hash_2(X)\\) \u6211\u4eec\u5728 \\(X\\) \u8ddd\u79bb \\(hash_2(X),2hash_2(X),\\ldots\\) \u7b49\u4f4d\u7f6e\u8fdb\u884c\u63a2\u6d4b\u3002 \u5e38\u7528 \\(hash_2(X)=R-(X mod R)\\) , \u5176\u4e2d \\(R\\) \u662f\u4e00\u4e2a\u6bd4 \\(TableSize\\) \u5c0f\u7684\u7d20\u6570\u3002 \u5982\u679c\u6b63\u786e\u5b9e\u73b0\u4e86\u53cc\u91cd\u54c8\u5e0c\uff0c\u6a21\u62df\u8868\u660e\u9884\u671f\u7684\u63a2\u6d4b\u6570\u91cf\u51e0\u4e4e\u4e0e\u968f\u673a\u51b2\u7a81\u89e3\u51b3\u7b56\u7565\u76f8\u540c\u3002 \u4e8c\u6b21\u63a2\u6d4b\u4e0d\u9700\u8981\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u54c8\u5e0c\u51fd\u6570\uff0c\u56e0\u6b64\u5728\u5b9e\u8df5\u4e2d\u53ef\u80fd\u66f4\u7b80\u5355\u3001\u66f4\u5feb\u3002","title":"\u53cc\u6563\u5217"},{"location":"ds/hash/#_9","text":"\u5bf9\u4e8e\u4f7f\u7528\u5e73\u65b9\u63a2\u6d4b\u7684\u5f00\u653e\u5730\u5740\u6563\u5217\u6cd5\uff0c\u5982\u679c\u8868\u7684\u5143\u7d20\u8fc7\u591a\uff0c\u90a3\u4e48\u64cd\u4f5c\u7684\u8fd0\u884c\u65f6\u95f4\u5c06\u5f00\u59cb\u6d88\u8017\u8fc7\u957f\u3002 \u5efa\u7acb\u4e00\u4e2a\u4e24\u500d\u5927\u7684\u8868 \u626b\u63cf\u539f\u59cb\u6563\u5217\u8868 \u5229\u7528\u65b0\u7684\u6563\u5217\u51fd\u6570\u5c06\u5143\u7d20\u6620\u5c04\u5230\u65b0\u7684\u6563\u5217\u503c\uff0c\u5e76\u63d2\u5165 \\(T(N)=O(N)\\) \u4ec0\u4e48\u65f6\u5019\u518d\u6563\u5217\uff1f \u8868\u586b\u6ee1\u4e00\u534a\u5c31\u518d\u6563\u5217 \u5f53\u63d2\u5165\u5931\u8d25\u65f6 \u5f53\u8868\u8fbe\u5230\u67d0\u4e00\u4e2a\u88c5\u586b\u56e0\u5b50\u65f6\u8fdb\u884c\u518d\u6563\u5217\u3002 \u901a\u5e38\u5728\u91cd\u54c8\u5e0c\u4e4b\u524d\u5e94\u8be5\u6709 \\(N/2\\) \u4e2a\u63d2\u5165\uff0c\u6240\u4ee5 \\(O(N)\\) \u91cd\u54c8\u5e0c\u53ea\u4f1a\u7ed9\u6bcf\u4e2a\u63d2\u5165\u589e\u52a0\u4e00\u4e2a\u6052\u5b9a\u7684\u4ee3\u4ef7\u3002 \u7136\u800c\uff0c\u5728\u4ea4\u4e92\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u5e78\u7684\u7528\u6237\u7684\u63d2\u5165\u5bfc\u81f4\u91cd\u65b0\u6563\u5217\uff0c\u53ef\u80fd\u4f1a\u770b\u5230\u901f\u5ea6\u51cf\u6162\u3002","title":"\u518d\u6563\u5217"},{"location":"ds/heap/","text":"\u4f18\u5148\u961f\u5217\uff08\u5806\uff09 \u00b6 ADT \u6a21\u578b \u00b6 \u5bf9\u8c61\uff1a\u4e00\u4e2a\u6709\u9650\u7684\u6709\u5e8f\u96c6 \u64cd\u4f5c\uff1a \u521d\u59cb\u5316 \u63d2\u5165 \u5220\u9664\u6700\u5c0f\u7684\u5143\u7d20 \u5bfb\u627e\u6700\u5c0f\u7684\u5143\u7d20 \u7b80\u5355\u7684\u5b9e\u73b0 \u00b6 \u6570\u7ec4\uff1a \u63d2\u5165\u5143\u7d20\u5230\u672b\u5c3e \\(\\Theta(1)\\) \u627e\u5230\u6700\u5927/\u6700\u5c0f\u5143\u7d20 \\(\\Theta(n)\\) , \u5220\u9664\u5143\u7d20\u79fb\u52a8\u6570\u7ec4 \\(O(n)\\) \u94fe\u8868\uff1a \u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5f00\u5934 \\(\\Theta(1)\\) \u627e\u5230\u6700\u5927/\u6700\u5c0f\u5143\u7d20 \\(\\Theta(n)\\) , \u5220\u9664\u5143\u7d20 \\(\\Theta(1)\\) \u6709\u5e8f\u6570\u7ec4\uff1a \u63d2\u5165 \u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e \\(O(n)\\) , \u79fb\u52a8\u6570\u7ec4\u5e76\u63d2\u5165\u5143\u7d20 \\(O(n)\\) \u5220\u9664\u5f00\u5934/\u672b\u5c3e\u5143\u7d20 \\(\\Theta(1)\\) \u6709\u5e8f\u94fe\u8868\uff1a \u63d2\u5165 \u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e \\(O(n)\\) , \u63d2\u5165\u5143\u7d20 \\(\\Theta(1)\\) \u5220\u9664\u5f00\u5934/\u672b\u5c3e\u5143\u7d20 \\(\\Theta(1)\\) \u4e8c\u53c9\u5806 \u00b6 \u7ed3\u6784\u6027\u8d28 \u00b6 \u5806\u662f\u4e00\u68f5\u88ab\u5b8c\u5168\u586b\u6ee1\u7684\u4e8c\u53c9\u6811\uff0c\u6709\u53ef\u80fd\u7684\u4f8b\u5916\u662f\u5728\u5e95\u5c42\uff1a\u5e95\u5c42\u4e0a\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u586b\u5165\u3002\u8fd9\u6837\u7684\u6811\u79f0\u4e3a \u5b8c\u5168\u4e8c\u53c9\u6811 \u3002 \u4e00\u68f5\u9ad8 h \u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u4ecb\u4e8e \\(2^h\\) \u5230 \\(2^{h+1}-1\\) \u4e4b\u95f4\uff0c\u5373\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u662f \\(\\lfloor \\log N\\rfloor\\) \u5bf9\u4e8e\u4e0b\u6807\u4e3a \\(i\\) \u7684\u5143\u7d20\uff0c\u5176\u5de6\u513f\u5b50\u4f4d\u4e8e \\(2i\\) \u4e0a\uff0c\u53f3\u513f\u5b50\u4f4d\u4e8e \\(2i+1\\) \u4e0a\uff0c\u4ed6\u7684\u7236\u4eb2\u4f4d\u4e8e \\(\\lfloor i/2 \\rfloor\\) \u4e0a\u3002 \u5806\u5e8f\u6027\u8d28 \u00b6 \u5982\u679c\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u4e0d\u5927\u4e8e\u5176\u513f\u5b50\u8282\u70b9\u7684\u503c\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u68f5 \u5c0f\u6839\u6811 \u3002 \u5c0f\u6839\u5806 \u5c31\u662f\u6ee1\u8db3\u5c0f\u6839\u6811\u6027\u8d28\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u57fa\u672c\u7684\u5806\u64cd\u4f5c \u00b6 \u63d2\u5165 \u00b6 \u5bf9\u4e8e\u65b0\u7684\u8282\u70b9\uff0c\u552f\u4e00\u53ef\u4ee5\u653e\u7684\u4f4d\u7f6e\u5c31\u662f\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u4f4d\u7f6e\uff0c\u5426\u5219\u5806\u5c06\u4e0d\u518d\u662f\u5b8c\u5168\u6811\uff0c\u4f46\u8fd9\u6837\u53ef\u80fd\u7834\u574f\u5806\u7684\u5e8f\uff0c\u6211\u4eec\u4e00\u822c\u91c7\u7528 \u4e0a\u6d6e \u7684\u7b56\u7565\u3002 /* H->Element[ 0 ] is a sentinel */ void Insert ( ElementType X , PriorityQueue H ) { int i ; if ( IsFull ( H ) ) { Error ( \"Priority queue is full\" ); return ; } for ( i = ++ H -> Size ; H -> Elements [ i / 2 ] > X ; i /= 2 ) H -> Elements [ i ] = H -> Elements [ i / 2 ]; H -> Elements [ i ] = X ; } \u6ce8\u610f\u8fd9\u91cc\u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u4ea4\u6362\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4ea4\u6362\u64cd\u4f5c\u7684\u65f6\u95f4\u6210\u672c\u66f4\u9ad8\u3002 \u5220\u9664\u6700\u5c0f\u5143 \u00b6 \u6211\u4eec\u4e00\u822c\u91c7\u7528 \u4e0b\u6ee4 \u7684\u7b56\u7565\u3002\u5220\u9664\u6700\u5c0f\u5143\u540e\uff0c\u5728\u6839\u8282\u70b9\u4ea7\u751f\u4e00\u4e2a\u7a7a\u7a74\u3002\u540c\u65f6\u5806\u5c11\u4e86\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5fc5\u987b\u628a\u5806\u6700\u540e\u4e00\u4e2a\u5143\u7d20 X \u79fb\u52a8\u5230\u5806\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u4ece\u6839\u8282\u70b9\u7684\u7a7a\u7a74\u5f00\u59cb\u6211\u4eec\u5c06\u7a7a\u7a74\u7684\u4e24\u4e2a\u513f\u5b50\u4e2d\u7684\u8f83\u5c0f\u8005\u79fb\u5165\u7a7a\u7a74\uff0c\u8fd9\u6837\u5c31\u628a\u7a7a\u7a74\u5f80\u4e0b\u63a8\u4e86\u4e00\u5c42\u3002\u91cd\u590d\u6b65\u9aa4\u76f4\u5230 X \u53ef\u4ee5\u653e\u5165\u7a7a\u7a74\u3002 ElementType DeleteMin ( PriorityQueue H ) { int i , Child ; ElementType MinElement , LastElement ; if ( IsEmpty ( H ) ) { Error ( \"Priority queue is empty\" ); return H -> Elements [ 0 ]; } MinElement = H -> Elements [ 1 ]; /* save the min element */ LastElement = H -> Elements [ H -> Size -- ]; /* take last and reset size */ for ( i = 1 ; i * 2 <= H -> Size ; i = Child ) { /* Find smaller child */ Child = i * 2 ; if ( Child != H -> Size && H -> Elements [ Child + 1 ] < H -> Elements [ Child ]) Child ++ ; if ( LastElement > H -> Elements [ Child ] ) /* Percolate one level */ H -> Elements [ i ] = H -> Elements [ Child ]; else break ; /* find the proper position */ } H -> Elements [ i ] = LastElement ; return MinElement ; } \u5176\u4ed6\u7684\u5806\u64cd\u4f5c \u00b6 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u5c0f\u6839\u5806\uff0c\u627e\u9664\u4e86\u6700\u5c0f\u5143\u4ee5\u5916\u7684\u5143\u7d20\u90fd\u9700\u8981\u7ebf\u6027\u641c\u7d22\u6574\u4e2a\u5806\u3002 DecreaseKey DecreaseKey(P, \\(\\Delta\\) ,H) \u64cd\u4f5c\u964d\u4f4e\u5728\u4f4d\u7f6e P \u5904\u7684\u5173\u952e\u5b57\u7684\u503c\u3002\u6211\u4eec\u9700\u8981\u4e0a\u6ee4\u64cd\u4f5c\u5bf9\u5806\u8fdb\u884c\u8c03\u6574\u3002 IncreaseKey IncreaseKey(P, \\(\\Delta\\) ,H) \u64cd\u4f5c\u589e\u52a0\u5728\u4f4d\u7f6e P \u5904\u7684\u5173\u952e\u5b57\u7684\u503c\u3002\u6211\u4eec\u9700\u8981\u4e0b\u6ee4\u64cd\u4f5c\u5bf9\u5806\u8fdb\u884c\u8c03\u6574\u3002 Delete Delete(P,H) \u64cd\u4f5c\u5220\u9664\u5806\u4e2d\u4f4d\u7f6e P \u4e0a\u7684\u8282\u70b9\u3002\u8fd9\u4e2a\u64cd\u4f5c\u9996\u5148\u6267\u884c DecreaseKey(P, \\(\\infty\\) ,H) \u518d\u6267\u884c DeleteMin \u5373\u53ef\u3002 BuildHeap BuildHeap(H) \u64cd\u4f5c\u628a N \u4e2a\u5173\u952e\u5b57\u4f5c\u4e3a\u8f93\u51fa\u5e76\u628a\u5b83\u4eec\u653e\u5728\u7a7a\u961f\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 N \u4e2a\u76f8\u7ee7\u7684 Insert \u64cd\u4f5c\u5b8c\u6210\u3002 \u4e5f\u53ef\u4ee5\u5c06 N \u4e2a\u5173\u952e\u5b57\u4ee5\u4efb\u610f\u987a\u5e8f\u653e\u5165\u6811\u4e2d\u6784\u6210\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u4ece\u5012\u6570\u7b2c\u4e8c\u5c42\u5f00\u59cb\u4f9d\u6b21 percolate down. \u53ef\u4ee5\u8bc1\u660e\u8fd9\u65f6\u53ea\u9700\u8981\u7ebf\u6027\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u5b8c\u6210\u6811\u7684\u6784\u5efa\u3002 \u5b9a\u7406 \uff1a\u5305\u542b \\(2^{h+1}-1\\) \u4e2a\u8282\u70b9\uff0c\u9ad8\u5ea6\u4e3a \\(h\\) \u7684\u7406\u60f3\u4e8c\u53c9\u6811\uff0c\u5176\u8282\u70b9\u7684\u9ad8\u5ea6\u548c\u4e3a \\(2^{h+1}-1-(h+1)\\) \u8bc1\u660e\uff1a \\(S=\\sum\\limits_{i=0}^h 2^i(h-i)\\) \u56e0\u6b64 BuildHeap \u7684\u64cd\u4f5c\u662f\u7ebf\u6027\u7684 d-Heaps \u00b6 d-\u5806\u662f\u4e8c\u53c9\u5806\u7684\u63a8\u5e7f\uff0c\u6240\u6709\u7684\u8282\u70b9\u90fd\u6709 d \u4e2a\u513f\u5b50\uff08\u56e0\u6b64\u4e8c\u53c9\u5806\u662f 2-\u5806\uff09 d-\u5806\u6bd4\u4e8c\u53c9\u5806\u6d45\uff0c\u56e0\u6b64 Insert \u64cd\u4f5c\u6539\u8fdb\u4e3a \\(O(\\log_dN)\\) \u4f46\u5bf9\u4e8e\u5927\u7684 d, DeleteMin \u4f1a\u82b1\u8d39\u66f4\u591a\u65f6\u95f4\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u5c42\u90fd\u8981\u627e\u51fa d \u4e2a\u513f\u5b50\u4e2d\u7684\u6700\u5c0f\u8005\u3002\u8fd9\u6837\u64cd\u4f5c\u7684\u7528\u65f6\u5c31\u662f \\(O(d\\log_dN)\\) \u3002\u800c\u4e14\u5f53 d \u4e0d\u662f 2 \u7684\u5e42\u6b21\u65f6\uff0c\u627e\u51fa\u513f\u5b50\u548c\u7236\u4eb2\u4f1a\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\u3002 Info Priority queue: \u4f18\u5148\u961f\u5217 Binary heap: \u4e8c\u53c9\u5806 \u5806\u5e8f: heap order \u4e0a\u6d6e\uff1apercolate up \u4e0b\u6ee4\uff1apercolate down","title":"\u5806"},{"location":"ds/heap/#_1","text":"","title":"\u4f18\u5148\u961f\u5217\uff08\u5806\uff09"},{"location":"ds/heap/#adt","text":"\u5bf9\u8c61\uff1a\u4e00\u4e2a\u6709\u9650\u7684\u6709\u5e8f\u96c6 \u64cd\u4f5c\uff1a \u521d\u59cb\u5316 \u63d2\u5165 \u5220\u9664\u6700\u5c0f\u7684\u5143\u7d20 \u5bfb\u627e\u6700\u5c0f\u7684\u5143\u7d20","title":"ADT \u6a21\u578b"},{"location":"ds/heap/#_2","text":"\u6570\u7ec4\uff1a \u63d2\u5165\u5143\u7d20\u5230\u672b\u5c3e \\(\\Theta(1)\\) \u627e\u5230\u6700\u5927/\u6700\u5c0f\u5143\u7d20 \\(\\Theta(n)\\) , \u5220\u9664\u5143\u7d20\u79fb\u52a8\u6570\u7ec4 \\(O(n)\\) \u94fe\u8868\uff1a \u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5f00\u5934 \\(\\Theta(1)\\) \u627e\u5230\u6700\u5927/\u6700\u5c0f\u5143\u7d20 \\(\\Theta(n)\\) , \u5220\u9664\u5143\u7d20 \\(\\Theta(1)\\) \u6709\u5e8f\u6570\u7ec4\uff1a \u63d2\u5165 \u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e \\(O(n)\\) , \u79fb\u52a8\u6570\u7ec4\u5e76\u63d2\u5165\u5143\u7d20 \\(O(n)\\) \u5220\u9664\u5f00\u5934/\u672b\u5c3e\u5143\u7d20 \\(\\Theta(1)\\) \u6709\u5e8f\u94fe\u8868\uff1a \u63d2\u5165 \u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e \\(O(n)\\) , \u63d2\u5165\u5143\u7d20 \\(\\Theta(1)\\) \u5220\u9664\u5f00\u5934/\u672b\u5c3e\u5143\u7d20 \\(\\Theta(1)\\)","title":"\u7b80\u5355\u7684\u5b9e\u73b0"},{"location":"ds/heap/#_3","text":"","title":"\u4e8c\u53c9\u5806"},{"location":"ds/heap/#_4","text":"\u5806\u662f\u4e00\u68f5\u88ab\u5b8c\u5168\u586b\u6ee1\u7684\u4e8c\u53c9\u6811\uff0c\u6709\u53ef\u80fd\u7684\u4f8b\u5916\u662f\u5728\u5e95\u5c42\uff1a\u5e95\u5c42\u4e0a\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u586b\u5165\u3002\u8fd9\u6837\u7684\u6811\u79f0\u4e3a \u5b8c\u5168\u4e8c\u53c9\u6811 \u3002 \u4e00\u68f5\u9ad8 h \u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u4ecb\u4e8e \\(2^h\\) \u5230 \\(2^{h+1}-1\\) \u4e4b\u95f4\uff0c\u5373\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u662f \\(\\lfloor \\log N\\rfloor\\) \u5bf9\u4e8e\u4e0b\u6807\u4e3a \\(i\\) \u7684\u5143\u7d20\uff0c\u5176\u5de6\u513f\u5b50\u4f4d\u4e8e \\(2i\\) \u4e0a\uff0c\u53f3\u513f\u5b50\u4f4d\u4e8e \\(2i+1\\) \u4e0a\uff0c\u4ed6\u7684\u7236\u4eb2\u4f4d\u4e8e \\(\\lfloor i/2 \\rfloor\\) \u4e0a\u3002","title":"\u7ed3\u6784\u6027\u8d28"},{"location":"ds/heap/#_5","text":"\u5982\u679c\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u4e0d\u5927\u4e8e\u5176\u513f\u5b50\u8282\u70b9\u7684\u503c\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u68f5 \u5c0f\u6839\u6811 \u3002 \u5c0f\u6839\u5806 \u5c31\u662f\u6ee1\u8db3\u5c0f\u6839\u6811\u6027\u8d28\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u3002","title":"\u5806\u5e8f\u6027\u8d28"},{"location":"ds/heap/#_6","text":"","title":"\u57fa\u672c\u7684\u5806\u64cd\u4f5c"},{"location":"ds/heap/#_7","text":"\u5bf9\u4e8e\u65b0\u7684\u8282\u70b9\uff0c\u552f\u4e00\u53ef\u4ee5\u653e\u7684\u4f4d\u7f6e\u5c31\u662f\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u4f4d\u7f6e\uff0c\u5426\u5219\u5806\u5c06\u4e0d\u518d\u662f\u5b8c\u5168\u6811\uff0c\u4f46\u8fd9\u6837\u53ef\u80fd\u7834\u574f\u5806\u7684\u5e8f\uff0c\u6211\u4eec\u4e00\u822c\u91c7\u7528 \u4e0a\u6d6e \u7684\u7b56\u7565\u3002 /* H->Element[ 0 ] is a sentinel */ void Insert ( ElementType X , PriorityQueue H ) { int i ; if ( IsFull ( H ) ) { Error ( \"Priority queue is full\" ); return ; } for ( i = ++ H -> Size ; H -> Elements [ i / 2 ] > X ; i /= 2 ) H -> Elements [ i ] = H -> Elements [ i / 2 ]; H -> Elements [ i ] = X ; } \u6ce8\u610f\u8fd9\u91cc\u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u4ea4\u6362\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4ea4\u6362\u64cd\u4f5c\u7684\u65f6\u95f4\u6210\u672c\u66f4\u9ad8\u3002","title":"\u63d2\u5165"},{"location":"ds/heap/#_8","text":"\u6211\u4eec\u4e00\u822c\u91c7\u7528 \u4e0b\u6ee4 \u7684\u7b56\u7565\u3002\u5220\u9664\u6700\u5c0f\u5143\u540e\uff0c\u5728\u6839\u8282\u70b9\u4ea7\u751f\u4e00\u4e2a\u7a7a\u7a74\u3002\u540c\u65f6\u5806\u5c11\u4e86\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u5fc5\u987b\u628a\u5806\u6700\u540e\u4e00\u4e2a\u5143\u7d20 X \u79fb\u52a8\u5230\u5806\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u4ece\u6839\u8282\u70b9\u7684\u7a7a\u7a74\u5f00\u59cb\u6211\u4eec\u5c06\u7a7a\u7a74\u7684\u4e24\u4e2a\u513f\u5b50\u4e2d\u7684\u8f83\u5c0f\u8005\u79fb\u5165\u7a7a\u7a74\uff0c\u8fd9\u6837\u5c31\u628a\u7a7a\u7a74\u5f80\u4e0b\u63a8\u4e86\u4e00\u5c42\u3002\u91cd\u590d\u6b65\u9aa4\u76f4\u5230 X \u53ef\u4ee5\u653e\u5165\u7a7a\u7a74\u3002 ElementType DeleteMin ( PriorityQueue H ) { int i , Child ; ElementType MinElement , LastElement ; if ( IsEmpty ( H ) ) { Error ( \"Priority queue is empty\" ); return H -> Elements [ 0 ]; } MinElement = H -> Elements [ 1 ]; /* save the min element */ LastElement = H -> Elements [ H -> Size -- ]; /* take last and reset size */ for ( i = 1 ; i * 2 <= H -> Size ; i = Child ) { /* Find smaller child */ Child = i * 2 ; if ( Child != H -> Size && H -> Elements [ Child + 1 ] < H -> Elements [ Child ]) Child ++ ; if ( LastElement > H -> Elements [ Child ] ) /* Percolate one level */ H -> Elements [ i ] = H -> Elements [ Child ]; else break ; /* find the proper position */ } H -> Elements [ i ] = LastElement ; return MinElement ; }","title":"\u5220\u9664\u6700\u5c0f\u5143"},{"location":"ds/heap/#_9","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u5c0f\u6839\u5806\uff0c\u627e\u9664\u4e86\u6700\u5c0f\u5143\u4ee5\u5916\u7684\u5143\u7d20\u90fd\u9700\u8981\u7ebf\u6027\u641c\u7d22\u6574\u4e2a\u5806\u3002 DecreaseKey DecreaseKey(P, \\(\\Delta\\) ,H) \u64cd\u4f5c\u964d\u4f4e\u5728\u4f4d\u7f6e P \u5904\u7684\u5173\u952e\u5b57\u7684\u503c\u3002\u6211\u4eec\u9700\u8981\u4e0a\u6ee4\u64cd\u4f5c\u5bf9\u5806\u8fdb\u884c\u8c03\u6574\u3002 IncreaseKey IncreaseKey(P, \\(\\Delta\\) ,H) \u64cd\u4f5c\u589e\u52a0\u5728\u4f4d\u7f6e P \u5904\u7684\u5173\u952e\u5b57\u7684\u503c\u3002\u6211\u4eec\u9700\u8981\u4e0b\u6ee4\u64cd\u4f5c\u5bf9\u5806\u8fdb\u884c\u8c03\u6574\u3002 Delete Delete(P,H) \u64cd\u4f5c\u5220\u9664\u5806\u4e2d\u4f4d\u7f6e P \u4e0a\u7684\u8282\u70b9\u3002\u8fd9\u4e2a\u64cd\u4f5c\u9996\u5148\u6267\u884c DecreaseKey(P, \\(\\infty\\) ,H) \u518d\u6267\u884c DeleteMin \u5373\u53ef\u3002 BuildHeap BuildHeap(H) \u64cd\u4f5c\u628a N \u4e2a\u5173\u952e\u5b57\u4f5c\u4e3a\u8f93\u51fa\u5e76\u628a\u5b83\u4eec\u653e\u5728\u7a7a\u961f\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 N \u4e2a\u76f8\u7ee7\u7684 Insert \u64cd\u4f5c\u5b8c\u6210\u3002 \u4e5f\u53ef\u4ee5\u5c06 N \u4e2a\u5173\u952e\u5b57\u4ee5\u4efb\u610f\u987a\u5e8f\u653e\u5165\u6811\u4e2d\u6784\u6210\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u4ece\u5012\u6570\u7b2c\u4e8c\u5c42\u5f00\u59cb\u4f9d\u6b21 percolate down. \u53ef\u4ee5\u8bc1\u660e\u8fd9\u65f6\u53ea\u9700\u8981\u7ebf\u6027\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u5b8c\u6210\u6811\u7684\u6784\u5efa\u3002 \u5b9a\u7406 \uff1a\u5305\u542b \\(2^{h+1}-1\\) \u4e2a\u8282\u70b9\uff0c\u9ad8\u5ea6\u4e3a \\(h\\) \u7684\u7406\u60f3\u4e8c\u53c9\u6811\uff0c\u5176\u8282\u70b9\u7684\u9ad8\u5ea6\u548c\u4e3a \\(2^{h+1}-1-(h+1)\\) \u8bc1\u660e\uff1a \\(S=\\sum\\limits_{i=0}^h 2^i(h-i)\\) \u56e0\u6b64 BuildHeap \u7684\u64cd\u4f5c\u662f\u7ebf\u6027\u7684","title":"\u5176\u4ed6\u7684\u5806\u64cd\u4f5c"},{"location":"ds/heap/#d-heaps","text":"d-\u5806\u662f\u4e8c\u53c9\u5806\u7684\u63a8\u5e7f\uff0c\u6240\u6709\u7684\u8282\u70b9\u90fd\u6709 d \u4e2a\u513f\u5b50\uff08\u56e0\u6b64\u4e8c\u53c9\u5806\u662f 2-\u5806\uff09 d-\u5806\u6bd4\u4e8c\u53c9\u5806\u6d45\uff0c\u56e0\u6b64 Insert \u64cd\u4f5c\u6539\u8fdb\u4e3a \\(O(\\log_dN)\\) \u4f46\u5bf9\u4e8e\u5927\u7684 d, DeleteMin \u4f1a\u82b1\u8d39\u66f4\u591a\u65f6\u95f4\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u5c42\u90fd\u8981\u627e\u51fa d \u4e2a\u513f\u5b50\u4e2d\u7684\u6700\u5c0f\u8005\u3002\u8fd9\u6837\u64cd\u4f5c\u7684\u7528\u65f6\u5c31\u662f \\(O(d\\log_dN)\\) \u3002\u800c\u4e14\u5f53 d \u4e0d\u662f 2 \u7684\u5e42\u6b21\u65f6\uff0c\u627e\u51fa\u513f\u5b50\u548c\u7236\u4eb2\u4f1a\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\u3002 Info Priority queue: \u4f18\u5148\u961f\u5217 Binary heap: \u4e8c\u53c9\u5806 \u5806\u5e8f: heap order \u4e0a\u6d6e\uff1apercolate up \u4e0b\u6ee4\uff1apercolate down","title":"d-Heaps"},{"location":"ds/set/","text":"\u5e76\u67e5\u96c6 \u00b6 \u524d\u7f6e\u77e5\u8bc6 \u00b6 \u4e00\u4e2a \u5173\u7cfb R \u5b9a\u4e49\u5728\u96c6\u5408 S \u4e0a, \u8868\u793a\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u5bf9 \\((a,b),a,b\\in S\\) , \\(aRb\\) \u8981\u4e48\u4e3a\u771f\u8981\u4e48\u4e3a\u5047. \u5982\u679c \\(aRb\\) \u4e3a\u771f\uff0c\u90a3\u4e48\u6211\u4eec\u79f0 \\(a\\) \u548c \\(b\\) \u6709\u5173\u7cfb\u3002 \u7b49\u4ef7\u5173\u7cfb \u662f\u6ee1\u8db3\u81ea\u53cd\u6027( \\(\\forall a\\in S, aRa\\) )\uff0c\u5bf9\u79f0\u6027( \\(aRb\\Leftrightarrow bRa\\) )\uff0c\u4f20\u9012\u6027( \\(aRb, bRc \\Rightarrow aRc\\) )\u7684\u5173\u7cfb\uff0c\u4e00\u822c\u7528 ~ \u8868\u793a\u7b49\u4ef7\u5173\u7cfb\u3002 S \u4e2d\u7684\u4e24\u4e2a\u5143\u7d20 \\(x\\) \\(y\\) \u5728\u540c\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u4e2d\u5f53\u4e14\u4ec5\u5f53 \\(a\\) ~ \\(b\\) \u52a8\u6001\u7b49\u4ef7\u6027\u95ee\u9898 \u00b6 \u96c6\u5408\u7684\u5143\u7d20: \\(1,2,3\\ldots,N\\) \u96c6\u5408: \\(S_1,S_2,\\ldots\\) \u4e14 \\(S_i\\cap S_j=\\empty\\) (\u82e5 \\(i\\neq j\\) ), \u5373\u96c6\u5408\u4e4b\u95f4\u4e0d\u76f8\u4ea4 \u64cd\u4f5c: Find(i) \u8fd4\u56de\u7ed9\u5b9a\u5143\u7d20\u7684\u6240\u5728\u7684\u96c6\u5408\uff08\u7b49\u4ef7\u7c7b\uff09 Union(i,j) \u6c42\u5e76\u8fd0\u7b97\uff0c\u5c06\u542b\u6709 a \u548c b \u7684\u4e24\u4e2a\u7b49\u4ef7\u7c7b\u5408\u5e76\u4e3a\u4e00\u4e2a\u7b49\u4ef7\u7c7b \u57fa\u672c\u6570\u636e\u7ed3\u6784 \u00b6 \u6211\u4eec\u7528\u6811\u6765\u8868\u793a\u6bcf\u4e00\u4e2a\u96c6\u5408\uff0c\u6811\u7684\u6839\u547d\u540d\u8fd9\u4e2a\u96c6\u5408\uff08\u4ee3\u8868\u5143\uff09\uff0c\u6811\u7684\u96c6\u5408\u6784\u6210\u4e86\u4e00\u4e2a\u68ee\u6797\u3002 \u521d\u59cb\u65f6\uff0c\u6bcf\u68f5\u6811\u90fd\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u3002\u5f53\u9700\u8981\u6267\u884c Union \u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u6839\u6307\u9488\u6307\u5411\u53e6\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u3002\u5f53\u9700\u8981\u6267\u884c Find \u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u5143\u7d20 X \u4e00\u76f4\u5411\u4e0a\u76f4\u5230\u6839\u4e3a\u6b62\u3002 void SetUnion ( DisjSet S , SetType Rt1 , SetType Rt2 ) { S [ Rt2 ] = Rt1 ; } SetType Find ( ElementType X , DisjSet S ) { for ( ; S [ X ] > 0 ; X = S [ X ] ); return X ; } \u5b9e\u9645\u8fd0\u7528\u4e2d\uff0c Union \u548c Find \u64cd\u4f5c\u901a\u5e38\u6210\u5bf9\u51fa\u73b0: /* Algorithm using union-find operations */ { Initialize Si = { i } for i = 1 , ..., 12 ; for ( k = 1 ; k <= 9 ; k ++ ) { /* for each pair i \uf0ba j */ if ( Find ( i ) != Find ( j ) ) SetUnion ( Find ( i ), Find ( j ) ); } } \u7075\u5de7\u6c42\u5e76\u7b97\u6cd5 \u00b6 \u6309\u5927\u5c0f\u6c42\u5e76 \u5373\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u6539\u53d8\u8f83\u5c0f\u7684\u6811 \u8bbe \\(T\\) \u662f\u6309\u5927\u5c0f\u5408\u5e76\u7684 \\(N\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u90a3\u4e48 \\(height(T)\\leq\\lfloor \\log_2N\\rfloor +1\\) (\u53ef\u7528\u5f52\u7eb3\u6cd5\u8bc1\u660e) \u56e0\u6b64\u5bf9\u4e8e \\(N\\) \u4e2a Union \u64cd\u4f5c \\(M\\) \u4e2a Find \u64cd\u4f5c\uff0c\u6240\u7528\u65f6\u95f4\u4e3a \\(O(N+M\\log_2N)\\) \u6309\u9ad8\u5ea6\u6c42\u5e76 \u5373\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u6539\u53d8\u8f83\u77ee\u7684\u6811 \u8def\u5f84\u538b\u7f29 \u00b6 SetType Find ( ElementType X , DisjSet S ) { ElementType root , trail , lead ; for ( root = X ; S [ root ] > 0 ; root = S [ root ] ) ; /* find the root */ for ( trail = X ; trail != root ; trail = lead ) { lead = S [ trail ] ; S [ trail ] = root ; } /* collapsing */ return root ; } \u8def\u5f84\u538b\u7f29\u7684\u6548\u679c\u662f\uff0c\u4ece X \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4f7f\u5b83\u7684\u7236\u8282\u70b9\u53d8\u6210\u6839\u3002 \u8def\u5f84\u538b\u7f29\u4e0e\u6309\u5927\u5c0f\u6c42\u5e76\u5b8c\u5168\u517c\u5bb9\uff0c\u53ef\u4ee5\u540c\u65f6\u5b9e\u73b0\uff0c\u4f46\u4e0d\u80fd\u4e0e\u6309\u9ad8\u5ea6\u6c42\u5e76\uff08\u6709\u65f6\u79f0\u4e3a\u79e9\uff09 \u6309\u79e9\u6c42\u5e76\u548c\u8def\u5f84\u538b\u7f29\u7684\u6700\u574f\u60c5\u5f62 \u00b6 \u4ee4 \\(T(M,N)\\) \u6267\u884c \\(M\\geq N\\) \u6b21 Find \u548c \\(N-1\\) \u6b21 Union \u64cd\u4f5c\u7684\u6700\u574f\u7528\u65f6\u3002\u90a3\u4e48 \\(k_1M\\alpha(M,N)\\leq T(M,N)\\leq k_2 M\\alpha(M,N)\\) \u5bf9\u4e8e\u67d0\u4e2a\u6b63\u5e38\u6570 \\(k_1,k_2\\) . \u5176\u4e2d \\(\\alpha(M,N)\\) \u662f Ackermann \u51fd\u6570. \\[ \\begin{align*} A(i,j)=\\left\\{ \\begin{matrix}2^j\\quad & i=1\\ and\\ j\\geq 1\\\\ A(i-1,2)\\quad & i\\geq 2\\ and\\ j=1\\\\ A(i-1,A(i,j-1))\\ & i\\geq 2\\ and\\ j\\geq 2 \\end{matrix}\\right. \\end{align*} \\] Info \u5e76\u67e5\u96c6: the disjoint set \u7b49\u4ef7\u5173\u7cfb: equivalence relations \u6309\u5927\u5c0f\u6c42\u5e76: union by size \u8def\u5f84\u538b\u7f29: path compression","title":"\u5e76\u67e5\u96c6"},{"location":"ds/set/#_1","text":"","title":"\u5e76\u67e5\u96c6"},{"location":"ds/set/#_2","text":"\u4e00\u4e2a \u5173\u7cfb R \u5b9a\u4e49\u5728\u96c6\u5408 S \u4e0a, \u8868\u793a\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u5bf9 \\((a,b),a,b\\in S\\) , \\(aRb\\) \u8981\u4e48\u4e3a\u771f\u8981\u4e48\u4e3a\u5047. \u5982\u679c \\(aRb\\) \u4e3a\u771f\uff0c\u90a3\u4e48\u6211\u4eec\u79f0 \\(a\\) \u548c \\(b\\) \u6709\u5173\u7cfb\u3002 \u7b49\u4ef7\u5173\u7cfb \u662f\u6ee1\u8db3\u81ea\u53cd\u6027( \\(\\forall a\\in S, aRa\\) )\uff0c\u5bf9\u79f0\u6027( \\(aRb\\Leftrightarrow bRa\\) )\uff0c\u4f20\u9012\u6027( \\(aRb, bRc \\Rightarrow aRc\\) )\u7684\u5173\u7cfb\uff0c\u4e00\u822c\u7528 ~ \u8868\u793a\u7b49\u4ef7\u5173\u7cfb\u3002 S \u4e2d\u7684\u4e24\u4e2a\u5143\u7d20 \\(x\\) \\(y\\) \u5728\u540c\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u4e2d\u5f53\u4e14\u4ec5\u5f53 \\(a\\) ~ \\(b\\)","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"ds/set/#_3","text":"\u96c6\u5408\u7684\u5143\u7d20: \\(1,2,3\\ldots,N\\) \u96c6\u5408: \\(S_1,S_2,\\ldots\\) \u4e14 \\(S_i\\cap S_j=\\empty\\) (\u82e5 \\(i\\neq j\\) ), \u5373\u96c6\u5408\u4e4b\u95f4\u4e0d\u76f8\u4ea4 \u64cd\u4f5c: Find(i) \u8fd4\u56de\u7ed9\u5b9a\u5143\u7d20\u7684\u6240\u5728\u7684\u96c6\u5408\uff08\u7b49\u4ef7\u7c7b\uff09 Union(i,j) \u6c42\u5e76\u8fd0\u7b97\uff0c\u5c06\u542b\u6709 a \u548c b \u7684\u4e24\u4e2a\u7b49\u4ef7\u7c7b\u5408\u5e76\u4e3a\u4e00\u4e2a\u7b49\u4ef7\u7c7b","title":"\u52a8\u6001\u7b49\u4ef7\u6027\u95ee\u9898"},{"location":"ds/set/#_4","text":"\u6211\u4eec\u7528\u6811\u6765\u8868\u793a\u6bcf\u4e00\u4e2a\u96c6\u5408\uff0c\u6811\u7684\u6839\u547d\u540d\u8fd9\u4e2a\u96c6\u5408\uff08\u4ee3\u8868\u5143\uff09\uff0c\u6811\u7684\u96c6\u5408\u6784\u6210\u4e86\u4e00\u4e2a\u68ee\u6797\u3002 \u521d\u59cb\u65f6\uff0c\u6bcf\u68f5\u6811\u90fd\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u3002\u5f53\u9700\u8981\u6267\u884c Union \u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u6839\u6307\u9488\u6307\u5411\u53e6\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u3002\u5f53\u9700\u8981\u6267\u884c Find \u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u5143\u7d20 X \u4e00\u76f4\u5411\u4e0a\u76f4\u5230\u6839\u4e3a\u6b62\u3002 void SetUnion ( DisjSet S , SetType Rt1 , SetType Rt2 ) { S [ Rt2 ] = Rt1 ; } SetType Find ( ElementType X , DisjSet S ) { for ( ; S [ X ] > 0 ; X = S [ X ] ); return X ; } \u5b9e\u9645\u8fd0\u7528\u4e2d\uff0c Union \u548c Find \u64cd\u4f5c\u901a\u5e38\u6210\u5bf9\u51fa\u73b0: /* Algorithm using union-find operations */ { Initialize Si = { i } for i = 1 , ..., 12 ; for ( k = 1 ; k <= 9 ; k ++ ) { /* for each pair i \uf0ba j */ if ( Find ( i ) != Find ( j ) ) SetUnion ( Find ( i ), Find ( j ) ); } }","title":"\u57fa\u672c\u6570\u636e\u7ed3\u6784"},{"location":"ds/set/#_5","text":"\u6309\u5927\u5c0f\u6c42\u5e76 \u5373\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u6539\u53d8\u8f83\u5c0f\u7684\u6811 \u8bbe \\(T\\) \u662f\u6309\u5927\u5c0f\u5408\u5e76\u7684 \\(N\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u90a3\u4e48 \\(height(T)\\leq\\lfloor \\log_2N\\rfloor +1\\) (\u53ef\u7528\u5f52\u7eb3\u6cd5\u8bc1\u660e) \u56e0\u6b64\u5bf9\u4e8e \\(N\\) \u4e2a Union \u64cd\u4f5c \\(M\\) \u4e2a Find \u64cd\u4f5c\uff0c\u6240\u7528\u65f6\u95f4\u4e3a \\(O(N+M\\log_2N)\\) \u6309\u9ad8\u5ea6\u6c42\u5e76 \u5373\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u6539\u53d8\u8f83\u77ee\u7684\u6811","title":"\u7075\u5de7\u6c42\u5e76\u7b97\u6cd5"},{"location":"ds/set/#_6","text":"SetType Find ( ElementType X , DisjSet S ) { ElementType root , trail , lead ; for ( root = X ; S [ root ] > 0 ; root = S [ root ] ) ; /* find the root */ for ( trail = X ; trail != root ; trail = lead ) { lead = S [ trail ] ; S [ trail ] = root ; } /* collapsing */ return root ; } \u8def\u5f84\u538b\u7f29\u7684\u6548\u679c\u662f\uff0c\u4ece X \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u4f7f\u5b83\u7684\u7236\u8282\u70b9\u53d8\u6210\u6839\u3002 \u8def\u5f84\u538b\u7f29\u4e0e\u6309\u5927\u5c0f\u6c42\u5e76\u5b8c\u5168\u517c\u5bb9\uff0c\u53ef\u4ee5\u540c\u65f6\u5b9e\u73b0\uff0c\u4f46\u4e0d\u80fd\u4e0e\u6309\u9ad8\u5ea6\u6c42\u5e76\uff08\u6709\u65f6\u79f0\u4e3a\u79e9\uff09","title":"\u8def\u5f84\u538b\u7f29"},{"location":"ds/set/#_7","text":"\u4ee4 \\(T(M,N)\\) \u6267\u884c \\(M\\geq N\\) \u6b21 Find \u548c \\(N-1\\) \u6b21 Union \u64cd\u4f5c\u7684\u6700\u574f\u7528\u65f6\u3002\u90a3\u4e48 \\(k_1M\\alpha(M,N)\\leq T(M,N)\\leq k_2 M\\alpha(M,N)\\) \u5bf9\u4e8e\u67d0\u4e2a\u6b63\u5e38\u6570 \\(k_1,k_2\\) . \u5176\u4e2d \\(\\alpha(M,N)\\) \u662f Ackermann \u51fd\u6570. \\[ \\begin{align*} A(i,j)=\\left\\{ \\begin{matrix}2^j\\quad & i=1\\ and\\ j\\geq 1\\\\ A(i-1,2)\\quad & i\\geq 2\\ and\\ j=1\\\\ A(i-1,A(i,j-1))\\ & i\\geq 2\\ and\\ j\\geq 2 \\end{matrix}\\right. \\end{align*} \\] Info \u5e76\u67e5\u96c6: the disjoint set \u7b49\u4ef7\u5173\u7cfb: equivalence relations \u6309\u5927\u5c0f\u6c42\u5e76: union by size \u8def\u5f84\u538b\u7f29: path compression","title":"\u6309\u79e9\u6c42\u5e76\u548c\u8def\u5f84\u538b\u7f29\u7684\u6700\u574f\u60c5\u5f62"},{"location":"ds/sort/","text":"\u6392\u5e8f \u00b6 \u6211\u4eec\u5047\u8bbe \"<\" \">\" \u8fd0\u7b97\u7b26\u5b58\u5728\uff0c\u8fd9\u4e24\u79cd\u8fd0\u7b97\u662f\u4ec5\u6709\u7684\u5141\u8bb8\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u8fd9\u79f0\u4e3a \u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f . \u6211\u4eec\u5047\u5b9a N \u4e3a\u8981\u6392\u5e8f\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u6570\u636e\u4ece\u4f4d\u7f6e 0 \u5f00\u59cb\u3002 \u63d2\u5165\u6392\u5e8f \u00b6 \u63d2\u5165\u6392\u5e8f\u6709 N-1 \u8d9f(pass), \u5bf9\u4e8e \\(P=1\\) \u5230 \\(P=N-1\\) \u8d9f\u6211\u4eec\u4fdd\u8bc1\u4f4d\u7f6e 0 \u5230\u4f4d\u7f6e \\(P-1\\) \u4e0a\u7684\u5143\u7d20\u662f\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\uff0c\u800c\u7b2c \\(P\\) \u8d9f\u8981\u505a\u7684\u5c31\u662f\u5c06\u4f4d\u7f6e \\(P\\) \u7684\u5143\u7d20\u5411\u5de6\u79fb\u52a8\u5230\u5b83\u5728\u524d \\(P+1\\) \u4e2a\u5143\u7d20\u4e2d\u7684\u6b63\u786e\u4f4d\u7f6e\u4e0a\u3002 void InsertionSort ( ElementType A [ ], int N ) { int j , P ; ElementType Tmp ; for ( P = 1 ; P < N ; P ++ ) { Tmp = A [ P ]; /* the next coming card */ for ( j = P ; j > 0 && A [ j - 1 ] > Tmp ; j -- ) A [ j ] = A [ j - 1 ]; /* shift sorted cards to provide a position for the new coming card */ A [ j ] = Tmp ; /* place the new card at the proper position */ } /* end for-P-loop */ } \u6700\u4f73\u60c5\u51b5 - \u8f93\u5165\u6570\u636e\u662f\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\uff0c\u90a3\u4e48\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(N)\\) \u6700\u574f\u60c5\u51b5 - \u8f93\u5165\u6570\u636e\u662f\u9006\u5e8f\u7684\uff0c\u90a3\u4e48\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(N^2)\\) \u7b80\u5355\u6392\u5e8f\u7b97\u6cd5\u7684\u4e0b\u754c \u00b6 \u4e00\u4e2a \u9006\u5e8f \u662f\u6307\u6570\u7ec4\u4e2d \\(i<j\\) \u4f46 \\(A[i]>A[j]\\) \u7684\u5e8f\u5076 \\((A[i],A[j])\\) \u4ea4\u6362\u4e0d\u6309\u539f\u5e8f\u6392\u5217\u7684\u76f8\u90bb\u5143\u7d20\u4f1a\u6070\u597d\u6d88\u9664\u4e00\u4e2a\u9006\u5e8f\uff0c\u56e0\u6b64\u63d2\u5165\u6392\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(I+N)\\) . \u5176\u4e2d \\(I\\) \u4e3a\u539f\u59cb\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u6570\uff0c\u5f53\u9006\u5e8f\u6570\u8f83\u5c11\u65f6\u63d2\u5165\u6392\u5e8f\u4ee5\u7ebf\u6027\u65f6\u95f4\u8fd0\u884c\u3002 \\(N\\) \u4e2a\u4e92\u5f02\u6570\u7684\u6570\u7ec4\u7684\u5e73\u5747\u9006\u5e8f\u6570\u4e3a \\(\\dfrac{N(N-1)}{4}\\) \u901a\u8fc7\u4ea4\u6362\u76f8\u90bb\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u7684\u4efb\u4f55\u7b97\u6cd5\u5e73\u5747\u9700\u8981 \\(\\Omega(N^2)\\) \u65f6\u95f4 \u5e0c\u5c14\u6392\u5e8f \u00b6 \u5e0c\u5c14\u6392\u5e8f\u4f7f\u7528\u4e00\u4e2a \\(h_1,h_2,\\ldots,h_t\\) \u7684 \u589e\u91cf\u5e8f\u5217 ( \\(h_1=1\\) ). \\(h_k\\) -sort \u7684\u4e00\u822c\u505a\u6cd5\u662f\uff0c\u5bf9\u4e8e \\(h_k,h_k+1,\\ldots,N-1\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) , \u5c06\u5176\u5143\u7d20\u653e\u5230 \\(i,i-h_k,i-2h_k,\\ldots\\) \u4e2d\u95f4\u7684\u6b63\u786e\u4f4d\u7f6e\u4e0a\u3002\u76f8\u5f53\u4e8e\u5bf9 \\(h_k\\) \u4e2a\u72ec\u7acb\u7684\u5b50\u6570\u7ec4\u5404\u8fdb\u884c\u4e00\u6b21\u63d2\u5165\u6392\u5e8f\u3002 \\(h_k\\) -sort \u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \u6211\u4eec\u90fd\u6709 \\(a_i\\leq a_{i+h_k}\\) , \u6b64\u65f6\u6210\u79f0\u4e3a \\(h_k\\) -sorted . \u5e0c\u5c14\u6392\u5e8f\u7684\u4e00\u4e2a\u91cd\u8981\u6027\u8d28: \u4e00\u4e2a \\(h_k\\) -sorted \u7684\u6587\u4ef6\uff08\u6b64\u540e\u5c06\u662f \\(h_{k-1}\\) -sorted \uff09\u4fdd\u6301\u4ed6\u7684 \\(h_k\\) -sorted \u6027\u8d28\u3002 \u5e0c\u5c14\u589e\u91cf\u5e8f\u5217 \u00b6 \\(h_t=\\lfloor N/2 \\rfloor, h_k=\\lfloor h_{k+1}/2 \\rfloor\\) (\u53ef\u4ee5\u6709\u66f4\u597d\u7684\u589e\u91cf\u5e8f\u5217) void Shellsort ( ElementType A [ ], int N ) { int i , j , Increment ; ElementType Tmp ; for ( Increment = N / 2 ; Increment > 0 ; Increment /= 2 ) /*h sequence */ for ( i = Increment ; i < N ; i ++ ) { /* insertion sort */ Tmp = A [ i ]; for ( j = i ; j >= Increment ; j - = Increment ) if ( Tmp < A [ j - Increment ] ) A [ j ] = A [ j - Increment ]; else break ; A [ j ] = Tmp ; } /* end for-I and for-Increment loops */ } \u6700\u574f\u60c5\u5f62\u5206\u6790 \u4f7f\u7528\u5e0c\u5c14\u589e\u91cf\u65f6\u7684\u5e0c\u5c14\u6392\u5e8f\u7684\u6700\u574f\u60c5\u5f62\u8fd0\u884c\u65f6\u95f4\u4e3a \\(\\Theta(N^2)\\) Hibbard \u589e\u91cf\u5e8f\u5217 \\(h_k= 2^k-1\\) , \u4e14\u5176\u6700\u574f\u60c5\u5f62\u4e0b\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(N^{3/2})\\) \u5806\u6392\u5e8f \u00b6 \u5982\u679c\u6211\u4eec\u5148 BuildHeap , \u518d Delete N \u6b21\u6700\u5c0f\u5143\u7d20\uff0c\u8fd9\u6837\u9700\u8981\u591a\u4f7f\u7528\u4e00\u4e2a\u9644\u52a0\u6570\u7ec4\uff0c\u4f7f\u5f97\u5b58\u50a8\u9700\u6c42\u589e\u52a0\u4e00\u500d\u3002 \u6bcf\u6b21 DeleteMin \u540e\uff0c\u5806\u7684\u5927\u5c0f\u7f29\u5c0f\u4e86 1, \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u5806\u4e2d\u6700\u540e\u7684\u5355\u5143\u6765\u5b58\u653e\u521a\u521a\u5220\u53bb\u7684\u5143\u7d20\u3002 \u6574\u4f53\u6d41\u7a0b\uff1a \u4ee5\u7ebf\u6027\u65f6\u95f4\u5efa\u4e00\u4e2a Max \u5806 \u5c06\u5806\u4e2d\u6700\u540e\u5143\u7d20\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff0c\u7f29\u51cf\u5806\u7684\u5927\u5c0f\u5e76\u8fdb\u884c\u4e0b\u6ee4\u3002\u6267\u884c N-1 \u6b21 DeleteMax \u64cd\u4f5c \u7b97\u6cd5\u7ec8\u6b62\u65f6\uff0c\u6570\u7ec4\u6309\u987a\u5e8f\u5373\u4e3a\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u7ed3\u679c void Heapsort ( ElementType A [ ], int N ) { int i ; for ( i = N / 2 ; i >= 0 ; i - - ) /* BuildHeap */ PercDown ( A , i , N ); for ( i = N - 1 ; i > 0 ; i - - ) { Swap ( & A [ 0 ], & A [ i ] ); /* DeleteMax */ PercDown ( A , 0 , i ); } } \u6ce8\uff1a\u8fd9\u91cc\u7684\u5806\u6211\u4eec\u662f\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u56e0\u6b64\u5de6\u513f\u5b50\u5e94\u8be5\u662f 2*i+1 \u5bf9 N \u4e2a\u4e92\u5f02\u9879\u7684\u968f\u673a\u6392\u5217\u8fdb\u884c\u5806\u6392\u5e8f\uff0c\u5e73\u5747\u6bd4\u8f83\u6b21\u6570\u4e3a \\(2N\\log N-O(N\\log\\log N)\\) \u5f52\u5e76\u6392\u5e8f \u00b6 \u57fa\u672c\u64cd\u4f5c\uff1a\u5408\u5e76\u4e24\u4e2a\u5df2\u6392\u5e8f\u7684\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u7684\u65b9\u6cd5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u5b8c\u6210\u4e24\u4e2a\u8868\u7684\u5408\u5e76\uff0c\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b \u53d6\u4e24\u4e2a\u8f93\u5165\u6570\u7ec4 A \u548c B, \u4e00\u4e2a\u8f93\u51fa\u6570\u7ec4 C, \u4ee5\u53ca\u4e09\u4e2a\u8ba1\u6570\u5668 Aptr, Bptr, Cptr, \u5206\u522b\u5bf9\u5e94\u6570\u7ec4\u7684\u5f00\u7aef\u3002 \u6bcf\u6b21 A[Aptr] \u548c B[Bptr] \u4e2d\u7684\u8f83\u5c0f\u8005\u4f1a\u88ab\u62f7\u8d1d\u5230 C \u4e2d\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\uff0c\u76f8\u5173\u7684\u8ba1\u6570\u5668\u5411\u524d\u63a8\u8fdb\u4e00\u6b65\u3002 \u5f53\u4e24\u4e2a\u8f93\u5165\u8868\u4e2d\u6709\u4e00\u4e2a\u7528\u5b8c\u65f6\uff0c\u5c06\u53e6\u4e00\u4e2a\u8868\u7684\u5269\u4f59\u90e8\u5206\u62f7\u8d1d\u5230 C \u4e2d\u3002 \u6211\u4eec\u6700\u591a\u8fdb\u884c \\(N-1\\) \u6b21\u6bd4\u8f83\uff0c\u56e0\u6b64\u5408\u5e76\u65f6\u95f4\u663e\u7136\u662f\u7ebf\u6027\u7684\u3002 \u56e0\u6b64\u5f52\u5e76\u6392\u5e8f\u7684\u6d41\u7a0b\u5c31\u662f\uff0c\u5982\u679c N=1 \u90a3\u4e48\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u9700\u8981\u6392\u5e8f\uff0c\u7b54\u6848\u662f\u663e\u7136\u7684\uff1b\u5426\u5219\u9012\u5f52\u5730\u5c06\u524d\u534a\u90e8\u5206\u6570\u636e\u548c\u540e\u534a\u90e8\u5206\u6570\u636e\u5404\u81ea\u5f52\u5e76\u6392\u5e8f\uff0c\u5f97\u5230\u6392\u5e8f\u540e\u7684\u4e24\u90e8\u5206\u6570\u636e\uff0c\u7136\u540e\u4f7f\u7528\u521a\u521a\u63cf\u8ff0\u7684\u5408\u5e76\u64cd\u4f5c\u5c06\u8fd9\u4e24\u4e2a\u90e8\u5206\u5408\u5e76\u5230\u4e00\u8d77\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u9012\u5f52\u8c03\u7528 Merge \u90fd\u5c40\u90e8\u58f0\u660e\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\uff0c\u90a3\u4e48\u4efb\u610f\u65f6\u523b\u5c31\u4f1a\u6709 \\(\\log N\\) \u4e2a\u4e34\u65f6\u6570\u7ec4\u5904\u4e8e\u6d3b\u52a8\u671f\uff0c\u8fd9\u5bf9\u4e8e\u5c0f\u5185\u5b58\u7684\u673a\u5668\u662f\u81f4\u547d\u7684\u3002\u6ce8\u610f\u5230 Merge \u53ea\u5728\u6bcf\u6b21\u9012\u5f52\u8c03\u7528\u7684\u6700\u540e\u4e00\u884c\uff0c\u56e0\u6b64\u4efb\u4f55\u65f6\u523b\u53ea\u9700\u8981\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u6d3b\u52a8\uff0c\u800c\u4e14\u53ef\u4ee5\u4f7f\u7528\u8be5\u4e34\u65f6\u6570\u7ec4\u7684\u4efb\u610f\u90e8\u5206\uff0c\u8fd9\u6837\u8282\u7ea6\u4e86\u7a7a\u95f4\u3002 void MSort ( ElementType A [ ], ElementType TmpArray [ ], int Left , int Right ) { int Center ; if ( Left < Right ) { /* if there are elements to be sorted */ Center = ( Left + Right ) / 2 ; MSort ( A , TmpArray , Left , Center ); /* T( N / 2 ) */ MSort ( A , TmpArray , Center + 1 , Right ); /* T( N / 2 ) */ Merge ( A , TmpArray , Left , Center + 1 , Right ); /* O( N ) */ } } void Mergesort ( ElementType A [ ], int N ) { ElementType * TmpArray ; /* need O(N) extra space */ TmpArray = malloc ( N * sizeof ( ElementType ) ); if ( TmpArray != NULL ) { MSort ( A , TmpArray , 0 , N - 1 ); free ( TmpArray ); } else FatalError ( \"No space for tmp array!!!\" ); } /* Lpos = start of left half, Rpos = start of right half */ void Merge ( ElementType A [ ], ElementType TmpArray [ ], int Lpos , int Rpos , int RightEnd ) { int i , LeftEnd , NumElements , TmpPos ; LeftEnd = Rpos - 1 ; TmpPos = Lpos ; NumElements = RightEnd - Lpos + 1 ; while ( Lpos <= LeftEnd && Rpos <= RightEnd ) /* main loop */ if ( A [ Lpos ] <= A [ Rpos ] ) TmpArray [ TmpPos ++ ] = A [ Lpos ++ ]; else TmpArray [ TmpPos ++ ] = A [ Rpos ++ ]; while ( Lpos <= LeftEnd ) /* Copy rest of first half */ TmpArray [ TmpPos ++ ] = A [ Lpos ++ ]; while ( Rpos <= RightEnd ) /* Copy rest of second half */ TmpArray [ TmpPos ++ ] = A [ Rpos ++ ]; for ( i = 0 ; i < NumElements ; i ++ , RightEnd - - ) /* Copy TmpArray back */ A [ RightEnd ] = TmpArray [ RightEnd ]; } \u8fd0\u884c\u65f6\u95f4\u5206\u6790 \\[ \\begin{align*} T(1) & = 1\\\\ T(N) & = 2T(N/2)+O(N) \\\\ & = 2^kT(N/2^k) + k*O(N)\\\\ & = N *T(1) +\\log N *O(N)\\\\ & = O(N+N\\log N) \\end{align*} \\] \u6ce8\uff1aMergesort \u9700\u8981\u7ebf\u6027\u5916\u90e8\u5185\u5b58\uff0c\u590d\u5236\u6570\u7ec4\u7f13\u6162\uff0c\u56e0\u6b64\u4e0d\u9002\u5408\u7528\u4e8e\u5185\u90e8\u6392\u5e8f\uff0c\u4f46\u5bf9\u4e8e\u5916\u90e8\u6392\u5e8f\u662f\u6709\u7528\u7684\u3002 \u5feb\u901f\u6392\u5e8f \u00b6 \u5feb\u901f\u6392\u5e8f\u662f\u5728\u5b9e\u8df5\u4e2d\u5df2\u77e5\u7684\u6700\u5feb\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u662f \\(O(N\\log N)\\) \u5feb\u901f\u6392\u5e8f\u7684\u7b97\u6cd5\u6d41\u7a0b\uff1a\uff08\u5c06\u6570\u7ec4 S \u6392\u5e8f\uff09 \u5982\u679c S \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u662f 0 \u6216\u8005 1 \u5219\u8fd4\u56de \u4ece S \u4e2d\u53d6\u4efb\u610f\u5143\u7d20\u4e3a \u4e3b\u5143 \u5c06 \\(S-\\{v\\}\\) \u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408 \\(S_1=\\{x\\in S-\\{v\\}|x\\leq v\\}, S_2=\\{x\\in S-\\{v\\}|x\\geq v\\}\\) \u8fd4\u56de \\(quicksort(S_1), v, quicksort(S_2)\\) \u5bf9\u4e8e\u4e0d\u540c\u4e3b\u5143\u7684\u9009\u53d6\uff0c\u5206\u5272\u7684\u63cf\u8ff0\u4e0d\u662f\u552f\u4e00\u7684\u3002 \u9009\u53d6\u4e3b\u5143 \u00b6 \u9519\u8bef\u7684\u65b9\u6cd5 Pivot=A[0] \u8fd9\u6837\u5982\u679c\u8f93\u5165\u662f\u987a\u5e8f\u6216\u8005\u53cd\u5e8f\u7684\uff0c\u90a3\u4e48\u6bcf\u6b21\u5212\u5206\u6240\u6709\u5143\u7d20\u5168\u90e8\u843d\u5165 \\(S_1\\) \u6216\u8005 \\(S_2\\) , \u9009\u53d6\u4e3b\u5143\u5e76\u6ca1\u6709\u5e26\u6765\u4efb\u4f55\u5e2e\u52a9\uff0c\u5b8c\u6210\u6392\u5e8f\u9700\u8981 \\(O(N^2)\\) \u7684\u65f6\u95f4\u3002 \u5b89\u5168\u505a\u6cd5 Pivot = random select from A[] \u4f46\u968f\u673a\u6570\u7684\u4ea7\u751f\u662f\u6602\u8d35\u7684 \u4e09\u6570\u4e2d\u503c\u5206\u5272\u6cd5 Pivot = median(left, center, right) \u4e00\u7ec4 N \u4e2a\u6570\u7684\u4e2d\u503c\u662f\u7b2c \\(\\lceil N/2 \\rceil\\) \u5927\u7684\u6570\uff0c\u4e3b\u5143\u6700\u597d\u662f\u9009\u62e9\u4e2d\u503c\uff0c\u4f46\u8fd9\u5f88\u96be\u7b97\u51fa\uff0c\u800c\u4e14\u4f1a\u660e\u663e\u51cf\u6162\u6392\u5e8f\u7684\u901f\u5ea6\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5de6\u7aef\u3001\u53f3\u7aef\u548c\u4e2d\u5fc3\u4f4d\u7f6e\u4e0a\u7684\u4e09\u4e2a\u5143\u7d20\u7684\u4e2d\u503c\u4f5c\u4e3a\u4e3b\u5143\u3002 \u8fd9\u6837\u6d88\u9664\u4e86\u9519\u8bef\u65b9\u6cd5\u4e2d\u7684\u6700\u574f\u60c5\u5f62\uff0c\u51cf\u5c11\u4e86\u5feb\u901f\u6392\u5e8f\u5927\u6982 5% \u7684\u8fd0\u884c\u65f6\u95f4\u3002 \u5212\u5206\u7b56\u7565 \u00b6 \u9996\u5148\u6211\u4eec\u5c06\u4e3b\u5143\u548c\u6700\u540e\u7684\u5143\u7d20\u4ea4\u6362\uff0c\u4f7f\u5f97\u4e3b\u5143\u79bb\u5f00\u5c06\u8981\u5206\u5272\u7684\u6570\u636e\u6bb5\uff0c\u968f\u540e i \u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0cj \u4ece\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u3002\uff08\u5047\u8bbe\u6240\u6709\u5143\u7d20\u4e92\u5f02\uff09 \u5f53 i \u5728 j \u7684\u5de6\u8fb9\u65f6\uff0c\u6211\u4eec\u5c06 i \u53f3\u79fb\uff0c\u79fb\u8fc7\u90a3\u4e9b\u5c0f\u4e8e\u4e3b\u5143\u7684\u5143\u7d20\uff0c\u5e76\u5c06 j \u5de6\u79fb\uff0c\u79fb\u8fc7\u90a3\u4e9b\u5927\u4e8e\u4e3b\u5143\u7684\u5143\u7d20\u3002 \u5f53 i \u548c j \u505c\u6b62\u65f6\uff0ci \u6307\u5411\u4e00\u4e2a\u5927\u5143\u7d20\u800c j \u6307\u5411\u4e00\u4e2a\u5c0f\u5143\u7d20\uff0c\u5982\u679c i \u5728 j \u7684\u5de6\u8fb9\u90a3\u4e48\u5c06\u8fd9\u4e24\u4e2a\u5143\u7d20\u4e92\u6362\u3002 \u76f4\u5230 i \u548c j \u5f7c\u6b64\u4ea4\u9519\u65f6\uff0c\u505c\u6b62\u4ea4\u6362 \u5c06 i \u548c\u4e3b\u5143\u4ea4\u6362 \u5bf9\u4e8e\u90a3\u4e9b\u7b49\u4e8e\u4e3b\u5143\u7684\u5173\u952e\u5b57\uff0c\u6211\u4eec\u91c7\u7528\u505c\u6b62 i j \u5e76\u4ea4\u6362\u7684\u7b56\u7565\u3002\u56e0\u4e3a\u82e5 i j \u4e0d\u505c\u6b62\uff0c\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u6240\u6709\u5173\u952e\u5b57\u90fd\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u6709\u7a0b\u5e8f\u9632\u6b62 i j \u8d85\u51fa\u6570\u7ec4\u7684\u754c\u9650\u3002\u6700\u540e\u6211\u4eec\u4f1a\u628a\u4e3b\u5143\u4ea4\u6362\u5230 i \u7684\u6700\u540e\u4f4d\u7f6e\u4e0a\uff0c\u4e5f\u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u6837\u6211\u4eec\u53c8\u9677\u5165\u4e86\u6700\u574f\u60c5\u51b5\u3002 \u5c0f\u6570\u7ec4 \u00b6 \u5bf9\u4e8e\u5f88\u5c0f\u7684\u6570\u7ec4( \\(N\\leq 20\\) )\u5feb\u901f\u6392\u5e8f\u4e0d\u5982\u63d2\u5165\u6392\u5e8f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u622a\u6b62\u8303\u56f4 Cutoff( e.g. 10). \u5f53 N \u5c0f\u4e8e\u9608\u503c\u7684\u65f6\u5019\u91c7\u7528\u63d2\u5165\u6392\u5e8f. \u5b9e\u73b0 \u00b6 void Quicksort ( ElementType A [ ], int N ) { Qsort ( A , 0 , N - 1 ); /* A: the array */ /* 0: Left index */ /* N \u2013 1: Right index */ } /* Return median of Left, Center, and Right */ /* Order these and hide the pivot */ ElementType Median3 ( ElementType A [ ], int Left , int Right ) { int Center = ( Left + Right ) / 2 ; if ( A [ Left ] > A [ Center ] ) Swap ( & A [ Left ], & A [ Center ] ); if ( A [ Left ] > A [ Right ] ) Swap ( & A [ Left ], & A [ Right ] ); if ( A [ Center ] > A [ Right ] ) Swap ( & A [ Center ], & A [ Right ] ); /* Invariant: A[ Left ] <= A[ Center ] <= A[ Right ] */ Swap ( & A [ Center ], & A [ Right - 1 ] ); /* Hide pivot */ /* only need to sort A[ Left + 1 ] \u2026 A[ Right \u2013 2 ] */ return A [ Right - 1 ]; /* Return pivot */ } void Qsort ( ElementType A [ ], int Left , int Right ) { int i , j ; ElementType Pivot ; if ( Left + Cutoff <= Right ) { /* if the sequence is not too short */ Pivot = Median3 ( A , Left , Right ); /* select pivot */ i = Left ; j = Right \u2013 1 ; /* why not set Left+1 and Right-2? */ for ( ; ; ) { while ( A [ + + i ] < Pivot ) { } /* scan from left */ while ( A [ \u2013 \u2013 j ] > Pivot ) { } /* scan from right */ if ( i < j ) Swap ( & A [ i ], & A [ j ] ); /* adjust partition */ else break ; /* partition done */ } Swap ( & A [ i ], & A [ Right - 1 ] ); /* restore pivot */ Qsort ( A , Left , i - 1 ); /* recursively sort left part */ Qsort ( A , i + 1 , Right ); /* recursively sort right part */ } /* end if - the sequence is long */ else /* do an insertion sort on the short subarray */ InsertionSort ( A + Left , Right - Left + 1 ); } \u5728\u6700\u5f00\u59cb\u9009\u53d6\u4e3b\u5143\u65f6\uff0c\u6211\u4eec\u5c06 A[left],A[mid],A[Right] \u8fdb\u884c\u6392\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c06\u8f83\u5c0f\u503c\u653e\u5728\u4e86\u6700\u5de6\u8fb9\uff0c\u8f83\u5927\u503c\u653e\u5728\u4e86\u6700\u53f3\u8fb9\uff0c\u8fd9\u7b26\u5408\u5206\u5272\u7684\u8981\u6c42\u3002\u6b64\u5916\u7531\u4e8e A[left] \u6bd4\u4e3b\u5143\u5c0f\uff0c\u6211\u4eec\u4e0d\u7528\u62c5\u5fc3 j \u8d8a\u754c\u3002 \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \\(T(N)=T(i)+T(N-i-1+)+cN\\) \u5176\u4e2d \\(i=|S_1|\\) \u6700\u574f\u60c5\u5f62\uff1a\u4e3b\u5143\u59cb\u7ec8\u662f\u6700\u5c0f\u5143\u7d20\uff0c\u6b64\u65f6 \\(i=0\\) \u5219\u9012\u63a8\u5173\u7cfb\u4e3a \\(T(N)=T(N-1)+cN,N>1\\) \u90a3\u4e48 \\(T(N)=T(1)+d\\sum\\limits_{i=2}^N i=O(N^2)\\) \u6700\u597d\u60c5\u5f62\uff1a\u4e3b\u5143\u6b63\u597d\u4f4d\u4e8e\u4e2d\u95f4 \\(T(N)=2T(N/2)+cN\\Rightarrow T(N)=O(N\\log N)\\) \u5e73\u5747\u60c5\u5f62\uff1a \\(T(N)=\\dfrac{2}{N}\\sum\\limits_{j=0}^{N-1}T(j)+cN\\Rightarrow T(N)=O(N\\log N)\\) \u5927\u578b\u7ed3\u6784\u7684\u6392\u5e8f \u00b6 \u4ea4\u6362\u4e24\u4e2a\u5927\u578b\u7684\u7ed3\u6784\u53ef\u80fd\u662f\u975e\u5e38\u6602\u8d35\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8ba9\u8f93\u5165\u6570\u7ec4\u5305\u542b\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\uff0c\u901a\u8fc7\u6bd4\u8f83\u6307\u9488\u6307\u5411\u7684\u5173\u952e\u5b57\uff0c\u5fc5\u8981\u65f6\u4ea4\u6362\u6307\u9488\u6765\u8fdb\u884c\u6392\u5e8f\u3002 \u6392\u5e8f\u7684\u4e00\u822c\u4e0b\u754c \u00b6 \u53ea\u4f7f\u7528\u6bd4\u8f83\u7684\u4efb\u610f\u6392\u5e8f\u7b97\u6cd5\u6700\u574f\u60c5\u5f62\u4e0b\u90fd\u9700\u8981 \\(\\Omega(N\\log N)\\) \u4f7f\u7528\u51b3\u7b56\u6811\u8bc1\u660e\uff1a\u5171 \\(N!\\) \u79cd\u6392\u5e8f\u53ef\u80fd\uff0c\u56e0\u6b64\u51b3\u7b56\u4e8c\u53c9\u6811\u6709 \\(N!\\) \u7247\u53f6\u5b50\uff0c\u5219\u6811\u7684\u6df1\u5ea6\u81f3\u5c11\u4e3a \\(\\log(N!)=\\Omega(N\\log N)\\) \u6876\u6392\u5e8f \u00b6 \u82e5\u8f93\u5165\u6570\u636e \\(A_1,A_2,\\ldots,A_N\\) \u90fd\u5c0f\u4e8e \\(M\\) , \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(M\\) \u7684 Count \u6570\u7ec4\uff0c\u521d\u59cb\u5316\u4e3a\u5168 0. \u4e8e\u662f Count \u6709 \\(M\\) \u4e2a\u6876\uff0c\u8bfb\u5165\u5230 \\(A_i\\) \u65f6 Count[Ai] \u81ea\u589e\u4e00\u3002\u6240\u6709\u6570\u636e\u8bfb\u5b8c\u540e\u626b\u63cf\u6570\u7ec4 Count \u6253\u5370\u6392\u5e8f\u540e\u7684\u8868\u3002 { initialize count [ ]; while ( read in a student \u2019 s record ) insert to list count [ stdnt . grade ]; for ( i = 0 ; i < M ; i ++ ) { if ( count [ i ]) output list count [ i ]; } } \\(O(M+N)\\) LSB MSB","title":"\u6392\u5e8f"},{"location":"ds/sort/#_1","text":"\u6211\u4eec\u5047\u8bbe \"<\" \">\" \u8fd0\u7b97\u7b26\u5b58\u5728\uff0c\u8fd9\u4e24\u79cd\u8fd0\u7b97\u662f\u4ec5\u6709\u7684\u5141\u8bb8\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u8fd9\u79f0\u4e3a \u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f . \u6211\u4eec\u5047\u5b9a N \u4e3a\u8981\u6392\u5e8f\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u6570\u636e\u4ece\u4f4d\u7f6e 0 \u5f00\u59cb\u3002","title":"\u6392\u5e8f"},{"location":"ds/sort/#_2","text":"\u63d2\u5165\u6392\u5e8f\u6709 N-1 \u8d9f(pass), \u5bf9\u4e8e \\(P=1\\) \u5230 \\(P=N-1\\) \u8d9f\u6211\u4eec\u4fdd\u8bc1\u4f4d\u7f6e 0 \u5230\u4f4d\u7f6e \\(P-1\\) \u4e0a\u7684\u5143\u7d20\u662f\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\uff0c\u800c\u7b2c \\(P\\) \u8d9f\u8981\u505a\u7684\u5c31\u662f\u5c06\u4f4d\u7f6e \\(P\\) \u7684\u5143\u7d20\u5411\u5de6\u79fb\u52a8\u5230\u5b83\u5728\u524d \\(P+1\\) \u4e2a\u5143\u7d20\u4e2d\u7684\u6b63\u786e\u4f4d\u7f6e\u4e0a\u3002 void InsertionSort ( ElementType A [ ], int N ) { int j , P ; ElementType Tmp ; for ( P = 1 ; P < N ; P ++ ) { Tmp = A [ P ]; /* the next coming card */ for ( j = P ; j > 0 && A [ j - 1 ] > Tmp ; j -- ) A [ j ] = A [ j - 1 ]; /* shift sorted cards to provide a position for the new coming card */ A [ j ] = Tmp ; /* place the new card at the proper position */ } /* end for-P-loop */ } \u6700\u4f73\u60c5\u51b5 - \u8f93\u5165\u6570\u636e\u662f\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\uff0c\u90a3\u4e48\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(N)\\) \u6700\u574f\u60c5\u51b5 - \u8f93\u5165\u6570\u636e\u662f\u9006\u5e8f\u7684\uff0c\u90a3\u4e48\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(N^2)\\)","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"ds/sort/#_3","text":"\u4e00\u4e2a \u9006\u5e8f \u662f\u6307\u6570\u7ec4\u4e2d \\(i<j\\) \u4f46 \\(A[i]>A[j]\\) \u7684\u5e8f\u5076 \\((A[i],A[j])\\) \u4ea4\u6362\u4e0d\u6309\u539f\u5e8f\u6392\u5217\u7684\u76f8\u90bb\u5143\u7d20\u4f1a\u6070\u597d\u6d88\u9664\u4e00\u4e2a\u9006\u5e8f\uff0c\u56e0\u6b64\u63d2\u5165\u6392\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(I+N)\\) . \u5176\u4e2d \\(I\\) \u4e3a\u539f\u59cb\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u6570\uff0c\u5f53\u9006\u5e8f\u6570\u8f83\u5c11\u65f6\u63d2\u5165\u6392\u5e8f\u4ee5\u7ebf\u6027\u65f6\u95f4\u8fd0\u884c\u3002 \\(N\\) \u4e2a\u4e92\u5f02\u6570\u7684\u6570\u7ec4\u7684\u5e73\u5747\u9006\u5e8f\u6570\u4e3a \\(\\dfrac{N(N-1)}{4}\\) \u901a\u8fc7\u4ea4\u6362\u76f8\u90bb\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u7684\u4efb\u4f55\u7b97\u6cd5\u5e73\u5747\u9700\u8981 \\(\\Omega(N^2)\\) \u65f6\u95f4","title":"\u7b80\u5355\u6392\u5e8f\u7b97\u6cd5\u7684\u4e0b\u754c"},{"location":"ds/sort/#_4","text":"\u5e0c\u5c14\u6392\u5e8f\u4f7f\u7528\u4e00\u4e2a \\(h_1,h_2,\\ldots,h_t\\) \u7684 \u589e\u91cf\u5e8f\u5217 ( \\(h_1=1\\) ). \\(h_k\\) -sort \u7684\u4e00\u822c\u505a\u6cd5\u662f\uff0c\u5bf9\u4e8e \\(h_k,h_k+1,\\ldots,N-1\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) , \u5c06\u5176\u5143\u7d20\u653e\u5230 \\(i,i-h_k,i-2h_k,\\ldots\\) \u4e2d\u95f4\u7684\u6b63\u786e\u4f4d\u7f6e\u4e0a\u3002\u76f8\u5f53\u4e8e\u5bf9 \\(h_k\\) \u4e2a\u72ec\u7acb\u7684\u5b50\u6570\u7ec4\u5404\u8fdb\u884c\u4e00\u6b21\u63d2\u5165\u6392\u5e8f\u3002 \\(h_k\\) -sort \u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \u6211\u4eec\u90fd\u6709 \\(a_i\\leq a_{i+h_k}\\) , \u6b64\u65f6\u6210\u79f0\u4e3a \\(h_k\\) -sorted . \u5e0c\u5c14\u6392\u5e8f\u7684\u4e00\u4e2a\u91cd\u8981\u6027\u8d28: \u4e00\u4e2a \\(h_k\\) -sorted \u7684\u6587\u4ef6\uff08\u6b64\u540e\u5c06\u662f \\(h_{k-1}\\) -sorted \uff09\u4fdd\u6301\u4ed6\u7684 \\(h_k\\) -sorted \u6027\u8d28\u3002","title":"\u5e0c\u5c14\u6392\u5e8f"},{"location":"ds/sort/#_5","text":"\\(h_t=\\lfloor N/2 \\rfloor, h_k=\\lfloor h_{k+1}/2 \\rfloor\\) (\u53ef\u4ee5\u6709\u66f4\u597d\u7684\u589e\u91cf\u5e8f\u5217) void Shellsort ( ElementType A [ ], int N ) { int i , j , Increment ; ElementType Tmp ; for ( Increment = N / 2 ; Increment > 0 ; Increment /= 2 ) /*h sequence */ for ( i = Increment ; i < N ; i ++ ) { /* insertion sort */ Tmp = A [ i ]; for ( j = i ; j >= Increment ; j - = Increment ) if ( Tmp < A [ j - Increment ] ) A [ j ] = A [ j - Increment ]; else break ; A [ j ] = Tmp ; } /* end for-I and for-Increment loops */ } \u6700\u574f\u60c5\u5f62\u5206\u6790 \u4f7f\u7528\u5e0c\u5c14\u589e\u91cf\u65f6\u7684\u5e0c\u5c14\u6392\u5e8f\u7684\u6700\u574f\u60c5\u5f62\u8fd0\u884c\u65f6\u95f4\u4e3a \\(\\Theta(N^2)\\) Hibbard \u589e\u91cf\u5e8f\u5217 \\(h_k= 2^k-1\\) , \u4e14\u5176\u6700\u574f\u60c5\u5f62\u4e0b\u8fd0\u884c\u65f6\u95f4\u4e3a \\(O(N^{3/2})\\)","title":"\u5e0c\u5c14\u589e\u91cf\u5e8f\u5217"},{"location":"ds/sort/#_6","text":"\u5982\u679c\u6211\u4eec\u5148 BuildHeap , \u518d Delete N \u6b21\u6700\u5c0f\u5143\u7d20\uff0c\u8fd9\u6837\u9700\u8981\u591a\u4f7f\u7528\u4e00\u4e2a\u9644\u52a0\u6570\u7ec4\uff0c\u4f7f\u5f97\u5b58\u50a8\u9700\u6c42\u589e\u52a0\u4e00\u500d\u3002 \u6bcf\u6b21 DeleteMin \u540e\uff0c\u5806\u7684\u5927\u5c0f\u7f29\u5c0f\u4e86 1, \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u5806\u4e2d\u6700\u540e\u7684\u5355\u5143\u6765\u5b58\u653e\u521a\u521a\u5220\u53bb\u7684\u5143\u7d20\u3002 \u6574\u4f53\u6d41\u7a0b\uff1a \u4ee5\u7ebf\u6027\u65f6\u95f4\u5efa\u4e00\u4e2a Max \u5806 \u5c06\u5806\u4e2d\u6700\u540e\u5143\u7d20\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff0c\u7f29\u51cf\u5806\u7684\u5927\u5c0f\u5e76\u8fdb\u884c\u4e0b\u6ee4\u3002\u6267\u884c N-1 \u6b21 DeleteMax \u64cd\u4f5c \u7b97\u6cd5\u7ec8\u6b62\u65f6\uff0c\u6570\u7ec4\u6309\u987a\u5e8f\u5373\u4e3a\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u7ed3\u679c void Heapsort ( ElementType A [ ], int N ) { int i ; for ( i = N / 2 ; i >= 0 ; i - - ) /* BuildHeap */ PercDown ( A , i , N ); for ( i = N - 1 ; i > 0 ; i - - ) { Swap ( & A [ 0 ], & A [ i ] ); /* DeleteMax */ PercDown ( A , 0 , i ); } } \u6ce8\uff1a\u8fd9\u91cc\u7684\u5806\u6211\u4eec\u662f\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u56e0\u6b64\u5de6\u513f\u5b50\u5e94\u8be5\u662f 2*i+1 \u5bf9 N \u4e2a\u4e92\u5f02\u9879\u7684\u968f\u673a\u6392\u5217\u8fdb\u884c\u5806\u6392\u5e8f\uff0c\u5e73\u5747\u6bd4\u8f83\u6b21\u6570\u4e3a \\(2N\\log N-O(N\\log\\log N)\\)","title":"\u5806\u6392\u5e8f"},{"location":"ds/sort/#_7","text":"\u57fa\u672c\u64cd\u4f5c\uff1a\u5408\u5e76\u4e24\u4e2a\u5df2\u6392\u5e8f\u7684\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u7684\u65b9\u6cd5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u5b8c\u6210\u4e24\u4e2a\u8868\u7684\u5408\u5e76\uff0c\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b \u53d6\u4e24\u4e2a\u8f93\u5165\u6570\u7ec4 A \u548c B, \u4e00\u4e2a\u8f93\u51fa\u6570\u7ec4 C, \u4ee5\u53ca\u4e09\u4e2a\u8ba1\u6570\u5668 Aptr, Bptr, Cptr, \u5206\u522b\u5bf9\u5e94\u6570\u7ec4\u7684\u5f00\u7aef\u3002 \u6bcf\u6b21 A[Aptr] \u548c B[Bptr] \u4e2d\u7684\u8f83\u5c0f\u8005\u4f1a\u88ab\u62f7\u8d1d\u5230 C \u4e2d\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\uff0c\u76f8\u5173\u7684\u8ba1\u6570\u5668\u5411\u524d\u63a8\u8fdb\u4e00\u6b65\u3002 \u5f53\u4e24\u4e2a\u8f93\u5165\u8868\u4e2d\u6709\u4e00\u4e2a\u7528\u5b8c\u65f6\uff0c\u5c06\u53e6\u4e00\u4e2a\u8868\u7684\u5269\u4f59\u90e8\u5206\u62f7\u8d1d\u5230 C \u4e2d\u3002 \u6211\u4eec\u6700\u591a\u8fdb\u884c \\(N-1\\) \u6b21\u6bd4\u8f83\uff0c\u56e0\u6b64\u5408\u5e76\u65f6\u95f4\u663e\u7136\u662f\u7ebf\u6027\u7684\u3002 \u56e0\u6b64\u5f52\u5e76\u6392\u5e8f\u7684\u6d41\u7a0b\u5c31\u662f\uff0c\u5982\u679c N=1 \u90a3\u4e48\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u9700\u8981\u6392\u5e8f\uff0c\u7b54\u6848\u662f\u663e\u7136\u7684\uff1b\u5426\u5219\u9012\u5f52\u5730\u5c06\u524d\u534a\u90e8\u5206\u6570\u636e\u548c\u540e\u534a\u90e8\u5206\u6570\u636e\u5404\u81ea\u5f52\u5e76\u6392\u5e8f\uff0c\u5f97\u5230\u6392\u5e8f\u540e\u7684\u4e24\u90e8\u5206\u6570\u636e\uff0c\u7136\u540e\u4f7f\u7528\u521a\u521a\u63cf\u8ff0\u7684\u5408\u5e76\u64cd\u4f5c\u5c06\u8fd9\u4e24\u4e2a\u90e8\u5206\u5408\u5e76\u5230\u4e00\u8d77\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u9012\u5f52\u8c03\u7528 Merge \u90fd\u5c40\u90e8\u58f0\u660e\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\uff0c\u90a3\u4e48\u4efb\u610f\u65f6\u523b\u5c31\u4f1a\u6709 \\(\\log N\\) \u4e2a\u4e34\u65f6\u6570\u7ec4\u5904\u4e8e\u6d3b\u52a8\u671f\uff0c\u8fd9\u5bf9\u4e8e\u5c0f\u5185\u5b58\u7684\u673a\u5668\u662f\u81f4\u547d\u7684\u3002\u6ce8\u610f\u5230 Merge \u53ea\u5728\u6bcf\u6b21\u9012\u5f52\u8c03\u7528\u7684\u6700\u540e\u4e00\u884c\uff0c\u56e0\u6b64\u4efb\u4f55\u65f6\u523b\u53ea\u9700\u8981\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u6d3b\u52a8\uff0c\u800c\u4e14\u53ef\u4ee5\u4f7f\u7528\u8be5\u4e34\u65f6\u6570\u7ec4\u7684\u4efb\u610f\u90e8\u5206\uff0c\u8fd9\u6837\u8282\u7ea6\u4e86\u7a7a\u95f4\u3002 void MSort ( ElementType A [ ], ElementType TmpArray [ ], int Left , int Right ) { int Center ; if ( Left < Right ) { /* if there are elements to be sorted */ Center = ( Left + Right ) / 2 ; MSort ( A , TmpArray , Left , Center ); /* T( N / 2 ) */ MSort ( A , TmpArray , Center + 1 , Right ); /* T( N / 2 ) */ Merge ( A , TmpArray , Left , Center + 1 , Right ); /* O( N ) */ } } void Mergesort ( ElementType A [ ], int N ) { ElementType * TmpArray ; /* need O(N) extra space */ TmpArray = malloc ( N * sizeof ( ElementType ) ); if ( TmpArray != NULL ) { MSort ( A , TmpArray , 0 , N - 1 ); free ( TmpArray ); } else FatalError ( \"No space for tmp array!!!\" ); } /* Lpos = start of left half, Rpos = start of right half */ void Merge ( ElementType A [ ], ElementType TmpArray [ ], int Lpos , int Rpos , int RightEnd ) { int i , LeftEnd , NumElements , TmpPos ; LeftEnd = Rpos - 1 ; TmpPos = Lpos ; NumElements = RightEnd - Lpos + 1 ; while ( Lpos <= LeftEnd && Rpos <= RightEnd ) /* main loop */ if ( A [ Lpos ] <= A [ Rpos ] ) TmpArray [ TmpPos ++ ] = A [ Lpos ++ ]; else TmpArray [ TmpPos ++ ] = A [ Rpos ++ ]; while ( Lpos <= LeftEnd ) /* Copy rest of first half */ TmpArray [ TmpPos ++ ] = A [ Lpos ++ ]; while ( Rpos <= RightEnd ) /* Copy rest of second half */ TmpArray [ TmpPos ++ ] = A [ Rpos ++ ]; for ( i = 0 ; i < NumElements ; i ++ , RightEnd - - ) /* Copy TmpArray back */ A [ RightEnd ] = TmpArray [ RightEnd ]; } \u8fd0\u884c\u65f6\u95f4\u5206\u6790 \\[ \\begin{align*} T(1) & = 1\\\\ T(N) & = 2T(N/2)+O(N) \\\\ & = 2^kT(N/2^k) + k*O(N)\\\\ & = N *T(1) +\\log N *O(N)\\\\ & = O(N+N\\log N) \\end{align*} \\] \u6ce8\uff1aMergesort \u9700\u8981\u7ebf\u6027\u5916\u90e8\u5185\u5b58\uff0c\u590d\u5236\u6570\u7ec4\u7f13\u6162\uff0c\u56e0\u6b64\u4e0d\u9002\u5408\u7528\u4e8e\u5185\u90e8\u6392\u5e8f\uff0c\u4f46\u5bf9\u4e8e\u5916\u90e8\u6392\u5e8f\u662f\u6709\u7528\u7684\u3002","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"ds/sort/#_8","text":"\u5feb\u901f\u6392\u5e8f\u662f\u5728\u5b9e\u8df5\u4e2d\u5df2\u77e5\u7684\u6700\u5feb\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u662f \\(O(N\\log N)\\) \u5feb\u901f\u6392\u5e8f\u7684\u7b97\u6cd5\u6d41\u7a0b\uff1a\uff08\u5c06\u6570\u7ec4 S \u6392\u5e8f\uff09 \u5982\u679c S \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u662f 0 \u6216\u8005 1 \u5219\u8fd4\u56de \u4ece S \u4e2d\u53d6\u4efb\u610f\u5143\u7d20\u4e3a \u4e3b\u5143 \u5c06 \\(S-\\{v\\}\\) \u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408 \\(S_1=\\{x\\in S-\\{v\\}|x\\leq v\\}, S_2=\\{x\\in S-\\{v\\}|x\\geq v\\}\\) \u8fd4\u56de \\(quicksort(S_1), v, quicksort(S_2)\\) \u5bf9\u4e8e\u4e0d\u540c\u4e3b\u5143\u7684\u9009\u53d6\uff0c\u5206\u5272\u7684\u63cf\u8ff0\u4e0d\u662f\u552f\u4e00\u7684\u3002","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"ds/sort/#_9","text":"\u9519\u8bef\u7684\u65b9\u6cd5 Pivot=A[0] \u8fd9\u6837\u5982\u679c\u8f93\u5165\u662f\u987a\u5e8f\u6216\u8005\u53cd\u5e8f\u7684\uff0c\u90a3\u4e48\u6bcf\u6b21\u5212\u5206\u6240\u6709\u5143\u7d20\u5168\u90e8\u843d\u5165 \\(S_1\\) \u6216\u8005 \\(S_2\\) , \u9009\u53d6\u4e3b\u5143\u5e76\u6ca1\u6709\u5e26\u6765\u4efb\u4f55\u5e2e\u52a9\uff0c\u5b8c\u6210\u6392\u5e8f\u9700\u8981 \\(O(N^2)\\) \u7684\u65f6\u95f4\u3002 \u5b89\u5168\u505a\u6cd5 Pivot = random select from A[] \u4f46\u968f\u673a\u6570\u7684\u4ea7\u751f\u662f\u6602\u8d35\u7684 \u4e09\u6570\u4e2d\u503c\u5206\u5272\u6cd5 Pivot = median(left, center, right) \u4e00\u7ec4 N \u4e2a\u6570\u7684\u4e2d\u503c\u662f\u7b2c \\(\\lceil N/2 \\rceil\\) \u5927\u7684\u6570\uff0c\u4e3b\u5143\u6700\u597d\u662f\u9009\u62e9\u4e2d\u503c\uff0c\u4f46\u8fd9\u5f88\u96be\u7b97\u51fa\uff0c\u800c\u4e14\u4f1a\u660e\u663e\u51cf\u6162\u6392\u5e8f\u7684\u901f\u5ea6\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5de6\u7aef\u3001\u53f3\u7aef\u548c\u4e2d\u5fc3\u4f4d\u7f6e\u4e0a\u7684\u4e09\u4e2a\u5143\u7d20\u7684\u4e2d\u503c\u4f5c\u4e3a\u4e3b\u5143\u3002 \u8fd9\u6837\u6d88\u9664\u4e86\u9519\u8bef\u65b9\u6cd5\u4e2d\u7684\u6700\u574f\u60c5\u5f62\uff0c\u51cf\u5c11\u4e86\u5feb\u901f\u6392\u5e8f\u5927\u6982 5% \u7684\u8fd0\u884c\u65f6\u95f4\u3002","title":"\u9009\u53d6\u4e3b\u5143"},{"location":"ds/sort/#_10","text":"\u9996\u5148\u6211\u4eec\u5c06\u4e3b\u5143\u548c\u6700\u540e\u7684\u5143\u7d20\u4ea4\u6362\uff0c\u4f7f\u5f97\u4e3b\u5143\u79bb\u5f00\u5c06\u8981\u5206\u5272\u7684\u6570\u636e\u6bb5\uff0c\u968f\u540e i \u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0cj \u4ece\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u3002\uff08\u5047\u8bbe\u6240\u6709\u5143\u7d20\u4e92\u5f02\uff09 \u5f53 i \u5728 j \u7684\u5de6\u8fb9\u65f6\uff0c\u6211\u4eec\u5c06 i \u53f3\u79fb\uff0c\u79fb\u8fc7\u90a3\u4e9b\u5c0f\u4e8e\u4e3b\u5143\u7684\u5143\u7d20\uff0c\u5e76\u5c06 j \u5de6\u79fb\uff0c\u79fb\u8fc7\u90a3\u4e9b\u5927\u4e8e\u4e3b\u5143\u7684\u5143\u7d20\u3002 \u5f53 i \u548c j \u505c\u6b62\u65f6\uff0ci \u6307\u5411\u4e00\u4e2a\u5927\u5143\u7d20\u800c j \u6307\u5411\u4e00\u4e2a\u5c0f\u5143\u7d20\uff0c\u5982\u679c i \u5728 j \u7684\u5de6\u8fb9\u90a3\u4e48\u5c06\u8fd9\u4e24\u4e2a\u5143\u7d20\u4e92\u6362\u3002 \u76f4\u5230 i \u548c j \u5f7c\u6b64\u4ea4\u9519\u65f6\uff0c\u505c\u6b62\u4ea4\u6362 \u5c06 i \u548c\u4e3b\u5143\u4ea4\u6362 \u5bf9\u4e8e\u90a3\u4e9b\u7b49\u4e8e\u4e3b\u5143\u7684\u5173\u952e\u5b57\uff0c\u6211\u4eec\u91c7\u7528\u505c\u6b62 i j \u5e76\u4ea4\u6362\u7684\u7b56\u7565\u3002\u56e0\u4e3a\u82e5 i j \u4e0d\u505c\u6b62\uff0c\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u6240\u6709\u5173\u952e\u5b57\u90fd\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u6709\u7a0b\u5e8f\u9632\u6b62 i j \u8d85\u51fa\u6570\u7ec4\u7684\u754c\u9650\u3002\u6700\u540e\u6211\u4eec\u4f1a\u628a\u4e3b\u5143\u4ea4\u6362\u5230 i \u7684\u6700\u540e\u4f4d\u7f6e\u4e0a\uff0c\u4e5f\u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u6837\u6211\u4eec\u53c8\u9677\u5165\u4e86\u6700\u574f\u60c5\u51b5\u3002","title":"\u5212\u5206\u7b56\u7565"},{"location":"ds/sort/#_11","text":"\u5bf9\u4e8e\u5f88\u5c0f\u7684\u6570\u7ec4( \\(N\\leq 20\\) )\u5feb\u901f\u6392\u5e8f\u4e0d\u5982\u63d2\u5165\u6392\u5e8f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u622a\u6b62\u8303\u56f4 Cutoff( e.g. 10). \u5f53 N \u5c0f\u4e8e\u9608\u503c\u7684\u65f6\u5019\u91c7\u7528\u63d2\u5165\u6392\u5e8f.","title":"\u5c0f\u6570\u7ec4"},{"location":"ds/sort/#_12","text":"void Quicksort ( ElementType A [ ], int N ) { Qsort ( A , 0 , N - 1 ); /* A: the array */ /* 0: Left index */ /* N \u2013 1: Right index */ } /* Return median of Left, Center, and Right */ /* Order these and hide the pivot */ ElementType Median3 ( ElementType A [ ], int Left , int Right ) { int Center = ( Left + Right ) / 2 ; if ( A [ Left ] > A [ Center ] ) Swap ( & A [ Left ], & A [ Center ] ); if ( A [ Left ] > A [ Right ] ) Swap ( & A [ Left ], & A [ Right ] ); if ( A [ Center ] > A [ Right ] ) Swap ( & A [ Center ], & A [ Right ] ); /* Invariant: A[ Left ] <= A[ Center ] <= A[ Right ] */ Swap ( & A [ Center ], & A [ Right - 1 ] ); /* Hide pivot */ /* only need to sort A[ Left + 1 ] \u2026 A[ Right \u2013 2 ] */ return A [ Right - 1 ]; /* Return pivot */ } void Qsort ( ElementType A [ ], int Left , int Right ) { int i , j ; ElementType Pivot ; if ( Left + Cutoff <= Right ) { /* if the sequence is not too short */ Pivot = Median3 ( A , Left , Right ); /* select pivot */ i = Left ; j = Right \u2013 1 ; /* why not set Left+1 and Right-2? */ for ( ; ; ) { while ( A [ + + i ] < Pivot ) { } /* scan from left */ while ( A [ \u2013 \u2013 j ] > Pivot ) { } /* scan from right */ if ( i < j ) Swap ( & A [ i ], & A [ j ] ); /* adjust partition */ else break ; /* partition done */ } Swap ( & A [ i ], & A [ Right - 1 ] ); /* restore pivot */ Qsort ( A , Left , i - 1 ); /* recursively sort left part */ Qsort ( A , i + 1 , Right ); /* recursively sort right part */ } /* end if - the sequence is long */ else /* do an insertion sort on the short subarray */ InsertionSort ( A + Left , Right - Left + 1 ); } \u5728\u6700\u5f00\u59cb\u9009\u53d6\u4e3b\u5143\u65f6\uff0c\u6211\u4eec\u5c06 A[left],A[mid],A[Right] \u8fdb\u884c\u6392\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c06\u8f83\u5c0f\u503c\u653e\u5728\u4e86\u6700\u5de6\u8fb9\uff0c\u8f83\u5927\u503c\u653e\u5728\u4e86\u6700\u53f3\u8fb9\uff0c\u8fd9\u7b26\u5408\u5206\u5272\u7684\u8981\u6c42\u3002\u6b64\u5916\u7531\u4e8e A[left] \u6bd4\u4e3b\u5143\u5c0f\uff0c\u6211\u4eec\u4e0d\u7528\u62c5\u5fc3 j \u8d8a\u754c\u3002","title":"\u5b9e\u73b0"},{"location":"ds/sort/#_13","text":"\\(T(N)=T(i)+T(N-i-1+)+cN\\) \u5176\u4e2d \\(i=|S_1|\\) \u6700\u574f\u60c5\u5f62\uff1a\u4e3b\u5143\u59cb\u7ec8\u662f\u6700\u5c0f\u5143\u7d20\uff0c\u6b64\u65f6 \\(i=0\\) \u5219\u9012\u63a8\u5173\u7cfb\u4e3a \\(T(N)=T(N-1)+cN,N>1\\) \u90a3\u4e48 \\(T(N)=T(1)+d\\sum\\limits_{i=2}^N i=O(N^2)\\) \u6700\u597d\u60c5\u5f62\uff1a\u4e3b\u5143\u6b63\u597d\u4f4d\u4e8e\u4e2d\u95f4 \\(T(N)=2T(N/2)+cN\\Rightarrow T(N)=O(N\\log N)\\) \u5e73\u5747\u60c5\u5f62\uff1a \\(T(N)=\\dfrac{2}{N}\\sum\\limits_{j=0}^{N-1}T(j)+cN\\Rightarrow T(N)=O(N\\log N)\\)","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"ds/sort/#_14","text":"\u4ea4\u6362\u4e24\u4e2a\u5927\u578b\u7684\u7ed3\u6784\u53ef\u80fd\u662f\u975e\u5e38\u6602\u8d35\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8ba9\u8f93\u5165\u6570\u7ec4\u5305\u542b\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\uff0c\u901a\u8fc7\u6bd4\u8f83\u6307\u9488\u6307\u5411\u7684\u5173\u952e\u5b57\uff0c\u5fc5\u8981\u65f6\u4ea4\u6362\u6307\u9488\u6765\u8fdb\u884c\u6392\u5e8f\u3002","title":"\u5927\u578b\u7ed3\u6784\u7684\u6392\u5e8f"},{"location":"ds/sort/#_15","text":"\u53ea\u4f7f\u7528\u6bd4\u8f83\u7684\u4efb\u610f\u6392\u5e8f\u7b97\u6cd5\u6700\u574f\u60c5\u5f62\u4e0b\u90fd\u9700\u8981 \\(\\Omega(N\\log N)\\) \u4f7f\u7528\u51b3\u7b56\u6811\u8bc1\u660e\uff1a\u5171 \\(N!\\) \u79cd\u6392\u5e8f\u53ef\u80fd\uff0c\u56e0\u6b64\u51b3\u7b56\u4e8c\u53c9\u6811\u6709 \\(N!\\) \u7247\u53f6\u5b50\uff0c\u5219\u6811\u7684\u6df1\u5ea6\u81f3\u5c11\u4e3a \\(\\log(N!)=\\Omega(N\\log N)\\)","title":"\u6392\u5e8f\u7684\u4e00\u822c\u4e0b\u754c"},{"location":"ds/sort/#_16","text":"\u82e5\u8f93\u5165\u6570\u636e \\(A_1,A_2,\\ldots,A_N\\) \u90fd\u5c0f\u4e8e \\(M\\) , \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(M\\) \u7684 Count \u6570\u7ec4\uff0c\u521d\u59cb\u5316\u4e3a\u5168 0. \u4e8e\u662f Count \u6709 \\(M\\) \u4e2a\u6876\uff0c\u8bfb\u5165\u5230 \\(A_i\\) \u65f6 Count[Ai] \u81ea\u589e\u4e00\u3002\u6240\u6709\u6570\u636e\u8bfb\u5b8c\u540e\u626b\u63cf\u6570\u7ec4 Count \u6253\u5370\u6392\u5e8f\u540e\u7684\u8868\u3002 { initialize count [ ]; while ( read in a student \u2019 s record ) insert to list count [ stdnt . grade ]; for ( i = 0 ; i < M ; i ++ ) { if ( count [ i ]) output list count [ i ]; } } \\(O(M+N)\\) LSB MSB","title":"\u6876\u6392\u5e8f"},{"location":"ds/tree/","text":"\u6811 \u00b6 \u9884\u5907\u77e5\u8bc6 \u00b6 \u57fa\u672c\u6982\u5ff5 \u00b6 \u6811 \u662f\u4e00\u4e2a\u8282\u70b9\u7684\u96c6\u5408\u3002\u5f53\u96c6\u5408\u975e\u7a7a\u65f6\uff0c\u6811\u5305\u62ec \u6839 0 \u6216\u591a\u4e2a\u975e\u7a7a\u7684\u5b50\u6811 \\(T_1,T_2,\\ldots,T_k\\) \uff0c\u8fd9\u4e9b\u5b50\u6811\u4e2d\u6bcf\u4e00\u68f5\u5b50\u6811\u90fd\u88ab\u6765\u81ea\u6839 r \u7684\u4e00\u6761\u6709\u5411\u7684\u8fb9\u6240\u8fde\u63a5\u3002 \u6bcf\u4e00\u68f5\u5b50\u6811\u7684\u6839\u53eb\u505a\u6839 r \u7684 \u513f\u5b50 \uff0c\u800c r \u662f\u6bcf\u4e00\u68f5\u5b50\u6811\u7684\u6839\u7684 \u7236\u4eb2 \u3002 \u4e00\u68f5\u6811\u662f \\(N\\) \u4e2a\u8282\u70b9\u548c \\(N-1\\) \u6761\u8fb9\u7684\u96c6\u5408\u3002 \u6ca1\u6709\u513f\u5b50\u7684\u8282\u70b9\u79f0\u4e3a \u6811\u53f6 \u5177\u6709\u76f8\u540c\u7236\u4eb2\u7684\u8282\u70b9\u79f0\u4e3a \u5144\u5f1f \u4e00\u4e2a\u70b9\u7684 \u5ea6 \uff0c\u662f\u8fd9\u4e2a\u70b9\u7684\u513f\u5b50\u6570\u91cf \u4e00\u68f5\u6811\u7684 \u5ea6 \uff0c\u662f\u8fd9\u68f5\u6811\u91cc\u70b9\u7684\u5ea6\u6570\u7684\u6700\u5927\u503c\uff0c\u5373 \\(\\max\\limits_{node\\in tree}\\{deg(node)\\}\\) \u4ece\u8282\u70b9 \\(n_1\\) \u5230 \\(n_k\\) \u7684 \u8def\u5f84 \u5b9a\u4e49\u4e3a \\(n_1,n_2,\\ldots,n_k\\) \u7684\u4e00\u4e2a\u5e8f\u5217\uff0c\u4f7f\u5f97\u5bf9\u4e8e \\(1\\leq i < k\\) \u8282\u70b9 \\(n_i\\) \u662f \\(n_{i+1}\\) \u7684\u7236\u4eb2\u3002\u8fd9\u6761\u8def\u5f84\u662f\u552f\u4e00\u7684\u3002 \u8def\u5f84\u7684 \u957f\u5ea6 \u5c31\u662f\u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u6570\u91cf \u5bf9\u4e8e\u4efb\u610f\u8282\u70b9 \\(n_i\\) , \\(n_i\\) \u7684 \u6df1\u5ea6 \u4e3a\u4ece\u6839\u5230 \\(n_i\\) \u7684\u552f\u4e00\u8def\u5f84\u7684\u957f\u5ea6\u3002 \u5bf9\u4e8e\u4efb\u610f\u8282\u70b9 \\(n_i\\) , \\(n_i\\) \u7684 \u9ad8\u5ea6 \u4e3a\u4ece \\(n_i\\) \u5230\u4e00\u7247\u6811\u53f6\u7684\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u3002 \u4e00\u68f5\u6811\u7684\u9ad8\u5ea6/\u6df1\u5ea6\uff1a\u6839\u7684\u9ad8\u5ea6 \u5982\u679c\u5b58\u5728\u4ece \\(n_1\\) \u5230 \\(n_2\\) \u7684\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48 \\(n_1\\) \u662f \\(n_2\\) \u7684\u4e00\u4f4d \u7956\u5148 \uff0c\u800c \\(n_2\\) \u662f \\(n_1\\) \u7684\u4e00\u4e2a \u540e\u88d4 \uff0c\u5982\u679c \\(n_1\\neq n_2\\) \u79f0\u4e3a \u771f\u7956\u5148\u548c\u771f\u540e\u88d4 \u3002 \u5b9e\u73b0 \u00b6 \u6211\u4eec\u8fd9\u91cc\u4f7f\u7528 FirstChild-NextSibling Representation, \u5c06\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u653e\u5728\u6811\u8282\u70b9\u7684\u94fe\u8868\u4e2d typedef struct TreeNode * PrtToNode ; struct Tree Node { ElementType Element ; PtrToNode FirstChild ; PtrToNode NextSibling ; } \u4e8c\u53c9\u6811 \u00b6 \u4e8c\u53c9\u6811 \u662f\u4e00\u68f5\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u4e0d\u80fd\u591a\u4e8e\u4e24\u4e2a\u3002 \u8868\u8fbe\u5f0f\u6811 \u00b6 \u8868\u8fbe\u5f0f\u6811\u7684\u6811\u53f6\u662f\u64cd\u4f5c\u6570\uff0c\u6bd4\u5982\u5e38\u6570\u6216\u53d8\u91cf\uff0c\u800c\u5176\u4ed6\u7684\u8282\u70b9\u4e3a\u64cd\u4f5c\u7b26\u3002\u56e0\u4e3a\u6211\u4eec\u7684\u64cd\u4f5c\u7b26\u4e00\u822c\u662f\u4e8c\u5143\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\u5982\u679c\u6709\u5355\u76ee\u64cd\u4f5c\u7b26\uff0c\u90a3\u4e48\u8282\u70b9\u5c31\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u3002 Example \\(A+B*C/D\\) \u8868\u793a\u5982\u4e0b\uff1a \u6811\u7684\u904d\u5386 \u00b6 \u6811\u7684\u904d\u5386 \u5373\u6bcf\u4e2a\u8282\u70b9\u8bbf\u95ee\u4e00\u6b21 \u524d\u5e8f\u904d\u5386 void preorder ( tree_ptr tree ) { if ( tree ) { visit ( tree ); for ( each child C of tree ) preorder ( C ); } } \u540e\u5e8f\u904d\u5386 void postorder ( tree_ptr tree ) { if ( tree ) { for ( each child C of tree ) postorder ( C ); visit ( tree ); } } \u5c42\u5e8f\u904d\u5386 void levelorder ( tree_ptr tree ) { enqueue ( tree ); while ( queue is not empty ) { visit ( T = dequeue ( ) ); for ( each child C of T ) enqueue ( C ); } } \u4e2d\u5e8f\u904d\u5386 void inorder ( tree_ptr tree ) { if ( tree ) { inorder ( tree -> Left ); visit ( tree -> Element ); inorder ( tree -> Right ); } } Example \u4e2d\u5e8f\u904d\u5386: \\(A+B*C/D\\) \u524d\u5e8f\u904d\u5386: \\(+A/*BCD\\) * \u540e\u5e8f\u904d\u5386: \\(ABC*D/+\\) \u7ebf\u7d22\u4e8c\u53c9\u6811 \u00b6 \u89c4\u5219: \u5982\u679c Tree->Left \u4e3a\u7a7a\uff0c\u7528\u4e00\u4e2a\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f53\u524d\u8282\u70b9\u7684\u524d\u9a71\u7684\u6307\u9488\u4ee3\u66ff\u5b83 \u5982\u679c Tree->Right \u4e3a\u7a7a\uff0c\u7528\u4e00\u4e2a\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f53\u524d\u8282\u70b9\u7684\u540e\u7ee7\u7684\u6307\u9488\u4ee3\u66ff\u5b83 \u8fd9\u91cc\u6ca1\u6709\u7a7a\u95f2\u7684\u6307\u9488\uff0c\u56e0\u6b64\u4e00\u68f5\u7ebf\u7d22\u4e8c\u53c9\u6811\u9700\u8981\u6709\u4e00\u4e2a\u5de6\u513f\u5b50\u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5934\u8282\u70b9\u3002 typedef struct ThreadedTreeNode * PtrTo ThreadedNode ; typedef struct PtrToThreadedNode ThreadedTree ; typedef struct ThreadedTreeNode { int LeftThread ; /* if it is TRUE, then Left */ ThreadedTree Left ; /* is a thread, not a child ptr. */ ElementType Element ; int RightThread ; /* if it is TRUE, then Right */ ThreadedTree Right ; /* is a thread, not a child ptr. */ } Example \u90a3\u4e48\u5b83\u5bf9\u5e94\u7684\u7ebf\u7d22\u4e8c\u53c9\u6811\u5982\u4e0b: Note \u5728\u6811\u91cc\u9762\uff0c\u513f\u5b50\u7684\u6b21\u5e8f\u6ca1\u6709\u5f71\u54cd\u3002\u4f46\u5bf9\u4e8e\u4e8c\u53c9\u6811\u800c\u8a00\uff0c\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u662f\u4e0d\u540c\u7684\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811 \u6240\u6709\u53f6\u8282\u70b9\u90fd\u4f4d\u4e8e\u76f8\u90bb\u7684\u4e24\u4e2a\u5c42\u4e0a \u4e8c\u53c9\u6811\u7684\u6027\u8d28 \u00b6 \u7b2c i \u5c42\u8282\u70b9\u4e2a\u6570\u6700\u591a\u4e3a \\(2^{i-1},i\\geq 1\\) . \u6df1\u5ea6\u4e3a k \u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709 \\(2^k-1\\) \u4e2a\u8282\u70b9\u3002 \u5bf9\u4e8e\u4efb\u4f55\u975e\u7a7a\u4e8c\u53c9\u6811\u90fd\u6709 \\(n_0=n_2+1\\) . \u5176\u4e2d \\(n_0\\) \u662f\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\uff0c \\(n_2\\) \u662f\u5ea6\u6570\u4e3a 2 \u7684\u8282\u70b9\u4e2a\u6570\u3002 Proof \u4ee4 \\(n_1\\) \u8868\u793a\u5ea6\u6570\u4e3a 1 \u7684\u8282\u70b9\u4e2a\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u6709 \\(n=n_0+n_1+n_2\\) . \u4ee4 \\(B\\) \u8868\u793a\u6240\u6709\u7684\u8fb9\uff0c\u90a3\u4e48 \\(B=n-1\\) \uff0c\u540c\u65f6\u53c8\u6709 \\(B=n_1+2n_2\\) . \u8054\u7acb\u53ef\u5f97\u5230 \\(n_0=n_2+1\\) . \u67e5\u627e\u6811ADT\u2014\u2014\u4e8c\u53c9\u67e5\u627e\u6811 \u00b6 \u5b9a\u4e49 \u00b6 \u4e00\u68f5 \u4e8c\u53c9\u67e5\u627e\u6811 \u662f\u4e8c\u53c9\u7684\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u90a3\u4e48\u6ee1\u8db3\u4e0b\u5217\u6027\u8d28: \u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u662f\u5404\u4e0d\u76f8\u540c\u7684\u6574\u6570 \u5982\u679c\u5de6\u5b50\u6811\u975e\u7a7a\uff0c\u90a3\u4e48\u5de6\u5b50\u6811\u6240\u6709\u5173\u952e\u5b57\u7684\u503c\u5fc5\u987b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u5173\u952e\u5b57 \u5982\u679c\u53f3\u5b50\u6811\u975e\u7a7a\uff0c\u90a3\u4e48\u53f3\u5b50\u6811\u6240\u6709\u5173\u952e\u5b57\u7684\u503c\u5fc5\u987b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u5173\u952e\u5b57 \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4ecd\u662f\u4e8c\u53c9\u67e5\u627e\u6811 ADT \u6a21\u578b \u00b6 \u5bf9\u8c61: \u4e00\u4e2a\u6709\u9650\u7684\u6709\u5e8f\u96c6 \u64cd\u4f5c: \u521d\u59cb\u5316 \u67e5\u627e\u5173\u952e\u5b57 \u67e5\u627e\u6700\u5927/\u6700\u5c0f\u7684\u5173\u952e\u5b57 \u63d2\u5165\u5173\u952e\u5b57 \u5220\u9664\u5173\u952e\u5b57 \u68c0\u7d22\u4f4d\u7f6e \u5b9e\u73b0 \u00b6 \u67e5\u627e\u5173\u952e\u5b57 \u8fd4\u56de\u6811 T \u4e2d\u5177\u6709\u5173\u952e\u5b57 X \u8282\u70b9\u7684\u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6811 T \u7684\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811\u8fdb\u884c\u9012\u5f52\u8c03\u7528\uff0c\u67e5\u627e\u54ea\u4e2a\u5b50\u6811\u53d6\u51b3\u4e8e X \u4e0e\u5f53\u524d\u6839\u8282\u70b9\u5173\u952e\u5b57\u7684\u5927\u5c0f\u5173\u7cfb\u3002 \\(T(N)=S(N)=O(d)\\) , \u8fd9\u91cc d \u662f\u6811\u7684\u6df1\u5ea6 Position Find ( ElementType X , SearchTree T ) { if ( T == NULL ) return NULL ; /* not found in an empty tree */ if ( X < T -> Element ) /* if smaller than root */ return Find ( X , T -> Left ); /* search left subtree */ else if ( X > T -> Element ) /* if larger than root */ return Find ( X , T -> Right ); /* search right subtree */ else /* if X == root */ return T ; /* found */ } \u6ce8\u610f\u5230\u8fd9\u662f\u4e00\u4e2a\u5c3e\u9012\u5f52\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f18\u5316\u4e3a\u8fed\u4ee3\u7248\u672c Position Iter_Find ( ElementType X , SearchTree T ) { /* iterative version of Find */ while ( T ) { if ( X == T -> Element ) return T ; /* found */ if ( X < T -> Element ) T = T -> Left ; /*move down along left path */ else T = T -> Right ; /* move down along right path */ } /* end while-loop */ return NULL ; /* not found */ } \u67e5\u627e\u6700\u5c0f/\u6700\u5927\u5173\u952e\u5b57 \u67e5\u627e\u6700\u5c0f\u5143\u7d20\uff0c\u53ea\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u53ea\u8981\u6709\u5de6\u513f\u5b50\u5c31\u5411\u5de6\u8fdb\u884c\uff0c\u7ec8\u6b62\u70b9\u5c31\u662f\u6700\u5c0f\u7684\u5143\u7d20\u4e86\u3002\u67e5\u627e\u6700\u5927\u5143\u7d20\u7c7b\u4f3c\u3002 \\(T(N)=O(d)\\) Position FindMin ( SearchTree T ) { if ( T == NULL ) return NULL ; /* not found in an empty tree */ else if ( T -> Left == NULL ) return T ; /* found left most */ else return FindMin ( T -> Left ); /* keep moving to left */ } Position FindMax ( SearchTree T ) { if ( T != NULL ) while ( T -> Right != NULL ) T = T -> Right ; /* keep moving to find right most */ return T ; /* return NULL or the right most */ } \u63d2\u5165 \u63d2\u5165\u53ef\u4ee5\u7528\u67e5\u627e\u7684\u601d\u8def\uff0c\u5982\u679c\u627e\u5230 X \u90a3\u4e48\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff08\u6216\u8005\u505a\u4e00\u4e9b\u66f4\u65b0\uff09\uff0c\u5426\u5219\u5c31\u5c06 X \u63d2\u5165\u5230\u904d\u5386\u8def\u5f84\u4e0a\u7684\u6700\u540e\u4e00\u70b9\u4e0a\u3002 \\(T(N)=O(d)\\) SearchTree Insert ( ElementType X , SearchTree T ) { if ( T == NULL ) { /* Create and return a one-node tree */ T = malloc ( sizeof ( struct TreeNode ) ); if ( T == NULL ) FatalError ( \"Out of space!!!\" ); else { T -> Element = X ; T -> Left = T -> Right = NULL ; } } /* End creating a one-node tree */ else /* If there is a tree */ if ( X < T -> Element ) T -> Left = Insert ( X , T -> Left ); else if ( X > T -> Element ) T -> Right = Insert ( X , T -> Right ); /* Else X is in the tree already; we'll do nothing */ return T ; /* Do not forget this line!! */ } \u5220\u9664 \u5982\u679c\u8981\u5220\u9664\u7684\u8282\u70b9\u662f\u6811\u53f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u5220\u9664\uff0c\u5982\u679c\u8282\u70b9\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u53ef\u4ee5\u5728\u7236\u8282\u70b9\u8c03\u6574\u6307\u9488\u540e\u7ed5\u8fc7\u8be5\u8282\u70b9\u5e76\u5220\u9664\u3002 \u4f46\u5982\u679c\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u4e00\u822c\u7684\u5220\u9664\u7b56\u7565\u662f\u7528\u5176\u53f3\u5b50\u6811\u4e2d\u6700\u5c0f\u5143\uff08\u6216\u8005\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u5143\uff09\u4ee3\u66ff\u8be5\u8282\u70b9\u7684\u6570\u636e\u5e76\u9012\u5f52\u5730\u5220\u9664\u90a3\u4e2a\u8282\u70b9\u3002 \\(T(N)=O(h)\\) , \u5176\u4e2d h \u662f\u6811\u7684\u9ad8\u5ea6\u3002 SearchTree Delete ( ElementType X , SearchTree T ) { Position TmpCell ; if ( T == NULL ) Error ( \"Element not found\" ); else if ( X < T -> Element ) /* Go left */ T -> Left = Delete ( X , T -> Left ); else if ( X > T -> Element ) /* Go right */ T -> Right = Delete ( X , T -> Right ); else /* Found element to be deleted */ if ( T -> Left && T -> Right ) { /* Two children */ /* Replace with smallest in right subtree */ TmpCell = FindMin ( T -> Right ); T -> Element = TmpCell -> Element ; T -> Right = Delete ( T -> Element , T -> Right ); } /* End if */ else { /* One or zero child */ TmpCell = T ; if ( T -> Left == NULL ) /* Also handles 0 child */ T = T -> Right ; else if ( T -> Right == NULL ) T = T -> Left ; free ( TmpCell ); } /* End else 1 or 0 child */ return T ; Note \u5982\u679c\u8fd9\u91cc\u6ca1\u6709\u5f88\u591a\u5220\u9664\u64cd\u4f5c\uff0c\u901a\u5e38\u4f7f\u7528 \u61d2\u60f0\u64cd\u4f5c \u7684\u7b56\u7565\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u88ab\u5220\u9664\u65f6\uff0c\u6211\u4eec\u4e0d\u5220\u9664\u5b83\uff0c\u505a\u4e00\u4e2a\u5220\u9664\u7684\u8bb0\u53f7\uff0c\u8fd9\u6837\u7684\u597d\u5904\u662f\u5728\u6709\u91cd\u590d\u5173\u952e\u5b57\u65f6\u53ef\u4ee5\u76f4\u63a5\u5728\u9891\u7387\u4e0a\u52a0\u51cf\u3002 \u5e73\u5747\u60c5\u5f62\u5206\u6790 \u00b6 Q. \u628a n \u4e2a\u5143\u7d20\u653e\u5728\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\uff0c\u8fd9\u68f5\u6811\u53ef\u4ee5\u6709\u591a\u9ad8\uff1f A. \u9ad8\u5ea6\u53d6\u51b3\u4e8e\u63d2\u5165\u7684\u987a\u5e8f\u3002\u6700\u574f\u53ef\u4ee5\u8fbe\u5230 \\(N\\) Example \u63d2\u5165\u987a\u5e8f 4, 2, 1, 3, 6, 5, 7 \u63d2\u5165\u987a\u5e8f 1, 2, 3, 4, 5, 6, 7 Info \u5144\u5f1f: sibling \u64cd\u4f5c\u6570: operand \u524d\u5e8f\u904d\u5386: preorder traversal \u540e\u5e8f\u904d\u5386: postorder traversal \u5c42\u5e8f\u904d\u5386: levelorder traversal \u4e2d\u5e8f\u904d\u5386: inorder traversal \u7ebf\u7d22\u4e8c\u53c9\u6811: Threaded Binary Trees","title":"\u6811"},{"location":"ds/tree/#_1","text":"","title":"\u6811"},{"location":"ds/tree/#_2","text":"","title":"\u9884\u5907\u77e5\u8bc6"},{"location":"ds/tree/#_3","text":"\u6811 \u662f\u4e00\u4e2a\u8282\u70b9\u7684\u96c6\u5408\u3002\u5f53\u96c6\u5408\u975e\u7a7a\u65f6\uff0c\u6811\u5305\u62ec \u6839 0 \u6216\u591a\u4e2a\u975e\u7a7a\u7684\u5b50\u6811 \\(T_1,T_2,\\ldots,T_k\\) \uff0c\u8fd9\u4e9b\u5b50\u6811\u4e2d\u6bcf\u4e00\u68f5\u5b50\u6811\u90fd\u88ab\u6765\u81ea\u6839 r \u7684\u4e00\u6761\u6709\u5411\u7684\u8fb9\u6240\u8fde\u63a5\u3002 \u6bcf\u4e00\u68f5\u5b50\u6811\u7684\u6839\u53eb\u505a\u6839 r \u7684 \u513f\u5b50 \uff0c\u800c r \u662f\u6bcf\u4e00\u68f5\u5b50\u6811\u7684\u6839\u7684 \u7236\u4eb2 \u3002 \u4e00\u68f5\u6811\u662f \\(N\\) \u4e2a\u8282\u70b9\u548c \\(N-1\\) \u6761\u8fb9\u7684\u96c6\u5408\u3002 \u6ca1\u6709\u513f\u5b50\u7684\u8282\u70b9\u79f0\u4e3a \u6811\u53f6 \u5177\u6709\u76f8\u540c\u7236\u4eb2\u7684\u8282\u70b9\u79f0\u4e3a \u5144\u5f1f \u4e00\u4e2a\u70b9\u7684 \u5ea6 \uff0c\u662f\u8fd9\u4e2a\u70b9\u7684\u513f\u5b50\u6570\u91cf \u4e00\u68f5\u6811\u7684 \u5ea6 \uff0c\u662f\u8fd9\u68f5\u6811\u91cc\u70b9\u7684\u5ea6\u6570\u7684\u6700\u5927\u503c\uff0c\u5373 \\(\\max\\limits_{node\\in tree}\\{deg(node)\\}\\) \u4ece\u8282\u70b9 \\(n_1\\) \u5230 \\(n_k\\) \u7684 \u8def\u5f84 \u5b9a\u4e49\u4e3a \\(n_1,n_2,\\ldots,n_k\\) \u7684\u4e00\u4e2a\u5e8f\u5217\uff0c\u4f7f\u5f97\u5bf9\u4e8e \\(1\\leq i < k\\) \u8282\u70b9 \\(n_i\\) \u662f \\(n_{i+1}\\) \u7684\u7236\u4eb2\u3002\u8fd9\u6761\u8def\u5f84\u662f\u552f\u4e00\u7684\u3002 \u8def\u5f84\u7684 \u957f\u5ea6 \u5c31\u662f\u8def\u5f84\u4e0a\u7684\u8fb9\u7684\u6570\u91cf \u5bf9\u4e8e\u4efb\u610f\u8282\u70b9 \\(n_i\\) , \\(n_i\\) \u7684 \u6df1\u5ea6 \u4e3a\u4ece\u6839\u5230 \\(n_i\\) \u7684\u552f\u4e00\u8def\u5f84\u7684\u957f\u5ea6\u3002 \u5bf9\u4e8e\u4efb\u610f\u8282\u70b9 \\(n_i\\) , \\(n_i\\) \u7684 \u9ad8\u5ea6 \u4e3a\u4ece \\(n_i\\) \u5230\u4e00\u7247\u6811\u53f6\u7684\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u3002 \u4e00\u68f5\u6811\u7684\u9ad8\u5ea6/\u6df1\u5ea6\uff1a\u6839\u7684\u9ad8\u5ea6 \u5982\u679c\u5b58\u5728\u4ece \\(n_1\\) \u5230 \\(n_2\\) \u7684\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48 \\(n_1\\) \u662f \\(n_2\\) \u7684\u4e00\u4f4d \u7956\u5148 \uff0c\u800c \\(n_2\\) \u662f \\(n_1\\) \u7684\u4e00\u4e2a \u540e\u88d4 \uff0c\u5982\u679c \\(n_1\\neq n_2\\) \u79f0\u4e3a \u771f\u7956\u5148\u548c\u771f\u540e\u88d4 \u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"ds/tree/#_4","text":"\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528 FirstChild-NextSibling Representation, \u5c06\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u653e\u5728\u6811\u8282\u70b9\u7684\u94fe\u8868\u4e2d typedef struct TreeNode * PrtToNode ; struct Tree Node { ElementType Element ; PtrToNode FirstChild ; PtrToNode NextSibling ; }","title":"\u5b9e\u73b0"},{"location":"ds/tree/#_5","text":"\u4e8c\u53c9\u6811 \u662f\u4e00\u68f5\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u4e0d\u80fd\u591a\u4e8e\u4e24\u4e2a\u3002","title":"\u4e8c\u53c9\u6811"},{"location":"ds/tree/#_6","text":"\u8868\u8fbe\u5f0f\u6811\u7684\u6811\u53f6\u662f\u64cd\u4f5c\u6570\uff0c\u6bd4\u5982\u5e38\u6570\u6216\u53d8\u91cf\uff0c\u800c\u5176\u4ed6\u7684\u8282\u70b9\u4e3a\u64cd\u4f5c\u7b26\u3002\u56e0\u4e3a\u6211\u4eec\u7684\u64cd\u4f5c\u7b26\u4e00\u822c\u662f\u4e8c\u5143\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\u5982\u679c\u6709\u5355\u76ee\u64cd\u4f5c\u7b26\uff0c\u90a3\u4e48\u8282\u70b9\u5c31\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u3002 Example \\(A+B*C/D\\) \u8868\u793a\u5982\u4e0b\uff1a","title":"\u8868\u8fbe\u5f0f\u6811"},{"location":"ds/tree/#_7","text":"\u6811\u7684\u904d\u5386 \u5373\u6bcf\u4e2a\u8282\u70b9\u8bbf\u95ee\u4e00\u6b21 \u524d\u5e8f\u904d\u5386 void preorder ( tree_ptr tree ) { if ( tree ) { visit ( tree ); for ( each child C of tree ) preorder ( C ); } } \u540e\u5e8f\u904d\u5386 void postorder ( tree_ptr tree ) { if ( tree ) { for ( each child C of tree ) postorder ( C ); visit ( tree ); } } \u5c42\u5e8f\u904d\u5386 void levelorder ( tree_ptr tree ) { enqueue ( tree ); while ( queue is not empty ) { visit ( T = dequeue ( ) ); for ( each child C of T ) enqueue ( C ); } } \u4e2d\u5e8f\u904d\u5386 void inorder ( tree_ptr tree ) { if ( tree ) { inorder ( tree -> Left ); visit ( tree -> Element ); inorder ( tree -> Right ); } } Example \u4e2d\u5e8f\u904d\u5386: \\(A+B*C/D\\) \u524d\u5e8f\u904d\u5386: \\(+A/*BCD\\) * \u540e\u5e8f\u904d\u5386: \\(ABC*D/+\\)","title":"\u6811\u7684\u904d\u5386"},{"location":"ds/tree/#_8","text":"\u89c4\u5219: \u5982\u679c Tree->Left \u4e3a\u7a7a\uff0c\u7528\u4e00\u4e2a\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f53\u524d\u8282\u70b9\u7684\u524d\u9a71\u7684\u6307\u9488\u4ee3\u66ff\u5b83 \u5982\u679c Tree->Right \u4e3a\u7a7a\uff0c\u7528\u4e00\u4e2a\u6307\u5411\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f53\u524d\u8282\u70b9\u7684\u540e\u7ee7\u7684\u6307\u9488\u4ee3\u66ff\u5b83 \u8fd9\u91cc\u6ca1\u6709\u7a7a\u95f2\u7684\u6307\u9488\uff0c\u56e0\u6b64\u4e00\u68f5\u7ebf\u7d22\u4e8c\u53c9\u6811\u9700\u8981\u6709\u4e00\u4e2a\u5de6\u513f\u5b50\u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u5934\u8282\u70b9\u3002 typedef struct ThreadedTreeNode * PtrTo ThreadedNode ; typedef struct PtrToThreadedNode ThreadedTree ; typedef struct ThreadedTreeNode { int LeftThread ; /* if it is TRUE, then Left */ ThreadedTree Left ; /* is a thread, not a child ptr. */ ElementType Element ; int RightThread ; /* if it is TRUE, then Right */ ThreadedTree Right ; /* is a thread, not a child ptr. */ } Example \u90a3\u4e48\u5b83\u5bf9\u5e94\u7684\u7ebf\u7d22\u4e8c\u53c9\u6811\u5982\u4e0b: Note \u5728\u6811\u91cc\u9762\uff0c\u513f\u5b50\u7684\u6b21\u5e8f\u6ca1\u6709\u5f71\u54cd\u3002\u4f46\u5bf9\u4e8e\u4e8c\u53c9\u6811\u800c\u8a00\uff0c\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u662f\u4e0d\u540c\u7684\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811 \u6240\u6709\u53f6\u8282\u70b9\u90fd\u4f4d\u4e8e\u76f8\u90bb\u7684\u4e24\u4e2a\u5c42\u4e0a","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811"},{"location":"ds/tree/#_9","text":"\u7b2c i \u5c42\u8282\u70b9\u4e2a\u6570\u6700\u591a\u4e3a \\(2^{i-1},i\\geq 1\\) . \u6df1\u5ea6\u4e3a k \u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709 \\(2^k-1\\) \u4e2a\u8282\u70b9\u3002 \u5bf9\u4e8e\u4efb\u4f55\u975e\u7a7a\u4e8c\u53c9\u6811\u90fd\u6709 \\(n_0=n_2+1\\) . \u5176\u4e2d \\(n_0\\) \u662f\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\uff0c \\(n_2\\) \u662f\u5ea6\u6570\u4e3a 2 \u7684\u8282\u70b9\u4e2a\u6570\u3002 Proof \u4ee4 \\(n_1\\) \u8868\u793a\u5ea6\u6570\u4e3a 1 \u7684\u8282\u70b9\u4e2a\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u6709 \\(n=n_0+n_1+n_2\\) . \u4ee4 \\(B\\) \u8868\u793a\u6240\u6709\u7684\u8fb9\uff0c\u90a3\u4e48 \\(B=n-1\\) \uff0c\u540c\u65f6\u53c8\u6709 \\(B=n_1+2n_2\\) . \u8054\u7acb\u53ef\u5f97\u5230 \\(n_0=n_2+1\\) .","title":"\u4e8c\u53c9\u6811\u7684\u6027\u8d28"},{"location":"ds/tree/#adt","text":"","title":"\u67e5\u627e\u6811ADT\u2014\u2014\u4e8c\u53c9\u67e5\u627e\u6811"},{"location":"ds/tree/#_10","text":"\u4e00\u68f5 \u4e8c\u53c9\u67e5\u627e\u6811 \u662f\u4e8c\u53c9\u7684\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u90a3\u4e48\u6ee1\u8db3\u4e0b\u5217\u6027\u8d28: \u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u5173\u952e\u5b57\uff0c\u662f\u5404\u4e0d\u76f8\u540c\u7684\u6574\u6570 \u5982\u679c\u5de6\u5b50\u6811\u975e\u7a7a\uff0c\u90a3\u4e48\u5de6\u5b50\u6811\u6240\u6709\u5173\u952e\u5b57\u7684\u503c\u5fc5\u987b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u5173\u952e\u5b57 \u5982\u679c\u53f3\u5b50\u6811\u975e\u7a7a\uff0c\u90a3\u4e48\u53f3\u5b50\u6811\u6240\u6709\u5173\u952e\u5b57\u7684\u503c\u5fc5\u987b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u5173\u952e\u5b57 \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4ecd\u662f\u4e8c\u53c9\u67e5\u627e\u6811","title":"\u5b9a\u4e49"},{"location":"ds/tree/#adt_1","text":"\u5bf9\u8c61: \u4e00\u4e2a\u6709\u9650\u7684\u6709\u5e8f\u96c6 \u64cd\u4f5c: \u521d\u59cb\u5316 \u67e5\u627e\u5173\u952e\u5b57 \u67e5\u627e\u6700\u5927/\u6700\u5c0f\u7684\u5173\u952e\u5b57 \u63d2\u5165\u5173\u952e\u5b57 \u5220\u9664\u5173\u952e\u5b57 \u68c0\u7d22\u4f4d\u7f6e","title":"ADT \u6a21\u578b"},{"location":"ds/tree/#_11","text":"\u67e5\u627e\u5173\u952e\u5b57 \u8fd4\u56de\u6811 T \u4e2d\u5177\u6709\u5173\u952e\u5b57 X \u8282\u70b9\u7684\u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6811 T \u7684\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811\u8fdb\u884c\u9012\u5f52\u8c03\u7528\uff0c\u67e5\u627e\u54ea\u4e2a\u5b50\u6811\u53d6\u51b3\u4e8e X \u4e0e\u5f53\u524d\u6839\u8282\u70b9\u5173\u952e\u5b57\u7684\u5927\u5c0f\u5173\u7cfb\u3002 \\(T(N)=S(N)=O(d)\\) , \u8fd9\u91cc d \u662f\u6811\u7684\u6df1\u5ea6 Position Find ( ElementType X , SearchTree T ) { if ( T == NULL ) return NULL ; /* not found in an empty tree */ if ( X < T -> Element ) /* if smaller than root */ return Find ( X , T -> Left ); /* search left subtree */ else if ( X > T -> Element ) /* if larger than root */ return Find ( X , T -> Right ); /* search right subtree */ else /* if X == root */ return T ; /* found */ } \u6ce8\u610f\u5230\u8fd9\u662f\u4e00\u4e2a\u5c3e\u9012\u5f52\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f18\u5316\u4e3a\u8fed\u4ee3\u7248\u672c Position Iter_Find ( ElementType X , SearchTree T ) { /* iterative version of Find */ while ( T ) { if ( X == T -> Element ) return T ; /* found */ if ( X < T -> Element ) T = T -> Left ; /*move down along left path */ else T = T -> Right ; /* move down along right path */ } /* end while-loop */ return NULL ; /* not found */ } \u67e5\u627e\u6700\u5c0f/\u6700\u5927\u5173\u952e\u5b57 \u67e5\u627e\u6700\u5c0f\u5143\u7d20\uff0c\u53ea\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u53ea\u8981\u6709\u5de6\u513f\u5b50\u5c31\u5411\u5de6\u8fdb\u884c\uff0c\u7ec8\u6b62\u70b9\u5c31\u662f\u6700\u5c0f\u7684\u5143\u7d20\u4e86\u3002\u67e5\u627e\u6700\u5927\u5143\u7d20\u7c7b\u4f3c\u3002 \\(T(N)=O(d)\\) Position FindMin ( SearchTree T ) { if ( T == NULL ) return NULL ; /* not found in an empty tree */ else if ( T -> Left == NULL ) return T ; /* found left most */ else return FindMin ( T -> Left ); /* keep moving to left */ } Position FindMax ( SearchTree T ) { if ( T != NULL ) while ( T -> Right != NULL ) T = T -> Right ; /* keep moving to find right most */ return T ; /* return NULL or the right most */ } \u63d2\u5165 \u63d2\u5165\u53ef\u4ee5\u7528\u67e5\u627e\u7684\u601d\u8def\uff0c\u5982\u679c\u627e\u5230 X \u90a3\u4e48\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff08\u6216\u8005\u505a\u4e00\u4e9b\u66f4\u65b0\uff09\uff0c\u5426\u5219\u5c31\u5c06 X \u63d2\u5165\u5230\u904d\u5386\u8def\u5f84\u4e0a\u7684\u6700\u540e\u4e00\u70b9\u4e0a\u3002 \\(T(N)=O(d)\\) SearchTree Insert ( ElementType X , SearchTree T ) { if ( T == NULL ) { /* Create and return a one-node tree */ T = malloc ( sizeof ( struct TreeNode ) ); if ( T == NULL ) FatalError ( \"Out of space!!!\" ); else { T -> Element = X ; T -> Left = T -> Right = NULL ; } } /* End creating a one-node tree */ else /* If there is a tree */ if ( X < T -> Element ) T -> Left = Insert ( X , T -> Left ); else if ( X > T -> Element ) T -> Right = Insert ( X , T -> Right ); /* Else X is in the tree already; we'll do nothing */ return T ; /* Do not forget this line!! */ } \u5220\u9664 \u5982\u679c\u8981\u5220\u9664\u7684\u8282\u70b9\u662f\u6811\u53f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u5373\u5220\u9664\uff0c\u5982\u679c\u8282\u70b9\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u53ef\u4ee5\u5728\u7236\u8282\u70b9\u8c03\u6574\u6307\u9488\u540e\u7ed5\u8fc7\u8be5\u8282\u70b9\u5e76\u5220\u9664\u3002 \u4f46\u5982\u679c\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u4e00\u822c\u7684\u5220\u9664\u7b56\u7565\u662f\u7528\u5176\u53f3\u5b50\u6811\u4e2d\u6700\u5c0f\u5143\uff08\u6216\u8005\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u5143\uff09\u4ee3\u66ff\u8be5\u8282\u70b9\u7684\u6570\u636e\u5e76\u9012\u5f52\u5730\u5220\u9664\u90a3\u4e2a\u8282\u70b9\u3002 \\(T(N)=O(h)\\) , \u5176\u4e2d h \u662f\u6811\u7684\u9ad8\u5ea6\u3002 SearchTree Delete ( ElementType X , SearchTree T ) { Position TmpCell ; if ( T == NULL ) Error ( \"Element not found\" ); else if ( X < T -> Element ) /* Go left */ T -> Left = Delete ( X , T -> Left ); else if ( X > T -> Element ) /* Go right */ T -> Right = Delete ( X , T -> Right ); else /* Found element to be deleted */ if ( T -> Left && T -> Right ) { /* Two children */ /* Replace with smallest in right subtree */ TmpCell = FindMin ( T -> Right ); T -> Element = TmpCell -> Element ; T -> Right = Delete ( T -> Element , T -> Right ); } /* End if */ else { /* One or zero child */ TmpCell = T ; if ( T -> Left == NULL ) /* Also handles 0 child */ T = T -> Right ; else if ( T -> Right == NULL ) T = T -> Left ; free ( TmpCell ); } /* End else 1 or 0 child */ return T ; Note \u5982\u679c\u8fd9\u91cc\u6ca1\u6709\u5f88\u591a\u5220\u9664\u64cd\u4f5c\uff0c\u901a\u5e38\u4f7f\u7528 \u61d2\u60f0\u64cd\u4f5c \u7684\u7b56\u7565\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u88ab\u5220\u9664\u65f6\uff0c\u6211\u4eec\u4e0d\u5220\u9664\u5b83\uff0c\u505a\u4e00\u4e2a\u5220\u9664\u7684\u8bb0\u53f7\uff0c\u8fd9\u6837\u7684\u597d\u5904\u662f\u5728\u6709\u91cd\u590d\u5173\u952e\u5b57\u65f6\u53ef\u4ee5\u76f4\u63a5\u5728\u9891\u7387\u4e0a\u52a0\u51cf\u3002","title":"\u5b9e\u73b0"},{"location":"ds/tree/#_12","text":"Q. \u628a n \u4e2a\u5143\u7d20\u653e\u5728\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\uff0c\u8fd9\u68f5\u6811\u53ef\u4ee5\u6709\u591a\u9ad8\uff1f A. \u9ad8\u5ea6\u53d6\u51b3\u4e8e\u63d2\u5165\u7684\u987a\u5e8f\u3002\u6700\u574f\u53ef\u4ee5\u8fbe\u5230 \\(N\\) Example \u63d2\u5165\u987a\u5e8f 4, 2, 1, 3, 6, 5, 7 \u63d2\u5165\u987a\u5e8f 1, 2, 3, 4, 5, 6, 7 Info \u5144\u5f1f: sibling \u64cd\u4f5c\u6570: operand \u524d\u5e8f\u904d\u5386: preorder traversal \u540e\u5e8f\u904d\u5386: postorder traversal \u5c42\u5e8f\u904d\u5386: levelorder traversal \u4e2d\u5e8f\u904d\u5386: inorder traversal \u7ebf\u7d22\u4e8c\u53c9\u6811: Threaded Binary Trees","title":"\u5e73\u5747\u60c5\u5f62\u5206\u6790"}]}